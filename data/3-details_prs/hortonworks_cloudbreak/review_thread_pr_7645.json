{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDkyMzk0", "number": 7645, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0ODo0NFrODrP57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzowNTozNVrODrg5cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc1OTQ4OnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0ODo0NFrOF7ewKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1MjozM1rOF7e8FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDE1NQ==", "bodyText": "I think it would be nice to see somewhere what are the configs", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397914155", "createdAt": "2020-03-25T14:48:44Z", "author": {"login": "doktoric"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -35,6 +38,23 @@\n     @Inject\n     private List<CmHostGroupRoleConfigProvider> providers;\n \n+    @Value(\"#{'${cb.cm.sharedComponents:}'.split(';')}\")\n+    private List<String> sharedComponentsList;\n+\n+    private Map<String, String> sharedComponents = new HashMap<>();\n+\n+    @PostConstruct\n+    private void parseSharedComponents() {\n+        sharedComponentsList.forEach(s -> {\n+            try {\n+                String[] split = s.split(\"=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNTcwMg==", "bodyText": "Do you mean a log message?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397915702", "createdAt": "2020-03-25T14:50:41Z", "author": {"login": "topolyai5"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -35,6 +38,23 @@\n     @Inject\n     private List<CmHostGroupRoleConfigProvider> providers;\n \n+    @Value(\"#{'${cb.cm.sharedComponents:}'.split(';')}\")\n+    private List<String> sharedComponentsList;\n+\n+    private Map<String, String> sharedComponents = new HashMap<>();\n+\n+    @PostConstruct\n+    private void parseSharedComponents() {\n+        sharedComponentsList.forEach(s -> {\n+            try {\n+                String[] split = s.split(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDE1NQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzIwNQ==", "bodyText": "yep", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397917205", "createdAt": "2020-03-25T14:52:33Z", "author": {"login": "doktoric"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -35,6 +38,23 @@\n     @Inject\n     private List<CmHostGroupRoleConfigProvider> providers;\n \n+    @Value(\"#{'${cb.cm.sharedComponents:}'.split(';')}\")\n+    private List<String> sharedComponentsList;\n+\n+    private Map<String, String> sharedComponents = new HashMap<>();\n+\n+    @PostConstruct\n+    private void parseSharedComponents() {\n+        sharedComponentsList.forEach(s -> {\n+            try {\n+                String[] split = s.split(\"=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDE1NQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc2MTUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0OToxMVrOF7exgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoyODowOVrOF7jlsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ==", "bodyText": "Just a question butmaybe we should use a config json ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397914499", "createdAt": "2020-03-25T14:49:11Z", "author": {"login": "doktoric"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNTk0Mg==", "bodyText": "I think it would add unnecessary complexity. Also it would require a rebuild to run with a new config. On the other hand this property can be modified without building a new CB version.", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397915942", "createdAt": "2020-03-25T14:51:02Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNjc3NQ==", "bodyText": "which is easier to update on the deployed version? in app.yml or in a json?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397916775", "createdAt": "2020-03-25T14:52:03Z", "author": {"login": "topolyai5"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzk3MQ==", "bodyText": "I think it is the same. I am just saying that somehow it is not clear what is the key and the value here ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397917971", "createdAt": "2020-03-25T14:53:28Z", "author": {"login": "doktoric"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxODQxNA==", "bodyText": "json is built into the artifact. app.yml properties can be overwritten with env vars.", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397918414", "createdAt": "2020-03-25T14:54:01Z", "author": {"login": "attilapalfi92"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4Mzg1NA==", "bodyText": "in cb deployer we have capabilities to override any json which contains config. It is true that we can not do the same on the hosted service but the question here is that do we really need such flexibility ? :)", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397983854", "createdAt": "2020-03-25T16:15:37Z", "author": {"login": "doktoric"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MzM5NA==", "bodyText": "If we do not want to change on the hosted service, in this case, we do not need to this flexibility.", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397993394", "createdAt": "2020-03-25T16:28:09Z", "author": {"login": "topolyai5"}, "path": "core/src/main/resources/application.yml", "diffHunk": "@@ -323,6 +323,8 @@ cb:\n     user.role: \"ROLE_USER\"\n     heartbeat.interval: 3\n     missed.heartbeat.interval: 30\n+    sharedComponents: >\n+      HDFS=JOURNALNODE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDQ5OQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc3MDUyOnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1MTowOFrOF7e3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoyMzo0M1rOF7jYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNjAzMA==", "bodyText": "maybe isEqual ?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397916030", "createdAt": "2020-03-25T14:51:08Z", "author": {"login": "doktoric"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null\n+                        && isSameByServiceTypeAndRoleType(provider, serviceComponent)\n+                        && !serviceComponent.getComponent().equals(sharedComponents.get(serviceComponent.getService()))) {\n+                    Map<String, List<ApiClusterTemplateConfig>> configs = configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>());\n+                    configs.computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n+                            .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n                 }\n             }\n         }\n-        return configsByRoleConfigGroup;\n+    }\n+\n+    private boolean isSameByServiceTypeAndRoleType(CmHostGroupRoleConfigProvider provider, ServiceComponent serviceComponent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNjk4NQ==", "bodyText": "is this better? isEqualsByServiceTypeAndRoleType", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397936985", "createdAt": "2020-03-25T15:17:22Z", "author": {"login": "topolyai5"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null\n+                        && isSameByServiceTypeAndRoleType(provider, serviceComponent)\n+                        && !serviceComponent.getComponent().equals(sharedComponents.get(serviceComponent.getService()))) {\n+                    Map<String, List<ApiClusterTemplateConfig>> configs = configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>());\n+                    configs.computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n+                            .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n                 }\n             }\n         }\n-        return configsByRoleConfigGroup;\n+    }\n+\n+    private boolean isSameByServiceTypeAndRoleType(CmHostGroupRoleConfigProvider provider, ServiceComponent serviceComponent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNjAzMA=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NDAxMg==", "bodyText": "I think so yes", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397984012", "createdAt": "2020-03-25T16:15:51Z", "author": {"login": "doktoric"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null\n+                        && isSameByServiceTypeAndRoleType(provider, serviceComponent)\n+                        && !serviceComponent.getComponent().equals(sharedComponents.get(serviceComponent.getService()))) {\n+                    Map<String, List<ApiClusterTemplateConfig>> configs = configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>());\n+                    configs.computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n+                            .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n                 }\n             }\n         }\n-        return configsByRoleConfigGroup;\n+    }\n+\n+    private boolean isSameByServiceTypeAndRoleType(CmHostGroupRoleConfigProvider provider, ServiceComponent serviceComponent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNjAzMA=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4OTk2OQ==", "bodyText": "ok, changed", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397989969", "createdAt": "2020-03-25T16:23:43Z", "author": {"login": "topolyai5"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null\n+                        && isSameByServiceTypeAndRoleType(provider, serviceComponent)\n+                        && !serviceComponent.getComponent().equals(sharedComponents.get(serviceComponent.getService()))) {\n+                    Map<String, List<ApiClusterTemplateConfig>> configs = configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>());\n+                    configs.computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n+                            .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n                 }\n             }\n         }\n-        return configsByRoleConfigGroup;\n+    }\n+\n+    private boolean isSameByServiceTypeAndRoleType(CmHostGroupRoleConfigProvider provider, ServiceComponent serviceComponent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNjAzMA=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njc3NjkxOnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo1MjoyMlrOF7e7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTozNDo1N1rOF7hBLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzA2MQ==", "bodyText": "Very large if condition. Can you please extract it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397917061", "createdAt": "2020-03-25T14:52:22Z", "author": {"login": "attilapalfi92"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxOTQ1OQ==", "bodyText": "what is your proposal? I need to check all the three condition in the same if", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397919459", "createdAt": "2020-03-25T14:55:20Z", "author": {"login": "topolyai5"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzA2MQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk0NjgxMg==", "bodyText": "just extract this to a method an name it like areComponentsEqual or something like that", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397946812", "createdAt": "2020-03-25T15:29:33Z", "author": {"login": "attilapalfi92"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzA2MQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1MTI3OQ==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r397951279", "createdAt": "2020-03-25T15:34:57Z", "author": {"login": "topolyai5"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +65,40 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (serviceComponent != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNzA2MQ=="}, "originalCommit": {"oid": "5ef067f442c6beb8e5f965c4ba0b122fd7755183"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTU0MzU0OnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzowNTozNVrOF75nFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzowNTozNVrOF75nFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1NDE5Ng==", "bodyText": "can we remove this?", "url": "https://github.com/hortonworks/cloudbreak/pull/7645#discussion_r398354196", "createdAt": "2020-03-26T07:05:35Z", "author": {"login": "doktoric"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CmHostGroupRoleConfigProviderProcessor.java", "diffHunk": "@@ -45,35 +64,50 @@ public void process(CmTemplateProcessor templateProcessor, TemplatePreparationOb\n         return ofNullable(templateProcessor.getTemplate().getHostTemplates()).orElseGet(List::of);\n     }\n \n-    private Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n+    @VisibleForTesting\n+    Map<String, Map<String, List<ApiClusterTemplateConfig>>> generateConfigs(CmTemplateProcessor templateProcessor, TemplatePreparationObject source) {\n         Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup = new HashMap<>();\n-\n-        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream()\n-                .collect(toMap(HostgroupView::getName, Function.identity()));\n+        Map<String, HostgroupView> hostGroups = source.getHostgroupViews().stream().collect(toMap(HostgroupView::getName, Function.identity()));\n         List<ApiClusterTemplateHostTemplate> hostTemplates = getHostTemplates(templateProcessor);\n         Map<String, ServiceComponent> serviceComponents = templateProcessor.mapRoleRefsToServiceComponents();\n \n         for (ApiClusterTemplateHostTemplate hostTemplate : hostTemplates) {\n             String hostGroupName = hostTemplate.getRefName();\n             List<String> roleConfigGroups = ofNullable(hostTemplate.getRoleConfigGroupsRefNames()).orElseGet(List::of);\n             HostgroupView hostgroupView = hostGroups.get(hostGroupName);\n+            groupByHostGroupName(source, configsByRoleConfigGroup, serviceComponents, hostGroupName, roleConfigGroups, hostgroupView);\n+        }\n+        return configsByRoleConfigGroup;\n+    }\n \n-            for (String roleConfigGroup : roleConfigGroups) {\n-                for (CmHostGroupRoleConfigProvider provider : providers) {\n-                    ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n-\n-                    if (serviceComponent != null\n-                            && Objects.equals(provider.getServiceType(), serviceComponent.getService())\n-                            && provider.getRoleTypes().contains(serviceComponent.getComponent())) {\n-\n-                        configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>())\n-                                .computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n-                                .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n-                    }\n+    private void groupByHostGroupName(TemplatePreparationObject source, Map<String, Map<String, List<ApiClusterTemplateConfig>>> configsByRoleConfigGroup,\n+            Map<String, ServiceComponent> serviceComponents, String hostGroupName, List<String> roleConfigGroups, HostgroupView hostgroupView) {\n+        for (String roleConfigGroup : roleConfigGroups) {\n+            for (CmHostGroupRoleConfigProvider provider : providers) {\n+                ServiceComponent serviceComponent = serviceComponents.get(roleConfigGroup);\n+                if (isEqualsAndNotSharedComponent(provider, serviceComponent)) {\n+                    Map<String, List<ApiClusterTemplateConfig>> configs = configsByRoleConfigGroup.computeIfAbsent(roleConfigGroup, __ -> new HashMap<>());\n+                    configs.computeIfAbsent(hostGroupName, __ -> new ArrayList<>())\n+                            .addAll(provider.getRoleConfigs(serviceComponent.getComponent(), hostgroupView, source));\n                 }\n             }\n         }\n-        return configsByRoleConfigGroup;\n+    }\n+\n+    private boolean isEqualsAndNotSharedComponent(CmHostGroupRoleConfigProvider provider, ServiceComponent serviceComponent) {\n+        return serviceComponent != null\n+                && isEqualsByServiceTypeAndRoleType(provider, serviceComponent)\n+                && !isSharedComponent(serviceComponent);\n+    }\n+\n+    private boolean isSharedComponent(ServiceComponent serviceComponent) {\n+        return sharedComponents.stream().anyMatch(s -> s.getComponentName().equals(serviceComponent.getComponent())\n+                && s.getServiceType().equals(serviceComponent.getService()));\n+//        return serviceComponent.getComponent().equals(sharedComponents.get(serviceComponent.getService()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df710f2c0e6beab2e756ca4aa916b6293f5b65d5"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2575, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}