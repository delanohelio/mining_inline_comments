{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODQ2Njc3", "number": 8139, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxNTo0NlrOD-6jAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxNTo0NlrOD-6jAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjk3NTM5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/e2e/distrox/DistroXEncryptedVolumeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxNTo0NlrOGZTjVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxODozNVrOGZTndA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NzkyNA==", "bodyText": "you can use the default user from the test context", "url": "https://github.com/hortonworks/cloudbreak/pull/8139#discussion_r429187924", "createdAt": "2020-05-22T11:15:46Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/e2e/distrox/DistroXEncryptedVolumeTest.java", "diffHunk": "@@ -34,18 +41,24 @@ protected void setupTest(TestContext testContext) {\n             when = \"a valid DistroX create request is sent with encrypted discs\",\n             then = \"DistroX cluster is created\")\n     public void testCreateDistroXWithEncryptedVolume(TestContext testContext) {\n+        String externalDB = resourcePropertyProvider().getName();\n         List<DistroXInstanceGroupTestDto> distroXInstanceGroupTestDtos = new DistroXInstanceGroupsBuilder(testContext)\n                 .defaultHostGroup()\n                 .withDiskEncryption()\n                 .build();\n-        testContext.given(DistroXTestDto.class)\n+        testContext.given(externalDB, DistroXExternalDatabaseTestDto.class)\n+                .withAvailabilityType(DistroXDatabaseAvailabilityType.NON_HA)\n+                .given(DistroXTestDto.class)\n                 .withInstanceGroupsEntity(distroXInstanceGroupTestDtos)\n+                .withExternalDatabase(externalDB)\n                 .when(distroXTestClient.create())\n                 .await(STACK_AVAILABLE)\n+                .then(validateTemplateContainsExternalDatabaseHostname(Actor.defaultUser(testParameter)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e045ac25e1c3b8167ba9d6eac37c45d8954ba2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4ODYyMA==", "bodyText": "e.g:            RedbeamsClient redbeamsClient = getClient(testContext, testContext.getWho(RunningParameter.emptyRunningParameter()), RedbeamsClient.class);", "url": "https://github.com/hortonworks/cloudbreak/pull/8139#discussion_r429188620", "createdAt": "2020-05-22T11:17:40Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/e2e/distrox/DistroXEncryptedVolumeTest.java", "diffHunk": "@@ -34,18 +41,24 @@ protected void setupTest(TestContext testContext) {\n             when = \"a valid DistroX create request is sent with encrypted discs\",\n             then = \"DistroX cluster is created\")\n     public void testCreateDistroXWithEncryptedVolume(TestContext testContext) {\n+        String externalDB = resourcePropertyProvider().getName();\n         List<DistroXInstanceGroupTestDto> distroXInstanceGroupTestDtos = new DistroXInstanceGroupsBuilder(testContext)\n                 .defaultHostGroup()\n                 .withDiskEncryption()\n                 .build();\n-        testContext.given(DistroXTestDto.class)\n+        testContext.given(externalDB, DistroXExternalDatabaseTestDto.class)\n+                .withAvailabilityType(DistroXDatabaseAvailabilityType.NON_HA)\n+                .given(DistroXTestDto.class)\n                 .withInstanceGroupsEntity(distroXInstanceGroupTestDtos)\n+                .withExternalDatabase(externalDB)\n                 .when(distroXTestClient.create())\n                 .await(STACK_AVAILABLE)\n+                .then(validateTemplateContainsExternalDatabaseHostname(Actor.defaultUser(testParameter)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NzkyNA=="}, "originalCommit": {"oid": "81e045ac25e1c3b8167ba9d6eac37c45d8954ba2"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4ODk4MA==", "bodyText": "but as I see, the DistroXExternalDatabaseAssertion class is a hack, so...", "url": "https://github.com/hortonworks/cloudbreak/pull/8139#discussion_r429188980", "createdAt": "2020-05-22T11:18:35Z", "author": {"login": "topolyai5"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/e2e/distrox/DistroXEncryptedVolumeTest.java", "diffHunk": "@@ -34,18 +41,24 @@ protected void setupTest(TestContext testContext) {\n             when = \"a valid DistroX create request is sent with encrypted discs\",\n             then = \"DistroX cluster is created\")\n     public void testCreateDistroXWithEncryptedVolume(TestContext testContext) {\n+        String externalDB = resourcePropertyProvider().getName();\n         List<DistroXInstanceGroupTestDto> distroXInstanceGroupTestDtos = new DistroXInstanceGroupsBuilder(testContext)\n                 .defaultHostGroup()\n                 .withDiskEncryption()\n                 .build();\n-        testContext.given(DistroXTestDto.class)\n+        testContext.given(externalDB, DistroXExternalDatabaseTestDto.class)\n+                .withAvailabilityType(DistroXDatabaseAvailabilityType.NON_HA)\n+                .given(DistroXTestDto.class)\n                 .withInstanceGroupsEntity(distroXInstanceGroupTestDtos)\n+                .withExternalDatabase(externalDB)\n                 .when(distroXTestClient.create())\n                 .await(STACK_AVAILABLE)\n+                .then(validateTemplateContainsExternalDatabaseHostname(Actor.defaultUser(testParameter)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4NzkyNA=="}, "originalCommit": {"oid": "81e045ac25e1c3b8167ba9d6eac37c45d8954ba2"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3364, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}