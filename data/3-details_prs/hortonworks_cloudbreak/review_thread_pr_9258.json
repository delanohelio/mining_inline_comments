{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDQ3MDEx", "number": 9258, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OTowNlrOEwJUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTowMTo1OVrOEwJZcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTE5NzY5OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OTowNlrOHlhkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OTowNlrOHlhkbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTM1OA==", "bodyText": "Can we refactor this to smaller methods and do less in the catch block? It's kind hard to read.\nSomething like:\ngetMockBasedUser()\ngetRealUmsUser()\ngetTestParamUser()", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509109358", "createdAt": "2020-10-21T08:59:06Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "diffHunk": "@@ -447,15 +448,57 @@ protected String getActingUserAccessKey() {\n     }\n \n     public Crn getActingUserCrn() {\n-        // real ums user\n-        if (Crn.isCrn(getActingUser().getCrn())) {\n-            return Crn.fromString(getActingUser().getCrn());\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+             */\n+            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+        } catch (Exception e) {\n+            if (Crn.isCrn(getActingUser().getCrn())) {\n+                /**\n+                 * Real UMS user:\n+                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+                 */\n+                return Crn.fromString(getActingUser().getCrn());\n+            }\n+            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+                /**\n+                 * Application parameter:\n+                 * integrationtest.user.crn\n+                 */\n+                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+            }\n+            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTE5OTUwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OToyOVrOHlhlkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1OToyOVrOHlhlkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwOTY0OQ==", "bodyText": "Same applies here as before.", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509109649", "createdAt": "2020-10-21T08:59:29Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/context/TestContext.java", "diffHunk": "@@ -447,15 +448,57 @@ protected String getActingUserAccessKey() {\n     }\n \n     public Crn getActingUserCrn() {\n-        // real ums user\n-        if (Crn.isCrn(getActingUser().getCrn())) {\n-            return Crn.fromString(getActingUser().getCrn());\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.crn or \"localhost\" in ~/.dp/config\n+             */\n+            return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n+        } catch (Exception e) {\n+            if (Crn.isCrn(getActingUser().getCrn())) {\n+                /**\n+                 * Real UMS user:\n+                 * useRealUmsUser(testContext, AuthUserKeys.ACCOUNT_ADMIN);\n+                 */\n+                return Crn.fromString(getActingUser().getCrn());\n+            }\n+            if (!testParameter.get(CloudbreakTest.USER_CRN).isEmpty() || testParameter.get(CloudbreakTest.USER_CRN) != null) {\n+                /**\n+                 * Application parameter:\n+                 * integrationtest.user.crn\n+                 */\n+                return Crn.fromString(testParameter.get(CloudbreakTest.USER_CRN));\n+            }\n+            LOGGER.error(\"Cannot find acting user: '{}' - Crn, because of: '{}'\", getActingUserAccessKey(), e.getMessage(), e);\n+            throw new TestFailException(String.format(\"Cannot find acting user: '%s' - Crn, because of: '%s'\", getActingUserAccessKey(), e.getMessage()), e);\n         }\n-        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())));\n     }\n \n     public String getActingUserName() {\n-        return Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey()))).getUserId();\n+        try {\n+            /**\n+             * Default application parameter:\n+             * integrationtest.user.name or \"localhost\" in ~/.dp/config\n+             */\n+            return Objects.requireNonNull(Crn.fromString(new String(Base64.getDecoder().decode(getActingUserAccessKey())))).getUserId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTIxMDc0OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/util/TagsUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTowMTo1OVrOHlhsmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDowODoxOFrOHluXbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTQ0OA==", "bodyText": "I'm not sure about his change. At least the Owner tag should contain the creator's name not the CRN I think.", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509111448", "createdAt": "2020-10-21T09:01:59Z", "author": {"login": "lnardai"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/TagsUtil.java", "diffHunk": "@@ -109,14 +110,17 @@ private void validateOwnerTag(TaggedResponse response, String tag, TestContext t\n     }\n \n     private void validateClouderaCreatorResourceNameTag(TaggedResponse response, String tag, TestContext testContext) {\n-        if (response.getTagValue(tag).contains(testContext.getActingUserName())) {\n-            Log.log(LOGGER, format(\" Default tag: [%s] value is: [%s] contains [%s] acting user name! \", tag, response.getTagValue(tag),\n-                    testContext.getActingUserName()));\n+        Crn actingUserCrn = testContext.getActingUserCrn();\n+        Crn clouderaCreatorResourceName = Crn.fromString(response.getTagValue(tag));\n+\n+        if (clouderaCreatorResourceName.equals(actingUserCrn)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTMxOTAyMQ==", "bodyText": "Unfortunately we had to upgrade this comparison, because of:\n\nThe account basis value is a string that will be converted into SFDC account ID format that serves as the primary key for the account. This is distinct from the CDP-internal account ID UUID that shows up in CRNs and many API calls.\n...\nThe user basis value works along similar lines but results in the primary key for the user within the account.\n\nfrom CDPCP Account Helper > Creating Test Users\nFor instance a mocked: \"Cloudera-Creator-Resource-Name\":\"crn:altus:iam:us-west-1:qe-aws:user:cloudbreak-qe@hortonworks.com\" and a real one: \"Cloudera-Creator-Resource-Name\":\"crn:altus:iam:us-west-1:9d74eee4-1cad-45d7-b645-7ccf9edbb73d:user:9e6ff6c7-7a4b-4086-8989-731c2d57fbf7\"", "url": "https://github.com/hortonworks/cloudbreak/pull/9258#discussion_r509319021", "createdAt": "2020-10-21T14:08:18Z", "author": {"login": "aszegedi"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/TagsUtil.java", "diffHunk": "@@ -109,14 +110,17 @@ private void validateOwnerTag(TaggedResponse response, String tag, TestContext t\n     }\n \n     private void validateClouderaCreatorResourceNameTag(TaggedResponse response, String tag, TestContext testContext) {\n-        if (response.getTagValue(tag).contains(testContext.getActingUserName())) {\n-            Log.log(LOGGER, format(\" Default tag: [%s] value is: [%s] contains [%s] acting user name! \", tag, response.getTagValue(tag),\n-                    testContext.getActingUserName()));\n+        Crn actingUserCrn = testContext.getActingUserCrn();\n+        Crn clouderaCreatorResourceName = Crn.fromString(response.getTagValue(tag));\n+\n+        if (clouderaCreatorResourceName.equals(actingUserCrn)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMTQ0OA=="}, "originalCommit": {"oid": "ea6ac7a1db7250abc8dcbe10c9cee882fc6082b2"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2027, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}