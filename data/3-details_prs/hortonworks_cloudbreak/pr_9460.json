{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzU3NDMw", "number": 9460, "title": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the \u2026", "bodyText": "\u2026networks\n\nIf a user gives a shared project id and a vpc in it, then the reverse DNS zone calculations in FreeIPA is not done correctly.\nTo fix this we need to look at the network and subnet in the shared project.\nThis is fixed everywhere except at one place here.\nThe ultimate issue will be that DH can not talk to IDBroker, it will receive 401 due to lack of reverse DNS.\nCB-9180 will take care of bailing out if we can not calculate reverse DNS zones.\n\n./gradlew build", "createdAt": "2020-11-17T22:56:11Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9460", "merged": true, "mergeCommit": {"oid": "d755de6b8011f217c10bcab4320692a8fae86c87"}, "closed": true, "closedAt": "2020-11-19T05:21:54Z", "author": {"login": "cegganesh84"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddsrSygBqjQwMTAyNDAzOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd7zdrgFqTUzNDA4OTY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ccbe72eb522dda7806a64fd482b7a78f001abd5", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/8ccbe72eb522dda7806a64fd482b7a78f001abd5", "committedDate": "2020-11-17T22:55:01Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks\n\n1. If a user gives a shared project id and a vpc in it, then the reverse DNS zone calculations in FreeIPA is not done correctly.\n2. To fix this we need to look at the network and subnet in the shared project.\n3. This is fixed everywhere except at one place here.\n4. The ultimate issue will be that DH can not talk to IDBroker, it will receive 401 due to lack of reverse DNS.\n5. CB-9180 will take care of bailing out if we can not calculate reverse DNS zones.\n\n./gradlew build"}, "afterCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/e0b5375bff63b8081fc3c223efbc17d6c9058bd5", "committedDate": "2020-11-18T11:43:30Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/e0b5375bff63b8081fc3c223efbc17d6c9058bd5", "committedDate": "2020-11-18T11:43:30Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}, "afterCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/74791e4d75ceafec88b71936302b5ff0a6f8be4a", "committedDate": "2020-11-18T12:27:43Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzc4MTQy", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#pullrequestreview-533378142", "createdAt": "2020-11-18T12:04:48Z", "commit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjowNDo0OFrOH1qoxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjozMjoxN1rOH1rlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNTE0MQ==", "bodyText": "null collection is not ideal, please init an empty one", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526035141", "createdAt": "2020-11-18T12:04:48Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -129,18 +129,26 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n \n         String networkId = null;\n-        String subnetId = null;\n+        List<String> subnetIds = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNTQ2OA==", "bodyText": "this should be moved to a separate method", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526035468", "createdAt": "2020-11-18T12:05:19Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -129,18 +129,26 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n \n         String networkId = null;\n-        String subnetId = null;\n+        List<String> subnetIds = null;\n         String sharedProjectId = null;\n         if (filters != null) {\n             networkId = filters.getOrDefault(\"networkId\", null);\n-            subnetId = filters.getOrDefault(\"subnetId\", null);\n+            String subnetId = filters.getOrDefault(\"subnetId\", null);\n+            if (!Strings.isNullOrEmpty(subnetId)) {\n+                subnetIds = List.of(subnetId);\n+            } else {\n+                String subnetIdsString = filters.getOrDefault(\"subnetIds\", null);\n+                if (!Strings.isNullOrEmpty(subnetIdsString)) {\n+                    subnetIds = List.of(subnetIdsString.split(\",\"));\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAzNjczMg==", "bodyText": "this could be a private method and we could skip null check on subnetIds if the my previous comment is addressed", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526036732", "createdAt": "2020-11-18T12:07:38Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NTQ5OQ==", "bodyText": "this seems a bit complicated and could be simplified. Like instead of query every subnet one by one we could still use the list then filter the result.\n    private SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n        String sharedProjectId) throws IOException {\n        String projectIdToQuery = StringUtils.isNotBlank(sharedProjectId) ? sharedProjectId : projectId;\n        SubnetworkList subnetworkList = compute.subnetworks().list(projectIdToQuery, region.value()).execute();\n        if (subnetIds.isEmpty()) {\n            return subnetworkList;\n        } else {\n            List<Subnetwork> filteredSubnets = subnetworkList.getItems().stream()\n                    .filter(subnetwork -> subnetIds.contains(subnetwork.getName()))\n                    .collect(Collectors.toList());\n            return new SubnetworkList().setItems(filteredSubnets);\n        }\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526045499", "createdAt": "2020-11-18T12:23:26Z", "author": {"login": "lacikaaa"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/GcpPlatformResources.java", "diffHunk": "@@ -184,18 +192,25 @@ public CloudNetworks networks(CloudCredential cloudCredential, Region region, Ma\n         return new CloudNetworks(result);\n     }\n \n-    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, String subnetId, String sharedProjectId) throws IOException {\n+    public SubnetworkList getSubnetworkList(Region region, Compute compute, String projectId, List<String> subnetIds,\n+        String sharedProjectId) throws IOException {\n         SubnetworkList subnetworkList;\n-        if (StringUtils.isEmpty(subnetId)) {\n+        if (subnetIds != null && subnetIds.isEmpty()) {\n             subnetworkList = compute.subnetworks()\n                     .list(projectId, region.value()).execute();\n         } else {\n             if (!Strings.isNullOrEmpty(sharedProjectId)) {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(sharedProjectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             } else {\n-                subnetworkList = new SubnetworkList()\n-                        .setItems(Collections.singletonList(compute.subnetworks().get(projectId, region.value(), subnetId).execute()));\n+                subnetworkList = new SubnetworkList().setItems(new ArrayList<>());\n+                for (String subnetId : subnetIds) {\n+                    Subnetwork subnetwork = compute.subnetworks().get(projectId, region.value(), subnetId).execute();\n+                    subnetworkList.getItems().add(subnetwork);\n+                }\n             }\n         }\n         return subnetworkList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzAzMQ==", "bodyText": "this constant at least should be refactored into a field to avoid duplication here", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526047031", "createdAt": "2020-11-18T12:26:02Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            filter.put(\"sharedProjectId\", sharedProjectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NzM4NQ==", "bodyText": "I don't think we need this if, just use subnetIds", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526047385", "createdAt": "2020-11-18T12:26:37Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            filter.put(\"sharedProjectId\", sharedProjectId);\n+            filter.put(\"networkId\", networkId);\n+            buildSubnetIdFilter(subnetIds, filter);\n+        }\n+        return filter;\n+    }\n+\n+    @Override\n+    public CloudPlatform cloudPlatform() {\n+        return CloudPlatform.GCP;\n+    }\n+\n+    private void buildSubnetIdFilter(Collection<String> subnetIds, Map<String, String> filter) {\n+        if (subnetIds != null && !subnetIds.isEmpty()) {\n+            if (subnetIds.size() > 1) {\n+                filter.put(\"subnetIds\", String.join(\",\", subnetIds));\n+            } else {\n+                filter.put(\"subnetId\", subnetIds.stream().findFirst().get());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0b5375bff63b8081fc3c223efbc17d6c9058bd5"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0OTQzNA==", "bodyText": "it would be much nicer if it would return with like a map and we could use filter.putAll where it is called instead of modifying the map passed via a parameter. It could return with empty map if not applicable", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526049434", "createdAt": "2020-11-18T12:30:07Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/filter/GcpNetworkFilterProvider.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.freeipa.service.filter;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.base.Strings;\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.freeipa.entity.Network;\n+\n+@Service\n+public class GcpNetworkFilterProvider implements NetworkFilterProvider {\n+\n+    @Override\n+    public Map<String, String> provide(Network network, String networkId, Collection<String> subnetIds) {\n+        Map<String, String> filter = new HashMap<>();\n+        if (network.getAttributes() != null && network.getAttributes().getMap() != null) {\n+            Map<String, Object> attributes = network.getAttributes().getMap();\n+            String sharedProjectId = (String) attributes.get(\"sharedProjectId\");\n+            if (!Strings.isNullOrEmpty(sharedProjectId)) {\n+                filter.put(\"sharedProjectId\", sharedProjectId);\n+            }\n+        }\n+        filter.put(\"networkId\", networkId);\n+        buildSubnetIdFilter(subnetIds, filter);\n+        return filter;\n+    }\n+\n+    @Override\n+    public CloudPlatform cloudPlatform() {\n+        return CloudPlatform.GCP;\n+    }\n+\n+    private void buildSubnetIdFilter(Collection<String> subnetIds, Map<String, String> filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA1MDY4NA==", "bodyText": "could be moved to a separate method, like createFilter", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#discussion_r526050684", "createdAt": "2020-11-18T12:32:17Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/NetworkService.java", "diffHunk": "@@ -49,8 +55,13 @@\n     public Map<String, String> getFilteredSubnetWithCidr(String environmentCrn, Stack stack, String networkId, Collection<String> subnetIds) {\n         Credential credential = credentialService.getCredentialByEnvCrn(environmentCrn);\n         ExtendedCloudCredential cloudCredential = extendedCloudCredentialConverter.convert(credential);\n+        Map<String, String> filter = new HashMap<>();\n+        NetworkFilterProvider networkFilterProvider = networkFilterProviderMap.get(CloudPlatform.valueOf(stack.getCloudPlatform()));\n+        if (networkFilterProvider != null) {\n+            filter = networkFilterProvider.provide(stack.getNetwork(), networkId, subnetIds);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74791e4d75ceafec88b71936302b5ff0a6f8be4a", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/74791e4d75ceafec88b71936302b5ff0a6f8be4a", "committedDate": "2020-11-18T12:27:43Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}, "afterCommit": {"oid": "fc60b11cbdc463d5792ceced438dcfa23c2c991e", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/fc60b11cbdc463d5792ceced438dcfa23c2c991e", "committedDate": "2020-11-18T13:52:10Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc60b11cbdc463d5792ceced438dcfa23c2c991e", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/fc60b11cbdc463d5792ceced438dcfa23c2c991e", "committedDate": "2020-11-18T13:52:10Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}, "afterCommit": {"oid": "c64cefe0ec1a5907940a343221ab5502bde4e61b", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/c64cefe0ec1a5907940a343221ab5502bde4e61b", "committedDate": "2020-11-18T13:57:06Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c64cefe0ec1a5907940a343221ab5502bde4e61b", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/c64cefe0ec1a5907940a343221ab5502bde4e61b", "committedDate": "2020-11-18T13:57:06Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}, "afterCommit": {"oid": "43acc08598344b9ffa419d958fa63f876e43f942", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/43acc08598344b9ffa419d958fa63f876e43f942", "committedDate": "2020-11-18T14:24:26Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDk4Nzky", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#pullrequestreview-533498792", "createdAt": "2020-11-18T14:27:10Z", "commit": {"oid": "43acc08598344b9ffa419d958fa63f876e43f942"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7f784a64f781167ca041c9eeefccfe567566d03", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/f7f784a64f781167ca041c9eeefccfe567566d03", "committedDate": "2020-11-18T20:03:26Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks\n\n1. If a user gives a shared project id and a vpc in it, then the reverse DNS zone calculations in FreeIPA is not done correctly.\n2. To fix this we need to look at the network and subnet in the shared project.\n3. This is fixed everywhere except at one place here.\n4. The ultimate issue will be that DH can not talk to IDBroker, it will receive 401 due to lack of reverse DNS.\n5. CB-9180 will take care of bailing out if we can not calculate reverse DNS zones.\n\n./gradlew build"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c2951babf3c98181c9009ef9ebb80834e3180db", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/2c2951babf3c98181c9009ef9ebb80834e3180db", "committedDate": "2020-11-18T19:36:55Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks\n\n1. Adding a unit test for the new class.\n2. For the rest of the modifications, I could not see any existing test classes to modify.\n\n./gradlew build"}, "afterCommit": {"oid": "f7f784a64f781167ca041c9eeefccfe567566d03", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/f7f784a64f781167ca041c9eeefccfe567566d03", "committedDate": "2020-11-18T20:03:26Z", "message": "CB-9849 GCP : For FreeIPA use the GCP shared project id to query the networks\n\n1. If a user gives a shared project id and a vpc in it, then the reverse DNS zone calculations in FreeIPA is not done correctly.\n2. To fix this we need to look at the network and subnet in the shared project.\n3. This is fixed everywhere except at one place here.\n4. The ultimate issue will be that DH can not talk to IDBroker, it will receive 401 due to lack of reverse DNS.\n5. CB-9180 will take care of bailing out if we can not calculate reverse DNS zones.\n\n./gradlew build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDg5Njc0", "url": "https://github.com/hortonworks/cloudbreak/pull/9460#pullrequestreview-534089674", "createdAt": "2020-11-19T05:21:39Z", "commit": {"oid": "f7f784a64f781167ca041c9eeefccfe567566d03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1998, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}