{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDkxMDYx", "number": 8820, "title": "CB-7876 Fail API Cleanup Jenkins build in case of left resources", "bodyText": "This is the final improvement of the API Cleanup App:\n\nProvided resource JSON files are driving the cleanup instead of the found resources in the given tenant.\nIf JSON file(s) is(are) present at integrationtest.outputdir path, listed resources are going to be checked. Otherwise all the found resources are going to be deleted/terminated as fallback.\nIf a test generates more than one resource per type, that will generate an Array instead of Object:\n{\n  \"sdxName\": \"yarn-test-8206e51801004830a4a90e730a1ffc\",\n  \"blueprintName\": \"yarn-test-94f1651394dd491a9a03a6714e66e9\",\n  \"environmentName\": [\n    \"yarn-test-18f9dd8b60ed492388\",\n    \"aws-test-6f1adc4012e94028987\"\n  ],\n  \"stackName\": [\n    \"yarn-test-af9ea\",\n    \"aws-test-902939\"\n  ],\n  \"credentialName\": [\n    \"aws-test-1b8a1afafded4daca3e1cc5e9533f37\",\n    \"yarn-test-54daadca706347818431edc9c6b560\"\n  ]\n}\n\n\nIf other resource(s) is(are) present at the given tenant, that won't be touched by the Cleanup App except resource JSON file cannot be found.\nIf the Cleanup finds one or more credential(s) present from the resource JSON at the given tenant, Cleanup exits with error:\nERROR c.s.it.util.cleanup.CleanupUtil [nolabel] - End To End cleanup have been failed, because of credential(s) '[aws-test-1b8a1afafded4daca3e1cc5e9533f37, yarn-test-54daadca706347818431edc9c6b560]' found left behind! after all the found resources have been deleted/terminated.", "createdAt": "2020-08-14T17:09:34Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8820", "merged": true, "mergeCommit": {"oid": "d27639bc432389d4ca3a2f85f293b49e004c9d79"}, "closed": true, "closedAt": "2020-09-03T08:16:21Z", "author": {"login": "aszegedi"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-5LGbABqjM2NTczMTYxMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFMGAugFqTQ4MTU5OTY4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5358d6691abb121713f3169144dd4284091778ef", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5358d6691abb121713f3169144dd4284091778ef", "committedDate": "2020-08-14T17:06:14Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}, "afterCommit": {"oid": "e237f302d07be33b6fbb2e11082307251777585a", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e237f302d07be33b6fbb2e11082307251777585a", "committedDate": "2020-08-14T18:45:43Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e237f302d07be33b6fbb2e11082307251777585a", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e237f302d07be33b6fbb2e11082307251777585a", "committedDate": "2020-08-14T18:45:43Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}, "afterCommit": {"oid": "3b5b67c7a0508fa743c0852684f45d183015099f", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3b5b67c7a0508fa743c0852684f45d183015099f", "committedDate": "2020-08-14T18:59:35Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b5b67c7a0508fa743c0852684f45d183015099f", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3b5b67c7a0508fa743c0852684f45d183015099f", "committedDate": "2020-08-14T18:59:35Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}, "afterCommit": {"oid": "3cc7881826eb3552f34ed0384c7b92ffc3ed92b7", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3cc7881826eb3552f34ed0384c7b92ffc3ed92b7", "committedDate": "2020-08-14T22:21:45Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b71e7ced3f23d0be6f2337064a5b4d013e61e83", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7b71e7ced3f23d0be6f2337064a5b4d013e61e83", "committedDate": "2020-08-15T06:37:05Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}, "afterCommit": {"oid": "028597844c8baa42f57fc72c2be0f65a1525947f", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/028597844c8baa42f57fc72c2be0f65a1525947f", "committedDate": "2020-08-15T06:37:35Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "028597844c8baa42f57fc72c2be0f65a1525947f", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/028597844c8baa42f57fc72c2be0f65a1525947f", "committedDate": "2020-08-15T06:37:35Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}, "afterCommit": {"oid": "48e72990813fdb55f4b41943bd3f0dd031e2430c", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/48e72990813fdb55f4b41943bd3f0dd031e2430c", "committedDate": "2020-08-15T10:08:19Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afb0a465960cd31d9d98514e1a73b87d3f05f30f", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/afb0a465960cd31d9d98514e1a73b87d3f05f30f", "committedDate": "2020-08-15T11:14:54Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "6cd0998074d264507333c55ef93c391dba0a85c2", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/6cd0998074d264507333c55ef93c391dba0a85c2", "committedDate": "2020-08-15T11:18:41Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad79f6ef2bc6b9acccafc61a94f6468510d856ca", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ad79f6ef2bc6b9acccafc61a94f6468510d856ca", "committedDate": "2020-08-15T11:27:00Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "c69dcc5f36558a857651a3c837a8ca80b6929982", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c69dcc5f36558a857651a3c837a8ca80b6929982", "committedDate": "2020-08-15T11:30:51Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c69dcc5f36558a857651a3c837a8ca80b6929982", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c69dcc5f36558a857651a3c837a8ca80b6929982", "committedDate": "2020-08-15T11:30:51Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "225810518e2615ca7f40443e8bdc53db6de424c8", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/225810518e2615ca7f40443e8bdc53db6de424c8", "committedDate": "2020-08-15T11:34:05Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "225810518e2615ca7f40443e8bdc53db6de424c8", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/225810518e2615ca7f40443e8bdc53db6de424c8", "committedDate": "2020-08-15T11:34:05Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "656a9a8f15ab9959634c83b63b31833b55d1ef61", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/656a9a8f15ab9959634c83b63b31833b55d1ef61", "committedDate": "2020-08-15T11:38:23Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "656a9a8f15ab9959634c83b63b31833b55d1ef61", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/656a9a8f15ab9959634c83b63b31833b55d1ef61", "committedDate": "2020-08-15T11:38:23Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/98ced8dd754f7762489c7d0601f00ed150a7d19d", "committedDate": "2020-08-15T12:10:04Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTM1NTI2", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#pullrequestreview-477535526", "createdAt": "2020-08-28T08:43:15Z", "commit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NTE0MTU1", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#pullrequestreview-477514155", "createdAt": "2020-08-28T08:31:38Z", "commit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMTozOFrOHIwVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo0MjoxOVrOHIw-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0MjU4NQ==", "bodyText": "Please use this standard library method for file reading:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#readString(java.nio.file.Path)", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478942585", "createdAt": "2020-08-28T08:31:38Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NTAxNA==", "bodyText": "Why not an empty list with List.of()?", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478945014", "createdAt": "2020-08-28T08:34:19Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MTEwOA==", "bodyText": "Cool, functional, but I guess foundResources.contains(resourceName) will be enough instead of foundResources.stream().anyMatch(resourceName::equals).", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478951108", "createdAt": "2020-08-28T08:40:26Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MzA5Ng==", "bodyText": "This is strange. You try to delete credentials, then you immediately say it is failed. Where does this information comes from?", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478953096", "createdAt": "2020-08-28T08:42:19Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()\n+                        .anyMatch(resourceName::equals)) {\n+                    LOG.info(\"{}:{} will be deleted!\", resourceNameType, foundResources.stream()\n+                            .filter(resourceName::equals).findAny().orElse(null));\n+                    switch (resourceNameType) {\n+                        case \"distroxName\":\n+                        case \"stackName\":\n+                            deleteDistrox(getCloudbreakClient(), resourceName);\n+                            break;\n+                        case \"sdxName\":\n+                            deleteSdx(getSdxClient(), resourceName);\n+                            break;\n+                        case \"credentialName\":\n+                            deleteCredential(getEnvironmentClient(), resourceName);\n+                            e2eCleanupFailed.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 303}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/98ced8dd754f7762489c7d0601f00ed150a7d19d", "committedDate": "2020-08-15T12:10:04Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "871f7719c5e8658f0231376e6a9dc45f3f1e2f33", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/871f7719c5e8658f0231376e6a9dc45f3f1e2f33", "committedDate": "2020-08-29T09:22:45Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4abd0d15cf6bea5fcc231ccfff8c27a1d1ccd350", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4abd0d15cf6bea5fcc231ccfff8c27a1d1ccd350", "committedDate": "2020-09-02T17:14:41Z", "message": "CB-7876 Fail API Cleanup Jenkins build in case of left resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5680ecb833b09712daf57baf20042068f76ce7f7", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5680ecb833b09712daf57baf20042068f76ce7f7", "committedDate": "2020-09-02T17:14:41Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "871f7719c5e8658f0231376e6a9dc45f3f1e2f33", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/871f7719c5e8658f0231376e6a9dc45f3f1e2f33", "committedDate": "2020-08-29T09:22:45Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}, "afterCommit": {"oid": "5680ecb833b09712daf57baf20042068f76ce7f7", "author": {"user": {"login": "aszegedi", "name": "Annamaria Szegedi"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5680ecb833b09712daf57baf20042068f76ce7f7", "committedDate": "2020-09-02T17:14:41Z", "message": "CB-8484 Replace TestContext to MockedTestContext for integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTk5Njg4", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#pullrequestreview-481599688", "createdAt": "2020-09-03T08:12:17Z", "commit": {"oid": "5680ecb833b09712daf57baf20042068f76ce7f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2483, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}