{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTc1OTcy", "number": 9409, "title": "CB-9657 DataLake runtime version is null", "bodyText": "See detailed description in the commit message.", "createdAt": "2020-11-11T12:46:33Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9409", "merged": true, "mergeCommit": {"oid": "39d9ef202a042bf6cd5a1c929f94bc51267c8695"}, "closed": true, "closedAt": "2020-11-13T12:26:42Z", "author": {"login": "horadla23"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbdocogBqjM5ODM3NDc1NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcGIoDAFqTUzMDAxMzkyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34275e2fcf76a4a3f67225bddd031dea2cc51f0c", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/34275e2fcf76a4a3f67225bddd031dea2cc51f0c", "committedDate": "2020-11-11T07:10:16Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "58f5a947caaa4a2b0e358b98ca3edb04898ef6f1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/58f5a947caaa4a2b0e358b98ca3edb04898ef6f1", "committedDate": "2020-11-11T13:04:13Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58f5a947caaa4a2b0e358b98ca3edb04898ef6f1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/58f5a947caaa4a2b0e358b98ca3edb04898ef6f1", "committedDate": "2020-11-11T13:04:13Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "c65f8475b859b984af2038b92c04c096c0ef6e18", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c65f8475b859b984af2038b92c04c096c0ef6e18", "committedDate": "2020-11-11T13:16:08Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c65f8475b859b984af2038b92c04c096c0ef6e18", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c65f8475b859b984af2038b92c04c096c0ef6e18", "committedDate": "2020-11-11T13:16:08Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "693042e3ce9baba3d8e1e34354562baf8bb9344f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/693042e3ce9baba3d8e1e34354562baf8bb9344f", "committedDate": "2020-11-11T14:51:29Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "693042e3ce9baba3d8e1e34354562baf8bb9344f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/693042e3ce9baba3d8e1e34354562baf8bb9344f", "committedDate": "2020-11-11T14:51:29Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "ca9c0099cfb773f14b0775530522c3375a10de12", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ca9c0099cfb773f14b0775530522c3375a10de12", "committedDate": "2020-11-11T15:26:26Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca9c0099cfb773f14b0775530522c3375a10de12", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ca9c0099cfb773f14b0775530522c3375a10de12", "committedDate": "2020-11-11T15:26:26Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "28cb5147df6916f4f935f03080d6bc5b169cf718", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/28cb5147df6916f4f935f03080d6bc5b169cf718", "committedDate": "2020-11-11T15:46:29Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28cb5147df6916f4f935f03080d6bc5b169cf718", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/28cb5147df6916f4f935f03080d6bc5b169cf718", "committedDate": "2020-11-11T15:46:29Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "966b30adc14b6e113db79ab9f69b0f2659ab89ea", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/966b30adc14b6e113db79ab9f69b0f2659ab89ea", "committedDate": "2020-11-11T19:28:10Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "966b30adc14b6e113db79ab9f69b0f2659ab89ea", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/966b30adc14b6e113db79ab9f69b0f2659ab89ea", "committedDate": "2020-11-11T19:28:10Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "959ff3d90a73acbdc519db0969131e104a19f44d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/959ff3d90a73acbdc519db0969131e104a19f44d", "committedDate": "2020-11-12T07:01:55Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "959ff3d90a73acbdc519db0969131e104a19f44d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/959ff3d90a73acbdc519db0969131e104a19f44d", "committedDate": "2020-11-12T07:01:55Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "52e79a612549822df61cae91507591fbb73d2aee", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/52e79a612549822df61cae91507591fbb73d2aee", "committedDate": "2020-11-12T08:03:56Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52e79a612549822df61cae91507591fbb73d2aee", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/52e79a612549822df61cae91507591fbb73d2aee", "committedDate": "2020-11-12T08:03:56Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "2354fc14767aab05fb4f06a3a907c2f02e29103e", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2354fc14767aab05fb4f06a3a907c2f02e29103e", "committedDate": "2020-11-12T08:09:06Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2354fc14767aab05fb4f06a3a907c2f02e29103e", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2354fc14767aab05fb4f06a3a907c2f02e29103e", "committedDate": "2020-11-12T08:09:06Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "55e367ed3f835e04391c931827f762338a221103", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/55e367ed3f835e04391c931827f762338a221103", "committedDate": "2020-11-12T08:25:44Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55e367ed3f835e04391c931827f762338a221103", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/55e367ed3f835e04391c931827f762338a221103", "committedDate": "2020-11-12T08:25:44Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "1c8005e4e8f736ba928e419d52c29a43bfc68ef1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1c8005e4e8f736ba928e419d52c29a43bfc68ef1", "committedDate": "2020-11-12T08:50:28Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c8005e4e8f736ba928e419d52c29a43bfc68ef1", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1c8005e4e8f736ba928e419d52c29a43bfc68ef1", "committedDate": "2020-11-12T08:50:28Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "73fad4d80d65ff183fc1f12cc6ed77070612b0ae", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73fad4d80d65ff183fc1f12cc6ed77070612b0ae", "committedDate": "2020-11-12T09:17:57Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73fad4d80d65ff183fc1f12cc6ed77070612b0ae", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/73fad4d80d65ff183fc1f12cc6ed77070612b0ae", "committedDate": "2020-11-12T09:17:57Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "ee2c652d9ee454997e59bed201181738b37cca21", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee2c652d9ee454997e59bed201181738b37cca21", "committedDate": "2020-11-12T11:28:32Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee2c652d9ee454997e59bed201181738b37cca21", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee2c652d9ee454997e59bed201181738b37cca21", "committedDate": "2020-11-12T11:28:32Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "c4229eed20499f4da2cdc345c8b5d11338fc1b8d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c4229eed20499f4da2cdc345c8b5d11338fc1b8d", "committedDate": "2020-11-12T12:37:15Z", "message": "CB-9657 DataLake runtime version is null"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4229eed20499f4da2cdc345c8b5d11338fc1b8d", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c4229eed20499f4da2cdc345c8b5d11338fc1b8d", "committedDate": "2020-11-12T12:37:15Z", "message": "CB-9657 DataLake runtime version is null"}, "afterCommit": {"oid": "43e734ba0c3e69934d6464179c4ce28ae7b8c753", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/43e734ba0c3e69934d6464179c4ce28ae7b8c753", "committedDate": "2020-11-12T12:50:48Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDY0OTAy", "url": "https://github.com/hortonworks/cloudbreak/pull/9409#pullrequestreview-529064902", "createdAt": "2020-11-12T13:03:48Z", "commit": {"oid": "c4229eed20499f4da2cdc345c8b5d11338fc1b8d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzowNDozMlrOHx525A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzowNDozMlrOHx525A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5MDIxMg==", "bodyText": "two things here. you're catching exceptions that have been thrown earlier by yourself which can be replaced with another flow control approach. maybe it's just me but I usually hate these exception driven development kind of approach \ud83d\ude42 because it is not just unnecessary to invoke any kind of exception but it can be unnecessarily resource-intensive to do so.\non the other hand, you're about to catch an Exception which is \"too wide\" to catch. it catches everything but the catch block doesn't ensure that the original problem/exception won't happen again. surely there are many cases when multiple kinds of exception should be handle in the same way but IMO one should be aware of the original exception not just to be able to handle it properly but to make a more meaningful log entry for that scenario", "url": "https://github.com/hortonworks/cloudbreak/pull/9409#discussion_r522090212", "createdAt": "2020-11-12T13:04:32Z", "author": {"login": "gregito"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/validation/stack/StackRuntimeVersionValidator.java", "diffHunk": "@@ -32,23 +39,64 @@\n     @Inject\n     private SdxClientService sdxClientService;\n \n+    @Inject\n+    private StackViewService stackViewService;\n+\n+    @Inject\n+    private ClusterComponentConfigProvider clusterComponentConfigProvider;\n+\n     @Inject\n     private EntitlementService entitlementService;\n \n-    public void validate(StackV4Request stackRequest, Image image) {\n-        if (isDifferentDataHubAndDataLakeVersionAllowed()) {\n-            LOGGER.debug(\"The Data Hub version validation has been turned off with entitlement.\");\n-        } else if (StackType.WORKLOAD.equals(stackRequest.getType())) {\n-            LOGGER.debug(\"Validating Data Hub version.\");\n-            findStackVersion(stackRequest, image).ifPresent(stackRuntimeVersion -> {\n-                List<SdxClusterResponse> sdxClusters = sdxClientService.getByEnvironmentCrn(stackRequest.getEnvironmentCrn());\n-                sdxClusters.forEach(sdx -> validateStackVersion(stackRuntimeVersion, sdx.getRuntime()));\n-            });\n+    public void validate(StackV4Request stackRequest, Image image, StackType stackType) {\n+        if (StackType.WORKLOAD.equals(stackType)) {\n+            if (isDifferentDataHubAndDataLakeVersionAllowed()) {\n+                LOGGER.debug(\"The Data Hub version validation has been turned off with entitlement.\");\n+            } else {\n+                LOGGER.debug(\"Validating Data Hub version.\");\n+                findRequestedStackVersion(stackRequest, image).ifPresent(requestedRuntimeVersion -> {\n+                    checkRuntimeVersion(stackRequest.getEnvironmentCrn(), requestedRuntimeVersion);\n+                });\n+            }\n         }\n+    }\n+\n+    private void checkRuntimeVersion(String environmentCrn, String requestedStackVersion) {\n+        try {\n+            Optional<StackView> relatedDatalakeStack = stackViewService.findDatalakeViewByEnvironmentCrn(environmentCrn);\n+            if (relatedDatalakeStack.isPresent() && relatedDatalakeStack.get().isAvailable()) {\n+                List<ClouderaManagerProduct> clouderaManagerProductDetails =\n+                        clusterComponentConfigProvider.getClouderaManagerProductDetails(relatedDatalakeStack.get().getClusterView().getId());\n+                Optional<ClouderaManagerProduct> cdh = clouderaManagerProductDetails.stream()\n+                        .filter(clouderaManagerProduct -> StringUtils.equals(\"CDH\", clouderaManagerProduct.getName())).findFirst();\n+                if (cdh.isPresent() && cdh.get().getVersion() != null) {\n+                    compareRuntimeVersions(requestedStackVersion, StringUtils.substringBefore(cdh.get().getVersion(), \"-\"));\n+                } else {\n+                    throw new NotFoundException(String.format(\"Cannot found CDH details about related datalake stack in CB, name: %s\",\n+                            relatedDatalakeStack.get().getName()));\n+                }\n+            } else {\n+                throw new NotFoundException(String.format(\"Cannot found related dalatake stack in CB for environment CRN %s \" +\n+                        \"or the datalake isn't available yet.\", environmentCrn));\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e734ba0c3e69934d6464179c4ce28ae7b8c753"}, "originalPosition": 79}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43e734ba0c3e69934d6464179c4ce28ae7b8c753", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/43e734ba0c3e69934d6464179c4ce28ae7b8c753", "committedDate": "2020-11-12T12:50:48Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}, "afterCommit": {"oid": "c38082f73dcf71691c02c37d3bd5ed1e93b53489", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c38082f73dcf71691c02c37d3bd5ed1e93b53489", "committedDate": "2020-11-12T13:54:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c38082f73dcf71691c02c37d3bd5ed1e93b53489", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c38082f73dcf71691c02c37d3bd5ed1e93b53489", "committedDate": "2020-11-12T13:54:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}, "afterCommit": {"oid": "9828fc02cad4933cd2e98e4d01e987025fdd923e", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9828fc02cad4933cd2e98e4d01e987025fdd923e", "committedDate": "2020-11-12T15:37:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9828fc02cad4933cd2e98e4d01e987025fdd923e", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9828fc02cad4933cd2e98e4d01e987025fdd923e", "committedDate": "2020-11-12T15:37:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}, "afterCommit": {"oid": "d5f530825226e6736dbd4d8cce29a84b0e344b64", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d5f530825226e6736dbd4d8cce29a84b0e344b64", "committedDate": "2020-11-12T16:07:04Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5f530825226e6736dbd4d8cce29a84b0e344b64", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d5f530825226e6736dbd4d8cce29a84b0e344b64", "committedDate": "2020-11-12T16:07:04Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}, "afterCommit": {"oid": "8e7b8260e4e5c338533db18f74e1e9a373792796", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8e7b8260e4e5c338533db18f74e1e9a373792796", "committedDate": "2020-11-12T17:30:19Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c34af3f4fd50e19e55ff74876827c11569443f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/21c34af3f4fd50e19e55ff74876827c11569443f", "committedDate": "2020-11-12T18:29:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e7b8260e4e5c338533db18f74e1e9a373792796", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8e7b8260e4e5c338533db18f74e1e9a373792796", "committedDate": "2020-11-12T17:30:19Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}, "afterCommit": {"oid": "21c34af3f4fd50e19e55ff74876827c11569443f", "author": {"user": {"login": "horadla23", "name": "Adam Horvath"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/21c34af3f4fd50e19e55ff74876827c11569443f", "committedDate": "2020-11-12T18:29:23Z", "message": "CB-9657 DataLake runtime version is null\nin various scenarios runtime version of datalake can be null, this commit will prevent these scenarios\n- validation for existing available datalake should happen at the beginning of datahub creation, not in the middle of stack conversion, with this we can prevent errors during datalake runtime version check during datahub creation, because in case of custom SDX runtime in SDX service filled in only when datalake is available\n- dh runtime version validator should rely on data available in CB by default, and it can still fall back to SDX service\n- distrox related mock tests should create datalake before creating datahub"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMDA5NjYz", "url": "https://github.com/hortonworks/cloudbreak/pull/9409#pullrequestreview-530009663", "createdAt": "2020-11-13T12:09:16Z", "commit": {"oid": "21c34af3f4fd50e19e55ff74876827c11569443f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMDEzOTI3", "url": "https://github.com/hortonworks/cloudbreak/pull/9409#pullrequestreview-530013927", "createdAt": "2020-11-13T12:15:58Z", "commit": {"oid": "21c34af3f4fd50e19e55ff74876827c11569443f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2103, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}