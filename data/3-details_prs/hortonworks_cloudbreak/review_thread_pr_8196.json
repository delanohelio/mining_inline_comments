{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODEwMzY1", "number": 8196, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoxODo1MlrOECf0QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDozMjozOVrOECgGQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDUzODg4OnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoxODo1MlrOGe_Siw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowNzoyM1rOGfNSuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw==", "bodyText": "could you refactor so both the if and else body is in a method?", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435147403", "createdAt": "2020-06-04T10:18:52Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTA4MA==", "bodyText": "also some log would be nice to see what's happening around here", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149080", "createdAt": "2020-06-04T10:21:42Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDc4Mg==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435184782", "createdAt": "2020-06-04T11:31:39Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5Mjc0OA==", "bodyText": "didnt find a way to do it. multiple exit points all the time", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435292748", "createdAt": "2020-06-04T14:16:21Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NjgyNA==", "bodyText": "you must find one, try it harder please!", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435376824", "createdAt": "2020-06-04T16:07:23Z", "author": {"login": "schfeca75"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NzQwMw=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDU0NDQzOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoyMDoyOFrOGe_WPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozMDo1M1rOGfBjDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0ODM1MA==", "bodyText": "if we create above a span with spanContext, do we really need this if? we could go with\nflowParameters.setSpanContext(span.context());\nif I'm not mistaken", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435148350", "createdAt": "2020-06-04T10:20:28Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    flowContext = createFlowContext(flowParameters, context, payload);\n+                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                } else {\n+                    Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n+                            null, flowParameters.getFlowTriggerUserCrn());\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NDM5Ng==", "bodyText": "Yes it is needed because we always reuse the original and first span context. This way the trace will be usable, otherwise spans would be recursively coming from each other which is untrue for the flow. They come after each other and not child of each other.\nIf a context is present we use it, else if this is the first step of a flow, we have to use the current span's context.", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435184396", "createdAt": "2020-06-04T11:30:53Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -74,24 +81,28 @@ public void execute(StateContext<S, E> context) {\n             try {\n                 Map<Object, Object> variables = context.getExtendedState().getVariables();\n                 prepareExecution(payload, variables);\n-                flowContext = createFlowContext(flowParameters, context, payload);\n-                Object flowStartTime = variables.get(FLOW_START_TIME);\n-                if (flowStartTime != null) {\n-                    Object execTime = variables.get(FLOW_START_EXEC_TIME);\n-                    long flowElapsed = (System.currentTimeMillis() - (long) flowStartTime) / MS_PER_SEC;\n-                    long execElapsed = (System.currentTimeMillis() - (long) execTime) / MS_PER_SEC;\n-                    String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n-                    long executionTime = Math.max(execElapsed, flowElapsed);\n-                    LOGGER.debug(\"Stack: {}, flow state: {}, phase: {}, execution time {} sec\", payload.getResourceId(),\n-                            flowStateName, execElapsed > flowElapsed ? \"doExec\" : \"service\", executionTime);\n-                    metricService.submit(FlowMetricType.FLOW_STEP, executionTime, Map.of(\"name\", flowStateName.toLowerCase()));\n+                String flowStateName = String.valueOf(variables.get(FLOW_STATE_NAME));\n+                Span activeSpan = tracer.activeSpan();\n+                String operationName = context.getEvent().name();\n+                SpanContext spanContext = flowParameters.getSpanContext();\n+                if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                    flowContext = createFlowContext(flowParameters, context, payload);\n+                    doExecute(context, payload, flowContext, variables, flowStateName);\n+                } else {\n+                    Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowParameters.getFlowId(),\n+                            null, flowParameters.getFlowTriggerUserCrn());\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0ODM1MA=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDU1MjEyOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoyMjo0N1rOGe_bZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NToyMVrOGfB_qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTY3MQ==", "bodyText": "same here, do we really need this?", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435149671", "createdAt": "2020-06-04T10:22:47Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTcyMw==", "bodyText": "same answer", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435191723", "createdAt": "2020-06-04T11:45:21Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTY3MQ=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDU2NTQxOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoyNzowMlrOGe_kGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoyMDozNFrOGfIXbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng==", "bodyText": "this doExecute is a bit strange, doesn't have any extra info. Could you come up with a better naming, also we already have a doExecute call inside this method", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435151896", "createdAt": "2020-06-04T10:27:02Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -102,6 +113,23 @@ public void execute(StateContext<S, E> context) {\n         });\n     }\n \n+    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTg0Ng==", "bodyText": "shit, there is one indeed. no extra info is needed, it does the execution. any idea what should I name it?", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435181846", "createdAt": "2020-06-04T11:25:37Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -102,6 +113,23 @@ public void execute(StateContext<S, E> context) {\n         });\n     }\n \n+    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5NjExMQ==", "bodyText": "renamed to executeAction", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435296111", "createdAt": "2020-06-04T14:20:34Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/AbstractAction.java", "diffHunk": "@@ -102,6 +113,23 @@ public void execute(StateContext<S, E> context) {\n         });\n     }\n \n+    private void doExecute(StateContext<S, E> context, P payload, C flowContext, Map<Object, Object> variables, String flowStateName) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MTg5Ng=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDU3MDUwOnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDoyODozNVrOGe_nZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMToyNDozOFrOGfBXJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Mjc0MQ==", "bodyText": "similar here, can we come up with a meaningful name? like acceptWithSpanContext or whatever", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435152741", "createdAt": "2020-06-04T10:28:35Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }\n+            try (Scope scope = tracer.activateSpan(span)) {\n+                doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    private void doAccept(Event<? extends Payload> event, String key, Payload payload, String flowId, String flowChainId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTM1MA==", "bodyText": "I think doAccept is better, this is a common java terminology for calling a private method that does the actual think, like accepting in this case.", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435181350", "createdAt": "2020-06-04T11:24:38Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -71,14 +75,37 @@\n     @Inject\n     private ApplicationFlowInformation applicationFlowInformation;\n \n+    @Inject\n+    private Tracer tracer;\n+\n     @Override\n     public void accept(Event<? extends Payload> event) {\n         String key = (String) event.getKey();\n         Payload payload = event.getData();\n         String flowId = getFlowId(event);\n         String flowChainId = getFlowChainId(event);\n         String flowTriggerUserCrn = getFlowTriggerUserCrn(event);\n-        FlowParameters flowParameters = new FlowParameters(flowId, flowTriggerUserCrn);\n+        Span activeSpan = tracer.activeSpan();\n+        SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+        String operationName = event.getKey().toString();\n+        if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+            doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+        } else {\n+            Span span = TracingUtil.getSpan(tracer, operationName, spanContext, flowId, flowChainId, flowTriggerUserCrn);\n+            if (spanContext == null) {\n+                spanContext = span.context();\n+            }\n+            try (Scope scope = tracer.activateSpan(span)) {\n+                doAccept(event, key, payload, flowId, flowChainId, flowTriggerUserCrn, spanContext);\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+    }\n+\n+    private void doAccept(Event<? extends Payload> event, String key, Payload payload, String flowId, String flowChainId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1Mjc0MQ=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDU4NDk5OnYy", "diffSide": "RIGHT", "path": "flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMDozMjozOVrOGe_wFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTo0NToyN1rOGfB_5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NDk2NA==", "bodyText": "same", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435154964", "createdAt": "2020-06-04T10:32:39Z", "author": {"login": "lacikaaa"}, "path": "flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java", "diffHunk": "@@ -29,16 +39,37 @@ public Object setFlowTriggerUserCrnForReactorHandler(ProceedingJoinPoint proceed\n         Event<?> event = (Event<?>) proceedingJoinPoint.getArgs()[0];\n         String flowTriggerUserCrn = event.getHeaders().get(FlowConstants.FLOW_TRIGGER_USERCRN);\n         return ThreadBasedUserCrnProvider.doAsAndThrow(flowTriggerUserCrn, () -> {\n-            if (flowTriggerUserCrn != null) {\n-                try {\n-                    MDCBuilder.buildMdcContextFromCrn(Crn.fromString(flowTriggerUserCrn));\n-                } catch (Exception e) {\n-                    LOGGER.debug(\"Couldn't set MDCContext from crn: [{}]\", flowTriggerUserCrn, e);\n+            String operationName = event.getKey().toString();\n+            SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+            Span activeSpan = tracer.activeSpan();\n+            if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                return doProceed(proceedingJoinPoint, flowTriggerUserCrn, event, spanContext);\n+            } else {\n+                Span span = TracingUtil.getSpan(tracer, operationName, spanContext, event.getHeaders().get(FlowConstants.FLOW_ID),\n+                        event.getHeaders().get(FlowConstants.FLOW_CHAIN_ID), flowTriggerUserCrn);\n+                try (Scope ignored = tracer.activateSpan(span)) {\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MTc4MQ==", "bodyText": "same answer", "url": "https://github.com/hortonworks/cloudbreak/pull/8196#discussion_r435191781", "createdAt": "2020-06-04T11:45:27Z", "author": {"login": "attilapalfi92"}, "path": "flow/src/main/java/com/sequenceiq/flow/reactor/FlowParametersAspects.java", "diffHunk": "@@ -29,16 +39,37 @@ public Object setFlowTriggerUserCrnForReactorHandler(ProceedingJoinPoint proceed\n         Event<?> event = (Event<?>) proceedingJoinPoint.getArgs()[0];\n         String flowTriggerUserCrn = event.getHeaders().get(FlowConstants.FLOW_TRIGGER_USERCRN);\n         return ThreadBasedUserCrnProvider.doAsAndThrow(flowTriggerUserCrn, () -> {\n-            if (flowTriggerUserCrn != null) {\n-                try {\n-                    MDCBuilder.buildMdcContextFromCrn(Crn.fromString(flowTriggerUserCrn));\n-                } catch (Exception e) {\n-                    LOGGER.debug(\"Couldn't set MDCContext from crn: [{}]\", flowTriggerUserCrn, e);\n+            String operationName = event.getKey().toString();\n+            SpanContext spanContext = event.getHeaders().get(FlowConstants.SPAN_CONTEXT);\n+            Span activeSpan = tracer.activeSpan();\n+            if (TracingUtil.isActiveSpanReusable(activeSpan, spanContext, operationName)) {\n+                return doProceed(proceedingJoinPoint, flowTriggerUserCrn, event, spanContext);\n+            } else {\n+                Span span = TracingUtil.getSpan(tracer, operationName, spanContext, event.getHeaders().get(FlowConstants.FLOW_ID),\n+                        event.getHeaders().get(FlowConstants.FLOW_CHAIN_ID), flowTriggerUserCrn);\n+                try (Scope ignored = tracer.activateSpan(span)) {\n+                    if (spanContext == null) {\n+                        spanContext = span.context();\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1NDk2NA=="}, "originalCommit": {"oid": "fdc2445efbea2b0c7e042a12dbc6f33cb09df3af"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3272, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}