{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDEyOTA5", "number": 7131, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0Mzo1MlrODaN8GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mjo0MlrODaecYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE3OTQ1OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0Mzo1MlrOFhC96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTo0Mzo1MlrOFhC96A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5NTk0NA==", "bodyText": "\"If subnetId\"  =>  \"If VNetId\" - actually it was me who added this nice sentence :D", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370195944", "createdAt": "2020-01-23T15:43:52Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/validation/network/AzureEnvironmentNetworkValidator.java", "diffHunk": "@@ -64,11 +64,11 @@ private void checkExistingNetworkParamsProvidedWhenSubnetsPresent(NetworkDto net\n         }\n     }\n \n-    private void checkSubnetsProvidedWhenExistingNetwork(\n-            NetworkDto networkDto, ValidationResult.ValidationResultBuilder resultBuilder, AzureParams azureParams) {\n+    private void checkSubnetsProvidedWhenExistingNetwork(ValidationResult.ValidationResultBuilder resultBuilder,\n+            AzureParams azureParams, Map<String, CloudSubnet> subnetMetas) {\n         if (StringUtils.isNotEmpty(azureParams.getNetworkId()) && StringUtils.isNotEmpty(azureParams.getResourceGroupName())\n-                && networkDto.getSubnetIds().isEmpty()) {\n-            String message = String.format(\"If subnetId and resourceGroupName are specified then subnet ids must be specified as well.\",\n+                && subnetMetas.isEmpty()) {\n+            String message = String.format(\"If subnetId (%s) and resourceGroupName (%s) are specified then subnet ids must be specified as well.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c470803243580c4ca6cab286055ba482c742a03e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDYzMTM2OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/dto/NetworkDto.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTowMDozOVrOFhaWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTozNTo1NFrOFh8Zxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTA5NA==", "bodyText": "I would rename it clone or copy", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370579094", "createdAt": "2020-01-24T11:00:39Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/dto/NetworkDto.java", "diffHunk": "@@ -59,6 +59,10 @@ public static Builder builder() {\n         return new Builder();\n     }\n \n+    public static Builder builder(NetworkDto networkDto) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzNjk2Ng==", "bodyText": "I think the builder is better than copy or clone. It is meaning clone the networkDto and it is not creating a builder for it", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r371136966", "createdAt": "2020-01-27T09:35:54Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/dto/NetworkDto.java", "diffHunk": "@@ -59,6 +59,10 @@ public static Builder builder() {\n         return new Builder();\n     }\n \n+    public static Builder builder(NetworkDto networkDto) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3OTA5NA=="}, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY1NjQ1OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMTozOFrOFhamHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMTozOFrOFhamHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA2OQ==", "bodyText": "Lines 99-104 I would refactor into a method: getNetworksByResourceGroup", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370583069", "createdAt": "2020-01-24T11:11:38Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -92,21 +93,22 @@ private String getMachineType(String it) {\n     public CloudNetworks networks(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n-\n-        for (Network network : client.getNetworks()) {\n+        String networkId = filters.get(\"networkId\");\n+        String resourceGroupName = filters.get(\"resourceGroupName\");\n+        if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n+            Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY1Nzc2OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMjoxM1rOFham8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxMjoxM1rOFham8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzI4MA==", "bodyText": "Lines 106-113 I would refactor into a method called getAllNetworksByRegion() or similar", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370583280", "createdAt": "2020-01-24T11:12:13Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzurePlatformResources.java", "diffHunk": "@@ -92,21 +93,22 @@ private String getMachineType(String it) {\n     public CloudNetworks networks(CloudCredential cloudCredential, Region region, Map<String, String> filters) {\n         AzureClient client = azureClientService.getClient(cloudCredential);\n         Map<String, Set<CloudNetwork>> result = new HashMap<>();\n-\n-        for (Network network : client.getNetworks()) {\n+        String networkId = filters.get(\"networkId\");\n+        String resourceGroupName = filters.get(\"resourceGroupName\");\n+        if (!StringUtils.isEmpty(networkId) && !StringUtils.isEmpty(resourceGroupName)) {\n+            Network network = client.getNetworkByResourceGroup(resourceGroupName, networkId);\n             String actualRegion = network.region().label();\n             if (regionMatch(actualRegion, region)) {\n-                Set<CloudSubnet> subnets = new HashSet<>();\n-                for (Entry<String, Subnet> subnet : network.subnets().entrySet()) {\n-                    subnets.add(new CloudSubnet(subnet.getKey(), subnet.getKey(), null, subnet.getValue().addressPrefix()));\n+                CloudNetwork cloudNetwork = convertToCloudNetwork(network);\n+                result.put(actualRegion, Set.of(cloudNetwork));\n+            }\n+        } else {\n+            for (Network network : client.getNetworks()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDY5NjQ2OnYy", "diffSide": "LEFT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToyOToxOFrOFha-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToyOToxOFrOFha-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTMxNA==", "bodyText": "In case of an exception are we going to set the cluster state somewhere else to update failed? Or is the cluster state set at all when network update is started?", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370589314", "createdAt": "2020-01-24T11:29:18Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -122,31 +119,19 @@ private EnvironmentDto changeCredential(String accountId, String environmentName\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            Optional<BaseNetwork> original = networkService.findByEnvironment(environment.getId());\n-            original.ifPresent(baseNetwork -> editDto.getNetworkDto().setId(baseNetwork.getId()));\n-            try {\n-                BaseNetwork network = createAndSetNetwork(environment, editDto.getNetworkDto(), editDto.getAccountId());\n-                if (network != null) {\n-                    environment.setNetwork(network);\n-                }\n-            } catch (Exception e) {\n-                environment.setStatus(EnvironmentStatus.UPDATE_FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcwNDExOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozMjozN1rOFhbDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozMjozN1rOFhbDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MDUyMA==", "bodyText": "I would change it to:\n\"You need to reinstall the environment into an existing VPC\"\nIf this is what you meant.", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370590520", "createdAt": "2020-01-24T11:32:37Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+                .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n+                .build();\n+        Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n+                subnetMetadatas);\n+        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {\n+            validationResultBuilder.error(\"Subnet could not be attached to this environment, because it is newly created by Cloudbreak. \" +\n+                    \"You need to re-install the the environment with existed VPC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcwNzIzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNDowOFrOFhbFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo0NjozNFrOFhcnIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTA0Ng==", "bodyText": "This if statement could come right after the networkDto is created and do an early return with validation error, or do we need to get the cloud networks etc and validate them also in this case?", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370591046", "createdAt": "2020-01-24T11:34:08Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+                .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n+                .build();\n+        Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n+                subnetMetadatas);\n+        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNjA5Ng==", "bodyText": "Yes, we want to write all of the errors", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370616096", "createdAt": "2020-01-24T12:46:34Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);\n+        NetworkDto cloneNetworkDto = NetworkDto.builder(networkDto)\n+                .withSubnetMetas(editDto.getNetworkDto().getSubnetMetas())\n+                .build();\n+        Map<String, CloudSubnet> subnetMetadatas = retrieveSubnetMetadata(environment, cloneNetworkDto);\n+        ValidationResult.ValidationResultBuilder validationResultBuilder = networkCreationValidator.validateNetworkEdit(environment, cloneNetworkDto,\n+                subnetMetadatas);\n+        if (networkDto.getRegistrationType() == RegistrationType.CREATE_NEW) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTA0Ng=="}, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcwNzg2OnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNDoyOFrOFhbFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNDoyOFrOFhbFsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTE1NQ==", "bodyText": "networkDto I would name: originalNetworkDto", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370591155", "createdAt": "2020-01-24T11:34:28Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/NetworkService.java", "diffHunk": "@@ -77,36 +85,72 @@ private CloudPlatform getCloudPlatform(Environment environment) {\n     public Map<String, CloudSubnet> retrieveSubnetMetadata(Environment environment, NetworkDto network) {\n         if (network == null || network.getSubnetIds().isEmpty()) {\n             return Map.of();\n-        } else if (CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform())) {\n-            String regionName = environment.getRegionSet().iterator().next().getName();\n-            PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n-            platformResourceRequest.setCredential(environment.getCredential());\n-            platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n-            platformResourceRequest.setRegion(regionName);\n-            getAwsVpcId(network)\n-                    .ifPresent(vpcId -> platformResourceRequest.setFilters(Map.of(\"vpcId\", vpcId)));\n-\n-            CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n-            Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n-            return cloudNetworkSet.stream()\n-                    .filter(n -> n.getId().equals(getAwsVpcId(network).orElse(null)))\n-                    .findFirst()\n-                    .map(CloudNetwork::getSubnetsMeta)\n-                    .stream()\n-                    .flatMap(Set::stream)\n-                    .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n-                    .collect(Collectors.toMap(CloudSubnet::getId, Function.identity()));\n+        } else if (isAws(environment)) {\n+            Map<String, String> filter = getAwsVpcId(network)\n+                    .map(vpcId -> Map.of(\"vpcId\", vpcId))\n+                    .orElse(Map.of());\n+            return fetchCloudNetwork(environment, network, filter);\n+        } else if (isAzure(environment)) {\n+            Map<String, String> filter = new HashMap<>();\n+            filter.put(\"networkId\", network.getAzure().getNetworkId());\n+            filter.put(\"resourceGroupName\", network.getAzure().getResourceGroupName());\n+            return fetchCloudNetwork(environment, network, filter);\n         } else {\n-            return network.getSubnetIds().stream().collect(Collectors.toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n+            return network.getSubnetIds().stream().collect(toMap(Function.identity(), id -> new CloudSubnet(id, null)));\n         }\n     }\n \n+    private Map<String, CloudSubnet> fetchCloudNetwork(Environment environment, NetworkDto network, Map<String, String> filter) {\n+        String regionName = environment.getRegionSet().iterator().next().getName();\n+        PlatformResourceRequest platformResourceRequest = new PlatformResourceRequest();\n+        platformResourceRequest.setCredential(environment.getCredential());\n+        platformResourceRequest.setCloudPlatform(environment.getCloudPlatform());\n+        platformResourceRequest.setRegion(regionName);\n+        platformResourceRequest.setFilters(filter);\n+\n+        CloudNetworks cloudNetworks = platformParameterService.getCloudNetworks(platformResourceRequest);\n+        Set<CloudNetwork> cloudNetworkSet = cloudNetworks.getCloudNetworkResponses().get(regionName);\n+        return cloudNetworkSet.stream()\n+                .flatMap(it -> it.getSubnetsMeta().stream())\n+                .filter(sn -> network.getSubnetIds().contains(sn.getId()))\n+                .collect(toMap(CloudSubnet::getId, Function.identity()));\n+    }\n+\n+    private boolean isAzure(Environment environment) {\n+        return CloudPlatform.AZURE.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n+    private boolean isAws(Environment environment) {\n+        return CloudPlatform.AWS.name().equalsIgnoreCase(environment.getCloudPlatform());\n+    }\n+\n     public Optional<String> getAwsVpcId(NetworkDto networkDto) {\n         return Optional.ofNullable(networkDto)\n                 .map(NetworkDto::getAws)\n                 .map(AwsParams::getVpcId);\n     }\n \n+    public BaseNetwork mergeNetworkDtoWithNetwork(BaseNetwork originalNetwork, EnvironmentEditDto editDto, Environment environment) {\n+        EnvironmentNetworkConverter environmentNetworkConverter = environmentNetworkConverterMap.get(CloudPlatform.valueOf(environment.getCloudPlatform()));\n+        NetworkDto networkDto = environmentNetworkConverter.convertToDto(originalNetwork);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDgxMDI3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjoyMToxMlrOFhcDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo0NToyNFrOFhclbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzA0MQ==", "bodyText": "I think the else clause is not needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370607041", "createdAt": "2020-01-24T12:21:12Z", "author": {"login": "gergopapi2"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java", "diffHunk": "@@ -11,27 +11,37 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n public class ValidationResult {\n \n     private final State state;\n \n     private final List<String> errors;\n \n-    private final String formattedErrors;\n+    private String formattedErrors;\n+\n+    private final String prefix;\n \n-    private ValidationResult(State state, SortedSet<String> errors) {\n+    private ValidationResult(State state, SortedSet<String> errors, String prefix) {\n         this.state = state;\n         this.errors = new ArrayList<>(errors);\n-        formattedErrors = IntStream.range(0, this.errors.size())\n+        this.prefix = prefix;\n+        if (!StringUtils.isEmpty(prefix)) {\n+            formattedErrors = prefix + \": \\n\";\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNTY2MA==", "bodyText": "Unfortunately, the else clause is needed because if formattedErrors  is null, the null will appear the start of the formatted errors", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370615660", "createdAt": "2020-01-24T12:45:24Z", "author": {"login": "topolyai5"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/ValidationResult.java", "diffHunk": "@@ -11,27 +11,37 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n public class ValidationResult {\n \n     private final State state;\n \n     private final List<String> errors;\n \n-    private final String formattedErrors;\n+    private String formattedErrors;\n+\n+    private final String prefix;\n \n-    private ValidationResult(State state, SortedSet<String> errors) {\n+    private ValidationResult(State state, SortedSet<String> errors, String prefix) {\n         this.state = state;\n         this.errors = new ArrayList<>(errors);\n-        formattedErrors = IntStream.range(0, this.errors.size())\n+        this.prefix = prefix;\n+        if (!StringUtils.isEmpty(prefix)) {\n+            formattedErrors = prefix + \": \\n\";\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzA0MQ=="}, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDg4MzUyOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mjo0MlrOFhcvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMjo1Mjo0MlrOFhcvrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODI4Ng==", "bodyText": "As per personal communications it seems this line is not needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7131#discussion_r370618286", "createdAt": "2020-01-24T12:52:42Z", "author": {"login": "gergopapi2"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentModificationService.java", "diffHunk": "@@ -122,31 +119,19 @@ private EnvironmentDto changeCredential(String accountId, String environmentName\n \n     private void editNetworkIfChanged(Environment environment, EnvironmentEditDto editDto) {\n         if (networkChanged(editDto)) {\n-            Optional<BaseNetwork> original = networkService.findByEnvironment(environment.getId());\n-            original.ifPresent(baseNetwork -> editDto.getNetworkDto().setId(baseNetwork.getId()));\n-            try {\n-                BaseNetwork network = createAndSetNetwork(environment, editDto.getNetworkDto(), editDto.getAccountId());\n-                if (network != null) {\n-                    environment.setNetwork(network);\n-                }\n-            } catch (Exception e) {\n-                environment.setStatus(EnvironmentStatus.UPDATE_FAILED);\n-                environment.setStatusReason(e.getMessage());\n-                environmentService.save(environment);\n-                throw e;\n+            BaseNetwork network = networkService.mergeNetworkDtoWithNetwork(environment.getNetwork(), editDto, environment);\n+            if (network != null) {\n+                environment.setNetwork(network);\n             }\n+            environment.setStatus(EnvironmentStatus.AVAILABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "678472d60543fbb69238be0ec4b0611f712f5313"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2946, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}