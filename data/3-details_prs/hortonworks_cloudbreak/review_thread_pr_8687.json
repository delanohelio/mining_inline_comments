{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzkyMTEx", "number": 8687, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowNzo0MVrOEUKV4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1MDoyN1rOEUuDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc2NDE3OnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowNzo0MVrOG6TDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTowNzo0MVrOG6TDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4Mjc1NQ==", "bodyText": "This is not needed.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463782755", "createdAt": "2020-07-31T19:07:41Z", "author": {"login": "frozenwizard"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterResponse.java", "diffHunk": "@@ -37,14 +37,17 @@\n \n     private boolean rangerRazEnabled;\n \n+    private boolean mediumDutyHAEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5a0ad9189555e6b54865360dc1d2825ca70d11"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTc3ODk2OnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMzowNFrOG6TMaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOToxMzowNFrOG6TMaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc4NTA2NQ==", "bodyText": "Yea this doesn't need to be part of the response.  Remove it for the other files.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463785065", "createdAt": "2020-07-31T19:13:04Z", "author": {"login": "frozenwizard"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterDetailResponse.java", "diffHunk": "@@ -18,7 +18,8 @@ public SdxClusterDetailResponse(SdxClusterResponse sdxClusterResponse, StackV4Re\n                 sdxClusterResponse.getEnvironmentCrn(), sdxClusterResponse.getStackCrn(),\n                 sdxClusterResponse.getClusterShape(), sdxClusterResponse.getCloudStorageBaseLocation(),\n                 sdxClusterResponse.getCloudStorageFileSystemType(), sdxClusterResponse.getRuntime(),\n-                sdxClusterResponse.getRangerRazEnabled());\n+                sdxClusterResponse.getRangerRazEnabled(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5a0ad9189555e6b54865360dc1d2825ca70d11"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkwNzIyOnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1ODoxMlrOG6UaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowNzo0NlrOG6Uzjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDkyOQ==", "bodyText": "I don't understand why we need this? Shouldn't you just check if the cluster shape is Medium Duty?", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463804929", "createdAt": "2020-07-31T19:58:12Z", "author": {"login": "kmanamcheri"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "diffHunk": "@@ -108,4 +110,12 @@ public boolean isEnableRangerRaz() {\n     public void setEnableRangerRaz(boolean enableRangerRaz) {\n         this.enableRangerRaz = enableRangerRaz;\n     }\n+\n+    public boolean isEnableMediumDutyHA() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgxMTQ3MA==", "bodyText": "yeah, good point.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463811470", "createdAt": "2020-07-31T20:07:46Z", "author": {"login": "atxmemo"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "diffHunk": "@@ -108,4 +110,12 @@ public boolean isEnableRangerRaz() {\n     public void setEnableRangerRaz(boolean enableRangerRaz) {\n         this.enableRangerRaz = enableRangerRaz;\n     }\n+\n+    public boolean isEnableMediumDutyHA() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNDkyOQ=="}, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkwODcwOnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1ODo0MFrOG6Ua2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1ODo0MFrOG6Ua2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTE0Nw==", "bodyText": "Remove all changes in this file.  As discussed, the SdxClusterShape says whether or not it is light, custom or medium.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805147", "createdAt": "2020-07-31T19:58:40Z", "author": {"login": "frozenwizard"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/SdxClusterRequest.java", "diffHunk": "@@ -29,6 +29,8 @@\n \n     private boolean enableRangerRaz;\n \n+    private boolean enableMediumDutyHA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkwOTExOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1ODo0N1rOG6UbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1ODo0N1rOG6UbEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTIwMA==", "bodyText": "Shouldn't this check if the cluster shape requested is medium duty? If it is, then you validate that you have the entitlement.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805200", "createdAt": "2020-07-31T19:58:47Z", "author": {"login": "kmanamcheri"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.isEnableMediumDutyHA()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkxMDk1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1OToyNlrOG6UcOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo1OToyNlrOG6UcOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNTQ5Nw==", "bodyText": "Here compare the sdxClusterRequest.sdxclustershape to SDXClusterShape.MEDIUM_DUTY_HA", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463805497", "createdAt": "2020-07-31T19:59:26Z", "author": {"login": "frozenwizard"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.isEnableMediumDutyHA()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkxNzA2OnYy", "diffSide": "RIGHT", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMDo0NlrOG6UfcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMDo0NlrOG6UfcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjMyMQ==", "bodyText": "remove.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806321", "createdAt": "2020-07-31T20:00:46Z", "author": {"login": "frozenwizard"}, "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkxODg4OnYy", "diffSide": "RIGHT", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMTowNVrOG6UgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMTowNVrOG6UgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjU0NQ==", "bodyText": "remove", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806545", "createdAt": "2020-07-31T20:01:05Z", "author": {"login": "frozenwizard"}, "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n+        SdxCluster createdSdxCluster = result.getLeft();\n+        Assertions.assertEquals(id, createdSdxCluster.getId());\n+        final ArgumentCaptor<SdxCluster> captor = ArgumentCaptor.forClass(SdxCluster.class);\n+        verify(sdxClusterRepository, times(1)).save(captor.capture());\n+        SdxCluster capturedSdx = captor.getValue();\n+        assertTrue(capturedSdx.getClusterShape().equals(MEDIUM_DUTY_HA));\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHANoEntitlement() throws IOException {\n+        final String runtime = \"7.2.2\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTkyMTk4OnYy", "diffSide": "RIGHT", "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMTozOVrOG6UiCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDowMTozOVrOG6UiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwNjk4NQ==", "bodyText": "remove", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463806985", "createdAt": "2020-07-31T20:01:39Z", "author": {"login": "frozenwizard"}, "path": "datalake/src/test/java/com/sequenceiq/datalake/service/sdx/SdxServiceTest.java", "diffHunk": "@@ -624,6 +625,100 @@ void testSdxCreateRazEnabled720Runtime() {\n         assertEquals(\"1. Provisioning Ranger Raz is only valid for CM version > 7.2.1 and not 7.2.0\", badRequestException.getMessage());\n     }\n \n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled() throws IOException, TransactionExecutionException {\n+        final String runtime = \"7.2.2\";\n+        when(transactionService.required(isA(Supplier.class))).thenAnswer(invocation -> invocation.getArgument(0, Supplier.class).get());\n+        String lightDutyJson = FileReaderUtils.readFileFromClasspath(\"/runtime/\" + runtime + \"/aws/medium_duty_ha.json\");\n+        when(cdpConfigService.getConfigForKey(any())).thenReturn(JsonUtil.readValue(lightDutyJson, StackV4Request.class));\n+        when(sdxReactorFlowManager.triggerSdxCreation(any())).thenReturn(new FlowIdentifier(FlowType.FLOW, \"FLOW_ID\"));\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        when(sdxClusterRepository.save(any(SdxCluster.class))).thenAnswer(invocation -> {\n+            SdxCluster sdxWithId = invocation.getArgument(0, SdxCluster.class);\n+            sdxWithId.setId(id);\n+            return sdxWithId;\n+        });\n+        when(clock.getCurrentTimeMillis()).thenReturn(1L);\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        Pair<SdxCluster, FlowIdentifier> result = underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null);\n+        SdxCluster createdSdxCluster = result.getLeft();\n+        Assertions.assertEquals(id, createdSdxCluster.getId());\n+        final ArgumentCaptor<SdxCluster> captor = ArgumentCaptor.forClass(SdxCluster.class);\n+        verify(sdxClusterRepository, times(1)).save(captor.capture());\n+        SdxCluster capturedSdx = captor.getValue();\n+        assertTrue(capturedSdx.getClusterShape().equals(MEDIUM_DUTY_HA));\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHANoEntitlement() throws IOException {\n+        final String runtime = \"7.2.2\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(runtime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(false);\n+        BadRequestException badRequestException = assertThrows(BadRequestException.class,\n+                () -> underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null));\n+        assertEquals(\"1. Provisioning a Medium Duty HA shape is not enabled for this account.\", badRequestException.getMessage());\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled710Runtime() {\n+        final String invalidRuntime = \"7.1.0\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(invalidRuntime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);\n+        when(entitlementService.mediumDutyHAEnabled(anyString(), anyString())).thenReturn(true);\n+        BadRequestException badRequestException = assertThrows(BadRequestException.class,\n+                () -> underTest.createSdx(USER_CRN, CLUSTER_NAME, sdxClusterRequest, null));\n+        assertEquals(\"1. Provisioning a Medium Duty HA shape is only valid for CM version > 7.2.2 and not \" + invalidRuntime, badRequestException.getMessage());\n+    }\n+\n+    @Test\n+    void testSdxCreateMediumDutyHAEnabled720Runtime() {\n+        final String invalidRuntime = \"7.2.0\";\n+        SdxClusterRequest sdxClusterRequest = new SdxClusterRequest();\n+        sdxClusterRequest.setRuntime(invalidRuntime);\n+        sdxClusterRequest.setClusterShape(MEDIUM_DUTY_HA);\n+        Map<String, String> tags = new HashMap<>();\n+        tags.put(\"mytag\", \"tagecske\");\n+        sdxClusterRequest.addTags(tags);\n+        sdxClusterRequest.setEnvironment(\"envir\");\n+        when(sdxClusterRepository.findByAccountIdAndEnvNameAndDeletedIsNull(anyString(), anyString())).thenReturn(new ArrayList<>());\n+        long id = 10L;\n+        mockEnvironmentCall(sdxClusterRequest, CloudPlatform.AWS);\n+        sdxClusterRequest.setEnableMediumDutyHA(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75788a241a8e8704bc97b7b1a5144c7b0ea44a90"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjAyMTc1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMToyM1rOG6VaHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQyMDozMToyM1rOG6VaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgyMTM0MA==", "bodyText": "Swap this around, cluster shape could be null and thus null.equals throws a npe.", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r463821340", "createdAt": "2020-07-31T20:31:23Z", "author": {"login": "frozenwizard"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutyHaEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (sdxClusterRequest.getClusterShape().equals(SdxClusterShape.MEDIUM_DUTY_HA)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ef59118ceb6d99c474b9544a034c9debad3924"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQxNzM0OnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDoxMzoyNFrOG6njrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMDoxMzoyNFrOG6njrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExODcwMg==", "bodyText": "CDP_MEDIUM_DUTY_SDX ?", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464118702", "createdAt": "2020-08-02T20:13:24Z", "author": {"login": "doktoric"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/EntitlementService.java", "diffHunk": "@@ -41,6 +41,9 @@\n     @VisibleForTesting\n     static final String CDP_RAZ = \"CDP_RAZ\";\n \n+    @VisibleForTesting\n+    static final String CDP_MEDIUM_DUTY_HA = \"CDP_MEDIUM_DUTY_HA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78162d0830233a3718ac8aff4e42f98f1028032b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTYwOTU1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0OTowMlrOG7E20g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0OTowMlrOG7E20g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5ODczOA==", "bodyText": "Is 7.2.2 supported? If so, then it should be \">=\" not \">\".", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464598738", "createdAt": "2020-08-03T18:49:02Z", "author": {"login": "kmanamcheri"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutySdxEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (SdxClusterShape.MEDIUM_DUTY_HA.equals(sdxClusterRequest.getClusterShape())) {\n+            boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n+                    Crn.safeFromString(environment.getCreator()).getAccountId());\n+            if (!mediumDutySdxEntitlementEnabled) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");\n+            }\n+            if (!isMediumDutySdxSupported(sdxClusterRequest.getRuntime())) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is only valid for CM version > 7.2.2 and not \" + sdxClusterRequest.getRuntime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82497200887da1b646ff49a429c41b0295ca2d6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTYxNDQxOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1MDoyN1rOG7E5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo1MDoyN1rOG7E5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5OTQ0OA==", "bodyText": "Improve this error message to state what entitlement should be enabled.\n\"Provisioning a medium duty data lake cluster is not enabled for this account. Contact Cloudera support to enable CDP_MEDIUM_DUTY_SDX entitlement for the account\"", "url": "https://github.com/hortonworks/cloudbreak/pull/8687#discussion_r464599448", "createdAt": "2020-08-03T18:50:27Z", "author": {"login": "kmanamcheri"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -452,6 +453,24 @@ private void validateRazEnablement(SdxClusterRequest sdxClusterRequest, Detailed\n         }\n     }\n \n+    private void validateMediumDutySdxEnablement(SdxClusterRequest sdxClusterRequest, DetailedEnvironmentResponse environment) {\n+        ValidationResultBuilder validationBuilder = new ValidationResultBuilder();\n+        if (SdxClusterShape.MEDIUM_DUTY_HA.equals(sdxClusterRequest.getClusterShape())) {\n+            boolean mediumDutySdxEntitlementEnabled = entitlementService.mediumDutySdxEnabled(environment.getCreator(),\n+                    Crn.safeFromString(environment.getCreator()).getAccountId());\n+            if (!mediumDutySdxEntitlementEnabled) {\n+                validationBuilder.error(\"Provisioning a Medium Duty SDX shape is not enabled for this account.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82497200887da1b646ff49a429c41b0295ca2d6"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3002, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}