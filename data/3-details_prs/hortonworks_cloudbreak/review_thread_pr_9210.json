{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODQ5OTc4", "number": 9210, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMzoyNlrOEs5mWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1OTo1NFrOEtXOIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE2NTA3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMzoyNlrOHgYwoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyMzoyNlrOHgYwoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMjE0NQ==", "bodyText": "clietn -> client", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r503722145", "createdAt": "2020-10-13T07:23:26Z", "author": {"login": "doktoric"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.client.Client;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.client.RestClientUtil;\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyConfiguration;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSecurityService;\n+import com.sequenceiq.freeipa.service.stack.ClusterProxyService;\n+\n+@Component\n+public class FreeIpaHealthCheckClientFactory {\n+\n+    private static final String DEFAULT_BASE_PATH = \"/freeipahealthcheck\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClientFactory.class);\n+\n+    @Value(\"${rest.debug}\")\n+    private boolean restDebug;\n+\n+    @Value(\"${freeipa.healthcheck.connectionTimeoutMs}\")\n+    private int connetionTimeoutMillis;\n+\n+    @Value(\"${freeipa.healthcheck.readTimeoutMs}\")\n+    private int readTimeoutMillis;\n+\n+    @Inject\n+    private ClusterProxyService clusterProxyService;\n+\n+    @Inject\n+    private TlsSecurityService tlsSecurityService;\n+\n+    @Inject\n+    private ClusterProxyConfiguration clusterProxyConfiguration;\n+\n+    public FreeIpaHealthCheckClient getClient(Stack stack, InstanceMetaData instance)\n+            throws FreeIpaClientException, MalformedURLException {\n+        FreeIpaHealthCheckClient client;\n+        if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n+            client = buildFreeIpaHealthCheckClientForClusterProxy(stack, instance);\n+        } else {\n+            client = buildFreeIpaHealthCheckClientForDirectConnect(stack, instance);\n+        }\n+        return client;\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClientForClusterProxy(Stack stack, InstanceMetaData instanceMetaData)\n+            throws FreeIpaClientException, MalformedURLException {\n+        HttpClientConfig httpClientConfig = new HttpClientConfig(clusterProxyConfiguration.getClusterProxyHost());\n+        String clusterProxyPath = toClusterProxyBasepath(stack, instanceMetaData.getDiscoveryFQDN());\n+        return buildFreeIpaHealthCheckClient(httpClientConfig, clusterProxyConfiguration.getClusterProxyPort(), clusterProxyPath, clusterProxyHeaders(),\n+                new FreeIpaHealthCheckClusterProxyErrorRpcListener());\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClientForDirectConnect(Stack stack, InstanceMetaData instanceMetaData)\n+            throws FreeIpaClientException, MalformedURLException {\n+        HttpClientConfig httpClientConfig = tlsSecurityService.buildTLSClientConfig(stack, instanceMetaData.getPublicIpWrapper(), instanceMetaData);\n+        int gatewayPort = Optional.ofNullable(stack.getGatewayport()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+        return buildFreeIpaHealthCheckClient(httpClientConfig, gatewayPort, DEFAULT_BASE_PATH, Map.of(), null);\n+    }\n+\n+    private FreeIpaHealthCheckClient buildFreeIpaHealthCheckClient(HttpClientConfig clientConfig, int port, String basePath,\n+            Map<String, String> headers, FreeIpaHealthCheckRpcListener listener)\n+            throws FreeIpaClientException, MalformedURLException {\n+\n+        Client restClient;\n+        try {\n+            restClient = RestClientUtil.createClient(clientConfig.getServerCert(), clientConfig.getClientCert(), clientConfig.getClientKey(),\n+                    connetionTimeoutMillis, readTimeoutMillis, restDebug);\n+        } catch (Exception e) {\n+            throw new FreeIpaClientException(\"Unable to create clietn for freeipa health checks\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5363338dbd14faa672677e060f5a53f37d01076"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTE2ODUzOnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNDoyN1rOHgYy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNDoyN1rOHgYy4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMjcyMg==", "bodyText": "FreeIpa or FreeIPA just asking because in this pr both word were used.", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r503722722", "createdAt": "2020-10-13T07:24:27Z", "author": {"login": "doktoric"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.freeipa.client.healthcheckmodel.CheckResult;\n+import com.sequenceiq.freeipa.client.healthcheckmodel.ClusterCheckResult;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+\n+public class FreeIpaHealthCheckClient implements AutoCloseable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClient.class);\n+\n+    private final Client restClient;\n+\n+    private final WebTarget rpcTarget;\n+\n+    private final MultivaluedMap<String, Object> headers;\n+\n+    private final FreeIpaHealthCheckRpcListener listener;\n+\n+    public FreeIpaHealthCheckClient(Client restClient, URL url, Map<String, String> headers, FreeIpaHealthCheckRpcListener listener) {\n+        this.restClient = restClient;\n+        this.headers = new MultivaluedHashMap<>(headers);\n+        this.listener = listener;\n+\n+        rpcTarget = restClient.target(url.toString());\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        restClient.close();\n+    }\n+\n+    public RPCResponse<CheckResult> nodeHealth() throws FreeIpaClientException {\n+        return invoke(\"node health check\", \"\", CheckResult.class);\n+    }\n+\n+    public RPCResponse<ClusterCheckResult> clusterHealth() throws FreeIpaClientException {\n+        return invoke(\"cluster health from node\", \"/cluster\", ClusterCheckResult.class);\n+    }\n+\n+    private <T> RPCResponse<T> invoke(String name, String path, Class<T> resultType) throws FreeIpaClientException {\n+        Invocation.Builder builder = rpcTarget.path(path)\n+                .request()\n+                .headers(headers);\n+        try (Response response = builder.get()) {\n+            if (!response.bufferEntity()) {\n+                throw new FreeIpaClientException(\"Unable to buffer the response from FreeIPA\");\n+            }\n+            if (listener != null) {\n+                listener.onBeforeResponseProcessed(response);\n+            }\n+            if (response.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL &&\n+                    response.getStatus() != Response.Status.SERVICE_UNAVAILABLE.getStatusCode()) {\n+                String message = String.format(\"Invoke FreeIpa health check failed: %d\", response.getStatus());\n+                throw new FreeIpaClientException(message, response.getStatus());\n+            }\n+            return toRpcResponse(name, response, resultType);\n+        } catch (FreeIpaClientException e) {\n+            throw e;\n+        } catch (Throwable throwable) {\n+            String message = String.format(\"Invoke FreeIpa health check failed: %s\", throwable.getLocalizedMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5363338dbd14faa672677e060f5a53f37d01076"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgyNTg3OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNjoxN1rOHhFDBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNjoxN1rOHhFDBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0Nzc0OQ==", "bodyText": "could you move the 3 if into 3 methods and name them, eg\n\nbufferResponseEntity\nvalidate/checkClusterProxyError\ncheckResponseStatus\n\nthanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504447749", "createdAt": "2020-10-14T07:06:17Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClient.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.Invocation;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.freeipa.client.healthcheckmodel.CheckResult;\n+import com.sequenceiq.freeipa.client.healthcheckmodel.ClusterCheckResult;\n+import com.sequenceiq.freeipa.client.model.RPCMessage;\n+import com.sequenceiq.freeipa.client.model.RPCResponse;\n+\n+public class FreeIpaHealthCheckClient implements AutoCloseable {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClient.class);\n+\n+    private final Client restClient;\n+\n+    private final WebTarget rpcTarget;\n+\n+    private final MultivaluedMap<String, Object> headers;\n+\n+    private final FreeIpaHealthCheckRpcListener listener;\n+\n+    public FreeIpaHealthCheckClient(Client restClient, URL url, Map<String, String> headers, FreeIpaHealthCheckRpcListener listener) {\n+        this.restClient = restClient;\n+        this.headers = new MultivaluedHashMap<>(headers);\n+        this.listener = listener;\n+\n+        rpcTarget = restClient.target(url.toString());\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        restClient.close();\n+    }\n+\n+    public RPCResponse<CheckResult> nodeHealth() throws FreeIpaClientException {\n+        return invoke(\"node health check\", \"\", CheckResult.class);\n+    }\n+\n+    public RPCResponse<ClusterCheckResult> clusterHealth() throws FreeIpaClientException {\n+        return invoke(\"cluster health from node\", \"/cluster\", ClusterCheckResult.class);\n+    }\n+\n+    private <T> RPCResponse<T> invoke(String name, String path, Class<T> resultType) throws FreeIpaClientException {\n+        Invocation.Builder builder = rpcTarget.path(path)\n+                .request()\n+                .headers(headers);\n+        try (Response response = builder.get()) {\n+            if (!response.bufferEntity()) {\n+                throw new FreeIpaClientException(\"Unable to buffer the response from FreeIPA\");\n+            }\n+            if (listener != null) {\n+                listener.onBeforeResponseProcessed(response);\n+            }\n+            if (response.getStatusInfo().getFamily() != Response.Status.Family.SUCCESSFUL &&\n+                    response.getStatus() != Response.Status.SERVICE_UNAVAILABLE.getStatusCode()) {\n+                String message = String.format(\"Invoke FreeIPA health check failed: %d\", response.getStatus());\n+                throw new FreeIpaClientException(message, response.getStatus());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg3MTA0OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/CheckResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxOTo0OVrOHhFeKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMzo0OVrOHhhDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NDY5Ng==", "bodyText": "I don't think this is necessary, both CheckEntry and PluginStatusEntry have toString implemented and List implementation should take care of that. Have you seen it not working well?\nIf not I think this still would be simpler solution:\nString checksString = StringUtils.join(checks, \",\");", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504454696", "createdAt": "2020-10-14T07:19:49Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/CheckResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.client.healthcheckmodel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CheckResult {\n+\n+    private String status;\n+\n+    private String host;\n+\n+    private List<CheckEntry> checks;\n+\n+    @JsonProperty(\"plugin_stat\")\n+    private List<PluginStatusEntry> pluginStat;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public List<CheckEntry> getChecks() {\n+        return checks;\n+    }\n+\n+    public void setChecks(List<CheckEntry> checks) {\n+        this.checks = checks;\n+    }\n+\n+    public List<PluginStatusEntry> getPluginStats() {\n+        return pluginStat;\n+    }\n+\n+    public void setPluginStats(List<PluginStatusEntry> pluginStat) {\n+        this.pluginStat = pluginStat;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String checksString = Optional.ofNullable(checks).stream()\n+                .flatMap(Collection::stream)\n+                .map(CheckEntry::toString)\n+                .collect(Collectors.joining(\",\"));\n+        String pluginStatString = Optional.ofNullable(pluginStat).stream()\n+                .flatMap(Collection::stream)\n+                .map(PluginStatusEntry::toString)\n+                .collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNjY1Mg==", "bodyText": "Thanks, you are correct.", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504906652", "createdAt": "2020-10-14T19:03:49Z", "author": {"login": "jamisonbennett"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/CheckResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.client.healthcheckmodel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CheckResult {\n+\n+    private String status;\n+\n+    private String host;\n+\n+    private List<CheckEntry> checks;\n+\n+    @JsonProperty(\"plugin_stat\")\n+    private List<PluginStatusEntry> pluginStat;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public List<CheckEntry> getChecks() {\n+        return checks;\n+    }\n+\n+    public void setChecks(List<CheckEntry> checks) {\n+        this.checks = checks;\n+    }\n+\n+    public List<PluginStatusEntry> getPluginStats() {\n+        return pluginStat;\n+    }\n+\n+    public void setPluginStats(List<PluginStatusEntry> pluginStat) {\n+        this.pluginStat = pluginStat;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String checksString = Optional.ofNullable(checks).stream()\n+                .flatMap(Collection::stream)\n+                .map(CheckEntry::toString)\n+                .collect(Collectors.joining(\",\"));\n+        String pluginStatString = Optional.ofNullable(pluginStat).stream()\n+                .flatMap(Collection::stream)\n+                .map(PluginStatusEntry::toString)\n+                .collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NDY5Ng=="}, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg3NDQ4OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/ClusterCheckResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMDo0OVrOHhFgLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMDo0OVrOHhFgLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NTIxNQ==", "bodyText": "same here as for CheckResult", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504455215", "createdAt": "2020-10-14T07:20:49Z", "author": {"login": "lacikaaa"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/healthcheckmodel/ClusterCheckResult.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sequenceiq.freeipa.client.healthcheckmodel;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ClusterCheckResult {\n+\n+    private String status;\n+\n+    private String host;\n+\n+    private List<CheckResult> replicas;\n+\n+    @JsonProperty(\"plugin_stat\")\n+    private List<PluginStatusEntry> pluginStat;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getHost() {\n+        return host;\n+    }\n+\n+    public void setHost(String host) {\n+        this.host = host;\n+    }\n+\n+    public List<CheckResult> getReplicas() {\n+        return replicas;\n+    }\n+\n+    public void setReplicas(List<CheckResult> replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    public List<PluginStatusEntry> getPluginStats() {\n+        return pluginStat;\n+    }\n+\n+    public void setPluginStats(List<PluginStatusEntry> pluginStat) {\n+        this.pluginStat = pluginStat;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String replicasString = Optional.ofNullable(replicas).stream()\n+                .flatMap(Collection::stream)\n+                .map(CheckResult::toString)\n+                .collect(Collectors.joining(\",\"));\n+        String pluginStatString = Optional.ofNullable(pluginStat).stream()\n+                .flatMap(Collection::stream)\n+                .map(PluginStatusEntry::toString)\n+                .collect(Collectors.joining(\",\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg4MjgxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClusterProxyErrorRpcListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMzoyNVrOHhFlPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMzoyNVrOHhFlPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjUwOA==", "bodyText": "actually this could be simplified a bit:\n    private Optional<ClusterProxyError> deserializeAsClusterProxyError(Response response) {\n        try {\n            ClusterProxyError clusterProxyError = response.readEntity(ClusterProxyError.class);\n            if (clusterProxyError.getCode().contains(\"cluster-proxy\")) {\n                return Optional.of(clusterProxyError);\n            } else {\n                return Optional.empty();\n            }\n        } catch (Exception ex) {\n            return Optional.empty();\n        }\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504456508", "createdAt": "2020-10-14T07:23:25Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClusterProxyErrorRpcListener.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.util.Optional;\n+\n+import javax.ws.rs.core.Response;\n+\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyException;\n+\n+public class FreeIpaHealthCheckClusterProxyErrorRpcListener implements FreeIpaHealthCheckRpcListener {\n+\n+    private Optional<ClusterProxyError> deserializeAsClusterProxyError(Response response) {\n+        ClusterProxyError clusterProxyError;\n+        try {\n+            clusterProxyError = response.readEntity(ClusterProxyError.class);\n+            if (!clusterProxyError.getCode().contains(\"cluster-proxy\")) {\n+                return Optional.empty();\n+            }\n+        } catch (Exception ex) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(clusterProxyError);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTk2ODg1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0NzoyOVrOHhGZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0NzoyOVrOHhGZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2OTkzOQ==", "bodyText": "LOGGER is not used", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504469939", "createdAt": "2020-10-14T07:47:29Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaHealthCheckClientFactory.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.sequenceiq.freeipa.client;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.client.Client;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.client.HttpClientConfig;\n+import com.sequenceiq.cloudbreak.client.RestClientUtil;\n+import com.sequenceiq.cloudbreak.clusterproxy.ClusterProxyConfiguration;\n+import com.sequenceiq.freeipa.entity.InstanceMetaData;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.TlsSecurityService;\n+import com.sequenceiq.freeipa.service.stack.ClusterProxyService;\n+\n+@Component\n+public class FreeIpaHealthCheckClientFactory {\n+\n+    private static final String DEFAULT_BASE_PATH = \"/freeipahealthcheck\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaHealthCheckClientFactory.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDAxODI0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1OTo1NFrOHhG3cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowNjowM1rOHhhIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzU1Mw==", "bodyText": "from the allMatch documentation:\nIf the stream is empty then true is returned and the predicate is not evaluated. \nIs it possible we filter out everything and it returns a false positive?", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504477553", "createdAt": "2020-10-14T07:59:54Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -154,4 +219,12 @@ private void parseMessages(RPCResponse<Boolean> rpcResponse, HealthDetailsFreeIp\n             }\n         }\n     }\n+\n+    private boolean isHealthCheckPassing(RPCResponse<CheckResult> rpcResponse) {\n+        return rpcResponse.getMessages().stream()\n+                .map(RPCMessage::getCode)\n+                .filter(Objects::nonNull)\n+                .map(Response.Status.Family::familyOf)\n+                .allMatch(isEqual(Response.Status.Family.SUCCESSFUL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNzkxMA==", "bodyText": "Good point. We really shouldn't have 0 RPCs for any health check, but it's better to be safe.", "url": "https://github.com/hortonworks/cloudbreak/pull/9210#discussion_r504907910", "createdAt": "2020-10-14T19:06:03Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -154,4 +219,12 @@ private void parseMessages(RPCResponse<Boolean> rpcResponse, HealthDetailsFreeIp\n             }\n         }\n     }\n+\n+    private boolean isHealthCheckPassing(RPCResponse<CheckResult> rpcResponse) {\n+        return rpcResponse.getMessages().stream()\n+                .map(RPCMessage::getCode)\n+                .filter(Objects::nonNull)\n+                .map(Response.Status.Family::familyOf)\n+                .allMatch(isEqual(Response.Status.Family.SUCCESSFUL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzU1Mw=="}, "originalCommit": {"oid": "aaa45b2841b993b9278b08997facf56509e5a322"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2144, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}