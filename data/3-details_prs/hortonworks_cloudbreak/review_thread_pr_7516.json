{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzQ2MDUy", "number": 7516, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMzo0M1rODmwHVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowNTozN1rODoSKFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYwNzg5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxMzo0M1rOF0WRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyNjo0MlrOF0dyUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNTIxNA==", "bodyText": "these backup states should be moved to a different state file", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390435214", "createdAt": "2020-03-10T16:13:43Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "diffHunk": "@@ -39,4 +39,53 @@ restart_krb5kdc:\n   service.running:\n     - name: krb5kdc\n     - watch:\n-      - file: /etc/sysconfig/krb5kdc\n\\ No newline at end of file\n+      - file: /etc/sysconfig/krb5kdc\n+\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup_enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:monthly_full_backup_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_monthly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:hourly_backup_enabled') %}\n+/etc/cron.hourly/freeipa_backup_hourly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_hourly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:initial_full_backup_enabled') %}\n+freeipa_initial_full_backup:\n+  cmd.run:\n+    - name: /usr/local/bin/freeipa_backup -t FULL -f \"{{salt['grains.get']('fqdn')}}/full\" && echo $(date +%Y-%m-%d:%H:%M:%S) >> /var/log/freeipa_initial_backup-executed\n+    - failhard: False\n+    - unless: test -f /var/log/freeipa_initial_backup-executed\n+    - require:\n+        - file: /usr/local/bin/freeipa_backup\n+        - file: /etc/freeipa_backup.conf\n+{% endif %}\n+{% endif %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1ODI5MA==", "bodyText": "fair enough.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390558290", "createdAt": "2020-03-10T19:26:42Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "diffHunk": "@@ -39,4 +39,53 @@ restart_krb5kdc:\n   service.running:\n     - name: krb5kdc\n     - watch:\n-      - file: /etc/sysconfig/krb5kdc\n\\ No newline at end of file\n+      - file: /etc/sysconfig/krb5kdc\n+\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup_enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:monthly_full_backup_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_monthly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:hourly_backup_enabled') %}\n+/etc/cron.hourly/freeipa_backup_hourly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_hourly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:initial_full_backup_enabled') %}\n+freeipa_initial_full_backup:\n+  cmd.run:\n+    - name: /usr/local/bin/freeipa_backup -t FULL -f \"{{salt['grains.get']('fqdn')}}/full\" && echo $(date +%Y-%m-%d:%H:%M:%S) >> /var/log/freeipa_initial_backup-executed\n+    - failhard: False\n+    - unless: test -f /var/log/freeipa_initial_backup-executed\n+    - require:\n+        - file: /usr/local/bin/freeipa_backup\n+        - file: /etc/freeipa_backup.conf\n+{% endif %}\n+{% endif %}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNTIxNA=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYxMzU3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxNTowM1rOF0WVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowODowNVrOF0dJkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNjEzOQ==", "bodyText": "could you use cron states instead of file.managed?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390436139", "createdAt": "2020-03-10T16:15:03Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "diffHunk": "@@ -39,4 +39,53 @@ restart_krb5kdc:\n   service.running:\n     - name: krb5kdc\n     - watch:\n-      - file: /etc/sysconfig/krb5kdc\n\\ No newline at end of file\n+      - file: /etc/sysconfig/krb5kdc\n+\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup_enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:monthly_full_backup_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0Nzg1OA==", "bodyText": "No because it is not using cron it is using anacron.  This is necessary because anacron puts in some randomization of runtime for parts like monthly.  We don't want all the monthly backups to kick off at the same time in an HA environment because the monthly full backup brings down the freeipa for about 2 minutes.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390547858", "createdAt": "2020-03-10T19:08:05Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/common-install.sls", "diffHunk": "@@ -39,4 +39,53 @@ restart_krb5kdc:\n   service.running:\n     - name: krb5kdc\n     - watch:\n-      - file: /etc/sysconfig/krb5kdc\n\\ No newline at end of file\n+      - file: /etc/sysconfig/krb5kdc\n+\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup_enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:monthly_full_backup_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNjEzOQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYxOTcxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_hourly.j2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxNjoyMlrOF0WY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToxMTowNVrOF0dQ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNzEwMg==", "bodyText": "where this file would come from? why do we need it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390437102", "createdAt": "2020-03-10T16:16:22Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_hourly.j2", "diffHunk": "@@ -0,0 +1,6 @@\n+{%- from 'freeipa/settings.sls' import freeipa with context -%}\n+#!/bin/bash\n+if [ ! -f /tmp/freeipa_backup_hourly_bypass ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0OTcxMg==", "bodyText": "The file does not exist by default.  It is looked for to allow support to disable the hourly and monthly backups temporarily while a restore is done.  The freeipa backup only supports a specific /var/lib/ipa/backup directory.  We want to remove old backups from the local.  If the backups are running while someone is trying to do a restore it will remove the local restore they are trying to do.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390549712", "createdAt": "2020-03-10T19:11:05Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_hourly.j2", "diffHunk": "@@ -0,0 +1,6 @@\n+{%- from 'freeipa/settings.sls' import freeipa with context -%}\n+#!/bin/bash\n+if [ ! -f /tmp/freeipa_backup_hourly_bypass ]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNzEwMg=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTYyMTg1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_monthly.j2", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoxNjo0OFrOF0WaMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToxMTowNFrOF0dQyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNzQyNQ==", "bodyText": "same question like for the hourly one", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390437425", "createdAt": "2020-03-10T16:16:48Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_monthly.j2", "diffHunk": "@@ -0,0 +1,5 @@\n+{%- from 'freeipa/settings.sls' import freeipa with context -%}\n+#!/bin/bash\n+if [ ! -f /tmp/freeipa_backup_monthly_bypass ]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0OTcwNQ==", "bodyText": "same answer.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390549705", "createdAt": "2020-03-10T19:11:04Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/templates/freeipa_backup_monthly.j2", "diffHunk": "@@ -0,0 +1,5 @@\n+{%- from 'freeipa/settings.sls' import freeipa with context -%}\n+#!/bin/bash\n+if [ ! -f /tmp/freeipa_backup_monthly_bypass ]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQzNzQyNQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTczNDkxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaCreationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mjo1NlrOF0Xhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToyNDo1NFrOF0duXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTY2Mg==", "bodyText": "remove empty line please", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390455662", "createdAt": "2020-03-10T16:42:56Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaCreationService.java", "diffHunk": "@@ -115,8 +120,15 @@ public DescribeFreeIpaResponse launchFreeIpa(CreateFreeIpaRequest request, Strin\n         Telemetry telemetry = stack.getTelemetry();\n         cloudStorageFolderResolverService.updateStorageLocation(telemetry,\n                 FluentClusterType.FREEIPA.value(), stack.getName(), stack.getResourceCrn());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1NzI3OQ==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390557279", "createdAt": "2020-03-10T19:24:54Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaCreationService.java", "diffHunk": "@@ -115,8 +120,15 @@ public DescribeFreeIpaResponse launchFreeIpa(CreateFreeIpaRequest request, Strin\n         Telemetry telemetry = stack.getTelemetry();\n         cloudStorageFolderResolverService.updateStorageLocation(telemetry,\n                 FluentClusterType.FREEIPA.value(), stack.getName(), stack.getResourceCrn());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTY2Mg=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTg3NDQ4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxNTo1MlrOF0Y5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxNjowM1rOF0-WhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODI4Mw==", "bodyText": "could you change it to a more meaningful name?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390478283", "createdAt": "2020-03-10T17:15:52Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1Mzk3OQ==", "bodyText": "which part?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390553979", "createdAt": "2020-03-10T19:18:52Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODI4Mw=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA3OTMyOA==", "bodyText": "the variable split", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391079328", "createdAt": "2020-03-11T15:58:32Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODI4Mw=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MTg0NA==", "bodyText": "Done", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391091844", "createdAt": "2020-03-11T16:16:03Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3ODI4Mw=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTg4NzIwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxODo0OFrOF0ZBng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjowNDoxNlrOF0915w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDI4Ng==", "bodyText": "so many magic numbers. why 2?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390480286", "createdAt": "2020-03-10T17:18:48Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");\n+            String[] storageWithSuffix = split[0].split(\"/\", 2);\n+            String folderPrefix = storageWithSuffix.length < 2 ? \"\" :  \"/\" + storageWithSuffix[1];\n+            if (split.length < 2) {\n+                return new AdlsGen2Config(folderPrefix, storageWithSuffix[0], null, secure);\n+            } else {\n+                String[] splitByDomain = split[1].split(AZURE_DFS_DOMAIN_SUFFIX);\n+                String account = splitByDomain[0];\n+                if (splitByDomain.length > 1) {\n+                    String folderPrefixAfterDomain = splitByDomain[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MTc0Ng==", "bodyText": "This is a direct copy of the Telemetry processing of the storage locations for logging.  Do we want to change this overall?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390551746", "createdAt": "2020-03-10T19:14:44Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");\n+            String[] storageWithSuffix = split[0].split(\"/\", 2);\n+            String folderPrefix = storageWithSuffix.length < 2 ? \"\" :  \"/\" + storageWithSuffix[1];\n+            if (split.length < 2) {\n+                return new AdlsGen2Config(folderPrefix, storageWithSuffix[0], null, secure);\n+            } else {\n+                String[] splitByDomain = split[1].split(AZURE_DFS_DOMAIN_SUFFIX);\n+                String account = splitByDomain[0];\n+                if (splitByDomain.length > 1) {\n+                    String folderPrefixAfterDomain = splitByDomain[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDI4Ng=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MDYyOQ==", "bodyText": "then comes the question, why do we have to copy if it's the same?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391080629", "createdAt": "2020-03-11T16:00:13Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");\n+            String[] storageWithSuffix = split[0].split(\"/\", 2);\n+            String folderPrefix = storageWithSuffix.length < 2 ? \"\" :  \"/\" + storageWithSuffix[1];\n+            if (split.length < 2) {\n+                return new AdlsGen2Config(folderPrefix, storageWithSuffix[0], null, secure);\n+            } else {\n+                String[] splitByDomain = split[1].split(AZURE_DFS_DOMAIN_SUFFIX);\n+                String account = splitByDomain[0];\n+                if (splitByDomain.length > 1) {\n+                    String folderPrefixAfterDomain = splitByDomain[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDI4Ng=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4MzQ5NQ==", "bodyText": "The functions and flow is not an outright copy. Right now it is using very similar logic on the parsing of the adls container and s3 buckets paths, but the functions are slightly different with the base backups folder being different and a changed call path.\nAs well, later on, we will be moving to a dedicated selection of the backup storage location to a stand-alone bucket/container but the UI and flow work was unable to be done in the time needed for that call. This allows for the separate parsing mechanism for the backup once it moves away from the telemetry storage location.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391083495", "createdAt": "2020-03-11T16:04:16Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AdlsGen2BackupConfigGenerator.class);\n+\n+    private static final String[] ADLS_GEN2_SCHEME_PREFIXES = {\"abfs://\", \"abfss://\"};\n+\n+    private static final String AZURE_DFS_DOMAIN_SUFFIX = \".dfs.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SUFFIX = \"blob.core.windows.net\";\n+\n+    private static final String AZURE_BLOB_STORAGE_SCHEMA = \"https://\";\n+\n+    @Override\n+    public String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId) {\n+        AdlsGen2Config adlsGen2Config = generateBackupConfig(location);\n+        String logFolder = resolveBackupFolder(adlsGen2Config, clusterType, clusterName, clusterId);\n+        String hostPart = String.format(\"%s.%s\", adlsGen2Config.getAccount(), AZURE_BLOB_STORAGE_SUFFIX);\n+        String generatedLocation = String.format(\"%s%s\", AZURE_BLOB_STORAGE_SCHEMA,\n+                Paths.get(hostPart, adlsGen2Config.getFileSystem(), logFolder));\n+        LOGGER.info(\"The following ADLS Gen2 base folder location is generated: {} (from {})\",\n+                generatedLocation, location);\n+        return generatedLocation;\n+    }\n+\n+    private AdlsGen2Config generateBackupConfig(String location) {\n+        if (StringUtils.isNotEmpty(location)) {\n+            boolean secure = location.startsWith(ADLS_GEN2_SCHEME_PREFIXES[1]);\n+            String locationWithoutScheme = getLocationWithoutSchemePrefixes(location, ADLS_GEN2_SCHEME_PREFIXES);\n+            String[] split = locationWithoutScheme.split(\"@\");\n+            String[] storageWithSuffix = split[0].split(\"/\", 2);\n+            String folderPrefix = storageWithSuffix.length < 2 ? \"\" :  \"/\" + storageWithSuffix[1];\n+            if (split.length < 2) {\n+                return new AdlsGen2Config(folderPrefix, storageWithSuffix[0], null, secure);\n+            } else {\n+                String[] splitByDomain = split[1].split(AZURE_DFS_DOMAIN_SUFFIX);\n+                String account = splitByDomain[0];\n+                if (splitByDomain.length > 1) {\n+                    String folderPrefixAfterDomain = splitByDomain[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4MDI4Ng=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkyMjEwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigView.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoyNzoyNFrOF0ZXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzoxMTo1NFrOF1nqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NTk2NQ==", "bodyText": "backup related stuff could be under backup as they logically stick together", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390485965", "createdAt": "2020-03-10T17:27:24Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigView.java", "diffHunk": "@@ -0,0 +1,248 @@\n+package com.sequenceiq.freeipa.service.freeipa.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n+\n+import com.sequenceiq.cloudbreak.orchestrator.model.Node;\n+\n+public class FreeIpaConfigView {\n+\n+    private static final String EMPTY_CONFIG_DEFAULT = \"\";\n+\n+    private final boolean backupEnabled;\n+\n+    private final boolean monthlyFullBackUpEnabled;\n+\n+    private final boolean hourlyBackUpEnabled;\n+\n+    private final boolean initialFullBackupEnabled;\n+\n+    private final String backupPlatform;\n+\n+    private final String backupLocation;\n+\n+    private final String realm;\n+\n+    private final String domain;\n+\n+    private final String password;\n+\n+    private final String reverseZones;\n+\n+    private final String adminUser;\n+\n+    private final String freeipaToReplicate;\n+\n+    private final Set<Object> hosts;\n+\n+    private final String azureInstanceMsi;\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    private FreeIpaConfigView(Builder builder) {\n+        this.backupEnabled = builder.backupEnabled;\n+        this.monthlyFullBackUpEnabled = builder.monthlyFullBackUpEnabled;\n+        this.hourlyBackUpEnabled = builder.hourlyBackUpEnabled;\n+        this.initialFullBackupEnabled = builder.initialFullBackupEnabled;\n+        this.backupLocation = builder.backupLocation;\n+        this.backupPlatform = builder.backupPlatform;\n+        this.realm = builder.realm;\n+        this.domain = builder.domain;\n+        this.password = builder.password;\n+        this.reverseZones = builder.reverseZones;\n+        this.adminUser = builder.adminUser;\n+        this.freeipaToReplicate = builder.freeipaToReplicate;\n+        this.hosts = builder.hosts;\n+        this.azureInstanceMsi = builder.azureInstanceMsi;\n+    }\n+\n+    public String getBackupLocation() {\n+        return backupLocation;\n+    }\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public String getReverseZones() {\n+        return reverseZones;\n+    }\n+\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public String getFreeipaToReplicate() {\n+        return freeipaToReplicate;\n+    }\n+\n+    public Set<Object> getHosts() {\n+        return hosts;\n+    }\n+\n+    public boolean isBackupEnabled() {\n+        return backupEnabled;\n+    }\n+\n+    public boolean isMonthlyFullBackUpEnabled() {\n+        return monthlyFullBackUpEnabled;\n+    }\n+\n+    public boolean isHourlyBackUpEnabled() {\n+        return hourlyBackUpEnabled;\n+    }\n+\n+    public boolean isInitialFullBackupEnabled() {\n+        return initialFullBackupEnabled;\n+    }\n+\n+    public String getBackupPlatform() {\n+        return backupPlatform;\n+    }\n+\n+    public String getAzureInstanceMsi() {\n+        return azureInstanceMsi;\n+    }\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    public Map<String, Object> toMap() {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"backup_enabled\", this.backupEnabled);\n+        map.put(\"backup_location\", ObjectUtils.defaultIfNull(this.backupLocation, EMPTY_CONFIG_DEFAULT));\n+        map.put(\"monthly_full_backup_enabled\", this.monthlyFullBackUpEnabled);\n+        map.put(\"hourly_backup_enabled\", this.hourlyBackUpEnabled);\n+        map.put(\"initial_full_backup_enabled\", this.initialFullBackupEnabled);\n+        map.put(\"backup_platform\", ObjectUtils.defaultIfNull(this.backupPlatform, EMPTY_CONFIG_DEFAULT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNjM3MQ==", "bodyText": "Ill see if I can do this", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391636371", "createdAt": "2020-03-12T13:55:09Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigView.java", "diffHunk": "@@ -0,0 +1,248 @@\n+package com.sequenceiq.freeipa.service.freeipa.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n+\n+import com.sequenceiq.cloudbreak.orchestrator.model.Node;\n+\n+public class FreeIpaConfigView {\n+\n+    private static final String EMPTY_CONFIG_DEFAULT = \"\";\n+\n+    private final boolean backupEnabled;\n+\n+    private final boolean monthlyFullBackUpEnabled;\n+\n+    private final boolean hourlyBackUpEnabled;\n+\n+    private final boolean initialFullBackupEnabled;\n+\n+    private final String backupPlatform;\n+\n+    private final String backupLocation;\n+\n+    private final String realm;\n+\n+    private final String domain;\n+\n+    private final String password;\n+\n+    private final String reverseZones;\n+\n+    private final String adminUser;\n+\n+    private final String freeipaToReplicate;\n+\n+    private final Set<Object> hosts;\n+\n+    private final String azureInstanceMsi;\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    private FreeIpaConfigView(Builder builder) {\n+        this.backupEnabled = builder.backupEnabled;\n+        this.monthlyFullBackUpEnabled = builder.monthlyFullBackUpEnabled;\n+        this.hourlyBackUpEnabled = builder.hourlyBackUpEnabled;\n+        this.initialFullBackupEnabled = builder.initialFullBackupEnabled;\n+        this.backupLocation = builder.backupLocation;\n+        this.backupPlatform = builder.backupPlatform;\n+        this.realm = builder.realm;\n+        this.domain = builder.domain;\n+        this.password = builder.password;\n+        this.reverseZones = builder.reverseZones;\n+        this.adminUser = builder.adminUser;\n+        this.freeipaToReplicate = builder.freeipaToReplicate;\n+        this.hosts = builder.hosts;\n+        this.azureInstanceMsi = builder.azureInstanceMsi;\n+    }\n+\n+    public String getBackupLocation() {\n+        return backupLocation;\n+    }\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public String getReverseZones() {\n+        return reverseZones;\n+    }\n+\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public String getFreeipaToReplicate() {\n+        return freeipaToReplicate;\n+    }\n+\n+    public Set<Object> getHosts() {\n+        return hosts;\n+    }\n+\n+    public boolean isBackupEnabled() {\n+        return backupEnabled;\n+    }\n+\n+    public boolean isMonthlyFullBackUpEnabled() {\n+        return monthlyFullBackUpEnabled;\n+    }\n+\n+    public boolean isHourlyBackUpEnabled() {\n+        return hourlyBackUpEnabled;\n+    }\n+\n+    public boolean isInitialFullBackupEnabled() {\n+        return initialFullBackupEnabled;\n+    }\n+\n+    public String getBackupPlatform() {\n+        return backupPlatform;\n+    }\n+\n+    public String getAzureInstanceMsi() {\n+        return azureInstanceMsi;\n+    }\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    public Map<String, Object> toMap() {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"backup_enabled\", this.backupEnabled);\n+        map.put(\"backup_location\", ObjectUtils.defaultIfNull(this.backupLocation, EMPTY_CONFIG_DEFAULT));\n+        map.put(\"monthly_full_backup_enabled\", this.monthlyFullBackUpEnabled);\n+        map.put(\"hourly_backup_enabled\", this.hourlyBackUpEnabled);\n+        map.put(\"initial_full_backup_enabled\", this.initialFullBackupEnabled);\n+        map.put(\"backup_platform\", ObjectUtils.defaultIfNull(this.backupPlatform, EMPTY_CONFIG_DEFAULT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NTk2NQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc2ODc1NA==", "bodyText": "Changed the structure", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391768754", "createdAt": "2020-03-12T17:11:54Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/config/FreeIpaConfigView.java", "diffHunk": "@@ -0,0 +1,248 @@\n+package com.sequenceiq.freeipa.service.freeipa.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n+\n+import com.sequenceiq.cloudbreak.orchestrator.model.Node;\n+\n+public class FreeIpaConfigView {\n+\n+    private static final String EMPTY_CONFIG_DEFAULT = \"\";\n+\n+    private final boolean backupEnabled;\n+\n+    private final boolean monthlyFullBackUpEnabled;\n+\n+    private final boolean hourlyBackUpEnabled;\n+\n+    private final boolean initialFullBackupEnabled;\n+\n+    private final String backupPlatform;\n+\n+    private final String backupLocation;\n+\n+    private final String realm;\n+\n+    private final String domain;\n+\n+    private final String password;\n+\n+    private final String reverseZones;\n+\n+    private final String adminUser;\n+\n+    private final String freeipaToReplicate;\n+\n+    private final Set<Object> hosts;\n+\n+    private final String azureInstanceMsi;\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    private FreeIpaConfigView(Builder builder) {\n+        this.backupEnabled = builder.backupEnabled;\n+        this.monthlyFullBackUpEnabled = builder.monthlyFullBackUpEnabled;\n+        this.hourlyBackUpEnabled = builder.hourlyBackUpEnabled;\n+        this.initialFullBackupEnabled = builder.initialFullBackupEnabled;\n+        this.backupLocation = builder.backupLocation;\n+        this.backupPlatform = builder.backupPlatform;\n+        this.realm = builder.realm;\n+        this.domain = builder.domain;\n+        this.password = builder.password;\n+        this.reverseZones = builder.reverseZones;\n+        this.adminUser = builder.adminUser;\n+        this.freeipaToReplicate = builder.freeipaToReplicate;\n+        this.hosts = builder.hosts;\n+        this.azureInstanceMsi = builder.azureInstanceMsi;\n+    }\n+\n+    public String getBackupLocation() {\n+        return backupLocation;\n+    }\n+\n+    public String getRealm() {\n+        return realm;\n+    }\n+\n+    public String getDomain() {\n+        return domain;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public String getReverseZones() {\n+        return reverseZones;\n+    }\n+\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public String getFreeipaToReplicate() {\n+        return freeipaToReplicate;\n+    }\n+\n+    public Set<Object> getHosts() {\n+        return hosts;\n+    }\n+\n+    public boolean isBackupEnabled() {\n+        return backupEnabled;\n+    }\n+\n+    public boolean isMonthlyFullBackUpEnabled() {\n+        return monthlyFullBackUpEnabled;\n+    }\n+\n+    public boolean isHourlyBackUpEnabled() {\n+        return hourlyBackUpEnabled;\n+    }\n+\n+    public boolean isInitialFullBackupEnabled() {\n+        return initialFullBackupEnabled;\n+    }\n+\n+    public String getBackupPlatform() {\n+        return backupPlatform;\n+    }\n+\n+    public String getAzureInstanceMsi() {\n+        return azureInstanceMsi;\n+    }\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n+    public Map<String, Object> toMap() {\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"backup_enabled\", this.backupEnabled);\n+        map.put(\"backup_location\", ObjectUtils.defaultIfNull(this.backupLocation, EMPTY_CONFIG_DEFAULT));\n+        map.put(\"monthly_full_backup_enabled\", this.monthlyFullBackUpEnabled);\n+        map.put(\"hourly_backup_enabled\", this.hourlyBackUpEnabled);\n+        map.put(\"initial_full_backup_enabled\", this.initialFullBackupEnabled);\n+        map.put(\"backup_platform\", ObjectUtils.defaultIfNull(this.backupPlatform, EMPTY_CONFIG_DEFAULT));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4NTk2NQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTkzOTk2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupFolderResolverServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzozMjowM1rOF0ZjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjoxNTozM1rOF0-VHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTAwMA==", "bodyText": "I think S3BackupConfigGenerator and AdlsGen2BackupConfigGenerator should be tested in different test, and here you should test the logic related to CloudBackupFolderResolverService. I have a feeling that not all the cases are covered here, and it would be too complex to test it through this class", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390489000", "createdAt": "2020-03-10T17:32:03Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupFolderResolverServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.CrnParseException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.FluentClusterType;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+\n+public class CloudBackupFolderResolverServiceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5MTQ4Ng==", "bodyText": "Fair enough.   don.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391091486", "createdAt": "2020-03-11T16:15:33Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupFolderResolverServiceTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.CrnParseException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.FluentClusterType;\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+\n+public class CloudBackupFolderResolverServiceTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ4OTAwMA=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTk0OTkyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzozNDozM1rOF0ZqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozNDowNlrOF3s9tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDY3NQ==", "bodyText": "it's a bit strange that we use the telemetry settings for backup. Is it really a good idea?", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390490675", "createdAt": "2020-03-10T17:34:33Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.freeipa.converter.backup;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.telemetry.request.LoggingRequest;\n+import com.sequenceiq.common.api.telemetry.request.TelemetryRequest;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+import com.sequenceiq.freeipa.configuration.BackupConfiguration;\n+\n+@Component\n+public class BackupConverter {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BackupConverter.class);\n+\n+    private final boolean freeIpaBackupEnabled;\n+\n+    private final BackupConfiguration backupConfiguration;\n+\n+    public BackupConverter(BackupConfiguration backupConfiguration,\n+            @Value(\"${freeipa.backup.enabled:true}\") boolean freeIpaBackupEnabled) {\n+        this.backupConfiguration = backupConfiguration;\n+        this.freeIpaBackupEnabled = freeIpaBackupEnabled;\n+    }\n+\n+    public Backup convert(TelemetryRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MzM3Mw==", "bodyText": "This is a shorter-term decision so we did not have to introduce using another s3 bucket or azure container.  We do not have time to introduce all the UI and flow components to support the additional storage location at the moment.  The Logging bucket/container is currently the only one available to the freeipa at the moment.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390553373", "createdAt": "2020-03-10T19:17:44Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.freeipa.converter.backup;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.telemetry.request.LoggingRequest;\n+import com.sequenceiq.common.api.telemetry.request.TelemetryRequest;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+import com.sequenceiq.freeipa.configuration.BackupConfiguration;\n+\n+@Component\n+public class BackupConverter {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BackupConverter.class);\n+\n+    private final boolean freeIpaBackupEnabled;\n+\n+    private final BackupConfiguration backupConfiguration;\n+\n+    public BackupConverter(BackupConfiguration backupConfiguration,\n+            @Value(\"${freeipa.backup.enabled:true}\") boolean freeIpaBackupEnabled) {\n+        this.backupConfiguration = backupConfiguration;\n+        this.freeIpaBackupEnabled = freeIpaBackupEnabled;\n+    }\n+\n+    public Backup convert(TelemetryRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDY3NQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg5NDMwOA==", "bodyText": "i would suggest to support this from the API (env or probably better for freeipa) in this PR already, as backup is nothing to do with telemetry, especially with logging. use this \"temporal\" solution (to fill data from telemetry) only if backup request is not filled in the freeipa (env?) request. so if the UI will support it you can remove the logging usage (but you will have everything that is needed for the UI to implement that)", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393894308", "createdAt": "2020-03-17T18:42:33Z", "author": {"login": "oleewere"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.freeipa.converter.backup;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.telemetry.request.LoggingRequest;\n+import com.sequenceiq.common.api.telemetry.request.TelemetryRequest;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+import com.sequenceiq.freeipa.configuration.BackupConfiguration;\n+\n+@Component\n+public class BackupConverter {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BackupConverter.class);\n+\n+    private final boolean freeIpaBackupEnabled;\n+\n+    private final BackupConfiguration backupConfiguration;\n+\n+    public BackupConverter(BackupConfiguration backupConfiguration,\n+            @Value(\"${freeipa.backup.enabled:true}\") boolean freeIpaBackupEnabled) {\n+        this.backupConfiguration = backupConfiguration;\n+        this.freeIpaBackupEnabled = freeIpaBackupEnabled;\n+    }\n+\n+    public Backup convert(TelemetryRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDY3NQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MjY5NA==", "bodyText": "We can change this when we add support for UI configuration.  I've added https://jira.cloudera.com/browse/CB-6146", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393952694", "createdAt": "2020-03-17T20:34:06Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/backup/BackupConverter.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.freeipa.converter.backup;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.common.api.cloudstorage.old.AdlsGen2CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.cloudstorage.old.S3CloudStorageV1Parameters;\n+import com.sequenceiq.common.api.telemetry.request.LoggingRequest;\n+import com.sequenceiq.common.api.telemetry.request.TelemetryRequest;\n+import com.sequenceiq.freeipa.api.model.Backup;\n+import com.sequenceiq.freeipa.configuration.BackupConfiguration;\n+\n+@Component\n+public class BackupConverter {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BackupConverter.class);\n+\n+    private final boolean freeIpaBackupEnabled;\n+\n+    private final BackupConfiguration backupConfiguration;\n+\n+    public BackupConverter(BackupConfiguration backupConfiguration,\n+            @Value(\"${freeipa.backup.enabled:true}\") boolean freeIpaBackupEnabled) {\n+        this.backupConfiguration = backupConfiguration;\n+        this.freeIpaBackupEnabled = freeIpaBackupEnabled;\n+    }\n+\n+    public Backup convert(TelemetryRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5MDY3NQ=="}, "originalCommit": {"oid": "8cd05133035205cc7d1437f6e4ab99dab91020de"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg5MzU1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMzoxNlrOF017FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMTozOTo1NVrOF1Ospg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Mzc0OA==", "bodyText": "why duplicate this kind of classes/implementations from common ? most of the code looks duplication", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r390953748", "createdAt": "2020-03-11T13:03:16Z", "author": {"login": "oleewere"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ace46c88be40a9d6f918d596bf8fddf0aa3657"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMTE0NA==", "bodyText": "Its not an outright copy.  Right now it is using very similar logic on the parsing of the adls container and s3 buckets paths, but the functions are slightly different with the base backups folder being different and a changed call path.\nAs well, later on we will be moving to a dedicated selection of the backup storage location to a stand-alone bucket/container but the UI and flow work was unable to be done in the time needed for that call.  This allows for the seperate parsing mechanism for the backup once it moves away from the telementry storage location.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391001144", "createdAt": "2020-03-11T14:15:42Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Mzc0OA=="}, "originalCommit": {"oid": "97ace46c88be40a9d6f918d596bf8fddf0aa3657"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEyOTc2MQ==", "bodyText": "you can make things more abstract, but fine...btw it's nothing to do with Fluent but it has many references for it, so that looks logically invalid for me (for example: using fluent cluster type that is used as a string in fluentd related configs - so if i would change that for logging it would affect this code as well)", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391129761", "createdAt": "2020-03-11T17:12:06Z", "author": {"login": "oleewere"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Mzc0OA=="}, "originalCommit": {"oid": "97ace46c88be40a9d6f918d596bf8fddf0aa3657"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM1OTY1NA==", "bodyText": "Fair enough.  I refactored it to be more independent.  There is a single value enum because It will be added to later on when it gets more options.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391359654", "createdAt": "2020-03-12T01:39:55Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/AdlsGen2BackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.exception.CloudbreakServiceException;\n+import com.sequenceiq.cloudbreak.telemetry.fluent.cloud.AdlsGen2Config;\n+\n+@Component\n+public class AdlsGen2BackupConfigGenerator extends CloudBackupConfigGenerator<AdlsGen2Config> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1Mzc0OA=="}, "originalCommit": {"oid": "97ace46c88be40a9d6f918d596bf8fddf0aa3657"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzYyOTc5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupConfigGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTozODowNlrOF1j8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzo1NjozMlrOF1znhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzY1Mw==", "bodyText": "im wondering why is this needed here. I had to split and store different parts of the storage location parts (scheme + host + path) because of fluentd configuration requirements, i think in your case the path will work as is as you are using s3 tool for the upload (probably same is true for azure)...so probably most of these path generator code are not required at all...just pass the storage location as is (with appending the cluster-backup and cluster name/id prefixes)", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391707653", "createdAt": "2020-03-12T15:38:06Z", "author": {"login": "oleewere"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class CloudBackupConfigGenerator<T extends CloudBackupStorageConfig> {\n+\n+    protected static final String CLUSTER_BACKUP_PREFIX = \"cluster-backups\";\n+\n+    public abstract String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId);\n+\n+    String getLocationWithoutSchemePrefixes(String input, String... schemePrefixes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341338dc07933eb05f08e51dc60c29b103e013b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3MTY1Mw==", "bodyText": "Actually this needs the exact same sort of segmentation as logs.  Adding additional user-defined folders as well as segmenting the into the per cluster based folders is all still necessary.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391771653", "createdAt": "2020-03-12T17:16:36Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class CloudBackupConfigGenerator<T extends CloudBackupStorageConfig> {\n+\n+    protected static final String CLUSTER_BACKUP_PREFIX = \"cluster-backups\";\n+\n+    public abstract String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId);\n+\n+    String getLocationWithoutSchemePrefixes(String input, String... schemePrefixes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzY1Mw=="}, "originalCommit": {"oid": "341338dc07933eb05f08e51dc60c29b103e013b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc3Mjc2Nw==", "bodyText": "An example of this is right now in out SDX environments we have a shared bucket which we put in the environment name as the top-level under the bucket in order to allow us to put the logs and data both under that bucket on a per-environment basis", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391772767", "createdAt": "2020-03-12T17:18:35Z", "author": {"login": "wonderslug"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class CloudBackupConfigGenerator<T extends CloudBackupStorageConfig> {\n+\n+    protected static final String CLUSTER_BACKUP_PREFIX = \"cluster-backups\";\n+\n+    public abstract String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId);\n+\n+    String getLocationWithoutSchemePrefixes(String input, String... schemePrefixes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzY1Mw=="}, "originalCommit": {"oid": "341338dc07933eb05f08e51dc60c29b103e013b6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk2NDU1MQ==", "bodyText": "but is the splitting really needed? concat segments would be enough instead of the generator service usage as schema/host parts can be included in (at least) s3 tool (so object transformations can be avoided)", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r391964551", "createdAt": "2020-03-12T23:56:32Z", "author": {"login": "oleewere"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/backup/cloud/CloudBackupConfigGenerator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.sequenceiq.freeipa.service.freeipa.backup.cloud;\n+\n+import java.nio.file.Paths;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public abstract class CloudBackupConfigGenerator<T extends CloudBackupStorageConfig> {\n+\n+    protected static final String CLUSTER_BACKUP_PREFIX = \"cluster-backups\";\n+\n+    public abstract String generateBackupLocation(String location, String clusterType,\n+            String clusterName, String clusterId);\n+\n+    String getLocationWithoutSchemePrefixes(String input, String... schemePrefixes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzY1Mw=="}, "originalCommit": {"oid": "341338dc07933eb05f08e51dc60c29b103e013b6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY2OTA0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/pillar/freeipa/init.sls", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowNTowMFrOF2vLoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDowODo1NFrOF3NXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDQ0OA==", "bodyText": "I would set it here to false, and override it from java if enabled", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r392940448", "createdAt": "2020-03-16T11:05:00Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/pillar/freeipa/init.sls", "diffHunk": "@@ -4,3 +4,11 @@ freeipa:\n   realm: testrealm\n   admin_user: admin\n   freeipa_to_replicate:\n+  backup:\n+    enabled: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyNTgwOA==", "bodyText": "The desire from PM and exec is to have the default be enabled.  We don't have mechanisms in the UI to enable this so enabling for customers will be difficult.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393225808", "createdAt": "2020-03-16T18:19:58Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/resources/freeipa-salt/pillar/freeipa/init.sls", "diffHunk": "@@ -4,3 +4,11 @@ freeipa:\n   realm: testrealm\n   admin_user: admin\n   freeipa_to_replicate:\n+  backup:\n+    enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDQ0OA=="}, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMjIwNQ==", "bodyText": "enable by default from java. usually we place empty or test values into pillars so it won't contain anything that could cause wrong behavior. I just want to be sure that when this feature is enabled, it's intentional. Like if somebody touch the code and doesn't push down the pillar related to backup when it is disabled, it would cause backup being enabled, because the value here says it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393232205", "createdAt": "2020-03-16T18:31:27Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/pillar/freeipa/init.sls", "diffHunk": "@@ -4,3 +4,11 @@ freeipa:\n   realm: testrealm\n   admin_user: admin\n   freeipa_to_replicate:\n+  backup:\n+    enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDQ0OA=="}, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzNDkxMA==", "bodyText": "changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393434910", "createdAt": "2020-03-17T04:08:54Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/resources/freeipa-salt/pillar/freeipa/init.sls", "diffHunk": "@@ -4,3 +4,11 @@ freeipa:\n   realm: testrealm\n   admin_user: admin\n   freeipa_to_replicate:\n+  backup:\n+    enabled: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDQ0OA=="}, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY3MTI0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/backups.sls", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowNTozN1rOF2vM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoyNTowN1rOF3AxgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDc3OQ==", "bodyText": "this option is not needed, by default it's false", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r392940779", "createdAt": "2020-03-16T11:05:37Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/backups.sls", "diffHunk": "@@ -0,0 +1,47 @@\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup:enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:backup:monthly_full_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_monthly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:backup:hourly_enabled') %}\n+/etc/cron.hourly/freeipa_backup_hourly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_hourly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:backup:initial_full_enabled') %}\n+freeipa_initial_full_backup:\n+  cmd.run:\n+    - name: /usr/local/bin/freeipa_backup -t FULL -f \"{{salt['grains.get']('fqdn')}}/full\" && echo $(date +%Y-%m-%d:%H:%M:%S) >> /var/log/freeipa_initial_backup-executed\n+    - failhard: False", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyODY3Mg==", "bodyText": "removed", "url": "https://github.com/hortonworks/cloudbreak/pull/7516#discussion_r393228672", "createdAt": "2020-03-16T18:25:07Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/resources/freeipa-salt/salt/freeipa/backups.sls", "diffHunk": "@@ -0,0 +1,47 @@\n+/usr/local/bin/freeipa_backup:\n+  file.managed:\n+    - source: salt://freeipa/scripts/freeipa_backup\n+    - user: root\n+    - group: root\n+    - mode: 750\n+\n+{% if salt['pillar.get']('freeipa:backup:enabled') %}\n+/etc/freeipa_backup.conf:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup.conf.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 640\n+\n+{% if salt['pillar.get']('freeipa:backup:monthly_full_enabled') %}\n+/etc/cron.monthly/freeipa_backup_monthly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_monthly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:backup:hourly_enabled') %}\n+/etc/cron.hourly/freeipa_backup_hourly:\n+  file.managed:\n+    - source: salt://freeipa/templates/freeipa_backup_hourly.j2\n+    - template: jinja\n+    - user: root\n+    - group: root\n+    - mode: 750\n+{% endif %}\n+\n+{% if salt['pillar.get']('freeipa:backup:initial_full_enabled') %}\n+freeipa_initial_full_backup:\n+  cmd.run:\n+    - name: /usr/local/bin/freeipa_backup -t FULL -f \"{{salt['grains.get']('fqdn')}}/full\" && echo $(date +%Y-%m-%d:%H:%M:%S) >> /var/log/freeipa_initial_backup-executed\n+    - failhard: False", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDc3OQ=="}, "originalCommit": {"oid": "a8bf4af5ccdd434b027601cf6a18e3b74bdbb425"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2747, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}