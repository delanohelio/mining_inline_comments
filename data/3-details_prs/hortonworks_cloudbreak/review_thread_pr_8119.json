{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDU4MTk1", "number": 8119, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozNjo0NFrOD-hQbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1MTo1NlrOD_-ZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODgzMTgyOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/EnvironmentUserSyncState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozNjo0NFrOGYq1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozNjo0NFrOGYq1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMDc3Mg==", "bodyText": "missing @JsonIgnoreProperties(ignoreUnknown = true)", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428520772", "createdAt": "2020-05-21T08:36:44Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/EnvironmentUserSyncState.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.user.model;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.doc.UserModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"EnvironmentUserSyncV1State\")\n+public class EnvironmentUserSyncState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODgzNTYzOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/EnvironmentUserSyncState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozODowMVrOGYq3lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODozODowMVrOGYq3lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMTM2Ng==", "bodyText": "missing @NotNull", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428521366", "createdAt": "2020-05-21T08:38:01Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/EnvironmentUserSyncState.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.user.model;\n+\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.doc.UserModelDescriptions;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel(\"EnvironmentUserSyncV1State\")\n+public class EnvironmentUserSyncState {\n+    @ApiModelProperty(value = UserModelDescriptions.USERSYNC_STATE, required = true)\n+    private UserSyncState state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg1MjAxOnYy", "diffSide": "RIGHT", "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/UserSyncState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0MzoxMVrOGYrB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0MzoxMVrOGYrB1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyMzk4OA==", "bodyText": "can we rename these to be a bit more obvious?\nlike: IN_SYNC -> UP_TO_DATE\nSYNCING -> SYNC_IN_PROGRESS\nI'm open to other values, but IN_SYNC is a bit ambiguous for me.", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428523988", "createdAt": "2020-05-21T08:43:11Z", "author": {"login": "lacikaaa"}, "path": "freeipa-api/src/main/java/com/sequenceiq/freeipa/api/v1/freeipa/user/model/UserSyncState.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.freeipa.api.v1.freeipa.user.model;\n+\n+public enum UserSyncState {\n+    IN_SYNC,\n+    STALE,\n+    SYNCING", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg2ODA0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0ODozNVrOGYrMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0ODozNVrOGYrMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjYwOQ==", "bodyText": "@NotNull -> @NotEmpty", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428526609", "createdAt": "2020-05-21T08:48:35Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg3MDE3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0OToyNlrOGYrNeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo0OToyNlrOGYrNeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyNjk2OA==", "bodyText": "actually ControllerLogContextAspects should log this", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428526968", "createdAt": "2020-05-21T08:49:26Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg4MzkxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo1NDoxMFrOGYrWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOToxMDowOFrOGZhUPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg==", "bodyText": "we should pass the accountId here from ThreadBasedUserCrnProvider", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428529212", "createdAt": "2020-05-21T08:54:10Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkzNDExMA==", "bodyText": "I disagree with your suggestion here. I've updated the PR to match current behavior of the other APIs, but will start an email discussion about the API usage of the actor crn since this issue is larger than this PR.", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428934110", "createdAt": "2020-05-21T21:46:32Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5MjYzOA==", "bodyText": "sure, @horadla23 knows this stuff better", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429092638", "createdAt": "2020-05-22T07:42:44Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NjAxMw==", "bodyText": "@handavid as i mentioned in my mail, with @TenantAwareParam annotation, you can get the actual account id from ThreadBasedUserCrnProvider", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429096013", "createdAt": "2020-05-22T07:50:22Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMTM1NQ==", "bodyText": "@horadla23  I looked at the code to the InternalCrnModifier and I find it strange that it changes the CRN stored in the ThreadBasedUserCrnProvider into a mixture of the original user crn and the account from the annotated field. I don't think this is desirable because you may end up with an invalid actor that would fail authz on subsequent API calls.\nInstead, I think I need the changes you have in CB-7104 and to use the @CheckPermissionByResourceCrn annotation instead since the request includes an environment crn.", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429411355", "createdAt": "2020-05-22T19:04:46Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQxMzQzNw==", "bodyText": "@handavid we are doing that only in case of internal actpr and we do not call ums with internal actor since everything is allowed with that, so it is working, other team:s service can call environment service this way without problem. You can still use @CheckPermissionByResourceCrn, as you can see from example from my email", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429413437", "createdAt": "2020-05-22T19:10:08Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -109,6 +114,14 @@ public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_READ)\n+    public EnvironmentUserSyncState getUserSyncState(@NotNull String environmentCrn) {\n+        LOGGER.debug(\"getUserSyncState() requested for environment '{}'\", environmentCrn);\n+\n+        return environmentUserSyncStateCalculator.calculateEnvironmentUserSyncState(Crn.safeFromString(environmentCrn));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTIxMg=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg4ODQ4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo1NToyOFrOGYrZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo1MTowM1rOGZN9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTkzMA==", "bodyText": "accountId shouldn't come from the env crn, we might check if it is the same", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428529930", "createdAt": "2020-05-21T08:55:28Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NTA1Mg==", "bodyText": "i guess it is called with internal crn, thus we need to find out account id differently", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429095052", "createdAt": "2020-05-22T07:48:06Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTkzMA=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5NjMwMA==", "bodyText": "but @handavid you can use @TenantAwareParam as described", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r429096300", "createdAt": "2020-05-22T07:51:03Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUyOTkzMA=="}, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODg5NjY2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo1ODoxM1rOGYreNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODo1ODoxM1rOGYreNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMTI1NA==", "bodyText": "build MdcContext from Stack", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428531254", "createdAt": "2020-05-21T08:58:13Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkyMTYyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowNzowMlrOGYruVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowNzowMlrOGYruVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNTM4Mg==", "bodyText": "move this to a method/variable", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428535382", "createdAt": "2020-05-21T09:07:02Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state = UserSyncState.STALE;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNCING;\n+                break;\n+            case COMPLETED:\n+                if (lastSync.getSuccessList().stream()\n+                        .anyMatch(details -> envCrnString.equals(details.getEnvironment()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkyNjkzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowODo0OVrOGYrxtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowODo0OVrOGYrxtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNjI0Nw==", "bodyText": "move the whole to a method", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428536247", "createdAt": "2020-05-21T09:08:49Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state = UserSyncState.STALE;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNCING;\n+                break;\n+            case COMPLETED:\n+                if (lastSync.getSuccessList().stream()\n+                        .anyMatch(details -> envCrnString.equals(details.getEnvironment()))) {\n+                    UmsEventGenerationIds currentEventGenerationIds = umsEventGenerationIdsProvider.getEventGenerationIds(accountId, MDCUtils.getRequestId());\n+                    if (eventGenerationIdsChecker.isInSync(userSyncStatus, currentEventGenerationIds)) {\n+                        state = UserSyncState.IN_SYNC;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkyNzY0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowOTowN1rOGYryKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOTowOTowN1rOGYryKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNjM2MQ==", "bodyText": "move to a method", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428536361", "createdAt": "2020-05-21T09:09:07Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state = UserSyncState.STALE;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNCING;\n+                break;\n+            case COMPLETED:\n+                if (lastSync.getSuccessList().stream()\n+                        .anyMatch(details -> envCrnString.equals(details.getEnvironment()))) {\n+                    UmsEventGenerationIds currentEventGenerationIds = umsEventGenerationIdsProvider.getEventGenerationIds(accountId, MDCUtils.getRequestId());\n+                    if (eventGenerationIdsChecker.isInSync(userSyncStatus, currentEventGenerationIds)) {\n+                        state = UserSyncState.IN_SYNC;\n+                    }\n+                }\n+                break;\n+            case REQUESTED:\n+            case REJECTED:\n+                // REQUESTED or REJECTED operations will never be saved as part of the UserSyncStatus\n+                LOGGER.error(\"UserSyncStatus.lastStartedFullSync '{}' in unexpected state {} for environment '{}'\",\n+                        lastSync, lastSync.getStatus(), envCrnString);\n+                throw new IllegalStateException(\n+                        String.format(\"Last sync operation [%s] for environment '%s' is in unexpected state %s\",\n+                                lastSync.getOperationId(), envCrnString, lastSync.getStatus()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODkzMTM4OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMDoyNlrOGYr0fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToxMDoyNlrOGYr0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzNjk1Nw==", "bodyText": "it would be easier to read if every case would set the state instead of we initialize with a value and we have to go through all case to check if it's overridden", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r428536957", "createdAt": "2020-05-21T09:10:26Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(Crn environmentCrn) {\n+        String accountId = environmentCrn.getAccountId();\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state = UserSyncState.STALE;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNCING;\n+                break;\n+            case COMPLETED:\n+                if (lastSync.getSuccessList().stream()\n+                        .anyMatch(details -> envCrnString.equals(details.getEnvironment()))) {\n+                    UmsEventGenerationIds currentEventGenerationIds = umsEventGenerationIdsProvider.getEventGenerationIds(accountId, MDCUtils.getRequestId());\n+                    if (eventGenerationIdsChecker.isInSync(userSyncStatus, currentEventGenerationIds)) {\n+                        state = UserSyncState.IN_SYNC;\n+                    }\n+                }\n+                break;\n+            case REQUESTED:\n+            case REJECTED:\n+                // REQUESTED or REJECTED operations will never be saved as part of the UserSyncStatus\n+                LOGGER.error(\"UserSyncStatus.lastStartedFullSync '{}' in unexpected state {} for environment '{}'\",\n+                        lastSync, lastSync.getStatus(), envCrnString);\n+                throw new IllegalStateException(\n+                        String.format(\"Last sync operation [%s] for environment '%s' is in unexpected state %s\",\n+                                lastSync.getOperationId(), envCrnString, lastSync.getStatus()));\n+            case TIMEDOUT:\n+                LOGGER.warn(\"UserSyncStatus.lastStartedFullSync '{}' is timed out for environment '{}'\", lastSync.getOperationId(), envCrnString);\n+                break;\n+            case FAILED:\n+            default:\n+                // state already set to STALE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bef06f1a1cf8fd23c35d4a4f33e8cae3deb2142d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA1MjkxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo0MDo0MVrOGa9G-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjozNTo0NlrOGcQcMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzM3MQ==", "bodyText": "this name is a bit misleading as I would expect it would set the state, but instead it will throw an exception. also this method should be void as it won't return anything ever.", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r430917371", "createdAt": "2020-05-27T07:40:41Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(String accountId, Crn environmentCrn) {\n+        checkArgument(accountId.equals(environmentCrn.getAccountId()), \"environmentCrn does not match account id\");\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        MDCBuilder.buildMdcContext(stack);\n+\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNC_IN_PROGRESS;\n+                break;\n+            case COMPLETED:\n+                state = calculateStateForCompletedOperation(accountId, envCrnString, userSyncStatus);\n+                break;\n+            case REQUESTED:\n+            case REJECTED:\n+                // REQUESTED or REJECTED operations will never be saved as part of the UserSyncStatus\n+                state = calculateStateForUnexpectedOperationStatus(envCrnString, userSyncStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eeb08aafadff3e44d022c5de532330c4c19b887"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODkyNA==", "bodyText": "I renamed the method but I also changed it to return the. the case statement needs to throw the exception instead of the method. Otherwise, the compiler can't tell that the method will always throw and will complain about some codepaths not setting the state variable.", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r432108924", "createdAt": "2020-05-28T20:37:13Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(String accountId, Crn environmentCrn) {\n+        checkArgument(accountId.equals(environmentCrn.getAccountId()), \"environmentCrn does not match account id\");\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        MDCBuilder.buildMdcContext(stack);\n+\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNC_IN_PROGRESS;\n+                break;\n+            case COMPLETED:\n+                state = calculateStateForCompletedOperation(accountId, envCrnString, userSyncStatus);\n+                break;\n+            case REQUESTED:\n+            case REJECTED:\n+                // REQUESTED or REJECTED operations will never be saved as part of the UserSyncStatus\n+                state = calculateStateForUnexpectedOperationStatus(envCrnString, userSyncStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzM3MQ=="}, "originalCommit": {"oid": "5eeb08aafadff3e44d022c5de532330c4c19b887"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI4MjY3NA==", "bodyText": "thanks for the change!", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r432282674", "createdAt": "2020-05-29T06:35:46Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/EnvironmentUserSyncStateCalculator.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.sequenceiq.freeipa.service.freeipa.user;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.EnvironmentUserSyncState;\n+import com.sequenceiq.freeipa.api.v1.freeipa.user.model.UserSyncState;\n+import com.sequenceiq.freeipa.entity.Operation;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.entity.UserSyncStatus;\n+import com.sequenceiq.freeipa.service.freeipa.user.model.UmsEventGenerationIds;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Service\n+public class EnvironmentUserSyncStateCalculator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvironmentUserSyncStateCalculator.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private UserSyncStatusService userSyncStatusService;\n+\n+    @Inject\n+    private UmsEventGenerationIdsProvider umsEventGenerationIdsProvider;\n+\n+    @Inject\n+    private EventGenerationIdsChecker eventGenerationIdsChecker;\n+\n+    public EnvironmentUserSyncState calculateEnvironmentUserSyncState(String accountId, Crn environmentCrn) {\n+        checkArgument(accountId.equals(environmentCrn.getAccountId()), \"environmentCrn does not match account id\");\n+        String envCrnString = environmentCrn.toString();\n+\n+        Stack stack = stackService.getByEnvironmentCrnAndAccountId(envCrnString, accountId);\n+        MDCBuilder.buildMdcContext(stack);\n+\n+        UserSyncStatus userSyncStatus = userSyncStatusService.findByStack(stack);\n+\n+        return internalCalculateEnvironmentUserSyncState(accountId, envCrnString, userSyncStatus);\n+    }\n+\n+    @VisibleForTesting\n+    EnvironmentUserSyncState internalCalculateEnvironmentUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        EnvironmentUserSyncState environmentUserSyncState = new EnvironmentUserSyncState();\n+        if (null == userSyncStatus || null == userSyncStatus.getLastStartedFullSync()) {\n+            environmentUserSyncState.setState(UserSyncState.STALE);\n+        } else {\n+            environmentUserSyncState.setLastUserSyncOperationId(userSyncStatus.getLastStartedFullSync().getOperationId());\n+            environmentUserSyncState.setState(calculateUserSyncState(accountId, envCrnString, userSyncStatus));\n+        }\n+\n+        return environmentUserSyncState;\n+    }\n+\n+    private UserSyncState calculateUserSyncState(String accountId, String envCrnString, UserSyncStatus userSyncStatus) {\n+        Operation lastSync = userSyncStatus.getLastStartedFullSync();\n+        UserSyncState state;\n+        switch (lastSync.getStatus()) {\n+            case RUNNING:\n+                state = UserSyncState.SYNC_IN_PROGRESS;\n+                break;\n+            case COMPLETED:\n+                state = calculateStateForCompletedOperation(accountId, envCrnString, userSyncStatus);\n+                break;\n+            case REQUESTED:\n+            case REJECTED:\n+                // REQUESTED or REJECTED operations will never be saved as part of the UserSyncStatus\n+                state = calculateStateForUnexpectedOperationStatus(envCrnString, userSyncStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNzM3MQ=="}, "originalCommit": {"oid": "5eeb08aafadff3e44d022c5de532330c4c19b887"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDA5MTUyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1MTo1NlrOGa9fzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozNToyNFrOGcFyGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMzcyNw==", "bodyText": "I think you should use @CheckPermissionByAccount here (similarly to other methods), now every permission check on API methods happens on account level in freeipa (resource based checks are happening explicitly in service layer as i have seen), internal calls ( with @TenantAwareParam) still will work, resource based authz implementation is in progress in other PR", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r430923727", "createdAt": "2020-05-27T07:51:56Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -102,13 +113,22 @@ public SyncOperationStatus setPassword(SetPasswordRequest request) {\n     @Override\n     @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n     public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n-        checkUserCrn();\n+        checkActorCrn();\n         String accountId = ThreadBasedUserCrnProvider.getAccountId();\n         LOGGER.debug(\"getSyncOperationStatus() requested for operation '{}' in account '{}'\", operationId, accountId);\n         return operationToSyncOperationStatus.convert(\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByResourceCrn(action = AuthorizationResourceAction.ENVIRONMENT_READ)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5eeb08aafadff3e44d022c5de532330c4c19b887"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODA1OA==", "bodyText": "done", "url": "https://github.com/hortonworks/cloudbreak/pull/8119#discussion_r432108058", "createdAt": "2020-05-28T20:35:24Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/controller/UserV1Controller.java", "diffHunk": "@@ -102,13 +113,22 @@ public SyncOperationStatus setPassword(SetPasswordRequest request) {\n     @Override\n     @CheckPermissionByAccount(action = AuthorizationResourceAction.ENVIRONMENT_WRITE)\n     public SyncOperationStatus getSyncOperationStatus(@NotNull String operationId) {\n-        checkUserCrn();\n+        checkActorCrn();\n         String accountId = ThreadBasedUserCrnProvider.getAccountId();\n         LOGGER.debug(\"getSyncOperationStatus() requested for operation '{}' in account '{}'\", operationId, accountId);\n         return operationToSyncOperationStatus.convert(\n                 operationService.getOperationForAccountIdAndOperationId(accountId, operationId));\n     }\n \n+    @Override\n+    @CheckPermissionByResourceCrn(action = AuthorizationResourceAction.ENVIRONMENT_READ)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMzcyNw=="}, "originalCommit": {"oid": "5eeb08aafadff3e44d022c5de532330c4c19b887"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3349, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}