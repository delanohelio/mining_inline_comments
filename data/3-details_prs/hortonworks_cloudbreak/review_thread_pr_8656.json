{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzUzNTk5", "number": 8656, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo1Njo0OFrOEUKKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo1NzoxOFrOEVUsqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTczNTYyOnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/RangerCloudIdentitySyncStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo1Njo0OFrOG6Sxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0MToxNlrOG7a7Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3ODE3MQ==", "bodyText": "we only have a commandId if the status is ACTIVE, right?", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463778171", "createdAt": "2020-07-31T18:56:48Z", "author": {"login": "handavid"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/RangerCloudIdentitySyncStatus.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.sequenceiq.sdx.api.model;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public class RangerCloudIdentitySyncStatus {\n+\n+    @ApiModelProperty\n+    private Long commandId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2MDI2Ng==", "bodyText": "Well, we can have it on a SUCCESS as well (see RangerCloudIdentityService.toRangerCloudIdentitySyncStatus).", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r464960266", "createdAt": "2020-08-04T10:41:16Z", "author": {"login": "aarman-cloudera"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/model/RangerCloudIdentitySyncStatus.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.sequenceiq.sdx.api.model;\n+\n+import io.swagger.annotations.ApiModelProperty;\n+\n+import javax.validation.constraints.NotNull;\n+\n+public class RangerCloudIdentitySyncStatus {\n+\n+    @ApiModelProperty\n+    private Long commandId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3ODE3MQ=="}, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTgzNTU4OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozMjowN1rOG6TvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0MzowNVrOG7a-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5Mzk0Mg==", "bodyText": "should we have an \"unsupported\" status instead of successful? successful seems misleading to me.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463793942", "createdAt": "2020-07-31T19:32:07Z", "author": {"login": "handavid"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -24,21 +27,87 @@\n     @Inject\n     private SdxService sdxService;\n \n-    private void setAzureCloudIdentityMapping(SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n+    private RangerCloudIdentitySyncStatus sucessfulCloudIdSyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.SUCCESS);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus failedRangerCloudIdentitySyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.FAILED);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n         String stackCrn = sdxCluster.getStackCrn();\n-        LOGGER.info(\"Updating azure cloud id mappings for datalake stack crn = {}\", stackCrn);\n+        LOGGER.info(\"Updating azure cloud id mappings for envCrn = {}, datalake stack crn = {}\", envCrn, stackCrn);\n         try {\n-            clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (!clouderaManagerRangerUtil.isCloudIdMappingSupported(sdxCluster.getStackCrn())) {\n+                return sucessfulCloudIdSyncStatus(\"The datalake does not support cloud identity sync. Sync request is ignored.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2MDUzMA==", "bodyText": "True, I've added a NOT_APPLICABLE status like you've mentioned.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r464960530", "createdAt": "2020-08-04T10:41:50Z", "author": {"login": "aarman-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -24,21 +27,87 @@\n     @Inject\n     private SdxService sdxService;\n \n-    private void setAzureCloudIdentityMapping(SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n+    private RangerCloudIdentitySyncStatus sucessfulCloudIdSyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.SUCCESS);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus failedRangerCloudIdentitySyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.FAILED);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n         String stackCrn = sdxCluster.getStackCrn();\n-        LOGGER.info(\"Updating azure cloud id mappings for datalake stack crn = {}\", stackCrn);\n+        LOGGER.info(\"Updating azure cloud id mappings for envCrn = {}, datalake stack crn = {}\", envCrn, stackCrn);\n         try {\n-            clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (!clouderaManagerRangerUtil.isCloudIdMappingSupported(sdxCluster.getStackCrn())) {\n+                return sucessfulCloudIdSyncStatus(\"The datalake does not support cloud identity sync. Sync request is ignored.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5Mzk0Mg=="}, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2MTA4Mg==", "bodyText": "I think we can also get rid of this part if we only make the call from FreeIPA on RAZ enabled environments. I'll look into it as a separate item though.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r464961082", "createdAt": "2020-08-04T10:43:05Z", "author": {"login": "aarman-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -24,21 +27,87 @@\n     @Inject\n     private SdxService sdxService;\n \n-    private void setAzureCloudIdentityMapping(SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n+    private RangerCloudIdentitySyncStatus sucessfulCloudIdSyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.SUCCESS);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus failedRangerCloudIdentitySyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.FAILED);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n         String stackCrn = sdxCluster.getStackCrn();\n-        LOGGER.info(\"Updating azure cloud id mappings for datalake stack crn = {}\", stackCrn);\n+        LOGGER.info(\"Updating azure cloud id mappings for envCrn = {}, datalake stack crn = {}\", envCrn, stackCrn);\n         try {\n-            clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (!clouderaManagerRangerUtil.isCloudIdMappingSupported(sdxCluster.getStackCrn())) {\n+                return sucessfulCloudIdSyncStatus(\"The datalake does not support cloud identity sync. Sync request is ignored.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5Mzk0Mg=="}, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg0NTIyOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozNTo1MFrOG6T0tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozNTo1MFrOG6T0tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5NTM4MQ==", "bodyText": "typo: datalakes\nalso, this doesn't sound like a successful scenario. Is there a better status to describe what happened?", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463795381", "createdAt": "2020-07-31T19:35:50Z", "author": {"login": "handavid"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -24,21 +27,87 @@\n     @Inject\n     private SdxService sdxService;\n \n-    private void setAzureCloudIdentityMapping(SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n+    private RangerCloudIdentitySyncStatus sucessfulCloudIdSyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.SUCCESS);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus failedRangerCloudIdentitySyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.FAILED);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n         String stackCrn = sdxCluster.getStackCrn();\n-        LOGGER.info(\"Updating azure cloud id mappings for datalake stack crn = {}\", stackCrn);\n+        LOGGER.info(\"Updating azure cloud id mappings for envCrn = {}, datalake stack crn = {}\", envCrn, stackCrn);\n         try {\n-            clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (!clouderaManagerRangerUtil.isCloudIdMappingSupported(sdxCluster.getStackCrn())) {\n+                return sucessfulCloudIdSyncStatus(\"The datalake does not support cloud identity sync. Sync request is ignored.\");\n+            }\n+            Optional<ApiCommand> apiCommand = clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (apiCommand.isEmpty()) {\n+                return sucessfulCloudIdSyncStatus(\"Sucessfully synced, no role refresh required\");\n+            }\n+            return toRangerCloudIdentitySyncStatus(apiCommand.get());\n         } catch (ApiException e) {\n             LOGGER.error(\"Encountered api exception\", e);\n-            throw new RangerCloudIdentitySyncException(\"Encountered api exception\", e);\n+            return failedRangerCloudIdentitySyncStatus(\"Encountered cloudera manager api exception\");\n+        }\n+    }\n+\n+    private Optional<SdxCluster> getSdxCluster(String envCrn) {\n+        List<SdxCluster> sdxClusters = sdxService.listSdxByEnvCrn(envCrn);\n+        if (sdxClusters.isEmpty()) {\n+            return Optional.empty();\n+        } else if (sdxClusters.size() > 1) {\n+            LOGGER.error(\"Multiple datalakes per environment not supported, environmentCrn = {}\", envCrn);\n+            throw new IllegalStateException(\"Multiple datalakes per environment not supported\");\n+        }\n+        return Optional.of(Iterables.getOnlyElement(sdxClusters));\n+    }\n+\n+    public RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, Map<String, String> azureUserMapping) {\n+        Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n+        if (sdxCluster.isEmpty()) {\n+            return sucessfulCloudIdSyncStatus(\"No datlakes associated with the environment.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg1NTM4OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozOToxN1rOG6T66Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTozOToxN1rOG6T66Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5Njk2OQ==", "bodyText": "typo: datalakes\nalso, this doesn't feel like a successful condition. maybe NOT_APPLICABLE would make sense for both this case and the case where the CM doesn't support this feature?", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463796969", "createdAt": "2020-07-31T19:39:17Z", "author": {"login": "handavid"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -24,21 +27,87 @@\n     @Inject\n     private SdxService sdxService;\n \n-    private void setAzureCloudIdentityMapping(SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n+    private RangerCloudIdentitySyncStatus sucessfulCloudIdSyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.SUCCESS);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus failedRangerCloudIdentitySyncStatus(String message) {\n+        RangerCloudIdentitySyncStatus status = new RangerCloudIdentitySyncStatus();\n+        status.setState(RangerCloudIdentitySyncState.FAILED);\n+        status.setStatusReason(message);\n+        return status;\n+    }\n+\n+    private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, SdxCluster sdxCluster, Map<String, String> azureUserMapping) {\n         String stackCrn = sdxCluster.getStackCrn();\n-        LOGGER.info(\"Updating azure cloud id mappings for datalake stack crn = {}\", stackCrn);\n+        LOGGER.info(\"Updating azure cloud id mappings for envCrn = {}, datalake stack crn = {}\", envCrn, stackCrn);\n         try {\n-            clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (!clouderaManagerRangerUtil.isCloudIdMappingSupported(sdxCluster.getStackCrn())) {\n+                return sucessfulCloudIdSyncStatus(\"The datalake does not support cloud identity sync. Sync request is ignored.\");\n+            }\n+            Optional<ApiCommand> apiCommand = clouderaManagerRangerUtil.setAzureCloudIdentityMapping(stackCrn, azureUserMapping);\n+            if (apiCommand.isEmpty()) {\n+                return sucessfulCloudIdSyncStatus(\"Sucessfully synced, no role refresh required\");\n+            }\n+            return toRangerCloudIdentitySyncStatus(apiCommand.get());\n         } catch (ApiException e) {\n             LOGGER.error(\"Encountered api exception\", e);\n-            throw new RangerCloudIdentitySyncException(\"Encountered api exception\", e);\n+            return failedRangerCloudIdentitySyncStatus(\"Encountered cloudera manager api exception\");\n+        }\n+    }\n+\n+    private Optional<SdxCluster> getSdxCluster(String envCrn) {\n+        List<SdxCluster> sdxClusters = sdxService.listSdxByEnvCrn(envCrn);\n+        if (sdxClusters.isEmpty()) {\n+            return Optional.empty();\n+        } else if (sdxClusters.size() > 1) {\n+            LOGGER.error(\"Multiple datalakes per environment not supported, environmentCrn = {}\", envCrn);\n+            throw new IllegalStateException(\"Multiple datalakes per environment not supported\");\n+        }\n+        return Optional.of(Iterables.getOnlyElement(sdxClusters));\n+    }\n+\n+    public RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, Map<String, String> azureUserMapping) {\n+        Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n+        if (sdxCluster.isEmpty()) {\n+            return sucessfulCloudIdSyncStatus(\"No datlakes associated with the environment.\");\n         }\n+        return setAzureCloudIdentityMapping(envCrn, sdxCluster.get(), azureUserMapping);\n     }\n \n-    public void setAzureCloudIdentityMapping(String environmentCrn, Map<String, String> azureUserMapping) {\n-        List<SdxCluster> sdxClusters = sdxService.listSdxByEnvCrn(environmentCrn);\n-        List<String> sdxClusterCrns = sdxClusters.stream().map(SdxCluster::getCrn).collect(Collectors.toList());\n-        LOGGER.info(\"Setting Azure cloud id mappings for datalake clusters = {}, environment = {}\", sdxClusterCrns, environmentCrn);\n-        sdxClusters.forEach(sdxCluster -> setAzureCloudIdentityMapping(sdxCluster, azureUserMapping));\n+    public RangerCloudIdentitySyncStatus getRangerCloudIdentitySyncStatus(String envCrn, long commandId) {\n+        Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n+        if (sdxCluster.isEmpty()) {\n+            return sucessfulCloudIdSyncStatus(\"No datlakes associated with the environment.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg2ODI2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0NDoxNlrOG6UCog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0NDoxNlrOG6UCog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5ODk0Ng==", "bodyText": "lets make these timeouts configurable", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463798946", "createdAt": "2020-07-31T19:44:16Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -26,6 +29,13 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CloudIdentitySyncService.class);\n \n+    private static final int SYNC_TIMEOUT_MS = 1000 * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg3NDIyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0NjoyOVrOG6UGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0NjoyOVrOG6UGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc5OTg3Nw==", "bodyText": "let's explicitly call out the ACTIVE case here", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463799877", "createdAt": "2020-07-31T19:46:29Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -48,16 +58,49 @@ private void syncAzureObjectIds(Stack stack, UmsUsersState umsUsersState, BiCons\n \n             SetRangerCloudIdentityMappingRequest setRangerCloudIdentityMappingRequest = new SetRangerCloudIdentityMappingRequest();\n             setRangerCloudIdentityMappingRequest.setAzureUserMapping(userToAzureObjectIdMap);\n-            // TODO The SDX endpoint currently sets the config and triggers refresh. The SDX endpoint should also be updated\n-            //      to allow polling the status of the refresh.\n+\n             LOGGER.debug(\"Setting ranger cloud identity mapping: {}\", setRangerCloudIdentityMappingRequest);\n-            sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+            RangerCloudIdentitySyncStatus syncStatus = sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+\n+            // The sync status represents a cloud identity sync that may still be in progress, which we need to poll to check for completion.\n+            pollSyncStatus(syncStatus, envCrn, warnings);\n         } catch (Exception e) {\n             LOGGER.warn(\"Failed to set cloud identity mapping for environment {}\", envCrn, e);\n             warnings.accept(envCrn, \"Failed to set cloud identity mapping\");\n         }\n     }\n \n+    private void pollSyncStatus(RangerCloudIdentitySyncStatus syncStatus, String envCrn, BiConsumer<String, String> warnings) {\n+        // NOTE: Although it's synchronously polling, in practice this sync takes less than a second to complete\n+        Instant startTime = clock.getCurrentInstant();\n+        while (true) {\n+            LOGGER.info(\"syncStatus = {}\", syncStatus);\n+            switch (syncStatus.getState()) {\n+                case SUCCESS:\n+                    LOGGER.info(\"Successfully synced cloud identity, envCrn = {}\", envCrn);\n+                    return;\n+                case FAILED:\n+                    LOGGER.error(\"Failed to sync cloud identity, envCrn = {}\", envCrn);\n+                    warnings.accept(envCrn, \"Failed to sync cloud identity into environment\");\n+                    return;\n+                default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTg4MzczOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxOTo0OTo1N1rOG6UL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo0NTowMFrOG7bCKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTMyOQ==", "bodyText": "it's possible to make this call and then not check the returned value because we timed out. I suggest moving the clock isAfter check to before the sleep.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r463801329", "createdAt": "2020-07-31T19:49:57Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -48,16 +58,49 @@ private void syncAzureObjectIds(Stack stack, UmsUsersState umsUsersState, BiCons\n \n             SetRangerCloudIdentityMappingRequest setRangerCloudIdentityMappingRequest = new SetRangerCloudIdentityMappingRequest();\n             setRangerCloudIdentityMappingRequest.setAzureUserMapping(userToAzureObjectIdMap);\n-            // TODO The SDX endpoint currently sets the config and triggers refresh. The SDX endpoint should also be updated\n-            //      to allow polling the status of the refresh.\n+\n             LOGGER.debug(\"Setting ranger cloud identity mapping: {}\", setRangerCloudIdentityMappingRequest);\n-            sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+            RangerCloudIdentitySyncStatus syncStatus = sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+\n+            // The sync status represents a cloud identity sync that may still be in progress, which we need to poll to check for completion.\n+            pollSyncStatus(syncStatus, envCrn, warnings);\n         } catch (Exception e) {\n             LOGGER.warn(\"Failed to set cloud identity mapping for environment {}\", envCrn, e);\n             warnings.accept(envCrn, \"Failed to set cloud identity mapping\");\n         }\n     }\n \n+    private void pollSyncStatus(RangerCloudIdentitySyncStatus syncStatus, String envCrn, BiConsumer<String, String> warnings) {\n+        // NOTE: Although it's synchronously polling, in practice this sync takes less than a second to complete\n+        Instant startTime = clock.getCurrentInstant();\n+        while (true) {\n+            LOGGER.info(\"syncStatus = {}\", syncStatus);\n+            switch (syncStatus.getState()) {\n+                case SUCCESS:\n+                    LOGGER.info(\"Successfully synced cloud identity, envCrn = {}\", envCrn);\n+                    return;\n+                case FAILED:\n+                    LOGGER.error(\"Failed to sync cloud identity, envCrn = {}\", envCrn);\n+                    warnings.accept(envCrn, \"Failed to sync cloud identity into environment\");\n+                    return;\n+                default:\n+                    LOGGER.info(\"Sync is in progress, retrying\");\n+                    try {\n+                        Thread.sleep(SYNC_SLEEP_INTERVAL_MS);\n+                    } catch (InterruptedException e) {\n+                        LOGGER.error(\"Interrupted during cloud identity sync\", e);\n+                        warnings.accept(envCrn, \"Interrupted during cloud identity sync\");\n+                    }\n+                    long commandId = syncStatus.getCommandId();\n+                    syncStatus = sdxEndpoint.getRangerCloudIdentitySyncStatus(envCrn, commandId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2MjA4OA==", "bodyText": "hmm true, I've moved the check up higher.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r464962088", "createdAt": "2020-08-04T10:45:00Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -48,16 +58,49 @@ private void syncAzureObjectIds(Stack stack, UmsUsersState umsUsersState, BiCons\n \n             SetRangerCloudIdentityMappingRequest setRangerCloudIdentityMappingRequest = new SetRangerCloudIdentityMappingRequest();\n             setRangerCloudIdentityMappingRequest.setAzureUserMapping(userToAzureObjectIdMap);\n-            // TODO The SDX endpoint currently sets the config and triggers refresh. The SDX endpoint should also be updated\n-            //      to allow polling the status of the refresh.\n+\n             LOGGER.debug(\"Setting ranger cloud identity mapping: {}\", setRangerCloudIdentityMappingRequest);\n-            sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+            RangerCloudIdentitySyncStatus syncStatus = sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+\n+            // The sync status represents a cloud identity sync that may still be in progress, which we need to poll to check for completion.\n+            pollSyncStatus(syncStatus, envCrn, warnings);\n         } catch (Exception e) {\n             LOGGER.warn(\"Failed to set cloud identity mapping for environment {}\", envCrn, e);\n             warnings.accept(envCrn, \"Failed to set cloud identity mapping\");\n         }\n     }\n \n+    private void pollSyncStatus(RangerCloudIdentitySyncStatus syncStatus, String envCrn, BiConsumer<String, String> warnings) {\n+        // NOTE: Although it's synchronously polling, in practice this sync takes less than a second to complete\n+        Instant startTime = clock.getCurrentInstant();\n+        while (true) {\n+            LOGGER.info(\"syncStatus = {}\", syncStatus);\n+            switch (syncStatus.getState()) {\n+                case SUCCESS:\n+                    LOGGER.info(\"Successfully synced cloud identity, envCrn = {}\", envCrn);\n+                    return;\n+                case FAILED:\n+                    LOGGER.error(\"Failed to sync cloud identity, envCrn = {}\", envCrn);\n+                    warnings.accept(envCrn, \"Failed to sync cloud identity into environment\");\n+                    return;\n+                default:\n+                    LOGGER.info(\"Sync is in progress, retrying\");\n+                    try {\n+                        Thread.sleep(SYNC_SLEEP_INTERVAL_MS);\n+                    } catch (InterruptedException e) {\n+                        LOGGER.error(\"Interrupted during cloud identity sync\", e);\n+                        warnings.accept(envCrn, \"Interrupted during cloud identity sync\");\n+                    }\n+                    long commandId = syncStatus.getCommandId();\n+                    syncStatus = sdxEndpoint.getRangerCloudIdentitySyncStatus(envCrn, commandId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzgwMTMyOQ=="}, "originalCommit": {"oid": "14a4b48e686de672070c89d2d99e94b56e019d78"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg0ODY2OnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozMDoyM1rOG7_q8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyNDo0M1rOG-D0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjM1Mg==", "bodyText": "Is it need to be a POST request?", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r465562352", "createdAt": "2020-08-05T08:30:23Z", "author": {"login": "keyki"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -202,7 +203,14 @@ SdxDatabaseRestoreStatusResponse getRestoreDatabaseStatusByName(@PathParam(\"name\n     @POST\n     @Path(\"/envcrn/{envCrn}/ranger_cloud_identity_mapping\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    @ApiOperation(value = \"set ranger cloud identity mapping\", produces = MediaType.APPLICATION_JSON, nickname = \"setRangerCloudIdentityMapping\")\n-    void setRangerCloudIdentityMapping(@PathParam(\"envCrn\") @ValidCrn String envCrn, @NotNull @Valid SetRangerCloudIdentityMappingRequest request);\n+    @ApiOperation(value = \"Set ranger cloud identity mapping\", produces = MediaType.APPLICATION_JSON, nickname = \"setRangerCloudIdentityMapping\")\n+    RangerCloudIdentitySyncStatus setRangerCloudIdentityMapping(@PathParam(\"envCrn\") @ValidCrn String envCrn,\n+            @NotNull @Valid SetRangerCloudIdentityMappingRequest request);\n+\n+    @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNzQwNQ==", "bodyText": "Your right, changed it to GET", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r467727405", "createdAt": "2020-08-10T07:24:43Z", "author": {"login": "aarman-cloudera"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -202,7 +203,14 @@ SdxDatabaseRestoreStatusResponse getRestoreDatabaseStatusByName(@PathParam(\"name\n     @POST\n     @Path(\"/envcrn/{envCrn}/ranger_cloud_identity_mapping\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    @ApiOperation(value = \"set ranger cloud identity mapping\", produces = MediaType.APPLICATION_JSON, nickname = \"setRangerCloudIdentityMapping\")\n-    void setRangerCloudIdentityMapping(@PathParam(\"envCrn\") @ValidCrn String envCrn, @NotNull @Valid SetRangerCloudIdentityMappingRequest request);\n+    @ApiOperation(value = \"Set ranger cloud identity mapping\", produces = MediaType.APPLICATION_JSON, nickname = \"setRangerCloudIdentityMapping\")\n+    RangerCloudIdentitySyncStatus setRangerCloudIdentityMapping(@PathParam(\"envCrn\") @ValidCrn String envCrn,\n+            @NotNull @Valid SetRangerCloudIdentityMappingRequest request);\n+\n+    @POST", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjM1Mg=="}, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg5NjU5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/configuration/CloudIdSyncConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0MzozN1rOG8AIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0MzozN1rOG8AIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTg5Nw==", "bodyText": "Can you please remove the default values from here? The application.yml already contains them.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r465569897", "createdAt": "2020-08-05T08:43:37Z", "author": {"login": "keyki"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/configuration/CloudIdSyncConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.sequenceiq.freeipa.configuration;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class CloudIdSyncConfig {\n+\n+    @Value(\"${freeipa.cloudidsync.poller.timeoutMs:4000}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzkxNTkyOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0ODo1NFrOG8AUdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0ODo1NFrOG8AUdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3Mjk4Mg==", "bodyText": "This method is not used anywhere.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r465572982", "createdAt": "2020-08-05T08:48:54Z", "author": {"login": "keyki"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxService.java", "diffHunk": "@@ -165,6 +165,17 @@ public SdxCluster getByCrn(String userCrn, String clusterCrn) {\n         }\n     }\n \n+    public SdxCluster getByClusterCrn(String clusterCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzk0NjY3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo1NzoxOFrOG8AndA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyNTozMVrOG-D1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3Nzg0NA==", "bodyText": "Instead of writing another polling method, we should use the one that we already have. Example: https://github.com/hortonworks/cloudbreak/blob/master/freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java#L296", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r465577844", "createdAt": "2020-08-05T08:57:18Z", "author": {"login": "keyki"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -48,16 +58,59 @@ private void syncAzureObjectIds(Stack stack, UmsUsersState umsUsersState, BiCons\n \n             SetRangerCloudIdentityMappingRequest setRangerCloudIdentityMappingRequest = new SetRangerCloudIdentityMappingRequest();\n             setRangerCloudIdentityMappingRequest.setAzureUserMapping(userToAzureObjectIdMap);\n-            // TODO The SDX endpoint currently sets the config and triggers refresh. The SDX endpoint should also be updated\n-            //      to allow polling the status of the refresh.\n+\n             LOGGER.debug(\"Setting ranger cloud identity mapping: {}\", setRangerCloudIdentityMappingRequest);\n-            sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+            RangerCloudIdentitySyncStatus syncStatus = sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+\n+            // The sync status represents a cloud identity sync that may still be in progress, which we need to poll to check for completion.\n+            pollSyncStatus(syncStatus, envCrn, warnings);\n         } catch (Exception e) {\n             LOGGER.warn(\"Failed to set cloud identity mapping for environment {}\", envCrn, e);\n             warnings.accept(envCrn, \"Failed to set cloud identity mapping\");\n         }\n     }\n \n+    private void pollSyncStatus(RangerCloudIdentitySyncStatus syncStatus, String envCrn, BiConsumer<String, String> warnings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNzc1MA==", "bodyText": "Thanks, didn't know about that one, I've moved to using it.", "url": "https://github.com/hortonworks/cloudbreak/pull/8656#discussion_r467727750", "createdAt": "2020-08-10T07:25:31Z", "author": {"login": "aarman-cloudera"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/CloudIdentitySyncService.java", "diffHunk": "@@ -48,16 +58,59 @@ private void syncAzureObjectIds(Stack stack, UmsUsersState umsUsersState, BiCons\n \n             SetRangerCloudIdentityMappingRequest setRangerCloudIdentityMappingRequest = new SetRangerCloudIdentityMappingRequest();\n             setRangerCloudIdentityMappingRequest.setAzureUserMapping(userToAzureObjectIdMap);\n-            // TODO The SDX endpoint currently sets the config and triggers refresh. The SDX endpoint should also be updated\n-            //      to allow polling the status of the refresh.\n+\n             LOGGER.debug(\"Setting ranger cloud identity mapping: {}\", setRangerCloudIdentityMappingRequest);\n-            sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+            RangerCloudIdentitySyncStatus syncStatus = sdxEndpoint.setRangerCloudIdentityMapping(envCrn, setRangerCloudIdentityMappingRequest);\n+\n+            // The sync status represents a cloud identity sync that may still be in progress, which we need to poll to check for completion.\n+            pollSyncStatus(syncStatus, envCrn, warnings);\n         } catch (Exception e) {\n             LOGGER.warn(\"Failed to set cloud identity mapping for environment {}\", envCrn, e);\n             warnings.accept(envCrn, \"Failed to set cloud identity mapping\");\n         }\n     }\n \n+    private void pollSyncStatus(RangerCloudIdentitySyncStatus syncStatus, String envCrn, BiConsumer<String, String> warnings) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3Nzg0NA=="}, "originalCommit": {"oid": "760c649730f994c4098117a4240094557d951e37"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2974, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}