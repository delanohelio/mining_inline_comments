{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjU1Nzk2", "number": 9577, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NDowNFrOFBo69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NDowNFrOFBo69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjYzMzUxOnYy", "diffSide": "RIGHT", "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/util/GcpLabelUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NDowNFrOIAZpwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo0NDowNFrOIAZpwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5MTIwMQ==", "bodyText": "I think it would be beneficial to log the generated value", "url": "https://github.com/hortonworks/cloudbreak/pull/9577#discussion_r537291201", "createdAt": "2020-12-07T07:44:04Z", "author": {"login": "doktoric"}, "path": "cloud-gcp/src/main/java/com/sequenceiq/cloudbreak/cloud/gcp/util/GcpLabelUtil.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.cloudbreak.cloud.gcp.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudStack;\n+\n+public final class GcpLabelUtil {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GcpLabelUtil.class);\n+\n+    private static final int GCP_MAX_TAG_LEN = 63;\n+\n+    private GcpLabelUtil() {\n+    }\n+\n+    public static Map<String, String> createLabelsFromTags(CloudStack cloudStack) {\n+        Map<String, String> result = new HashMap<>();\n+        Map<String, String> tags = cloudStack.getTags();\n+        if (tags != null) {\n+            tags.forEach((key, value) -> result.put(transform(key), transform(value)));\n+        }\n+        return result;\n+    }\n+\n+    private static String transform(String value) {\n+        // GCP labels have strict rules https://cloud.google.com/compute/docs/labeling-resources\n+        LOGGER.debug(\"Transforming tag key/value for GCP.\");\n+        if (Crn.isCrn(value)) {\n+            try {\n+                Crn crn = Crn.fromString(value);\n+                value = crn == null ? value : crn.getResource();\n+            } catch (Exception e) {\n+                LOGGER.debug(\"Ignoring CRN ({}) parse error during tag value generation : {}\", value, e.getMessage());\n+            }\n+        }\n+        String sanitized = value.split(\"@\")[0].toLowerCase().replaceAll(\"[^\\\\w]\", \"-\");\n+        return StringUtils.right(sanitized, GCP_MAX_TAG_LEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c4472c0bcc283c27353a4840e1b762a82f009"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3418, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}