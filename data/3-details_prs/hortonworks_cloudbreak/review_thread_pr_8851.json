{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyOTk0MDU2", "number": 8851, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxNDozMVrOEcNTxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxNDozMVrOEcNTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDEzNjM2OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxNDozMVrOHGmK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDowNTo0N1rOHGn17A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3ODg5Mg==", "bodyText": "this is a duplicate of the getRangerCloudIdentitySyncStatus. could you refactor this to a common part to reduce code duplication?", "url": "https://github.com/hortonworks/cloudbreak/pull/8851#discussion_r476678892", "createdAt": "2020-08-25T19:14:31Z", "author": {"login": "lacikaaa"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -64,11 +70,20 @@ private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn\n         return Optional.of(Iterables.getOnlyElement(sdxClusters));\n     }\n \n+    private boolean isDatalakeRunning(SdxCluster sdxCluster) {\n+        SdxStatusEntity sdxStatusEntity = sdxStatusService.getActualStatusForSdx(sdxCluster);\n+        LOGGER.debug(\"SDX status = {}\", sdxStatusEntity.getStatus());\n+        return sdxStatusEntity.getStatus().equals(DatalakeStatusEnum.RUNNING);\n+    }\n+\n     public RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, Map<String, String> azureUserMapping) {\n         Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n         if (sdxCluster.isEmpty()) {\n             return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"No datalakes associated with the environment.\");\n         }\n+        if (!isDatalakeRunning(sdxCluster.get())) {\n+            return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"Datalake is not running for the environment.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1d344f9c4ca8e7ef37cfb57416a72d4ec32b2a8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwNjI4NA==", "bodyText": "Thanks, I've added the else if branches as per your chat suggestion. I think making it more DRY would require wrapping the operation in a functional interface (see below example) which seemed less readable to me, so I didn't go for it. Let me know if that's okay, or if you had some other idea.\npublic RangerCloudIdentitySyncStatus runCloudIdSyncOperation(String envCrn, Function<SdxCluster, RangerCloudIdentitySyncStatus> operation) {\n    Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n    if (sdxCluster.isEmpty()) {\n        return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"No datalakes associated with the environment.\");\n    } else if (!isDatalakeRunning(sdxCluster.get())) {\n        return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"Datalake is not running for the environment.\");\n    } else {\n        return operation.apply(sdxCluster.get());\n    }\n}\n\npublic RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, Map<String, String> azureUserMapping) {\n    return runCloudIdSyncOperation(envCrn, sdxCluster -> setAzureCloudIdentityMapping(envCrn, sdxCluster, azureUserMapping));\n}\n\npublic RangerCloudIdentitySyncStatus getRangerCloudIdentitySyncStatus(String envCrn, long commandId) {\n    return runCloudIdSyncOperation(envCrn, sdxCluster -> {\n        try {\n            ApiCommand apiCommand = clouderaManagerRangerUtil.getApiCommand(sdxCluster.getStackCrn(), commandId);\n            return toRangerCloudIdentitySyncStatus(apiCommand);\n        } catch (ApiException e) {\n            LOGGER.error(\"Encountered cloudera manager api exception\", e);\n            return newSyncStatus(RangerCloudIdentitySyncState.FAILED, \"Encountered cloudera manager api exception\");\n        }\n    });\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/8851#discussion_r476706284", "createdAt": "2020-08-25T20:05:47Z", "author": {"login": "aarman-cloudera"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/cm/RangerCloudIdentityService.java", "diffHunk": "@@ -64,11 +70,20 @@ private RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn\n         return Optional.of(Iterables.getOnlyElement(sdxClusters));\n     }\n \n+    private boolean isDatalakeRunning(SdxCluster sdxCluster) {\n+        SdxStatusEntity sdxStatusEntity = sdxStatusService.getActualStatusForSdx(sdxCluster);\n+        LOGGER.debug(\"SDX status = {}\", sdxStatusEntity.getStatus());\n+        return sdxStatusEntity.getStatus().equals(DatalakeStatusEnum.RUNNING);\n+    }\n+\n     public RangerCloudIdentitySyncStatus setAzureCloudIdentityMapping(String envCrn, Map<String, String> azureUserMapping) {\n         Optional<SdxCluster> sdxCluster = getSdxCluster(envCrn);\n         if (sdxCluster.isEmpty()) {\n             return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"No datalakes associated with the environment.\");\n         }\n+        if (!isDatalakeRunning(sdxCluster.get())) {\n+            return newSyncStatus(RangerCloudIdentitySyncState.NOT_APPLICABLE, \"Datalake is not running for the environment.\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3ODg5Mg=="}, "originalCommit": {"oid": "e1d344f9c4ca8e7ef37cfb57416a72d4ec32b2a8"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2299, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}