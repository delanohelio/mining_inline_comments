{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTg3MjMy", "number": 7682, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNzozMVrODtAAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNzozMVrODtAAqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTEyNjgzOnYy", "diffSide": "RIGHT", "path": "environment/src/test/java/com/sequenceiq/environment/service/integration/CredentialAuthorizationIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNzozMVrOF-KuGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNzozMVrOF-KuGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMTY3Mw==", "bodyText": "This could have been a file.", "url": "https://github.com/hortonworks/cloudbreak/pull/7682#discussion_r400731673", "createdAt": "2020-03-31T08:27:31Z", "author": {"login": "lnardai"}, "path": "environment/src/test/java/com/sequenceiq/environment/service/integration/CredentialAuthorizationIntegrationTest.java", "diffHunk": "@@ -0,0 +1,244 @@\n+package com.sequenceiq.environment.service.integration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.ForbiddenException;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.cloud.event.platform.ResourceDefinitionRequest;\n+import com.sequenceiq.cloudbreak.cloud.event.platform.ResourceDefinitionResult;\n+import com.sequenceiq.environment.api.v1.credential.model.parameters.aws.AwsCredentialParameters;\n+import com.sequenceiq.environment.api.v1.credential.model.parameters.aws.KeyBasedParameters;\n+import com.sequenceiq.environment.api.v1.credential.model.request.CredentialRequest;\n+import com.sequenceiq.environment.api.v1.credential.model.response.CredentialResponse;\n+import com.sequenceiq.environment.client.EnvironmentServiceClientBuilder;\n+import com.sequenceiq.environment.client.EnvironmentServiceCrnEndpoints;\n+import com.sequenceiq.environment.credential.domain.Credential;\n+import com.sequenceiq.environment.credential.repository.CredentialRepository;\n+import com.sequenceiq.environment.credential.service.RequestProvider;\n+import com.sequenceiq.environment.service.integration.testconfiguration.TestConfigurationForServiceIntegration;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        classes = TestConfigurationForServiceIntegration.class)\n+@ActiveProfiles(\"test\")\n+public class CredentialAuthorizationIntegrationTest {\n+\n+    private static final String DEFINITION_AWS = \"{\\\"values\\\":[{\\\"name\\\":\\\"smartSenseId\\\",\\\"type\\\":\\\"String\\\",\\\"sensitive\\\":false,\\\"optional\\\":true},\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e8435945e1f4d2ccd190af5194f92a4754376df"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2606, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}