{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzM4MzMx", "number": 7336, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNDo0MFrODiWBBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo1MToxOFrODiYI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM4ODg1OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNDo0MFrOFtiW7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNDo0MFrOFtiW7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzE2NQ==", "bodyText": "pls. move to OperationDescriptions and specify the resource used for \"by name\"", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383293165", "createdAt": "2020-02-24T14:24:40Z", "author": {"login": "pdarvasi"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -239,4 +240,16 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     @ApiOperation(value = GENERATE_HOSTS_INVENTORY, produces = MediaType.TEXT_PLAIN, nickname = \"getClusterHostsInventory\")\n     String getClusterHostsInventory(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n+    @GET\n+    @Path(\"{name}/check_platform_upgrade\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = \"checks for upgrade options by name\", nickname = \"checkForUpgradeByName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM5MDUxOnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNTowNlrOFtiYAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNTowNlrOFtiYAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzQ0Mw==", "bodyText": "pls. rename platform to stack", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383293443", "createdAt": "2020-02-24T14:25:06Z", "author": {"login": "pdarvasi"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -239,4 +240,16 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     @ApiOperation(value = GENERATE_HOSTS_INVENTORY, produces = MediaType.TEXT_PLAIN, nickname = \"getClusterHostsInventory\")\n     String getClusterHostsInventory(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n+    @GET\n+    @Path(\"{name}/check_platform_upgrade\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM5MTQ0OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNToyMVrOFtiYhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNToyMVrOFtiYhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5MzU3NQ==", "bodyText": "pls. move to OperationDescriptions", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383293575", "createdAt": "2020-02-24T14:25:21Z", "author": {"login": "pdarvasi"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -239,4 +240,16 @@ FlowIdentifier setClusterMaintenanceMode(@PathParam(\"workspaceId\") Long workspac\n     @ApiOperation(value = GENERATE_HOSTS_INVENTORY, produces = MediaType.TEXT_PLAIN, nickname = \"getClusterHostsInventory\")\n     String getClusterHostsInventory(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n \n+    @GET\n+    @Path(\"{name}/check_platform_upgrade\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = \"checks for upgrade options by name\", nickname = \"checkForUpgradeByName\")\n+    UpgradeOptionsV4Response checkForPlatformUpgradeByName(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name);\n+\n+    @POST\n+    @Path(\"{name}/platform_upgrade\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = \"upgrades a cluster to the latest CM or CDH version\", nickname = \"upgradeClusterPlatformByName\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzM5ODM5OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/response/UpgradeOptionsV4Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNzowN1rOFtichg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyNzowN1rOFtichg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5NDU5OA==", "bodyText": "pls rename to upgradeCandidates", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383294598", "createdAt": "2020-02-24T14:27:07Z", "author": {"login": "pdarvasi"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/response/UpgradeOptionsV4Response.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response;\n+\n+import java.util.List;\n+\n+public class UpgradeOptionsV4Response {\n+\n+    private ImageInfoV4Response current;\n+\n+    private List<ImageInfoV4Response> upgrade;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzQwMzg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/StackV4Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyODoyNFrOFtifqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyODoyNFrOFtifqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5NTQwMw==", "bodyText": "Pls rename platform to stack", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383295403", "createdAt": "2020-02-24T14:28:24Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/StackV4Controller.java", "diffHunk": "@@ -168,4 +169,14 @@ public FlowIdentifier putCluster(Long workspaceId, String name, @Valid UpdateClu\n     public String getClusterHostsInventory(Long workspaceId, String name) {\n         return stackOperations.getClusterHostsInventory(workspaceId, name);\n     }\n+\n+    @Override\n+    public UpgradeOptionsV4Response checkForPlatformUpgradeByName(Long workspaceId, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzQwNDU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/StackV4Controller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyODozMFrOFtigAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyODozMFrOFtigAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5NTQ4OA==", "bodyText": "Pls rename platform to stack", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383295488", "createdAt": "2020-02-24T14:28:30Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/controller/v4/StackV4Controller.java", "diffHunk": "@@ -168,4 +169,14 @@ public FlowIdentifier putCluster(Long workspaceId, String name, @Valid UpdateClu\n     public String getClusterHostsInventory(Long workspaceId, String name) {\n         return stackOperations.getClusterHostsInventory(workspaceId, name);\n     }\n+\n+    @Override\n+    public UpgradeOptionsV4Response checkForPlatformUpgradeByName(Long workspaceId, String name) {\n+        return stackOperations.checkForPlatformUpgrade(NameOrCrn.ofName(name), workspaceId);\n+    }\n+\n+    @Override\n+    public void upgradeClusterPlatformByName(Long workspaceId, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzQwOTMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyOTo0OVrOFtijEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNDoyOTo0OVrOFtijEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI5NjI3Mg==", "bodyText": "upgrade --> upgrading", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383296272", "createdAt": "2020-02-24T14:29:49Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.CloudbreakImageCatalogV2;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageCatalogException;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageNotFoundException;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.service.image.ImageCatalogProvider;\n+import com.sequenceiq.cloudbreak.service.image.ImageService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+\n+@Component\n+public class PlatformUpgradeService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PlatformUpgradeService.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ImageCatalogProvider imageCatalogProvider;\n+\n+    @Inject\n+    private ImageService imageService;\n+\n+    @Inject\n+    private StackUpgradeImageFilter stackUpgradeImageFilter;\n+\n+    @Inject\n+    private UpgradeOptionsResponseFactory upgradeOptionsResponseFactory;\n+\n+    public UpgradeOptionsV4Response checkForUpgradesByName(Long workspaceId, String stackName) {\n+        UpgradeOptionsV4Response upgradeOptions = new UpgradeOptionsV4Response();\n+        try {\n+            Stack stack = stackService.getByNameInWorkspace(stackName, workspaceId);\n+            LOGGER.info(String.format(\"Retrieving images for upgrade stack %s\", stack.getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzYwNzMwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToyMDoyOFrOFtkcLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNToyMDoyOFrOFtkcLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNzI3OQ==", "bodyText": "we might set statusMessage with the error here", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383327279", "createdAt": "2020-02-24T15:20:28Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.CloudbreakImageCatalogV2;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageCatalogException;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageNotFoundException;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.service.image.ImageCatalogProvider;\n+import com.sequenceiq.cloudbreak.service.image.ImageService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+\n+@Component\n+public class PlatformUpgradeService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PlatformUpgradeService.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ImageCatalogProvider imageCatalogProvider;\n+\n+    @Inject\n+    private ImageService imageService;\n+\n+    @Inject\n+    private StackUpgradeImageFilter stackUpgradeImageFilter;\n+\n+    @Inject\n+    private UpgradeOptionsResponseFactory upgradeOptionsResponseFactory;\n+\n+    public UpgradeOptionsV4Response checkForUpgradesByName(Long workspaceId, String stackName) {\n+        UpgradeOptionsV4Response upgradeOptions = new UpgradeOptionsV4Response();\n+        try {\n+            Stack stack = stackService.getByNameInWorkspace(stackName, workspaceId);\n+            LOGGER.info(String.format(\"Retrieving images for upgrade stack %s\", stack.getName()));\n+            com.sequenceiq.cloudbreak.cloud.model.Image currentImage = getImage(stack);\n+            CloudbreakImageCatalogV2 imageCatalog = getImagesFromCatalog(currentImage.getImageCatalogUrl());\n+            Image image = getCurrentImageFromCatalog(currentImage.getImageId(), imageCatalog);\n+            Images filteredImages = filterImages(imageCatalog, image, stack.cloudPlatform());\n+            LOGGER.info(String.format(\"%d possible image found for stack upgrade.\", filteredImages.getCdhImages().size()));\n+            upgradeOptions = createResponse(image, filteredImages, stack.getCloudPlatform(), stack.getRegion(), currentImage.getImageCatalogName());\n+        } catch (CloudbreakImageNotFoundException | CloudbreakImageCatalogException e) {\n+            LOGGER.error(\"Failed to get images\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY0NzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozMDoxMlrOFtk0yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozMDoxMlrOFtk0yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzMzU3OA==", "bodyText": "this could be part of ImageCatalogService to be reusable", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383333578", "createdAt": "2020-02-24T15:30:12Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/PlatformUpgradeService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.CloudbreakImageCatalogV2;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageCatalogException;\n+import com.sequenceiq.cloudbreak.core.CloudbreakImageNotFoundException;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.service.image.ImageCatalogProvider;\n+import com.sequenceiq.cloudbreak.service.image.ImageService;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+\n+@Component\n+public class PlatformUpgradeService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PlatformUpgradeService.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private ImageCatalogProvider imageCatalogProvider;\n+\n+    @Inject\n+    private ImageService imageService;\n+\n+    @Inject\n+    private StackUpgradeImageFilter stackUpgradeImageFilter;\n+\n+    @Inject\n+    private UpgradeOptionsResponseFactory upgradeOptionsResponseFactory;\n+\n+    public UpgradeOptionsV4Response checkForUpgradesByName(Long workspaceId, String stackName) {\n+        UpgradeOptionsV4Response upgradeOptions = new UpgradeOptionsV4Response();\n+        try {\n+            Stack stack = stackService.getByNameInWorkspace(stackName, workspaceId);\n+            LOGGER.info(String.format(\"Retrieving images for upgrade stack %s\", stack.getName()));\n+            com.sequenceiq.cloudbreak.cloud.model.Image currentImage = getImage(stack);\n+            CloudbreakImageCatalogV2 imageCatalog = getImagesFromCatalog(currentImage.getImageCatalogUrl());\n+            Image image = getCurrentImageFromCatalog(currentImage.getImageId(), imageCatalog);\n+            Images filteredImages = filterImages(imageCatalog, image, stack.cloudPlatform());\n+            LOGGER.info(String.format(\"%d possible image found for stack upgrade.\", filteredImages.getCdhImages().size()));\n+            upgradeOptions = createResponse(image, filteredImages, stack.getCloudPlatform(), stack.getRegion(), currentImage.getImageCatalogName());\n+        } catch (CloudbreakImageNotFoundException | CloudbreakImageCatalogException e) {\n+            LOGGER.error(\"Failed to get images\", e);\n+        }\n+        return upgradeOptions;\n+    }\n+\n+    private Image getCurrentImageFromCatalog(String currentImageId, CloudbreakImageCatalogV2 imageCatalog)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY2NDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/UpgradeOptionsResponseFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNDowNlrOFtk-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTozNzo0NFrOFtlIRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNjE5MA==", "bodyText": "This should be part of ClusterManagerVariant.CLOUDERA_MANAGER", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383336190", "createdAt": "2020-02-24T15:34:06Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/UpgradeOptionsResponseFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.ImageInfoV4Response;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+\n+@Component\n+public class UpgradeOptionsResponseFactory {\n+\n+    public UpgradeOptionsV4Response createV4Response(Image currentImage, Images filteredImages, String cloudPlatform, String region, String imageCatalogName) {\n+        return new UpgradeOptionsV4Response(\n+                createImageInfoFromCurrentImage(currentImage, cloudPlatform, region, imageCatalogName),\n+                createImageInfoFromFilteredImages(filteredImages, imageCatalogName, cloudPlatform, region));\n+    }\n+\n+    private ImageInfoV4Response createImageInfoFromCurrentImage(Image currentImage, String cloudPlatform, String region, String imageCatalogName) {\n+        return new ImageInfoV4Response(getImageName(currentImage, cloudPlatform, region), currentImage.getUuid(), imageCatalogName, currentImage.getCreated(),\n+                getComponentVersions(currentImage.getPackageVersions()));\n+    }\n+\n+    private List<ImageInfoV4Response> createImageInfoFromFilteredImages(Images filteredImages, String imageCatalogName, String cloudPlatform, String region) {\n+        return filteredImages.getCdhImages().stream()\n+                .map(image -> createImageInfo(image, imageCatalogName, cloudPlatform, region))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private ImageInfoV4Response createImageInfo(Image image, String imageCatalogName, String cloudPlatform, String region) {\n+        return new ImageInfoV4Response(getImageName(image, cloudPlatform, region), image.getUuid(), imageCatalogName, image.getCreated(),\n+                getComponentVersions(image.getPackageVersions()));\n+    }\n+\n+    private Map<String, String> getComponentVersions(Map<String, String> packageVersions) {\n+        return Map.of(\n+                \"Cloudera Manager\", packageVersions.get(\"cm\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODU2NA==", "bodyText": "This should be part of StackType", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383338564", "createdAt": "2020-02-24T15:37:44Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/UpgradeOptionsResponseFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.ImageInfoV4Response;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+\n+@Component\n+public class UpgradeOptionsResponseFactory {\n+\n+    public UpgradeOptionsV4Response createV4Response(Image currentImage, Images filteredImages, String cloudPlatform, String region, String imageCatalogName) {\n+        return new UpgradeOptionsV4Response(\n+                createImageInfoFromCurrentImage(currentImage, cloudPlatform, region, imageCatalogName),\n+                createImageInfoFromFilteredImages(filteredImages, imageCatalogName, cloudPlatform, region));\n+    }\n+\n+    private ImageInfoV4Response createImageInfoFromCurrentImage(Image currentImage, String cloudPlatform, String region, String imageCatalogName) {\n+        return new ImageInfoV4Response(getImageName(currentImage, cloudPlatform, region), currentImage.getUuid(), imageCatalogName, currentImage.getCreated(),\n+                getComponentVersions(currentImage.getPackageVersions()));\n+    }\n+\n+    private List<ImageInfoV4Response> createImageInfoFromFilteredImages(Images filteredImages, String imageCatalogName, String cloudPlatform, String region) {\n+        return filteredImages.getCdhImages().stream()\n+                .map(image -> createImageInfo(image, imageCatalogName, cloudPlatform, region))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private ImageInfoV4Response createImageInfo(Image image, String imageCatalogName, String cloudPlatform, String region) {\n+        return new ImageInfoV4Response(getImageName(image, cloudPlatform, region), image.getUuid(), imageCatalogName, image.getCreated(),\n+                getComponentVersions(image.getPackageVersions()));\n+    }\n+\n+    private Map<String, String> getComponentVersions(Map<String, String> packageVersions) {\n+        return Map.of(\n+                \"Cloudera Manager\", packageVersions.get(\"cm\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzNjE5MA=="}, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY5MTk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/UpgradeOptionsResponseFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MDozMlrOFtlPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MDozMlrOFtlPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MDQyOQ==", "bodyText": "may be part of ImageService", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383340429", "createdAt": "2020-02-24T15:40:32Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/upgrade/UpgradeOptionsResponseFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.service.upgrade;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.ImageInfoV4Response;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Image;\n+import com.sequenceiq.cloudbreak.cloud.model.catalog.Images;\n+\n+@Component\n+public class UpgradeOptionsResponseFactory {\n+\n+    public UpgradeOptionsV4Response createV4Response(Image currentImage, Images filteredImages, String cloudPlatform, String region, String imageCatalogName) {\n+        return new UpgradeOptionsV4Response(\n+                createImageInfoFromCurrentImage(currentImage, cloudPlatform, region, imageCatalogName),\n+                createImageInfoFromFilteredImages(filteredImages, imageCatalogName, cloudPlatform, region));\n+    }\n+\n+    private ImageInfoV4Response createImageInfoFromCurrentImage(Image currentImage, String cloudPlatform, String region, String imageCatalogName) {\n+        return new ImageInfoV4Response(getImageName(currentImage, cloudPlatform, region), currentImage.getUuid(), imageCatalogName, currentImage.getCreated(),\n+                getComponentVersions(currentImage.getPackageVersions()));\n+    }\n+\n+    private List<ImageInfoV4Response> createImageInfoFromFilteredImages(Images filteredImages, String imageCatalogName, String cloudPlatform, String region) {\n+        return filteredImages.getCdhImages().stream()\n+                .map(image -> createImageInfo(image, imageCatalogName, cloudPlatform, region))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private ImageInfoV4Response createImageInfo(Image image, String imageCatalogName, String cloudPlatform, String region) {\n+        return new ImageInfoV4Response(getImageName(image, cloudPlatform, region), image.getUuid(), imageCatalogName, image.getCreated(),\n+                getComponentVersions(image.getPackageVersions()));\n+    }\n+\n+    private Map<String, String> getComponentVersions(Map<String, String> packageVersions) {\n+        return Map.of(\n+                \"Cloudera Manager\", packageVersions.get(\"cm\"),\n+                \"Cloudera Runtime\", packageVersions.get(\"stack\"));\n+    }\n+\n+    private String getImageName(Image image, String cloudPlatform, String region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzY5MzgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/StackOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MTowMFrOFtlQwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MTowMFrOFtlQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MDczNw==", "bodyText": "rename to stack pls.", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383340737", "createdAt": "2020-02-24T15:41:00Z", "author": {"login": "pdarvasi"}, "path": "core/src/main/java/com/sequenceiq/distrox/v1/distrox/StackOperations.java", "diffHunk": "@@ -196,6 +201,19 @@ public UpgradeOptionV4Response checkForUpgrade(@NotNull NameOrCrn nameOrCrn, Lon\n         }\n     }\n \n+    public void upgradeClusterPlatform(@NotNull NameOrCrn nameOrCrn, Long workspaceId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzcwMDc0OnYy", "diffSide": "RIGHT", "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MjozM1rOFtlU5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0MjozM1rOFtlU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MTc5Nw==", "bodyText": "pls. rename platforms to stack.", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383341797", "createdAt": "2020-02-24T15:42:33Z", "author": {"login": "pdarvasi"}, "path": "datalake-api/src/main/java/com/sequenceiq/sdx/api/endpoint/SdxEndpoint.java", "diffHunk": "@@ -182,4 +183,28 @@ SdxClusterResponse create(@ValidStackNameFormat @ValidStackNameLength @PathParam\n     @Produces(MediaType.APPLICATION_JSON)\n     @ApiOperation(value = \"list datalake versions\", produces = MediaType.APPLICATION_JSON, nickname = \"versions\")\n     List<String> versions();\n+\n+    @GET\n+    @Path(\"{name}/check_platform_upgrade\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzczNjczOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxDataPlatformUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo1MToxOFrOFtlq7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo1MToxOFrOFtlq7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NzQzNw==", "bodyText": "pls externalize 0L in both places", "url": "https://github.com/hortonworks/cloudbreak/pull/7336#discussion_r383347437", "createdAt": "2020-02-24T15:51:18Z", "author": {"login": "pdarvasi"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/upgrade/SdxDataPlatformUpgradeService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sequenceiq.datalake.service.upgrade;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.StackV4Endpoint;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.UpgradeOptionsV4Response;\n+import com.sequenceiq.datalake.entity.SdxCluster;\n+import com.sequenceiq.datalake.service.sdx.SdxService;\n+\n+@Component\n+public class SdxDataPlatformUpgradeService {\n+\n+    @Inject\n+    private StackV4Endpoint stackV4Endpoint;\n+\n+    @Inject\n+    private SdxService sdxService;\n+\n+    public UpgradeOptionsV4Response checkForPlatformUpgradeByName(String name) {\n+        return stackV4Endpoint.checkForPlatformUpgradeByName(0L, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135751b1d02e9fa335210ead7dd9f1dd89d6a0c0"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}