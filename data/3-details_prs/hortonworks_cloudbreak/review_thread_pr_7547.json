{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODY1MzEz", "number": 7547, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MzowMlrODnb3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMDozMlrODoSjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc3NTQxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo1MzowMlrOF1bhKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNDo0N1rOF1jZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2OTcwNA==", "bodyText": "line 124-128 is repeated from 91-98. Should it be a function? See FreeIpaClientExceptionUtils.java for similar functions.", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r391569704", "createdAt": "2020-03-12T11:53:02Z", "author": {"login": "jamisonbennett"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -97,11 +114,25 @@ public FreeIpaClient getFreeIpaClientForStackWithPing(Stack stack) throws Except\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n                     return getFreeIpaClientBuilderForClusterProxy(stack).buildWithPing();\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).buildWithPing();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(\n+                            instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList())) {\n+                        try {\n+                            return getFreeIpaClientBuilder(stack, instanceMetaData).buildWithPing();\n+                        } catch (FreeIpaClientException | IOException e) {\n+                            lastException = e;\n+                            if (e instanceof FreeIpaClientException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb042f8aa0078c9921d338d072541cbfab70755"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5ODcwNQ==", "bodyText": "moved", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r391698705", "createdAt": "2020-03-12T15:24:47Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -97,11 +114,25 @@ public FreeIpaClient getFreeIpaClientForStackWithPing(Stack stack) throws Except\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n                     return getFreeIpaClientBuilderForClusterProxy(stack).buildWithPing();\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).buildWithPing();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(\n+                            instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList())) {\n+                        try {\n+                            return getFreeIpaClientBuilder(stack, instanceMetaData).buildWithPing();\n+                        } catch (FreeIpaClientException | IOException e) {\n+                            lastException = e;\n+                            if (e instanceof FreeIpaClientException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2OTcwNA=="}, "originalCommit": {"oid": "5bb042f8aa0078c9921d338d072541cbfab70755"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc5NTc4OnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMjowMDowMFrOF1btuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNDozNFrOF1jYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjkyMQ==", "bodyText": "I think the statusCode should be OptionalInt since its not always present.", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r391572921", "createdAt": "2020-03-12T12:00:00Z", "author": {"login": "jamisonbennett"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientException.java", "diffHunk": "@@ -1,19 +1,25 @@\n package com.sequenceiq.freeipa.client;\n \n public class FreeIpaClientException extends Exception {\n+\n+    private final int statusCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bb042f8aa0078c9921d338d072541cbfab70755"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5ODU2MA==", "bodyText": "changed", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r391698560", "createdAt": "2020-03-12T15:24:34Z", "author": {"login": "holleyism"}, "path": "freeipa-client/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientException.java", "diffHunk": "@@ -1,19 +1,25 @@\n package com.sequenceiq.freeipa.client;\n \n public class FreeIpaClientException extends Exception {\n+\n+    private final int statusCode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3MjkyMQ=="}, "originalCommit": {"oid": "5bb042f8aa0078c9921d338d072541cbfab70755"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY5MjM1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxMjo0MFrOF2vaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMzozOVrOF2_7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDE0Nw==", "bodyText": "I don't think this response.getStatusLine().getStatusCode() is necessary", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r392944147", "createdAt": "2020-03-16T11:12:40Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -193,21 +187,14 @@ private String connect(String user, String pass, String apiAddress, int port)\n                 throw new FreeIpaClientException(String.format(\"Encountered unexpected response from \"\n                         + \"FreeIPA; details:%n%n\"\n                         + \"code: %s%n\"\n-                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()));\n+                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()),\n+                        response.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTEwOQ==", "bodyText": "It's necessary for the calling function to determine if the exception was due to not being authorized.  We want to retry logging it to different IPA servers for failover, unless the exception is because we're unauthorized.", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393195109", "createdAt": "2020-03-16T17:31:15Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -193,21 +187,14 @@ private String connect(String user, String pass, String apiAddress, int port)\n                 throw new FreeIpaClientException(String.format(\"Encountered unexpected response from \"\n                         + \"FreeIPA; details:%n%n\"\n                         + \"code: %s%n\"\n-                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()));\n+                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()),\n+                        response.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDE0Nw=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDgzOA==", "bodyText": "ok, I missed the parenthesis", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393214838", "createdAt": "2020-03-16T18:03:39Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -193,21 +187,14 @@ private String connect(String user, String pass, String apiAddress, int port)\n                 throw new FreeIpaClientException(String.format(\"Encountered unexpected response from \"\n                         + \"FreeIPA; details:%n%n\"\n                         + \"code: %s%n\"\n-                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()));\n+                        + \"headers: %s\", response.getStatusLine().getStatusCode(), response.getAllHeaders()),\n+                        response.getStatusLine().getStatusCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDE0Nw=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY5NjQ2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/TlsSecurityService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToxNTowN1rOF2vdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozMjozMFrOF2-xFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDk1Nw==", "bodyText": "if we get stack here instead of id we can omit the gw port from parameters as it's in the stack already", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r392944957", "createdAt": "2020-03-16T11:15:07Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/TlsSecurityService.java", "diffHunk": "@@ -103,9 +103,8 @@ private void generateSaltPassword(SaltSecurityConfig saltSecurityConfig) {\n         saltSecurityConfig.setSaltPasswordVault(saltPassword);\n     }\n \n-    public GatewayConfig buildGatewayConfig(Long stackId, InstanceMetaData gatewayInstance, Integer gatewayPort,\n+    public GatewayConfig buildGatewayConfig(Stack stack, InstanceMetaData gatewayInstance, Integer gatewayPort,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTc5OA==", "bodyText": "fixed", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393195798", "createdAt": "2020-03-16T17:32:30Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/TlsSecurityService.java", "diffHunk": "@@ -103,9 +103,8 @@ private void generateSaltPassword(SaltSecurityConfig saltSecurityConfig) {\n         saltSecurityConfig.setSaltPasswordVault(saltPassword);\n     }\n \n-    public GatewayConfig buildGatewayConfig(Long stackId, InstanceMetaData gatewayInstance, Integer gatewayPort,\n+    public GatewayConfig buildGatewayConfig(Stack stack, InstanceMetaData gatewayInstance, Integer gatewayPort,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NDk1Nw=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTcxMDMyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyMjo0NlrOF2vnoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozNDowNlrOF2-0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NzYxNw==", "bodyText": "this wouldn't be necessary if there is 2 catch for the 2 exception", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r392947617", "createdAt": "2020-03-16T11:22:46Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(\n+                            instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList())) {\n+                        try {\n+                            return getFreeIpaClientBuilder(stack, instanceMetaData).build(withPing);\n+                        } catch (FreeIpaClientException | IOException e) {\n+                            lastException = e;\n+                            if (e instanceof FreeIpaClientException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NjczOA==", "bodyText": "fixed", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393196738", "createdAt": "2020-03-16T17:34:06Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(\n+                            instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList())) {\n+                        try {\n+                            return getFreeIpaClientBuilder(stack, instanceMetaData).build(withPing);\n+                        } catch (FreeIpaClientException | IOException e) {\n+                            lastException = e;\n+                            if (e instanceof FreeIpaClientException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0NzYxNw=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTcyODE2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMToyNzo0OVrOF2vxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozNjowNFrOF2-5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDE2Nw==", "bodyText": "please move out the stream into a variable and/or to a method", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r392950167", "createdAt": "2020-03-16T11:27:49Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5ODAxMg==", "bodyText": "moved", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393198012", "createdAt": "2020-03-16T17:36:04Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");\n+                    for (InstanceMetaData instanceMetaData: stack.getInstanceGroups().stream().flatMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MDE2Nw=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTczNzA1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTozMDozMlrOF2v2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0NTozM1rOF2_QEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTU0Ng==", "bodyText": "this exception driven logic and return inside the for loop makes the code hard to read.\nI think it would be more readable if you do something like have an Optional<FreeIpaClient> client = Optional.empty() and iterate through the instances while it's empty and you have more instances. In the end you could return with the client or throw an exception", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r392951546", "createdAt": "2020-03-16T11:30:32Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzcyOA==", "bodyText": "changed.", "url": "https://github.com/hortonworks/cloudbreak/pull/7547#discussion_r393203728", "createdAt": "2020-03-16T17:45:33Z", "author": {"login": "holleyism"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -70,42 +73,48 @@ private String toClusterProxyBasepath(String freeIpaClusterCrn) {\n         return String.format(\"%s%s\", clusterProxyService.getProxyPath(freeIpaClusterCrn), FreeIpaClientBuilder.DEFAULT_BASE_PATH);\n     }\n \n-    public FreeIpaClient getFreeIpaClientForStack(Stack stack) throws FreeIpaClientException {\n-        LOGGER.debug(\"Creating FreeIpaClient for stack {}\", stack.getResourceCrn());\n+    private FreeIpaClient getFreeIpaClient(Stack stack, boolean withPing) throws FreeIpaClientException {\n+        stack = stackService.getByIdWithListsInTransaction(stack.getId());\n         Status stackStatus = stack.getStackStatus().getStatus();\n         if (!stackStatus.isFreeIpaUnreachableStatus()) {\n             try {\n                 if (clusterProxyService.isCreateConfigForClusterProxy(stack)) {\n-                    return getFreeIpaClientBuilderForClusterProxy(stack).build();\n+                    return getFreeIpaClientBuilderForClusterProxy(stack).build(withPing);\n                 } else {\n-                    return getFreeIpaClientBuilder(stack).build();\n+                    Exception lastException = new FreeIpaClientException(\"No instances exist in the stack.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk1MTU0Ng=="}, "originalCommit": {"oid": "51eefdf4e7ac980d95ea2b6a4ac7fadde86047fd"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2639, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}