{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODAyMTM3", "number": 9191, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1MDo0M1rOEsjyOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOToxMlrOEskNjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTU5MDk4OnYy", "diffSide": "RIGHT", "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1MDo0M1rOHf3dWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMDozMVrOHf4g0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3NjUzNg==", "bodyText": "could you remove jetbrains annotations?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503176536", "createdAt": "2020-10-12T09:50:43Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.tracing.TracingUtil;\n+import com.squareup.okhttp.Interceptor;\n+import com.squareup.okhttp.Request;\n+import com.squareup.okhttp.Response;\n+\n+import io.opentracing.References;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class CmOkHttpTracingInterceptor implements Interceptor {\n+\n+    private static final String CLOUDERA_MANAGER = \"Cloudera Manager\";\n+\n+    @Inject\n+    private Tracer tracer;\n+\n+    @Inject\n+    private StackTraceBasedCmApiNameExtractor stackTraceBasedCmApiNameExtractor;\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MzgxMQ==", "bodyText": "yes", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503193811", "createdAt": "2020-10-12T10:20:31Z", "author": {"login": "attilapalfi92"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.tracing.TracingUtil;\n+import com.squareup.okhttp.Interceptor;\n+import com.squareup.okhttp.Request;\n+import com.squareup.okhttp.Response;\n+\n+import io.opentracing.References;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class CmOkHttpTracingInterceptor implements Interceptor {\n+\n+    private static final String CLOUDERA_MANAGER = \"Cloudera Manager\";\n+\n+    @Inject\n+    private Tracer tracer;\n+\n+    @Inject\n+    private StackTraceBasedCmApiNameExtractor stackTraceBasedCmApiNameExtractor;\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3NjUzNg=="}, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYxOTkxOnYy", "diffSide": "RIGHT", "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1ODoxNVrOHf3vHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMDo1N1rOHf4hrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTA4NQ==", "bodyText": "why not Arrays.asList(stackTrace)?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503181085", "createdAt": "2020-10-12T09:58:15Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDAyOQ==", "bodyText": "I got various exceptions with that", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503194029", "createdAt": "2020-10-12T10:20:57Z", "author": {"login": "attilapalfi92"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MTA4NQ=="}, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYzNjU1OnYy", "diffSide": "RIGHT", "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMjoyNlrOHf35JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyNDoyOVrOHf4pVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzY1Mw==", "bodyText": "this empty line indicates this method should be splitted into 2 separate at least", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503183653", "createdAt": "2020-10-12T10:02:26Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);\n+        Optional<StackTraceElement> first = list.stream()\n+                .filter(e -> e.getClassName().startsWith(\"com.cloudera.api.swagger\"))\n+                .filter(e -> !e.getClassName().startsWith(\"com.cloudera.api.swagger.client\"))\n+                .findFirst();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTk5MA==", "bodyText": "I will rewrite this to use stack walker", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503195990", "createdAt": "2020-10-12T10:24:29Z", "author": {"login": "attilapalfi92"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {\n+        List<StackTraceElement> list = new ArrayList<>();\n+        Collections.addAll(list, stackTrace);\n+        Optional<StackTraceElement> first = list.stream()\n+                .filter(e -> e.getClassName().startsWith(\"com.cloudera.api.swagger\"))\n+                .filter(e -> !e.getClassName().startsWith(\"com.cloudera.api.swagger.client\"))\n+                .findFirst();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4MzY1Mw=="}, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY0MzU0OnYy", "diffSide": "RIGHT", "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowNDoyM1rOHf39oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyMzozNVrOHf4nhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDgwMQ==", "bodyText": "what's the performance impact of this? We make a lot of call to CM, if we inspect every calls stacktrace, could it increase the load significantly?", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503184801", "createdAt": "2020-10-12T10:04:23Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDU3Nw==", "bodyText": "Let me check. My guess is not much.", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503194577", "createdAt": "2020-10-12T10:21:55Z", "author": {"login": "attilapalfi92"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDgwMQ=="}, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTUyNw==", "bodyText": "I will rewrite to use StackWalker\nhttps://stackoverflow.com/a/49091729", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503195527", "createdAt": "2020-10-12T10:23:35Z", "author": {"login": "attilapalfi92"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/StackTraceBasedCmApiNameExtractor.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class StackTraceBasedCmApiNameExtractor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackTraceBasedCmApiNameExtractor.class);\n+\n+    public Optional<String> getCmApiName(StackTraceElement[] stackTrace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDgwMQ=="}, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY2MDkzOnYy", "diffSide": "RIGHT", "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOToxMlrOHf4Iag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowOToxMlrOHf4Iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NzU2Mg==", "bodyText": "this could bre refactored into a separate method:\n    private Span createSpan(Chain chain) {\n        Request request = chain.request();\n        Optional<String> cmApiNameOptional = stackTraceBasedCmApiNameExtractor.getCmApiName(Thread.currentThread().getStackTrace());\n        String cmApiName = cmApiNameOptional.orElse(request.url().getPath());\n        Span span = tracer.buildSpan(\"CM - [\" + cmApiName + \"] \")\n                .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n                .start();\n        span.setTag(TracingUtil.COMPONENT, CLOUDERA_MANAGER);\n        span.setTag(TracingUtil.URL, request.url().toString());\n        span.setTag(TracingUtil.HTTP_METHOD, request.method());\n        span.setTag(TracingUtil.HEADERS, Json.silent(request.headers().toMultimap()).getValue());\n        return span;\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9191#discussion_r503187562", "createdAt": "2020-10-12T10:09:12Z", "author": {"login": "lacikaaa"}, "path": "client-cm/src/main/java/com/sequenceiq/cloudbreak/cm/client/tracing/CmOkHttpTracingInterceptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.sequenceiq.cloudbreak.cm.client.tracing;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.cloudbreak.tracing.TracingUtil;\n+import com.squareup.okhttp.Interceptor;\n+import com.squareup.okhttp.Request;\n+import com.squareup.okhttp.Response;\n+\n+import io.opentracing.References;\n+import io.opentracing.Scope;\n+import io.opentracing.Span;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class CmOkHttpTracingInterceptor implements Interceptor {\n+\n+    private static final String CLOUDERA_MANAGER = \"Cloudera Manager\";\n+\n+    @Inject\n+    private Tracer tracer;\n+\n+    @Inject\n+    private StackTraceBasedCmApiNameExtractor stackTraceBasedCmApiNameExtractor;\n+\n+    @NotNull\n+    @Override\n+    public Response intercept(@NotNull Chain chain) throws IOException {\n+        Optional<String> cmApiNameOptional = stackTraceBasedCmApiNameExtractor.getCmApiName(Thread.currentThread().getStackTrace());\n+        Request request = chain.request();\n+        String cmApiName = cmApiNameOptional.orElse(request.url().getPath());\n+        Span span = tracer.buildSpan(\"CM - [\" + cmApiName + \"] \")\n+                .addReference(References.FOLLOWS_FROM, tracer.activeSpan() != null ? tracer.activeSpan().context() : null)\n+                .start();\n+        span.setTag(TracingUtil.COMPONENT, CLOUDERA_MANAGER);\n+        span.setTag(TracingUtil.URL, request.url().toString());\n+        span.setTag(TracingUtil.HTTP_METHOD, request.method());\n+        span.setTag(TracingUtil.HEADERS, Json.silent(chain.request().headers().toMultimap()).getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4097c263bf55b5281dd0311ac8209035cabedf1"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2127, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}