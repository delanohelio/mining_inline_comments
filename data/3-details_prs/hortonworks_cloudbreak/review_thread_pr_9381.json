{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NTgyMTY0", "number": 9381, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNjowM1rOE2yBgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1NzoyOVrOE2zfJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODc4MTQ0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerField.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNjowM1rOHvwaJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyNjoyMFrOHvxRhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODI0Nw==", "bodyText": "Do we need it as a separate enum?", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519838247", "createdAt": "2020-11-09T14:06:03Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerField.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+public enum RestLoggerField {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MjQyMQ==", "bodyText": "I thought it is nicer this way. Should I remove it ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519852421", "createdAt": "2020-11-09T14:26:20Z", "author": {"login": "doktoric"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerField.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+public enum RestLoggerField {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODI0Nw=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODc4NTY4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNzowNVrOHvwc0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNzowNVrOHvwc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzODkyOQ==", "bodyText": "Usually, this is private final static Logger LOGGER and usually, we are not using getClass(), but setting it to the class directly", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519838929", "createdAt": "2020-11-09T14:07:05Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODc4Nzk1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNzozOFrOHvweNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowNzozOFrOHvweNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTI4NQ==", "bodyText": "DateFormate is not thread safe! You cannot use it as a member variable in a filter.", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519839285", "createdAt": "2020-11-09T14:07:38Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODc5NTkwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDowOTozNFrOHvwjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMzo1OVrOHvy_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDU0MA==", "bodyText": "2020-11-09 15:04:43,771 [http-nio-9091-exec-1] anonymize:34 INFO  c.s.c.c.a.AnonymizerUtil - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] Anonymize the content with length: 2 2020-11-09 15:04:43,772 [http-nio-9091-exec-1] anonymize:34 INFO  c.s.c.c.a.AnonymizerUtil - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] Anonymize the content with length: 15 2020-11-09 15:04:43,773 [http-nio-9091-exec-1] doFilterInternal:62 DEBUG c.s.c.l.RestLoggerFilter - [type:springLog] [crn:] [name:] [flow:] [requestid:75737203-c895-4fc1-b357-2975722d3b3d] [tenant:] [userCrn:] [environment:] [traceId:] [spanId:] startTime: 14:04:26.385  endTime: 14:04:26.536  duration: 151 ms  httpMethod: GET  path: /cb/health  queryString: null  clientIp: 127.0.0.1  request: {}  responseStatus: 200  response: {\"status\":\"UP\"}  \nUnfortunately, thenant Id traceId and such things were not filled out.", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519840540", "createdAt": "2020-11-09T14:09:34Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDYzMw==", "bodyText": "ok let me reorder the filters mdc must come first", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519880633", "createdAt": "2020-11-09T15:03:59Z", "author": {"login": "doktoric"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDU0MA=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODc5ODM0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMDowOVrOHvwkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1ODo1NlrOHvyw8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA==", "bodyText": "Log should be pushed through anonymization.", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519840900", "createdAt": "2020-11-09T14:10:09Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg1MTA2MA==", "bodyText": "the request and response pairs are already anonymized do we all other field as well ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519851060", "createdAt": "2020-11-09T14:24:31Z", "author": {"login": "doktoric"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3Njg1MQ==", "bodyText": "Oh, I haven't seen it, so I guess then it should be fine.", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519876851", "createdAt": "2020-11-09T14:58:56Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MDkwMA=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODgwNTU4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoxMTo1MFrOHvwo0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNzoyN1rOHwfFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjAwMw==", "bodyText": "Do we want to have this multi-line log approach separated by \\n?  I am not sure how easy to parse and handle from fluentd.\n@oleewere @sodre90", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519842003", "createdAt": "2020-11-09T14:11:50Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzA3Mg==", "bodyText": "on mow environment, the message part is reformatted inside a json, so technically it always using a json parser, does not matter what. is inside that. also from some time - because of this change: d0aad2d - the logs are joined based on some metadata informations not by '\\n' in the end of the docker logs events", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r520603072", "createdAt": "2020-11-10T14:27:27Z", "author": {"login": "oleewere"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MjAwMw=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTAyMTE4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDo1NzoyOVrOHvysug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowNDowOVrOHvzAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTc3MA==", "bodyText": "Logging should be added here, just to ensure that we see if something is wrong...", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519875770", "createdAt": "2020-11-09T14:57:29Z", "author": {"login": "akanto"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);\n+        }\n+        wrappedResponse.copyBodyToResponse();\n+    }\n+\n+    @NotNull\n+    private ContentCachingResponseWrapper getWrappedResponse(HttpServletResponse response) {\n+        return new ContentCachingResponseWrapper(response);\n+    }\n+\n+    @NotNull\n+    private ContentCachingRequestWrapper getWrappedRequest(HttpServletRequest request) {\n+        return new ContentCachingRequestWrapper(request);\n+    }\n+\n+    private static String logContent(byte[] content, String contentEncoding) {\n+        String contentString;\n+        try {\n+            contentString = new String(content, contentEncoding);\n+        } catch (UnsupportedEncodingException e) {\n+            contentString = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4MDc2OA==", "bodyText": "fair point thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9381#discussion_r519880768", "createdAt": "2020-11-09T15:04:09Z", "author": {"login": "doktoric"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/logger/RestLoggerFilter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sequenceiq.cloudbreak.logger;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.util.ContentCachingRequestWrapper;\n+import org.springframework.web.util.ContentCachingResponseWrapper;\n+\n+import com.sequenceiq.cloudbreak.common.anonymizer.AnonymizerUtil;\n+\n+public class RestLoggerFilter extends OncePerRequestFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final DateFormat formatter;\n+\n+    private final boolean restLoggerEnabled;\n+\n+    public RestLoggerFilter(boolean restLoggerEnabled) {\n+        this.restLoggerEnabled = restLoggerEnabled;\n+        this.formatter = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n+        this.formatter.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        Date start = new Date(System.currentTimeMillis());\n+        ContentCachingRequestWrapper wrappedRequest = getWrappedRequest(request);\n+        ContentCachingResponseWrapper wrappedResponse = getWrappedResponse(response);\n+\n+        filterChain.doFilter(wrappedRequest, wrappedResponse);\n+\n+        if (restLoggerEnabled) {\n+            Date end = new Date(System.currentTimeMillis());\n+            String log = new StringBuilder()\n+                    .append(appendLine(RestLoggerField.START_TIME, formatter.format(start)))\n+                    .append(appendLine(RestLoggerField.END_TIME, formatter.format(end)))\n+                    .append(appendLine(RestLoggerField.DURATION, Math.abs(end.getTime() - start.getTime()) + \" ms\"))\n+                    .append(appendLine(RestLoggerField.HTTP_METHOD, request.getMethod()))\n+                    .append(appendLine(RestLoggerField.PATH, request.getRequestURI()))\n+                    .append(appendLine(RestLoggerField.QUERY_STRING, request.getQueryString()))\n+                    .append(appendLine(RestLoggerField.CLIENT_IP, request.getRemoteAddr()))\n+                    .append(appendLine(RestLoggerField.REQUEST,\n+                            logContent(wrappedRequest.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .append(appendLine(RestLoggerField.RESPONSE_STATUS, String.valueOf(response.getStatus())))\n+                    .append(appendLine(RestLoggerField.RESPONSE,\n+                            logContent(wrappedResponse.getContentAsByteArray(), request.getCharacterEncoding())))\n+                    .toString();\n+            logger.debug(log);\n+        }\n+        wrappedResponse.copyBodyToResponse();\n+    }\n+\n+    @NotNull\n+    private ContentCachingResponseWrapper getWrappedResponse(HttpServletResponse response) {\n+        return new ContentCachingResponseWrapper(response);\n+    }\n+\n+    @NotNull\n+    private ContentCachingRequestWrapper getWrappedRequest(HttpServletRequest request) {\n+        return new ContentCachingRequestWrapper(request);\n+    }\n+\n+    private static String logContent(byte[] content, String contentEncoding) {\n+        String contentString;\n+        try {\n+            contentString = new String(content, contentEncoding);\n+        } catch (UnsupportedEncodingException e) {\n+            contentString = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3NTc3MA=="}, "originalCommit": {"oid": "07b4f9ccd76d372021ab531dd6687b82a5e0415c"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3557, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}