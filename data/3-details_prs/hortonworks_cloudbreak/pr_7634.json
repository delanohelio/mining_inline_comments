{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYwMTM1", "number": 7634, "title": "CDPCP-1560. Allow retrieving keytab for different users", "bodyText": "This allows a user to retrieve keytab that belong to other users\nas long as they have the given right. This type of authorization\ncheck doesn't seem to fit the existing authorization annotations\nso I've instead put the logic in an AuthorizationUtil class.", "createdAt": "2020-03-23T21:59:01Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7634", "merged": true, "mergeCommit": {"oid": "a1098dcf45a66f0cb281e0dd4e1cb9a249838759"}, "closed": true, "closedAt": "2020-03-25T08:19:57Z", "author": {"login": "aarman-cloudera"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQnHy8gFqTM3OTkwNjg1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRC6poAFqTM4MDkyNDU5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTA2ODUx", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#pullrequestreview-379906851", "createdAt": "2020-03-23T23:39:16Z", "commit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzozOToxNlrOF6cLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMzo0MDo0MFrOF6cNFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzM5Ng==", "bodyText": "I would rephrase a bit saying that the check checks that the calling actor is either perform an action against themselves or have the right.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823396", "createdAt": "2020-03-23T23:39:16Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzQ4MQ==", "bodyText": "assert the parameters?", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823481", "createdAt": "2020-03-23T23:39:33Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgyMzgyOA==", "bodyText": "I think that checkRight throws if the check fails.", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r396823828", "createdAt": "2020-03-23T23:40:40Z", "author": {"login": "giladwolff"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {\n+        Crn actorCrn = Crn.safeFromString(actorCrnStr);\n+        Crn targetUserCrn = Crn.safeFromString(targetUserCrnStr);\n+        if (actorCrn.equals(targetUserCrn)) {\n+            return;\n+        }\n+        if (!actorCrn.getAccountId().equals(targetUserCrn.getAccountId())) {\n+            throw new AccessDeniedException(\"Unauthorized to run this operation in a different account\");\n+        }\n+        if (!grpcUmsClient.checkRight(GrpcUmsClient.INTERNAL_ACTOR_CRN, actorCrn.toString(), requiredRight, MDCUtils.getRequestId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzUzMDEz", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#pullrequestreview-380353013", "createdAt": "2020-03-24T14:17:42Z", "commit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzUzMDc5", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#pullrequestreview-380353079", "createdAt": "2020-03-24T14:17:47Z", "commit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxNzo0N1rOF6yWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMzo0NlrOF6yozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NjYzNQ==", "bodyText": "we have UmsAuthorizationService class, which has methods for checking rights through UMS, you should move this method to that class and maybe you can also reuse those existing methods", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397186635", "createdAt": "2020-03-24T14:17:47Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/AuthorizationUtil.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.freeipa.kerberosmgmt.v1;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.cloudbreak.auth.altus.GrpcUmsClient;\n+import com.sequenceiq.cloudbreak.logger.MDCUtils;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+@Component\n+public class AuthorizationUtil {\n+\n+    @Inject\n+    private GrpcUmsClient grpcUmsClient;\n+\n+    /**\n+     * An authorization check that verifies that a calling actor can perform an operation against a\n+     * target user. The calling actor only requires the right when the target user is different.\n+     */\n+    public void checkCallerIsSelfOrHasRight(String actorCrnStr, String targetUserCrnStr, String requiredRight) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5MTM3Mg==", "bodyText": "as mentioned, please move your logic to UmsAuthorizationService and use that", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#discussion_r397191372", "createdAt": "2020-03-24T14:23:46Z", "author": {"login": "horadla23"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberosmgmt/v1/KerberosMgmtV1Controller.java", "diffHunk": "@@ -43,6 +45,9 @@\n     @Inject\n     private UserKeytabService userKeytabService;\n \n+    @Inject\n+    private AuthorizationUtil authorizationUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64c8bdae0b6900e4f827c217059926a2d2adcaff", "author": {"user": {"login": "aarman-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/64c8bdae0b6900e4f827c217059926a2d2adcaff", "committedDate": "2020-03-25T07:33:18Z", "message": "CDPCP-1560. Allow retrieving keytab for different users\n\nThis allows a user to retrieve keytab that belong to other users\nas long as they have the given right."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d25c31cde82cae2a04c3847decf71b7bb61209c6", "author": {"user": {"login": "aarman-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d25c31cde82cae2a04c3847decf71b7bb61209c6", "committedDate": "2020-03-23T21:51:14Z", "message": "CDPCP-1560. Allow retrieving keytab for different users\n\nThis allows a user to retrieve keytab that belong to other users\nas long as they have the given right. This type of authorization\ncheck doesn't seem to fit the existing authorization annotations\nso I've instead put the logic in an AuthorizationUtil class."}, "afterCommit": {"oid": "64c8bdae0b6900e4f827c217059926a2d2adcaff", "author": {"user": {"login": "aarman-cloudera", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/64c8bdae0b6900e4f827c217059926a2d2adcaff", "committedDate": "2020-03-25T07:33:18Z", "message": "CDPCP-1560. Allow retrieving keytab for different users\n\nThis allows a user to retrieve keytab that belong to other users\nas long as they have the given right."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTI0NTk5", "url": "https://github.com/hortonworks/cloudbreak/pull/7634#pullrequestreview-380924599", "createdAt": "2020-03-25T08:06:40Z", "commit": {"oid": "64c8bdae0b6900e4f827c217059926a2d2adcaff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2500, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}