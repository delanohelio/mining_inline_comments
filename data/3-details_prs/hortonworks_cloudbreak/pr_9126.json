{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MjA1OTQ1", "number": 9126, "title": "CB-9044 Flow handling race condition fix on flow redistribution", "bodyText": "The issue was caused when a failed node resumes operation but in the\nmeantime another node picked up the same flow.\nThe fix is that the resumed node does not continue progressing the\nflow if the last operation is performed by another node, rather\nremoving the paticular flow from the inmemory store and skipping\nflow continuation.", "createdAt": "2020-10-01T12:05:28Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9126", "merged": true, "mergeCommit": {"oid": "e80960f1fc2e20dd66e6cacff4d1a0acebc55c8b"}, "closed": true, "closedAt": "2020-10-01T14:37:23Z", "author": {"login": "bergerdenes"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOQRDcgFqTUwMDI3ODk4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdORqwqAFqTUwMDM2NDQ5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjc4OTgy", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#pullrequestreview-500278982", "createdAt": "2020-10-01T12:09:17Z", "commit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjowOToxN1rOHbHVKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjowOToxN1rOHbHVKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MzcwNQ==", "bodyText": "are these fields not called at all in the tests ? I guess some verification should be useful", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498193705", "createdAt": "2020-10-01T12:09:17Z", "author": {"login": "doktoric"}, "path": "flow/src/test/java/com/sequenceiq/flow/core/Flow2HandlerTest.java", "diffHunk": "@@ -150,6 +152,12 @@\n     @Mock\n     private SpanContext spanContext;\n \n+    @Mock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjc5ODI4", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#pullrequestreview-500279828", "createdAt": "2020-10-01T12:10:27Z", "commit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoxMDoyN1rOHbHX6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoxMDoyN1rOHbHX6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5NDQxMQ==", "bodyText": "this is the same with cancelFlowWithoutDbUpdate", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498194411", "createdAt": "2020-10-01T12:10:27Z", "author": {"login": "topolyai5"}, "path": "flow/src/main/java/com/sequenceiq/flow/cleanup/InMemoryCleanup.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.flow.cleanup;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.scheduler.PollGroup;\n+import com.sequenceiq.cloudbreak.cloud.store.InMemoryResourceStateStore;\n+import com.sequenceiq.flow.core.FlowRegister;\n+import com.sequenceiq.flow.core.chain.FlowChains;\n+\n+@Component\n+public class InMemoryCleanup {\n+\n+    @Inject\n+    private FlowRegister runningFlows;\n+\n+    @Inject\n+    private FlowChains flowChains;\n+\n+    public void cancelEveryFlowWithoutDbUpdate() {\n+        for (String resourceType : InMemoryResourceStateStore.getResourceTypes()) {\n+            for (Long resourceId : InMemoryResourceStateStore.getAllResourceId(resourceType)) {\n+                InMemoryResourceStateStore.putResource(resourceType, resourceId, PollGroup.CANCELLED);\n+            }\n+        }\n+        for (String id : runningFlows.getRunningFlowIds()) {\n+            String flowChainId = runningFlows.getFlowChainId(id);\n+            if (flowChainId != null) {\n+                flowChains.removeFullFlowChain(flowChainId);\n+            }\n+            runningFlows.remove(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMjg3ODc4", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#pullrequestreview-500287878", "createdAt": "2020-10-01T12:21:14Z", "commit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoyMToxNFrOHbHvkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjoyMToxNFrOHbHvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwMDQ2Ng==", "bodyText": "why don't you send this inside the lamda?", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#discussion_r498200466", "createdAt": "2020-10-01T12:21:14Z", "author": {"login": "topolyai5"}, "path": "flow/src/main/java/com/sequenceiq/flow/core/Flow2Handler.java", "diffHunk": "@@ -184,11 +193,24 @@ private void handleFlowControlEvent(String key, Payload payload, FlowParameters\n         LOGGER.debug(\"flow control event arrived: key: {}, flowid: {}, usercrn: {}, payload: {}\", key, flowId, flowParameters.getFlowTriggerUserCrn(), payload);\n         Flow flow = runningFlows.get(flowId);\n         if (flow != null) {\n+            MutableBoolean isFlowCancelled = new MutableBoolean(false);\n             transactionService.required(() -> {\n                 Optional<FlowLog> lastFlowLog = flowLogService.getLastFlowLog(flow.getFlowId());\n-                lastFlowLog.ifPresent(flowLog -> updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters));\n+                lastFlowLog.ifPresent(flowLog -> {\n+                    String nodeId = nodeConfig.getId();\n+                    if (flowLog.getCloudbreakNodeId() == null || flowLog.getCloudbreakNodeId().equals(nodeId)) {\n+                        updateFlowLogStatus(key, payload, flowChainId, flow, flowLog, flowParameters);\n+                    } else {\n+                        LOGGER.warn(\"Flow {} was handled by another node {}, current node ID is {}, abandoning.\",\n+                                flow.getFlowId(), flowLog.getCloudbreakNodeId(), nodeId);\n+                        inMemoryCleanup.cancelFlowWithoutDbUpdate(flow.getFlowId());\n+                        isFlowCancelled.setTrue();\n+                    }\n+                });\n             });\n-            flow.sendEvent(key, flowParameters.getFlowTriggerUserCrn(), payload, flowParameters.getSpanContext());\n+            if (!isFlowCancelled.booleanValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62043d6dbd674f0e56cb1a3b2d034e3e2fb48352", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/62043d6dbd674f0e56cb1a3b2d034e3e2fb48352", "committedDate": "2020-10-01T13:23:44Z", "message": "CB-9044 Flow handling race condition fix on flow redistribution\n\nThe issue was caused when a failed node resumes operation but in the\nmeantime another node picked up the same flow.\nThe fix is that the resumed node does not continue progressing the\nflow if the last operation is performed by another node, rather\nremoving the particular flow from the in-memory store and skipping\nflow continuation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67b174ba50d2b64e12d219ae04a9c198a2c2caf5", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/67b174ba50d2b64e12d219ae04a9c198a2c2caf5", "committedDate": "2020-10-01T12:04:42Z", "message": "CB-9044 Flow handling race condition fix on flow redistribution\n\nThe issue was caused when a failed node resumes operation but in the\nmeantime another node picked up the same flow.\nThe fix is that the resumed node does not continue progressing the\nflow if the last operation is performed by another node, rather\nremoving the paticular flow from the inmemory store and skipping\nflow continuation."}, "afterCommit": {"oid": "62043d6dbd674f0e56cb1a3b2d034e3e2fb48352", "author": {"user": null}, "url": "https://github.com/hortonworks/cloudbreak/commit/62043d6dbd674f0e56cb1a3b2d034e3e2fb48352", "committedDate": "2020-10-01T13:23:44Z", "message": "CB-9044 Flow handling race condition fix on flow redistribution\n\nThe issue was caused when a failed node resumes operation but in the\nmeantime another node picked up the same flow.\nThe fix is that the resumed node does not continue progressing the\nflow if the last operation is performed by another node, rather\nremoving the particular flow from the in-memory store and skipping\nflow continuation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzY0NDk4", "url": "https://github.com/hortonworks/cloudbreak/pull/9126#pullrequestreview-500364498", "createdAt": "2020-10-01T13:47:16Z", "commit": {"oid": "62043d6dbd674f0e56cb1a3b2d034e3e2fb48352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2269, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}