{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NTI2MDAz", "number": 7312, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoxNDoyMVrODhEHMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyODoxNVrODjBY_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTk2OTc2OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoxNDoyMVrOFrnkFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoxNDoyMVrOFrnkFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4MTMwMA==", "bodyText": "What is the point with this line? If it has a purpose shouldn't it be checked?", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r381281300", "createdAt": "2020-02-19T13:14:21Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentTest.java", "diffHunk": "@@ -157,17 +162,155 @@ public void testWlClusterWithInternalGetRequest(MockedTestContext testContext) {\n                 .validate();\n     }\n \n-    private EnvironmentTestDto checkEnvIsListed(TestContext testContext, EnvironmentTestDto environment, EnvironmentClient environmentClient) {\n+    @Test(dataProvider = TEST_CONTEXT_WITH_MOCK)\n+    @Description(\n+            given = \"there is a running cloudbreak\",\n+            when = \"valid create environment requests are sent to create parent environment first and then a child one\",\n+            then = \"environments should be created and parent environment should be referenced in the child environment\")\n+    public void testCreateParentChildEnvironment(TestContext testContext) {\n+        testContext\n+                .given(CredentialTestDto.class)\n+                .when(credentialTestClient.create())\n+                .given(PARENT_ENVIRONMENT, EnvironmentTestDto.class)\n+                .when(environmentTestClient.create())\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName)\n+                .await(EnvironmentStatus.AVAILABLE)\n+                .given(CHILD_ENVIRONMENT, EnvironmentTestDto.class)\n+                .withParentEnvironmentName(testContext.get(PARENT_ENVIRONMENT).getName())\n+                .when(environmentTestClient.create())\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName)\n+                .validate();\n+    }\n+\n+    @Test(dataProvider = TEST_CONTEXT_WITH_MOCK)\n+    @Description(\n+            given = \"there is an available child environment with a referenced available parent environment\",\n+            when = \"child create request is sent but parent environment is a child environment\",\n+            then = \"a BadRequestException should be returned\")\n+    public void testCreateParentChildEnvironmentWhereParentIsAChild(TestContext testContext) {\n+        String forbiddenKey = resourcePropertyProvider().getName();\n+        testContext\n+                .given(CredentialTestDto.class)\n+                .when(credentialTestClient.create())\n+                .given(PARENT_ENVIRONMENT, EnvironmentTestDto.class)\n+                .when(environmentTestClient.create())\n+                .await(EnvironmentStatus.AVAILABLE)\n+                .given(CHILD_ENVIRONMENT, EnvironmentTestDto.class)\n+                .withParentEnvironmentName(testContext.get(PARENT_ENVIRONMENT).getName())\n+                .when(environmentTestClient.create())\n+                .await(EnvironmentStatus.AVAILABLE)\n+                .when(environmentTestClient.list())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b3873dac159241c6ea5c669bc7ffa52b366a6f"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTk5MTQwOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoyMTowNVrOFrnxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzoyMTowNVrOFrnxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI4NDYzMQ==", "bodyText": "it would make sense to implement this method with RunninParameter argument and let the method gain the environment name from the testcontext\nwithParentEnvironmentName(RunningParameter parentEnvKey) {\ngetRequest().setEnvironmentName(resource.get(parentEnvKey.getKey());\n...\nbut it is just nice to have", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r381284631", "createdAt": "2020-02-19T13:21:05Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/dto/environment/EnvironmentTestDto.java", "diffHunk": "@@ -202,6 +210,16 @@ public EnvironmentTestDto withS3Guard() {\n         return this;\n     }\n \n+    public EnvironmentTestDto withParentEnvironmentName(String parentEnvironmentName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99b3873dac159241c6ea5c669bc7ffa52b366a6f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDI2NDE1OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDozNjoxNlrOFsOTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyOTo1N1rOFsybSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkxNTk5Mg==", "bodyText": "Are these changes necessary? Seems unrelated", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r381915992", "createdAt": "2020-02-20T10:36:16Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/resources/application.yml", "diffHunk": "@@ -83,8 +83,8 @@ integrationtest:\n             - http://s3.amazonaws.com/dev.hortonworks.com/CFM/centos7/2.x/BUILDS/2.0.0.0-22/tars/parcel/NIFIREGISTRY-0.5.0.2.0.0.0-22.jar\n \n   user:\n-    accessKey: Y3JuOmFsdHVzOmlhbTp1cy13ZXN0LTE6Y2xvdWRlcmE6dXNlcjptb2NrdXNlcg==\n-    secretKey: nHkdxgZR0BaNHaSYM3ooS6rIlpV5E+k1CIkr+jFId2g=\n+    accesskey: Y3JuOmFsdHVzOmlhbTp1cy13ZXN0LTE6Y2xvdWRlcmE6dXNlcjptb2NrdXNlcg==\n+    secretkey: nHkdxgZR0BaNHaSYM3ooS6rIlpV5E+k1CIkr+jFId2g=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40026131a865d88b97167b786f54cb4be659daa2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNzg1MQ==", "bodyText": "They are unrelated, but when I mistakenly tried to run the tests on AWS, I found this typo - the tests would not start because these properties are referenced lowercase in the code", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r382507851", "createdAt": "2020-02-21T10:29:57Z", "author": {"login": "Bajzathd"}, "path": "integration-test/src/main/resources/application.yml", "diffHunk": "@@ -83,8 +83,8 @@ integrationtest:\n             - http://s3.amazonaws.com/dev.hortonworks.com/CFM/centos7/2.x/BUILDS/2.0.0.0-22/tars/parcel/NIFIREGISTRY-0.5.0.2.0.0.0-22.jar\n \n   user:\n-    accessKey: Y3JuOmFsdHVzOmlhbTp1cy13ZXN0LTE6Y2xvdWRlcmE6dXNlcjptb2NrdXNlcg==\n-    secretKey: nHkdxgZR0BaNHaSYM3ooS6rIlpV5E+k1CIkr+jFId2g=\n+    accesskey: Y3JuOmFsdHVzOmlhbTp1cy13ZXN0LTE6Y2xvdWRlcmE6dXNlcjptb2NrdXNlcg==\n+    secretkey: nHkdxgZR0BaNHaSYM3ooS6rIlpV5E+k1CIkr+jFId2g=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkxNTk5Mg=="}, "originalCommit": {"oid": "40026131a865d88b97167b786f54cb4be659daa2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDI2OTc4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/FreeIpaAttachChildEnvironmentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDozNzo1NVrOFsOWwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDozNzo1NVrOFsOWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkxNjg2NQ==", "bodyText": "As I recall we planned to check freeipa mock calls as well, don't we?", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r381916865", "createdAt": "2020-02-20T10:37:55Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/FreeIpaAttachChildEnvironmentTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import javax.inject.Inject;\n+\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.environment.api.v1.environment.model.response.EnvironmentStatus;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.it.cloudbreak.assertion.freeipa.FreeIpaChildEnvironmentAssertion;\n+import com.sequenceiq.it.cloudbreak.client.CredentialTestClient;\n+import com.sequenceiq.it.cloudbreak.client.EnvironmentTestClient;\n+import com.sequenceiq.it.cloudbreak.client.FreeIPATestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.freeipa.FreeIPAChildEnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.freeipa.FreeIPATestDto;\n+import com.sequenceiq.it.cloudbreak.mock.ITResponse;\n+import com.sequenceiq.it.cloudbreak.mock.freeipa.FreeIpaRouteHandler;\n+import com.sequenceiq.it.cloudbreak.spark.DynamicRouteStack;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractIntegrationTest;\n+\n+public class FreeIpaAttachChildEnvironmentTest extends AbstractIntegrationTest {\n+\n+    @Inject\n+    private FreeIPATestClient freeIPATestClient;\n+\n+    @Inject\n+    private CredentialTestClient credentialTestClient;\n+\n+    @Inject\n+    private EnvironmentTestClient environmentTestClient;\n+\n+    @Inject\n+    private FreeIpaRouteHandler freeIpaRouteHandler;\n+\n+    protected void setupTest(TestContext testContext) {\n+        createDefaultUser(testContext);\n+        createDefaultCredential(testContext);\n+        createDefaultEnvironmentWithNetwork(testContext);\n+        createDefaultImageCatalog(testContext);\n+        initializeDefaultBlueprints(testContext);\n+    }\n+\n+    @Test(dataProvider = TEST_CONTEXT_WITH_MOCK)\n+    @Description(\n+            given = \"environment is present\",\n+            when = \"calling a freeipa attach child environment\",\n+            then = \"freeipa should be available with kerberos and ldap config\")\n+    public void testAttachChildEnvironment(MockedTestContext testContext) {\n+        DynamicRouteStack dynamicRouteStack = testContext.getModel().getClouderaManagerMock().getDynamicRouteStack();\n+        dynamicRouteStack.post(ITResponse.FREEIPA_ROOT + \"/session/login_password\", (request, response) -> {\n+            response.cookie(\"ipa_session\", \"dummysession\");\n+            return \"\";\n+        });\n+        dynamicRouteStack.post(ITResponse.FREEIPA_ROOT + \"/session/json\", freeIpaRouteHandler);\n+        testContext\n+                .given(FreeIPATestDto.class).withCatalog(testContext.getImageCatalogMockServerSetup().getFreeIpaImageCatalogUrl())\n+                .when(freeIPATestClient.create())\n+                .await(Status.AVAILABLE)\n+                .given(FreeIPAChildEnvironmentTestDto.CHILD_ENVIRONMENT_KEY, EnvironmentTestDto.class).withCreateFreeIpa(false)\n+                .when(environmentTestClient.create())\n+                .await(EnvironmentStatus.AVAILABLE)\n+                .given(FreeIPAChildEnvironmentTestDto.class)\n+                .when(freeIPATestClient.attachChildEnvironment())\n+                .then(FreeIpaChildEnvironmentAssertion.validate())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40026131a865d88b97167b786f54cb4be659daa2"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDQ5NTMzOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentChildTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyODoxNVrOFumG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoyODoxNVrOFumG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwMzE3OQ==", "bodyText": "Although it is working, this is not the way what we use to follow in our mock tests. We are using a httpmock (for FreeIPA as well), and we are use to seek the http mock calls for validation. You can see examples in DistroXClusterCreationTest", "url": "https://github.com/hortonworks/cloudbreak/pull/7312#discussion_r384403179", "createdAt": "2020-02-26T10:28:15Z", "author": {"login": "afarsang"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/EnvironmentChildTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import static java.util.Objects.isNull;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+import java.util.Collection;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.BadRequestException;\n+\n+import org.mockito.Mockito;\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.environment.api.v1.environment.model.response.EnvironmentStatus;\n+import com.sequenceiq.environment.api.v1.environment.model.response.SimpleEnvironmentResponse;\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n+import com.sequenceiq.it.cloudbreak.client.EnvironmentTestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n+import com.sequenceiq.it.cloudbreak.mock.freeipa.AbstractFreeIpaResponse;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractIntegrationTest;\n+\n+public class EnvironmentChildTest extends AbstractIntegrationTest {\n+\n+    private static final String PARENT_ENVIRONMENT = \"parent\";\n+\n+    private static final String CHILD_ENVIRONMENT = \"child\";\n+\n+    @Inject\n+    private EnvironmentTestClient environmentTestClient;\n+\n+    @Override\n+    protected void setupTest(TestContext testContext) {\n+        createDefaultUser(testContext);\n+        initializeDefaultBlueprints(testContext);\n+        createDefaultCredential(testContext);\n+        createDefaultEnvironmentWithNetwork(testContext);\n+        createDefaultFreeIPA(testContext);\n+    }\n+\n+    @Test(dataProvider = TEST_CONTEXT_WITH_MOCK)\n+    @Description(\n+            given = \"there is an available parent environment\",\n+            when = \"valid create child environment request is sent\",\n+            then = \"environment should be created and parent environment should be referenced in the child environment\")\n+    public void testCreateChildEnvironment(MockedTestContext testContext) {\n+        AbstractFreeIpaResponse<?> dnsZoneAddResponse = Mockito.mock(AbstractFreeIpaResponse.class);\n+        getFreeIpaRouteHandler().updateResponse(\"dnszone_add\", dnsZoneAddResponse);\n+\n+        testContext\n+                .given(EnvironmentTestDto.class)\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName)\n+                .given(CHILD_ENVIRONMENT, EnvironmentTestDto.class)\n+                    .withParentEnvironment()\n+                .when(environmentTestClient.create())\n+                .await(EnvironmentStatus.AVAILABLE)\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName)\n+                .then((testContext1, testDto, client) -> {\n+                    Mockito.verify(dnsZoneAddResponse).handle(any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "778fdacffd5592740c4e27350d9c245b4fe2513f"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2857, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}