{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mzc1ODI4", "number": 7886, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0MjoyMVrOD1sCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1ODoxNlrOD1scPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjIyNTMxOnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/termination/action/RedbeamsTerminationActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0MjoyMlrOGLPeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0MjoyMlrOGLPeKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MTAwMw==", "bodyText": "You should call the unschedule at the beginning of the termination. As I see, the termination statuses are not the part of the getAutoSyncStatuses()", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414441003", "createdAt": "2020-04-24T09:42:22Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/termination/action/RedbeamsTerminationActions.java", "diffHunk": "@@ -99,6 +103,8 @@ protected Selectable createRequest(RedbeamsContext context) {\n                 // through the termination\n                 metricService.incrementMetricCounter(MetricType.DB_TERMINATION_FINISHED, context.getDBStack());\n                 dbStackService.delete(context.getDBStack());\n+                dbStackJobService.unschedule(context.getDBStack());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjI2NzM0OnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1MjozMVrOGLP22w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDowMjo0MVrOGLZNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NzMyMw==", "bodyText": "if any error is occurring at External DB status lookup failed, you will get an NPE", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414447323", "createdAt": "2020-04-24T09:52:31Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYwMDY0NQ==", "bodyText": "Good catch", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414600645", "createdAt": "2020-04-24T14:02:41Z", "author": {"login": "pkedvessy"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NzMyMw=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjI3NjEyOnYy", "diffSide": "RIGHT", "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1NDozNVrOGLP8Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxOTowNzoyNVrOGLlb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw==", "bodyText": "please use junit from jupiter package", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414448647", "createdAt": "2020-04-24T09:54:35Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5MTI1NA==", "bodyText": "This module is using Junit 4", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414591254", "createdAt": "2020-04-24T13:50:18Z", "author": {"login": "pkedvessy"}, "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNjQzNA==", "bodyText": "I've checked and the jupiter api is added to the module", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414636434", "createdAt": "2020-04-24T14:50:31Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgwMDg1Nw==", "bodyText": "Ahh, I see, this module contains a mixture of Junit 4 and 5 tests.", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414800857", "createdAt": "2020-04-24T19:07:25Z", "author": {"login": "pkedvessy"}, "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjI5MjQ0OnYy", "diffSide": "RIGHT", "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1ODoxNlrOGLQFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzo1Njo0M1rOGMVzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA==", "bodyText": "is STARTED  means AVAILABLE? What is the difference between STARTED and AVAILABLE?", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414451058", "createdAt": "2020-04-24T09:58:16Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU5MjA5Mg==", "bodyText": "Yes, STARTED means AVAILABLE but in a different context. As far as I can see AVAILABLE is used by legacy reasons.", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414592092", "createdAt": "2020-04-24T13:51:23Z", "author": {"login": "pkedvessy"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNzU2OA==", "bodyText": "if in STARTED state, the ui show the db as available?", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414637568", "createdAt": "2020-04-24T14:51:57Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MTIyNA==", "bodyText": "Where do we display the status on the UI?\nAnyway, the status in the DB is AVAILABLE both after start and create, but after start the detaileddbstackstatus is STARTED.", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414861224", "createdAt": "2020-04-24T21:02:09Z", "author": {"login": "pkedvessy"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU5MzI0NQ==", "bodyText": "Oh, I see.", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r415593245", "createdAt": "2020-04-27T07:56:43Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA=="}, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}