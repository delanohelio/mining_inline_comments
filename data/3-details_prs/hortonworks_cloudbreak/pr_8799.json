{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDE5NDg3", "number": 8799, "title": "CB-7975 - [ASRG] Save and manage managed images and storage accounts \u2026", "bodyText": "\u2026if CB created RG\nCurrently, we do not delete the storage account and managed image components in single RG use-cases.\nThis PR does this:\n\nsave storage accounts and managed images as Resources, too\nif they got created via an SDX or FreeIPA creation then they get deleted by deleting them\notherwise, we do not touch them", "createdAt": "2020-08-12T21:32:58Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8799", "merged": true, "mergeCommit": {"oid": "779ab88620daa5a0c30fc8a0f527e2cb5be04fc1"}, "closed": true, "closedAt": "2020-08-14T09:54:08Z", "author": {"login": "pdarvasi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-aKDdABqjM2NTA2MjczOTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-xXHZgFqTQ2NzQ0MjczMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8794ed300a624f16793f0009e9955cc2039c6ffa", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8794ed300a624f16793f0009e9955cc2039c6ffa", "committedDate": "2020-08-12T21:31:47Z", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG"}, "afterCommit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "committedDate": "2020-08-13T06:35:35Z", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NjQ2NzY4", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#pullrequestreview-466646768", "createdAt": "2020-08-13T10:43:50Z", "commit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDo0Mzo1MFrOHAGGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0OTo1NVrOHAKBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg2MTk4OA==", "bodyText": "I would rename methods that return a CustomImage object to getCustomImage", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469861988", "createdAt": "2020-08-13T10:43:50Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java", "diffHunk": "@@ -75,11 +76,11 @@ public ArmAttachedStorageOption getArmAttachedStorageOption(Map<String, String>\n         return ArmAttachedStorageOption.valueOf(attachedStorageOption);\n     }\n \n-    public String getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack) {\n+    public AzureImage getCustomImageId(AzureClient client, AuthenticatedContext ac, CloudStack stack) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMzcwOA==", "bodyText": "I would put this into a finally clause. Since the storage account has more than 1 resource it could happen that the storage account is created but for some reason the blobService not, and an exception is thrown.", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469923708", "createdAt": "2020-08-13T12:45:38Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountService.java", "diffHunk": "@@ -40,13 +45,22 @@\n     @Inject\n     private AzureStorage armStorage;\n \n+    @Inject\n+    private AzureCloudResourceService azureCloudResourceService;\n+\n+    @Inject\n+    private ResourceNotifier resourceNotifier;\n+\n     public void createStorageAccount(AuthenticatedContext ac, AzureClient client, String resourceGroup, String storageName, String region, CloudStack stack) {\n         StorageAccount storageAccount = client.getStorageAccountByGroup(resourceGroup, storageName);\n         if (storageAccount == null) {\n             try {\n                 LOGGER.info(\"Creating storage account: {}\", storageName);\n-                armStorage.createStorage(client, storageName, LOCALLY_REDUNDANT, resourceGroup, region, isEncryptionNeeded(stack), stack.getTags());\n+                StorageAccount storage = armStorage.createStorage(client, storageName, LOCALLY_REDUNDANT, resourceGroup, region, isEncryptionNeeded(stack),\n+                        stack.getTags());\n                 pollStorageAccountCreation(ac, new StorageAccountCheckerContext(client, resourceGroup, storageName));\n+                CloudResource cloudResource = azureCloudResourceService.buildCloudResource(storage.name(), storage.id(), ResourceType.AZURE_STORAGE);\n+                azureCloudResourceService.saveCloudResources(resourceNotifier, ac.getCloudContext(), List.of(cloudResource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNjI2MQ==", "bodyText": "I am not convinced this is the right place. What if a datahub is being terminated, will it delete the images and the storage account? What about concurrent termination of cluster A and provisioning of cluster B? I might be missing something, sorry for that.", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r469926261", "createdAt": "2020-08-13T12:49:55Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -95,18 +95,31 @@\n         deleteVolumeSets(ac, stack, resourcesToRemove, networkResources, resourceGroupName);\n \n         if (deleteWholeDeployment) {\n+            // deleting availability sets\n             List<String> availabiltySetNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n             azureUtils.deleteAvailabilitySets(client, resourceGroupName, availabiltySetNames);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n \n+            // deleting networks\n             List<String> networkIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_NETWORK);\n             azureUtils.deleteNetworks(client, networkIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_NETWORK);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SUBNET);\n \n+            // deleting security groups\n             List<String> securityGroupIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n             azureUtils.deleteSecurityGroups(client, securityGroupIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n+\n+            // deleting images\n+            List<String> imageIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_MANAGED_IMAGE);\n+            azureUtils.deleteImages(client, imageIds);\n+            deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_MANAGED_IMAGE);\n+\n+            // deleting storage account\n+            List<String> accountIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_STORAGE);\n+            azureUtils.deleteStorageAccounts(client, accountIds);\n+            deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_STORAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzkzMTUx", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#pullrequestreview-466793151", "createdAt": "2020-08-13T14:04:08Z", "commit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODUyODg3", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#pullrequestreview-466852887", "createdAt": "2020-08-13T15:05:58Z", "commit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODY1NjA5", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#pullrequestreview-466865609", "createdAt": "2020-08-13T15:19:20Z", "commit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/dea73e51b6aca41bcf22b563a99b685bf1d596dd", "committedDate": "2020-08-14T07:07:50Z", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d87bc2d37805a7aaeb8a11d3d292aa86415570c4", "committedDate": "2020-08-13T06:35:35Z", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG"}, "afterCommit": {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/dea73e51b6aca41bcf22b563a99b685bf1d596dd", "committedDate": "2020-08-14T07:07:50Z", "message": "CB-7975 - [ASRG] Save and manage managed images and storage accounts if CB created RG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NDQyNzMy", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#pullrequestreview-467442732", "createdAt": "2020-08-14T09:38:10Z", "commit": {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTozODoxMFrOHAuSWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTozOTo1NFrOHAuVjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMDQxMA==", "bodyText": "This is create, not delete - can go to follow-up.", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470520410", "createdAt": "2020-08-14T09:38:10Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorage.java", "diffHunk": "@@ -108,14 +110,15 @@ public String getAttachedDiskStorageName(ArmAttachedStorageOption armAttachedSto\n         return buildStorageName(armAttachedStorageOption, acv, vmId, cloudContext, storageType);\n     }\n \n-    public void createStorage(AzureClient client, String osStorageName, AzureDiskType storageType, String storageGroup, String region, Boolean encrypted,\n-            Map<String, String> tags)\n+    public StorageAccount createStorage(AzureClient client, String osStorageName, AzureDiskType storageType, String storageGroup,\n+            String region, Boolean encrypted, Map<String, String> tags)\n             throws CloudException {\n         if (!storageAccountExist(client, osStorageName)) {\n             StorageAccountParameters storageAccountParameters = new StorageAccountParameters(\n                     storageGroup, osStorageName, region, skuTypeResolver.resolveFromAzureDiskType(storageType), encrypted, tags);\n-            azureStorageAccountBuilderService.buildStorageAccount(client, storageAccountParameters);\n+            return azureStorageAccountBuilderService.buildStorageAccount(client, storageAccountParameters);\n         }\n+        throw new CloudbreakServiceException(String.format(\"Trying to delete non-existing storage account %s\", osStorageName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMTIyOQ==", "bodyText": "I would put sections labelled with comments into separate methods with descriptive names. Can go into follow-up.", "url": "https://github.com/hortonworks/cloudbreak/pull/8799#discussion_r470521229", "createdAt": "2020-08-14T09:39:54Z", "author": {"login": "gergopapi2"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureTerminationHelperService.java", "diffHunk": "@@ -95,18 +95,31 @@\n         deleteVolumeSets(ac, stack, resourcesToRemove, networkResources, resourceGroupName);\n \n         if (deleteWholeDeployment) {\n+            // deleting availability sets\n             List<String> availabiltySetNames = getResourceNamesByResourceType(resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n             azureUtils.deleteAvailabilitySets(client, resourceGroupName, availabiltySetNames);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_AVAILABILITY_SET);\n \n+            // deleting networks\n             List<String> networkIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_NETWORK);\n             azureUtils.deleteNetworks(client, networkIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_NETWORK);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SUBNET);\n \n+            // deleting security groups\n             List<String> securityGroupIds = getResourceIdsByResourceType(resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n             azureUtils.deleteSecurityGroups(client, securityGroupIds);\n             deleteCloudResourceList(ac, resourcesToRemove, ResourceType.AZURE_SECURITY_GROUP);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea73e51b6aca41bcf22b563a99b685bf1d596dd"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2459, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}