{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTc1ODA5", "number": 7325, "title": "CB-4502 Consolidate DistroX/SDX/FreeIPA/RDS tagging", "bodyText": "", "createdAt": "2020-02-19T13:40:29Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7325", "merged": true, "mergeCommit": {"oid": "1883bffa5318c8903fe7112993e1c6d14a8f0e40"}, "closed": true, "closedAt": "2020-02-24T09:29:14Z", "author": {"login": "doktoric"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGd6imgBqjMwNjAxNDczNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHZI5nAFqTM2MzIxODM0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4e725fa20a8f76cefa15e690567bf17fc334fc4", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f4e725fa20a8f76cefa15e690567bf17fc334fc4", "committedDate": "2020-02-20T17:33:06Z", "message": "CB-5634 not to allow tags with key that is presented as account tag"}, "afterCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/aa444218c42bd360a7e267467367d05a48f92616", "committedDate": "2020-02-21T11:20:08Z", "message": "CB-4502 moved to the right package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTQ2NjQ4", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#pullrequestreview-362546648", "createdAt": "2020-02-21T10:50:19Z", "commit": {"oid": "f4e725fa20a8f76cefa15e690567bf17fc334fc4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo1MDoxOVrOFsy_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzowMToxMVrOFs2JZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNzEwNQ==", "bodyText": "is the com.sequenceiq.cloudbreak best package? what was the problem with template package? it is moved to the template core module", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382517105", "createdAt": "2020-02-21T10:50:19Z", "author": {"login": "topolyai5"}, "path": "common-handlebar/src/main/java/com/sequenceiq/cloudbreak/EqHelper.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package com.sequenceiq.cloudbreak.template;\n+package com.sequenceiq.cloudbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e725fa20a8f76cefa15e690567bf17fc334fc4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NTg3MA==", "bodyText": "please add aTVF to exception", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382555870", "createdAt": "2020-02-21T12:29:08Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/StackService.java", "diffHunk": "@@ -537,11 +543,15 @@ private void setDefaultTags(Stack stack) {\n                     .withResourceCrn(stack.getResourceCrn())\n                     .withIsInternalTenant(internalTenant)\n                     .withUserName(stack.getCreator().getUserName())\n+                    .withAccountTags(accountTagClientService.list())\n+                    .withUserDefinedTags(userDefinedTags)\n                     .build();\n \n             Map<String, String> defaultTags = stackTag.getDefaultTags();\n             defaultTags.putAll(costTagging.prepareDefaultTags(request));\n-            stack.setTags(new Json(new StackTags(stackTag.getUserDefinedTags(), stackTag.getApplicationTags(), defaultTags)));\n+            stack.setTags(new Json(new StackTags(userDefinedTags, stackTag.getApplicationTags(), defaultTags)));\n+        } catch (AccountTagValidationFailed aTVF) {\n+            throw new BadRequestException(aTVF.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1OTI5NQ==", "bodyText": "Please add log message and e to the new exception", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382559295", "createdAt": "2020-02-21T12:38:08Z", "author": {"login": "topolyai5"}, "path": "environment/src/main/java/com/sequenceiq/environment/tags/service/AccountTagService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.environment.tags.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.Crn;\n+import com.sequenceiq.environment.tags.domain.AccountTag;\n+import com.sequenceiq.environment.tags.repository.AccountTagRepository;\n+\n+@Service\n+public class AccountTagService {\n+\n+    private final AccountTagRepository accountTagRepository;\n+\n+    public AccountTagService(AccountTagRepository accountTagRepository) {\n+        this.accountTagRepository = accountTagRepository;\n+    }\n+\n+    public Set<AccountTag> get(String accountId) {\n+        return accountTagRepository.findAllInAccount(accountId);\n+    }\n+\n+    public List<AccountTag> create(List<AccountTag> accountTags, String accountId) {\n+        try {\n+            accountTagRepository.arhiveAll(accountId);\n+\n+            List<AccountTag> result = new ArrayList<>();\n+            for (AccountTag accountTag : accountTags) {\n+                accountTag.setAccountId(accountId);\n+                accountTag.setArchived(false);\n+                accountTag.setResourceCrn(createCRN(accountId));\n+                result.add(accountTagRepository.save(accountTag));\n+            }\n+            return result;\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AccessDeniedException(\"Access denied\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MjkwMA==", "bodyText": "@lnardai refactored the junit4/5. Could you please discuss with him about this?", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382562900", "createdAt": "2020-02-21T12:47:02Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+apply plugin: 'java'\n+\n+repositories {\n+    mavenLocal()\n+    maven { url = \"$repoUrl\" }\n+    mavenCentral()\n+}\n+\n+jar {\n+    baseName = 'template-manager-tag'\n+}\n+\n+dependencies {\n+    compile project(':common')\n+    compile project(':common-handlebar')\n+\n+    testCompile (group: 'junit', name: 'junit', version: junitVersion) {\n+        exclude group: 'org.hamcrest'\n+    }\n+    testCompile (group: 'org.mockito',             name: 'mockito-core',          version: mockitoVersion) {\n+        exclude group: 'org.hamcrest'\n+    }\n+\n+    testCompile group: 'org.springframework.boot',  name: 'spring-boot-starter',            version: springBootVersion\n+    testCompile group: 'org.springframework.boot',  name: 'spring-boot-starter-test',       version: springBootVersion\n+    testCompile group: 'org.junit.jupiter',         name: 'junit-jupiter-api',              version: junitJupiterVersion\n+    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'\n+    testCompile 'net.javacrumbs.json-unit:json-unit:1.28.2'\n+\n+    testImplementation group: \"org.mockito\",               name: \"mockito-core\",                             version: mockitoVersion\n+    testImplementation group: \"org.mockito\",               name: \"mockito-junit-jupiter\",                    version: mockitoVersion\n+    testImplementation group: 'org.junit.jupiter',         name: 'junit-jupiter-params',                     version: junitJupiterVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzIxOQ==", "bodyText": "maybe the e would be good in the log message", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382563219", "createdAt": "2020-02-21T12:47:58Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/CentralTagUpdater.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.io.IOException;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class CentralTagUpdater {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CentralTagUpdater.class);\n+\n+    @Inject\n+    private TagTemplateProcessor tagTemplateProcessor;\n+\n+    public String getTagText(TagPreparationObject model, String tagText) {\n+        try {\n+            tagText = updateTagConfiguration(model, tagText);\n+        } catch (IOException e) {\n+            String message = String.format(\"Unable to update tag with default properties which was: %s\", tagText);\n+            LOGGER.warn(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2MzU5Ng==", "bodyText": "if you add a comment, you can separate in a method", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382563596", "createdAt": "2020-02-21T12:48:48Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/DefaultCostTaggingService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+\n+import com.google.common.base.Strings;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+\n+@Service\n+public class DefaultCostTaggingService implements CostTagging {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCostTaggingService.class);\n+\n+    @Inject\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @Override\n+    public Map<String, String> prepareDefaultTags(CDPTagGenerationRequest request) {\n+        LOGGER.debug(\"About to prepare default tag(s)...\");\n+        Map<String, String> result = new HashMap<>();\n+        String platform = request.getPlatform();\n+        validateResourceTagsNotContainTheSameTag(request.getUserDefinedTags(), request.getAccountTags());\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.ENVIRONMENT_CRN, request.getEnvironmentCrn(), platform);\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.CREATOR_CRN, request.getCreatorCrn(), platform);\n+        addCDPCrnIfPresent(result, DefaultApplicationTag.RESOURCE_CRN, request.getResourceCrn(), platform);\n+\n+        // Generate Account Tags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2NzA2Nw==", "bodyText": "if you use Clock, you can use this method from there (and the other places as well)", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382567067", "createdAt": "2020-02-21T12:57:10Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/main/java/com/sequenceiq/cloudbreak/tag/TagTemplateProcessor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.cloudbreak.tag;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Template;\n+import com.sequenceiq.cloudbreak.handlebar.HandlebarTemplate;\n+import com.sequenceiq.cloudbreak.handlebar.HandlebarUtils;\n+import com.sequenceiq.cloudbreak.common.json.JsonUtil;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+\n+@Component\n+public class TagTemplateProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TagTemplateProcessor.class);\n+\n+    private final Handlebars handlebars = HandlebarUtils.handlebars();\n+\n+    @Inject\n+    private Clock clock;\n+\n+    public String process(String sourceTemplate, TagPreparationObject model) throws IOException {\n+        long started = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODM4Mg==", "bodyText": "hm, copy/paste pattern for test name and tested method?", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568382", "createdAt": "2020-02-21T13:00:16Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n+        underTest.prepareDefaultTags(tagRequest(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODc0Mw==", "bodyText": "what are you testing here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568743", "createdAt": "2020-02-21T13:00:57Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU2ODgwNw==", "bodyText": "what are you testing here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#discussion_r382568807", "createdAt": "2020-02-21T13:01:11Z", "author": {"login": "topolyai5"}, "path": "template-manager-tag/src/test/java/com/sequenceiq/cloudbreak/DefaultCostTaggingServiceAccountTagValidationTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.sequenceiq.cloudbreak;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import com.sequenceiq.cloudbreak.common.mappable.CloudPlatform;\n+import com.sequenceiq.cloudbreak.tag.AccountTagValidationFailed;\n+import com.sequenceiq.cloudbreak.tag.CentralTagUpdater;\n+import com.sequenceiq.cloudbreak.tag.DefaultCostTaggingService;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagGenerationRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class DefaultCostTaggingServiceAccountTagValidationTest {\n+\n+    @Mock\n+    private CentralTagUpdater centralTagUpdater;\n+\n+    @InjectMocks\n+    private DefaultCostTaggingService underTest;\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsNull() throws AccountTagValidationFailed {\n+        underTest.prepareDefaultTags(tagRequest(null));\n+    }\n+\n+    @Test\n+    void getWithResourceTagValidationWhenUserDefinedResourceTagsIsEmpty() throws AccountTagValidationFailed {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa444218c42bd360a7e267467367d05a48f92616"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b8bdd6444f85ef58a54f85ec5db397ea016039", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/43b8bdd6444f85ef58a54f85ec5db397ea016039", "committedDate": "2020-02-24T07:56:11Z", "message": "CB-4502 Consolidate DistroX/SDX/FreeIPA/RDS tagging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad00aef24e5be9baa197b00a8bfa96e142edfa22", "author": {"user": {"login": "biharitomi", "name": "Tamas Bihari"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ad00aef24e5be9baa197b00a8bfa96e142edfa22", "committedDate": "2020-02-24T07:56:11Z", "message": "CB-5634 not to allow tags with key that is presented as account tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dbc733b8c7ffc88ab1e304f46a40205a18b786c", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5dbc733b8c7ffc88ab1e304f46a40205a18b786c", "committedDate": "2020-02-24T07:56:11Z", "message": "CB-4502 moved to the right package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd02cc815c74155e27fcfe76bd777f14b82a6695", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fd02cc815c74155e27fcfe76bd777f14b82a6695", "committedDate": "2020-02-24T07:56:11Z", "message": "CB-4502 fixed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f04883eb8403c1792914af5062f99e13aa6aaa6", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1f04883eb8403c1792914af5062f99e13aa6aaa6", "committedDate": "2020-02-24T07:56:11Z", "message": "CB-4502 fixed review comments n2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "committedDate": "2020-02-24T08:14:49Z", "message": "CB-4502 fixed review comments n3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec4078c4411d1aa257d70c1e766e390da16bc61b", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ec4078c4411d1aa257d70c1e766e390da16bc61b", "committedDate": "2020-02-21T13:45:42Z", "message": "CB-4502 fixed review comments n2"}, "afterCommit": {"oid": "ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777", "committedDate": "2020-02-24T08:14:49Z", "message": "CB-4502 fixed review comments n3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjE4MzQ5", "url": "https://github.com/hortonworks/cloudbreak/pull/7325#pullrequestreview-363218349", "createdAt": "2020-02-24T08:20:54Z", "commit": {"oid": "ee1ebf0b9ef978d7224dd3c08dc551a3e38ba777"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1898, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}