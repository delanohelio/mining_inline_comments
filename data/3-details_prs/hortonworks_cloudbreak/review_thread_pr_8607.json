{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MzU5Nzk1", "number": 8607, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOEQj7Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOEQj7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODAxMjk0OnYy", "diffSide": "RIGHT", "path": "environment/src/test/java/com/sequenceiq/environment/credential/service/CredentialDeleteServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOG0x3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOG0x3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjA4Mw==", "bodyText": "change the order of deletion so exception should occur first, then delete after", "url": "https://github.com/hortonworks/cloudbreak/pull/8607#discussion_r457996083", "createdAt": "2020-07-21T10:27:55Z", "author": {"login": "bergerdenes"}, "path": "environment/src/test/java/com/sequenceiq/environment/credential/service/CredentialDeleteServiceTest.java", "diffHunk": "@@ -98,27 +95,40 @@ void testMultipleIfAllTheCredentialsAreExistsAndAbleToArchiveThenExpectedCredent\n     @Test\n     void testMultipleIfOneOfTheCredentialsIsNotExistsThenNotFoundExceptionComes() {\n         when(credentialService.findByNameAndAccountId(anyString(), anyString(), any(Set.class), any())).thenReturn(Optional.empty());\n-        assertThrows(NotFoundException.class, () -> underTest.deleteMultiple(Set.of(\"someCredNameWhichDoesNotExists\"), ACCOUNT_ID, ENVIRONMENT));\n+        Set<Credential> result = underTest.deleteMultiple(Set.of(\"someCredNameWhichDoesNotExists\"), ACCOUNT_ID, ENVIRONMENT);\n \n         verify(credentialService, times(1)).findByNameAndAccountId(anyString(), anyString(), anyCollection(), any());\n         verify(environmentViewService, times(0)).findAllByCredentialId(anyLong());\n         verify(credentialService, times(0)).save(any());\n+        assertTrue(result.isEmpty());\n     }\n \n     @Test\n-    void testMultipleWhenEnvironmentStillUsesTheCredentialThenBadRequestShouldCome() {\n-        String name = \"something\";\n-        Credential cred = createCredentialWithName(name);\n-        cred.setId(1L);\n-        when(credentialService.findByNameAndAccountId(eq(name), eq(ACCOUNT_ID), any(Set.class), any())).thenReturn(Optional.of(cred));\n-        when(environmentViewService.findAllByCredentialId(cred.getId())).thenReturn(Set.of(new EnvironmentView()));\n+    void testMultipleWhenEnvironmentStillUsesTheCredential2ThenBadRequestShouldComeOnSecondButTheFirstDeletionSuccess() {\n+        doNothing().when(grpcUmsClient).notifyResourceDeleted(any(), any());\n+        String name1 = \"something1\";\n+        Credential cred1 = createCredentialWithName(name1);\n+        cred1.setId(1L);\n+        when(credentialService.findByNameAndAccountId(eq(name1), eq(ACCOUNT_ID), any(Set.class), any())).thenReturn(Optional.of(cred1));\n+        when(credentialService.save(any())).thenReturn(cred1);\n \n-        assertThrows(BadRequestException.class, () -> underTest.deleteMultiple(Set.of(name), ACCOUNT_ID, ENVIRONMENT));\n+        String name2 = \"something2\";\n+        Credential cred2 = createCredentialWithName(name2);\n+        cred2.setId(2L);\n+        when(credentialService.findByNameAndAccountId(eq(name2), eq(ACCOUNT_ID), any(Set.class), any()))\n+                .thenThrow(new BadRequestException(\"anything can happen\"));\n \n-        verify(credentialService, times(1)).findByNameAndAccountId(anyString(), anyString(), anyCollection(), any());\n+        when(environmentViewService.findAllByCredentialId(cred1.getId())).thenReturn(Set.of());\n+\n+        Set<Credential> result = underTest.deleteMultiple(Set.of(name1, name2), ACCOUNT_ID, ENVIRONMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2a609ef3303713c1907786521b21b67c9eb4f"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3064, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}