{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzk5MzQ0", "number": 9071, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOEm-kSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOEm-kSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzA2NDQxOnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/db/CDPStructuredEventDBService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOHXT_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozNDoyMlrOHXULmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc1NA==", "bodyText": "Shouldn't we do something if the eventypes is not empty??", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#discussion_r494206754", "createdAt": "2020-09-24T10:28:24Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/db/CDPStructuredEventDBService.java", "diffHunk": "@@ -68,43 +69,43 @@ protected void prepareCreation(CDPStructuredEventEntity resource) {\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn, Pageable pageable) {\n+        LOGGER.debug(\"Gathering pageable events for types: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn, pageable);\n+            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn, pageable);\n             return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get pageable events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> List<T> getEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn) {\n+        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(eventType, resourceCrn, pageable);\n-            return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n-        } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n-            LOGGER.warn(msg, ex);\n-            throw new CloudbreakServiceException(msg, ex);\n-        }\n-    }\n-\n-    @Override\n-    public <T extends CDPStructuredEvent> List<T> getNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn) {\n-        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n-        try {\n-            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn);\n+            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn);\n             return (List<T>) Optional.ofNullable(events).orElse(new ArrayList<>()).stream()\n                     .map(event -> conversionService.convert(event, CDPStructuredEvent.class))\n                     .collect(Collectors.toList());\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n+\n+    private List<StructuredEventType> getAllEventTypeIfEmpty(List<StructuredEventType> eventTypes) {\n+        List<StructuredEventType> types = new ArrayList<>(eventTypes);\n+        if (CollectionUtils.isEmpty(eventTypes)) {\n+            LOGGER.info(\"We need to add all structured event types to the filter\");\n+            types.add(StructuredEventType.NOTIFICATION);\n+            types.add(StructuredEventType.REST);\n+            types.add(StructuredEventType.FLOW);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwOTk0Ng==", "bodyText": "Yes, we do. We return with the original list", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#discussion_r494209946", "createdAt": "2020-09-24T10:34:22Z", "author": {"login": "topolyai5"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/db/CDPStructuredEventDBService.java", "diffHunk": "@@ -68,43 +69,43 @@ protected void prepareCreation(CDPStructuredEventEntity resource) {\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn, Pageable pageable) {\n+        LOGGER.debug(\"Gathering pageable events for types: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn, pageable);\n+            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn, pageable);\n             return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get pageable events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> List<T> getEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn) {\n+        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(eventType, resourceCrn, pageable);\n-            return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n-        } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n-            LOGGER.warn(msg, ex);\n-            throw new CloudbreakServiceException(msg, ex);\n-        }\n-    }\n-\n-    @Override\n-    public <T extends CDPStructuredEvent> List<T> getNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn) {\n-        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n-        try {\n-            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn);\n+            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn);\n             return (List<T>) Optional.ofNullable(events).orElse(new ArrayList<>()).stream()\n                     .map(event -> conversionService.convert(event, CDPStructuredEvent.class))\n                     .collect(Collectors.toList());\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n+\n+    private List<StructuredEventType> getAllEventTypeIfEmpty(List<StructuredEventType> eventTypes) {\n+        List<StructuredEventType> types = new ArrayList<>(eventTypes);\n+        if (CollectionUtils.isEmpty(eventTypes)) {\n+            LOGGER.info(\"We need to add all structured event types to the filter\");\n+            types.add(StructuredEventType.NOTIFICATION);\n+            types.add(StructuredEventType.REST);\n+            types.add(StructuredEventType.FLOW);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc1NA=="}, "originalCommit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2203, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}