{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MDIzNDEz", "number": 7371, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowOTowM1rODiwzlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxMjowNlrODiw4eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzc3ODE1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxExternalDatabaseConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowOTowM1rOFuMPFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowOTowM1rOFuMPFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTI4NQ==", "bodyText": "Typo: permitterd -> permitted", "url": "https://github.com/hortonworks/cloudbreak/pull/7371#discussion_r383979285", "createdAt": "2020-02-25T16:09:03Z", "author": {"login": "lajosrodek"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxExternalDatabaseConfigurer.java", "diffHunk": "@@ -50,4 +59,24 @@ private void setExperimentalForCreateDatabaseIfNeeded(SdxDatabaseRequest sdxData\n             sdxCluster.setCreateDatabase(true);\n         }\n     }\n+\n+    private boolean isCMExternalDbSupported(CloudPlatform cloudPlatform, SdxCluster sdxCluster) {\n+        if (CloudPlatform.AZURE == cloudPlatform) {\n+            String runtime = sdxCluster.getRuntime();\n+            if (StringUtils.isBlank(runtime)) {\n+                LOGGER.info(\"Runtime is not specified, external DB is permitted on Azure\");\n+                return true;\n+            }\n+            boolean permitted = isVersionNewerOrEqualThan(sdxCluster::getRuntime, () -> AZURE_EXT_DB_MIN_RUNTIME_VERSION);\n+            LOGGER.info(\"External DB {} permitterd on Azure with runtime version: {}\", permitted ? \"is\" : \"is NOT\", runtime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbe7e4f3c8a83984254ea81d8cbdb26edcbfa0ae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzc5MDY0OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxExternalDatabaseConfigurer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxMjowNlrOFuMW9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjoxMjowNlrOFuMW9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTMwMQ==", "bodyText": "Since VersionComparator is stateless, I suggest instantiating it only once as a bean or field initializer in this class, instead of creating a new instance each time this method is invoked.", "url": "https://github.com/hortonworks/cloudbreak/pull/7371#discussion_r383981301", "createdAt": "2020-02-25T16:12:06Z", "author": {"login": "lajosrodek"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/SdxExternalDatabaseConfigurer.java", "diffHunk": "@@ -50,4 +59,24 @@ private void setExperimentalForCreateDatabaseIfNeeded(SdxDatabaseRequest sdxData\n             sdxCluster.setCreateDatabase(true);\n         }\n     }\n+\n+    private boolean isCMExternalDbSupported(CloudPlatform cloudPlatform, SdxCluster sdxCluster) {\n+        if (CloudPlatform.AZURE == cloudPlatform) {\n+            String runtime = sdxCluster.getRuntime();\n+            if (StringUtils.isBlank(runtime)) {\n+                LOGGER.info(\"Runtime is not specified, external DB is permitted on Azure\");\n+                return true;\n+            }\n+            boolean permitted = isVersionNewerOrEqualThan(sdxCluster::getRuntime, () -> AZURE_EXT_DB_MIN_RUNTIME_VERSION);\n+            LOGGER.info(\"External DB {} permitterd on Azure with runtime version: {}\", permitted ? \"is\" : \"is NOT\", runtime);\n+            return permitted;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isVersionNewerOrEqualThan(Versioned currentVersion, Versioned baseVersion) {\n+        LOGGER.info(\"Compared: version {} with new version {}\", currentVersion.getVersion(), baseVersion.getVersion());\n+        Comparator<Versioned> versionComparator = new VersionComparator();\n+        return versionComparator.compare(currentVersion, baseVersion) > -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbe7e4f3c8a83984254ea81d8cbdb26edcbfa0ae"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}