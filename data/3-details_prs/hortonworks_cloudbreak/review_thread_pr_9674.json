{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTQxNjQ5", "number": 9674, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1NzoyMVrOFK1BGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDo1MDoxNVrOFMeYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk4NzE1OnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1NzoyMVrOINrjig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyOFrOIO6Y-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNjAxMA==", "bodyText": "while this is a compact form I would prefer if you could split this into multiple lines and log the value of grpcCcmV2Client.getOrCreateInvertingProxy. This way we would be able to tell if it is null or the state is wrong", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551216010", "createdAt": "2021-01-04T09:57:21Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmV2ManagementClient.class);\n+\n+    @Inject\n+    private GrpcCcmV2Client grpcCcmV2Client;\n+\n+    @Inject\n+    private GrpcCcmV2Config grpcCcmV2Config;\n+\n+    public InvertingProxy awaitReadyInvertingProxyForAccount(String requestId, String accountId) {\n+        return getRetryTemplate().execute(\n+                retryContext -> {\n+                    LOGGER.debug(\"Retrieving InvertingProxy Config for accountId '{}'\", accountId);\n+                    return Optional.ofNullable(grpcCcmV2Client.getOrCreateInvertingProxy(requestId, accountId, ThreadBasedUserCrnProvider.getUserCrn()))\n+                            .filter(invertingProxy -> InvertingProxy.Status.READY.equals(invertingProxy.getStatus()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwNzY0MQ==", "bodyText": "I used the compact form but proto3 does not return null. To support logging returned state I split it into multiple lines as suggested.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552507641", "createdAt": "2021-01-06T10:59:28Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmV2ManagementClient.class);\n+\n+    @Inject\n+    private GrpcCcmV2Client grpcCcmV2Client;\n+\n+    @Inject\n+    private GrpcCcmV2Config grpcCcmV2Config;\n+\n+    public InvertingProxy awaitReadyInvertingProxyForAccount(String requestId, String accountId) {\n+        return getRetryTemplate().execute(\n+                retryContext -> {\n+                    LOGGER.debug(\"Retrieving InvertingProxy Config for accountId '{}'\", accountId);\n+                    return Optional.ofNullable(grpcCcmV2Client.getOrCreateInvertingProxy(requestId, accountId, ThreadBasedUserCrnProvider.getUserCrn()))\n+                            .filter(invertingProxy -> InvertingProxy.Status.READY.equals(invertingProxy.getStatus()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNjAxMA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2ODk4OTIzOnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOTo1Nzo1OFrOINrkqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMDo1OFrOIO6bVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNjI5OA==", "bodyText": "could you introduce a new exception for this? (and the others)\nalso I'm not sure if RuntimeException is the right way to go here. Shouldn't we enforce the handling of these expected exception on the callers side?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551216298", "createdAt": "2021-01-04T09:57:58Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmV2ManagementClient.class);\n+\n+    @Inject\n+    private GrpcCcmV2Client grpcCcmV2Client;\n+\n+    @Inject\n+    private GrpcCcmV2Config grpcCcmV2Config;\n+\n+    public InvertingProxy awaitReadyInvertingProxyForAccount(String requestId, String accountId) {\n+        return getRetryTemplate().execute(\n+                retryContext -> {\n+                    LOGGER.debug(\"Retrieving InvertingProxy Config for accountId '{}'\", accountId);\n+                    return Optional.ofNullable(grpcCcmV2Client.getOrCreateInvertingProxy(requestId, accountId, ThreadBasedUserCrnProvider.getUserCrn()))\n+                            .filter(invertingProxy -> InvertingProxy.Status.READY.equals(invertingProxy.getStatus()))\n+                            .orElseThrow(() -> new RuntimeException(String.format(\"InvertingProxy not found in ready state for accountId '%s'\", accountId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwODI0NQ==", "bodyText": "Ok introduced new exception. But there is not much handling the caller can do after ccm retry fails, the caller just rethrows the exception and stack creation is marked failure because of CCM issue. This behaviour is consistent with CCMV1.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552508245", "createdAt": "2021-01-06T11:00:58Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmV2ManagementClient.class);\n+\n+    @Inject\n+    private GrpcCcmV2Client grpcCcmV2Client;\n+\n+    @Inject\n+    private GrpcCcmV2Config grpcCcmV2Config;\n+\n+    public InvertingProxy awaitReadyInvertingProxyForAccount(String requestId, String accountId) {\n+        return getRetryTemplate().execute(\n+                retryContext -> {\n+                    LOGGER.debug(\"Retrieving InvertingProxy Config for accountId '{}'\", accountId);\n+                    return Optional.ofNullable(grpcCcmV2Client.getOrCreateInvertingProxy(requestId, accountId, ThreadBasedUserCrnProvider.getUserCrn()))\n+                            .filter(invertingProxy -> InvertingProxy.Status.READY.equals(invertingProxy.getStatus()))\n+                            .orElseThrow(() -> new RuntimeException(String.format(\"InvertingProxy not found in ready state for accountId '%s'\", accountId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIxNjI5OA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTAzMjU0OnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxMDozM1rOINr-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMTo0NlrOIO6ckg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMjc5Ng==", "bodyText": "please add unit test", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551222796", "createdAt": "2021-01-04T10:10:33Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwODU2Mg==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552508562", "createdAt": "2021-01-06T11:01:46Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/CcmV2ManagementClient.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.retry.backoff.FixedBackOffPolicy;\n+import org.springframework.retry.policy.TimeoutRetryPolicy;\n+import org.springframework.retry.support.RetryTemplate;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+\n+@Component\n+public class CcmV2ManagementClient {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyMjc5Ng=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA2MDg0OnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/GrpcCcmV2Client.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoxODoxOVrOINsONQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMjoxNFrOIO6dRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjkzMw==", "bodyText": "shall we log the requests here before calling the service?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551226933", "createdAt": "2021-01-04T10:18:19Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/GrpcCcmV2Client.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import static io.grpc.internal.GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;\n+\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Grpc;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Grpc.ClusterConnectivityManagementV2BlockingStub;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.CreateOrGetInvertingProxyRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.CreateOrGetInvertingProxyResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RegisterAgentRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RegisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RemoveInvertingProxyResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RemoveInvertingProxyRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentRequest;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+import com.sequenceiq.cloudbreak.grpc.ManagedChannelWrapper;\n+import com.sequenceiq.cloudbreak.grpc.altus.AltusMetadataInterceptor;\n+import com.sequenceiq.cloudbreak.grpc.util.GrpcUtil;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class GrpcCcmV2Client {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwODc0Mw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552508743", "createdAt": "2021-01-06T11:02:14Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/GrpcCcmV2Client.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2;\n+\n+import static io.grpc.internal.GrpcUtil.DEFAULT_MAX_MESSAGE_SIZE;\n+\n+import javax.inject.Inject;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Grpc;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Grpc.ClusterConnectivityManagementV2BlockingStub;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.CreateOrGetInvertingProxyRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.CreateOrGetInvertingProxyResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RegisterAgentRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RegisterAgentResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RemoveInvertingProxyResponse;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.RemoveInvertingProxyRequest;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.UnregisterAgentRequest;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config.GrpcCcmV2Config;\n+import com.sequenceiq.cloudbreak.grpc.ManagedChannelWrapper;\n+import com.sequenceiq.cloudbreak.grpc.altus.AltusMetadataInterceptor;\n+import com.sequenceiq.cloudbreak.grpc.util.GrpcUtil;\n+\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.opentracing.Tracer;\n+\n+@Component\n+public class GrpcCcmV2Client {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNjkzMw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTA2NzgxOnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/config/GrpcCcmV2Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDoyMDoxNlrOINsSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMjoyNlrOIO6dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNzk0OQ==", "bodyText": "the intent of @Configuration annotation is to define beans. You should use @Component here", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551227949", "createdAt": "2021-01-04T10:20:16Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/config/GrpcCcmV2Config.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwODgyNw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552508827", "createdAt": "2021-01-06T11:02:26Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/ccmv2/config/GrpcCcmV2Config.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.ccmv2.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIyNzk0OQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTExMTU4OnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/cloudinit/DefaultCcmV2ParameterSupplier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDozMjowMlrOINsq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMzo0MlrOIO6fig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNDI4Mw==", "bodyText": "could you move these validations to a separate method? thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551234283", "createdAt": "2021-01-04T10:32:02Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/cloudinit/DefaultCcmV2ParameterSupplier.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.cloudinit;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.DefaultCcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.CcmV2ManagementClient;\n+import com.sequenceiq.cloudbreak.logger.LoggerContextKey;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+\n+@Component\n+public class DefaultCcmV2ParameterSupplier implements CcmV2ParameterSupplier {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCcmV2ParameterSupplier.class);\n+\n+    @Inject\n+    private CcmV2ManagementClient ccmV2Client;\n+\n+    public CcmV2Parameters getCcmV2Parameters(@Nonnull String accountId, @Nonnull String clusterGatewayDomain, @Nonnull String agentKeyId) {\n+        String requestId = Optional.ofNullable(MDCBuilder.getMdcContextMap().get(LoggerContextKey.REQUEST_ID.toString())).orElse(UUID.randomUUID().toString());\n+        MDCBuilder.addRequestId(requestId);\n+\n+        InvertingProxy invertingProxy = ccmV2Client.awaitReadyInvertingProxyForAccount(requestId, accountId);\n+        InvertingProxyAgent invertingProxyAgent = ccmV2Client.registerInvertingProxyAgent(requestId, accountId, clusterGatewayDomain, agentKeyId);\n+\n+        checkArgument(StringUtils.isNotEmpty(invertingProxy.getHostname()), \"InvertingProxy Hostname is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxy.getCertificate()), \"InvertingProxy Certificate is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getAgentCrn()), \"InvertingProxyAgent Crn is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getEncipheredPrivateKey()), \"InvertingProxyAgent Enciphered Key is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getCertificate()), \"InvertingProxyAgent Certificate is not initialized.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwOTMyMg==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552509322", "createdAt": "2021-01-06T11:03:42Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/cloudinit/DefaultCcmV2ParameterSupplier.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.cloudinit;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxy;\n+import com.cloudera.thunderhead.service.clusterconnectivitymanagementv2.ClusterConnectivityManagementV2Proto.InvertingProxyAgent;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.DefaultCcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.CcmV2ManagementClient;\n+import com.sequenceiq.cloudbreak.logger.LoggerContextKey;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+\n+@Component\n+public class DefaultCcmV2ParameterSupplier implements CcmV2ParameterSupplier {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCcmV2ParameterSupplier.class);\n+\n+    @Inject\n+    private CcmV2ManagementClient ccmV2Client;\n+\n+    public CcmV2Parameters getCcmV2Parameters(@Nonnull String accountId, @Nonnull String clusterGatewayDomain, @Nonnull String agentKeyId) {\n+        String requestId = Optional.ofNullable(MDCBuilder.getMdcContextMap().get(LoggerContextKey.REQUEST_ID.toString())).orElse(UUID.randomUUID().toString());\n+        MDCBuilder.addRequestId(requestId);\n+\n+        InvertingProxy invertingProxy = ccmV2Client.awaitReadyInvertingProxyForAccount(requestId, accountId);\n+        InvertingProxyAgent invertingProxyAgent = ccmV2Client.registerInvertingProxyAgent(requestId, accountId, clusterGatewayDomain, agentKeyId);\n+\n+        checkArgument(StringUtils.isNotEmpty(invertingProxy.getHostname()), \"InvertingProxy Hostname is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxy.getCertificate()), \"InvertingProxy Certificate is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getAgentCrn()), \"InvertingProxyAgent Crn is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getEncipheredPrivateKey()), \"InvertingProxyAgent Enciphered Key is not initialized.\");\n+        checkArgument(StringUtils.isNotEmpty(invertingProxyAgent.getCertificate()), \"InvertingProxyAgent Certificate is not initialized.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNDI4Mw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTExODk1OnYy", "diffSide": "RIGHT", "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/termination/DefaultCcmV2AgentTerminationListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDozNDoxM1rOINsvPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowMzozNVrOIO6fWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNTM4OA==", "bodyText": "this seems to be a duplication of the code already in DefaultCcmV2ParameterSupplier. I think this could be moved to MDCBuilder", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551235388", "createdAt": "2021-01-04T10:34:13Z", "author": {"login": "lacikaaa"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/termination/DefaultCcmV2AgentTerminationListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.termination;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.termination.CcmV2AgentTerminationListener;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.CcmV2ManagementClient;\n+import com.sequenceiq.cloudbreak.logger.LoggerContextKey;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+\n+@Component\n+public class DefaultCcmV2AgentTerminationListener implements CcmV2AgentTerminationListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCcmV2AgentTerminationListener.class);\n+\n+    @Inject\n+    private CcmV2ManagementClient ccmV2Client;\n+\n+    @Override\n+    public void deregisterInvertingProxyAgent(String ccmV2AgentCrn) {\n+        if (ccmV2AgentCrn != null) {\n+            String requestId = Optional.ofNullable(MDCBuilder.getMdcContextMap()\n+                    .get(LoggerContextKey.REQUEST_ID.toString())).orElse(UUID.randomUUID().toString());\n+            MDCBuilder.addRequestId(requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwOTI3Mw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552509273", "createdAt": "2021-01-06T11:03:35Z", "author": {"login": "smaniraju"}, "path": "ccm-connector/src/main/java/com/sequenceiq/cloudbreak/ccmimpl/termination/DefaultCcmV2AgentTerminationListener.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.sequenceiq.cloudbreak.ccmimpl.termination;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.ccm.termination.CcmV2AgentTerminationListener;\n+import com.sequenceiq.cloudbreak.ccmimpl.ccmv2.CcmV2ManagementClient;\n+import com.sequenceiq.cloudbreak.logger.LoggerContextKey;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+\n+@Component\n+public class DefaultCcmV2AgentTerminationListener implements CcmV2AgentTerminationListener {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DefaultCcmV2AgentTerminationListener.class);\n+\n+    @Inject\n+    private CcmV2ManagementClient ccmV2Client;\n+\n+    @Override\n+    public void deregisterInvertingProxyAgent(String ccmV2AgentCrn) {\n+        if (ccmV2AgentCrn != null) {\n+            String requestId = Optional.ofNullable(MDCBuilder.getMdcContextMap()\n+                    .get(LoggerContextKey.REQUEST_ID.toString())).orElse(UUID.randomUUID().toString());\n+            MDCBuilder.addRequestId(requestId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNTM4OA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTE3MjE1OnYy", "diffSide": "RIGHT", "path": "cloud-common/src/main/java/com/sequenceiq/cloudbreak/common/service/HostDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo0ODoyMlrOINtNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNDozNlrOIO6hJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0MzEwNg==", "bodyText": "domain is a bit misleading here, as it's actually the gateway node's FQDN", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551243106", "createdAt": "2021-01-04T10:48:22Z", "author": {"login": "lacikaaa"}, "path": "cloud-common/src/main/java/com/sequenceiq/cloudbreak/common/service/HostDiscoveryService.java", "diffHunk": "@@ -48,6 +50,10 @@ public String generateHostname(String customHostnamePrefix, String instanceGroup\n         return getHostname(customHostnamePrefix, instanceGroupName).replaceAll(\"_\", \"\") + privateId;\n     }\n \n+    public String determineDefaultDomainForStack(String gatewayHostName, String stackDomain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwOTczMg==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552509732", "createdAt": "2021-01-06T11:04:36Z", "author": {"login": "smaniraju"}, "path": "cloud-common/src/main/java/com/sequenceiq/cloudbreak/common/service/HostDiscoveryService.java", "diffHunk": "@@ -48,6 +50,10 @@ public String generateHostname(String customHostnamePrefix, String instanceGroup\n         return getHostname(customHostnamePrefix, instanceGroupName).replaceAll(\"_\", \"\") + privateId;\n     }\n \n+    public String determineDefaultDomainForStack(String gatewayHostName, String stackDomain) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0MzEwNg=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTE4MzA1OnYy", "diffSide": "RIGHT", "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/CcmV2Config.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1MTozOVrOINtTxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNTo0NVrOIO6i5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDc0Mg==", "bodyText": "is there any particular reason the json field name is different from the java field name?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551244742", "createdAt": "2021-01-04T10:51:39Z", "author": {"login": "lacikaaa"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/CcmV2Config.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.cloudbreak.clusterproxy;\n+\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class CcmV2Config {\n+\n+    @JsonProperty(\"agentCrn\")\n+    private String agentCrn;\n+\n+    @JsonProperty(\"backendId\")\n+    private String backendId;\n+\n+    @JsonProperty(\"host\")\n+    private String gatewayHost;\n+\n+    @JsonProperty(\"port\")\n+    private int gatewayPort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMDE4Mw==", "bodyText": "ccmv2 team wants these fieldnames as host and port. But in CB just host and port does not give any context, hence the java field name is as per CB context.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552510183", "createdAt": "2021-01-06T11:05:45Z", "author": {"login": "smaniraju"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/CcmV2Config.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.sequenceiq.cloudbreak.clusterproxy;\n+\n+import java.util.Objects;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class CcmV2Config {\n+\n+    @JsonProperty(\"agentCrn\")\n+    private String agentCrn;\n+\n+    @JsonProperty(\"backendId\")\n+    private String backendId;\n+\n+    @JsonProperty(\"host\")\n+    private String gatewayHost;\n+\n+    @JsonProperty(\"port\")\n+    private int gatewayPort;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDc0Mg=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIwMzUwOnYy", "diffSide": "RIGHT", "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1NzoyNVrOINtflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNTo1M1rOIO6jDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0Nzc2Ng==", "bodyText": "instead of instanceof it should be handled by catching this type of exception and add the logic there", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551247766", "createdAt": "2021-01-04T10:57:25Z", "author": {"login": "lacikaaa"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "diffHunk": "@@ -115,4 +116,11 @@ public ReadConfigResponse readConfig(String clusterIdentifier) {\n         headers.setContentType(MediaType.APPLICATION_JSON);\n         return new HttpEntity<>(JsonUtil.writeValueAsString(proxyConfigRequest), headers);\n     }\n+\n+    private void logErrorWithResponseBody(String message, Exception ex) {\n+        if (ex instanceof RestClientResponseException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMDIyMA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552510220", "createdAt": "2021-01-06T11:05:53Z", "author": {"login": "smaniraju"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "diffHunk": "@@ -115,4 +116,11 @@ public ReadConfigResponse readConfig(String clusterIdentifier) {\n         headers.setContentType(MediaType.APPLICATION_JSON);\n         return new HttpEntity<>(JsonUtil.writeValueAsString(proxyConfigRequest), headers);\n     }\n+\n+    private void logErrorWithResponseBody(String message, Exception ex) {\n+        if (ex instanceof RestClientResponseException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0Nzc2Ng=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIwNzQ5OnYy", "diffSide": "RIGHT", "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1ODo0MVrOINth4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNjo1NFrOIO6lKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0ODM1NQ==", "bodyText": "modifying a method parameter is usually a bad practice and should be avoided if possible", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551248355", "createdAt": "2021-01-04T10:58:41Z", "author": {"login": "lacikaaa"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "diffHunk": "@@ -115,4 +116,11 @@ public ReadConfigResponse readConfig(String clusterIdentifier) {\n         headers.setContentType(MediaType.APPLICATION_JSON);\n         return new HttpEntity<>(JsonUtil.writeValueAsString(proxyConfigRequest), headers);\n     }\n+\n+    private void logErrorWithResponseBody(String message, Exception ex) {\n+        if (ex instanceof RestClientResponseException) {\n+            message += \" ,Error Response Body : \" + ((RestClientResponseException) ex).getResponseBodyAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMDc2MA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552510760", "createdAt": "2021-01-06T11:06:54Z", "author": {"login": "smaniraju"}, "path": "cluster-proxy/src/main/java/com/sequenceiq/cloudbreak/clusterproxy/ClusterProxyRegistrationClient.java", "diffHunk": "@@ -115,4 +116,11 @@ public ReadConfigResponse readConfig(String clusterIdentifier) {\n         headers.setContentType(MediaType.APPLICATION_JSON);\n         return new HttpEntity<>(JsonUtil.writeValueAsString(proxyConfigRequest), headers);\n     }\n+\n+    private void logErrorWithResponseBody(String message, Exception ex) {\n+        if (ex instanceof RestClientResponseException) {\n+            message += \" ,Error Response Body : \" + ((RestClientResponseException) ex).getResponseBodyAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0ODM1NQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI1MDM3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxMjozOVrOINt6nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowODoxM1rOIO6nTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NDY4NQ==", "bodyText": "I think this should be replaced with the default constructor, without parameter and that should set connectivity mode to NONE. So it would be obvious you can't define CCMv2 mode without passing the related parameters.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551254685", "createdAt": "2021-01-04T11:12:39Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.ccm.cloudinit;\n+\n+public class CcmConnectivityParameters {\n+\n+    private CcmParameters ccmParameters;\n+\n+    private CcmV2Parameters ccmV2Parameters;\n+\n+    private CcmConnectivityMode connectivityMode;\n+\n+    public CcmConnectivityParameters(CcmParameters ccmParameters) {\n+        this.ccmParameters = ccmParameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV1;\n+    }\n+\n+    public CcmConnectivityParameters(CcmV2Parameters ccmV2Parameters) {\n+        this.ccmV2Parameters = ccmV2Parameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV2;\n+    }\n+\n+    public CcmConnectivityParameters(CcmConnectivityMode connectivityMode) {\n+        this.connectivityMode = connectivityMode;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMTMwOA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552511308", "createdAt": "2021-01-06T11:08:13Z", "author": {"login": "smaniraju"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.ccm.cloudinit;\n+\n+public class CcmConnectivityParameters {\n+\n+    private CcmParameters ccmParameters;\n+\n+    private CcmV2Parameters ccmV2Parameters;\n+\n+    private CcmConnectivityMode connectivityMode;\n+\n+    public CcmConnectivityParameters(CcmParameters ccmParameters) {\n+        this.ccmParameters = ccmParameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV1;\n+    }\n+\n+    public CcmConnectivityParameters(CcmV2Parameters ccmV2Parameters) {\n+        this.ccmV2Parameters = ccmV2Parameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV2;\n+    }\n+\n+    public CcmConnectivityParameters(CcmConnectivityMode connectivityMode) {\n+        this.connectivityMode = connectivityMode;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NDY4NQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI4ODM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyNDozNVrOINuQCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxMDo0M1rOIO6rlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MDE2OA==", "bodyText": "I think the tunnel should have a new value, CCMv2 and only if that is chosen should we go with CCMv2. This would ensure that old envs with CCMv1 would still start datahubs with it, even if the account has v2 enabled. It would be a bad idea to mix CCM versions in environments on the first run", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551260168", "createdAt": "2021-01-04T11:24:35Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -99,7 +106,9 @@ public boolean isCreateConfigForClusterProxy(Stack stack) {\n     }\n \n     private void registerGateway(Stack stack) {\n-        ConfigUpdateRequest request = new ConfigUpdateRequest(stack.getResourceCrn(), knoxUrl(stack));\n+        String knoxUrl = stack.getTunnel().useCcm() && entitlementService.ccmV2Enabled(getAccountId(stack)) ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMjQwNA==", "bodyText": "agree . have made this change throughout. only while creating environment if \"enableTunnel\" is chosen, based on account entitlement CCMV1 or CCMV2 is initialized for environment. In all other places only tunnel value CCMV1 or CCMV2 is used.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552512404", "createdAt": "2021-01-06T11:10:43Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -99,7 +106,9 @@ public boolean isCreateConfigForClusterProxy(Stack stack) {\n     }\n \n     private void registerGateway(Stack stack) {\n-        ConfigUpdateRequest request = new ConfigUpdateRequest(stack.getResourceCrn(), knoxUrl(stack));\n+        String knoxUrl = stack.getTunnel().useCcm() && entitlementService.ccmV2Enabled(getAccountId(stack)) ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MDE2OA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTMwMDU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/recipe/CcmKeyDeregisterHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyODoyMFrOINuW2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyODoyMFrOINuW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTkxMg==", "bodyText": "CcmKeyDeregisterRequest should have Tunnel field instead of the boolean as it's already deprecated. The logic should depend on this value here", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551261912", "createdAt": "2021-01-04T11:28:20Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/reactor/handler/recipe/CcmKeyDeregisterHandler.java", "diffHunk": "@@ -34,24 +36,32 @@\n     @Inject\n     private CcmResourceTerminationListener ccmResourceTerminationListener;\n \n+    @Inject\n+    private CcmV2AgentTerminationListener ccmV2AgentTerminationListener;\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n     @Override\n     public void accept(Event<CcmKeyDeregisterRequest> requestEvent) {\n         CcmKeyDeregisterRequest request = requestEvent.getData();\n         Selectable result;\n         try {\n             Stack stack = stackService.getByIdWithListsInTransaction(request.getResourceId());\n             if (Boolean.TRUE.equals(request.getUseCcm())) {\n-                LOGGER.debug(\"De-registering key from CCM. Cluster CRN: {}\",\n-                        stack.getResourceCrn());\n+                LOGGER.debug(\"De-registering key from CCM. Cluster CRN: {}\", stack.getResourceCrn());\n                 try {\n-                    ccmResourceTerminationListener.deregisterCcmSshTunnelingKey(request.getActorCrn(), request.getAccountId(), request.getKeyId(),\n-                            stack.getMinaSshdServiceId());\n+                    if (!entitlementService.ccmV2Enabled(request.getAccountId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTMxMTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTozMjowNFrOINudJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxMzo1OVrOIO6xMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MzUyNg==", "bodyText": "this would change the current behavior, as we set CcmParameterConstants.CCM_ENABLED_KEY to false if CCM is not enabled, but with this change we won't set it anymore. Are you sure it won't break anything?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551263526", "createdAt": "2021-01-04T11:32:04Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -61,11 +64,19 @@ private String build(InstanceGroupType type, Platform cloudPlatform, byte[] cbSs\n         model.put(\"customUserData\", userDataBuilderParams.getCustomData());\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n-        CcmParameters.addToTemplateModel(type, ccmParameters, model);\n+        extendModelWithCcmConnectivity(type, ccmConnectivityParameters, model);\n         extendModelWithProxyParams(type, proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithCcmConnectivity(InstanceGroupType type, CcmConnectivityParameters ccmConnectivityParameters, Map<String, Object> model) {\n+        if (CcmConnectivityMode.CCMV1.equals(ccmConnectivityParameters.getConnectivityMode())) {\n+            CcmParameters.addToTemplateModel(type, ccmConnectivityParameters.getCcmParameters(), model);\n+        } else if (CcmConnectivityMode.CCMV2.equals(ccmConnectivityParameters.getConnectivityMode())) {\n+            CcmV2Parameters.addToTemplateModel(type, ccmConnectivityParameters.getCcmV2Parameters(), model);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMzg0Mg==", "bodyText": "Yes the ftl templates only initialize CCM variables if CCM_ENABLED_KEY is initialized to true and not null. There is already a unit test in UserDataBuilder for this. But for clarity I also added CCM_ENABLED_KEY and CCM_V2_ENABLED_KEY as false when CCM is not enabled.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552513842", "createdAt": "2021-01-06T11:13:59Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -61,11 +64,19 @@ private String build(InstanceGroupType type, Platform cloudPlatform, byte[] cbSs\n         model.put(\"customUserData\", userDataBuilderParams.getCustomData());\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n-        CcmParameters.addToTemplateModel(type, ccmParameters, model);\n+        extendModelWithCcmConnectivity(type, ccmConnectivityParameters, model);\n         extendModelWithProxyParams(type, proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithCcmConnectivity(InstanceGroupType type, CcmConnectivityParameters ccmConnectivityParameters, Map<String, Object> model) {\n+        if (CcmConnectivityMode.CCMV1.equals(ccmConnectivityParameters.getConnectivityMode())) {\n+            CcmParameters.addToTemplateModel(type, ccmConnectivityParameters.getCcmParameters(), model);\n+        } else if (CcmConnectivityMode.CCMV2.equals(ccmConnectivityParameters.getConnectivityMode())) {\n+            CcmV2Parameters.addToTemplateModel(type, ccmConnectivityParameters.getCcmV2Parameters(), model);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MzUyNg=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTMzNTk3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTozOTo1NlrOINurFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowODowNFrOIO6nBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NzA5NA==", "bodyText": "these should ensure that the parameters are not null so we can be sure later if we have eg CCMV1 set, then ccmParameters can't be null. The other way around, if we don't store CcmConnectivityMode, but the getter would calculate it from the fields. If none set then it's NONE, etc.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551267094", "createdAt": "2021-01-04T11:39:56Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.ccm.cloudinit;\n+\n+public class CcmConnectivityParameters {\n+\n+    private CcmParameters ccmParameters;\n+\n+    private CcmV2Parameters ccmV2Parameters;\n+\n+    private CcmConnectivityMode connectivityMode;\n+\n+    public CcmConnectivityParameters(CcmParameters ccmParameters) {\n+        this.ccmParameters = ccmParameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV1;\n+    }\n+\n+    public CcmConnectivityParameters(CcmV2Parameters ccmV2Parameters) {\n+        this.ccmV2Parameters = ccmV2Parameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV2;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMTIzNw==", "bodyText": "ok updated code to not store CcmConnectivityMode and calculate it from fields", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552511237", "createdAt": "2021-01-06T11:08:04Z", "author": {"login": "smaniraju"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/ccm/cloudinit/CcmConnectivityParameters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.ccm.cloudinit;\n+\n+public class CcmConnectivityParameters {\n+\n+    private CcmParameters ccmParameters;\n+\n+    private CcmV2Parameters ccmV2Parameters;\n+\n+    private CcmConnectivityMode connectivityMode;\n+\n+    public CcmConnectivityParameters(CcmParameters ccmParameters) {\n+        this.ccmParameters = ccmParameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV1;\n+    }\n+\n+    public CcmConnectivityParameters(CcmV2Parameters ccmV2Parameters) {\n+        this.ccmV2Parameters = ccmV2Parameters;\n+        this.connectivityMode = CcmConnectivityMode.CCMV2;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2NzA5NA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0NDEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0MzoxM1rOINuwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxNDoyM1rOIO6x3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODM5MQ==", "bodyText": "this method should be moved to a separate class and refactored into smaller ones, as it's pretty big, and already needs the @VisibleForTesting annotation", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551268391", "createdAt": "2021-01-04T11:43:13Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNDAxMw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552514013", "createdAt": "2021-01-06T11:14:23Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODM5MQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0NjI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0Mzo1NlrOINuxZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxODo0N1rOIO65cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODcwOA==", "bodyText": "logic should be handled here by tunnel type and not by entitlement", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551268708", "createdAt": "2021-01-04T11:43:56Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNTk1Mw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552515953", "createdAt": "2021-01-06T11:18:47Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2ODcwOA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM0OTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NTowNFrOINuzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxOToxMVrOIO66Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTE5Nw==", "bodyText": "stack id should be enough here as that's the only part you use. Crn is already should be added to MdcContext, logging it again is not necessary.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551269197", "createdAt": "2021-01-04T11:45:04Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {\n+                ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+                int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+                builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+                // Optionally configure a tunnel for (nginx fronting) Knox\n+                if (stack.getCluster().getGateway() != null) {\n+                    // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                    builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+                }\n+\n+                Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+                CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            } else {\n+                String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                        stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,\n+                        stack.isClusterNameAsSubdomain());\n+                String stackDomain = hostDiscoveryService.determineDomain(stack.getCustomDomain(), stack.getName(), stack.isClusterNameAsSubdomain());\n+                String generatedClusterDomain = hostDiscoveryService.determineDefaultDomainForStack(gatewayHostName, stackDomain);\n+\n+                CcmV2Parameters ccmV2Parameters = ccmV2ParameterSupplier.getCcmV2Parameters(accountId, generatedClusterDomain, keyId);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV2Parameters);\n+            }\n+        }\n+        return ccmConnectivityParameters;\n+    }\n+\n+    @VisibleForTesting\n+    void saveStackCCMParameters(Stack stack, CcmConnectivityParameters ccmConnectivityParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNjExNA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552516114", "createdAt": "2021-01-06T11:19:11Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {\n+                ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+                int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+                builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+                // Optionally configure a tunnel for (nginx fronting) Knox\n+                if (stack.getCluster().getGateway() != null) {\n+                    // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                    builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+                }\n+\n+                Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+                CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            } else {\n+                String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                        stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,\n+                        stack.isClusterNameAsSubdomain());\n+                String stackDomain = hostDiscoveryService.determineDomain(stack.getCustomDomain(), stack.getName(), stack.isClusterNameAsSubdomain());\n+                String generatedClusterDomain = hostDiscoveryService.determineDefaultDomainForStack(gatewayHostName, stackDomain);\n+\n+                CcmV2Parameters ccmV2Parameters = ccmV2ParameterSupplier.getCcmV2Parameters(accountId, generatedClusterDomain, keyId);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV2Parameters);\n+            }\n+        }\n+        return ccmConnectivityParameters;\n+    }\n+\n+    @VisibleForTesting\n+    void saveStackCCMParameters(Stack stack, CcmConnectivityParameters ccmConnectivityParameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTE5Nw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM1MjgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0NjoxMFrOINu1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToyMToxOFrOIO690g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTY5OA==", "bodyText": "if you modify the CcmConnectivityParameters implementation (and ensure it via unit tests) you could skip null check here", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551269698", "createdAt": "2021-01-04T11:46:10Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {\n+                ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+                int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+                builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+                // Optionally configure a tunnel for (nginx fronting) Knox\n+                if (stack.getCluster().getGateway() != null) {\n+                    // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                    builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+                }\n+\n+                Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+                CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            } else {\n+                String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                        stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,\n+                        stack.isClusterNameAsSubdomain());\n+                String stackDomain = hostDiscoveryService.determineDomain(stack.getCustomDomain(), stack.getName(), stack.isClusterNameAsSubdomain());\n+                String generatedClusterDomain = hostDiscoveryService.determineDefaultDomainForStack(gatewayHostName, stackDomain);\n+\n+                CcmV2Parameters ccmV2Parameters = ccmV2ParameterSupplier.getCcmV2Parameters(accountId, generatedClusterDomain, keyId);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV2Parameters);\n+            }\n+        }\n+        return ccmConnectivityParameters;\n+    }\n+\n+    @VisibleForTesting\n+    void saveStackCCMParameters(Stack stack, CcmConnectivityParameters ccmConnectivityParameters) {\n+        long stackId = stack.getId();\n+        if (CcmConnectivityMode.CCMV1.equals(ccmConnectivityParameters.getConnectivityMode())\n+                && ccmConnectivityParameters.getCcmParameters() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNzA3NA==", "bodyText": "removed null check and added unit tests", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552517074", "createdAt": "2021-01-06T11:21:18Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n-            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n-            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n-            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n-\n-            // Optionally configure a tunnel for (nginx fronting) Knox\n-            if (stack.getCluster().getGateway() != null) {\n-                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n-                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n-            }\n-\n-            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n-\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters(CcmConnectivityMode.NONE);\n+        if (stack.getTunnel().useCcm()) {\n             String accountId = ThreadBasedUserCrnProvider.getAccountId();\n             String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n             String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n             String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n-            ccmParameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+\n+            if (!entitlementService.ccmV2Enabled(accountId)) {\n+                ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+                int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+                builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+                // Optionally configure a tunnel for (nginx fronting) Knox\n+                if (stack.getCluster().getGateway() != null) {\n+                    // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                    builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+                }\n+\n+                Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+                CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, accountId, keyId, tunneledServicePorts).orElse(null);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            } else {\n+                String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                        stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,\n+                        stack.isClusterNameAsSubdomain());\n+                String stackDomain = hostDiscoveryService.determineDomain(stack.getCustomDomain(), stack.getName(), stack.isClusterNameAsSubdomain());\n+                String generatedClusterDomain = hostDiscoveryService.determineDefaultDomainForStack(gatewayHostName, stackDomain);\n+\n+                CcmV2Parameters ccmV2Parameters = ccmV2ParameterSupplier.getCcmV2Parameters(accountId, generatedClusterDomain, keyId);\n+                ccmConnectivityParameters = new CcmConnectivityParameters(ccmV2Parameters);\n+            }\n+        }\n+        return ccmConnectivityParameters;\n+    }\n+\n+    @VisibleForTesting\n+    void saveStackCCMParameters(Stack stack, CcmConnectivityParameters ccmConnectivityParameters) {\n+        long stackId = stack.getId();\n+        if (CcmConnectivityMode.CCMV1.equals(ccmConnectivityParameters.getConnectivityMode())\n+                && ccmConnectivityParameters.getCcmParameters() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2OTY5OA=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM2MzgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo0OTo1M1rOINu7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxNDoxNFrOIO6xrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTMxNw==", "bodyText": "if you move the save next to the fetch, they might be moved out together and handled together. Also you might save some if condition regarding checking if it's CCMv1 or v2", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551271317", "createdAt": "2021-01-04T11:49:53Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMzk2NA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552513964", "createdAt": "2021-01-06T11:14:14Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,45 +105,71 @@ public void createUserData(Long stackId) throws CloudbreakImageNotFoundException\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             Map<InstanceGroupType, String> userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer,\n                     sshUser, platformParameters, saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stackService.setMinaSshdServiceIdByStackId(stackId, minaSshdServiceId);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MTMxNw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3NzU3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/event/ccm/CcmKeyDeregistrationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NDo0NFrOINvDzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozNDoxMFrOIO7SsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzQyMQ==", "bodyText": "the same for this request, include tunnel instead if boolean", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551273421", "createdAt": "2021-01-04T11:54:44Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/event/ccm/CcmKeyDeregistrationRequest.java", "diffHunk": "@@ -17,14 +17,18 @@\n \n     private final String minaSshdServiceId;\n \n+    private final String ccmV2AgentCrn;\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n     public CcmKeyDeregistrationRequest(Long stackId, Boolean forced, String actorCrn, String accountId, String keyId, Boolean useCcm,\n-            String minaSshdServiceId) {\n+            String minaSshdServiceId, String ccmV2AgentCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyMjQxNw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552522417", "createdAt": "2021-01-06T11:34:10Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/event/ccm/CcmKeyDeregistrationRequest.java", "diffHunk": "@@ -17,14 +17,18 @@\n \n     private final String minaSshdServiceId;\n \n+    private final String ccmV2AgentCrn;\n+\n+    @SuppressWarnings(\"ExecutableStatementCount\")\n     public CcmKeyDeregistrationRequest(Long stackId, Boolean forced, String actorCrn, String accountId, String keyId, Boolean useCcm,\n-            String minaSshdServiceId) {\n+            String minaSshdServiceId, String ccmV2AgentCrn) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzQyMQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM3ODY1OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/handler/CcmKeyDeregistrationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NTowOVrOINvEZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozMjowMVrOIO7PLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzU3NQ==", "bodyText": "same for this handler. depend on tunnel, not on the entitlement", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551273575", "createdAt": "2021-01-04T11:55:09Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/handler/CcmKeyDeregistrationHandler.java", "diffHunk": "@@ -27,15 +29,25 @@\n     @Inject\n     private EventBus eventBus;\n \n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    @Inject\n+    private CcmV2AgentTerminationListener ccmV2AgentTerminationListener;\n+\n     @Override\n     public void accept(Event<CcmKeyDeregistrationRequest> requestEvent) {\n \n         CcmKeyDeregistrationRequest request = requestEvent.getData();\n         if (Boolean.TRUE.equals(request.getUseCcm())) {\n             LOGGER.debug(\"De-registering CCM key for freeipa stack {}\", request.getResourceId());\n             try {\n-                ccmResourceTerminationListener.deregisterCcmSshTunnelingKey(request.getActorCrn(), request.getAccountId(), request.getKeyId(),\n-                        request.getMinaSshdServiceId());\n+                if (!entitlementService.ccmV2Enabled(request.getAccountId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyMTUxNw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552521517", "createdAt": "2021-01-06T11:32:01Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/stack/termination/handler/CcmKeyDeregistrationHandler.java", "diffHunk": "@@ -27,15 +29,25 @@\n     @Inject\n     private EventBus eventBus;\n \n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    @Inject\n+    private CcmV2AgentTerminationListener ccmV2AgentTerminationListener;\n+\n     @Override\n     public void accept(Event<CcmKeyDeregistrationRequest> requestEvent) {\n \n         CcmKeyDeregistrationRequest request = requestEvent.getData();\n         if (Boolean.TRUE.equals(request.getUseCcm())) {\n             LOGGER.debug(\"De-registering CCM key for freeipa stack {}\", request.getResourceId());\n             try {\n-                ccmResourceTerminationListener.deregisterCcmSshTunnelingKey(request.getActorCrn(), request.getAccountId(), request.getKeyId(),\n-                        request.getMinaSshdServiceId());\n+                if (!entitlementService.ccmV2Enabled(request.getAccountId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3MzU3NQ=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM4MTI3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NjowNFrOINvF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozNDozN1rOIO7TYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mzk3Nw==", "bodyText": "the same question, would it break anything if you don't add CCMv1 false to the model?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551273977", "createdAt": "2021-01-04T11:56:04Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -56,11 +60,19 @@ private String build(Platform cloudPlatform, byte[] cbSshKeyDer, String sshUser,\n         model.put(\"customUserData\", userDataBuilderParams.getCustomData());\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n-        CcmParameters.addToTemplateModel(InstanceGroupType.GATEWAY, ccmParameters, model);\n+        extendModelWithCcmConnectivity(InstanceGroupType.GATEWAY, ccmConnectivityParameters, model);\n         extendModelWithProxyParams(proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithCcmConnectivity(InstanceGroupType type, CcmConnectivityParameters ccmConnectivityParameters, Map<String, Object> model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyMjU5Mw==", "bodyText": "answered above and made same change here.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552522593", "createdAt": "2021-01-06T11:34:37Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataBuilder.java", "diffHunk": "@@ -56,11 +60,19 @@ private String build(Platform cloudPlatform, byte[] cbSshKeyDer, String sshUser,\n         model.put(\"customUserData\", userDataBuilderParams.getCustomData());\n         model.put(\"saltBootPassword\", saltBootPassword);\n         model.put(\"cbCert\", cbCert);\n-        CcmParameters.addToTemplateModel(InstanceGroupType.GATEWAY, ccmParameters, model);\n+        extendModelWithCcmConnectivity(InstanceGroupType.GATEWAY, ccmConnectivityParameters, model);\n         extendModelWithProxyParams(proxyConfig, model);\n         return build(model);\n     }\n \n+    private void extendModelWithCcmConnectivity(InstanceGroupType type, CcmConnectivityParameters ccmConnectivityParameters, Map<String, Object> model) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3Mzk3Nw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM4NDQ2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1Njo1OVrOINvHtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozNToxMFrOIO7URQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDQyMw==", "bodyText": "just a note to keep this in sync with the other after refactor", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551274423", "createdAt": "2021-01-04T11:56:59Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,34 +109,62 @@ public void createUserData(Long stackId) {\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             String userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer, sshUser, platformParameters,\n                     saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stack.setMinaSshdServiceId(minaSshdServiceId);\n-                    stackService.save(stack);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyMjgyMQ==", "bodyText": "refactored here as done in other place.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552522821", "createdAt": "2021-01-06T11:35:10Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/UserDataService.java", "diffHunk": "@@ -88,34 +109,62 @@ public void createUserData(Long stackId) {\n         String saltBootPassword = saltSecurityConfig.getSaltBootPassword();\n         try {\n             PlatformParameters platformParameters = platformParametersFuture.get();\n-            CcmParameters ccmParameters = fetchCcmParameters(stack);\n+            CcmConnectivityParameters ccmParameters = fetchCcmParameters(stack);\n             Optional<ProxyConfig> proxyConfig = proxyConfigDtoService.getByEnvironmentCrn(stack.getEnvironmentCrn());\n             String userData = userDataBuilder.buildUserData(Platform.platform(stack.getCloudPlatform()), cbSshKeyDer, sshUser, platformParameters,\n                     saltBootPassword, cbCert, ccmParameters, proxyConfig.orElse(null));\n             imageService.decorateImageWithUserDataForStack(stack, userData);\n-            if (ccmParameters != null) {\n-                String minaSshdServiceId = ccmParameters.getServerParameters().getMinaSshdServiceId();\n-                if (StringUtils.isNotBlank(minaSshdServiceId)) {\n-                    LOGGER.debug(\"Add Minasshdserviceid [{}] to stack [{}]\", minaSshdServiceId, stack.getResourceCrn());\n-                    stack.setMinaSshdServiceId(minaSshdServiceId);\n-                    stackService.save(stack);\n-                }\n-            }\n+            saveStackCCMParameters(stack, ccmParameters);\n         } catch (InterruptedException | ExecutionException e) {\n             LOGGER.error(\"Failed to get Platform parmaters\", e);\n             throw new GetCloudParameterException(\"Failed to get Platform parmaters\", e);\n         }\n     }\n \n-    private CcmParameters fetchCcmParameters(Stack stack) {\n-        CcmParameters ccmParameters = null;\n-        if ((ccmParameterSupplier != null) && stack.getTunnel().useCcm()) {\n+    @VisibleForTesting\n+    CcmConnectivityParameters fetchCcmParameters(Stack stack) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDQyMw=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTM4NTkzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTo1NzozM1rOINvIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTozNToyMlrOIO7UgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDY2Mg==", "bodyText": "depend on tunnel instead of entitlement", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r551274662", "createdAt": "2021-01-04T11:57:33Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -174,8 +181,14 @@\n \n         ConfigRegistrationRequestBuilder requestBuilder = new ConfigRegistrationRequestBuilder(stack.getResourceCrn())\n                 .withServices(serviceConfigs)\n-                .withTunnelEntries(createTunnelEntries(stack, tunnelGatewayConfigs))\n                 .withAccountId(stack.getAccountId());\n+        if (stack.getTunnel().useCcm()) {\n+            if (!entitlementService.ccmV2Enabled(stack.getAccountId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUyMjg4MA==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r552522880", "createdAt": "2021-01-06T11:35:22Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -174,8 +181,14 @@\n \n         ConfigRegistrationRequestBuilder requestBuilder = new ConfigRegistrationRequestBuilder(stack.getResourceCrn())\n                 .withServices(serviceConfigs)\n-                .withTunnelEntries(createTunnelEntries(stack, tunnelGatewayConfigs))\n                 .withAccountId(stack.getAccountId());\n+        if (stack.getTunnel().useCcm()) {\n+            if (!entitlementService.ccmV2Enabled(stack.getAccountId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI3NDY2Mg=="}, "originalCommit": {"oid": "e7e0393c64b29de6ef8d72dc182ec08e349b40ac"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjY0MTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoxOTowN1rOIPsEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo1NzoyMFrOIPtUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTYzOQ==", "bodyText": "for reregistration you add knox url to the request. Is it missing here on purpose?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553321639", "createdAt": "2021-01-07T13:19:07Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -111,17 +115,22 @@ public void deregisterCluster(Stack stack) {\n     private ConfigRegistrationRequest createProxyConfigRequest(Stack stack) {\n         ConfigRegistrationRequestBuilder requestBuilder = new ConfigRegistrationRequestBuilder(stack.getResourceCrn())\n                 .withAliases(singletonList(clusterId(stack.getCluster()))).withServices(serviceConfigs(stack));\n-        if (stack.getTunnel().useCcm()) {\n+        if (stack.getTunnel().useCcmV1()) {\n             requestBuilder.withAccountId(getAccountId(stack)).withTunnelEntries(tunnelEntries(stack));\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            requestBuilder.withAccountId(getAccountId(stack)).withCcmV2Entries(ccmV2Configs(stack));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMTY5OQ==", "bodyText": "I have not made any changes in this flow, first createProxyConfigRequest is sent. then knoxUrl is registered with registerGateway call. But for createProxyConfigReRegisterRequest knoxUrl was always passed.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553331699", "createdAt": "2021-01-07T13:39:00Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -111,17 +115,22 @@ public void deregisterCluster(Stack stack) {\n     private ConfigRegistrationRequest createProxyConfigRequest(Stack stack) {\n         ConfigRegistrationRequestBuilder requestBuilder = new ConfigRegistrationRequestBuilder(stack.getResourceCrn())\n                 .withAliases(singletonList(clusterId(stack.getCluster()))).withServices(serviceConfigs(stack));\n-        if (stack.getTunnel().useCcm()) {\n+        if (stack.getTunnel().useCcmV1()) {\n             requestBuilder.withAccountId(getAccountId(stack)).withTunnelEntries(tunnelEntries(stack));\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            requestBuilder.withAccountId(getAccountId(stack)).withCcmV2Entries(ccmV2Configs(stack));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTYzOQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0MjA1Mw==", "bodyText": "ok, I see that now. thanks for clarification", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553342053", "createdAt": "2021-01-07T13:57:20Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -111,17 +115,22 @@ public void deregisterCluster(Stack stack) {\n     private ConfigRegistrationRequest createProxyConfigRequest(Stack stack) {\n         ConfigRegistrationRequestBuilder requestBuilder = new ConfigRegistrationRequestBuilder(stack.getResourceCrn())\n                 .withAliases(singletonList(clusterId(stack.getCluster()))).withServices(serviceConfigs(stack));\n-        if (stack.getTunnel().useCcm()) {\n+        if (stack.getTunnel().useCcmV1()) {\n             requestBuilder.withAccountId(getAccountId(stack)).withTunnelEntries(tunnelEntries(stack));\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            requestBuilder.withAccountId(getAccountId(stack)).withCcmV2Entries(ccmV2Configs(stack));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMTYzOQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjY0OTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzoyMTo0OVrOIPsJtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzoyNjo0NVrOIQILYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw==", "bodyText": "If I remember well the decision was that there will be only one agent running of inverting proxy which would pass everything through nginx and it would mean we have to add a new context for knox in nginx. But in that case I don't think you need KNOX here.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553322933", "createdAt": "2021-01-07T13:21:49Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzNDM3Nw==", "bodyText": "yes that was the approach decided. But I have not made any changes to serviceConfig which was generated and it is being commonly generated for ccmv1 and ccmv2.  For ccmv1 there is a service config entry cmServiceConfig(stack, null, \"cloudera-manager\", clusterManagerUrl(stack)) , I was not sure if this is really not used for ccmv1.   Also ccmv2 is validating service host port against ccmv2 config entry so I have not removed KNOX", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553334377", "createdAt": "2021-01-07T13:44:04Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM1MzUzMg==", "bodyText": "still, I think this won't work this way, as cluster proxy would try to connect to port 443, and that won't be available through CCMv2.\nI don't how cluster proxy matches service configs with tunnel entries / ccmv2 configs, but I suspect you would need only one ccmv2 config while multiple service config, but a different one then for ccmv1", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553353532", "createdAt": "2021-01-07T14:16:35Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM1NzM0MQ==", "bodyText": "while connecting to cluster CB uses cb-internal service endpoint which is mapped to 9443 port, so this doesnt break anything. For clarity I will create different service config for ccmv2.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553357341", "createdAt": "2021-01-07T14:22:49Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2MDcwNQ==", "bodyText": "that's right, but other services depend on the other endpoint. Like ClouderaManagerProxiedClientFactory uses that connection inside CB.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553360705", "createdAt": "2021-01-07T14:28:10Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MjExNQ==", "bodyText": "Removed KNOX from the config.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553782115", "createdAt": "2021-01-08T07:26:45Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort(), ServiceFamilies.KNOX.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyMjkzMw=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjY5Mjc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/CcmUserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzozNTowM1rOIPsj4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo0OTozMlrOIPtCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyOTYzNQ==", "bodyText": "when could this happen: .orElse(\"\")? shouldn't we fail instead?\nI'm not sure how HA for SDX works, maybe with a single gateway, but would that 0L cause any problem?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553329635", "createdAt": "2021-01-07T13:35:03Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/CcmUserDataService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.sequenceiq.cloudbreak.service.image.userdata;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmConnectivityParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.KnownServiceIdentifier;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.ccm.key.CcmResourceUtil;\n+import com.sequenceiq.cloudbreak.common.service.HostDiscoveryService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceGroup;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+\n+@Service\n+public class CcmUserDataService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmUserDataService.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private HostDiscoveryService hostDiscoveryService;\n+\n+    @Autowired\n+    private CcmParameterSupplier ccmParameterSupplier;\n+\n+    @Autowired\n+    private CcmV2ParameterSupplier ccmV2ParameterSupplier;\n+\n+    public CcmConnectivityParameters fetchAndSaveCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters();\n+        if (stack.getTunnel().useCcmV1()) {\n+            String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n+            String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n+\n+            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+            // Optionally configure a tunnel for (nginx fronting) Knox\n+            if (stack.getCluster().getGateway() != null) {\n+                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+            }\n+\n+            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+            CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, ThreadBasedUserCrnProvider.getAccountId(),\n+                    CcmResourceUtil.getKeyId(stack.getResourceCrn()), tunneledServicePorts).orElse(null);\n+            ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+\n+            saveCcmV1Config(stack.getId(), ccmV1Parameters);\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                    stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzNzQzMA==", "bodyText": "all the gateway nodes share the same mTLS cert so 0L would not cause any problem because mTLS doesnt validate client fqdn.\norElse(\"\")? would never happen because there are validations that atleast one hostGroup should be gatewayHostGroup.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553337430", "createdAt": "2021-01-07T13:49:32Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/userdata/CcmUserDataService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.sequenceiq.cloudbreak.service.image.userdata;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmConnectivityParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.KnownServiceIdentifier;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.ccm.key.CcmResourceUtil;\n+import com.sequenceiq.cloudbreak.common.service.HostDiscoveryService;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceGroup;\n+import com.sequenceiq.cloudbreak.service.stack.StackService;\n+\n+@Service\n+public class CcmUserDataService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmUserDataService.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private HostDiscoveryService hostDiscoveryService;\n+\n+    @Autowired\n+    private CcmParameterSupplier ccmParameterSupplier;\n+\n+    @Autowired\n+    private CcmV2ParameterSupplier ccmV2ParameterSupplier;\n+\n+    public CcmConnectivityParameters fetchAndSaveCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters();\n+        if (stack.getTunnel().useCcmV1()) {\n+            String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n+            String actorCrn = Objects.requireNonNull(userCrn, \"userCrn is null\");\n+\n+            ImmutableMap.Builder<KnownServiceIdentifier, Integer> builder = ImmutableMap.builder();\n+            int gatewayPort = Optional.ofNullable(stack.getGatewayPort()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+            builder.put(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+            // Optionally configure a tunnel for (nginx fronting) Knox\n+            if (stack.getCluster().getGateway() != null) {\n+                // JSA TODO Do we support a non-default port for the nginx that fronts Knox?\n+                builder.put(KnownServiceIdentifier.KNOX, ServiceFamilies.KNOX.getDefaultPort());\n+            }\n+\n+            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = builder.build();\n+            CcmParameters ccmV1Parameters = ccmParameterSupplier.getCcmParameters(actorCrn, ThreadBasedUserCrnProvider.getAccountId(),\n+                    CcmResourceUtil.getKeyId(stack.getResourceCrn()), tunneledServicePorts).orElse(null);\n+            ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+\n+            saveCcmV1Config(stack.getId(), ccmV1Parameters);\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            String gatewayHostName = hostDiscoveryService.generateHostname(stack.getCustomHostname(),\n+                    stack.getGatewayHostGroup().map(InstanceGroup::getGroupName).orElse(\"\"), 0L,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMyOTYzNQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjcxNjgyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/CcmUserDataService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo0MjoyNlrOIPsy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo0OTo0MFrOIPtCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMzQ4MA==", "bodyText": "won't this fix 0 cause problems for freeipa HA?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553333480", "createdAt": "2021-01-07T13:42:26Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/CcmUserDataService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.sequenceiq.freeipa.service.image.userdata;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmConnectivityParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.KnownServiceIdentifier;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.ccm.key.CcmResourceUtil;\n+import com.sequenceiq.cloudbreak.common.service.HostDiscoveryService;\n+import com.sequenceiq.freeipa.entity.FreeIpa;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaService;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+import com.sequenceiq.freeipa.util.CrnService;\n+\n+@Service\n+public class CcmUserDataService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmUserDataService.class);\n+\n+    @Inject\n+    private CrnService crnService;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private HostDiscoveryService hostDiscoveryService;\n+\n+    @Inject\n+    private FreeIpaService freeIpaService;\n+\n+    @Autowired\n+    private CcmParameterSupplier ccmParameterSupplier;\n+\n+    @Autowired\n+    private CcmV2ParameterSupplier ccmV2ParameterSupplier;\n+\n+    public CcmConnectivityParameters fetchAndSaveCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters();\n+        String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n+\n+        if (stack.getTunnel().useCcmV1()) {\n+            String actorCrn = Objects.requireNonNull(crnService.getUserCrn(), \"userCrn is null\");\n+            int gatewayPort = Optional.ofNullable(stack.getGatewayport()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = Collections.singletonMap(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+            CcmParameters ccmV1Parameters = ccmParameterSupplier\n+                    .getCcmParameters(actorCrn, stack.getAccountId(), keyId, tunneledServicePorts)\n+                    .orElse(null);\n+            ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            saveCcmV1Config(stack.getId(), ccmV1Parameters);\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            FreeIpa freeIpa = freeIpaService.findByStack(stack);\n+            String gatewayHostName = hostDiscoveryService.generateHostname(freeIpa.getHostname(), null, 0, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzNzQ5Nw==", "bodyText": "all the gateway nodes share the same mTLS cert so 0L would not cause any problem because mTLS doesnt validate client fqdn.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553337497", "createdAt": "2021-01-07T13:49:40Z", "author": {"login": "smaniraju"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/userdata/CcmUserDataService.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.sequenceiq.freeipa.service.image.userdata;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmConnectivityParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmParameters;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2ParameterSupplier;\n+import com.sequenceiq.cloudbreak.ccm.cloudinit.CcmV2Parameters;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.KnownServiceIdentifier;\n+import com.sequenceiq.cloudbreak.ccm.endpoint.ServiceFamilies;\n+import com.sequenceiq.cloudbreak.ccm.key.CcmResourceUtil;\n+import com.sequenceiq.cloudbreak.common.service.HostDiscoveryService;\n+import com.sequenceiq.freeipa.entity.FreeIpa;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.freeipa.FreeIpaService;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+import com.sequenceiq.freeipa.util.CrnService;\n+\n+@Service\n+public class CcmUserDataService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CcmUserDataService.class);\n+\n+    @Inject\n+    private CrnService crnService;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private HostDiscoveryService hostDiscoveryService;\n+\n+    @Inject\n+    private FreeIpaService freeIpaService;\n+\n+    @Autowired\n+    private CcmParameterSupplier ccmParameterSupplier;\n+\n+    @Autowired\n+    private CcmV2ParameterSupplier ccmV2ParameterSupplier;\n+\n+    public CcmConnectivityParameters fetchAndSaveCcmParameters(Stack stack) {\n+        CcmConnectivityParameters ccmConnectivityParameters = new CcmConnectivityParameters();\n+        String keyId = CcmResourceUtil.getKeyId(stack.getResourceCrn());\n+\n+        if (stack.getTunnel().useCcmV1()) {\n+            String actorCrn = Objects.requireNonNull(crnService.getUserCrn(), \"userCrn is null\");\n+            int gatewayPort = Optional.ofNullable(stack.getGatewayport()).orElse(ServiceFamilies.GATEWAY.getDefaultPort());\n+            Map<KnownServiceIdentifier, Integer> tunneledServicePorts = Collections.singletonMap(KnownServiceIdentifier.GATEWAY, gatewayPort);\n+\n+            CcmParameters ccmV1Parameters = ccmParameterSupplier\n+                    .getCcmParameters(actorCrn, stack.getAccountId(), keyId, tunneledServicePorts)\n+                    .orElse(null);\n+            ccmConnectivityParameters = new CcmConnectivityParameters(ccmV1Parameters);\n+            saveCcmV1Config(stack.getId(), ccmV1Parameters);\n+        } else if (stack.getTunnel().useCcmV2()) {\n+            FreeIpa freeIpa = freeIpaService.findByStack(stack);\n+            String gatewayHostName = hostDiscoveryService.generateHostname(freeIpa.getHostname(), null, 0, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzMzQ4MA=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mjc1MDMxOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo1MTozNFrOIPtG1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzoyNjoyMFrOIQIK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ==", "bodyText": "So you shouldn't overwrite CCM with CCMv2. You should check the request, if it contains CCMv2 but the entitlement is disabled you must throw a badrequestexception with a reason.\nIf CCM is sent in the request,it should be used, even if the entitlement is enabled. We don't want to force users with enabled entitlement to use CCMv2, do we?", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553338581", "createdAt": "2021-01-07T13:51:34Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0MDAwNg==", "bodyText": "yes I think that is expectation when entitlement is enabled only CCMv2 is to be used. Also CDP CLI only passes enableTunnel option there is no CCM or DIRECT option exposed to customers.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553340006", "createdAt": "2021-01-07T13:53:58Z", "author": {"login": "smaniraju"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM1OTYyNA==", "bodyText": "ok, I get it, but still, you should check that you accept CCMv2 only when the entitlement enabled. We can't rely on the logic present in other component. I think the UI eg communicates directly and sends CCM.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553359624", "createdAt": "2021-01-07T14:26:26Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM2MDk4MQ==", "bodyText": "But that would mean we will not able to create CCMv2 clusters via CDP CLI because it just as \"enableTunnel\", I think that would be a bigger issue.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553360981", "createdAt": "2021-01-07T14:28:35Z", "author": {"login": "smaniraju"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MDQ2OQ==", "bodyText": "I mean you can leave this part, if CCM is received and entitlement enabled, turn it into CCMv2. so this part of the code is fine.\nBut you should add a validation before this, if CCMv2 is received and the entitlement is disabled then return a badrequest.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553380469", "createdAt": "2021-01-07T14:59:24Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MTk4Mw==", "bodyText": "Added validation if tunnel is CCMV2 and not entitled, badrequestexception is thrown.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553781983", "createdAt": "2021-01-08T07:26:20Z", "author": {"login": "smaniraju"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,15 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        if (Tunnel.CCM == tunnel && entitlementService.ccmV2Enabled(environment.getAccountId())) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODU4MQ=="}, "originalCommit": {"oid": "5b702838fc560ff0d73abc4f6fdad5db9eeff6e3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjI0NjIzOnYy", "diffSide": "RIGHT", "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDo0OToxMVrOIQNxCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxNjoyNVrOIQOheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MzY3NA==", "bodyText": "that's not true, it could be cluster proxied. although customer won't start that kind of cluster", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553873674", "createdAt": "2021-01-08T10:49:11Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,21 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        boolean ccmV2Enabled = entitlementService.ccmV2Enabled(environment.getAccountId());\n+        if (Tunnel.CCMV2 == tunnel && !ccmV2Enabled) {\n+            throw new BadRequestException(\"CCMV2 not enabled for account.\");\n+        } else if (Tunnel.CCM == tunnel && ccmV2Enabled) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+            LOGGER.info(\"Environment is initialized with CCMV2 tunnel.\");\n+        } else {\n+            LOGGER.info(\"Environment is initialized with Direct tunnel.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3Mzg0Mw==", "bodyText": "you could fix this in a followup pr", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553873843", "createdAt": "2021-01-08T10:49:37Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,21 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        boolean ccmV2Enabled = entitlementService.ccmV2Enabled(environment.getAccountId());\n+        if (Tunnel.CCMV2 == tunnel && !ccmV2Enabled) {\n+            throw new BadRequestException(\"CCMV2 not enabled for account.\");\n+        } else if (Tunnel.CCM == tunnel && ccmV2Enabled) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+            LOGGER.info(\"Environment is initialized with CCMV2 tunnel.\");\n+        } else {\n+            LOGGER.info(\"Environment is initialized with Direct tunnel.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MzY3NA=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3NTM4Nw==", "bodyText": "ccm is different from cluster proxy right ? I mean all requests go through clusterproxy but which tunnel used would be diffferent.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553875387", "createdAt": "2021-01-08T10:52:59Z", "author": {"login": "smaniraju"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,21 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        boolean ccmV2Enabled = entitlementService.ccmV2Enabled(environment.getAccountId());\n+        if (Tunnel.CCMV2 == tunnel && !ccmV2Enabled) {\n+            throw new BadRequestException(\"CCMV2 not enabled for account.\");\n+        } else if (Tunnel.CCM == tunnel && ccmV2Enabled) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+            LOGGER.info(\"Environment is initialized with CCMV2 tunnel.\");\n+        } else {\n+            LOGGER.info(\"Environment is initialized with Direct tunnel.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MzY3NA=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NTI2OQ==", "bodyText": "talked about in private, but to have it here also. CB can connect with:\n\nDIRECT (no cluster proxy)\ncluster proxy, but without initializing tunnel via CCM, which means cluster proxy is connecting directly\nCCM, which means CB will initialize, configure cluster proxy with tunnel, and then use cluster proxy for communication", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553885269", "createdAt": "2021-01-08T11:14:47Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,21 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        boolean ccmV2Enabled = entitlementService.ccmV2Enabled(environment.getAccountId());\n+        if (Tunnel.CCMV2 == tunnel && !ccmV2Enabled) {\n+            throw new BadRequestException(\"CCMV2 not enabled for account.\");\n+        } else if (Tunnel.CCM == tunnel && ccmV2Enabled) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+            LOGGER.info(\"Environment is initialized with CCMV2 tunnel.\");\n+        } else {\n+            LOGGER.info(\"Environment is initialized with Direct tunnel.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MzY3NA=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NjA3NA==", "bodyText": "Updated log statement.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553886074", "createdAt": "2021-01-08T11:16:25Z", "author": {"login": "smaniraju"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/service/EnvironmentCreationService.java", "diffHunk": "@@ -123,6 +126,21 @@ private Environment initializeEnvironment(EnvironmentCreationDto creationDto) {\n         return environment;\n     }\n \n+    private void initializeEnvironmentTunnel(Environment environment) {\n+        Tunnel tunnel = environment.getExperimentalFeaturesJson().getTunnel();\n+        boolean ccmV2Enabled = entitlementService.ccmV2Enabled(environment.getAccountId());\n+        if (Tunnel.CCMV2 == tunnel && !ccmV2Enabled) {\n+            throw new BadRequestException(\"CCMV2 not enabled for account.\");\n+        } else if (Tunnel.CCM == tunnel && ccmV2Enabled) {\n+            ExperimentalFeatures experimentalFeaturesJson = environment.getExperimentalFeaturesJson();\n+            experimentalFeaturesJson.setTunnel(Tunnel.CCMV2);\n+            environment.setExperimentalFeaturesJson(experimentalFeaturesJson);\n+            LOGGER.info(\"Environment is initialized with CCMV2 tunnel.\");\n+        } else {\n+            LOGGER.info(\"Environment is initialized with Direct tunnel.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3MzY3NA=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NjI0OTExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDo1MDoxNVrOIQNy1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMToxNjozNlrOIQOhyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3NDEzMw==", "bodyText": "as this is a single item, the stream and list is an overkill here", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553874133", "createdAt": "2021-01-08T10:50:15Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3ODg1MA==", "bodyText": "CcmV2 Api expects List of CCMV2 Config, I will remove stream though in a follow up PR.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553878850", "createdAt": "2021-01-08T11:00:16Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3NDEzMw=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4NjE1Mg==", "bodyText": "Removed stream.", "url": "https://github.com/hortonworks/cloudbreak/pull/9674#discussion_r553886152", "createdAt": "2021-01-08T11:16:36Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/provision/clusterproxy/ClusterProxyService.java", "diffHunk": "@@ -147,6 +156,16 @@ private String getAccountId(Stack stack) {\n         return asList(gatewayTunnel, knoxTunnel);\n     }\n \n+    private List<CcmV2Config> ccmV2Configs(Stack stack) {\n+        InstanceMetaData primaryGateway = stack.getPrimaryGatewayInstance();\n+        return List.of(ServiceFamilies.GATEWAY.getDefaultPort()).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg3NDEzMw=="}, "originalCommit": {"oid": "a7e2e1bb1a7f368910b2cb9080d1b11955056a93"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3382, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}