{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTMwMTgy", "number": 9198, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1NDozM1rOEs75RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1NDozM1rOEs75RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTU0MTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/flow/TerminationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODo1NDozM1rOHgcW1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOTowNjoyM1rOHgc2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4MTA3OA==", "bodyText": "are you sure you want to include an external call in the transaction? I'm against it", "url": "https://github.com/hortonworks/cloudbreak/pull/9198#discussion_r503781078", "createdAt": "2020-10-13T08:54:33Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/flow/TerminationService.java", "diffHunk": "@@ -114,12 +114,18 @@ private void deleteOnlyIfForced(Stack stack, boolean force, String terminatedNam\n     }\n \n     private void updateToDeleteCompleted(Stack stack, String terminatedName, String statusReason) {\n-        stack.setName(terminatedName);\n-        stack.setTerminated(clock.getCurrentTimeMillis());\n-        stackService.save(stack);\n-        stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.DELETE_COMPLETED, statusReason);\n-        if (stack.getType().equals(StackType.WORKLOAD)) {\n-            grpcUmsClient.notifyResourceDeleted(stack.getResourceCrn(), MDCUtils.getRequestId());\n+        try {\n+            transactionService.required(() -> {\n+                stack.setName(terminatedName);\n+                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stackService.save(stack);\n+                stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.DELETE_COMPLETED, statusReason);\n+                if (stack.getType().equals(StackType.WORKLOAD)) {\n+                    grpcUmsClient.notifyResourceDeleted(stack.getResourceCrn(), MDCUtils.getRequestId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac5c1a5d9b45911e4089ec2432e7dae6d1d208f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4OTMxMQ==", "bodyText": "oh god! :) thanks..", "url": "https://github.com/hortonworks/cloudbreak/pull/9198#discussion_r503789311", "createdAt": "2020-10-13T09:06:23Z", "author": {"login": "sodre90"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/flow/TerminationService.java", "diffHunk": "@@ -114,12 +114,18 @@ private void deleteOnlyIfForced(Stack stack, boolean force, String terminatedNam\n     }\n \n     private void updateToDeleteCompleted(Stack stack, String terminatedName, String statusReason) {\n-        stack.setName(terminatedName);\n-        stack.setTerminated(clock.getCurrentTimeMillis());\n-        stackService.save(stack);\n-        stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.DELETE_COMPLETED, statusReason);\n-        if (stack.getType().equals(StackType.WORKLOAD)) {\n-            grpcUmsClient.notifyResourceDeleted(stack.getResourceCrn(), MDCUtils.getRequestId());\n+        try {\n+            transactionService.required(() -> {\n+                stack.setName(terminatedName);\n+                stack.setTerminated(clock.getCurrentTimeMillis());\n+                stackService.save(stack);\n+                stackUpdater.updateStackStatus(stack.getId(), DetailedStackStatus.DELETE_COMPLETED, statusReason);\n+                if (stack.getType().equals(StackType.WORKLOAD)) {\n+                    grpcUmsClient.notifyResourceDeleted(stack.getResourceCrn(), MDCUtils.getRequestId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4MTA3OA=="}, "originalCommit": {"oid": "9ac5c1a5d9b45911e4089ec2432e7dae6d1d208f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2131, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}