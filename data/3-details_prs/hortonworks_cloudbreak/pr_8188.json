{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTQ0NjM1", "number": 8188, "title": "DISTX-399 DataHub Autoscaling", "bodyText": "Periscope changes to support below features.\n\nIntroduce DistroXAutoscale Endpoint for DataHub Autoscaling.\nDisable unused AlertEndpoint.\nIntroduce Entitlements validation for DataHub Autoscaling.\nIntroduce YarnBased Autoscaling Evaluator and Monitor.\nIntroduce RemovableCluster Monitor to track and remove CB deleted clusters.\nIntroduce DistroXAutoscale endpoint tests.", "createdAt": "2020-06-01T18:30:56Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8188", "merged": true, "mergeCommit": {"oid": "743635d00e60a674055ba369867992b9197e7bb2"}, "closed": true, "closedAt": "2020-06-08T11:39:33Z", "author": {"login": "smaniraju"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnPyn-ABqjMzOTYyNjY4ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoPBJggFqTQyNTEzMDQxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e1a0285e0f70f3c90671ca536442c5394fb2879", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0e1a0285e0f70f3c90671ca536442c5394fb2879", "committedDate": "2020-06-01T13:14:44Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistrXAutoscale Endpoint for DataHub Autoscaling.\n2.  Introduce Entitlements validation for DataHub Autoscaling.\n3.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n4.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters."}, "afterCommit": {"oid": "f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4", "committedDate": "2020-06-02T07:29:54Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTY5NzU5", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#pullrequestreview-423969759", "createdAt": "2020-06-03T22:03:51Z", "commit": {"oid": "f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjowMzo1MVrOGevLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjowNjowMFrOGevOZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MzM4Ng==", "bodyText": "This should probably be 'text'", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r434883386", "createdAt": "2020-06-03T22:03:51Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/resources/schema/app/20200602071624_DISTX-399_Datahub_Autoscaling_Changes.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+-- // DISTX-399 Datahub Autoscaling Changes\n+-- Migration SQL that makes the change goes here.\n+\n+CREATE TABLE IF NOT EXISTS loadalert (\n+    id bigint NOT NULL,\n+    description character varying(255),\n+    name character varying(255),\n+    load_alert_config character varying(1024),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NDE5Nw==", "bodyText": "May have asked this earlier; is this annotation required?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r434884197", "createdAt": "2020-06-03T22:06:00Z", "author": {"login": "sidseth"}, "path": "autoscale/src/test/java/com/sequenceiq/periscope/modul/rejected/RejectedThreadContext.java", "diffHunk": "@@ -59,6 +60,7 @@\n     @MockBean({Clock.class, ClusterService.class, CloudbreakClientConfiguration.class,\n             MetricUtils.class, InternalCrnBuilder.class, FailedNodeRepository.class})\n     @EnableAsync\n+    @Profile(\"devtest\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/f681883d1c0c19cfa91ecdd5ef869c12f8a0ebd4", "committedDate": "2020-06-02T07:29:54Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}, "afterCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d8ee7e1c27320672da427a3b05c3bc5396700d34", "committedDate": "2020-06-04T07:20:07Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzUzMTMy", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#pullrequestreview-424353132", "createdAt": "2020-06-04T11:35:27Z", "commit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMTozNToyOFrOGfBsKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDoxMzo0OVrOGfIC8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NjcyOQ==", "bodyText": "our url patter is separated by _, please change to autoscale_config and the other URL as well", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435186729", "createdAt": "2020-06-04T11:35:28Z", "author": {"login": "topolyai5"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/v1/DistroXAutoScaleClusterV1Endpoint.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.periscope.api.endpoint.v1;\n+\n+import static com.sequenceiq.periscope.doc.ApiDescription.CLUSTERS_DESCRIPTION;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.sequenceiq.periscope.api.endpoint.validator.ValidDistroXAutoscaleRequest;\n+import com.sequenceiq.periscope.api.model.AutoscaleClusterState;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterResponse;\n+import com.sequenceiq.periscope.doc.ApiDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterOpDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterNotes;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+\n+@Path(\"/v1/distrox\")\n+@Consumes(MediaType.APPLICATION_JSON)\n+@Api(value = \"/v1/distrox\", description = CLUSTERS_DESCRIPTION, protocols = \"http,https\", consumes = MediaType.APPLICATION_JSON)\n+public interface DistroXAutoScaleClusterV1Endpoint {\n+\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET_ALL, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    List<DistroXAutoscaleClusterResponse> getClusters();\n+\n+    @GET\n+    @Path(\"crn/{crn}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    DistroXAutoscaleClusterResponse getClusterByCrn(@PathParam(\"crn\") String clusterCrn);\n+\n+    @GET\n+    @Path(\"name/{name}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    DistroXAutoscaleClusterResponse getClusterByName(@PathParam(\"name\") String clusterName);\n+\n+    @POST\n+    @Path(\"crn/{crn}/autoscaleconfig\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NzM4Ng==", "bodyText": "separate by _", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435187386", "createdAt": "2020-06-04T11:36:43Z", "author": {"login": "topolyai5"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/v1/DistroXAutoScaleClusterV1Endpoint.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.periscope.api.endpoint.v1;\n+\n+import static com.sequenceiq.periscope.doc.ApiDescription.CLUSTERS_DESCRIPTION;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import com.sequenceiq.periscope.api.endpoint.validator.ValidDistroXAutoscaleRequest;\n+import com.sequenceiq.periscope.api.model.AutoscaleClusterState;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterResponse;\n+import com.sequenceiq.periscope.doc.ApiDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterOpDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterNotes;\n+\n+import io.swagger.annotations.Api;\n+import io.swagger.annotations.ApiOperation;\n+\n+@Path(\"/v1/distrox\")\n+@Consumes(MediaType.APPLICATION_JSON)\n+@Api(value = \"/v1/distrox\", description = CLUSTERS_DESCRIPTION, protocols = \"http,https\", consumes = MediaType.APPLICATION_JSON)\n+public interface DistroXAutoScaleClusterV1Endpoint {\n+\n+    @GET\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET_ALL, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    List<DistroXAutoscaleClusterResponse> getClusters();\n+\n+    @GET\n+    @Path(\"crn/{crn}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    DistroXAutoscaleClusterResponse getClusterByCrn(@PathParam(\"crn\") String clusterCrn);\n+\n+    @GET\n+    @Path(\"name/{name}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_GET, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    DistroXAutoscaleClusterResponse getClusterByName(@PathParam(\"name\") String clusterName);\n+\n+    @POST\n+    @Path(\"crn/{crn}/autoscaleconfig\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(value = ClusterOpDescription.CLUSTER_UPDATE_AUTOSCALE_CONFIG, produces = MediaType.APPLICATION_JSON, notes = DistroXClusterNotes.NOTES)\n+    DistroXAutoscaleClusterResponse updateAutoscaleConfigByClusterCrn(@PathParam(\"crn\") String clusterCrn,\n+            @ValidDistroXAutoscaleRequest @Valid DistroXAutoscaleClusterRequest autoscaleClusterRequest);\n+\n+    @POST\n+    @Path(\"name/{name}/autoscaleconfig\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDA0Ng==", "bodyText": "why do you use fully qualified name?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435190046", "createdAt": "2020-06-04T11:42:02Z", "author": {"login": "topolyai5"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+\n+public class DistroXAutoscaleRequestValidator\n+        implements ConstraintValidator<ValidDistroXAutoscaleRequest, DistroXAutoscaleClusterRequest> {\n+\n+    @Override\n+    public boolean isValid(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+\n+        if (!request.getLoadAlertRequests().isEmpty() &&\n+                !request.getTimeAlertRequests().isEmpty()) {\n+            String message = String.format(\"Cluster can be configured with only one type of autoscaling policies.\");\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"autoscalingPolicy\")\n+                    .disableDefaultConstraintViolation();\n+            return false;\n+        }\n+\n+        if (!request.getLoadAlertRequests().isEmpty()) {\n+            return isValidLoadAlertRequests(request, context);\n+        }\n+\n+        return true;\n+    }\n+\n+    private Boolean isValidLoadAlertRequests(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+        Set<String> distinctLoadBasedHostGroups = new HashSet<>();\n+        Set<AdjustmentType> distinctLoadBasedAdjustmentTypes = new HashSet<>();\n+\n+        if (request.getLoadAlertRequests().size() > 1) {\n+            String message = String.format(\"LoadBased autoscaling currently supports a single HostGroup in a Cluster.\");\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"loadAlertRequests\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE5MDc2Mg==", "bodyText": "you can do this in the same map", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435190762", "createdAt": "2020-06-04T11:43:25Z", "author": {"login": "topolyai5"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/endpoint/validator/DistroXAutoscaleRequestValidator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.periscope.api.endpoint.validator;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+\n+import com.sequenceiq.periscope.api.model.AdjustmentType;\n+import com.sequenceiq.periscope.api.model.DistroXAutoscaleClusterRequest;\n+\n+public class DistroXAutoscaleRequestValidator\n+        implements ConstraintValidator<ValidDistroXAutoscaleRequest, DistroXAutoscaleClusterRequest> {\n+\n+    @Override\n+    public boolean isValid(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+\n+        if (!request.getLoadAlertRequests().isEmpty() &&\n+                !request.getTimeAlertRequests().isEmpty()) {\n+            String message = String.format(\"Cluster can be configured with only one type of autoscaling policies.\");\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"autoscalingPolicy\")\n+                    .disableDefaultConstraintViolation();\n+            return false;\n+        }\n+\n+        if (!request.getLoadAlertRequests().isEmpty()) {\n+            return isValidLoadAlertRequests(request, context);\n+        }\n+\n+        return true;\n+    }\n+\n+    private Boolean isValidLoadAlertRequests(DistroXAutoscaleClusterRequest request, ConstraintValidatorContext context) {\n+        Set<String> distinctLoadBasedHostGroups = new HashSet<>();\n+        Set<AdjustmentType> distinctLoadBasedAdjustmentTypes = new HashSet<>();\n+\n+        if (request.getLoadAlertRequests().size() > 1) {\n+            String message = String.format(\"LoadBased autoscaling currently supports a single HostGroup in a Cluster.\");\n+            com.sequenceiq.cloudbreak.validation.ValidatorUtil.addConstraintViolation(context, message, \"loadAlertRequests\")\n+                    .disableDefaultConstraintViolation();\n+            return false;\n+        }\n+\n+        Set<String> duplicateHostGroups =\n+                request.getLoadAlertRequests().stream()\n+                        .map(loadAlertRequest -> loadAlertRequest.getScalingPolicy())\n+                        .map(scalingPolicyRequest -> {\n+                            distinctLoadBasedAdjustmentTypes.add(scalingPolicyRequest.getAdjustmentType());\n+                            return scalingPolicyRequest;\n+                        })\n+                        .map(scalingPolicyRequest -> scalingPolicyRequest.getHostGroup())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3Njg3Ng==", "bodyText": "where do you use h2? Are our schema SQL running on h2?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435276876", "createdAt": "2020-06-04T13:55:28Z", "author": {"login": "topolyai5"}, "path": "autoscale/build.gradle", "diffHunk": "@@ -164,6 +164,7 @@ dependencies {\n     testCompile group: 'org.powermock',             name: 'powermock-api-mockito2'\n     testCompile group: 'org.ow2.asm',               name: 'asm'\n     testCompile group: 'com.openpojo',              name: 'openpojo'\n+    testCompile group: \"com.h2database\",            name: \"h2\",     version: h2databaseVersion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MTQ5Mw==", "bodyText": "You can use the DefaultEnumConverter", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435281493", "createdAt": "2020-06-04T14:01:34Z", "author": {"login": "topolyai5"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/db/StackTypeAttributeConverter.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.periscope.converter.db;\n+\n+import javax.persistence.AttributeConverter;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.StackType;\n+\n+public class StackTypeAttributeConverter implements AttributeConverter<StackType, String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NDMwMw==", "bodyText": "why not null?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435284303", "createdAt": "2020-06-04T14:05:06Z", "author": {"login": "topolyai5"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnLoadEvaluator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package com.sequenceiq.periscope.monitor.evaluator.load;\n+\n+import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackV4Response;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.periscope.domain.Cluster;\n+import com.sequenceiq.periscope.domain.LoadAlert;\n+import com.sequenceiq.periscope.domain.LoadAlertConfiguration;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response.DecommissionCandidate;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response.NewNodeManagerCandidates;\n+import com.sequenceiq.periscope.monitor.client.YarnMetricsClient;\n+import com.sequenceiq.periscope.monitor.context.ClusterIdEvaluatorContext;\n+import com.sequenceiq.periscope.monitor.context.EvaluatorContext;\n+import com.sequenceiq.periscope.monitor.evaluator.EvaluatorExecutor;\n+import com.sequenceiq.periscope.monitor.evaluator.EventPublisher;\n+import com.sequenceiq.periscope.monitor.event.ScalingEvent;\n+import com.sequenceiq.periscope.monitor.event.UpdateFailedEvent;\n+import com.sequenceiq.periscope.monitor.handler.CloudbreakCommunicator;\n+import com.sequenceiq.periscope.repository.LoadAlertRepository;\n+import com.sequenceiq.periscope.service.ClusterService;\n+import com.sequenceiq.periscope.utils.StackResponseUtils;\n+\n+@Component(\"YarnLoadEvaluator\")\n+@Scope(\"prototype\")\n+public class YarnLoadEvaluator extends EvaluatorExecutor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(YarnLoadEvaluator.class);\n+\n+    private static final String EVALUATOR_NAME = YarnLoadEvaluator.class.getName();\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    @Inject\n+    private LoadAlertRepository alertRepository;\n+\n+    @Inject\n+    private EventPublisher eventPublisher;\n+\n+    @Inject\n+    private YarnMetricsClient yarnMetricsClient;\n+\n+    @Inject\n+    private StackResponseUtils stackResponseUtils;\n+\n+    @Inject\n+    private CloudbreakCommunicator cloudbreakCommunicator;\n+\n+    private long clusterId;\n+\n+    private Cluster cluster;\n+\n+    private LoadAlert loadAlert;\n+\n+    private LoadAlertConfiguration loadAlertConfiguration;\n+\n+    private String policyHostGroup;\n+\n+    @Nonnull\n+    @Override\n+    public EvaluatorContext getContext() {\n+        return new ClusterIdEvaluatorContext(clusterId);\n+    }\n+\n+    @Override\n+    public void setContext(EvaluatorContext context) {\n+        clusterId = (long) context.getData();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return EVALUATOR_NAME;\n+    }\n+\n+    @Override\n+    protected void execute() {\n+        long start = System.currentTimeMillis();\n+        String stackCrn = \"NotInitialized\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NTcwOQ==", "bodyText": "can you break up smaller functions?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435285709", "createdAt": "2020-06-04T14:06:52Z", "author": {"login": "topolyai5"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/load/YarnLoadEvaluator.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package com.sequenceiq.periscope.monitor.evaluator.load;\n+\n+import static com.sequenceiq.periscope.monitor.evaluator.ScalingConstants.DEFAULT_MAX_SCALE_UP_STEP_SIZE;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.response.StackV4Response;\n+import com.sequenceiq.cloudbreak.logger.MDCBuilder;\n+import com.sequenceiq.periscope.domain.Cluster;\n+import com.sequenceiq.periscope.domain.LoadAlert;\n+import com.sequenceiq.periscope.domain.LoadAlertConfiguration;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response.DecommissionCandidate;\n+import com.sequenceiq.periscope.model.yarn.YarnScalingServiceV1Response.NewNodeManagerCandidates;\n+import com.sequenceiq.periscope.monitor.client.YarnMetricsClient;\n+import com.sequenceiq.periscope.monitor.context.ClusterIdEvaluatorContext;\n+import com.sequenceiq.periscope.monitor.context.EvaluatorContext;\n+import com.sequenceiq.periscope.monitor.evaluator.EvaluatorExecutor;\n+import com.sequenceiq.periscope.monitor.evaluator.EventPublisher;\n+import com.sequenceiq.periscope.monitor.event.ScalingEvent;\n+import com.sequenceiq.periscope.monitor.event.UpdateFailedEvent;\n+import com.sequenceiq.periscope.monitor.handler.CloudbreakCommunicator;\n+import com.sequenceiq.periscope.repository.LoadAlertRepository;\n+import com.sequenceiq.periscope.service.ClusterService;\n+import com.sequenceiq.periscope.utils.StackResponseUtils;\n+\n+@Component(\"YarnLoadEvaluator\")\n+@Scope(\"prototype\")\n+public class YarnLoadEvaluator extends EvaluatorExecutor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(YarnLoadEvaluator.class);\n+\n+    private static final String EVALUATOR_NAME = YarnLoadEvaluator.class.getName();\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    @Inject\n+    private LoadAlertRepository alertRepository;\n+\n+    @Inject\n+    private EventPublisher eventPublisher;\n+\n+    @Inject\n+    private YarnMetricsClient yarnMetricsClient;\n+\n+    @Inject\n+    private StackResponseUtils stackResponseUtils;\n+\n+    @Inject\n+    private CloudbreakCommunicator cloudbreakCommunicator;\n+\n+    private long clusterId;\n+\n+    private Cluster cluster;\n+\n+    private LoadAlert loadAlert;\n+\n+    private LoadAlertConfiguration loadAlertConfiguration;\n+\n+    private String policyHostGroup;\n+\n+    @Nonnull\n+    @Override\n+    public EvaluatorContext getContext() {\n+        return new ClusterIdEvaluatorContext(clusterId);\n+    }\n+\n+    @Override\n+    public void setContext(EvaluatorContext context) {\n+        clusterId = (long) context.getData();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return EVALUATOR_NAME;\n+    }\n+\n+    @Override\n+    protected void execute() {\n+        long start = System.currentTimeMillis();\n+        String stackCrn = \"NotInitialized\";\n+        try {\n+            MDCBuilder.buildMdcContext(cluster);\n+            cluster = clusterService.findById(clusterId);\n+            stackCrn = cluster.getStackCrn();\n+            loadAlert = cluster.getLoadAlerts().stream().findFirst().get();\n+            loadAlertConfiguration = loadAlert.getLoadAlertConfiguration();\n+            policyHostGroup = loadAlert.getScalingPolicy().getHostGroup();\n+\n+            if (isCoolDownTimeElapsed(cluster.getStackCrn(), loadAlertConfiguration.getCoolDownMillis(),\n+                    cluster.getLastScalingActivity())) {\n+                pollYarnMetricsAndScaleCluster();\n+            }\n+        } catch (Exception ex) {\n+            LOGGER.info(\"Failed to process load alert for Cluster {}, exception {}\", stackCrn, ex);\n+            eventPublisher.publishEvent(new UpdateFailedEvent(clusterId));\n+        } finally {\n+            LOGGER.debug(\"Finished loadEvaluator for cluster {} in {} ms\", stackCrn, System.currentTimeMillis() - start);\n+        }\n+    }\n+\n+    protected void pollYarnMetricsAndScaleCluster() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4ODY2OQ==", "bodyText": "can you create a list with the suspended statuses and check whether contains or not?", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435288669", "createdAt": "2020-06-04T14:10:51Z", "author": {"login": "topolyai5"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/handler/UpdateFailedHandler.java", "diffHunk": "@@ -43,57 +41,53 @@\n     @Inject\n     private CloudbreakCommunicator cloudbreakCommunicator;\n \n-    @Inject\n-    private FailedNodeRepository failedNodeRepository;\n-\n     private final Map<Long, Integer> updateFailures = new ConcurrentHashMap<>();\n \n     @Override\n     public void onApplicationEvent(UpdateFailedEvent event) {\n         long autoscaleClusterId = event.getClusterId();\n-        LOGGER.debug(\"Cluster {} failed\", autoscaleClusterId);\n         Cluster cluster = clusterService.findById(autoscaleClusterId);\n         if (cluster == null) {\n             return;\n         }\n         MDCBuilder.buildMdcContext(cluster);\n+        LOGGER.debug(\"Analysing Cluster Status '{}' \", cluster.getStackCrn());\n         StackV4Response stackResponse = getStackById(cluster.getStackCrn());\n-        if (stackResponse == null) {\n-            LOGGER.debug(\"Suspending cluster {}\", autoscaleClusterId);\n+        String stackStatus = getStackStatus(stackResponse);\n+        if (stackResponse == null || stackStatus.startsWith(STOPPED_STATUSES_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MDg2NA==", "bodyText": "It much better: ClusterPertain findByUserCrn(String userCrn) and should be work", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#discussion_r435290864", "createdAt": "2020-06-04T14:13:49Z", "author": {"login": "topolyai5"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterPertainRepository.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.sequenceiq.periscope.repository;\n+\n+import java.util.List;\n+\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.repository.CrudRepository;\n+import org.springframework.data.repository.query.Param;\n+\n+import com.sequenceiq.cloudbreak.workspace.repository.EntityType;\n+import com.sequenceiq.periscope.domain.ClusterPertain;\n+\n+@EntityType(entityClass = ClusterPertain.class)\n+public interface ClusterPertainRepository extends CrudRepository<ClusterPertain, Long> {\n+    List<ClusterPertain> findByUserCrn(@Param(\"userCrn\") String userCrn, Pageable page);\n+\n+    default List<ClusterPertain> findByUserCrn(String userCrn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fbe69660e0bef471e0c0ffa198d32e7f3058c3", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e1fbe69660e0bef471e0c0ffa198d32e7f3058c3", "committedDate": "2020-06-05T07:56:08Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8ee7e1c27320672da427a3b05c3bc5396700d34", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d8ee7e1c27320672da427a3b05c3bc5396700d34", "committedDate": "2020-06-04T07:20:07Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}, "afterCommit": {"oid": "e1fbe69660e0bef471e0c0ffa198d32e7f3058c3", "author": {"user": {"login": "smaniraju", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e1fbe69660e0bef471e0c0ffa198d32e7f3058c3", "committedDate": "2020-06-05T07:56:08Z", "message": "DISTX-399 DataHub Autoscaling\n\n1.  Introduce DistroXAutoscale Endpoint for DataHub Autoscaling.\n2.  Disable unused AlertEndpoint.\n3.  Introduce Entitlements validation for DataHub Autoscaling.\n4.  Introduce YarnBased Autoscaling Evaluator and Monitor.\n5.  Introduce RemovableCluster Monitor to track and remove CB deleted clusters.\n6.  Introduce DistroXAutoscale endpoint tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MTMwNDEy", "url": "https://github.com/hortonworks/cloudbreak/pull/8188#pullrequestreview-425130412", "createdAt": "2020-06-05T09:12:53Z", "commit": {"oid": "e1fbe69660e0bef471e0c0ffa198d32e7f3058c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1774, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}