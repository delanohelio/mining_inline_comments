{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzIxMTYy", "number": 8762, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0NDo1OFrOEWtIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0NDo1OFrOEWtIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjQzNTcxOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/YcloudHybridCloudTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0NDo1OFrOG-GDKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo0NDo1OFrOG-GDKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2NDAwOQ==", "bodyText": "I think you should test that both MASTER and IDBROKER instance groups are available at the same time.", "url": "https://github.com/hortonworks/cloudbreak/pull/8762#discussion_r467764009", "createdAt": "2020-08-10T08:44:58Z", "author": {"login": "pkedvessy"}, "path": "integration-test/src/main/java/com/sequenceiq/it/cloudbreak/testcase/mock/YcloudHybridCloudTest.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.sequenceiq.it.cloudbreak.testcase.mock;\n+\n+import static com.sequenceiq.it.cloudbreak.cloud.HostGroupType.IDBROKER;\n+import static com.sequenceiq.it.cloudbreak.cloud.HostGroupType.MASTER;\n+import static com.sequenceiq.it.cloudbreak.context.RunningParameter.key;\n+import static java.util.Objects.isNull;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.Test;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.StackV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.ClusterV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.cm.ClouderaManagerV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.cm.product.ClouderaManagerProductV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.cluster.cm.repository.ClouderaManagerRepositoryV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.instancegroup.InstanceGroupV4Request;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.util.responses.ClouderaManagerStackDescriptorV4Response;\n+import com.sequenceiq.environment.api.v1.environment.model.response.EnvironmentStatus;\n+import com.sequenceiq.environment.api.v1.environment.model.response.SimpleEnvironmentResponse;\n+import com.sequenceiq.it.cloudbreak.EnvironmentClient;\n+import com.sequenceiq.it.cloudbreak.SdxClient;\n+import com.sequenceiq.it.cloudbreak.client.EnvironmentTestClient;\n+import com.sequenceiq.it.cloudbreak.client.SdxTestClient;\n+import com.sequenceiq.it.cloudbreak.client.UtilTestClient;\n+import com.sequenceiq.it.cloudbreak.context.Description;\n+import com.sequenceiq.it.cloudbreak.context.MockedTestContext;\n+import com.sequenceiq.it.cloudbreak.context.RunningParameter;\n+import com.sequenceiq.it.cloudbreak.context.TestContext;\n+import com.sequenceiq.it.cloudbreak.dto.ClouderaManagerProductTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.ClouderaManagerRepositoryTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.ClouderaManagerTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.ClusterTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.InstanceGroupTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.environment.EnvironmentTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.sdx.SdxInternalTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.stack.StackTestDto;\n+import com.sequenceiq.it.cloudbreak.dto.util.StackMatrixTestDto;\n+import com.sequenceiq.it.cloudbreak.exception.TestFailException;\n+import com.sequenceiq.it.cloudbreak.testcase.AbstractIntegrationTest;\n+import com.sequenceiq.sdx.api.model.SdxClusterStatusResponse;\n+import com.sequenceiq.sdx.api.model.SdxInternalClusterRequest;\n+\n+public class YcloudHybridCloudTest extends AbstractIntegrationTest {\n+\n+    private static final String CHILD_ENVIRONMENT = \"childEnvironment\";\n+\n+    private static final String MASTER_INSTANCE_GROUP = \"master\";\n+\n+    private static final String IDBROKER_INSTANCE_GROUP = \"idbroker\";\n+\n+    private static final String CDH = \"CDH\";\n+\n+    private static final String REDHAT7 = \"redhat7\";\n+\n+    private static final String CM_VERSION_KEY = \"cmVersion\";\n+\n+    private static final String CM_REPOSITORY_BASE_URL_KEY = \"cmRepositoryBaseUrl\";\n+\n+    private static final String CDH_VERSION_KEY = \"cdhVersion\";\n+\n+    private static final String CDH_PARCEL_KEY = \"cdhParcel\";\n+\n+    private final Map<String, String> validationParameters = new HashMap<>();\n+\n+    @Inject\n+    private SdxTestClient sdxTestClient;\n+\n+    @Inject\n+    private EnvironmentTestClient environmentTestClient;\n+\n+    @Inject\n+    private UtilTestClient utilTestClient;\n+\n+    protected void setupTest(TestContext testContext) {\n+        createDefaultUser(testContext);\n+        initializeDefaultBlueprints(testContext);\n+        createDefaultCredential(testContext);\n+        createEnvironmentWithNetworkAndFreeIpa(testContext);\n+        createDefaultImageCatalog(testContext);\n+    }\n+\n+    @Test(dataProvider = TEST_CONTEXT_WITH_MOCK)\n+    @Description(\n+            given = \"there are an available parent and child environments\",\n+            when = \"a valid SDX create request is sent to the child environment\",\n+            then = \"environment should be created and parent environment should be referenced in the child environment\",\n+            and = \"SDX is created with the proper information\")\n+    public void testCreateSdxOnChildEnvironment(MockedTestContext testContext) {\n+        validateParentEnvironment(testContext);\n+        createAndValidateChildEnvironment(testContext);\n+        createAndValidateSdx(testContext);\n+    }\n+\n+    @AfterMethod(alwaysRun = true)\n+    public void tearDown(Object[] data) {\n+        TestContext testContext = (TestContext) data[0];\n+\n+        testContext\n+                .given(CHILD_ENVIRONMENT, EnvironmentTestDto.class)\n+                .when(environmentTestClient.cascadingDelete(), RunningParameter.key(CHILD_ENVIRONMENT))\n+                .await(EnvironmentStatus.ARCHIVED, RunningParameter.key(CHILD_ENVIRONMENT))\n+                .validate();\n+\n+        testContext.cleanupTestContext();\n+    }\n+\n+    private void validateParentEnvironment(TestContext testContext) {\n+        testContext\n+                .given(EnvironmentTestDto.class)\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName);\n+    }\n+\n+    private void createAndValidateChildEnvironment(TestContext testContext)  {\n+        testContext\n+                .given(CHILD_ENVIRONMENT, EnvironmentTestDto.class)\n+                    .withParentEnvironment()\n+                .when(environmentTestClient.create(), RunningParameter.key(CHILD_ENVIRONMENT))\n+                .await(EnvironmentStatus.AVAILABLE, RunningParameter.key(CHILD_ENVIRONMENT))\n+                .when(environmentTestClient.describe(), RunningParameter.key(CHILD_ENVIRONMENT))\n+                .when(environmentTestClient.list())\n+                .then(this::checkEnvIsListedByNameAndParentName)\n+                .validate();\n+    }\n+\n+    private void createAndValidateSdx(TestContext testContext) {\n+        String sdxInternal = resourcePropertyProvider().getName();\n+        String clouderaManager = resourcePropertyProvider().getName();\n+        String cluster = resourcePropertyProvider().getName();\n+        String cmProduct = resourcePropertyProvider().getName();\n+        String cmRepository = resourcePropertyProvider().getName();\n+        String stack = resourcePropertyProvider().getName();\n+\n+        testContext\n+                .given(StackMatrixTestDto.class)\n+                .when(utilTestClient.stackMatrixV4())\n+                .then((tc, dto, client) -> {\n+                    ClouderaManagerStackDescriptorV4Response response = dto.getResponse().getCdh().get(commonClusterManagerProperties().getRuntimeVersion());\n+                    validationParameters.put(CM_VERSION_KEY, response.getClouderaManager().getVersion());\n+                    validationParameters.put(CM_REPOSITORY_BASE_URL_KEY, response.getClouderaManager().getRepository().get(REDHAT7).getBaseUrl());\n+                    validationParameters.put(CDH_VERSION_KEY, response.getVersion());\n+                    validationParameters.put(CDH_PARCEL_KEY, response.getRepository().getStack().get(REDHAT7));\n+                    return dto;\n+                })\n+                .validate();\n+\n+        testContext\n+                .given(cmProduct, ClouderaManagerProductTestDto.class)\n+                    .withName(CDH)\n+                    .withVersion(validationParameters.get(CDH_VERSION_KEY))\n+                    .withParcel(validationParameters.get(CDH_PARCEL_KEY))\n+                .given(cmRepository, ClouderaManagerRepositoryTestDto.class)\n+                    .withVersion(validationParameters.get(CM_VERSION_KEY))\n+                    .withBaseUrl(validationParameters.get(CM_REPOSITORY_BASE_URL_KEY))\n+                .given(clouderaManager, ClouderaManagerTestDto.class)\n+                    .withClouderaManagerProduct(cmProduct)\n+                    .withClouderaManagerRepository(cmRepository)\n+                .given(cluster, ClusterTestDto.class)\n+                    .withBlueprintName(getDefaultSDXBlueprintName())\n+                    .withValidateBlueprint(Boolean.FALSE)\n+                    .withClouderaManager(clouderaManager)\n+                .given(MASTER_INSTANCE_GROUP, InstanceGroupTestDto.class).withHostGroup(MASTER).withNodeCount(1)\n+                .given(IDBROKER_INSTANCE_GROUP, InstanceGroupTestDto.class).withHostGroup(IDBROKER).withNodeCount(1)\n+                .given(stack, StackTestDto.class)\n+                    .withCluster(cluster)\n+                    .withInstanceGroups(MASTER_INSTANCE_GROUP, IDBROKER_INSTANCE_GROUP)\n+                .given(sdxInternal, SdxInternalTestDto.class)\n+                    .withStackRequest(key(cluster), key(stack))\n+                    .withEnvironmentKey(RunningParameter.key(CHILD_ENVIRONMENT))\n+                .when(sdxTestClient.createInternal(), key(sdxInternal))\n+                .awaitForFlow(key(sdxInternal))\n+                .await(SdxClusterStatusResponse.RUNNING)\n+                .then(this::validateRequestParameters)\n+                .validate();\n+    }\n+\n+    private String getDefaultSDXBlueprintName() {\n+        return commonClusterManagerProperties().getInternalSdxBlueprintName();\n+    }\n+\n+    private EnvironmentTestDto checkEnvIsListedByNameAndParentName(TestContext testContext,\n+            EnvironmentTestDto environment,\n+            EnvironmentClient environmentClient) {\n+        Collection<SimpleEnvironmentResponse> simpleEnvironmentV4Response = environment.getResponseSimpleEnvSet();\n+        if (isNull(simpleEnvironmentV4Response)) {\n+            throw new TestFailException(\"Environment list response is missing.\");\n+        }\n+        boolean listed = simpleEnvironmentV4Response.stream()\n+                .anyMatch(environmentResponse -> nameEquals(environment, environmentResponse) && parentNameEquals(environment, environmentResponse));\n+        if (!listed) {\n+            throw new TestFailException(\"Environment is not listed\");\n+        }\n+        return environment;\n+    }\n+\n+    private boolean nameEquals(EnvironmentTestDto environment, SimpleEnvironmentResponse environmentResponse) {\n+        return environment.getName().equals(environmentResponse.getName());\n+    }\n+\n+    private boolean parentNameEquals(EnvironmentTestDto environment, SimpleEnvironmentResponse environmentResponse) {\n+        return isNull(environment.getParentEnvironmentName()) && isNull(environmentResponse.getParentEnvironmentName()) ||\n+                environment.getParentEnvironmentName().equals(environmentResponse.getParentEnvironmentName());\n+    }\n+\n+    private SdxInternalTestDto validateRequestParameters(TestContext tc, SdxInternalTestDto dto, SdxClient client) {\n+        assertNotNull(dto);\n+        SdxInternalClusterRequest sdxRequest = dto.getRequest();\n+        assertNotNull(sdxRequest);\n+        StackV4Request stackRequest = sdxRequest.getStackV4Request();\n+        assertNotNull(stackRequest);\n+        ClusterV4Request clusterRequest = stackRequest.getCluster();\n+        assertNotNull(clusterRequest);\n+        ClouderaManagerV4Request cmRequest = clusterRequest.getCm();\n+        assertNotNull(cmRequest);\n+\n+        validateInstanceGroups(stackRequest.getInstanceGroups());\n+        validateRepository(cmRequest.getRepository());\n+        validateProducts(cmRequest.getProducts());\n+\n+        return dto;\n+    }\n+\n+    private void validateInstanceGroups(List<InstanceGroupV4Request> instanceGroups) {\n+        assertNotNull(instanceGroups);\n+        assertEquals(\"The result instance group list has \" + instanceGroups.size() + \" items instead of 2\", 2, instanceGroups.size());\n+        assertTrue(instanceGroups.stream().anyMatch(ig -> ig.getName().equals(MASTER_INSTANCE_GROUP) || ig.getName().equals(IDBROKER_INSTANCE_GROUP)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1dcc6ad5248094a9e02dee002f52d77f08bf9b"}, "originalPosition": 236}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2367, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}