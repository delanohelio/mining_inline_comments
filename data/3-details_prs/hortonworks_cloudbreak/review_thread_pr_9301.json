{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNzIwMzI5", "number": 9301, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1OToyNVrOEykiaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo0NjoyOFrOEyurCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDYyODkxOnYy", "diffSide": "RIGHT", "path": "freeipa-client/src/test/java/com/sequenceiq/freeipa/client/FreeIpaClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTo1OToyNVrOHpSlow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTowODoxM1rOHpgPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODIxMQ==", "bodyText": "nit: if you are adding the MockitoExtension, can you pull this up to a class field and add the @mock annotation?", "url": "https://github.com/hortonworks/cloudbreak/pull/9301#discussion_r513058211", "createdAt": "2020-10-27T21:59:25Z", "author": {"login": "handavid"}, "path": "freeipa-client/src/test/java/com/sequenceiq/freeipa/client/FreeIpaClientTest.java", "diffHunk": "@@ -20,8 +29,8 @@ void setUp() {\n                 mock(JsonRpcHttpClient.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3080f84ecc4770a30a6f6b90654427e12d03035"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MTgyMQ==", "bodyText": "yep", "url": "https://github.com/hortonworks/cloudbreak/pull/9301#discussion_r513281821", "createdAt": "2020-10-28T09:08:13Z", "author": {"login": "attilapalfi92"}, "path": "freeipa-client/src/test/java/com/sequenceiq/freeipa/client/FreeIpaClientTest.java", "diffHunk": "@@ -20,8 +29,8 @@ void setUp() {\n                 mock(JsonRpcHttpClient.class),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1ODIxMQ=="}, "originalCommit": {"oid": "c3080f84ecc4770a30a6f6b90654427e12d03035"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDYzNzkwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjowMTo0OVrOHpSqsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTowODozMVrOHpgP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1OTUwNA==", "bodyText": "nit: all other parameters are each on their own lines.", "url": "https://github.com/hortonworks/cloudbreak/pull/9301#discussion_r513059504", "createdAt": "2020-10-27T22:01:49Z", "author": {"login": "handavid"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -211,15 +216,15 @@ private FreeIpaClientBuilder getFreeIpaClientBuilderForClusterProxy(Stack stack,\n                 additionalHeadersStickySessionFirstRpc,\n                 additionalHeadersStickySession,\n                 stickyIdHeader,\n-                CLUSTER_PROXY_ERROR_LISTENER);\n+                CLUSTER_PROXY_ERROR_LISTENER, tracer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3080f84ecc4770a30a6f6b90654427e12d03035"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MjAyMA==", "bodyText": "indeed, I'm fixing this", "url": "https://github.com/hortonworks/cloudbreak/pull/9301#discussion_r513282020", "createdAt": "2020-10-28T09:08:31Z", "author": {"login": "attilapalfi92"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -211,15 +216,15 @@ private FreeIpaClientBuilder getFreeIpaClientBuilderForClusterProxy(Stack stack,\n                 additionalHeadersStickySessionFirstRpc,\n                 additionalHeadersStickySession,\n                 stickyIdHeader,\n-                CLUSTER_PROXY_ERROR_LISTENER);\n+                CLUSTER_PROXY_ERROR_LISTENER, tracer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA1OTUwNA=="}, "originalCommit": {"oid": "c3080f84ecc4770a30a6f6b90654427e12d03035"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjI4OTM5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/tracing/TracingUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo0NjoyOFrOHphwbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo0NjoyOFrOHphwbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMwNjczNQ==", "bodyText": "if I see it well this is almost the same as initSpan, except it will return Optional.empty() if tracer.activeSpan() is null\nCould you refactor this part to reflect this logic?", "url": "https://github.com/hortonworks/cloudbreak/pull/9301#discussion_r513306735", "createdAt": "2020-10-28T09:46:28Z", "author": {"login": "lacikaaa"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/tracing/TracingUtil.java", "diffHunk": "@@ -25,6 +29,25 @@\n     private TracingUtil() {\n     }\n \n+    public static Span initSpan(Tracer tracer, String component, String operation) {\n+        Span activeSpan = tracer.activeSpan();\n+        Span span = tracer.buildSpan(component + \" - \" + operation)\n+                .addReference(References.FOLLOWS_FROM, activeSpan != null ? activeSpan.context() : null)\n+                .start();\n+        span.setTag(TracingUtil.COMPONENT, component);\n+        return span;\n+    }\n+\n+    public static Optional<Span> initOptionalSpan(Tracer tracer, String component, String operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e78bcd7dba64ad8c1bddec761129da7e5f1fed0e"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2056, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}