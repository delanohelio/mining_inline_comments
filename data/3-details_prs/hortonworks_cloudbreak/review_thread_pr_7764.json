{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTkzNDQy", "number": 7764, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1Njo0NFrODwcSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1Njo0NFrODwcSKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTIxNjQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/sequenceiq/cloudbreak/service/stack/flow/StackOperationServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1Njo0NFrOGDciEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTowMjozNFrOGDcyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NjM4Ng==", "bodyText": "pls add  verify(stackUpdater, never()).updateStackStatus(any(), any()) here", "url": "https://github.com/hortonworks/cloudbreak/pull/7764#discussion_r406266386", "createdAt": "2020-04-09T14:56:44Z", "author": {"login": "bergerdenes"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/service/stack/flow/StackOperationServiceTest.java", "diffHunk": "@@ -106,4 +124,40 @@ public void testStartWhenClusterStopFailed() {\n         verify(flowManager, times(1)).triggerStackStart(stack.getId());\n         verify(stackUpdater, times(1)).updateStackStatus(stack.getId(),  DetailedStackStatus.START_REQUESTED);\n     }\n+\n+    @Test\n+    public void shouldNotTriggerStopWhenStackRunsOnSpotInstances() {\n+        Stack stack = new Stack();\n+        stack.setId(9876L);\n+        stack.setStackStatus(new StackStatus(stack, AVAILABLE));\n+        stack.setInstanceGroups(Set.of(createInstanceGroup(100)));\n+\n+        when(stackService.getByIdWithLists(stack.getId())).thenReturn(stack);\n+\n+        Assertions.assertThatThrownBy(() -> underTest.updateStatus(stack.getId(), StatusRequest.STOPPED, true, new User()))\n+                .isInstanceOf(BadRequestException.class)\n+                .hasMessage(String.format(\"Cannot update the status of stack '%s' to STOPPED, because it runs on spot instances\", stack.getName()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37e06f89f2f32e9f5edeeafa378a6add4e10fa45"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU1NQ==", "bodyText": "Great idea, added", "url": "https://github.com/hortonworks/cloudbreak/pull/7764#discussion_r406270555", "createdAt": "2020-04-09T15:02:34Z", "author": {"login": "Bajzathd"}, "path": "core/src/test/java/com/sequenceiq/cloudbreak/service/stack/flow/StackOperationServiceTest.java", "diffHunk": "@@ -106,4 +124,40 @@ public void testStartWhenClusterStopFailed() {\n         verify(flowManager, times(1)).triggerStackStart(stack.getId());\n         verify(stackUpdater, times(1)).updateStackStatus(stack.getId(),  DetailedStackStatus.START_REQUESTED);\n     }\n+\n+    @Test\n+    public void shouldNotTriggerStopWhenStackRunsOnSpotInstances() {\n+        Stack stack = new Stack();\n+        stack.setId(9876L);\n+        stack.setStackStatus(new StackStatus(stack, AVAILABLE));\n+        stack.setInstanceGroups(Set.of(createInstanceGroup(100)));\n+\n+        when(stackService.getByIdWithLists(stack.getId())).thenReturn(stack);\n+\n+        Assertions.assertThatThrownBy(() -> underTest.updateStatus(stack.getId(), StatusRequest.STOPPED, true, new User()))\n+                .isInstanceOf(BadRequestException.class)\n+                .hasMessage(String.format(\"Cannot update the status of stack '%s' to STOPPED, because it runs on spot instances\", stack.getName()));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NjM4Ng=="}, "originalCommit": {"oid": "37e06f89f2f32e9f5edeeafa378a6add4e10fa45"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2533, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}