{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzM0MTg0", "number": 8512, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowMDowOVrOEMoqBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxMzozNVrOEMz4kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjg0NDg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowMDowOVrOGu3Ptw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMDowMDowOVrOGu3Ptw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc5MjgyMw==", "bodyText": "egacy -> legacy", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r451792823", "createdAt": "2020-07-08T20:00:09Z", "author": {"login": "doktoric"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "diffHunk": "@@ -15,17 +19,34 @@\n \n @Component\n public class StackResponseEventProvider implements ResponseProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackResponseEventProvider.class);\n+\n     @Inject\n     private CloudbreakEventsFacade cloudbreakEventsFacade;\n \n     @Override\n     public StackV4Response providerEntriesToStackResponse(Stack stack, StackV4Response stackResponse) {\n+        List<CloudbreakEventV4Response> events = new ArrayList<>();\n         List<CloudbreakEventV4Response> cloudbreakEvents = cloudbreakEventsFacade\n                 .retrieveEventsByStack(stack.getId(), stack.getType(), PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n-        stackResponse.setCloudbreakEvents(cloudbreakEvents);\n+        events.addAll(cloudbreakEvents);\n+        events.addAll(getLegacyStackType(stack));\n+        stackResponse.setCloudbreakEvents(events);\n         return stackResponse;\n     }\n \n+    private List<CloudbreakEventV4Response> getLegacyStackType(Stack stack) {\n+        List<CloudbreakEventV4Response> events = cloudbreakEventsFacade\n+                .retrieveEventsByStack(stack.getId(), StackType.LEGACY, PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n+        if (events.isEmpty()) {\n+            LOGGER.info(\"Cannot find any legacy events for stack: {}, crn: {}\", stack.getId(), stack.getResourceCrn());\n+        } else {\n+            LOGGER.info(\"{} egacy events for stack: {}, crn: {}\", events.size(), stack.getId(), stack.getResourceCrn());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e1d94f5ebf97e58d00a2fec8763b44e7466f08f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODY4NDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwOToxMzozNVrOGvIpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowMDoyNFrOGvKVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3Nzg0NA==", "bodyText": "I don't see any tests which ensure that events are not broken again.", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r452077844", "createdAt": "2020-07-09T09:13:35Z", "author": {"login": "akanto"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "diffHunk": "@@ -15,17 +19,34 @@\n \n @Component\n public class StackResponseEventProvider implements ResponseProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackResponseEventProvider.class);\n+\n     @Inject\n     private CloudbreakEventsFacade cloudbreakEventsFacade;\n \n     @Override\n     public StackV4Response providerEntriesToStackResponse(Stack stack, StackV4Response stackResponse) {\n+        List<CloudbreakEventV4Response> events = new ArrayList<>();\n         List<CloudbreakEventV4Response> cloudbreakEvents = cloudbreakEventsFacade\n                 .retrieveEventsByStack(stack.getId(), stack.getType(), PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n-        stackResponse.setCloudbreakEvents(cloudbreakEvents);\n+        events.addAll(cloudbreakEvents);\n+        events.addAll(getLegacyStackType(stack));\n+        stackResponse.setCloudbreakEvents(events);\n         return stackResponse;\n     }\n \n+    private List<CloudbreakEventV4Response> getLegacyStackType(Stack stack) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwNTU5MA==", "bodyText": "I think we don't have any tests what can catch this. Here is the use case:\nStart a distrox with 2.24\nUpdate Cb to 2.25\nBefore the fix, the resource type with stacks was filtered out.\nIf you want I can write a UT, but I think this test will not prevent similar cases.", "url": "https://github.com/hortonworks/cloudbreak/pull/8512#discussion_r452105590", "createdAt": "2020-07-09T10:00:24Z", "author": {"login": "topolyai5"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/decorator/responseprovider/StackResponseEventProvider.java", "diffHunk": "@@ -15,17 +19,34 @@\n \n @Component\n public class StackResponseEventProvider implements ResponseProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(StackResponseEventProvider.class);\n+\n     @Inject\n     private CloudbreakEventsFacade cloudbreakEventsFacade;\n \n     @Override\n     public StackV4Response providerEntriesToStackResponse(Stack stack, StackV4Response stackResponse) {\n+        List<CloudbreakEventV4Response> events = new ArrayList<>();\n         List<CloudbreakEventV4Response> cloudbreakEvents = cloudbreakEventsFacade\n                 .retrieveEventsByStack(stack.getId(), stack.getType(), PageRequest.of(0, Integer.MAX_VALUE)).getContent();\n-        stackResponse.setCloudbreakEvents(cloudbreakEvents);\n+        events.addAll(cloudbreakEvents);\n+        events.addAll(getLegacyStackType(stack));\n+        stackResponse.setCloudbreakEvents(events);\n         return stackResponse;\n     }\n \n+    private List<CloudbreakEventV4Response> getLegacyStackType(Stack stack) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3Nzg0NA=="}, "originalCommit": {"oid": "8b766a05a8cdb0e8aea8b9b401cd485b298c1fd0"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}