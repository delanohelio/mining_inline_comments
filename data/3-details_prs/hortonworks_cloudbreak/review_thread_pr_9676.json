{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzOTQxMjA4", "number": 9676, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNDo0MFrOFIGUDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyODo0MVrOFIGzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDM2MzY3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNDo0MFrOIJ1fRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNDo0MFrOIJ1fRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDQ1NA==", "bodyText": "duplicated", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547184454", "createdAt": "2020-12-22T10:04:40Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -25,19 +29,21 @@\n \n     private static final String OPEN_CIDR_BLOCK = \"0.0.0.0/0\";\n \n+    private static final String INTERNAL_DESTINATION_CIDR_BLOCK = \"172.17.0.0/16\";\n+\n     private final AwsSubnetIgwExplorer awsSubnetIgwExplorer = new AwsSubnetIgwExplorer();\n \n     @Test\n     public void testWithNoRouteTable() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithValidIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID).withVpcId(VPC_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDM2Njg1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNTo0MFrOIJ1hMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDowNTo0MFrOIJ1hMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4NDk0NA==", "bodyText": "spelling: Route\nalso in the below test method names", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547184944", "createdAt": "2020-12-22T10:05:40Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -83,54 +89,201 @@ public void testWithIgwButNoAssociation() {\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithAssociationButNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithNoAssociationAndNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(DIFFERENT_SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithRouteButNoAssociations() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n+\n+        assertFalse(hasInternetGateway);\n+    }\n+\n+    @Test\n+    public void testWithMainRoutTableAssociationAndNoIgw() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDM4NTc1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxMToyOVrOIJ1sjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoxODoxOVrOIJ16nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Nzg1NA==", "bodyText": "missing case (could be invalid though):\nwhat if the gateway is there but is not pointing to an open CIDR block", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547187854", "createdAt": "2020-12-22T10:11:29Z", "author": {"login": "bergerdenes"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -83,54 +89,201 @@ public void testWithIgwButNoAssociation() {\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithAssociationButNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithNoAssociationAndNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(DIFFERENT_SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithRouteButNoAssociations() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n+\n+        assertFalse(hasInternetGateway);\n+    }\n+\n+    @Test\n+    public void testWithMainRoutTableAssociationAndNoIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withDestinationCidrBlock(INTERNAL_DESTINATION_CIDR_BLOCK);\n+        routeTable.setRoutes(List.of(route));\n+        RouteTableAssociation routeTableAssociation = new RouteTableAssociation()\n+                .withMain(Boolean.TRUE);\n+        routeTable.setAssociations(List.of(routeTableAssociation));\n+        describeRouteTablesResult.setRouteTables(List.of(routeTable));\n+\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n+    @Test\n+    public void testWithMainRoutTableAssociationAndIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withGatewayId(GATEWAY_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5MTQ1NQ==", "bodyText": "I think that's covered by this test case: \n  \n    \n      cloudbreak/cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java\n    \n    \n         Line 66\n      in\n      7d83096\n    \n    \n    \n    \n\n        \n          \n           route.setGatewayId(VGW_GATEWAY_ID);", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547191455", "createdAt": "2020-12-22T10:18:19Z", "author": {"login": "biharitomi"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorerTest.java", "diffHunk": "@@ -83,54 +89,201 @@ public void testWithIgwButNoAssociation() {\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithAssociationButNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithNoAssociationAndNoIgw() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         RouteTableAssociation routeTableAssociation = new RouteTableAssociation();\n         routeTableAssociation.setSubnetId(DIFFERENT_SUBNET_ID);\n         routeTable.setAssociations(List.of(routeTableAssociation));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n     @Test\n     public void testWithRouteButNoAssociations() {\n         DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n-        RouteTable routeTable = new RouteTable();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n         Route route = new Route();\n         routeTable.setRoutes(List.of(route));\n         describeRouteTablesResult.setRouteTables(List.of(routeTable));\n \n-        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID);\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n+\n+        assertFalse(hasInternetGateway);\n+    }\n+\n+    @Test\n+    public void testWithMainRoutTableAssociationAndNoIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withDestinationCidrBlock(INTERNAL_DESTINATION_CIDR_BLOCK);\n+        routeTable.setRoutes(List.of(route));\n+        RouteTableAssociation routeTableAssociation = new RouteTableAssociation()\n+                .withMain(Boolean.TRUE);\n+        routeTable.setAssociations(List.of(routeTableAssociation));\n+        describeRouteTablesResult.setRouteTables(List.of(routeTable));\n+\n+        boolean hasInternetGateway = awsSubnetIgwExplorer.hasInternetGatewayOfSubnet(describeRouteTablesResult, SUBNET_ID, VPC_ID);\n \n         assertFalse(hasInternetGateway);\n     }\n \n+    @Test\n+    public void testWithMainRoutTableAssociationAndIgw() {\n+        DescribeRouteTablesResult describeRouteTablesResult = new DescribeRouteTablesResult();\n+        RouteTable routeTable = new RouteTable().withVpcId(VPC_ID);\n+        Route route = new Route()\n+                .withGatewayId(GATEWAY_ID)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4Nzg1NA=="}, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDQ0MzIzOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDoyODo0MVrOIJ2OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo0MTo1MVrOIJ2oZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NjUwMg==", "bodyText": "are there possible to exist route table without the specified vpc? If yes, could you please add a log message or any error if not found with the specific vpc", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547196502", "createdAt": "2020-12-22T10:28:41Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorer.java", "diffHunk": "@@ -22,43 +23,48 @@\n \n     private static final String IGW_PREFIX = \"igw-\";\n \n-    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n-        Optional<RouteTable> routeTable = getRouteTableForSubnet(describeRouteTablesResult, subnetId);\n-        return hasInternetGateway(routeTable, subnetId);\n+    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n+        Set<RouteTable> routeTables = getRouteTableForSubnet(describeRouteTablesResult, subnetId, vpcId);\n+        return hasInternetGateway(routeTables, subnetId, vpcId);\n     }\n \n-    private Optional<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n+    private Set<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n         List<RouteTable> routeTables = describeRouteTablesResult.getRouteTables();\n-        Optional<RouteTable> routeTable = Optional.empty();\n+        Set<RouteTable> connectedRouteTables = new HashSet<>();\n         for (RouteTable rt : routeTables) {\n-            LOGGER.info(\"Searching the routeTable where routeTable is {} and the subnet is :{}\", rt, subnetId);\n-            for (RouteTableAssociation association : rt.getAssociations()) {\n-                LOGGER.info(\"Searching the association where association is {} and the subnet is :{}\", association, subnetId);\n-                if (subnetId.equalsIgnoreCase(association.getSubnetId())) {\n-                    LOGGER.info(\"Found the routeTable which is {} and the subnet is :{}\", rt, subnetId);\n-                    routeTable = Optional.ofNullable(rt);\n-                    break;\n+            if (rt.getVpcId().equalsIgnoreCase(vpcId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwMzE3NA==", "bodyText": "If we consider the entire logic it queries all of the RouteTables for a region at once in one of the upper layers and this part iterates over all of them, I would not like to log those cases.\nFor example in the engesc that is attached to this ticket the customer has more than 130 route table it seems to be 129 unnecessary log lines to me.", "url": "https://github.com/hortonworks/cloudbreak/pull/9676#discussion_r547203174", "createdAt": "2020-12-22T10:41:51Z", "author": {"login": "biharitomi"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsSubnetIgwExplorer.java", "diffHunk": "@@ -22,43 +23,48 @@\n \n     private static final String IGW_PREFIX = \"igw-\";\n \n-    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n-        Optional<RouteTable> routeTable = getRouteTableForSubnet(describeRouteTablesResult, subnetId);\n-        return hasInternetGateway(routeTable, subnetId);\n+    public boolean hasInternetGatewayOfSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n+        Set<RouteTable> routeTables = getRouteTableForSubnet(describeRouteTablesResult, subnetId, vpcId);\n+        return hasInternetGateway(routeTables, subnetId, vpcId);\n     }\n \n-    private Optional<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId) {\n+    private Set<RouteTable> getRouteTableForSubnet(DescribeRouteTablesResult describeRouteTablesResult, String subnetId, String vpcId) {\n         List<RouteTable> routeTables = describeRouteTablesResult.getRouteTables();\n-        Optional<RouteTable> routeTable = Optional.empty();\n+        Set<RouteTable> connectedRouteTables = new HashSet<>();\n         for (RouteTable rt : routeTables) {\n-            LOGGER.info(\"Searching the routeTable where routeTable is {} and the subnet is :{}\", rt, subnetId);\n-            for (RouteTableAssociation association : rt.getAssociations()) {\n-                LOGGER.info(\"Searching the association where association is {} and the subnet is :{}\", association, subnetId);\n-                if (subnetId.equalsIgnoreCase(association.getSubnetId())) {\n-                    LOGGER.info(\"Found the routeTable which is {} and the subnet is :{}\", rt, subnetId);\n-                    routeTable = Optional.ofNullable(rt);\n-                    break;\n+            if (rt.getVpcId().equalsIgnoreCase(vpcId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE5NjUwMg=="}, "originalCommit": {"oid": "7d83096e17dd848ee9a3148643830f86660d2253"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3388, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}