{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDkyOTQ1", "number": 7846, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMDo0MFrOD0HAZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxODowN1rOD0HOWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY3MzM1OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMDo0MFrOGI4k4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1ODozNlrOGJHOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg==", "bodyText": "Is there a reason to switch to constructor injection? I have no problem with it, just other classes in the module don't use it", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411968736", "createdAt": "2020-04-21T08:10:40Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3NTQ5NA==", "bodyText": "This way the field can be final and we don't need a silly @PostConstruct. Of course we can start a religious war like \"follow the conventions\", you could have done it from java config  or there is nothing wrong with non final fields and @PostConstruct. I think it's better to make it final and use an immutable EnumMap here in the constructor.", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r412175494", "createdAt": "2020-04-21T13:17:19Z", "author": {"login": "foldik"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg=="}, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwODgzNg==", "bodyText": "I can live with this (although for me the other way feels more comfortable), but one day one team member will start that war, i'm almost 100% sure about that :) I'm just like if a module follows one direction regarding things like this injection stuff based on team agreement, but I do not want to start (or getting involved in) a long discussion about this. Anyway I suggest to involve at least one other team member to check this, because some people do not like this, because I know there were discussions regarding this topic.", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r412208836", "createdAt": "2020-04-21T13:58:36Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2ODczNg=="}, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY3NTgxOnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMTowNFrOGI4mMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMTowNFrOGI4mMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTA3NQ==", "bodyText": "This block occurs twice, please move into a method", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969075", "createdAt": "2020-04-21T08:11:04Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTY3OTk3OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMTo0N1rOGI4ohg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxMTo0N1rOGI4ohg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2OTY3MA==", "bodyText": "This also appears twice, maybe it is wort to move out into a method to increase readability of the code", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411969670", "createdAt": "2020-04-21T08:11:47Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/CommonPermissionCheckingUtils.java", "diffHunk": "@@ -18,39 +22,95 @@\n import org.springframework.security.access.AccessDeniedException;\n import org.springframework.stereotype.Component;\n \n+import com.google.common.base.Joiner;\n import com.google.common.collect.Lists;\n-import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n+import com.google.common.collect.Maps;\n import com.sequenceiq.authorization.annotation.AuthorizationResource;\n+import com.sequenceiq.authorization.annotation.DisableCheckPermissions;\n import com.sequenceiq.authorization.resource.AuthorizationResourceAction;\n import com.sequenceiq.authorization.resource.AuthorizationResourceType;\n+import com.sequenceiq.authorization.resource.RightUtils;\n \n @Component\n public class CommonPermissionCheckingUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonPermissionCheckingUtils.class);\n \n-    @Inject\n-    private UmsAccountAuthorizationService umsAccountAuthorizationService;\n+    private final UmsAccountAuthorizationService umsAccountAuthorizationService;\n+\n+    private final UmsResourceAuthorizationService umsResourceAuthorizationService;\n+\n+    private final Map<AuthorizationResourceType, DefaultResourceChecker> defaultResourceCheckers;\n \n     @Inject\n-    private UmsResourceAuthorizationService umsResourceAuthorizationService;\n+    public CommonPermissionCheckingUtils(UmsAccountAuthorizationService umsAccountAuthorizationService,\n+            UmsResourceAuthorizationService umsResourceAuthorizationService,\n+            List<DefaultResourceChecker> defaultResourceCheckers) {\n+        this.umsAccountAuthorizationService = umsAccountAuthorizationService;\n+        this.umsResourceAuthorizationService = umsResourceAuthorizationService;\n+        this.defaultResourceCheckers = Maps.immutableEnumMap(defaultResourceCheckers.stream()\n+                .collect(toMap(DefaultResourceChecker::getResourceType, Function.identity())));\n+    }\n \n     public void checkPermissionForUser(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn) {\n         umsAccountAuthorizationService.checkRightOfUser(userCrn, resource, action);\n     }\n \n     public void checkPermissionForUserOnResource(AuthorizationResourceType resource, AuthorizationResourceAction action, String userCrn, String resourceCrn) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null || !defaultResourceChecker.isDefault(resourceCrn)) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResource(userCrn, resource, action, resourceCrn);\n+        } else {\n+            if (!defaultResourceChecker.isAllowedAction(action)) {\n+                String right = RightUtils.getRight(resource, action);\n+                String msg = String.format(\"You have no right to perform %s on resource %s\", right, resourceCrn);\n+                LOGGER.error(msg);\n+                throw new AccessDeniedException(msg);\n+            }\n+        }\n     }\n \n     public void checkPermissionForUserOnResources(AuthorizationResourceType resource, AuthorizationResourceAction action,\n             String userCrn, Collection<String> resourceCrns) {\n-        umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        DefaultResourceChecker defaultResourceChecker = defaultResourceCheckers.get(resource);\n+        if (defaultResourceChecker == null) {\n+            umsResourceAuthorizationService.checkRightOfUserOnResources(userCrn, resource, action, resourceCrns);\n+        } else {\n+            Collection<String> defaultResourceCrns = defaultResourceChecker.getDefaultResourceCrns(resourceCrns);\n+            Collection<String> notDefaultResourceCrns = resourceCrns.stream()\n+                    .filter(crn -> !defaultResourceCrns.contains(crn))\n+                    .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTcwMzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxNjo1MFrOGI42Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxNjo1MFrOGI42Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3MzE5MA==", "bodyText": "Are these the CRNs of default catalogs? Format doesn't like a CRN format", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411973190", "createdAt": "2020-04-21T08:16:50Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -54,15 +59,20 @@\n import com.sequenceiq.cloudbreak.service.account.PreferencesService;\n import com.sequenceiq.cloudbreak.service.user.UserProfileHandler;\n import com.sequenceiq.cloudbreak.service.user.UserProfileService;\n+import com.sequenceiq.cloudbreak.service.workspace.WorkspaceService;\n import com.sequenceiq.cloudbreak.workspace.model.User;\n import com.sequenceiq.cloudbreak.workspace.model.Workspace;\n import com.sequenceiq.cloudbreak.workspace.repository.workspace.WorkspaceResourceRepository;\n \n @Component\n-public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> {\n+public class ImageCatalogService extends AbstractWorkspaceAwareResourceService<ImageCatalog> implements ResourceBasedCrnProvider {\n \n     public static final String UNDEFINED = \"\";\n \n+    public static final String CLOUDBREAK_DEFAULT_CATALOG_CRN = \"cloudbreak-default-catalog-crn\";\n+\n+    public static final String CDP_DEFAULT_CATALOG_CRN = \"cdp-default-catalog-crn\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTcwOTA2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxODowN1rOGI45qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoxODowN1rOGI45qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NDA1Nw==", "bodyText": "I think we should talk about these default catalogs, I am not sure I get the logic here", "url": "https://github.com/hortonworks/cloudbreak/pull/7846#discussion_r411974057", "createdAt": "2020-04-21T08:18:07Z", "author": {"login": "horadla23"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/image/ImageCatalogService.java", "diffHunk": "@@ -691,6 +692,54 @@ private String createCRN(String accountId) {\n                 .toString();\n     }\n \n+    @Override\n+    public String getResourceCrnByResourceName(String resourceName) {\n+        if (CDP_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CDP_DEFAULT_CATALOG_CRN;\n+        } else if (legacyCatalogEnabled && CLOUDBREAK_DEFAULT_CATALOG_NAME.equals(resourceName)) {\n+            return CLOUDBREAK_DEFAULT_CATALOG_CRN;\n+        } else {\n+            return imageCatalogRepository.findResourceCrnByNameAndWorkspaceId(resourceName, workspaceService.getForCurrentUser().getId())\n+                    .orElseThrow(() -> NotFoundException.notFoundException(\"Image catalog\", resourceName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2912824e11018aa304ce6b6d4482cccf380e39"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2470, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}