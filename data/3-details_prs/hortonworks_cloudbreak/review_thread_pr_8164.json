{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDIyMDIy", "number": 8164, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyOTozNFrOECEzrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMToxM1rOECE2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjExMzczOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyOTozNFrOGeTvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyOTozNFrOGeTvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMzgwMQ==", "bodyText": "Should not have :", "url": "https://github.com/hortonworks/cloudbreak/pull/8164#discussion_r434433801", "createdAt": "2020-06-03T09:29:34Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "diffHunk": "@@ -58,6 +65,9 @@\n \n     private static final String CREATED_SUBNET = \"CreatedSubnet\";\n \n+    @Value(\"${cb.aws.vpcendpoints.enabled.gateway.services:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effb5b457a5e26557e2cb7422a95355e49af6916"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjExOTgxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTozMToxM1rOGeTzEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMDowMjo1NVrOGeU9Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNDgzNA==", "bodyText": "What AWS permissions do we need for this call?", "url": "https://github.com/hortonworks/cloudbreak/pull/8164#discussion_r434434834", "createdAt": "2020-06-03T09:31:13Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "diffHunk": "@@ -287,4 +301,18 @@ private void suspendAutoscalingGoupsWhenNewInstancesAreReady(AuthenticatedContex\n         }\n         awsAutoScalingService.suspendAutoScaling(ac, stack);\n     }\n+\n+    private List<String> getPrefixListIds(AmazonEC2Client amazonEC2Client, String regionName, OutboundInternetTraffic outboundInternetTraffic) {\n+        List<String> result = List.of();\n+        if (outboundInternetTraffic == OutboundInternetTraffic.DISABLED && CollectionUtils.isNotEmpty(enabledGatewayServices)) {\n+            Set<String> gatewayRegionServices = enabledGatewayServices.stream()\n+                    .map(s -> String.format(AwsNetworkCfTemplateProvider.VPC_INTERFACE_SERVICE_ENDPOINT_NAME_PATTERN, regionName, s))\n+                    .collect(Collectors.toSet());\n+            result = amazonEC2Client.describePrefixLists().getPrefixLists().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effb5b457a5e26557e2cb7422a95355e49af6916"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ1MzgxNQ==", "bodyText": "ec2:DescribePrefixLists", "url": "https://github.com/hortonworks/cloudbreak/pull/8164#discussion_r434453815", "createdAt": "2020-06-03T10:02:55Z", "author": {"login": "keyki"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsLaunchService.java", "diffHunk": "@@ -287,4 +301,18 @@ private void suspendAutoscalingGoupsWhenNewInstancesAreReady(AuthenticatedContex\n         }\n         awsAutoScalingService.suspendAutoScaling(ac, stack);\n     }\n+\n+    private List<String> getPrefixListIds(AmazonEC2Client amazonEC2Client, String regionName, OutboundInternetTraffic outboundInternetTraffic) {\n+        List<String> result = List.of();\n+        if (outboundInternetTraffic == OutboundInternetTraffic.DISABLED && CollectionUtils.isNotEmpty(enabledGatewayServices)) {\n+            Set<String> gatewayRegionServices = enabledGatewayServices.stream()\n+                    .map(s -> String.format(AwsNetworkCfTemplateProvider.VPC_INTERFACE_SERVICE_ENDPOINT_NAME_PATTERN, regionName, s))\n+                    .collect(Collectors.toSet());\n+            result = amazonEC2Client.describePrefixLists().getPrefixLists().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzNDgzNA=="}, "originalCommit": {"oid": "effb5b457a5e26557e2cb7422a95355e49af6916"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3256, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}