{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NDAxMDc5", "number": 7480, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowMDoyNFrODmoemw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowMDoyNFrODmoemw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM1Njc1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/CloudbreakFlowService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTowMDoyNFrOF0KLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowNjo0OFrOF0MDiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjk1MA==", "bodyText": "What's wrong with StateStatus? Why introduce a new Enum?", "url": "https://github.com/hortonworks/cloudbreak/pull/7480#discussion_r390236950", "createdAt": "2020-03-10T11:00:24Z", "author": {"login": "lnardai"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/CloudbreakFlowService.java", "diffHunk": "@@ -35,18 +35,30 @@ public void getAndSaveLastCloudbreakFlowChainId(SdxCluster sdxCluster) {\n         sdxClusterRepository.save(sdxCluster);\n     }\n \n-    public boolean isLastKnownFlowRunning(SdxCluster sdxCluster) {\n+    public FlowState getLastKnownFlowState(SdxCluster sdxCluster) {\n         try {\n             String actualCbFlowChainId = sdxCluster.getLastCbFlowChainId();\n             if (actualCbFlowChainId != null) {\n-                return flowEndpoint.hasFlowRunningByChainId(sdxCluster.getLastCbFlowChainId()).getHasActiveFlow();\n+                LOGGER.info(\"Check if flow is running: {}\", actualCbFlowChainId);\n+                Boolean hasActiveFlow = flowEndpoint.hasFlowRunningByChainId(sdxCluster.getLastCbFlowChainId()).getHasActiveFlow();\n+                if (hasActiveFlow) {\n+                    return FlowState.RUNNING;\n+                } else {\n+                    return FlowState.FINISHED;\n+                }\n+            } else  {\n+                return FlowState.UNKNOWN;\n             }\n         } catch (NotFoundException e) {\n             LOGGER.error(\"Flow chain id or resource {} not found in CB: {}, so there is no active flow!\", sdxCluster.getClusterName(), e.getMessage());\n+            return FlowState.UNKNOWN;\n         } catch (Exception e) {\n             LOGGER.error(\"Exception occured during checking if there is a flow for cluster {} in CB: {}\", sdxCluster.getClusterName(), e.getMessage());\n-            return true;\n+            return FlowState.UNKNOWN;\n         }\n-        return false;\n+    }\n+\n+    public enum FlowState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6ed8c8c1b51d059a9bcba6456974380a2d9a15"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2Nzc4NQ==", "bodyText": "I would like to handle unknown state like missing flow id or flow id is not known by cloudbreak. Also we call hasFlowRunningByChainId method which can only return a boolean.", "url": "https://github.com/hortonworks/cloudbreak/pull/7480#discussion_r390267785", "createdAt": "2020-03-10T12:06:48Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/CloudbreakFlowService.java", "diffHunk": "@@ -35,18 +35,30 @@ public void getAndSaveLastCloudbreakFlowChainId(SdxCluster sdxCluster) {\n         sdxClusterRepository.save(sdxCluster);\n     }\n \n-    public boolean isLastKnownFlowRunning(SdxCluster sdxCluster) {\n+    public FlowState getLastKnownFlowState(SdxCluster sdxCluster) {\n         try {\n             String actualCbFlowChainId = sdxCluster.getLastCbFlowChainId();\n             if (actualCbFlowChainId != null) {\n-                return flowEndpoint.hasFlowRunningByChainId(sdxCluster.getLastCbFlowChainId()).getHasActiveFlow();\n+                LOGGER.info(\"Check if flow is running: {}\", actualCbFlowChainId);\n+                Boolean hasActiveFlow = flowEndpoint.hasFlowRunningByChainId(sdxCluster.getLastCbFlowChainId()).getHasActiveFlow();\n+                if (hasActiveFlow) {\n+                    return FlowState.RUNNING;\n+                } else {\n+                    return FlowState.FINISHED;\n+                }\n+            } else  {\n+                return FlowState.UNKNOWN;\n             }\n         } catch (NotFoundException e) {\n             LOGGER.error(\"Flow chain id or resource {} not found in CB: {}, so there is no active flow!\", sdxCluster.getClusterName(), e.getMessage());\n+            return FlowState.UNKNOWN;\n         } catch (Exception e) {\n             LOGGER.error(\"Exception occured during checking if there is a flow for cluster {} in CB: {}\", sdxCluster.getClusterName(), e.getMessage());\n-            return true;\n+            return FlowState.UNKNOWN;\n         }\n-        return false;\n+    }\n+\n+    public enum FlowState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjk1MA=="}, "originalCommit": {"oid": "db6ed8c8c1b51d059a9bcba6456974380a2d9a15"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2728, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}