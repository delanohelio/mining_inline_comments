{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzI5OTg3", "number": 8335, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1ODozOVrOEIAl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1ODozOVrOEIAl1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMzNzQ5OnYy", "diffSide": "RIGHT", "path": "environment/src/test/java/com/sequenceiq/environment/environment/flow/start/handler/StartFreeIpaHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1ODozOVrOGntalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxODowOVrOGoUO8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MTczNA==", "bodyText": "Maybe a test for the happy flow to be sure that is still working :)", "url": "https://github.com/hortonworks/cloudbreak/pull/8335#discussion_r444291734", "createdAt": "2020-06-23T14:58:39Z", "author": {"login": "biharitomi"}, "path": "environment/src/test/java/com/sequenceiq/environment/environment/flow/start/handler/StartFreeIpaHandlerTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.flow.start.handler;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.start.event.EnvStartEvent;\n+import com.sequenceiq.environment.environment.flow.start.event.EnvStartFailedEvent;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaPollerService;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.describe.DescribeFreeIpaResponse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import reactor.bus.Event;\n+\n+import java.util.Optional;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class StartFreeIpaHandlerTest {\n+\n+    private static final String MOCK_ENV_CRN = \"someCrnValue\";\n+\n+    @Mock\n+    private FreeIpaPollerService mockFreeIpaPollerService;\n+\n+    @Mock\n+    private FreeIpaService mockFreeIpaService;\n+\n+    @Mock\n+    private EventSender mockEventSender;\n+\n+    @Mock\n+    private Event<EnvironmentDto> mockEnvironmentDtoEvent;\n+\n+    @Mock\n+    private EnvironmentDto mockEnvironmentDto;\n+\n+    @Mock\n+    private DescribeFreeIpaResponse mockDescribeFreeIpaResponse;\n+\n+    @Mock\n+    private Event.Headers mockEventHeaders;\n+\n+    private StartFreeIpaHandler underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(mockEnvironmentDtoEvent.getData()).thenReturn(mockEnvironmentDto);\n+        when(mockEnvironmentDto.getResourceCrn()).thenReturn(MOCK_ENV_CRN);\n+        when(mockEnvironmentDtoEvent.getHeaders()).thenReturn(mockEventHeaders);\n+\n+        underTest = new StartFreeIpaHandler(mockEventSender, mockFreeIpaPollerService, mockFreeIpaService);\n+    }\n+\n+    @Test\n+    void testWhenFreeIpaDescribeTellsFreeIpaIsNotStartableThenExceptionComesAndNoStartEventHappens() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92122281638b139ba52ccf814acfdec9dc90fae9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNzcyOQ==", "bodyText": "done but waits for this pr: #8255", "url": "https://github.com/hortonworks/cloudbreak/pull/8335#discussion_r444927729", "createdAt": "2020-06-24T14:18:09Z", "author": {"login": "gregito"}, "path": "environment/src/test/java/com/sequenceiq/environment/environment/flow/start/handler/StartFreeIpaHandlerTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sequenceiq.environment.environment.flow.start.handler;\n+\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.start.event.EnvStartEvent;\n+import com.sequenceiq.environment.environment.flow.start.event.EnvStartFailedEvent;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaPollerService;\n+import com.sequenceiq.environment.environment.service.freeipa.FreeIpaService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.Status;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.describe.DescribeFreeIpaResponse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import reactor.bus.Event;\n+\n+import java.util.Optional;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+class StartFreeIpaHandlerTest {\n+\n+    private static final String MOCK_ENV_CRN = \"someCrnValue\";\n+\n+    @Mock\n+    private FreeIpaPollerService mockFreeIpaPollerService;\n+\n+    @Mock\n+    private FreeIpaService mockFreeIpaService;\n+\n+    @Mock\n+    private EventSender mockEventSender;\n+\n+    @Mock\n+    private Event<EnvironmentDto> mockEnvironmentDtoEvent;\n+\n+    @Mock\n+    private EnvironmentDto mockEnvironmentDto;\n+\n+    @Mock\n+    private DescribeFreeIpaResponse mockDescribeFreeIpaResponse;\n+\n+    @Mock\n+    private Event.Headers mockEventHeaders;\n+\n+    private StartFreeIpaHandler underTest;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+\n+        when(mockEnvironmentDtoEvent.getData()).thenReturn(mockEnvironmentDto);\n+        when(mockEnvironmentDto.getResourceCrn()).thenReturn(MOCK_ENV_CRN);\n+        when(mockEnvironmentDtoEvent.getHeaders()).thenReturn(mockEventHeaders);\n+\n+        underTest = new StartFreeIpaHandler(mockEventSender, mockFreeIpaPollerService, mockFreeIpaService);\n+    }\n+\n+    @Test\n+    void testWhenFreeIpaDescribeTellsFreeIpaIsNotStartableThenExceptionComesAndNoStartEventHappens() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MTczNA=="}, "originalCommit": {"oid": "92122281638b139ba52ccf814acfdec9dc90fae9"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3236, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}