{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2ODA3NTQ1", "number": 8028, "title": "CB-7009 Azure single RG: env service create RG", "bodyText": "", "createdAt": "2020-05-12T15:38:26Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8028", "merged": true, "mergeCommit": {"oid": "3ce1f70f397bf29e22bb4ff5cce11424d0fb953b"}, "closed": true, "closedAt": "2020-05-21T14:42:37Z", "author": {"login": "gergopapi2"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgmQkegBqjMzMjgxNDAyNDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjeqZ3AFqTQxNjE5OTYzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b7a44c0a7e107c4a5ed92c03d2e24ef46f87eac", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0b7a44c0a7e107c4a5ed92c03d2e24ef46f87eac", "committedDate": "2020-05-12T15:37:23Z", "message": "CB-7009 Azure single RG: env service create RG"}, "afterCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/93332ca2c86f09079a4f059b354752577c422dd6", "committedDate": "2020-05-12T15:45:47Z", "message": "CB-7009 Azure single RG: env service create RG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzMyNjc4", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-410332678", "createdAt": "2020-05-12T18:55:48Z", "commit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1NTo0OFrOGUUkbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1NTo0OFrOGUUkbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MTcwOA==", "bodyText": "maybe ewe should just put this into the DTO directly, in that case we can just use that object", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423961708", "createdAt": "2020-05-12T18:55:48Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");\n+            return;\n+        }\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n+        AzureClient azureClient = azureClientService.getClient(cloudCredential);\n+\n+        String resourceGroupName = String.format(\"%s_%d\", environmentDto.getName(), clock.getCurrentTimeMillis());\n+        LOGGER.debug(\"Azure generated resource group name: {}.\", resourceGroupName);\n+        azureClient.createResourceGroup(resourceGroupName, environmentDto.getLocation().getName(), mergeTags(environmentDto));\n+        parameterService.updateResourceGroupName(environment, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");\n+    }\n+\n+    private Map<String, String> mergeTags(EnvironmentDto environmentDto) {\n+        CDPTagMergeRequest mergeRequest = CDPTagMergeRequest.Builder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzM1MDEz", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-410335013", "createdAt": "2020-05-12T18:59:03Z", "commit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1OTowM1rOGUUrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1OTowM1rOGUUrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MzUzNg==", "bodyText": "Azure resource group creation not requested -> New single Azure resource group creation not requested", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423963536", "createdAt": "2020-05-12T18:59:03Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzM2OTMz", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-410336933", "createdAt": "2020-05-12T19:01:40Z", "commit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTowMTo0MFrOGUUxfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTowMTo0MFrOGUUxfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ==", "bodyText": "do we want to catch the exception here ?", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r423965055", "createdAt": "2020-05-12T19:01:40Z", "author": {"login": "doktoric"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");\n+            return;\n+        }\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n+        AzureClient azureClient = azureClientService.getClient(cloudCredential);\n+\n+        String resourceGroupName = String.format(\"%s_%d\", environmentDto.getName(), clock.getCurrentTimeMillis());\n+        LOGGER.debug(\"Azure generated resource group name: {}.\", resourceGroupName);\n+        azureClient.createResourceGroup(resourceGroupName, environmentDto.getLocation().getName(), mergeTags(environmentDto));\n+        parameterService.updateResourceGroupName(environment, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODIwMDkw", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-410820090", "createdAt": "2020-05-13T11:10:51Z", "commit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxMDo1MVrOGUspdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjowMDowN1rOGUuK7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1NjIxMw==", "bodyText": "I think Ricsi was thinking about converting the Azure exception to a more readable one to present for the end-user.", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424356213", "createdAt": "2020-05-13T11:10:51Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.cloudbreak.tag.request.CDPTagMergeRequest;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;\n+\n+    private CredentialToCloudCredentialConverter credentialToCloudCredentialConverter;\n+\n+    private AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch;\n+\n+    private CostTagging costTagging;\n+\n+    private EventBus eventBus;\n+\n+    private EnvironmentService environmentService;\n+\n+    private ParametersService parameterService;\n+\n+    private Clock clock;\n+\n+    protected ResourceGroupCreationHandler(EventSender eventSender,\n+            CloudPlatformConnectors cloudPlatformConnectors,\n+            AzureClientService azureClientService,\n+            CredentialToCloudCredentialConverter credentialToCloudCredentialConverter,\n+            AzureSingleResourceGroupFeatureSwitch azureSingleResourceGroupFeatureSwitch,\n+            CostTagging costTagging, EventBus eventBus, EnvironmentService environmentService,\n+            ParametersService parameterService,\n+            Clock clock) {\n+        super(eventSender);\n+        this.cloudPlatformConnectors = cloudPlatformConnectors;\n+        this.azureClientService = azureClientService;\n+        this.credentialToCloudCredentialConverter = credentialToCloudCredentialConverter;\n+        this.azureSingleResourceGroupFeatureSwitch = azureSingleResourceGroupFeatureSwitch;\n+        this.costTagging = costTagging;\n+        this.eventBus = eventBus;\n+        this.environmentService = environmentService;\n+        this.parameterService = parameterService;\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public void accept(Event<EnvironmentDto> environmentDtoEvent) {\n+        EnvironmentDto environmentDto = environmentDtoEvent.getData();\n+        environmentService.findEnvironmentById(environmentDto.getId())\n+                .ifPresentOrElse(environment -> {\n+                            try {\n+                                createResourceGroup(environmentDto, environment);\n+                                goToNetworkCreationState(environmentDtoEvent);\n+                            } catch (Exception e) {\n+                                goToFailedState(environmentDtoEvent, e.getMessage());\n+                            }\n+                        }, () -> goToFailedState(environmentDtoEvent, String.format(\"Environment was not found with id '%s'.\", environmentDto.getId()))\n+                );\n+    }\n+\n+    private void createResourceGroup(EnvironmentDto environmentDto, Environment environment) {\n+        if (!azureSingleResourceGroupFeatureSwitch.isActive()) {\n+            LOGGER.debug(\"Azure single resource group feature turned off, not creating resourcegroup.\");\n+            return;\n+        }\n+        Optional<AzureResourceGroupDto> azureResourceGroupDtoOptional = getAzureResourceGroupDto(environmentDto);\n+        if (!AZURE.name().equals(environmentDto.getCloudPlatform()) || azureResourceGroupDtoOptional.isEmpty()) {\n+            LOGGER.debug(\"Cloudplatform not azure or no azure resource group dto defined, not creating resource group.\");\n+            return;\n+        }\n+        AzureResourceGroupDto azureResourceGroupDto = azureResourceGroupDtoOptional.get();\n+        if (!CREATE_NEW.equals(azureResourceGroupDto.getResourceGroupCreation())) {\n+            LOGGER.debug(\"Azure resource group creation not requested, not creating resource group.\");\n+            return;\n+        }\n+        CloudCredential cloudCredential = credentialToCloudCredentialConverter.convert(environmentDto.getCredential());\n+        AzureClient azureClient = azureClientService.getClient(cloudCredential);\n+\n+        String resourceGroupName = String.format(\"%s_%d\", environmentDto.getName(), clock.getCurrentTimeMillis());\n+        LOGGER.debug(\"Azure generated resource group name: {}.\", resourceGroupName);\n+        azureClient.createResourceGroup(resourceGroupName, environmentDto.getLocation().getName(), mergeTags(environmentDto));\n+        parameterService.updateResourceGroupName(environment, resourceGroupName);\n+        LOGGER.debug(\"Azure resource group created successfully.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2NTA1NQ=="}, "originalCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MTE2Ng==", "bodyText": "We should do this only for Azure cloud platform, pls use getCloudPlatform", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r424381166", "createdAt": "2020-05-13T12:00:07Z", "author": {"login": "pdarvasi"}, "path": "environment/src/main/java/com/sequenceiq/environment/parameters/service/ParametersService.java", "diffHunk": "@@ -62,6 +63,18 @@ public boolean isS3GuardTableUsed(String accountId, String cloudPlatform, String\n         return baseParametersRepository.isS3GuardTableUsed(accountId, cloudPlatform, EnvironmentStatus.AVAILABLE_STATUSES, location, dynamoTableName);\n     }\n \n+    public void updateResourceGroupName(Environment environment, String resourceGroupName) {\n+        Optional<BaseParameters> baseParametersOptional = baseParametersRepository.findByEnvironmentId(environment.getId());\n+        if (baseParametersOptional.isEmpty()) {\n+            return;\n+        }\n+\n+        BaseParameters baseParameters = baseParametersOptional.get();\n+        AzureParameters azureParameters = (AzureParameters) baseParameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93332ca2c86f09079a4f059b354752577c422dd6"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDQ2Njgw", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-412446680", "createdAt": "2020-05-15T08:26:58Z", "commit": {"oid": "8ab2d69d539e0502b90e1021094d51f2e2029008"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyNjo1OVrOGV7Wug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODoyODowN1rOGV7ZHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA==", "bodyText": "I don't like the idea of adding direct Azure dependency (or any specific cloud provider dependency) in full generic Env creation flow steps.", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425645754", "createdAt": "2020-05-15T08:26:59Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab2d69d539e0502b90e1021094d51f2e2029008"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NjM2NA==", "bodyText": "Can you name this step instead InfrastructureCreationHandler and move every cloud provider specific logic behind the cloud-api? And use those APIs here?", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#discussion_r425646364", "createdAt": "2020-05-15T08:28:07Z", "author": {"login": "attilapalfi92"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/ResourceGroupCreationHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.sequenceiq.environment.environment.flow.creation.handler;\n+\n+import static com.sequenceiq.cloudbreak.common.mappable.CloudPlatform.AZURE;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationHandlerSelectors.RESOURCEGROUP_CREATE_EVENT;\n+import static com.sequenceiq.environment.environment.flow.creation.event.EnvCreationStateSelectors.START_NETWORK_CREATION_EVENT;\n+import static com.sequenceiq.environment.parameters.dao.domain.ResourceGroupCreation.CREATE_NEW;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClientService;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.exception.BadRequestException;\n+import com.sequenceiq.cloudbreak.featureswitch.AzureSingleResourceGroupFeatureSwitch;\n+import com.sequenceiq.cloudbreak.tag.CostTagging;\n+import com.sequenceiq.environment.credential.v1.converter.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.environment.environment.domain.Environment;\n+import com.sequenceiq.environment.environment.dto.EnvironmentDto;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationEvent;\n+import com.sequenceiq.environment.environment.flow.creation.event.EnvCreationFailureEvent;\n+import com.sequenceiq.environment.environment.service.EnvironmentService;\n+import com.sequenceiq.environment.parameters.dto.AzureParametersDto;\n+import com.sequenceiq.environment.parameters.dto.AzureResourceGroupDto;\n+import com.sequenceiq.environment.parameters.dto.ParametersDto;\n+import com.sequenceiq.environment.parameters.service.ParametersService;\n+import com.sequenceiq.flow.reactor.api.event.EventSender;\n+import com.sequenceiq.flow.reactor.api.handler.EventSenderAwareHandler;\n+\n+import reactor.bus.Event;\n+import reactor.bus.EventBus;\n+\n+@Component\n+public class ResourceGroupCreationHandler extends EventSenderAwareHandler<EnvironmentDto> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceGroupCreationHandler.class);\n+\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    private AzureClientService azureClientService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY0NTc1NA=="}, "originalCommit": {"oid": "8ab2d69d539e0502b90e1021094d51f2e2029008"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ab2d69d539e0502b90e1021094d51f2e2029008", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8ab2d69d539e0502b90e1021094d51f2e2029008", "committedDate": "2020-05-15T07:59:34Z", "message": "fixes"}, "afterCommit": {"oid": "482acd663ff9b5d66e85d1e6c540dbea7bff0024", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/482acd663ff9b5d66e85d1e6c540dbea7bff0024", "committedDate": "2020-05-15T09:15:33Z", "message": "CB-7009 Azure single RG: env service create RG"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "482acd663ff9b5d66e85d1e6c540dbea7bff0024", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/482acd663ff9b5d66e85d1e6c540dbea7bff0024", "committedDate": "2020-05-15T09:15:33Z", "message": "CB-7009 Azure single RG: env service create RG"}, "afterCommit": {"oid": "fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "committedDate": "2020-05-15T15:54:00Z", "message": "CB-7009 Azure single RG: env service create RG"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e22587ff8b698fed5363a9a975eab7dcada1dae", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3e22587ff8b698fed5363a9a975eab7dcada1dae", "committedDate": "2020-05-21T12:40:19Z", "message": "CB-7009 Azure single RG: env service create RG"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fb52663bc7589f9d2a0dbcc6f39ec0d6970a72b9", "committedDate": "2020-05-15T15:54:00Z", "message": "CB-7009 Azure single RG: env service create RG"}, "afterCommit": {"oid": "3e22587ff8b698fed5363a9a975eab7dcada1dae", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/3e22587ff8b698fed5363a9a975eab7dcada1dae", "committedDate": "2020-05-21T12:40:19Z", "message": "CB-7009 Azure single RG: env service create RG"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTk5NjM3", "url": "https://github.com/hortonworks/cloudbreak/pull/8028#pullrequestreview-416199637", "createdAt": "2020-05-21T14:36:54Z", "commit": {"oid": "3e22587ff8b698fed5363a9a975eab7dcada1dae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2196, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}