{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTc1OTg1", "number": 7877, "title": "CB-6705: Register multiple cluster proxy service for FreeIPA HA", "bodyText": "Register one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline.\nCloses #CB-6705", "createdAt": "2020-04-22T22:16:08Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7877", "merged": true, "mergeCommit": {"oid": "7d8cbd23022486e71456d74516d9b60241ae5c27"}, "closed": true, "closedAt": "2020-04-24T11:27:03Z", "author": {"login": "jamisonbennett"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaSCXHgBqjMyNjI5NTM2NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcavweeAFqTM5OTg2MjUyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5711071ed8ed0d9992d53d9a5c339d9ba57a8a8", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/b5711071ed8ed0d9992d53d9a5c339d9ba57a8a8", "committedDate": "2020-04-22T21:29:30Z", "message": "CB-6705: Register multiple cluster proxy service for FreeIPA HA\n\nRegister one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\n\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\n\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline."}, "afterCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/26398f7379d5a37355376f427fa7d427d1db4e22", "committedDate": "2020-04-23T00:04:06Z", "message": "CB-6705: Register multiple cluster proxy service for FreeIPA HA\n\nRegister one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\n\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\n\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODIxMzE3", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398821317", "createdAt": "2020-04-23T07:18:11Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxODoxMVrOGKaWBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzoxODoxMVrOGKaWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3MDU2Nw==", "bodyText": "you don't have to call the close() here, try will take care of it", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413570567", "createdAt": "2020-04-23T07:18:11Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/client/FreeIpaClientBuilder.java", "diffHunk": "@@ -138,7 +138,9 @@ public FreeIpaClient build(boolean withPing) throws URISyntaxException, IOExcept\n                     .build()) {\n                 URI target = getIpaUrl(clientConfig.getApiAddress(), port, basePath, \"/session/login_password\").toURI();\n                 LOGGER.debug(\"Ping at target: {}\", target);\n-                client.execute(new HttpHead(target));\n+                HttpHead request = new HttpHead(target);\n+                additionalHeaders.forEach(request::addHeader);\n+                client.execute(request).close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODMzNjAy", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398833602", "createdAt": "2020-04-23T07:36:16Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNjoxNlrOGKbApQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzozNjoxNlrOGKbApQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MTQ3Nw==", "bodyText": "we could use StackEvent here so both the old and new event would match", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413581477", "createdAt": "2020-04-23T07:36:16Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/flow/freeipa/provision/action/FreeIpaProvisionActions.java", "diffHunk": "@@ -90,12 +92,29 @@ protected Selectable createRequest(StackContext context) {\n         };\n     }\n \n+    @Bean(name = \"CLUSTERPROXY_UPDATE_REGISTRATION_STATE\")\n+    public Action<?, ?> updateClusterProxyRegistrationAction() {\n+        return new AbstractStackProvisionAction<>(InstallFreeIpaServicesSuccess.class) {\n+            @Override\n+            protected void doExecute(StackContext context, InstallFreeIpaServicesSuccess payload, Map<Object, Object> variables) throws Exception {\n+                stackUpdater.updateStackStatus(context.getStack().getId(), DetailedStackStatus.UPDATE_CLUSTER_PROXY_REGISTRATION,\n+                        \"Updating cluster proxy registration.\");\n+                sendEvent(context);\n+            }\n+\n+            @Override\n+            protected Selectable createRequest(StackContext context) {\n+                return new ClusterProxyUpdateRegistrationRequest(context.getStack().getId());\n+            }\n+        };\n+    }\n+\n     @Bean(name = \"FREEIPA_POST_INSTALL_STATE\")\n     public Action<?, ?> postInstallFreeIpa() {\n-        return new AbstractStackProvisionAction<>(InstallFreeIpaServicesSuccess.class) {\n+        return new AbstractStackProvisionAction<>(ClusterProxyUpdateRegistrationSuccess.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODUwNDIz", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398850423", "createdAt": "2020-04-23T07:58:50Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo1ODo1MVrOGKb9Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo1ODo1MVrOGKb9Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU5Njk4Mw==", "bodyText": "nit: create a comparator class for this", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413596983", "createdAt": "2020-04-23T07:58:51Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -138,38 +139,52 @@ private boolean canTryAnotherInstance(boolean lastInstance, IOException e) {\n         return !lastInstance;\n     }\n \n-    private List<InstanceMetaData> getAllInstances(Stack stack) {\n-        return stack.getInstanceGroups().stream().flatMap(instanceGroup ->\n-                instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+    private List<InstanceMetaData> getPriorityOrderedFreeIpaInstances(Stack stack) {\n+        return instanceMetaDataRepository.findNotTerminatedForStack(stack.getId()).stream()\n+                .filter(InstanceMetaData::isAvailable)\n+                .sorted((l, r) -> {\n+                    if (l.getInstanceMetadataType() == InstanceMetadataType.GATEWAY_PRIMARY) {\n+                        return -1;\n+                    }\n+                    if (r.getInstanceMetadataType() == InstanceMetadataType.GATEWAY_PRIMARY) {\n+                        return 1;\n+                    }\n+                    return Comparator.comparing(InstanceMetaData::getDiscoveryFQDN).compare(l, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODczNDg2", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398873486", "createdAt": "2020-04-23T08:28:08Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyODowOVrOGKdMWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyODowOVrOGKdMWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNzI0MQ==", "bodyText": "don't include repository anywhere else than the related service", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413617241", "createdAt": "2020-04-23T08:28:09Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/FreeIpaClientFactory.java", "diffHunk": "@@ -61,6 +63,9 @@\n     @Inject\n     private TlsSecurityService tlsSecurityService;\n \n+    @Inject\n+    private InstanceMetaDataRepository instanceMetaDataRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODg1MjIz", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398885223", "createdAt": "2020-04-23T08:42:45Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0Mjo0NVrOGKd2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0Mjo0NVrOGKd2AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYyNzkwNQ==", "bodyText": "don't use repository here", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413627905", "createdAt": "2020-04-23T08:42:45Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -70,15 +74,25 @@\n     @Inject\n     private SecurityConfigService securityConfigService;\n \n+    @Inject\n+    private InstanceMetaDataRepository instanceMetaDataRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODk0NDM1", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398894435", "createdAt": "2020-04-23T08:54:27Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo1NDoyN1rOGKeXAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo1NDoyN1rOGKeXAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzNjM1NQ==", "bodyText": "is it ok to add this ServiceConfig on bootstrap and again when we are adding the other ones? It looks like to me we double add it, and I don't know if it cause any issue on CP side", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413636355", "createdAt": "2020-04-23T08:54:27Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -88,17 +102,27 @@\n         LOGGER.debug(\"Registering freeipa with cluster-proxy: Environment CRN = [{}], Stack CRN = [{}]\", stack.getEnvironmentCrn(), stack.getResourceCrn());\n \n         GatewayConfig primaryGatewayConfig = gatewayConfigService.getPrimaryGatewayConfig(stack);\n-        HttpClientConfig httpClientConfig = tlsSecurityService.buildTLSClientConfigForPrimaryGateway(\n-                stack, primaryGatewayConfig.getGatewayUrl());\n+        List<GatewayConfig> gatewayConfigs = gatewayConfigService.getNotTerminatedGatewayConfigs(stack);\n         ClientCertificate clientCertificate = clientCertificates(stack);\n \n-        ClusterServiceConfig serviceConfig = createServiceConfig(stack, httpClientConfig, clientCertificate);\n+        boolean usePrivateIpToTls = stack.getSecurityConfig().isUsePrivateIpToTls();\n+        List<GatewayConfig> tunnelGatewayConfigs;\n+        List<ClusterServiceConfig> serviceConfigs = new LinkedList<>();\n+        serviceConfigs.add(createServiceConfig(stack, FREEIPA_SERVICE_NAME, primaryGatewayConfig, clientCertificate, usePrivateIpToTls));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTA0Njcz", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398904673", "createdAt": "2020-04-23T09:07:12Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNzoxMlrOGKe6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNzoxMlrOGKe6lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NTQ2Mg==", "bodyText": "protocol should come from GatewayConfig as it is used when we are building apiAddress", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413645462", "createdAt": "2020-04-23T09:07:12Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/ClusterProxyService.java", "diffHunk": "@@ -183,4 +227,12 @@ private ClientCertificate clientCertificates(Stack stack) {\n         return clientCertificate;\n     }\n \n+    private String getEndpointForRegistration(Stack stack, GatewayConfig gatewayConfig, boolean usePrivateIpToTls) {\n+        String ipAddresss = gatewayConfig.getPublicAddress();\n+        if (usePrivateIpToTls) {\n+            ipAddresss = gatewayConfig.getPrivateAddress();\n+        }\n+        return String.format(\"https://%s:%d\", ipAddresss, stack.getGatewayport());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTEzNjM0", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-398913634", "createdAt": "2020-04-23T09:18:33Z", "commit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxODozNFrOGKfZhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxODozNFrOGKfZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY1MzM4MA==", "bodyText": "is this still a valid option? can we receive such exceptions?", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#discussion_r413653380", "createdAt": "2020-04-23T09:18:34Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/sync/FreeipaChecker.java", "diffHunk": "@@ -31,28 +34,38 @@\n     @Inject\n     private FreeIpaClientFactory freeIpaClientFactory;\n \n-    private RPCResponse<Boolean> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n+    @Inject\n+    private InstanceMetaDataService instanceMetaDataService;\n+\n+    private List<RPCResponse<Boolean>> checkStatus(Stack stack, Set<InstanceMetaData> checkableInstances) throws Exception {\n         return checkedMeasure(() -> {\n-            FreeIpaClient freeIpaClient = checkedMeasure(() -> freeIpaClientFactory.getFreeIpaClientForStackWithPing(stack), LOGGER,\n-                    \":::Auto sync::: freeipa client is created in {}ms\");\n-            String hostname = getPrimaryHostname(checkableInstances);\n-            return checkedMeasure(() -> freeIpaClient.serverConnCheck(freeIpaClient.getHostname(), hostname), LOGGER,\n-                    \":::Auto sync::: freeipa server_conncheck ran in {}ms\");\n+            List<RPCResponse<Boolean>> statuses = new LinkedList<>();\n+            for (InstanceMetaData instanceMetaData : checkableInstances) {\n+                String hostname = instanceMetaData.getDiscoveryFQDN();\n+                FreeIpaClient freeIpaClient = checkedMeasure(() ->\n+                                freeIpaClientFactory.getFreeIpaClientForStackWithPing(stack, hostname), LOGGER,\n+                        \":::Auto sync::: freeipa client is created in {}ms\");\n+                statuses.add(checkedMeasure(() -> freeIpaClient.serverConnCheck(freeIpaClient.getHostname(), hostname), LOGGER,\n+                        \":::Auto sync::: freeipa server_conncheck ran in {}ms\"));\n+            }\n+            return statuses;\n         }, LOGGER, \":::Auto sync::: freeipa server status is checked in {}ms\");\n     }\n \n     public SyncResult getStatus(Stack stack, Set<InstanceMetaData> checkableInstances) {\n         try {\n-            RPCResponse<Boolean> response = checkStatus(stack, checkableInstances);\n+            Set<InstanceMetaData> notTermiatedStackInstances = instanceMetaDataService.findNotTerminatedForStack(stack.getId());\n+            List<RPCResponse<Boolean>> responses = checkStatus(stack, checkableInstances);\n             DetailedStackStatus status;\n             String postFix = \"\";\n-            if (response.getResult()) {\n+            Boolean result = !responses.isEmpty() && responses.stream().allMatch(RPCResponse::getResult);\n+            if (result && responses.size() == notTermiatedStackInstances.size()) {\n                 status = DetailedStackStatus.PROVISIONED;\n             } else {\n                 status = DetailedStackStatus.UNHEALTHY;\n                 postFix = \"Freeipa is unhealthy, \";\n             }\n-            return new SyncResult(postFix + getMessage(response), status, response.getResult());\n+            return new SyncResult(postFix + getMessages(responses), status, result);\n         } catch (HttpHostConnectException | ConnectTimeoutException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6f90d48d7b515def83e4a60a994f48a86ba4da2", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a6f90d48d7b515def83e4a60a994f48a86ba4da2", "committedDate": "2020-04-23T16:41:24Z", "message": "CB-6705: Register multiple cluster proxy service for FreeIPA HA\n\nRegister one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\n\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\n\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26398f7379d5a37355376f427fa7d427d1db4e22", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/26398f7379d5a37355376f427fa7d427d1db4e22", "committedDate": "2020-04-23T00:04:06Z", "message": "CB-6705: Register multiple cluster proxy service for FreeIPA HA\n\nRegister one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\n\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\n\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline."}, "afterCommit": {"oid": "a6f90d48d7b515def83e4a60a994f48a86ba4da2", "author": {"user": {"login": "jamisonbennett", "name": "Jamison Bennett"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/a6f90d48d7b515def83e4a60a994f48a86ba4da2", "committedDate": "2020-04-23T16:41:24Z", "message": "CB-6705: Register multiple cluster proxy service for FreeIPA HA\n\nRegister one cluster proxy service for each FreeIPA instance and an\nadditional one for the primary gateway for use during provisioning.\nPrefer using the primary gateway freeipa instance but if it is\noffline, then pick an instance of freeipa that is working.\nUse the instance specific cluster proxy connections for health status,\nthat way the health status doesn't require both the checked node and\nprimary gateway node to be online.\n\nWhen reporting the health status for FreeIPA's UI status, report an\nerror if any instance is offline. That way there is an easy way for a\ncustomer to know if manual repair operation is required. In the future\nwhen the repair happens automatically, the status should only report a\nfailure when all nodes are offline.\n\nIn addition to the tests, this was manually tested by bringing\nindividual FreeIPA instances offline and validating the status is\nreported correctly. FreeIPA management service operations were also\nvalidated to work when a node was offline."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODYyNTIy", "url": "https://github.com/hortonworks/cloudbreak/pull/7877#pullrequestreview-399862522", "createdAt": "2020-04-24T11:26:36Z", "commit": {"oid": "a6f90d48d7b515def83e4a60a994f48a86ba4da2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2238, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}