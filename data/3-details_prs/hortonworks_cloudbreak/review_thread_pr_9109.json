{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDMyMDcz", "number": 9109, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1NTo0MVrOEqONkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo1MTozNlrOEqPmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzA4NDk3OnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODo1NTo0MVrOHcTiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowNTo1NFrOHccJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0MjM0Ng==", "bodyText": "Isn't there a cheaper method of validating wether and access key exists or works?\nGetAccessKeyVerificationData? I'm not sure it's better, but listing all keys seems tedious.", "url": "https://github.com/hortonworks/cloudbreak/pull/9109#discussion_r499442346", "createdAt": "2020-10-05T08:55:41Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -640,6 +640,24 @@ public void deleteMachineUserAccessKeys(String actorCrn, String accountId, Strin\n         }\n     }\n \n+    /**\n+     * Check that machine user has a specific access key in UMS\n+     * @param actorCrn actor for the machine user request\n+     * @param accountId the account ID\n+     * @param machineUserCrn machine user crn that own the access key\n+     * @param accessKeyId access key id that we need to check\n+     * @return result that is true if the machine user has the queried access key in UMS\n+     */\n+    public boolean doesMachineUserHasAccessKey(String actorCrn, String accountId,\n+            String machineUserCrn, String accessKeyId) {\n+        try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n+            UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n+            String requestId = UUID.randomUUID().toString();\n+            List<String> accessKeys = client.listMachineUserAccessKeys(requestId, actorCrn, accountId, machineUserCrn, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128612b7ed269492c0655d66453a28d1f115df7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MzI1Ng==", "bodyText": "that's only listing the access keys that are assigned to the generated machine user + we need to first check the machine user existence itself anyway + with this no any new calls added. so i think that should be fine for now (can be refactored later)", "url": "https://github.com/hortonworks/cloudbreak/pull/9109#discussion_r499583256", "createdAt": "2020-10-05T13:05:54Z", "author": {"login": "oleewere"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/GrpcUmsClient.java", "diffHunk": "@@ -640,6 +640,24 @@ public void deleteMachineUserAccessKeys(String actorCrn, String accountId, Strin\n         }\n     }\n \n+    /**\n+     * Check that machine user has a specific access key in UMS\n+     * @param actorCrn actor for the machine user request\n+     * @param accountId the account ID\n+     * @param machineUserCrn machine user crn that own the access key\n+     * @param accessKeyId access key id that we need to check\n+     * @return result that is true if the machine user has the queried access key in UMS\n+     */\n+    public boolean doesMachineUserHasAccessKey(String actorCrn, String accountId,\n+            String machineUserCrn, String accessKeyId) {\n+        try (ManagedChannelWrapper channelWrapper = makeWrapper()) {\n+            UmsClient client = makeClient(channelWrapper.getChannel(), actorCrn);\n+            String requestId = UUID.randomUUID().toString();\n+            List<String> accessKeys = client.listMachineUserAccessKeys(requestId, actorCrn, accountId, machineUserCrn, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ0MjM0Ng=="}, "originalCommit": {"oid": "e128612b7ed269492c0655d66453a28d1f115df7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzMxMTYxOnYy", "diffSide": "RIGHT", "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/service/AltusIAMService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwOTo1MTozNlrOHcVp7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzowNjoxMlrOHccJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3Njk3Mg==", "bodyText": "It's quite confusing that you did not kept the order of variables but used the same name for the method! Somewhere the actorCrn is first, but here machineUserName is the first sine. Since we are only using strings here it's easy to misuse these methods.", "url": "https://github.com/hortonworks/cloudbreak/pull/9109#discussion_r499476972", "createdAt": "2020-10-05T09:51:36Z", "author": {"login": "lnardai"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/service/AltusIAMService.java", "diffHunk": "@@ -40,6 +40,27 @@ public AltusIAMService(GrpcUmsClient umsClient,\n                         UserManagementProto.AccessKeyType.Value.ED25519)));\n     }\n \n+    /**\n+     * Checks that machine user has a specific access key on UMS side\n+     */\n+    public boolean doesMachineUserHasAccessKey(String machineUserName, String accessKey, String actorCrn, String accountId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128612b7ed269492c0655d66453a28d1f115df7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU4MzQzMA==", "bodyText": "ok,right, im fixing it", "url": "https://github.com/hortonworks/cloudbreak/pull/9109#discussion_r499583430", "createdAt": "2020-10-05T13:06:12Z", "author": {"login": "oleewere"}, "path": "auth-connector/src/main/java/com/sequenceiq/cloudbreak/auth/altus/service/AltusIAMService.java", "diffHunk": "@@ -40,6 +40,27 @@ public AltusIAMService(GrpcUmsClient umsClient,\n                         UserManagementProto.AccessKeyType.Value.ED25519)));\n     }\n \n+    /**\n+     * Checks that machine user has a specific access key on UMS side\n+     */\n+    public boolean doesMachineUserHasAccessKey(String machineUserName, String accessKey, String actorCrn, String accountId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3Njk3Mg=="}, "originalCommit": {"oid": "e128612b7ed269492c0655d66453a28d1f115df7"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2220, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}