{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzQ4MDM3", "number": 7956, "title": "CDPCP-2043. Remove groups that don't exist in control plane from IPA", "bodyText": "Groups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group.\nAdded unit tests for new behavior\nTested manually by adding a group and running user sync", "createdAt": "2020-05-01T23:32:14Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7956", "merged": true, "mergeCommit": {"oid": "63b4bc0082c0757bf4efb667ccfeff6b61e7ca38"}, "closed": true, "closedAt": "2020-05-08T07:08:37Z", "author": {"login": "handavid"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd_eQOgFqTQwNDk4NDY5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfLvNFgFqTQwODAyMDg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTg0Njk3", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#pullrequestreview-404984697", "createdAt": "2020-05-04T13:26:57Z", "commit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyNjo1N1rOGQAO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzoyNjo1N1rOGQAO-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzNDIzMg==", "bodyText": "I think you could iterate the entryset, so you won't have to make a get() against the map", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r419434232", "createdAt": "2020-05-04T13:26:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/UmsUsersStateProvider.java", "diffHunk": "@@ -64,23 +64,27 @@\n             Map<String, FmsGroup> crnToFmsGroup = grpcUmsClient.listGroups(actorCrn, accountId, List.of(), requestIdOptional).stream()\n                     .collect(Collectors.toMap(Group::getCrn, this::umsGroupToGroup));\n \n-            List<WorkloadAdministrationGroup> wags = grpcUmsClient.listWorkloadAdministrationGroups(INTERNAL_ACTOR_CRN, accountId, requestIdOptional);\n-\n+            Map<WorkloadAdministrationGroup, FmsGroup> wags = grpcUmsClient.listWorkloadAdministrationGroups(INTERNAL_ACTOR_CRN, accountId, requestIdOptional)\n+                    .stream()\n+                    .collect(Collectors.toMap(wag -> wag, wag -> nameToGroup(wag.getWorkloadAdministrationGroupName())));\n             environmentCrns.forEach(environmentCrn -> {\n-                UmsUsersState.Builder umsUsersStateBuilder = new UmsUsersState.Builder();\n+                UmsUsersState.Builder umsUsersStateBuilder = new UmsUsersState.Builder()\n+                        .setWorkloadAdministrationGroups(wags.values());\n+\n                 UsersState.Builder usersStateBuilder = new UsersState.Builder();\n                 Set<String> wagNamesForOtherEnvironments = new HashSet<>();\n \n+\n                 crnToFmsGroup.values().forEach(usersStateBuilder::addGroup);\n \n                 // Only add workload admin groups that belong to this environment.\n                 // At the same time, build a set of workload admin groups that are\n                 // associated with other environments so we can filter these out in\n                 // the per-user group listing in handleUser.\n-                wags.forEach(wag -> {\n+                wags.keySet().forEach(wag -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTkxNzk4", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#pullrequestreview-404991798", "createdAt": "2020-05-04T13:35:04Z", "commit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozNTowNVrOGQAlhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzozNTowNVrOGQAlhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MDAwNw==", "bodyText": "usually set methods don't return, I think builder pattern use the with naming convention", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r419440007", "createdAt": "2020-05-04T13:35:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/FmsGroup.java", "diffHunk": "@@ -6,8 +6,9 @@\n \n     private String name;\n \n-    public void setName(String name) {\n+    public FmsGroup setName(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "649f39c81b14ee02f5e59ff7dbea0d4bbf454605", "author": {"user": {"login": "handavid", "name": "David Han"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/649f39c81b14ee02f5e59ff7dbea0d4bbf454605", "committedDate": "2020-05-01T23:28:20Z", "message": "CDPCP-2043. Remove groups that don't exist in control plane from IPA\n\nGroups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\n\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group."}, "afterCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233", "author": {"user": {"login": "handavid", "name": "David Han"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2ca44905acecff893ad76a2b6f033fa0d1ae6233", "committedDate": "2020-05-07T04:42:00Z", "message": "CDPCP-2043. Remove groups that don't exist in control plane from IPA\n\nGroups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\n\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzE0NzU5", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#pullrequestreview-407314759", "createdAt": "2020-05-07T09:46:05Z", "commit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0NjowNVrOGR24-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0NjowNVrOGR24-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3ODI5OA==", "bodyText": "overall things lgtm, but I think this log could be moved into the calculate methods.\nalso isDebugEnabled is overkill I think, as we have debug enabled everywhere, and if we are planning to change that then we will have to revisit our logging anyway", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r421378298", "createdAt": "2020-05-07T09:46:05Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "diffHunk": "@@ -5,113 +5,187 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n-import com.sequenceiq.freeipa.service.freeipa.user.UserServiceConstants;\n+import com.sequenceiq.freeipa.client.FreeIpaChecks;\n+import com.sequenceiq.freeipa.service.freeipa.user.UserSyncConstants;\n \n public class UsersStateDifference {\n     private static final Logger LOGGER = LoggerFactory.getLogger(UsersStateDifference.class);\n \n-    private Set<FmsGroup> groupsToAdd;\n+    private ImmutableSet<FmsGroup> groupsToAdd;\n \n-    private Set<FmsUser> usersToAdd;\n+    private ImmutableSet<FmsGroup> groupsToRemove;\n \n-    private Set<String> usersToRemove;\n+    private ImmutableSet<FmsUser> usersToAdd;\n \n-    private Multimap<String, String> groupMembershipToAdd;\n+    private ImmutableSet<String> usersToRemove;\n \n-    private Multimap<String, String> groupMembershipToRemove;\n+    private ImmutableMultimap<String, String> groupMembershipToAdd;\n \n-    public UsersStateDifference(Set<FmsGroup> groupsToAdd, Set<FmsUser> usersToAdd, Set<String> usersToRemove,\n-                                Multimap<String, String> groupMembershipToAdd, Multimap<String, String> groupMembershipToRemove) {\n+    private ImmutableMultimap<String, String> groupMembershipToRemove;\n+\n+    public UsersStateDifference(ImmutableSet<FmsGroup> groupsToAdd, ImmutableSet<FmsGroup> groupsToRemove,\n+            ImmutableSet<FmsUser> usersToAdd, ImmutableSet<String> usersToRemove,\n+            ImmutableMultimap<String, String> groupMembershipToAdd, ImmutableMultimap<String, String> groupMembershipToRemove) {\n         this.groupsToAdd = requireNonNull(groupsToAdd);\n+        this.groupsToRemove = requireNonNull(groupsToRemove);\n         this.usersToAdd = requireNonNull(usersToAdd);\n         this.usersToRemove = requireNonNull(usersToRemove);\n         this.groupMembershipToAdd = requireNonNull(groupMembershipToAdd);\n         this.groupMembershipToRemove = requireNonNull(groupMembershipToRemove);\n     }\n \n-    public Set<FmsGroup> getGroupsToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToAdd() {\n         return groupsToAdd;\n     }\n \n-    public Set<FmsUser> getUsersToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToRemove() {\n+        return groupsToRemove;\n+    }\n+\n+    public ImmutableSet<FmsUser> getUsersToAdd() {\n         return usersToAdd;\n     }\n \n-    public Set<String> getUsersToRemove() {\n+    public ImmutableSet<String> getUsersToRemove() {\n         return usersToRemove;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToAdd() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToAdd() {\n         return groupMembershipToAdd;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToRemove() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToRemove() {\n         return groupMembershipToRemove;\n     }\n \n     @Override\n     public String toString() {\n         return \"UsersStateDifference{\"\n                 + \"groupsToAdd=\" + groupsToAdd\n+                + \", groupsToRemove=\" + groupsToRemove\n                 + \", usersToAdd=\" + usersToAdd\n                 + \", usersToRemove=\" + usersToRemove\n                 + \", groupMembershipToAdd=\" + groupMembershipToAdd\n                 + \", groupMembershipToRemove=\" + groupMembershipToRemove\n                 + '}';\n     }\n \n-    public static UsersStateDifference fromUmsAndIpaUsersStates(UsersState umsState, UsersState ipaState) {\n-        Multimap<String, String> umsGroupMembership = umsState.getGroupMembership();\n-        Multimap<String, String> ipaGroupMembership = ipaState.getGroupMembership();\n-\n-        Multimap<String, String> groupMembershipToAdd = HashMultimap.create();\n-        umsGroupMembership.forEach((group, user) -> {\n-            if (!ipaGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"adding user : {} to group : {}\", user, group);\n-                groupMembershipToAdd.put(group, user);\n-            }\n-        });\n-        LOGGER.info(\"groupMembershipToAdd size= {}\", groupMembershipToAdd.size());\n-\n-        Multimap<String, String> groupMembershipToRemove = HashMultimap.create();\n-        ipaGroupMembership.forEach((group, user) -> {\n-            if (!umsGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"removing user : {} to group : {}\", user, group);\n-                groupMembershipToRemove.put(group, user);\n-            }\n-        });\n-\n-        LOGGER.info(\"groupMembershipToRemove size= {}\", groupMembershipToRemove.size());\n-\n-        Set<String> usersToRemove =\n-            getUsersToBeRemoved(\n-                umsState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP),\n-                ipaState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP));\n-        LOGGER.info(\"usersToRemove size= {}\", usersToRemove.size());\n+    public static UsersStateDifference fromUmsAndIpaUsersStates(UmsUsersState umsState, UsersState ipaState) {\n+        ImmutableSet<FmsUser> usersToAdd = calculateUsersToAdd(umsState, ipaState);\n+        LOGGER.info(\"usersToAdd size = {}\", usersToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding users {}\", usersToAdd.stream().map(FmsUser::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<String> usersToRemove = calculateUsersToRemove(umsState, ipaState);\n+        LOGGER.info(\"usersToRemove size = {}\", usersToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing users {}\", usersToRemove.stream().collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToAdd = calculateGroupsToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupsToAdd size = {}\", groupsToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding groups {}\", groupsToAdd.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<FmsGroup> groupsToRemove = calculateGroupsToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupsToRemove size = {}\", groupsToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing groups {}\", groupsToRemove.stream().map(FmsGroup::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToAdd = calculateGroupMembershipToAdd(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToAdd size = {}\", groupMembershipToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding group memberships {}\", groupMembershipToAdd.asMap());\n+        }\n+\n+        ImmutableMultimap<String, String> groupMembershipToRemove = calculateGroupMembershipToRemove(umsState, ipaState);\n+        LOGGER.info(\"groupMembershipToRemove size = {}\", groupMembershipToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing group memberships {}\", groupMembershipToRemove.asMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzE1MjY0", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#pullrequestreview-407315264", "createdAt": "2020-05-07T09:46:42Z", "commit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0Njo0MlrOGR26pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo0Njo0MlrOGR26pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM3ODcyNg==", "bodyText": "this stream is not necessary I think", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#discussion_r421378726", "createdAt": "2020-05-07T09:46:42Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/freeipa/user/model/UsersStateDifference.java", "diffHunk": "@@ -5,113 +5,187 @@\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n-import com.sequenceiq.freeipa.service.freeipa.user.UserServiceConstants;\n+import com.sequenceiq.freeipa.client.FreeIpaChecks;\n+import com.sequenceiq.freeipa.service.freeipa.user.UserSyncConstants;\n \n public class UsersStateDifference {\n     private static final Logger LOGGER = LoggerFactory.getLogger(UsersStateDifference.class);\n \n-    private Set<FmsGroup> groupsToAdd;\n+    private ImmutableSet<FmsGroup> groupsToAdd;\n \n-    private Set<FmsUser> usersToAdd;\n+    private ImmutableSet<FmsGroup> groupsToRemove;\n \n-    private Set<String> usersToRemove;\n+    private ImmutableSet<FmsUser> usersToAdd;\n \n-    private Multimap<String, String> groupMembershipToAdd;\n+    private ImmutableSet<String> usersToRemove;\n \n-    private Multimap<String, String> groupMembershipToRemove;\n+    private ImmutableMultimap<String, String> groupMembershipToAdd;\n \n-    public UsersStateDifference(Set<FmsGroup> groupsToAdd, Set<FmsUser> usersToAdd, Set<String> usersToRemove,\n-                                Multimap<String, String> groupMembershipToAdd, Multimap<String, String> groupMembershipToRemove) {\n+    private ImmutableMultimap<String, String> groupMembershipToRemove;\n+\n+    public UsersStateDifference(ImmutableSet<FmsGroup> groupsToAdd, ImmutableSet<FmsGroup> groupsToRemove,\n+            ImmutableSet<FmsUser> usersToAdd, ImmutableSet<String> usersToRemove,\n+            ImmutableMultimap<String, String> groupMembershipToAdd, ImmutableMultimap<String, String> groupMembershipToRemove) {\n         this.groupsToAdd = requireNonNull(groupsToAdd);\n+        this.groupsToRemove = requireNonNull(groupsToRemove);\n         this.usersToAdd = requireNonNull(usersToAdd);\n         this.usersToRemove = requireNonNull(usersToRemove);\n         this.groupMembershipToAdd = requireNonNull(groupMembershipToAdd);\n         this.groupMembershipToRemove = requireNonNull(groupMembershipToRemove);\n     }\n \n-    public Set<FmsGroup> getGroupsToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToAdd() {\n         return groupsToAdd;\n     }\n \n-    public Set<FmsUser> getUsersToAdd() {\n+    public ImmutableSet<FmsGroup> getGroupsToRemove() {\n+        return groupsToRemove;\n+    }\n+\n+    public ImmutableSet<FmsUser> getUsersToAdd() {\n         return usersToAdd;\n     }\n \n-    public Set<String> getUsersToRemove() {\n+    public ImmutableSet<String> getUsersToRemove() {\n         return usersToRemove;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToAdd() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToAdd() {\n         return groupMembershipToAdd;\n     }\n \n-    public Multimap<String, String> getGroupMembershipToRemove() {\n+    public ImmutableMultimap<String, String> getGroupMembershipToRemove() {\n         return groupMembershipToRemove;\n     }\n \n     @Override\n     public String toString() {\n         return \"UsersStateDifference{\"\n                 + \"groupsToAdd=\" + groupsToAdd\n+                + \", groupsToRemove=\" + groupsToRemove\n                 + \", usersToAdd=\" + usersToAdd\n                 + \", usersToRemove=\" + usersToRemove\n                 + \", groupMembershipToAdd=\" + groupMembershipToAdd\n                 + \", groupMembershipToRemove=\" + groupMembershipToRemove\n                 + '}';\n     }\n \n-    public static UsersStateDifference fromUmsAndIpaUsersStates(UsersState umsState, UsersState ipaState) {\n-        Multimap<String, String> umsGroupMembership = umsState.getGroupMembership();\n-        Multimap<String, String> ipaGroupMembership = ipaState.getGroupMembership();\n-\n-        Multimap<String, String> groupMembershipToAdd = HashMultimap.create();\n-        umsGroupMembership.forEach((group, user) -> {\n-            if (!ipaGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"adding user : {} to group : {}\", user, group);\n-                groupMembershipToAdd.put(group, user);\n-            }\n-        });\n-        LOGGER.info(\"groupMembershipToAdd size= {}\", groupMembershipToAdd.size());\n-\n-        Multimap<String, String> groupMembershipToRemove = HashMultimap.create();\n-        ipaGroupMembership.forEach((group, user) -> {\n-            if (!umsGroupMembership.containsEntry(group, user)) {\n-                LOGGER.debug(\"removing user : {} to group : {}\", user, group);\n-                groupMembershipToRemove.put(group, user);\n-            }\n-        });\n-\n-        LOGGER.info(\"groupMembershipToRemove size= {}\", groupMembershipToRemove.size());\n-\n-        Set<String> usersToRemove =\n-            getUsersToBeRemoved(\n-                umsState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP),\n-                ipaState.getGroupMembership().get(UserServiceConstants.CDP_USERSYNC_INTERNAL_GROUP));\n-        LOGGER.info(\"usersToRemove size= {}\", usersToRemove.size());\n+    public static UsersStateDifference fromUmsAndIpaUsersStates(UmsUsersState umsState, UsersState ipaState) {\n+        ImmutableSet<FmsUser> usersToAdd = calculateUsersToAdd(umsState, ipaState);\n+        LOGGER.info(\"usersToAdd size = {}\", usersToAdd.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"adding users {}\", usersToAdd.stream().map(FmsUser::getName).collect(Collectors.toSet()));\n+        }\n+\n+        ImmutableSet<String> usersToRemove = calculateUsersToRemove(umsState, ipaState);\n+        LOGGER.info(\"usersToRemove size = {}\", usersToRemove.size());\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"removing users {}\", usersToRemove.stream().collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233"}, "originalPosition": 130}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a31b79ea06637ab3503aee52c404bf0cd24f91a", "author": {"user": {"login": "handavid", "name": "David Han"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5a31b79ea06637ab3503aee52c404bf0cd24f91a", "committedDate": "2020-05-07T20:21:35Z", "message": "CDPCP-2043. Remove groups that don't exist in control plane from IPA\n\nGroups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\n\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ca44905acecff893ad76a2b6f033fa0d1ae6233", "author": {"user": {"login": "handavid", "name": "David Han"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/2ca44905acecff893ad76a2b6f033fa0d1ae6233", "committedDate": "2020-05-07T04:42:00Z", "message": "CDPCP-2043. Remove groups that don't exist in control plane from IPA\n\nGroups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\n\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group."}, "afterCommit": {"oid": "5a31b79ea06637ab3503aee52c404bf0cd24f91a", "author": {"user": {"login": "handavid", "name": "David Han"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5a31b79ea06637ab3503aee52c404bf0cd24f91a", "committedDate": "2020-05-07T20:21:35Z", "message": "CDPCP-2043. Remove groups that don't exist in control plane from IPA\n\nGroups that do not exist in the control plane at all can be safely removed\nfrom IPA. The UmsUsersState has modified to include all WAGs so we can make\nthis determination.\n\nSome protections were added to the FreeIPA client to prevent adding/removing\ncertain users that user sync should not touch. e.g., this prevents accidentally\nremoving the admin user or the admins group."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDIwODQw", "url": "https://github.com/hortonworks/cloudbreak/pull/7956#pullrequestreview-408020840", "createdAt": "2020-05-08T06:18:15Z", "commit": {"oid": "5a31b79ea06637ab3503aee52c404bf0cd24f91a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2156, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}