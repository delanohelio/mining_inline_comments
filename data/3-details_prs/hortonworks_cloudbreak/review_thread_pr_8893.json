{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDc1NTE5", "number": 8893, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNDo1OFrOEebixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0MDoxN1rOEgDIZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ0MDA0OnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNDo1OFrOHKE_Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMDoyNzo0MVrOHKIGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTU2Ng==", "bodyText": "I am a little confused as to why there is an async stop followed by an async start. Does andThen() wait for the async to complete? If so, why even use async (unless it is referenced elsewhere).", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480329566", "createdAt": "2020-08-31T19:04:58Z", "author": {"login": "jamisonbennett"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -78,7 +78,8 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n             String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n             if (vm.getStatus() == InstanceStatus.STARTED) {\n-                doReboot(completables, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+                doReboot(completables, vm, statuses, () -> azureClient.stopVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                        .andThen(azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM4MDQzOA==", "bodyText": "Thank you very much for the review. I verified that andThen() is a blocking call and wait for the first async completable to finish. Also it will re-throw any error that is thrown by the first completable. The link to the snippet I use to verify that : https://gist.github.com/christmasferret/3c0a185160ef420526bf882090517ca7", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480380438", "createdAt": "2020-08-31T20:27:41Z", "author": {"login": "christmasferret"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -78,7 +78,8 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n             String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n             if (vm.getStatus() == InstanceStatus.STARTED) {\n-                doReboot(completables, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+                doReboot(completables, vm, statuses, () -> azureClient.stopVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                        .andThen(azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyOTU2Ng=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQxODMyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMjo1NFrOHKs-zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoyOTo0MFrOHLLqWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDc4Mg==", "bodyText": "this is not used anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480984782", "createdAt": "2020-09-01T09:02:54Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4NzQ1MA==", "bodyText": "Thank you for pointing this out. It is removed.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481487450", "createdAt": "2020-09-01T23:29:40Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NDc4Mg=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyMzU3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDoxMVrOHKtB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzo0NzowMVrOHLL_og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTU2Nw==", "bodyText": "why did you introduce a new doStart? the old one is not used anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480985567", "createdAt": "2020-09-01T09:04:11Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -185,6 +188,28 @@ private void doStart(List<CloudInstance> affectedVMs, AuthenticatedContext ac, L\n         }\n     }\n \n+    private void doStart(List<CloudInstance> affectedVMs, AuthenticatedContext ac, List<CloudInstance> instances, List<CloudVmInstanceStatus> rebootedVmsStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5Mjg5OA==", "bodyText": "The reason to introduce new doStart() is we want to return the polling results from doStart(). The polling can take 1000 seconds total if blocking. In the case of a hang blocking call, we will wait twice as much long. It is not necessary to poll inside doStart() and then after return from doStart() immediately poll again. I also removed the old one.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481492898", "createdAt": "2020-09-01T23:47:01Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -185,6 +188,28 @@ private void doStart(List<CloudInstance> affectedVMs, AuthenticatedContext ac, L\n         }\n     }\n \n+    private void doStart(List<CloudInstance> affectedVMs, AuthenticatedContext ac, List<CloudInstance> instances, List<CloudVmInstanceStatus> rebootedVmsStatus) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTU2Nw=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQyNTYwOnYy", "diffSide": "LEFT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNDo0MVrOHKtDDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzozNDoxNFrOHLLwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTg2OQ==", "bodyText": "doReboot is not used anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480985869", "createdAt": "2020-09-01T09:04:41Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4ODk1MQ==", "bodyText": "Thank you! I removed the line.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481488951", "createdAt": "2020-09-01T23:34:14Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTg2OQ=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQzMDUwOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowNTo1OVrOHKtF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzozMzo0MVrOHLLvnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjYyMQ==", "bodyText": "why do we need this new list of statuses? shouldn't the affectedVms fill the same purpose?", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480986621", "createdAt": "2020-09-01T09:05:59Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4ODc5Ng==", "bodyText": "Thank you for the suggestion! I removed affectedVms. Also, the rebootedVmsStatus will be returned from doStart() method as suggested in another comment.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481488796", "createdAt": "2020-09-01T23:33:41Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NjYyMQ=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzQ0MzYzOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowOTo0M1rOHKtN7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzozNjo0NVrOHLLzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4ODY1Mw==", "bodyText": "instead of passing affectedVms list to doStop and doStart it would be nicer if they return with a list and we can use that", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480988653", "createdAt": "2020-09-01T09:09:43Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5MTk4OQ==", "bodyText": "I miss some action here. what happens here is:\n\nissue stop for VMs which are running\ncollect the VM statuses\nstart VMs which are stopped\n\nIn theory all VMs should be stopped at the point we are collecting the statuses after stop. I think we should at least match that the requested VMs for reboot are all stopped and have a log here if any of them is not stopped", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r480991989", "createdAt": "2020-09-01T09:15:28Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4ODY1Mw=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4OTc2OQ==", "bodyText": "Thanks for suggesting that! Now I returned rebootedVmsStatus from doStart() method.\nI also added a specific log check to see if any requested VMs for reboot were not stopped\n-logInvalidStatuses(getNotStopped(statuses));", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481489769", "createdAt": "2020-09-01T23:36:45Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4ODY1Mw=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzU0NDQ0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTozNjozNVrOHKuLBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzo0NjoxNVrOHLhg3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAwNDI5Mw==", "bodyText": "you have dropped polling here. are we sure about AmazonEC2Client#stopInstances and AmazonEC2Client#startInstances will return only after the state is changed to stopped/started? if not we might need some polling there", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481004293", "createdAt": "2020-09-01T09:36:35Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);\n                 logInvalidStatuses(getNotStoppedOrStarted(statuses));\n             }\n         } catch (SdkClientException e) {\n             LOGGER.warn(\"Failed to send reboot request to AWS: \", e);\n             throw e;\n         }\n-        return pollerUtil.waitFor(ac, affectedVms, Sets.newHashSet(InstanceStatus.STARTED, InstanceStatus.FAILED));\n+        return rebootedVmsStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ5MTQ5Ng==", "bodyText": "The reason to drop the polling outside here is that we already specifically do polling inside doStop() and doStart() as below. The polling will take 1000 seconds total. In the case of a hang blocking call, we will wait twice as much long. It is not necessary to poll and then immediately poll again. I added unit test and also did integration testing with AWS.\ndoStop(...) { \n\tstop(...) {\n\t\tsetCloudVmInstanceStatuses(...){\n\t\t\tpollerUtil.waitFor(...);\n\t\t}\n\t}\n}", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481491496", "createdAt": "2020-09-01T23:42:25Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);\n                 logInvalidStatuses(getNotStoppedOrStarted(statuses));\n             }\n         } catch (SdkClientException e) {\n             LOGGER.warn(\"Failed to send reboot request to AWS: \", e);\n             throw e;\n         }\n-        return pollerUtil.waitFor(ac, affectedVms, Sets.newHashSet(InstanceStatus.STARTED, InstanceStatus.FAILED));\n+        return rebootedVmsStatus;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAwNDI5Mw=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTg0NTQ2OQ==", "bodyText": "ok I missed that! thanks for pointing out", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481845469", "createdAt": "2020-09-02T07:46:15Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -134,18 +134,21 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n         AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n                 ac.getCloudContext().getLocation().getRegion().value());\n         List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                doStart(affectedVms, ac, getStopped(statuses), rebootedVmsStatus);\n                 logInvalidStatuses(getNotStoppedOrStarted(statuses));\n             }\n         } catch (SdkClientException e) {\n             LOGGER.warn(\"Failed to send reboot request to AWS: \", e);\n             throw e;\n         }\n-        return pollerUtil.waitFor(ac, affectedVms, Sets.newHashSet(InstanceStatus.STARTED, InstanceStatus.FAILED));\n+        return rebootedVmsStatus;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAwNDI5Mw=="}, "originalCommit": {"oid": "fd4415842d4162f03b1f087f471d82e571517ed6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzU1NTE1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo0MDowNVrOHLpPTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxNjowOFrOHL-2Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3MjA0Nw==", "bodyText": "doStop first parameter is never used, could you drop it?", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481972047", "createdAt": "2020-09-02T10:40:05Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNjA5MQ==", "bodyText": "Thanks. I dropped it.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r482326091", "createdAt": "2020-09-02T19:16:08Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3MjA0Nw=="}, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzU1ODcxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo0MTowNVrOHLpRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxNjoxOVrOHL-28Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3MjU3Ng==", "bodyText": "doStart first parameter case is the same as doStop. could you drop it?", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481972576", "createdAt": "2020-09-02T10:41:05Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                logInvalidStatuses(getNotStopped(statuses));\n+                rebootedVmsStatus = doStart(new ArrayList<>(), ac, getStopped(statuses));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNjI1Nw==", "bodyText": "Thanks. I dropped it.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r482326257", "createdAt": "2020-09-02T19:16:19Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                logInvalidStatuses(getNotStopped(statuses));\n+                rebootedVmsStatus = doStart(new ArrayList<>(), ac, getStopped(statuses));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3MjU3Ng=="}, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzU4MzcyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDo0NzoxN1rOHLpfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToxOTo1MFrOHL_DQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NjIzNw==", "bodyText": "I think logInvalidStatuses would need some extra parameter which is also logged. Like \"instances should be in STOPPED state\" and here comes the list of instance ids and states. Otherwise we won't know if the log is coming from line 136 or 138.\nAlso logInvalidStatuses should log only one line, and not separate lines per instance. Could you fix that?", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r481976237", "createdAt": "2020-09-02T10:47:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                logInvalidStatuses(getNotStopped(statuses));\n+                rebootedVmsStatus = doStart(new ArrayList<>(), ac, getStopped(statuses));\n+                logInvalidStatuses(getNotStarted(statuses));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyODczOA==", "bodyText": "I fixed both here.\nNow it will only log one line. Also there is a targetStatus parameter to log the expected status.\nBelow is a sample log message.\n Unable to reboot instance i-1 because of invalid status STARTED, instance i-2 because of invalid status STARTED. Instances should be in STOPPED state.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r482328738", "createdAt": "2020-09-02T19:19:06Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                logInvalidStatuses(getNotStopped(statuses));\n+                rebootedVmsStatus = doStart(new ArrayList<>(), ac, getStopped(statuses));\n+                logInvalidStatuses(getNotStarted(statuses));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NjIzNw=="}, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyOTQxMQ==", "bodyText": "I have also squashed all my commits into one commit.", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r482329411", "createdAt": "2020-09-02T19:19:50Z", "author": {"login": "christmasferret"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +126,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n+\n         try {\n             if (!vms.isEmpty()) {\n                 List<CloudVmInstanceStatus> statuses = check(ac, vms);\n-                doReboot(affectedVms, amazonEC2Client, getStarted(statuses));\n-                doStart(affectedVms, ac, getStopped(statuses));\n-                logInvalidStatuses(getNotStoppedOrStarted(statuses));\n+                doStop(new ArrayList<>(), ac, getStarted(statuses));\n+                statuses = check(ac, vms);\n+                logInvalidStatuses(getNotStopped(statuses));\n+                rebootedVmsStatus = doStart(new ArrayList<>(), ac, getStopped(statuses));\n+                logInvalidStatuses(getNotStarted(statuses));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk3NjIzNw=="}, "originalCommit": {"oid": "60c97bb01c36178bd4f47fdbfeeba7b92d8e4383"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQ2MTQ1OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNzoxN1rOHMZ8IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozNzoxN1rOHMZ8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTk1Mw==", "bodyText": "multiple issues here:\n\nplease don't use return like this, if possible avoid in the middle of returns in methods, or use else to indicate there are multiple exit points in the method\nif you would like to check if a collection is empty, please use isEmpty()\nI would negate the if condition and put the body of the method inside. You can use CollectionUtils from apache (CollectionUtils.isNotEmpty(instances)) or spring (!CollectionUtils.isEmpty(instances)) or write the whole condition by hand (instances != null && !instances.isEmpty()). It would still result in the same logic but there won't be that unnecessary return", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r482769953", "createdAt": "2020-09-03T07:37:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -163,33 +164,37 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n                 .map(status -> status.getCloudInstance()).collect(Collectors.toList());\n     }\n \n-    private void doReboot(List<CloudInstance> affectedVMs, AmazonEC2Client amazonEC2Client, List<CloudInstance> instances) {\n+    private List<CloudVmInstanceStatus> doStart(AuthenticatedContext ac, List<CloudInstance> instances) {\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();\n         for (CloudInstance instance: instances) {\n             try {\n-                amazonEC2Client.rebootInstances(new RebootInstancesRequest().withInstanceIds(List.of(instance.getInstanceId())));\n-                affectedVMs.add(instance);\n+                rebootedVmsStatus.addAll(start(ac, null, List.of(instance)));\n             } catch (AmazonEC2Exception e) {\n-                LOGGER.warn(String.format(\"Unable to reboot instance %s\", instance), e);\n+                LOGGER.warn(String.format(\"Unable to start instance %s\", instance), e);\n             }\n         }\n+        return rebootedVmsStatus;\n     }\n \n-    private void doStart(List<CloudInstance> affectedVMs, AuthenticatedContext ac, List<CloudInstance> instances) {\n+    private void doStop(AuthenticatedContext ac, List<CloudInstance> instances) {\n         for (CloudInstance instance: instances) {\n             try {\n-                start(ac, null, List.of(instance));\n-                affectedVMs.add(instance);\n+                stop(ac, null, List.of(instance));\n             } catch (AmazonEC2Exception e) {\n-                LOGGER.warn(String.format(\"Unable to start instance %s\", instance), e);\n+                LOGGER.warn(String.format(\"Unable to stop instance %s\", instance), e);\n             }\n         }\n     }\n \n-    private void logInvalidStatuses(List<CloudVmInstanceStatus> instances) {\n-        for (CloudVmInstanceStatus instance: instances) {\n-            LOGGER.warn(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n-                    instance.getCloudInstance().getInstanceId(), instance.getStatus().toString()));\n+    public void logInvalidStatuses(List<CloudVmInstanceStatus> instances, InstanceStatus targetStatus) {\n+        if (instances == null || instances.size() < 1) {\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e04f99c7ba73ea273d813f2bc82f1157627d47"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDQxMTkxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0MDoxN1rOHMsjEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTo0MToxOVrOHMsluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDgzMw==", "bodyText": "one more nit, but we can merge it without even if you don't change this:\nyou can declare this variable right in the line where it gets value, at doStart. also the return could be moved inside the try, right after logInvalidStatuses(getNotStarted(statuses), InstanceStatus.STARTED);", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r483074833", "createdAt": "2020-09-03T15:40:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +127,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac472345c0dc83aeca103c5c5ce81777e5240e0f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NTUxNQ==", "bodyText": "oh I missed if (!vms.isEmpty()), nevermind....", "url": "https://github.com/hortonworks/cloudbreak/pull/8893#discussion_r483075515", "createdAt": "2020-09-03T15:41:19Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsInstanceConnector.java", "diffHunk": "@@ -131,25 +127,31 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     )\n     @Override\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n-        AmazonEC2Client amazonEC2Client = awsClient.createAccess(new AwsCredentialView(ac.getCloudCredential()),\n-                ac.getCloudContext().getLocation().getRegion().value());\n-        List<CloudInstance> affectedVms = new ArrayList<>();\n+        List<CloudVmInstanceStatus> rebootedVmsStatus = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3NDgzMw=="}, "originalCommit": {"oid": "ac472345c0dc83aeca103c5c5ce81777e5240e0f"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2323, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}