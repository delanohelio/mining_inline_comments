{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjU4MzY4", "number": 8034, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTozNjoxNlrOD8Bmbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0MDoyN1rOD8Brqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjY3Mzc1OnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTozNjoxNlrOGUtaoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0NDowOFrOGUySgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ==", "bodyText": "hmm.. can we throw badrequest instead of internal server error from cloudbreak side?", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424368801", "createdAt": "2020-05-13T11:36:16Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTc0OA==", "bodyText": "We do not throw internal exception directly, It is a common jax-rs exception of HTTP code 500. But we need to handle it because the reason message was 500 internal error on the UI", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424369748", "createdAt": "2020-05-13T11:38:07Z", "author": {"login": "topolyai5"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MzU3NQ==", "bodyText": "but why is it 500? why not something else? maybe a bad exceptionmapper?", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424373575", "createdAt": "2020-05-13T11:45:49Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3ODkxMg==", "bodyText": "Imagine that user error when someone would like to attach an AZURE SDX to an AWS env.\nSomewhere in the CB throw a ClassCastException. Should we create a mapper all of the unexpected wrong user interaction?\nSorry, my fault: in the DefaultExceptionMapper we throw an InternalServerError", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424378912", "createdAt": "2020-05-13T11:55:59Z", "author": {"login": "topolyai5"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0ODY0Mg==", "bodyText": "please use WebApplicationException (it will catch both client and server errors)", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424448642", "createdAt": "2020-05-13T13:44:08Z", "author": {"login": "sodre90"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2ODgwMQ=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjY4MTQwOnYy", "diffSide": "RIGHT", "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTozODozMFrOGUtfEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyODoxMlrOGUvIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA==", "bodyText": "The exception message is misleading", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424369938", "createdAt": "2020-05-13T11:38:30Z", "author": {"login": "daszabo"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MzM1MQ==", "bodyText": "is it better? \"Can not start provisioning, some error happened on Cloudbreak side: \" + errorMessage", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424373351", "createdAt": "2020-05-13T11:45:22Z", "author": {"login": "topolyai5"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4ODQzOA==", "bodyText": "Cannot*", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424388438", "createdAt": "2020-05-13T12:13:58Z", "author": {"login": "attilapalfi92"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5MjExMw==", "bodyText": "https://www.lexico.com/grammar/cannot-or-can-not\nsomeone prefer that format, what is the problem with that?", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424392113", "createdAt": "2020-05-13T12:20:14Z", "author": {"login": "topolyai5"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NjA5MA==", "bodyText": "\"the first is much more usual\". Users will see this and they would also think can not looks weird and unusual", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424396090", "createdAt": "2020-05-13T12:26:47Z", "author": {"login": "attilapalfi92"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5Njk2Mw==", "bodyText": "ok", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424396963", "createdAt": "2020-05-13T12:28:12Z", "author": {"login": "topolyai5"}, "path": "datalake/src/main/java/com/sequenceiq/datalake/service/sdx/ProvisionerService.java", "diffHunk": "@@ -175,7 +176,7 @@ public void startStackProvisioning(Long id, DetailedEnvironmentResponse environm\n                 sdxClusterRepository.save(sdxCluster);\n                 cloudbreakFlowService.saveLastCloudbreakFlowChainId(sdxCluster, stackV4Response.getFlowIdentifier());\n                 LOGGER.info(\"Sdx cluster updated\");\n-            } catch (ClientErrorException e) {\n+            } catch (ClientErrorException | InternalServerErrorException e) {\n                 String errorMessage = webApplicationExceptionMessageExtractor.getErrorMessage(e);\n                 LOGGER.info(\"Can not start provisioning: {}\", errorMessage, e);\n                 throw new RuntimeException(\"Can not start provisioning, client error happened on Cloudbreak side: \" + errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTkzOA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjY4NzE0OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMTo0MDoyN1rOGUti3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMDo1MVrOGUwzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA==", "bodyText": "Should we throw an exception, if the AZ list is empty? If not, at least log the fact please.", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424370910", "createdAt": "2020-05-13T11:40:27Z", "author": {"login": "daszabo"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -636,12 +636,15 @@ private CloudVmTypes getCloudVmTypes(CloudCredential cloudCredential, Region reg\n         Map<String, Set<VmType>> cloudVmResponses = new HashMap<>();\n         Map<String, VmType> defaultCloudVmResponses = new HashMap<>();\n \n-        for (AvailabilityZone availabilityZone : regions.getCloudRegions().get(region)) {\n-            Set<VmType> types = vmTypes.get(region).stream()\n-                    .filter(enabledInstanceTypeFilter)\n-                    .collect(Collectors.toSet());\n-            cloudVmResponses.put(availabilityZone.value(), types);\n-            defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+        List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(region);\n+        if (availabilityZones != null && !availabilityZones.isEmpty()) {\n+            for (AvailabilityZone availabilityZone : availabilityZones) {\n+                Set<VmType> types = vmTypes.get(region).stream()\n+                        .filter(enabledInstanceTypeFilter)\n+                        .collect(Collectors.toSet());\n+                cloudVmResponses.put(availabilityZone.value(), types);\n+                defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+            }\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MjU0MQ==", "bodyText": "Are the AZs required? Are you sure that we do not break the process with exception?", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424372541", "createdAt": "2020-05-13T11:43:44Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -636,12 +636,15 @@ private CloudVmTypes getCloudVmTypes(CloudCredential cloudCredential, Region reg\n         Map<String, Set<VmType>> cloudVmResponses = new HashMap<>();\n         Map<String, VmType> defaultCloudVmResponses = new HashMap<>();\n \n-        for (AvailabilityZone availabilityZone : regions.getCloudRegions().get(region)) {\n-            Set<VmType> types = vmTypes.get(region).stream()\n-                    .filter(enabledInstanceTypeFilter)\n-                    .collect(Collectors.toSet());\n-            cloudVmResponses.put(availabilityZone.value(), types);\n-            defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+        List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(region);\n+        if (availabilityZones != null && !availabilityZones.isEmpty()) {\n+            for (AvailabilityZone availabilityZone : availabilityZones) {\n+                Set<VmType> types = vmTypes.get(region).stream()\n+                        .filter(enabledInstanceTypeFilter)\n+                        .collect(Collectors.toSet());\n+                cloudVmResponses.put(availabilityZone.value(), types);\n+                defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+            }\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxMjQ3OA==", "bodyText": "Well, without an exception, the dropdown on the UI will be empty, which might also be a good enough clue for the user, that something is amiss.", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424412478", "createdAt": "2020-05-13T12:53:17Z", "author": {"login": "daszabo"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -636,12 +636,15 @@ private CloudVmTypes getCloudVmTypes(CloudCredential cloudCredential, Region reg\n         Map<String, Set<VmType>> cloudVmResponses = new HashMap<>();\n         Map<String, VmType> defaultCloudVmResponses = new HashMap<>();\n \n-        for (AvailabilityZone availabilityZone : regions.getCloudRegions().get(region)) {\n-            Set<VmType> types = vmTypes.get(region).stream()\n-                    .filter(enabledInstanceTypeFilter)\n-                    .collect(Collectors.toSet());\n-            cloudVmResponses.put(availabilityZone.value(), types);\n-            defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+        List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(region);\n+        if (availabilityZones != null && !availabilityZones.isEmpty()) {\n+            for (AvailabilityZone availabilityZone : availabilityZones) {\n+                Set<VmType> types = vmTypes.get(region).stream()\n+                        .filter(enabledInstanceTypeFilter)\n+                        .collect(Collectors.toSet());\n+                cloudVmResponses.put(availabilityZone.value(), types);\n+                defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+            }\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDE5OA==", "bodyText": "the log message is ok for me, I will update with it", "url": "https://github.com/hortonworks/cloudbreak/pull/8034#discussion_r424424198", "createdAt": "2020-05-13T13:10:51Z", "author": {"login": "topolyai5"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsPlatformResources.java", "diffHunk": "@@ -636,12 +636,15 @@ private CloudVmTypes getCloudVmTypes(CloudCredential cloudCredential, Region reg\n         Map<String, Set<VmType>> cloudVmResponses = new HashMap<>();\n         Map<String, VmType> defaultCloudVmResponses = new HashMap<>();\n \n-        for (AvailabilityZone availabilityZone : regions.getCloudRegions().get(region)) {\n-            Set<VmType> types = vmTypes.get(region).stream()\n-                    .filter(enabledInstanceTypeFilter)\n-                    .collect(Collectors.toSet());\n-            cloudVmResponses.put(availabilityZone.value(), types);\n-            defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+        List<AvailabilityZone> availabilityZones = regions.getCloudRegions().get(region);\n+        if (availabilityZones != null && !availabilityZones.isEmpty()) {\n+            for (AvailabilityZone availabilityZone : availabilityZones) {\n+                Set<VmType> types = vmTypes.get(region).stream()\n+                        .filter(enabledInstanceTypeFilter)\n+                        .collect(Collectors.toSet());\n+                cloudVmResponses.put(availabilityZone.value(), types);\n+                defaultCloudVmResponses.put(availabilityZone.value(), defaultVmTypes.get(region));\n+            }\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3MDkxMA=="}, "originalCommit": {"oid": "9ad3166cee886b4d9cdfbfe04640ce38cb7638d0"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2457, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}