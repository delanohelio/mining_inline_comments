{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MjYyMDI2", "number": 7128, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjo1MTozOVrODa3bwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjo1MTozOVrODa3bwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDk3Nzk0OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjo1MTozOVrOFiBoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjo1NDoyMVrOFjp38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA==", "bodyText": "Why not moving the methods if this inner class to the original class, and remove NameOrCrnReader? Why would we bother instantiating this to be able to read the NameOrCrn class?", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371222534", "createdAt": "2020-01-27T12:51:39Z", "author": {"login": "attilapalfi92"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyNDI0NQ==", "bodyText": "The sole purpose of this inner-class thing is an enforced null check. The original code did check for nulls. I did think a while whether to do just delete the null check (and so risk an NPE), or keep it. The (small) added value I see in enforcing null check is the opportunity to better log the error and so help diagnostics.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371224245", "createdAt": "2020-01-27T12:55:52Z", "author": {"login": "gergopapi2"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIzMDY3NA==", "bodyText": "I see. I still have doubts regarding whether it will provide us any real life diagnostic assistance. I think in most cases without this utility we would still be able to identify the source of the NPE right away.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371230674", "createdAt": "2020-01-27T13:11:16Z", "author": {"login": "attilapalfi92"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4NzkxOA==", "bodyText": "Yeah, I have doubts as well, we do not win much. Ok, so if @gregito agrees, I would then remove the null checks. Please confirm.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371287918", "createdAt": "2020-01-27T14:57:50Z", "author": {"login": "gergopapi2"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI5Mjc0Mg==", "bodyText": "IMHO NPE should never occur. if the only purpose of this NameOrCrnReader class is to ensure that nobody can create an invalid NameOrCrn instance then the null check should be there. on the other hand, null and emptiness checks should be performed at the same time (StringUtils.isEmpty also checks for null), hence one of the checks can be abandoned.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371292742", "createdAt": "2020-01-27T15:05:37Z", "author": {"login": "gregito"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMwMjI4Nw==", "bodyText": "@gregito You cannot create an empty NameOrCrn object, it either contains the name or the crn. If name is null when you use NameOrCrn.ofName(name), then you get an exception right away (and the same for crn). The only thing NameOrCrn cannot guard for is that instead of creating it you pass null (could happen accidentally).\nAnother guard the class does not contain but could: if NameOrCrn was created with name, then reading the crn should throw. I think that would make sense.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r371302287", "createdAt": "2020-01-27T15:21:15Z", "author": {"login": "gergopapi2"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzMDU0Ng==", "bodyText": "Change done.", "url": "https://github.com/hortonworks/cloudbreak/pull/7128#discussion_r372930546", "createdAt": "2020-01-30T12:54:21Z", "author": {"login": "gergopapi2"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/dto/NameOrCrn.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.dto;\n+\n+import static com.sequenceiq.cloudbreak.util.NullUtil.throwIfNull;\n+import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+public class NameOrCrn {\n+\n+    private static final String NULL_DTO_EXCEPTION_MESSAGE = \"Name or crn should not be null.\";\n+\n+    private static final String NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Name must be provided.\";\n+\n+    private static final String CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE = \"Crn must be provided.\";\n+\n+    @VisibleForTesting\n+    final String name;\n+\n+    @VisibleForTesting\n+    final String crn;\n+\n+    private NameOrCrn(String name, String crn) {\n+        this.name = name;\n+        this.crn = crn;\n+    }\n+\n+    public static NameOrCrn ofName(String name) {\n+        if (StringUtils.isEmpty(name)) {\n+            throw new IllegalArgumentException(NAME_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(name, null);\n+    }\n+\n+    public static NameOrCrn ofCrn(String crn) {\n+        if (StringUtils.isEmpty(crn)) {\n+            throw new IllegalArgumentException(CRN_MUST_BE_PROVIDED_EXCEPTION_MESSAGE);\n+        }\n+        return new NameOrCrn(null, crn);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder toString = new StringBuilder();\n+        toString.append(\"[NameOrCrn\");\n+        if (isNotEmpty(name)) {\n+            toString.append(\" of name: '\");\n+            toString.append(name);\n+        } else {\n+            toString.append(\" of crn: '\");\n+            toString.append(crn);\n+        }\n+        toString.append(\"']\");\n+        return toString.toString();\n+    }\n+\n+    public static class NameOrCrnReader {\n+\n+        private final NameOrCrn nameOrCrn;\n+\n+        private NameOrCrnReader(NameOrCrn nameOrCrn) {\n+            this.nameOrCrn = nameOrCrn;\n+        }\n+\n+        public static NameOrCrnReader create(NameOrCrn nameOrCrn) {\n+            throwIfNull(nameOrCrn, () -> new IllegalArgumentException(NULL_DTO_EXCEPTION_MESSAGE));\n+            return new NameOrCrnReader(nameOrCrn);\n+        }\n+\n+        public boolean hasName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIyMjUzNA=="}, "originalCommit": {"oid": "b08a16a0ed6e205b37cd7ba7aa08e46a615ea69b"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2943, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}