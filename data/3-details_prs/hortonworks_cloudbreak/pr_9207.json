{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzY2Nzk3", "number": 9207, "title": "CB-8867 - Env service should create private DNS zone privatelink.post\u2026", "bodyText": "\u2026gres.database.azure.com\nThis change includes the following:\n\ndeployment of private DNS zone for Postgres if \"serviceEndpointCreation\": \"ENABLED_PRIVATE_ENDPOINT\"\ndeployment of Network Links between VNet and DNS Zone\nintroducing Environment + Resource Group level Resource entity in Environment service\neliminating collision errors while launching multiple environments in parallel", "createdAt": "2020-10-12T19:25:44Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9207", "merged": true, "mergeCommit": {"oid": "d6b6ef5f0c2b2dcb7c6e5608eeb1a1e05162444a"}, "closed": true, "closedAt": "2020-10-14T13:55:26Z", "author": {"login": "pdarvasi"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR5jI1gBqjM4NjgwOTM1Mjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdScw4GABqjM4NzY0NDYxMzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dcd616f3fb6e8028202ae1f1f13b8d8244a782a", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/0dcd616f3fb6e8028202ae1f1f13b8d8244a782a", "committedDate": "2020-10-12T19:24:14Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "81c0e63145c030f2d230d7a691ec5a6af83b7328", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/81c0e63145c030f2d230d7a691ec5a6af83b7328", "committedDate": "2020-10-12T19:56:19Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81c0e63145c030f2d230d7a691ec5a6af83b7328", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/81c0e63145c030f2d230d7a691ec5a6af83b7328", "committedDate": "2020-10-12T19:56:19Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "aa4cd37827ee6d1dbe4037782eecb4634fa69629", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/aa4cd37827ee6d1dbe4037782eecb4634fa69629", "committedDate": "2020-10-12T20:02:41Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa4cd37827ee6d1dbe4037782eecb4634fa69629", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/aa4cd37827ee6d1dbe4037782eecb4634fa69629", "committedDate": "2020-10-12T20:02:41Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "829646ebfe217237e20f2bd09f8322f8009b5006", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/829646ebfe217237e20f2bd09f8322f8009b5006", "committedDate": "2020-10-12T20:47:00Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "829646ebfe217237e20f2bd09f8322f8009b5006", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/829646ebfe217237e20f2bd09f8322f8009b5006", "committedDate": "2020-10-12T20:47:00Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7460cceea835605e2cf2d5e1ba749ae119d1581d", "committedDate": "2020-10-12T21:27:21Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTM5MDk0", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#pullrequestreview-507139094", "createdAt": "2020-10-13T07:25:48Z", "commit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTo0OFrOHgY2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyNTo0OFrOHgY2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyMzU1NQ==", "bodyText": "I think we have such exception in our code as well", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503723555", "createdAt": "2020-10-13T07:25:48Z", "author": {"login": "doktoric"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "diffHunk": "@@ -39,6 +41,11 @@ default SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return subnetSelectionResult;\n     }\n \n+    @Override\n+    default void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest providerSpecificNetworkResourcesCreationRequest) {\n+        throw new NotImplementedException(\"No cloud provider specific resources exist on this cloud platform!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjQwMzY2", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#pullrequestreview-507240366", "createdAt": "2020-10-13T09:25:56Z", "commit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNTo1NlrOHgdp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyNTo1NlrOHgdp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMjM0Ng==", "bodyText": "privatednsManager - > PrivateDnsManager", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503802346", "createdAt": "2020-10-13T09:25:56Z", "author": {"login": "doktoric"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -90,13 +97,16 @@\n \n     private final Azure azure;\n \n+    private final privatednsManager privatednsManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjQzNzg4", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#pullrequestreview-507243788", "createdAt": "2020-10-13T09:29:50Z", "commit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyOTo1MFrOHgd0nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToyOTo1MFrOHgd0nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwNTA4NQ==", "bodyText": "what is the difference between main and test file ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503805085", "createdAt": "2020-10-13T09:29:50Z", "author": {"login": "doktoric"}, "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "diffHunk": "@@ -0,0 +1,72 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjMzNDA4", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#pullrequestreview-507233408", "createdAt": "2020-10-13T09:17:52Z", "commit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwOToxNzo1MlrOHgdUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMTo1MDoyN1rOHgiy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc5NjgyOA==", "bodyText": "if you would create a NOOP method here, then in NetworkCreationHandler#createProviderSpecificNetworkResourcesIfNeeded you don't have to make a cloud provider check", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503796828", "createdAt": "2020-10-13T09:17:52Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/DefaultNetworkConnector.java", "diffHunk": "@@ -39,6 +41,11 @@ default SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return subnetSelectionResult;\n     }\n \n+    @Override\n+    default void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest providerSpecificNetworkResourcesCreationRequest) {\n+        throw new NotImplementedException(\"No cloud provider specific resources exist on this cloud platform!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMDMxNA==", "bodyText": "nit: a bit shorter name would be nice, like NetworkResourcesCreationRequest or CloudNetworkResourcesCreationRequest", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503800314", "createdAt": "2020-10-13T09:23:07Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.sequenceiq.cloudbreak.cloud.model.network;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.Region;\n+\n+public class ProviderSpecificNetworkResourcesCreationRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwMDkzMA==", "bodyText": "this field name is not in sync with the original field", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503800930", "createdAt": "2020-10-13T09:24:03Z", "author": {"login": "lacikaaa"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/network/ProviderSpecificNetworkResourcesCreationRequest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.sequenceiq.cloudbreak.cloud.model.network;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.Region;\n+\n+public class ProviderSpecificNetworkResourcesCreationRequest {\n+\n+    private final String networkId;\n+\n+    private final String networkResourceGroup;\n+\n+    private final boolean existingNetwork;\n+\n+    private final CloudCredential cloudCredential;\n+\n+    private final CloudContext cloudContext;\n+\n+    private final Region region;\n+\n+    private final String resourceGroup;\n+\n+    private final boolean privateEndpointsEnabled;\n+\n+    private final Map<String, String> tags;\n+\n+    private ProviderSpecificNetworkResourcesCreationRequest(Builder builder) {\n+        networkId = builder.networkId;\n+        networkResourceGroup = builder.networkResourceGroup;\n+        existingNetwork = builder.existingNetwork;\n+        cloudCredential = builder.cloudCredential;\n+        cloudContext = builder.cloudContext;\n+        region = builder.region;\n+        resourceGroup = builder.resourceGroup;\n+        privateEndpointsEnabled = builder.serviceEndpointsEnabled;\n+        tags = builder.tags;\n+    }\n+\n+    public String getNetworkId() {\n+        return networkId;\n+    }\n+\n+    public String getNetworkResourceGroup() {\n+        return networkResourceGroup;\n+    }\n+\n+    public boolean isExistingNetwork() {\n+        return existingNetwork;\n+    }\n+\n+    public CloudCredential getCloudCredential() {\n+        return cloudCredential;\n+    }\n+\n+    public CloudContext getCloudContext() {\n+        return cloudContext;\n+    }\n+\n+    public Region getRegion() {\n+        return region;\n+    }\n+\n+    public String getResourceGroup() {\n+        return resourceGroup;\n+    }\n+\n+    public boolean isPrivateEndpointsEnabled() {\n+        return privateEndpointsEnabled;\n+    }\n+\n+    public Map<String, String> getTags() {\n+        return tags;\n+    }\n+\n+    public static class Builder {\n+\n+        private String networkId;\n+\n+        private String networkResourceGroup;\n+\n+        private boolean existingNetwork;\n+\n+        private CloudCredential cloudCredential;\n+\n+        private CloudContext cloudContext;\n+\n+        private Region region;\n+\n+        private String resourceGroup;\n+\n+        private boolean serviceEndpointsEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ==", "bodyText": "where do you set this to FAILED? I see the next step is a polling.", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503812919", "createdAt": "2020-10-13T09:41:42Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyMDIzNg==", "bodyText": "this part not covered with unit test", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503820236", "createdAt": "2020-10-13T09:52:58Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgxMjkxOQ=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNDc3MA==", "bodyText": "this method is hard to follow and pretty complex\nmy suggestion is to create 2 new classes:\n\nDnsZoneDeploymentService: responsible for creating the DNS Zone if it's missing, or just wait for it to finish, etc\nNetworkLinkDepleymentService: add/create network links to the zone. I think if we reach this we can be sure we have the DNS zone deployed\n\nAfter this refactor you could get rid of:\n\nif (dnsZonesDeployed && networkLinksDeployed) as subclasses would check if they have to do anything\ncreateDnsZonesAndNetworkLinks as it would be always 2 separate steps", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503824770", "createdAt": "2020-10-13T10:00:12Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgyNTk0NQ==", "bodyText": "networkId here is always null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503825945", "createdAt": "2020-10-13T10:02:05Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzMzM5NQ==", "bodyText": "this seems unnecessary, logging framework adds timestamp to every line", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503833395", "createdAt": "2020-10-13T10:14:45Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {\n+                throw new CloudConnectorException(String.format(\n+                        \"Not finished template deployment with name %s already exists in resource group %s\", deploymentName, resourceGroup));\n+            } else {\n+                LocalDateTime now = LocalDateTime.now();\n+                LOGGER.debug(\"Creating deployment {}\", DTF.format(now));\n+                azureClient.createTemplateDeployment(resourceGroup, deploymentName, template, parametersMapAsString);\n+            }\n+        } catch (CloudException e) {\n+            LOGGER.info(\"Provisioning error, cloud exception happened: \", e);\n+            if (e.body() != null && e.body().details() != null) {\n+                String details = e.body().details().stream().map(CloudError::message).collect(Collectors.joining(\", \"));\n+                throw new CloudConnectorException(String.format(\"Template provisioning failed, status code %s, error message: %s, details: %s\",\n+                        e.body().code(), e.body().message(), details));\n+            } else {\n+                throw new CloudConnectorException(String.format(\"Template provisioning failed: '%s', please go to Azure Portal for detailed message\", e));\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warn(\"Provisioning error:\", e);\n+            throw new CloudConnectorException(String.format(\"Error in provisioning network dns zone template %s: %s\",\n+                    deploymentName, e.getMessage()));\n+        }\n+    }\n+\n+    private String generateDnsZoneDeploymentName(List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices, String suffix) {\n+        String fullDeploymentName = enabledPrivateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getSubResource)\n+                .collect(Collectors.joining(\"-\", \"\", suffix))\n+                .toLowerCase();\n+        String deploymentName = StringUtils.left(fullDeploymentName, DEPLOYMENT_LENGTH_LIMIT);\n+        LOGGER.debug(\"Generated deployment name {}\", deploymentName);\n+        return deploymentName;\n+    }\n+\n+    private String getDnsZoneDeploymentId(String resourceGroup, AzureClient client, String deploymentName) {\n+        return azureResourceIdProviderService.generateDnsZoneDeploymentId(client.getCurrentSubscription()\n+                .subscriptionId(), resourceGroup, deploymentName);\n+    }\n+\n+    private boolean isRequested(String dnsZoneDeploymentId) {\n+        return findDnsZoneDeploymentByStatus(dnsZoneDeploymentId, CommonStatus.REQUESTED).isPresent();\n+    }\n+\n+    private boolean isCreated(String dnsZoneDeploymentId) {\n+        return findDnsZoneDeploymentByStatus(dnsZoneDeploymentId, CommonStatus.CREATED).isPresent();\n+    }\n+\n+    private void persistDnsZone(AuthenticatedContext ac, String deploymentName, String deploymentId) {\n+        LocalDateTime now = LocalDateTime.now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNDQxMw==", "bodyText": "now is unnecessary here. adding rg name and deployment name would be more helpful", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503834413", "createdAt": "2020-10-13T10:16:28Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {\n+                throw new CloudConnectorException(String.format(\n+                        \"Not finished template deployment with name %s already exists in resource group %s\", deploymentName, resourceGroup));\n+            } else {\n+                LocalDateTime now = LocalDateTime.now();\n+                LOGGER.debug(\"Creating deployment {}\", DTF.format(now));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNDU0OA==", "bodyText": "this can be dropped", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503834548", "createdAt": "2020-10-13T10:16:43Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzNzUwMA==", "bodyText": "these 2 lines can be moved into generateDnsZoneDeploymentName as the result only used there", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503837500", "createdAt": "2020-10-13T10:21:40Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzOTE1OQ==", "bodyText": "why this check is necessary? at line #187 deployment existence already checked and deleted if present", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503839159", "createdAt": "2020-10-13T10:24:42Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudError;\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss:SSS\");\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void checkOrCreateDnsZonesAndNetworkLinks(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = getDnsZoneDeploymentId(resourceGroup, azureClient, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+        } else if (!dnsZonesDeployed) {\n+            LOGGER.debug(\"Dns zones are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            if (isRequested(dnsZoneDeploymentId)) {\n+                LOGGER.debug(\"Dns zones ({}) already requested in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                        enabledPrivateEndpointServices);\n+                if (!networkLinksDeployed) {\n+                    LOGGER.debug(\"Deploying network links that are not deployed yet!\");\n+                    createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                }\n+            } else {\n+                try {\n+                    LOGGER.debug(\"Dns zones ({}) are not requested yet in resource group {}\", enabledPrivateEndpointServices, resourceGroup);\n+                    if (isCreated(dnsZoneDeploymentId)) {\n+                        LOGGER.debug(\"Dns zone deployment ({}) is there in database but not deployed on Azure, resetting it..\", dnsZoneDeploymentId);\n+                        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.REQUESTED);\n+                    } else {\n+                        persistDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId);\n+                    }\n+\n+                    createDnsZonesAndNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+                    updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, CommonStatus.CREATED);\n+\n+                } catch (CloudException | DataAccessException e) {\n+                    LOGGER.warn(\"Deployment failed due to {}, setting the resource status of {} to FAILED\", e.getMessage(), deploymentName);\n+                    pollForCreation(authenticatedContext, azureClient, resourceGroup, deploymentName, dnsZoneDeploymentId, null,\n+                            enabledPrivateEndpointServices);\n+                }\n+            }\n+        } else {\n+            LOGGER.debug(\"Network links are not deployed yet!\");\n+            String azureNetworkId = getAzureNetwork(azureClient, networkId, networkResourceGroup).id();\n+            createMissingNetworkLinks(azureClient, azureNetworkId, resourceGroup, tags, enabledPrivateEndpointServices);\n+        }\n+    }\n+\n+    private void pollForCreation(AuthenticatedContext authenticatedContext, AzureClient azureClient, String resourceGroup, String deploymentName,\n+            String dnsZoneDeploymentId, String networkId, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneCreationCheckerContext checkerContext = new AzureDnsZoneCreationCheckerContext(azureClient,\n+                resourceGroup,\n+                deploymentName,\n+                networkId,\n+                enabledPrivateEndpointServices);\n+        azureDnsZoneCreationPoller.startPolling(authenticatedContext, checkerContext);\n+        CommonStatus deploymentStatus = azureClient.getTemplateDeploymentCommonStatus(resourceGroup, deploymentName);\n+        updateDnsZone(authenticatedContext, deploymentName, dnsZoneDeploymentId, deploymentStatus);\n+    }\n+\n+    private void createDnsZonesAndNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                false,\n+                enabledPrivateEndpointServices,\n+                resourceGroup,\n+                tags);\n+        deployTemplate(azureClient, parameters);\n+    }\n+\n+    private Network getAzureNetwork(AzureClient azureClient, String networkId, String networkResourceGroup) {\n+        Network azureNetwork = azureClient.getNetworkByResourceGroup(networkResourceGroup, networkId);\n+        if (Objects.isNull(azureNetwork)) {\n+            throw new CloudConnectorException(String.format(\"Azure network id lookup failed with network id %s in resource group %s\", networkId,\n+                    networkResourceGroup));\n+        }\n+        return azureNetwork;\n+    }\n+\n+    private void createMissingNetworkLinks(AzureClient azureClient, String azureNetworkId, String resourceGroup,\n+            Map<String, String> tags, List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        for (AzurePrivateDnsZoneServiceEnum service: enabledPrivateEndpointServices) {\n+            PagedList<VirtualNetworkLinkInner> networkLinks = azureClient.listNetworkLinksByPrivateDnsZoneName(resourceGroup, service.getDnsZoneName());\n+            boolean networkLinkCreated = azureClient.isNetworkLinkCreated(StringUtils.substringAfterLast(azureNetworkId, \"/\"), networkLinks);\n+            if (!networkLinkCreated) {\n+                LOGGER.debug(\"Network links for service {} not yet created, creating them now\", service.getSubResource());\n+                AzureDnsZoneDeploymentParameters parameters = new AzureDnsZoneDeploymentParameters(azureNetworkId,\n+                        true,\n+                        enabledPrivateEndpointServices,\n+                        resourceGroup,\n+                        tags);\n+                deployTemplate(azureClient, parameters);\n+            }\n+        }\n+    }\n+\n+    private List<AzurePrivateDnsZoneServiceEnum> getEnabledPrivateEndpointServices() {\n+        return privateEndpointServices.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getBySubResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void deployTemplate(AzureClient azureClient, AzureDnsZoneDeploymentParameters parameters) {\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = parameters.getEnabledPrivateEndpointServices();\n+        String resourceGroup = parameters.getResourceGroupName();\n+\n+        LOGGER.debug(\"Deploying Private DNS Zones and applying network link for services {}\",\n+                enabledPrivateEndpointServices.stream().map(AzurePrivateDnsZoneServiceEnum::getSubResource).collect(Collectors.toList()));\n+        String networkId = StringUtils.substringAfterLast(parameters.getNetworkId(), \"/\");\n+        String suffix = parameters.getDeployOnlyNetworkLinks() ? \"-\" + networkId + NETWORK_LINKS : DNS_ZONES;\n+        String deploymentName = generateDnsZoneDeploymentName(enabledPrivateEndpointServices, suffix);\n+\n+        try {\n+            if (azureClient.templateDeploymentExists(resourceGroup, deploymentName)) {\n+                LOGGER.debug(\"Deleting already existing deployment {}\", deploymentName);\n+                azureClient.deleteTemplateDeployment(resourceGroup, deploymentName);\n+            }\n+            String template = azureNetworkDnsZoneTemplateBuilder.build(parameters);\n+            String parametersMapAsString = new Json(Map.of()).getValue();\n+            if (azureClient.getTemplateDeploymentStatus(resourceGroup, deploymentName).isTransient()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDIwNQ==", "bodyText": "nit: could be inlined", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844205", "createdAt": "2020-10-13T10:33:22Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkConnector.java", "diffHunk": "@@ -206,6 +210,26 @@ public SubnetSelectionResult chooseSubnets(Collection<CloudSubnet> subnetMetas,\n         return azureSubnetSelectorService.select(subnetMetas, subnetSelectionParameters);\n     }\n \n+    @Override\n+    public void createProviderSpecificNetworkResources(ProviderSpecificNetworkResourcesCreationRequest request) {\n+        boolean privateEndpointsEnabled = request.isPrivateEndpointsEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDY1OA==", "bodyText": "wrong class", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844658", "createdAt": "2020-10-13T10:34:15Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureNetworkDnsZoneTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDk2Nw==", "bodyText": "please loose the : to ensure the value is set", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503844967", "createdAt": "2020-10-13T10:34:51Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureNetworkDnsZoneTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureNetworkDnsZoneTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.network.dnszone.template.path:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MTE4Nw==", "bodyText": "you should use equals here instead of ==", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503851187", "createdAt": "2020-10-13T10:46:10Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MzM4Mg==", "bodyText": "you could use noneMatch or anyMatch instead of the last filter, so it would return a boolean and you could use that in the if condition", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503853382", "createdAt": "2020-10-13T10:50:13Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MTE4Nw=="}, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1MzkwOQ==", "bodyText": "isEmpty please, like:\n\t\t\tif (virtualNetworkLinks.isEmpty()) {\n                LOGGER.info(\"Network link for network {} not found for DNS zone {}!\", networkId, dnsZoneName);\n                return false;\n            } else if (!isNetworkLinkCreated(networkId, virtualNetworkLinks)) {\n                LOGGER.info(\"Network link for network {} and DNS Zone {} is not provisioned successfully yet!\", networkId, dnsZoneName);\n                return false;\n            }", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503853909", "createdAt": "2020-10-13T10:51:04Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)\n+                    .findAny();\n+            if (foundDnsZone.isEmpty()) {\n+                LOGGER.info(\"DNS Zone {} is not provisioned successfully yet!\", dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIfNetworkLinksDeployed(String resourceGroupName, String networkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking Network link between network and services {} and network link {}\", networkId,\n+                services.stream()\n+                        .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                        .collect(Collectors.toList()));\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            PagedList<VirtualNetworkLinkInner> virtualNetworkLinks = listNetworkLinksByPrivateDnsZoneName(resourceGroupName, dnsZoneName);\n+            if (virtualNetworkLinks.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg1ODE3NQ==", "bodyText": "as these are not real enums, please use equals", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503858175", "createdAt": "2020-10-13T10:58:31Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/client/AzureClient.java", "diffHunk": "@@ -722,6 +739,66 @@ public void deleteDatabaseServer(String databaseServerId) {\n         handleAuthException(() -> azure.genericResources().deleteById(databaseServerId));\n     }\n \n+    public PrivateZone getPrivateDnsZoneByResourceGroup(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.privateZones().getByResourceGroup(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public PagedList<PrivateZone> listPrivateDnsZonesByResourceGroup(String resourceGroupName) {\n+        return privatednsManager.privateZones().listByResourceGroup(resourceGroupName);\n+    }\n+\n+    public PagedList<VirtualNetworkLinkInner> listNetworkLinksByPrivateDnsZoneName(String resourceGroupName, String dnsZoneName) {\n+        return privatednsManager.virtualNetworkLinks().inner().list(resourceGroupName, dnsZoneName);\n+    }\n+\n+    public boolean checkIfDnsZonesDeployed(String resourceGroupName, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking DNS Zones for services {}\", services.stream()\n+                .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                .collect(Collectors.toList()));\n+\n+        PagedList<PrivateZone> dnsZones = listPrivateDnsZonesByResourceGroup(resourceGroupName);\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            Optional<PrivateZone> foundDnsZone = dnsZones.stream()\n+                    .filter(dnsZone -> dnsZone.name().equals(dnsZoneName))\n+                    .filter(dnsZone -> dnsZone.provisioningState() == SUCCEEDED)\n+                    .findAny();\n+            if (foundDnsZone.isEmpty()) {\n+                LOGGER.info(\"DNS Zone {} is not provisioned successfully yet!\", dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean checkIfNetworkLinksDeployed(String resourceGroupName, String networkId, List<AzurePrivateDnsZoneServiceEnum> services) {\n+        LOGGER.debug(\"Checking Network link between network and services {} and network link {}\", networkId,\n+                services.stream()\n+                        .map(AzurePrivateDnsZoneServiceEnum::getDnsZoneName)\n+                        .collect(Collectors.toList()));\n+        for (AzurePrivateDnsZoneServiceEnum service : services) {\n+            String dnsZoneName = service.getDnsZoneName();\n+            PagedList<VirtualNetworkLinkInner> virtualNetworkLinks = listNetworkLinksByPrivateDnsZoneName(resourceGroupName, dnsZoneName);\n+            if (virtualNetworkLinks.size() > 0) {\n+                if (!isNetworkLinkCreated(networkId, virtualNetworkLinks)) {\n+                    LOGGER.info(\"Network link for network {} and DNS Zone {} is not provisioned successfully yet!\", networkId, dnsZoneName);\n+                    return false;\n+                }\n+            } else {\n+                LOGGER.info(\"Network link for network {} not found for DNS zone {}!\", networkId, dnsZoneName);\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public boolean isNetworkLinkCreated(String networkId, PagedList<VirtualNetworkLinkInner> virtualNetworkLinks) {\n+        return virtualNetworkLinks.stream()\n+                .filter(networkLink -> networkId.equals(networkLink.name()))\n+                .anyMatch(networkLink -> networkLink.provisioningState() == SUCCEEDED\n+                        && networkLink.virtualNetworkLinkState() == VirtualNetworkLinkState.COMPLETED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MDMwMA==", "bodyText": "this could be private, or if we keep this public we might want to add asserts for the parameters also here", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503860300", "createdAt": "2020-10-13T11:02:24Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/resource/AzureResourceIdProviderService.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.resource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorage;\n+\n+@Component\n+public class AzureResourceIdProviderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureResourceIdProviderService.class);\n+\n+    public String generateImageId(String subscriptionId, String resourceGroup, String imageName) {\n+        Assert.hasText(subscriptionId, \"Subscription id must not be null or empty.\");\n+        Assert.hasText(resourceGroup, \"Resource group must not be null or empty.\");\n+        Assert.hasText(imageName, \"Image name must not be null or empty.\");\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(generateCommonPart(subscriptionId, resourceGroup));\n+        sb.append(\"/providers/Microsoft.Compute/\");\n+        sb.append(AzureStorage.IMAGES_CONTAINER);\n+        sb.append(\"/\");\n+        sb.append(imageName);\n+        String resourceReference = sb.toString();\n+        LOGGER.info(\"Generated resourceReferenceId: {}\", resourceReference);\n+        return resourceReference;\n+    }\n+\n+    public String generateDnsZoneDeploymentId(String subscriptionId, String resourceGroup, String deploymentName) {\n+        Assert.hasText(subscriptionId, \"Subscription id must not be null or empty.\");\n+        Assert.hasText(resourceGroup, \"Resource group must not be null or empty.\");\n+        Assert.hasText(deploymentName, \"Deployment name must not be null or empty.\");\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(generateCommonPart(subscriptionId, resourceGroup));\n+        sb.append(\"/providers/Microsoft.Resources/\");\n+        sb.append(\"deployments/\");\n+        sb.append(deploymentName);\n+        String resourceReference = sb.toString();\n+        LOGGER.info(\"Generated resourceReferenceId: {}\", resourceReference);\n+        return resourceReference;\n+    }\n+\n+    public String generateCommonPart(String subscriptionId, String resourceGroup) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MDgzMg==", "bodyText": "maybe an extra log could help us later here", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503860832", "createdAt": "2020-10-13T11:03:19Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/status/AzureStatusMapper.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.status;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+\n+public class AzureStatusMapper {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStatusMapper.class);\n+\n+    private AzureStatusMapper() {\n+    }\n+\n+    public static ResourceStatus mapResourceStatus(String status) {\n+        LOGGER.debug(\"Mapping resource status {}\", status);\n+        switch (status) {\n+            case \"Accepted\":\n+                return ResourceStatus.IN_PROGRESS;\n+            case \"Ready\":\n+                return ResourceStatus.UPDATED;\n+            case \"Canceled\":\n+                return ResourceStatus.FAILED;\n+            case \"Failed\":\n+                return ResourceStatus.FAILED;\n+            case \"Deleted\":\n+                return ResourceStatus.DELETED;\n+            case \"Succeeded\":\n+                return ResourceStatus.CREATED;\n+            default:\n+                return ResourceStatus.IN_PROGRESS;\n+\n+        }\n+    }\n+\n+    public static CommonStatus mapCommonStatus(String status) {\n+        LOGGER.debug(\"Mapping common status {}\", status);\n+        switch (status) {\n+            case \"Accepted\":\n+                return CommonStatus.REQUESTED;\n+            case \"Ready\":\n+            case \"Succeeded\":\n+                return CommonStatus.CREATED;\n+            case \"Canceled\":\n+            case \"Deleted\":\n+            case \"Failed\":\n+                return CommonStatus.FAILED;\n+            default:\n+                return CommonStatus.FAILED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MTg0OQ==", "bodyText": "according to call hierarchy this always be null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503861849", "createdAt": "2020-10-13T11:05:10Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerContext.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import java.util.List;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzurePrivateDnsZoneServiceEnum;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+\n+public class AzureDnsZoneCreationCheckerContext {\n+\n+    private final AzureClient azureClient;\n+\n+    private final String resourceGroupName;\n+\n+    private final String deploymentName;\n+\n+    private final String networkId;\n+\n+    private final List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices;\n+\n+    public AzureDnsZoneCreationCheckerContext(AzureClient azureClient, String resourceGroupName, String deploymentName, String networkId,\n+            List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices) {\n+        this.azureClient = azureClient;\n+        this.resourceGroupName = resourceGroupName;\n+        this.deploymentName = deploymentName;\n+        this.networkId = networkId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2MzM3OQ==", "bodyText": "this will never be called as networkId is null", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503863379", "createdAt": "2020-10-13T11:08:12Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationCheckerTask.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.AzurePrivateDnsZoneServiceEnum;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.model.ResourceStatus;\n+import com.sequenceiq.cloudbreak.cloud.task.PollBooleanStateTask;\n+\n+@Component(AzureDnsZoneCreationCheckerTask.NAME)\n+@Scope(\"prototype\")\n+public class AzureDnsZoneCreationCheckerTask extends PollBooleanStateTask {\n+\n+    public static final String NAME = \"AzureDnsZoneCreationChecker\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneCreationCheckerTask.class);\n+\n+    private final AzureDnsZoneCreationCheckerContext context;\n+\n+    public AzureDnsZoneCreationCheckerTask(AuthenticatedContext authenticatedContext, AzureDnsZoneCreationCheckerContext context) {\n+        super(authenticatedContext, false);\n+        this.context = context;\n+    }\n+\n+    @Override\n+    protected Boolean doCall() {\n+        String deploymentName = context.getDeploymentName();\n+        String resourceGroupName = context.getResourceGroupName();\n+        AzureClient azureClient = context.getAzureClient();\n+        String networkId = context.getNetworkId();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = context.getEnabledPrivateEndpointServices();\n+        LOGGER.info(\"Waiting for DNS zone to be created: {}\", deploymentName);\n+\n+        ResourceStatus templateDeploymentStatus = azureClient.getTemplateDeploymentStatus(resourceGroupName, deploymentName);\n+\n+        if (templateDeploymentStatus.isPermanent() &&\n+                templateDeploymentStatus != ResourceStatus.DELETED &&\n+                azureClient.checkIfDnsZonesDeployed(resourceGroupName, enabledPrivateEndpointServices)) {\n+            LOGGER.info(\"DNS zone and network link creation has been finished with status {}\", templateDeploymentStatus);\n+            if (StringUtils.isNotEmpty(networkId)) {\n+                return azureClient.checkIfNetworkLinksDeployed(resourceGroupName, networkId, enabledPrivateEndpointServices);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NDQ4OQ==", "bodyText": "these should be @Values so we could easily override them", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503864489", "createdAt": "2020-10-13T11:10:17Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/task/dnszone/AzureDnsZoneCreationPoller.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.task.dnszone;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.task.AzurePollTaskFactory;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.scheduler.SyncPollingScheduler;\n+import com.sequenceiq.cloudbreak.cloud.task.PollTask;\n+\n+@Component\n+public class AzureDnsZoneCreationPoller {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneCreationPoller.class);\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_INTERVAL = 1000;\n+\n+    private static final int DNS_ZONE_CREATION_CHECKING_MAX_ATTEMPT = 100;\n+\n+    private static final int MAX_FAILURE_TOLERANT = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NTkzOA==", "bodyText": "this seems pretty old, can't we move to a newer one?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503865938", "createdAt": "2020-10-13T11:13:08Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/resources/templates/arm-network-dnszone.ftl", "diffHunk": "@@ -0,0 +1,61 @@\n+<#setting number_format=\"computer\">\n+{\n+    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2NjQxOQ==", "bodyText": "same here for the schema version", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503866419", "createdAt": "2020-10-13T11:14:09Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/test/resources/json/arm-network-dnszone.json", "diffHunk": "@@ -0,0 +1,72 @@\n+{\n+  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg2Nzk5OQ==", "bodyText": "as mentioned above this could be removed if we change the DefaultNetworkConnector", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503867999", "createdAt": "2020-10-13T11:17:20Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/environment/flow/creation/handler/NetworkCreationHandler.java", "diffHunk": "@@ -118,6 +120,12 @@ private void createCloudNetworkIfNeeded(EnvironmentDto environmentDto, Environme\n         }\n     }\n \n+    private void createProviderSpecificNetworkResourcesIfNeeded(EnvironmentDto environmentDto, BaseNetwork network) {\n+        if (AZURE.equalsIgnoreCase(environmentDto.getCloudPlatform())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDAwMg==", "bodyText": "nit: isExistingNetwork", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503870002", "createdAt": "2020-10-13T11:21:00Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -72,6 +80,25 @@ public NetworkCreationRequest create(EnvironmentDto environment) {\n         return builder.build();\n     }\n \n+    public ProviderSpecificNetworkResourcesCreationRequest createProviderSpecificNetworkResources(EnvironmentDto environment, BaseNetwork baseNetwork) {\n+        NetworkDto networkDto = environment.getNetwork();\n+        ProviderSpecificNetworkResourcesCreationRequest.Builder builder = new ProviderSpecificNetworkResourcesCreationRequest.Builder()\n+                .withNetworkId(NullUtil.getIfNotNull(baseNetwork, BaseNetwork::getNetworkId))\n+                .withNetworkResourceGroup(NullUtil.getIfNotNull(baseNetwork, this::getNetworkResourceGroupName))\n+                .withExistingNetwork(NullUtil.getIfNotNull(baseNetwork, this::getExistingNetwork))\n+                .withCloudCredential(getCredential(environment))\n+                .withCloudContext(getCloudContext(environment))\n+                .withRegion(Region.region(environment.getLocation().getName()))\n+                .withPrivateEndpointsEnabled(ServiceEndpointCreation.ENABLED_PRIVATE_ENDPOINT == networkDto.getServiceEndpointCreation())\n+                .withTags(networkTagProvider.getTags(environment));\n+                getResourceGroupName(environment).ifPresent(builder::withResourceGroup);\n+        return builder.build();\n+    }\n+\n+    private boolean getExistingNetwork(BaseNetwork baseNetwork) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MDkxNQ==", "bodyText": "I don't like instanceof. You could solve this by adding the method to BaseNetwork which returns null and override it from AzureNetwork", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503870915", "createdAt": "2020-10-13T11:22:36Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/network/service/NetworkCreationRequestFactory.java", "diffHunk": "@@ -80,6 +107,10 @@ public String getStackName(EnvironmentDto environment) {\n         return String.join(\"-\", environment.getName(), String.valueOf(environment.getNetwork().getId()));\n     }\n \n+    private String getNetworkResourceGroupName(BaseNetwork baseNetwork) {\n+        return baseNetwork instanceof AzureNetwork ? ((AzureNetwork) baseNetwork).getResourceGroupName() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3MjA3Mg==", "bodyText": "so this won't result in any unexpected result? why have you changed this and why to this one?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503872072", "createdAt": "2020-10-13T11:24:54Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/parameters/dao/converter/ResourceTypeConverter.java", "diffHunk": "@@ -1,12 +1,12 @@\n package com.sequenceiq.environment.parameters.dao.converter;\n \n import com.sequenceiq.cloudbreak.converter.DefaultEnumConverter;\n-import com.sequenceiq.environment.resourcepersister.ResourceType;\n+import com.sequenceiq.common.api.type.ResourceType;\n \n public class ResourceTypeConverter extends DefaultEnumConverter<ResourceType> {\n \n     @Override\n     public ResourceType getDefault() {\n-        return ResourceType.AWS_INSTANCE;\n+        return ResourceType.AZURE_PRIVATE_DNS_ZONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg3NDE4NQ==", "bodyText": "could you use the exact converter instead of ConversionService here?", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503874185", "createdAt": "2020-10-13T11:28:36Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/CloudResourceRetrieverService.java", "diffHunk": "@@ -12,8 +18,21 @@\n @Component\n public class CloudResourceRetrieverService implements ResourceRetriever {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudResourceRetrieverService.class);\n+\n+    @Inject\n+    @Qualifier(\"conversionService\")\n+    private ConversionService conversionService;\n+\n+    @Inject\n+    private ResourceService resourceService;\n+\n     @Override\n     public Optional<CloudResource> findByResourceReferenceAndStatusAndType(String resourceReference, CommonStatus status, ResourceType resourceType) {\n-        return Optional.empty();\n+        Optional<Resource> optionalResource = resourceService.findByResourceReferenceAndStatusAndType(resourceReference, status, resourceType);\n+        LOGGER.debug(\"Resource retrieved by optionalResource reference: {}, status: {} and type: {}. Is present: {}\", resourceReference, status, resourceType,\n+                optionalResource.isPresent());\n+        return optionalResource\n+                .map(resource -> conversionService.convert(resource, CloudResource.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4MzIzNQ==", "bodyText": "if you would name the column in your sql environment_id I think you could drop this line", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503883235", "createdAt": "2020-10-13T11:44:26Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/Resource.java", "diffHunk": "@@ -1,30 +1,33 @@\n package com.sequenceiq.environment.resourcepersister;\n \n-import java.io.Serializable;\n-\n import javax.persistence.Column;\n import javax.persistence.Convert;\n import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n import javax.persistence.SequenceGenerator;\n \n-import com.sequenceiq.cloudbreak.common.json.Json;\n-import com.sequenceiq.cloudbreak.common.json.JsonToString;\n import com.sequenceiq.cloudbreak.converter.CommonStatusConverter;\n import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+import com.sequenceiq.environment.environment.domain.Environment;\n import com.sequenceiq.environment.parameters.dao.converter.ResourceTypeConverter;\n \n @Entity\n-public class Resource implements Serializable {\n+public class Resource {\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO, generator = \"resource_generator\")\n     @SequenceGenerator(name = \"resource_generator\", sequenceName = \"resource_id_seq\", allocationSize = 1)\n     private Long id;\n \n-    private String instanceGroup;\n+    @ManyToOne(fetch = FetchType.LAZY)\n+    @JoinColumn(name = \"resource_environment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NDc3Ng==", "bodyText": "Long would be more consistent", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503884776", "createdAt": "2020-10-13T11:47:15Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/java/com/sequenceiq/environment/resourcepersister/ResourceRepository.java", "diffHunk": "@@ -10,14 +10,24 @@\n import org.springframework.data.repository.CrudRepository;\n import org.springframework.data.repository.query.Param;\n \n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n @Transactional(TxType.REQUIRED)\n public interface ResourceRepository extends CrudRepository<Resource, Long> {\n \n-    @Query(\"SELECT r FROM Resource r WHERE r.crn = :crn AND r.resourceName = :name AND r.resourceType = :type\")\n-    Optional<Resource> findByStackIdAndNameAndType(@Param(\"crn\") String crnId, @Param(\"name\") String name,\n-            @Param(\"type\") com.sequenceiq.environment.resourcepersister.ResourceType type);\n+    @Query(\"SELECT r FROM Resource r WHERE r.environment.id = :environmentId AND r.resourceName = :name AND r.resourceType = :type\")\n+    Optional<Resource> findByEnvironmentIdAndNameAndType(@Param(\"environmentId\") Long environmentId, @Param(\"name\") String name,\n+            @Param(\"type\") com.sequenceiq.common.api.type.ResourceType type);\n+\n+    @Query(\"SELECT r FROM Resource r WHERE r.environment.id = :environmentId\")\n+    List<Resource> findAllByEnvironmentId(@Param(\"environmentId\") long environmentId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4NjU1Nw==", "bodyText": "as mentioned above I would name this environment_id and also I would add index to this field", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r503886557", "createdAt": "2020-10-13T11:50:27Z", "author": {"login": "lacikaaa"}, "path": "environment/src/main/resources/schema/app/20200930134106_CB-8867-Env_service_should_create_private_DNS_zone_privatelink.postgres.database.azure.com.sql", "diffHunk": "@@ -0,0 +1,23 @@\n+-- // CB-8867-Env service should create private DNS zone privatelink.postgres.database.azure.com\n+-- Migration SQL that makes the change goes here.\n+CREATE SEQUENCE IF NOT EXISTS resource_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1;\n+\n+CREATE TABLE IF NOT EXISTS resource\n+(\n+   id                   bigserial NOT NULL ,\n+   resource_environment     bigserial NOT NULL CONSTRAINT fk_resource_resource_environment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7460cceea835605e2cf2d5e1ba749ae119d1581d", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7460cceea835605e2cf2d5e1ba749ae119d1581d", "committedDate": "2020-10-12T21:27:21Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "e32bcab86a2159efdc1b143098a2110a4258af73", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e32bcab86a2159efdc1b143098a2110a4258af73", "committedDate": "2020-10-13T23:24:43Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e32bcab86a2159efdc1b143098a2110a4258af73", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e32bcab86a2159efdc1b143098a2110a4258af73", "committedDate": "2020-10-13T23:24:43Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "4b6019fb75aa02383330ad7a02bb73114c76805f", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4b6019fb75aa02383330ad7a02bb73114c76805f", "committedDate": "2020-10-14T07:41:43Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b6019fb75aa02383330ad7a02bb73114c76805f", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4b6019fb75aa02383330ad7a02bb73114c76805f", "committedDate": "2020-10-14T07:41:43Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "ee5a44f3986996601c7091e72bb45ee9ec574f10", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee5a44f3986996601c7091e72bb45ee9ec574f10", "committedDate": "2020-10-14T08:11:49Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee5a44f3986996601c7091e72bb45ee9ec574f10", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ee5a44f3986996601c7091e72bb45ee9ec574f10", "committedDate": "2020-10-14T08:11:49Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "5fd998f8bf0ed75c1747f377adc9b8f3365684c7", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5fd998f8bf0ed75c1747f377adc9b8f3365684c7", "committedDate": "2020-10-14T08:12:25Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fd998f8bf0ed75c1747f377adc9b8f3365684c7", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5fd998f8bf0ed75c1747f377adc9b8f3365684c7", "committedDate": "2020-10-14T08:12:25Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e", "committedDate": "2020-10-14T08:42:07Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTgyNTEy", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#pullrequestreview-508182512", "createdAt": "2020-10-14T09:54:14Z", "commit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NDoxNVrOHhLVJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo1NDoxNVrOHhLVJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1MDY5Mg==", "bodyText": "I don't think it's needed anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/9207#discussion_r504550692", "createdAt": "2020-10-14T09:54:15Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureDnsZoneService.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_PRIVATE_DNS_ZONE;\n+import static com.sequenceiq.common.api.type.ResourceType.AZURE_VIRTUAL_NETWORK_LINK;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.CloudException;\n+import com.microsoft.azure.PagedList;\n+import com.microsoft.azure.management.network.Network;\n+import com.microsoft.azure.management.privatedns.v2018_09_01.implementation.VirtualNetworkLinkInner;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.AzureDnsZoneDeploymentParameters;\n+import com.sequenceiq.cloudbreak.cloud.azure.resource.AzureResourceIdProviderService;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationCheckerContext;\n+import com.sequenceiq.cloudbreak.cloud.azure.task.dnszone.AzureDnsZoneCreationPoller;\n+import com.sequenceiq.cloudbreak.cloud.azure.view.AzureNetworkView;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudResource;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceNotifier;\n+import com.sequenceiq.cloudbreak.cloud.notification.PersistenceRetriever;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+import com.sequenceiq.common.api.type.CommonStatus;\n+import com.sequenceiq.common.api.type.ResourceType;\n+\n+@Service\n+public class AzureDnsZoneService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureDnsZoneService.class);\n+\n+    private static final int DEPLOYMENT_LENGTH_LIMIT = 64;\n+\n+    private static final String DNS_ZONES = \"-dns-zones\";\n+\n+    private static final String NETWORK_LINKS = \"-links\";\n+\n+    @Inject\n+    private AzureNetworkDnsZoneTemplateBuilder azureNetworkDnsZoneTemplateBuilder;\n+\n+    @Inject\n+    private PersistenceRetriever resourcePersistenceRetriever;\n+\n+    @Inject\n+    private PersistenceNotifier persistenceNotifier;\n+\n+    @Inject\n+    private AzureDnsZoneCreationPoller azureDnsZoneCreationPoller;\n+\n+    @Inject\n+    private AzureResourceIdProviderService azureResourceIdProviderService;\n+\n+    @Inject\n+    private AzureUtils azureUtils;\n+\n+    @Value(\"${cb.arm.privateendpoint.services:}\")\n+    private List<String> privateEndpointServices;\n+\n+    public void getOrCreateDnsZones(AuthenticatedContext authenticatedContext, AzureClient azureClient, AzureNetworkView networkView,\n+            String resourceGroup, Map<String, String> tags) {\n+\n+        String networkId = networkView.getNetworkId();\n+        String networkResourceGroup = networkView.getResourceGroupName();\n+        List<AzurePrivateDnsZoneServiceEnum> enabledPrivateEndpointServices = getEnabledPrivateEndpointServices();\n+\n+        boolean dnsZonesDeployed = azureClient.checkIfDnsZonesDeployed(resourceGroup, enabledPrivateEndpointServices);\n+        boolean networkLinksDeployed = azureClient.checkIfNetworkLinksDeployed(resourceGroup, networkId, enabledPrivateEndpointServices);\n+        String deploymentName = generateDeploymentName(enabledPrivateEndpointServices, DNS_ZONES);\n+        String dnsZoneDeploymentId = azureResourceIdProviderService.generateDeploymentId(azureClient.getCurrentSubscription().subscriptionId(),\n+                resourceGroup, deploymentName);\n+\n+        if (dnsZonesDeployed && networkLinksDeployed) {\n+            LOGGER.debug(\"Dns zones ({}) and network links already deployed in resource group {}\", enabledPrivateEndpointServices, resourceGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8fdf248ebbfea223a1a5fe84c69ee82f294b837", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c8fdf248ebbfea223a1a5fe84c69ee82f294b837", "committedDate": "2020-10-14T12:22:53Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/5c3ab0b4ef383c19cca3e6da6a28cf60d16a403e", "committedDate": "2020-10-14T08:42:07Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}, "afterCommit": {"oid": "c8fdf248ebbfea223a1a5fe84c69ee82f294b837", "author": {"user": {"login": "pdarvasi", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c8fdf248ebbfea223a1a5fe84c69ee82f294b837", "committedDate": "2020-10-14T12:22:53Z", "message": "CB-8867 - Env service should create private DNS zone privatelink.postgres.database.azure.com"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2159, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}