{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzM0NTE1", "number": 7856, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo0MjoyN1rOD1MaqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1ODo0NFrOD1M2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTA0NTUyOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo0MjoyN1rOGKgakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo0MjoyN1rOGKgakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY3MDAzNA==", "bodyText": "refactor into a method like getTemplateBody", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413670034", "createdAt": "2020-04-23T09:42:27Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -43,17 +49,33 @@\n     @Inject\n     private AutoScalingGroupHandler autoScalingGroupHandler;\n \n+    @Inject\n+    private AwsStackRequestHelper awsStackRequestHelper;\n+\n     public void updateImage(AuthenticatedContext authenticatedContext, CloudStack stack, CloudResource cfResource) {\n         AwsCredentialView credentialView = new AwsCredentialView(authenticatedContext.getCloudCredential());\n         String regionName = authenticatedContext.getCloudContext().getLocation().getRegion().getRegionName();\n         AmazonCloudFormationClient cloudFormationClient = awsClient.createCloudFormationClient(credentialView, regionName);\n         AmazonAutoScalingClient autoScalingClient = awsClient.createAutoScalingClient(credentialView, regionName);\n \n-        Map<AutoScalingGroup, String> scalingGroups = autoScalingGroupHandler.getAutoScalingGroups(cloudFormationClient, autoScalingClient, cfResource);\n-        List<LaunchConfiguration> oldLaunchConfigurations = launchConfigurationHandler.getLaunchConfigurations(autoScalingClient, scalingGroups.keySet());\n+        String cfStackName = cfResource.getName();\n+        GetTemplateResult template = cloudFormationClient.getTemplate(new GetTemplateRequest().withStackName(cfStackName));\n+        String templateBody = template.getTemplateBody();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTEwNTYwOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1NjowNlrOGKg-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1NjowNlrOGKg-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY3OTI3MQ==", "bodyText": "could you refactor it into a method like updateImageInGroup?", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413679271", "createdAt": "2020-04-23T09:56:06Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -87,4 +109,26 @@ private void changeImageInAutoscalingGroup(AuthenticatedContext authenticatedCon\n         return encryptedImageCopyService.createEncryptedImages(authenticatedContext, stack, resourceNotifier).entrySet()\n                     .stream().collect(Collectors.toMap(entry -> AwsGroupView.getAutoScalingGroupName(entry.getKey()), Entry::getValue));\n     }\n+\n+    private void updateImagesInCloudFormationTemplate(AuthenticatedContext authenticatedContext, AmazonCloudFormationClient cloudFormationClient,\n+            CloudResource cfResource, Map<String, String> encryptedImages, CloudStack stack, String templateBody) {\n+        String imageName = stack.getImage().getImageName();\n+        String cfStackName = cfResource.getName();\n+        Json templateJson = new Json(templateBody);\n+\n+        stack.getGroups().forEach(group -> {\n+            String imageIdPath = String.format(\"Resources.%s.Properties.LaunchTemplateData.ImageId\", AwsGroupView.getLaunchTemplateName(group.getName()));\n+            Object oldImageId = templateJson.getValue(imageIdPath);\n+            if (!\"{\\\"Ref\\\":\\\"AMI\\\"}\".equals(oldImageId.toString())) {\n+                String autoScalingGroupName = AwsGroupView.getAutoScalingGroupName(group.getName());\n+                String encryptedImageName = encryptedImages.get(autoScalingGroupName);\n+                String selectedImageName = StringUtils.isBlank(encryptedImageName) ? imageName : encryptedImageName;\n+                templateJson.replaceValue(imageIdPath, selectedImageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTExMDYxOnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1NzowNVrOGKhBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDo1MzoxNlrOGKjMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4MDAyNw==", "bodyText": "I don't really get what we check here. Could you refactor the condition into a method and name it so it would be obvious what we check here?", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413680027", "createdAt": "2020-04-23T09:57:05Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -87,4 +109,26 @@ private void changeImageInAutoscalingGroup(AuthenticatedContext authenticatedCon\n         return encryptedImageCopyService.createEncryptedImages(authenticatedContext, stack, resourceNotifier).entrySet()\n                     .stream().collect(Collectors.toMap(entry -> AwsGroupView.getAutoScalingGroupName(entry.getKey()), Entry::getValue));\n     }\n+\n+    private void updateImagesInCloudFormationTemplate(AuthenticatedContext authenticatedContext, AmazonCloudFormationClient cloudFormationClient,\n+            CloudResource cfResource, Map<String, String> encryptedImages, CloudStack stack, String templateBody) {\n+        String imageName = stack.getImage().getImageName();\n+        String cfStackName = cfResource.getName();\n+        Json templateJson = new Json(templateBody);\n+\n+        stack.getGroups().forEach(group -> {\n+            String imageIdPath = String.format(\"Resources.%s.Properties.LaunchTemplateData.ImageId\", AwsGroupView.getLaunchTemplateName(group.getName()));\n+            Object oldImageId = templateJson.getValue(imageIdPath);\n+            if (!\"{\\\"Ref\\\":\\\"AMI\\\"}\".equals(oldImageId.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5MjI0NA==", "bodyText": "and I think we don't have test for that case when we have to skip the if body", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413692244", "createdAt": "2020-04-23T10:15:32Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -87,4 +109,26 @@ private void changeImageInAutoscalingGroup(AuthenticatedContext authenticatedCon\n         return encryptedImageCopyService.createEncryptedImages(authenticatedContext, stack, resourceNotifier).entrySet()\n                     .stream().collect(Collectors.toMap(entry -> AwsGroupView.getAutoScalingGroupName(entry.getKey()), Entry::getValue));\n     }\n+\n+    private void updateImagesInCloudFormationTemplate(AuthenticatedContext authenticatedContext, AmazonCloudFormationClient cloudFormationClient,\n+            CloudResource cfResource, Map<String, String> encryptedImages, CloudStack stack, String templateBody) {\n+        String imageName = stack.getImage().getImageName();\n+        String cfStackName = cfResource.getName();\n+        Json templateJson = new Json(templateBody);\n+\n+        stack.getGroups().forEach(group -> {\n+            String imageIdPath = String.format(\"Resources.%s.Properties.LaunchTemplateData.ImageId\", AwsGroupView.getLaunchTemplateName(group.getName()));\n+            Object oldImageId = templateJson.getValue(imageIdPath);\n+            if (!\"{\\\"Ref\\\":\\\"AMI\\\"}\".equals(oldImageId.toString())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4MDAyNw=="}, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxNTQ3NQ==", "bodyText": "Encrypted images are inlined for each group, but if they are not encrypted it is just a template parameter. So I check if the imageId is a parameter.", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413715475", "createdAt": "2020-04-23T10:53:16Z", "author": {"login": "Bajzathd"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -87,4 +109,26 @@ private void changeImageInAutoscalingGroup(AuthenticatedContext authenticatedCon\n         return encryptedImageCopyService.createEncryptedImages(authenticatedContext, stack, resourceNotifier).entrySet()\n                     .stream().collect(Collectors.toMap(entry -> AwsGroupView.getAutoScalingGroupName(entry.getKey()), Entry::getValue));\n     }\n+\n+    private void updateImagesInCloudFormationTemplate(AuthenticatedContext authenticatedContext, AmazonCloudFormationClient cloudFormationClient,\n+            CloudResource cfResource, Map<String, String> encryptedImages, CloudStack stack, String templateBody) {\n+        String imageName = stack.getImage().getImageName();\n+        String cfStackName = cfResource.getName();\n+        Json templateJson = new Json(templateBody);\n+\n+        stack.getGroups().forEach(group -> {\n+            String imageIdPath = String.format(\"Resources.%s.Properties.LaunchTemplateData.ImageId\", AwsGroupView.getLaunchTemplateName(group.getName()));\n+            Object oldImageId = templateJson.getValue(imageIdPath);\n+            if (!\"{\\\"Ref\\\":\\\"AMI\\\"}\".equals(oldImageId.toString())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4MDAyNw=="}, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTExNzM3OnYy", "diffSide": "RIGHT", "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1ODo0NVrOGKhF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTo1ODo0NVrOGKhF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4MTExMQ==", "bodyText": "could you make 2 separate classes which contains only the methods related to the 2 different update type?", "url": "https://github.com/hortonworks/cloudbreak/pull/7856#discussion_r413681111", "createdAt": "2020-04-23T09:58:45Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/AwsImageUpdateService.java", "diffHunk": "@@ -43,17 +49,33 @@\n     @Inject\n     private AutoScalingGroupHandler autoScalingGroupHandler;\n \n+    @Inject\n+    private AwsStackRequestHelper awsStackRequestHelper;\n+\n     public void updateImage(AuthenticatedContext authenticatedContext, CloudStack stack, CloudResource cfResource) {\n         AwsCredentialView credentialView = new AwsCredentialView(authenticatedContext.getCloudCredential());\n         String regionName = authenticatedContext.getCloudContext().getLocation().getRegion().getRegionName();\n         AmazonCloudFormationClient cloudFormationClient = awsClient.createCloudFormationClient(credentialView, regionName);\n         AmazonAutoScalingClient autoScalingClient = awsClient.createAutoScalingClient(credentialView, regionName);\n \n-        Map<AutoScalingGroup, String> scalingGroups = autoScalingGroupHandler.getAutoScalingGroups(cloudFormationClient, autoScalingClient, cfResource);\n-        List<LaunchConfiguration> oldLaunchConfigurations = launchConfigurationHandler.getLaunchConfigurations(autoScalingClient, scalingGroups.keySet());\n+        String cfStackName = cfResource.getName();\n+        GetTemplateResult template = cloudFormationClient.getTemplate(new GetTemplateRequest().withStackName(cfStackName));\n+        String templateBody = template.getTemplateBody();\n \n         Map<String, String> encryptedImages = getEncryptedImagesMappedByAutoscalingGroupName(authenticatedContext, stack);\n+        if (templateBody.contains(\"AWS::AutoScaling::LaunchConfiguration\")) {\n+            updateImagesInLaunchConfigurations(authenticatedContext, stack, autoScalingClient, encryptedImages, cloudFormationClient, cfResource);\n+        } else if (templateBody.contains(\"AWS::EC2::LaunchTemplate\")) {\n+            updateImagesInCloudFormationTemplate(authenticatedContext, cloudFormationClient, cfResource, encryptedImages, stack, templateBody);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcda9ed06f2a2cc13f185fe165c2f1d2c44d4d95"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2472, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}