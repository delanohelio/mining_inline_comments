{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzI2MDk4", "number": 8763, "title": "CB-8308 [azure] image storage account public access should be false", "bodyText": "The storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access.\nNote: changed to master", "createdAt": "2020-08-10T07:19:55Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8763", "merged": true, "mergeCommit": {"oid": "2a0a28afc8829412beb8e15df11bfd9e515395b0"}, "closed": true, "closedAt": "2020-08-12T08:19:03Z", "author": {"login": "gergopapi2"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9dSi9ABqjM2Mzc1ODM2MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-G_y_AFqTQ2NTY5MDkyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf93b0e45e4d63455d20f0255739fa5a73107442", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/cf93b0e45e4d63455d20f0255739fa5a73107442", "committedDate": "2020-08-10T07:18:54Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}, "afterCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/afc24a4e8f5a4ec2486dd0090862f8859545a911", "committedDate": "2020-08-10T07:42:33Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NzY3NjQ4", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#pullrequestreview-464767648", "createdAt": "2020-08-11T05:56:19Z", "commit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1NjoxOVrOG-pYmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNTo1Nzo0OVrOG-pakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MjkzNw==", "bodyText": "Can you please extract this condition into a private method?", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468342937", "createdAt": "2020-08-11T05:56:19Z", "author": {"login": "tiborpopovics"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM0MzQ0Mw==", "bodyText": "Please write a unit test for this class.", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468343443", "createdAt": "2020-08-11T05:57:49Z", "author": {"login": "tiborpopovics"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODY0ODM3", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#pullrequestreview-464864837", "createdAt": "2020-08-11T08:41:57Z", "commit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0MTo1OFrOG-uKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwODo0NTo1MFrOG-uTYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTEzMg==", "bodyText": "please double check if this parameter is required in redbeams' application.yml", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421132", "createdAt": "2020-08-11T08:41:58Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMTk4OA==", "bodyText": "typo", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468421988", "createdAt": "2020-08-11T08:43:19Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQyMzUyMg==", "bodyText": "is this method necessary? could be inlined into the public getTemplate()", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468423522", "createdAt": "2020-08-11T08:45:50Z", "author": {"login": "bergerdenes"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {\n+        try {\n+            return new Template(armStorageAccountTemplatePath, getArmTemplate().toString(), freemarkerConfiguration);\n+        } catch (IOException e) {\n+            throw new CloudConnectorException(\"Couldn't create template object\", e);\n+        }\n+    }\n+\n+    private Template getArmTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTIwNjYx", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#pullrequestreview-464920661", "createdAt": "2020-08-11T09:58:16Z", "commit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOTo1ODoxNlrOG-w2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMTozOFrOG-xSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2NTQwNw==", "bodyText": "this could be private", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468465407", "createdAt": "2020-08-11T09:58:16Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureStorageAccountTemplateBuilder.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.sequenceiq.cloudbreak.cloud.azure;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.cloud.azure.connector.resource.StorageAccountParameters;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.util.FreeMarkerTemplateUtils;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+\n+@Component\n+public class AzureStorageAccountTemplateBuilder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountTemplateBuilder.class);\n+\n+    @Value(\"${cb.arm.storageaccount.template.path:}\")\n+    private String armStorageAccountTemplatePath;\n+\n+    @Inject\n+    private Configuration freemarkerConfiguration;\n+\n+    @Inject\n+    private FreeMarkerTemplateUtils freeMarkerTemplateUtils;\n+\n+    public String build(StorageAccountParameters storageAccountParameters) {\n+        try {\n+            Map<String, Object> model = new HashMap<>();\n+            model.put(\"storageAccountName\", storageAccountParameters.getStorageAccountName());\n+            model.put(\"location\", storageAccountParameters.getStorageLocation());\n+            model.put(\"skuName\", storageAccountParameters.getStorageAccountSkuType().name().toString());\n+            model.put(\"encrypted\", storageAccountParameters.getEncrypted());\n+            model.put(\"userDefinedTags\", storageAccountParameters.getTags());\n+            String generatedTemplate = freeMarkerTemplateUtils.processTemplateIntoString(getTemplate(), model);\n+            LOGGER.info(\"Generated stroage account Arm template: {}\", generatedTemplate);\n+            return generatedTemplate;\n+        } catch (IOException | TemplateException e) {\n+            throw new CloudConnectorException(\"Failed to process the storage account ARM Template\", e);\n+        }\n+    }\n+\n+    public Template getTemplate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MjM3MA==", "bodyText": "We should use the same mechanism as the other occurrences, e.g: https://github.com/hortonworks/cloudbreak/blob/master/cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/upscale/AzureUpscaleService.java#L92-L102", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#discussion_r468472370", "createdAt": "2020-08-11T10:11:38Z", "author": {"login": "pdarvasi"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/connector/resource/AzureStorageAccountBuilderService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.sequenceiq.cloudbreak.cloud.azure.connector.resource;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.microsoft.azure.management.resources.Deployment;\n+import com.sequenceiq.cloudbreak.cloud.azure.AzureStorageAccountTemplateBuilder;\n+import com.sequenceiq.cloudbreak.cloud.azure.client.AzureClient;\n+import com.sequenceiq.cloudbreak.cloud.exception.CloudConnectorException;\n+import com.sequenceiq.cloudbreak.common.json.Json;\n+\n+@Service\n+public class AzureStorageAccountBuilderService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureStorageAccountBuilderService.class);\n+\n+    @Inject\n+    private AzureStorageAccountTemplateBuilder azureStorageAccountTemplateBuilder;\n+\n+    public void buildStorageAccount(AzureClient client, StorageAccountParameters storageAccountParameters) {\n+\n+        try {\n+            String template = azureStorageAccountTemplateBuilder.build(storageAccountParameters);\n+            if (!client.templateDeploymentExists(storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName())) {\n+                String parameters = new Json(Map.of()).getValue();\n+                Deployment templateDeployment = client.createTemplateDeployment(\n+                        storageAccountParameters.getResourceGroupName(), storageAccountParameters.getStorageAccountName(), template, parameters);\n+                LOGGER.debug(\"Created template deployment for storage account: {}\", templateDeployment.exportTemplate().template());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afc24a4e8f5a4ec2486dd0090862f8859545a911", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/afc24a4e8f5a4ec2486dd0090862f8859545a911", "committedDate": "2020-08-10T07:42:33Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}, "afterCommit": {"oid": "1ef115ac2e12464eef2a9a466da05335104d0beb", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1ef115ac2e12464eef2a9a466da05335104d0beb", "committedDate": "2020-08-11T14:05:58Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTIyODM5", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#pullrequestreview-465122839", "createdAt": "2020-08-11T14:27:18Z", "commit": {"oid": "1ef115ac2e12464eef2a9a466da05335104d0beb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ef115ac2e12464eef2a9a466da05335104d0beb", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/1ef115ac2e12464eef2a9a466da05335104d0beb", "committedDate": "2020-08-11T14:05:58Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}, "afterCommit": {"oid": "12eea3d7613e6351713a6c6c03e70b5a68b16e09", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/12eea3d7613e6351713a6c6c03e70b5a68b16e09", "committedDate": "2020-08-11T14:41:08Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd18f276c3c952a64e9f1955266b53cef949f367", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fd18f276c3c952a64e9f1955266b53cef949f367", "committedDate": "2020-08-12T05:28:50Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12eea3d7613e6351713a6c6c03e70b5a68b16e09", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/12eea3d7613e6351713a6c6c03e70b5a68b16e09", "committedDate": "2020-08-11T14:41:08Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}, "afterCommit": {"oid": "fd18f276c3c952a64e9f1955266b53cef949f367", "author": {"user": {"login": "gergopapi2", "name": "Gergely Papp"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fd18f276c3c952a64e9f1955266b53cef949f367", "committedDate": "2020-08-12T05:28:50Z", "message": "CB-8308 [azure] image storage account public access should be false\n\nThe storage account for holding images in customer subscription has a parameter \"allow blob public access\", the default is true. Some customers do have a policy that do not allow to create an account with such settings, so cloudbreak should also create SA with disallow blob public access."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjkwOTI4", "url": "https://github.com/hortonworks/cloudbreak/pull/8763#pullrequestreview-465690928", "createdAt": "2020-08-12T08:18:30Z", "commit": {"oid": "fd18f276c3c952a64e9f1955266b53cef949f367"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2442, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}