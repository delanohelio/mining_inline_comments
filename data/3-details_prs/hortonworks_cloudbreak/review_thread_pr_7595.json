{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjQ0MDU4", "number": 7595, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjozNzoyNVrODokEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0NjoxOVrODpyd-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODYwNTI4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjozNzoyNVrOF3MBVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozNTo1MVrOF3SRxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxMjk0OQ==", "bodyText": "Is this new check valid for the other alert types?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393412949", "createdAt": "2020-03-17T02:37:25Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "diffHunk": "@@ -16,15 +20,19 @@\n     private String name;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.ADJUSTMENTTYPE)\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNTQ2MQ==", "bodyText": "yes adjustmentType needs to be defined for any policy. added LOAD_BASED for LoadAlert", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393515461", "createdAt": "2020-03-17T08:35:51Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "diffHunk": "@@ -16,15 +20,19 @@\n     private String name;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.ADJUSTMENTTYPE)\n+    @NotNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxMjk0OQ=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODYwNzM0OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjozODo0MlrOF3MCjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo0MDoxMFrOF3SaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxMzI2Mw==", "bodyText": "Not in case of Cron, AdjustmentType.PERCENTAGE or AdjustmentType.NODE_COUNT -> (-20%). Shrink by 20%.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393413263", "createdAt": "2020-03-17T02:38:42Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "diffHunk": "@@ -16,15 +20,19 @@\n     private String name;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.ADJUSTMENTTYPE)\n+    @NotNull\n     private AdjustmentType adjustmentType;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.SCALINGADJUSTMENT)\n+    @Positive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNzYyNw==", "bodyText": "correct, removed the 'Positive' validation.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393517627", "createdAt": "2020-03-17T08:40:10Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/ScalingPolicyBase.java", "diffHunk": "@@ -16,15 +20,19 @@\n     private String name;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.ADJUSTMENTTYPE)\n+    @NotNull\n     private AdjustmentType adjustmentType;\n \n     @ApiModelProperty(ScalingPolicyJsonProperties.SCALINGADJUSTMENT)\n+    @Positive", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxMzI2Mw=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODYzNjE4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjo1Nzo1NVrOF3MUdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo0MDozMVrOF3Sa2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzg0Ng==", "bodyText": "What does this 'id' represent? Will this be different from the 'id' inside the ScalingPolicyResponse object? Or is this the AlertId vs PolicyId?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393417846", "createdAt": "2020-03-17T02:57:55Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertResponse.java", "diffHunk": "@@ -48,19 +45,11 @@ public void setId(Long id) {\n         this.id = id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNzc4Nw==", "bodyText": "Yes this is AlertId vs PolicyId", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393517787", "createdAt": "2020-03-17T08:40:31Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertResponse.java", "diffHunk": "@@ -48,19 +45,11 @@ public void setId(Long id) {\n         this.id = id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQxNzg0Ng=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY1MzE5OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzowNjowOFrOF3MeYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxMzozMlrOF3Xptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDM4Ng==", "bodyText": "Not exactly related to the review.\n\nWhat format TimeZone is supported?\nWhat format CRON expressions supported. It looks like the code allows expressions with a minimum of 3 entries.\nThese will eventually need to be documented.\nAlso will eventually need to add more error validation for the TimeZone, and other fields in general.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393420386", "createdAt": "2020-03-17T03:06:08Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertRequest.java", "diffHunk": "@@ -12,9 +14,13 @@\n public class TimeAlertRequest extends AbstractAlertJson {\n \n     @ApiModelProperty(TimeAlertJsonProperties.TIMEZONE)\n+    @NotEmpty\n+    @Size(max = 50)\n     private String timeZone;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMzUxMA==", "bodyText": "As of now there is validation for CRON expression when TimeAlert is set, I have added for TimeZone also.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393603510", "createdAt": "2020-03-17T11:13:32Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/TimeAlertRequest.java", "diffHunk": "@@ -12,9 +14,13 @@\n public class TimeAlertRequest extends AbstractAlertJson {\n \n     @ApiModelProperty(TimeAlertJsonProperties.TIMEZONE)\n+    @NotEmpty\n+    @Size(max = 50)\n     private String timeZone;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMDM4Ng=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY2OTMxOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoxNTo1MVrOF3MoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDo1MjozM1rOF32Tpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMjg1MA==", "bodyText": "This error message is nice. However, when we start working with CRNs - this becomes problematic. This shouldn't show up to the end user. Are there other scenarios where this happens as well?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393422850", "createdAt": "2020-03-17T03:15:51Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -175,4 +228,19 @@ private TimeAlertResponse createTimeAlertResponse(TimeAlert alarm) {\n     private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert alarm) {\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n+\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;\n+        switch (alertType) {\n+            case LOAD:\n+                alert = alertService.findLoadAlertByCluster(clusterId, alertId);\n+                break;\n+            case TIME:\n+            default:\n+                alert = alertService.findTimeAlertByCluster(clusterId, alertId);\n+        }\n+        if (alert == null) {\n+            throw new NotFoundException(String.format(\"Could not find %s alert with id: '%s', for cluster: '%s'\", alertType, alertId, clusterId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNjY0Mg==", "bodyText": "This can happen only when a deleted alert id is used to update.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393606642", "createdAt": "2020-03-17T11:19:51Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -175,4 +228,19 @@ private TimeAlertResponse createTimeAlertResponse(TimeAlert alarm) {\n     private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert alarm) {\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n+\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;\n+        switch (alertType) {\n+            case LOAD:\n+                alert = alertService.findLoadAlertByCluster(clusterId, alertId);\n+                break;\n+            case TIME:\n+            default:\n+                alert = alertService.findTimeAlertByCluster(clusterId, alertId);\n+        }\n+        if (alert == null) {\n+            throw new NotFoundException(String.format(\"Could not find %s alert with id: '%s', for cluster: '%s'\", alertType, alertId, clusterId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMjg1MA=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNTc2Nw==", "bodyText": "From your mail, I think CRN based error messages are better.\nAnother option may be more structured error responses which can be parsed by the CDP layer, and converted to actual errors. The CRN approach should be good for now.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394105767", "createdAt": "2020-03-18T04:52:33Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -175,4 +228,19 @@ private TimeAlertResponse createTimeAlertResponse(TimeAlert alarm) {\n     private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert alarm) {\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n+\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;\n+        switch (alertType) {\n+            case LOAD:\n+                alert = alertService.findLoadAlertByCluster(clusterId, alertId);\n+                break;\n+            case TIME:\n+            default:\n+                alert = alertService.findTimeAlertByCluster(clusterId, alertId);\n+        }\n+        if (alert == null) {\n+            throw new NotFoundException(String.format(\"Could not find %s alert with id: '%s', for cluster: '%s'\", alertType, alertId, clusterId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMjg1MA=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY3MTk0OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoxNzozOFrOF3Mpmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMTozODo0NVrOF3Ycqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzI1OQ==", "bodyText": "May be worth adding a node here that this essentially breaks updates to metric / prometheus alerts (Yes - these will be disabled, but for future fixes - if someone decides to go update them)", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393423259", "createdAt": "2020-03-17T03:17:38Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -175,4 +228,19 @@ private TimeAlertResponse createTimeAlertResponse(TimeAlert alarm) {\n     private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert alarm) {\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n+\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYxNjU1NQ==", "bodyText": "ack", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393616555", "createdAt": "2020-03-17T11:38:45Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AlertController.java", "diffHunk": "@@ -175,4 +228,19 @@ private TimeAlertResponse createTimeAlertResponse(TimeAlert alarm) {\n     private PrometheusAlertResponse createPrometheusAlertResponse(PrometheusAlert alarm) {\n         return prometheusAlertResponseConverter.convert(alarm);\n     }\n+\n+    private void validateAlertForUpdate(Long clusterId, Long alertId, AlertType alertType) {\n+        BaseAlert alert;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzI1OQ=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY3NTU2OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoyMDowNFrOF3MrqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1ODoyMFrOF4L0Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzc4NQ==", "bodyText": "Does this mean 'One Load Alert per Cluster', or 'One Alert per cluster' or something else?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393423785", "createdAt": "2020-03-17T03:20:04Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxOTgyOA==", "bodyText": "This has to be ManytoOne, changed it.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393519828", "createdAt": "2020-03-17T08:44:16Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzc4NQ=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNTkyMA==", "bodyText": "What does it meant though. The JPA annotations are very confusing.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394105920", "createdAt": "2020-03-18T04:53:13Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzc4NQ=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1ODExOQ==", "bodyText": "There can be many LoadAlerts(One Per HostGroup if configured) for single cluster.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394458119", "createdAt": "2020-03-18T15:58:20Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzc4NQ=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY3NjQ4OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoyMDozOFrOF3MsPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1OTo0OVrOF4L43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzkzNA==", "bodyText": "Add a Json text field for Configuration? Can be populated with defaults, or left empty for now.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393423934", "createdAt": "2020-03-17T03:20:38Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne\n+    private Cluster cluster;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzQ0OA==", "bodyText": "The other fields related to LoadAlert are Min,Max,CoolDown. Since these applies to other type of alerts, I thought it is better to add hostGroup Level config for these three. For load alert specific config, i have added scaleUpMode (Normal, Aggressive) and scaleDownMode  (Normal, Aggressive) and storing it as a string itself in db.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393527448", "createdAt": "2020-03-17T08:58:05Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne\n+    private Cluster cluster;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzkzNA=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjQzMw==", "bodyText": "Why I say json is that we don't necessarily know what these fields will be. For the current algo, it's probably aggressiveness as a value between 0 and 1 (fraction / percentage).\nIf the algorithm changes, the parameters can be very different.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394106433", "createdAt": "2020-03-18T04:55:37Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne\n+    private Cluster cluster;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzkzNA=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1OTM1Ng==", "bodyText": "ack", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394459356", "createdAt": "2020-03-18T15:59:49Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/domain/LoadAlert.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.sequenceiq.periscope.domain;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+import javax.persistence.NamedQueries;\n+import javax.persistence.NamedQuery;\n+import javax.persistence.OneToOne;\n+\n+@Entity\n+@DiscriminatorValue(\"LOAD\")\n+@NamedQueries({\n+        @NamedQuery(name = \"LoadAlert.findByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId AND c.id= :alertId\"),\n+        @NamedQuery(name = \"LoadAlert.findAllByCluster\", query = \"SELECT c FROM LoadAlert c WHERE c.cluster.id= :clusterId\")\n+})\n+public class LoadAlert extends BaseAlert {\n+\n+    @OneToOne\n+    private Cluster cluster;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyMzkzNA=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODY5NjY2OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/ClusterConverter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzozMzozNlrOF3M4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjowMToxOVrOF4L9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNjk1Ng==", "bodyText": "List for future enhancements?, where load alerts may be set on different hostgroups on a single cluster?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393426956", "createdAt": "2020-03-17T03:33:36Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/ClusterConverter.java", "diffHunk": "@@ -59,6 +63,11 @@ public AutoscaleClusterResponse convert(Cluster source) {\n             json.setPrometheusAlerts(prometheusAlertRequests);\n         }\n \n+        if (!source.getLoadAlerts().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MDMwNg==", "bodyText": "All the loadalerts associated with various hostgroups is already retrieved.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r393660306", "createdAt": "2020-03-17T13:00:22Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/ClusterConverter.java", "diffHunk": "@@ -59,6 +63,11 @@ public AutoscaleClusterResponse convert(Cluster source) {\n             json.setPrometheusAlerts(prometheusAlertRequests);\n         }\n \n+        if (!source.getLoadAlerts().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNjk1Ng=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjEwMA==", "bodyText": "Was asking why a 'List' instead of a single LoadAlert.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394106100", "createdAt": "2020-03-18T04:54:07Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/ClusterConverter.java", "diffHunk": "@@ -59,6 +63,11 @@ public AutoscaleClusterResponse convert(Cluster source) {\n             json.setPrometheusAlerts(prometheusAlertRequests);\n         }\n \n+        if (!source.getLoadAlerts().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNjk1Ng=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MDU1MQ==", "bodyText": "It is a list since LoadAlerts can be configured one per HostGroup with different algorithms and maybe aggressiveness.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r394460551", "createdAt": "2020-03-18T16:01:19Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/converter/ClusterConverter.java", "diffHunk": "@@ -59,6 +63,11 @@ public AutoscaleClusterResponse convert(Cluster source) {\n             json.setPrometheusAlerts(prometheusAlertRequests);\n         }\n \n+        if (!source.getLoadAlerts().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNjk1Ng=="}, "originalCommit": {"oid": "559afe9b8e7a9652db6f2b69a345384363939692"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTI4NTg4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzozOTo0M1rOF5J1HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToxNjo1MFrOF5MQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NDIwNA==", "bodyText": "What had we finalized on in terms of specifying minSize, maxSize and coolDown for Load Based only, or for Time Based as well?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395474204", "createdAt": "2020-03-20T07:39:43Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxMzk1Mg==", "bodyText": "There was no finalization in this aspect, so i added to LoadBased based on the external api interface.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395513952", "createdAt": "2020-03-20T09:16:50Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NDIwNA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTI5OTAxOnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo0NTo1M1rOF5J8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToxNzowNlrOF5MQ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NjEzMA==", "bodyText": "Extending AbstractAlertJson means the 'alertName' is present in LoadAlertConfigurationRequest as well as LoadAlertRequest. Also the description being repeated.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395476130", "createdAt": "2020-03-20T07:45:53Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import javax.validation.Valid;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.LoadAlertJsonProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class LoadAlertConfigurationRequest extends AbstractAlertJson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNDA5Mg==", "bodyText": "ack", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395514092", "createdAt": "2020-03-20T09:17:06Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import javax.validation.Valid;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.LoadAlertJsonProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class LoadAlertConfigurationRequest extends AbstractAlertJson {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NjEzMA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMwMDI0OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo0NjozMVrOF5J9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjo1NzozNFrOF5lTMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NjMyMA==", "bodyText": "How would these relate to the ScalingConfigurationRequest that exists in the DistroXAutoscaleClusterRequest?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395476320", "createdAt": "2020-03-20T07:46:31Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import javax.validation.Valid;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.LoadAlertJsonProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class LoadAlertConfigurationRequest extends AbstractAlertJson {\n+\n+    @ApiModelProperty(LoadAlertJsonProperties.LOAD_ALERT_CONFIGURATION_MIN_RESOUCE_VALUE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNDY3MQ==", "bodyText": "ScalingConfigurationRequest is at cluster level, and this can be overriding value for the alert. If not this can be removed and the cluster level value be used.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395514671", "createdAt": "2020-03-20T09:18:14Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import javax.validation.Valid;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.LoadAlertJsonProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class LoadAlertConfigurationRequest extends AbstractAlertJson {\n+\n+    @ApiModelProperty(LoadAlertJsonProperties.LOAD_ALERT_CONFIGURATION_MIN_RESOUCE_VALUE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NjMyMA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyNDI3Mg==", "bodyText": "I would say remove ScalingConfigurationRequest rather than this.\nActually, ScalingConfigurationRequest could be changed to allow users to configure aspects like\n\nIf scaling up, max number of nodes to add in one 'scale-up' event. (This is hardcoded to 100 in CB at the moment.\n\nAnyway, I'd remove it for now.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395924272", "createdAt": "2020-03-20T22:57:34Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationRequest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import javax.validation.Valid;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.LoadAlertJsonProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class LoadAlertConfigurationRequest extends AbstractAlertJson {\n+\n+    @ApiModelProperty(LoadAlertJsonProperties.LOAD_ALERT_CONFIGURATION_MIN_RESOUCE_VALUE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ3NjMyMA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMyNTQ4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo1Nzo1M1rOF5KMNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjo1NTo0N1rOF5lRZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDExOA==", "bodyText": "AutoScalingMode being at the top level means a single cluster can only have a single AutoScalingMode for each host group.\nAt the moment, this doesn't matter since there is only one hostGroup to scale out. However, the interface allows for multiple Time or Load based policies - so it is partly catering to future requirements, while disallowing some functionality that may be required in the future. Can this be flipped to pull the hostGroup up - similar to 'https://github.infra.cloudera.com/sseth/thunderhead/blob/master/services/libs/protocols-yaml/src/main/yaml/datahub.yaml#L1754'. That does not disallow different host groups from having different types of scaling configs. It doesn't necessarily enable potential future functionality like Spot instance ratios, but does not block it out either. (For Spot - the thought was to specify hostGroups, and then a ratio within that single policy block).", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395480118", "createdAt": "2020-03-20T07:57:53Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNTk1OA==", "bodyText": "Based on all our discussions and even the UI spec I assumed only one type of AutoScaling will be supported for a single cluster with different policies for different hostGroups. This also ensures efficient loading of clusters and avoids full table scans.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395515958", "createdAt": "2020-03-20T09:20:54Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDExOA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMzgxMg==", "bodyText": "Replied in the separate email thread; adding that here as well.\nThe current release supports a single type. The API should not disallow it though, for future enhancements. The UI will typically offer a simpler set of options compared to what is possible via the CLI or API - which tends to always be richer.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395923812", "createdAt": "2020-03-20T22:55:47Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDExOA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMyOTg1OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo1OTo0NlrOF5KOqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNzo1OTo0NlrOF5KOqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDc0Nw==", "bodyText": "State and Stack_Type - Is it possible to make these Enums? Not sure what they mean, and what the valid values are.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395480747", "createdAt": "2020-03-20T07:59:46Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterResponse implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ID)\n+    private long id;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_NAME)\n+    private String stackName;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_CRN)\n+    private String stackCrn;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMzMTE2OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowMDoyM1rOF5KPgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyMzowMFrOF5MclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDk2Mg==", "bodyText": "ScalingConfigurarationResponse? (Likely identical to ScalingConfigurationRequest - but should still be a separate class), or maybe just name the object ScalingConfiguration.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395480962", "createdAt": "2020-03-20T08:00:23Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterResponse implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ID)\n+    private long id;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_NAME)\n+    private String stackName;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_CRN)\n+    private String stackCrn;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STATE)\n+    private String state;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_TYPE)\n+    private String stackType;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.AUTOSCALING_ENABLED)\n+    private Boolean autoscalingEnabled;\n+\n+    @ApiModelProperty(ApiDescription.DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.TIME_ALERTS)\n+    private List<TimeAlertResponse> timeAlerts;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.LOAD_ALERTS)\n+    private List<LoadAlertResponse> loadAlerts;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)\n+    private ScalingConfigurationRequest scalingConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNzA3Nw==", "bodyText": "All Request and Response are identical except they have DB ID in response, the naming convention and converter conventions is based on existing class hierarchy.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395517077", "createdAt": "2020-03-20T09:23:00Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterResponse.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription;\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterResponse implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ID)\n+    private long id;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_NAME)\n+    private String stackName;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_CRN)\n+    private String stackCrn;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STATE)\n+    private String state;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.STACK_TYPE)\n+    private String stackType;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.AUTOSCALING_ENABLED)\n+    private Boolean autoscalingEnabled;\n+\n+    @ApiModelProperty(ApiDescription.DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.TIME_ALERTS)\n+    private List<TimeAlertResponse> timeAlerts;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.LOAD_ALERTS)\n+    private List<LoadAlertResponse> loadAlerts;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)\n+    private ScalingConfigurationRequest scalingConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MDk2Mg=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTMzODExOnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowMzoxNVrOF5KTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyMzo1M1rOF5MeUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MTk3MA==", "bodyText": "LoadAlertConfigurationRequest and LoadAlertConfigurationResponse are identical. Should be a single base class from which they inherit. Alternately, can be replaced by a 'LoadAlertConfiguration'", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395481970", "createdAt": "2020-03-20T08:03:15Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationResponse.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.periscope.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxNzUyMw==", "bodyText": "same as above. have kept in sync with existing hierarchy we can refactor all request\\responses\\converters in a later PR if required.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395517523", "createdAt": "2020-03-20T09:23:53Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertConfigurationResponse.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.sequenceiq.periscope.api.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4MTk3MA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTM0NDY0OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertRequest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowNjowM1rOF5KXYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODowNjowM1rOF5KXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ4Mjk3Ng==", "bodyText": "Similarly here. The only difference between the Request and Response is the 'id' in the response. Base class + inherit?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395482976", "createdAt": "2020-03-20T08:06:03Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/LoadAlertRequest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.sequenceiq.periscope.api.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTM5MjcxOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AutoScaleClusterV2Controller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoyNDo0N1rOF5K1Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyNToyNlrOF5MhXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5MDY1NA==", "bodyText": "General question: This and AutoScaleClusterV1Controller - Is there some specific reason to move the conversion (domain (or DB) to model (API) from the Service over to the Controller?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395490654", "createdAt": "2020-03-20T08:24:47Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AutoScaleClusterV2Controller.java", "diffHunk": "@@ -10,6 +10,7 @@\n import com.sequenceiq.periscope.api.model.AutoscaleClusterResponse;\n import com.sequenceiq.periscope.api.model.AutoscaleClusterState;\n import com.sequenceiq.periscope.api.model.StateJson;\n+import com.sequenceiq.periscope.converter.ClusterConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxODMwMw==", "bodyText": "Yes expect this class all other service api retrieve domain model only. The same domain model can be converted to different types of response objects in the controller, hence it was refactored.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395518303", "createdAt": "2020-03-20T09:25:26Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/controller/AutoScaleClusterV2Controller.java", "diffHunk": "@@ -10,6 +10,7 @@\n import com.sequenceiq.periscope.api.model.AutoscaleClusterResponse;\n import com.sequenceiq.periscope.api.model.AutoscaleClusterState;\n import com.sequenceiq.periscope.api.model.StateJson;\n+import com.sequenceiq.periscope.converter.ClusterConverter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5MDY1NA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQwNzI4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/AutoscaleStackType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODoyOTozM1rOF5K-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyNTo1OVrOF5MieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5Mjg4NQ==", "bodyText": "What is the significance of this?, and potential alternate values?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395492885", "createdAt": "2020-03-20T08:29:33Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/AutoscaleStackType.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+public enum AutoscaleStackType {\n+    WORKLOAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxODU4NA==", "bodyText": "There are DATALAKE, TEMPLATE type clusters also.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395518584", "createdAt": "2020-03-20T09:25:59Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/AutoscaleStackType.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+public enum AutoscaleStackType {\n+    WORKLOAD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5Mjg4NQ=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQxOTE4OnYy", "diffSide": "RIGHT", "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODozNDowOFrOF5LFpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyNjoxM1rOF5Mi7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NDgyMA==", "bodyText": "Would a name need to be associated with each of the cron expressions? (Can be auto-generated if required)", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395494820", "createdAt": "2020-03-20T08:34:08Z", "author": {"login": "sidseth"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)\n+    private @Valid ScalingConfigurationRequest scalingConfiguration;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.TIME_ALERTS)\n+    private @Valid List<TimeAlertRequest> timeAlertRequests;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.LOAD_ALERTS)\n+    private @Valid List<LoadAlertRequest> loadAlertRequests;\n+\n+    public DistroXAutoscaleClusterRequest() {\n+    }\n+\n+    public DistroXAutoscaleClusterRequest(boolean enableAutoscaling) {\n+        this.enableAutoscaling = enableAutoscaling;\n+    }\n+\n+    public void setEnableAutoscaling(Boolean enableAutoscaling) {\n+        this.enableAutoscaling = enableAutoscaling;\n+    }\n+\n+    public List<TimeAlertRequest> getTimeAlertRequests() {\n+        return timeAlertRequests;\n+    }\n+\n+    public void setTimeAlertRequests(List<TimeAlertRequest> timeAlertRequests) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxODcwMw==", "bodyText": "name is nullable.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395518703", "createdAt": "2020-03-20T09:26:13Z", "author": {"login": "smaniraju"}, "path": "autoscale-api/src/main/java/com/sequenceiq/periscope/api/model/DistroXAutoscaleClusterRequest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.sequenceiq.periscope.api.model;\n+\n+import java.util.List;\n+\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotNull;\n+\n+import com.sequenceiq.periscope.doc.ApiDescription.ClusterJsonsProperties;\n+import com.sequenceiq.periscope.doc.ApiDescription.DistroXClusterJsonsProperties;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+public class DistroXAutoscaleClusterRequest implements Json {\n+    @ApiModelProperty(ClusterJsonsProperties.ENABLE_AUTOSCALING)\n+    private @NotNull Boolean enableAutoscaling;\n+\n+    @ApiModelProperty(DistroXClusterJsonsProperties.DISTROX_SCALING_MODE)\n+    private @Valid AutoscalingModeType autoScalingMode;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.SCALING_CONFIGURATION)\n+    private @Valid ScalingConfigurationRequest scalingConfiguration;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.TIME_ALERTS)\n+    private @Valid List<TimeAlertRequest> timeAlertRequests;\n+\n+    @ApiModelProperty(ClusterJsonsProperties.LOAD_ALERTS)\n+    private @Valid List<LoadAlertRequest> loadAlertRequests;\n+\n+    public DistroXAutoscaleClusterRequest() {\n+    }\n+\n+    public DistroXAutoscaleClusterRequest(boolean enableAutoscaling) {\n+        this.enableAutoscaling = enableAutoscaling;\n+    }\n+\n+    public void setEnableAutoscaling(Boolean enableAutoscaling) {\n+        this.enableAutoscaling = enableAutoscaling;\n+    }\n+\n+    public List<TimeAlertRequest> getTimeAlertRequests() {\n+        return timeAlertRequests;\n+    }\n+\n+    public void setTimeAlertRequests(List<TimeAlertRequest> timeAlertRequests) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NDgyMA=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQzMTE2OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/model/MonitoredStack.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODozODozN1rOF5LNJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyNzowOVrOF5MkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5Njc0Mg==", "bodyText": "Skip this? Set the fields in the constructor itself, so that they can be 'final'", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395496742", "createdAt": "2020-03-20T08:38:37Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/model/MonitoredStack.java", "diffHunk": "@@ -8,20 +8,31 @@\n \n     private final ClusterManager clusterManager;\n \n-    private final String stackCrn;\n+    private String stackCrn;\n+\n+    private String stackName;\n+\n+    private String stackType;\n \n     private final Long stackId;\n \n     private final SecurityConfig securityConfig;\n \n     private final Tunnel tunnel;\n \n-    public MonitoredStack(ClusterManager clusterManager, String stackCrn, Long stackId, SecurityConfig securityConfig, Tunnel tunnel) {\n+    public MonitoredStack(ClusterManager clusterManager, String stackName, String stackCrn,\n+            String stackType, Long stackId, SecurityConfig securityConfig, Tunnel tunnel) {\n         this.clusterManager = clusterManager;\n-        this.stackCrn = stackCrn;\n-        this.stackId = stackId;\n         this.securityConfig = securityConfig;\n         this.tunnel = tunnel;\n+        this.stackId = stackId;\n+        initStackContext(stackName, stackCrn, stackType);\n+    }\n+\n+    private void initStackContext(String stackName, String stackCrn, String stackType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxOTExNg==", "bodyText": "There is checkstyle limit on constructor to 5 executable statements hence had to refactor", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395519116", "createdAt": "2020-03-20T09:27:09Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/model/MonitoredStack.java", "diffHunk": "@@ -8,20 +8,31 @@\n \n     private final ClusterManager clusterManager;\n \n-    private final String stackCrn;\n+    private String stackCrn;\n+\n+    private String stackName;\n+\n+    private String stackType;\n \n     private final Long stackId;\n \n     private final SecurityConfig securityConfig;\n \n     private final Tunnel tunnel;\n \n-    public MonitoredStack(ClusterManager clusterManager, String stackCrn, Long stackId, SecurityConfig securityConfig, Tunnel tunnel) {\n+    public MonitoredStack(ClusterManager clusterManager, String stackName, String stackCrn,\n+            String stackType, Long stackId, SecurityConfig securityConfig, Tunnel tunnel) {\n         this.clusterManager = clusterManager;\n-        this.stackCrn = stackCrn;\n-        this.stackId = stackId;\n         this.securityConfig = securityConfig;\n         this.tunnel = tunnel;\n+        this.stackId = stackId;\n+        initStackContext(stackName, stackCrn, stackType);\n+    }\n+\n+    private void initStackContext(String stackName, String stackCrn, String stackType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5Njc0Mg=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQzNTIwOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0MDoxOFrOF5LPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjozOTowNFrOF5lBCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzQwMg==", "bodyText": "Same as previous - significance of the 'stackType' field? Why was it not required earlier when the id was being used?", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395497402", "createdAt": "2020-03-20T08:40:18Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterRepository.java", "diffHunk": "@@ -25,6 +29,9 @@\n     @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId\")\n     List<Cluster> findByUserId(@Param(\"userId\") String userId);\n \n+    @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId and c.stackType = :stackType\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxOTcxMw==", "bodyText": "It was not required in earlier CB, but since now we differentiate DataHub clusters and Datalake clusters this is required whether id based or crn based.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395519713", "createdAt": "2020-03-20T09:28:12Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterRepository.java", "diffHunk": "@@ -25,6 +29,9 @@\n     @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId\")\n     List<Cluster> findByUserId(@Param(\"userId\") String userId);\n \n+    @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId and c.stackType = :stackType\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzQwMg=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxOTYyNw==", "bodyText": "Sounds good.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395919627", "createdAt": "2020-03-20T22:39:04Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/repository/ClusterRepository.java", "diffHunk": "@@ -25,6 +29,9 @@\n     @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId\")\n     List<Cluster> findByUserId(@Param(\"userId\") String userId);\n \n+    @Query(\"SELECT c FROM Cluster c LEFT JOIN FETCH c.clusterPertain WHERE c.clusterPertain.userId = :userId and c.stackType = :stackType\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5NzQwMg=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQ1MDgzOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0NjoxOVrOF5LZnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOToyODoyNVrOF5MnPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5OTkzMw==", "bodyText": "Will ideally need indexes on these fields as well if using them as filter parameters.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395499933", "createdAt": "2020-03-20T08:46:19Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+-- // CB-5734_cluster_table_enhancements\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_name VARCHAR(255);\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_type VARCHAR(255);\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS autoscale_mode VARCHAR(255);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUxOTgwNg==", "bodyText": "yes.", "url": "https://github.com/hortonworks/cloudbreak/pull/7595#discussion_r395519806", "createdAt": "2020-03-20T09:28:25Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/resources/schema/app/20200318083430_CB-5734_cluster_table_enhancements.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+-- // CB-5734_cluster_table_enhancements\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_name VARCHAR(255);\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS cb_stack_type VARCHAR(255);\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS autoscale_mode VARCHAR(255);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ5OTkzMw=="}, "originalCommit": {"oid": "b6b704b6e9bea51dfe895cbe9dda293467f1bc9e"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2669, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}