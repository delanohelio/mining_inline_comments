{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzQxNTg3", "number": 8100, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzowODozOVrOD-f0fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxMzo1NFrOEBsu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODU5NjQ0OnYy", "diffSide": "RIGHT", "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzowODozOVrOGYoi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyODoyM1rOGcLERg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw==", "bodyText": "Splitting this into loadBasedScaling \\ timeBasedScaling will be good.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428483327", "createdAt": "2020-05-21T07:08:39Z", "author": {"login": "smaniraju"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NTUzNQ==", "bodyText": "Also will AutoscaleRecommendation be exposed as top level api BlueprintUtilV4Endpoint::getAutoscaleRecommendation(workspaceId,blueprintName) for validation in periscope against Autoscale CLI requests?  Something similar to BlueprintUtilV4Endpoint::getServicesByBlueprint. BlueprintUtilV4Endpoint::createRecommendation will not be usable from periscope since parameters like credentialName, region are not available.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428495535", "createdAt": "2020-05-21T07:39:53Z", "author": {"login": "smaniraju"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1MzU5Ng==", "bodyText": "Split is done.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428953596", "createdAt": "2020-05-21T22:40:39Z", "author": {"login": "cegganesh84"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjgyNg==", "bodyText": "This returns,\n\"autoscaleRecommendation\":{\"timeBasedHostGroups\":[\"compute\",\"gateway\"],\"loadBasedHostGroups\":[\"compute\"]},\"resizeRecommendation\":{\"scaleUpHostGroups\":[\"worker\",\"gateway\",\"compute\"],\"scaleDownHostGroups\":[\"worker\",\"gateway\",\"compute\"]}}\n\nI will check the generated swagger definition and see what apis to add.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428986826", "createdAt": "2020-05-22T00:42:25Z", "author": {"login": "cegganesh84"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5ODkxNw==", "bodyText": "Yes this response looks good. All autoscaling related CB API  are accessed  via AutoscaleV4Endpoint. It would be nice if this is also exposed in that.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r429098917", "createdAt": "2020-05-22T07:56:49Z", "author": {"login": "smaniraju"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDYzMA==", "bodyText": "I will add the endpoint via a new PR.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r432194630", "createdAt": "2020-05-29T00:28:23Z", "author": {"login": "cegganesh84"}, "path": "cloud-api/src/main/java/com/sequenceiq/cloudbreak/cloud/model/AutoscaleRecommendation.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.sequenceiq.cloudbreak.cloud.model;\n+\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class AutoscaleRecommendation {\n+\n+    private final Set<String> hostGroups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzMyNw=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODcyNDE0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzo1Nzo0OFrOGYpxhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzo1NzozNFrOGZOI9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzQzMA==", "bodyText": "please include only compute.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428503430", "createdAt": "2020-05-21T07:57:48Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "diffHunk": "@@ -166,6 +177,56 @@ private boolean fallbackGatewayFilter(String hostGroupName) {\n                 || lowerName.contains(\"services\");\n     }\n \n+    private ResizeRecommendation recommendResize(BlueprintTextProcessor blueprintTextProcessor) {\n+        ResizeRecommendation resizeRecommendation = blueprintTextProcessor.recommendResize();\n+\n+        if (resizeRecommendation.getScaleUpHostGroups().isEmpty()) {\n+            Set<String> scaleUpHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleUpFilter);\n+            if (!scaleUpHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleUpHostGroups(scaleUpHostGroups);\n+            }\n+        }\n+        if (resizeRecommendation.getScaleDownHostGroups().isEmpty()) {\n+            Set<String> scaleDownHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleDownFilter);\n+            if (!scaleDownHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleDownHostGroups(scaleDownHostGroups);\n+            }\n+        }\n+\n+        return resizeRecommendation;\n+    }\n+\n+    private boolean fallbackScaleUpFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private boolean fallbackScaleDownFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private AutoscaleRecommendation recommendAutoscale(BlueprintTextProcessor blueprintTextProcessor) {\n+        AutoscaleRecommendation autoscaleRecommendation = blueprintTextProcessor.recommendAutoscale();\n+\n+        if (autoscaleRecommendation.getHostGroups().isEmpty()) {\n+            Set<String> autoscaleGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackAutoscaleFilter);\n+            if (!autoscaleGroups.isEmpty()) {\n+                autoscaleRecommendation = new AutoscaleRecommendation(autoscaleGroups);\n+            }\n+        }\n+\n+        return autoscaleRecommendation;\n+    }\n+\n+    private boolean fallbackAutoscaleFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return lowerCaseName.contains(\"compute\")\n+                || lowerCaseName.contains(\"gateway\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1MzcwNQ==", "bodyText": "Split it into time and load. Included only compute for load.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428953705", "createdAt": "2020-05-21T22:41:01Z", "author": {"login": "cegganesh84"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "diffHunk": "@@ -166,6 +177,56 @@ private boolean fallbackGatewayFilter(String hostGroupName) {\n                 || lowerName.contains(\"services\");\n     }\n \n+    private ResizeRecommendation recommendResize(BlueprintTextProcessor blueprintTextProcessor) {\n+        ResizeRecommendation resizeRecommendation = blueprintTextProcessor.recommendResize();\n+\n+        if (resizeRecommendation.getScaleUpHostGroups().isEmpty()) {\n+            Set<String> scaleUpHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleUpFilter);\n+            if (!scaleUpHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleUpHostGroups(scaleUpHostGroups);\n+            }\n+        }\n+        if (resizeRecommendation.getScaleDownHostGroups().isEmpty()) {\n+            Set<String> scaleDownHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleDownFilter);\n+            if (!scaleDownHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleDownHostGroups(scaleDownHostGroups);\n+            }\n+        }\n+\n+        return resizeRecommendation;\n+    }\n+\n+    private boolean fallbackScaleUpFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private boolean fallbackScaleDownFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private AutoscaleRecommendation recommendAutoscale(BlueprintTextProcessor blueprintTextProcessor) {\n+        AutoscaleRecommendation autoscaleRecommendation = blueprintTextProcessor.recommendAutoscale();\n+\n+        if (autoscaleRecommendation.getHostGroups().isEmpty()) {\n+            Set<String> autoscaleGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackAutoscaleFilter);\n+            if (!autoscaleGroups.isEmpty()) {\n+                autoscaleRecommendation = new AutoscaleRecommendation(autoscaleGroups);\n+            }\n+        }\n+\n+        return autoscaleRecommendation;\n+    }\n+\n+    private boolean fallbackAutoscaleFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return lowerCaseName.contains(\"compute\")\n+                || lowerCaseName.contains(\"gateway\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzQzMA=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA5OTI1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r429099254", "createdAt": "2020-05-22T07:57:34Z", "author": {"login": "smaniraju"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/stack/CloudResourceAdvisor.java", "diffHunk": "@@ -166,6 +177,56 @@ private boolean fallbackGatewayFilter(String hostGroupName) {\n                 || lowerName.contains(\"services\");\n     }\n \n+    private ResizeRecommendation recommendResize(BlueprintTextProcessor blueprintTextProcessor) {\n+        ResizeRecommendation resizeRecommendation = blueprintTextProcessor.recommendResize();\n+\n+        if (resizeRecommendation.getScaleUpHostGroups().isEmpty()) {\n+            Set<String> scaleUpHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleUpFilter);\n+            if (!scaleUpHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleUpHostGroups(scaleUpHostGroups);\n+            }\n+        }\n+        if (resizeRecommendation.getScaleDownHostGroups().isEmpty()) {\n+            Set<String> scaleDownHostGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackScaleDownFilter);\n+            if (!scaleDownHostGroups.isEmpty()) {\n+                resizeRecommendation.setScaleDownHostGroups(scaleDownHostGroups);\n+            }\n+        }\n+\n+        return resizeRecommendation;\n+    }\n+\n+    private boolean fallbackScaleUpFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private boolean fallbackScaleDownFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return !lowerCaseName.contains(\"master\")\n+                && !lowerCaseName.contains(\"manager\");\n+    }\n+\n+    private AutoscaleRecommendation recommendAutoscale(BlueprintTextProcessor blueprintTextProcessor) {\n+        AutoscaleRecommendation autoscaleRecommendation = blueprintTextProcessor.recommendAutoscale();\n+\n+        if (autoscaleRecommendation.getHostGroups().isEmpty()) {\n+            Set<String> autoscaleGroups = filterHostGroupByPredicate(blueprintTextProcessor, this::fallbackAutoscaleFilter);\n+            if (!autoscaleGroups.isEmpty()) {\n+                autoscaleRecommendation = new AutoscaleRecommendation(autoscaleGroups);\n+            }\n+        }\n+\n+        return autoscaleRecommendation;\n+    }\n+\n+    private boolean fallbackAutoscaleFilter(String hostGroupName) {\n+        String lowerCaseName = hostGroupName.toLowerCase();\n+        return lowerCaseName.contains(\"compute\")\n+                || lowerCaseName.contains(\"gateway\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUwMzQzMA=="}, "originalCommit": {"oid": "5b07e74f8115a6232c571a3397d497694025b00a"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTY0OTU0OnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDowNTo0M1rOGZGtNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDozMDowN1rOGZHF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3NzQ2MQ==", "bodyText": "All of these will likely need to be qualified as ServiceName.RoleName at some point.\ne.g. Both HDFS and YARN have a Role called 'GATEWAY' - and I'm guessing other services do as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428977461", "createdAt": "2020-05-22T00:05:43Z", "author": {"login": "sidseth"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {\n+    DATANODE,\n+    ZEPPELIN_SERVER,\n+    KAFKA_BROKER,\n+    NIFI_NODE,\n+    NAMENODE,\n+    // This is counter intuitive. Gateway and compute host groups have identical GATEWAY roles. So compute host group will be blacklisted initially.\n+    // The fallback filter will add only compute host group for load based auto-scale role.\n+    GATEWAY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MzgwNg==", "bodyText": "Yup, GATEWAY wipes off everything from the slate, rendering the service-based logic meaningless.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428983806", "createdAt": "2020-05-22T00:30:07Z", "author": {"login": "cegganesh84"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {\n+    DATANODE,\n+    ZEPPELIN_SERVER,\n+    KAFKA_BROKER,\n+    NIFI_NODE,\n+    NAMENODE,\n+    // This is counter intuitive. Gateway and compute host groups have identical GATEWAY roles. So compute host group will be blacklisted initially.\n+    // The fallback filter will add only compute host group for load based auto-scale role.\n+    GATEWAY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3NzQ2MQ=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTY2NjQxOnYy", "diffSide": "RIGHT", "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoxNToyOFrOGZG3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMDoyNzo1MVrOGcLDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw==", "bodyText": "Using a blacklist will need all services from CM to be added in here; or make a new release of CB when we add new services.\nIf I'm not mistaken, with this set of services - the OperationDB (HBase) clusters will qualify for both Time and Load based AutoScaling.\nA Whitelist is an alternate, which comes with its own set of problems. i.e. if \"NODEMANAGER\" is the only role there, the GATEWAY roles that go along with the NODEMANAGER in a hostgroup will cause trouble.\nMaybe the GATEWAYs just need to be removed from processing. i.e. A GATEWAY (unless it is special) does not block a whitelisted role from being scaled, or in case of BLACKLISTING - GATEWAY roles are just filtered out. If that leads to no roles left for a hostGroup - the hostGroup is not scalable (but maybe we should allow this to be time scalable).\nI had a slightly different take on how this would work - based more on a 'Role' -> Capability mechanism - with all roles on a hostGroup combined together. A separate enum per capability (this patch) works as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428980067", "createdAt": "2020-05-22T00:15:28Z", "author": {"login": "sidseth"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5MTE1OA==", "bodyText": "Regarding OpDB\n[Gateway, Master, Leader, Worker] of these,\nTime based -> [Gateway, Leader] # Master has NAMENODE and Worker has DATANODE\nLoad based -> [] # Gateway and Leader has GATEWAY\nGeneral problem\nI was thinking of Blacklist filtering, followed by forceful whitelisting. Which is kind of acheived now using the fallback filter, just that it is counter-intuitive.\nWe have two fields in the CM template, roleType, refName. We see the problems with roleType. This is existing implementation for Nifi cluster, which works. However when force fitted into other templates, it struggles. RefName is interesting and what you asked for in the previous comment. NODEMANAGER for worker gets yarn-NODEMANAGER-WORKER and compute gets yarn-NODEMANAGER-COMPUTE. I am not sure if we can rely on this naming, and how it will change for custom templates.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428991158", "createdAt": "2020-05-22T01:00:13Z", "author": {"login": "cegganesh84"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5NDgwOQ==", "bodyText": "roleType is what I was referring to. Service.RoleType fully qualifies an entity.\nYARN.NODEMANAGER\nYARN.GATEWAY\nHDFS.GATEWAY\nYup, OpDB will be handled because of the presence of the DataNode. Think it is easier to reason with 'Scaling supported only for NodeManager'.\nIAC, this works. The API for the UI, and whatever will be added for Periscope, remains unchanged irrespective of blacklist vs whitelist.\nAny thoughts on ignoring GATEWAYs in the processing?\nAlso, do we want to allow schedule policies to be defined for GATEWAY nodes? (What if Hue is running on one of these nodes - is that safe?. Should Hue be in the blacklist?)", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r428994809", "createdAt": "2020-05-22T01:16:14Z", "author": {"login": "sidseth"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NDAyMQ==", "bodyText": "Service.RoleType fully qualifies an entity.\nYARN.NODEMANAGER\n\nFor me it did not. I want to whitelist YARN.NODEMANAGER-COMPUTE. Here compute is placement. If I whitelist YARN.NODEMANAGER then worker is also whitelisted. We can over come that with first blacklist and then whitelist. Remove the ones with DATANODE then add the ones with NODEMANAGER.\nI chose DATANODE over NODEMANAGER for this reason.\n\nAny thoughts on ignoring GATEWAYs in the processing?\n\nYes, it depends on GATEWAY node support.\nWe can ignore GATEWAY nodes if it simplifies things. Hue is not a blocker, it can scale well. The Knox topology does not change. Hue sits behind CM controlled load-balancer. DAS, and Livy could be added as blacklists. Since we have not thought through this, we can ignore it for now.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r429074021", "createdAt": "2020-05-22T06:54:41Z", "author": {"login": "cegganesh84"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ1MDE1Mg==", "bodyText": "YARN.NODEMANAGER-COMPUTE is a dynamic name, and can be renamed to anything in a custom template. Think you mentioned that further up as well. YARN.NODEMANAGER, however, is determined by CM.\nWe are not going to be testing gateway node auto-scaling. Also, I don't think we're allowing more than one autoScaling policy for a cluster at the moment. Think it is better to make sure the GATEWAY is not auto-scalable for the moment. There's also limited value in this, since the hostnames will change each time a scale operation is run.\nSo - we're going with a BLACKLIST for now, and trying to put enough in there to ensure that only the compute group can be automatically scaled.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r429450152", "createdAt": "2020-05-22T21:02:31Z", "author": {"login": "sidseth"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzMTQ2OA==", "bodyText": "Does it make sense to disable 'gateway' hosts from AutoScaling?, since we are not testing them.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r431631468", "createdAt": "2020-05-28T07:21:39Z", "author": {"login": "sidseth"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5NDUwNA==", "bodyText": "Yep, I will remove both gateway role and gateway node group.", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r432194504", "createdAt": "2020-05-29T00:27:51Z", "author": {"login": "cegganesh84"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/BlackListedLoadBasedAutoscaleRole.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sequenceiq.cloudbreak.cmtemplate;\n+\n+public enum BlackListedLoadBasedAutoscaleRole {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MDA2Nw=="}, "originalCommit": {"oid": "ec21277bfa4a6a628228de47979c328d757d0a38"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjE2ODE1OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/connector/responses/AutoscaleRecommendationV4Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxMzoyM1rOGds8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxMzoyM1rOGds8eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5ODI2Ng==", "bodyText": "Set.copyOf, below line as well please", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r433798266", "createdAt": "2020-06-02T11:13:23Z", "author": {"login": "bergerdenes"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/connector/responses/AutoscaleRecommendationV4Response.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.connector.responses;\n+\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.common.model.JsonEntity;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class AutoscaleRecommendationV4Response implements JsonEntity {\n+\n+    private final Set<String> timeBasedHostGroups;\n+\n+    private final Set<String> loadBasedHostGroups;\n+\n+    public AutoscaleRecommendationV4Response(Set<String> timeBasedHostGroups, Set<String> loadBasedHostGroups) {\n+        this.timeBasedHostGroups = timeBasedHostGroups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01e264abe83b6922f2c38af61ec565f91715dd0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjE2OTU3OnYy", "diffSide": "RIGHT", "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/connector/responses/ResizeRecommendationV4Response.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxMzo1NFrOGds9bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMToxMzo1NFrOGds9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5ODUwOA==", "bodyText": "Set.copyOf, below line as well please", "url": "https://github.com/hortonworks/cloudbreak/pull/8100#discussion_r433798508", "createdAt": "2020-06-02T11:13:54Z", "author": {"login": "bergerdenes"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/connector/responses/ResizeRecommendationV4Response.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.connector.responses;\n+\n+import java.util.Set;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.common.model.JsonEntity;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ResizeRecommendationV4Response implements JsonEntity {\n+\n+    private final Set<String> scaleUpHostGroups;\n+\n+    private final Set<String> scaleDownHostGroups;\n+\n+    public ResizeRecommendationV4Response(Set<String> scaleUpHostGroups, Set<String> scaleDownHostGroups) {\n+        this.scaleUpHostGroups = scaleUpHostGroups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f01e264abe83b6922f2c38af61ec565f91715dd0"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3336, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}