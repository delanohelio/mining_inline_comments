{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTA4MDMx", "number": 9518, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0MTowMlrOE9jdHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyNToxNlrOE_FAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTc5NDg2OnYy", "diffSide": "RIGHT", "path": "mock-thunderhead/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0MTowMlrOH6TTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTowMDo0OFrOH6lXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NTczMA==", "bodyText": "My recommendation is to make it false by default. We'll enable it once we have a reserved disk for it.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530895730", "createdAt": "2020-11-26T09:41:02Z", "author": {"login": "keyki"}, "path": "mock-thunderhead/src/main/resources/application.yml", "diffHunk": "@@ -33,3 +33,4 @@ auth:\n     differentdatahubversionthandatalake.enabled: true\n     database.wire.encryption.enable: true\n     datahub.runtime.upgrade.enable: true\n+    embedded.database.on.attached.disk.enable: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNzI0OA==", "bodyText": "even for the mock?", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530927248", "createdAt": "2020-11-26T10:29:00Z", "author": {"login": "lacikaaa"}, "path": "mock-thunderhead/src/main/resources/application.yml", "diffHunk": "@@ -33,3 +33,4 @@ auth:\n     differentdatahubversionthandatalake.enabled: true\n     database.wire.encryption.enable: true\n     datahub.runtime.upgrade.enable: true\n+    embedded.database.on.attached.disk.enable: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NTczMA=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyOTkxMA==", "bodyText": "mock means everyone who is developing CB. If you say it's fine we can try with true (at least people are going to test it without knowing it :) )", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530929910", "createdAt": "2020-11-26T10:33:10Z", "author": {"login": "keyki"}, "path": "mock-thunderhead/src/main/resources/application.yml", "diffHunk": "@@ -33,3 +33,4 @@ auth:\n     differentdatahubversionthandatalake.enabled: true\n     database.wire.encryption.enable: true\n     datahub.runtime.upgrade.enable: true\n+    embedded.database.on.attached.disk.enable: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NTczMA=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MTc0OQ==", "bodyText": "Default value has set to false", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r531191749", "createdAt": "2020-11-26T19:00:48Z", "author": {"login": "schfeca75"}, "path": "mock-thunderhead/src/main/resources/application.yml", "diffHunk": "@@ -33,3 +33,4 @@ auth:\n     differentdatahubversionthandatalake.enabled: true\n     database.wire.encryption.enable: true\n     datahub.runtime.upgrade.enable: true\n+    embedded.database.on.attached.disk.enable: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NTczMA=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgwMzg0OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0MzoxNVrOH6TZBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTowMTo0MFrOH6lYqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NzE1Ng==", "bodyText": "Will it work for None? None is considered false?", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530897156", "createdAt": "2020-11-26T09:43:15Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTQ5OQ==", "bodyText": "in theory this is always set if no remote db is configured. But would be safer to include None", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530931499", "createdAt": "2020-11-26T10:35:39Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NzE1Ng=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MTk3Nw==", "bodyText": "Using 'False; as default value in the beginning of the sls file", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r531191977", "createdAt": "2020-11-26T19:01:40Z", "author": {"login": "schfeca75"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5NzE1Ng=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTgxNDgyOnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NTo0OFrOH6Tf0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NTo0OFrOH6Tf0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5ODg5OQ==", "bodyText": "Take a look at https://github.com/hortonworks/cloudbreak/blob/master/freeipa/src/main/resources/freeipa-salt/salt/freeipa/services.sls on how you can figure out service unit files.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530898899", "createdAt": "2020-11-26T09:45:48Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}\n+\n+change-db-location:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAyMjg1OnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNTo1NFrOH6Vftw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTowMjowM1rOH6lZPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTYzOQ==", "bodyText": "On Ycloud we don't have any disks at all. In that case our generation will result in /hadoopfs/root1 instead of /hadoopfs/fs1 so assuming 1 might not going to work. What I'm trying to say is that the location should also come from pillar so when we introduce a reserved disk we don't have to change the salt files just the pillar location will be different.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530931639", "createdAt": "2020-11-26T10:35:54Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}\n+\n+change-db-location:\n+  file.replace:\n+    - name: /usr/lib/systemd/system/postgresql-10.service\n+    - pattern: \"Environment=PGDATA=.*\"\n+    - repl: Environment=PGDATA=/hadoopfs/fs1/pgsql/data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0MzAyNQ==", "bodyText": "this repl value is wrong, the unless checks for the directory calculated on java side while this is hard coded: {{ postgres_data_directory }}", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530943025", "createdAt": "2020-11-26T10:54:18Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}\n+\n+change-db-location:\n+  file.replace:\n+    - name: /usr/lib/systemd/system/postgresql-10.service\n+    - pattern: \"Environment=PGDATA=.*\"\n+    - repl: Environment=PGDATA=/hadoopfs/fs1/pgsql/data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTYzOQ=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MjEyNA==", "bodyText": "It was just a copy-paste error.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r531192124", "createdAt": "2020-11-26T19:02:03Z", "author": {"login": "schfeca75"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -24,14 +26,29 @@ init-services-db-remote:\n \n init-db-with-utf8:\n   cmd.run:\n-    - name: rm -rf /var/lib/pgsql/data && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 /var/lib/pgsql/data > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n+    - name: rm -rf {{ postgres_data_directory }} && runuser -l postgres sh -c 'initdb --locale=en_US.UTF-8 {{ postgres_data_directory }} > /var/lib/pgsql/initdb.log' && rm /var/log/pgsql_listen_address_configured\n     - unless: grep -q UTF-8 /var/lib/pgsql/initdb.log\n \n+{%- if postgres_data_on_attached_disk %}\n+\n+change-db-location:\n+  file.replace:\n+    - name: /usr/lib/systemd/system/postgresql-10.service\n+    - pattern: \"Environment=PGDATA=.*\"\n+    - repl: Environment=PGDATA=/hadoopfs/fs1/pgsql/data", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTYzOQ=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDA5ODY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1NTowNlrOH6WOUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTowMjo0MlrOH6lZ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0MzU3MQ==", "bodyText": "I made some suggestion on slack for refactoring this method", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530943571", "createdAt": "2020-11-26T10:55:06Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "diffHunk": "@@ -56,10 +64,25 @@ public void decorateServicePillarWithPostgresIfNeeded(Map<String, SaltPillarProp\n         Map<String, Object> postgresConfig = new HashMap<>();\n         if (dbServerConfigurer.isRemoteDatabaseNeeded(cluster)) {\n             postgresConfig.put(\"configure_remote_db\", \"true\");\n+        } else {\n+            collectEmbeddedDatabaseConfigs(stack, postgresConfig);\n         }\n         rdsConfigProviderFactory.getAllSupportedRdsConfigProviders().forEach(provider ->\n                 postgresConfig.putAll(provider.createServicePillarConfigMapIfNeeded(stack, cluster)));\n         return postgresConfig;\n     }\n \n+    private void collectEmbeddedDatabaseConfigs(Stack stack, Map<String, Object> postgresConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MjI5NQ==", "bodyText": "Refactored based on what we discussed on slack", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r531192295", "createdAt": "2020-11-26T19:02:42Z", "author": {"login": "schfeca75"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "diffHunk": "@@ -56,10 +64,25 @@ public void decorateServicePillarWithPostgresIfNeeded(Map<String, SaltPillarProp\n         Map<String, Object> postgresConfig = new HashMap<>();\n         if (dbServerConfigurer.isRemoteDatabaseNeeded(cluster)) {\n             postgresConfig.put(\"configure_remote_db\", \"true\");\n+        } else {\n+            collectEmbeddedDatabaseConfigs(stack, postgresConfig);\n         }\n         rdsConfigProviderFactory.getAllSupportedRdsConfigProviders().forEach(provider ->\n                 postgresConfig.putAll(provider.createServicePillarConfigMapIfNeeded(stack, cluster)));\n         return postgresConfig;\n     }\n \n+    private void collectEmbeddedDatabaseConfigs(Stack stack, Map<String, Object> postgresConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0MzU3MQ=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDEwNjIzOnYy", "diffSide": "RIGHT", "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1Njo1OVrOH6WS8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxOTowMzowOFrOH6laSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NDc1Mg==", "bodyText": "default should be false and not None, shouldn't it?", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530944752", "createdAt": "2020-11-26T10:56:59Z", "author": {"login": "lacikaaa"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -1,6 +1,8 @@\n {%- from 'metadata/settings.sls' import metadata with context %}\n \n {% set configure_remote_db = salt['pillar.get']('postgres:configure_remote_db', 'None') %}\n+{% set postgres_data_directory = salt['pillar.get']('postgres:postgres_data_directory') %}\n+{% set postgres_data_on_attached_disk = salt['pillar.get']('postgres:postgres_data_on_attached_disk', 'None') %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk2MTU3Mg==", "bodyText": "Yes, that would answer my next question in the if condition.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530961572", "createdAt": "2020-11-26T11:26:00Z", "author": {"login": "keyki"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -1,6 +1,8 @@\n {%- from 'metadata/settings.sls' import metadata with context %}\n \n {% set configure_remote_db = salt['pillar.get']('postgres:configure_remote_db', 'None') %}\n+{% set postgres_data_directory = salt['pillar.get']('postgres:postgres_data_directory') %}\n+{% set postgres_data_on_attached_disk = salt['pillar.get']('postgres:postgres_data_on_attached_disk', 'None') %}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NDc1Mg=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5MjM5NQ==", "bodyText": "Default value has set to 'False'", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r531192395", "createdAt": "2020-11-26T19:03:08Z", "author": {"login": "schfeca75"}, "path": "orchestrator-salt/src/main/resources/salt/salt/postgresql/init.sls", "diffHunk": "@@ -1,6 +1,8 @@\n {%- from 'metadata/settings.sls' import metadata with context %}\n \n {% set configure_remote_db = salt['pillar.get']('postgres:configure_remote_db', 'None') %}\n+{% set postgres_data_directory = salt['pillar.get']('postgres:postgres_data_directory') %}\n+{% set postgres_data_on_attached_disk = salt['pillar.get']('postgres:postgres_data_on_attached_disk', 'None') %}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NDc1Mg=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDExMTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo1ODoyNlrOH6WWSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNjozNFrOH8Je9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NTYxMA==", "bodyText": "to reflect on this: https://github.com/hortonworks/cloudbreak/pull/9518/files#r530931639\nI think this condition should be false on YCloud and only enable this for real cloud providers", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r530945610", "createdAt": "2020-11-26T10:58:26Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "diffHunk": "@@ -56,10 +64,25 @@ public void decorateServicePillarWithPostgresIfNeeded(Map<String, SaltPillarProp\n         Map<String, Object> postgresConfig = new HashMap<>();\n         if (dbServerConfigurer.isRemoteDatabaseNeeded(cluster)) {\n             postgresConfig.put(\"configure_remote_db\", \"true\");\n+        } else {\n+            collectEmbeddedDatabaseConfigs(stack, postgresConfig);\n         }\n         rdsConfigProviderFactory.getAllSupportedRdsConfigProviders().forEach(provider ->\n                 postgresConfig.putAll(provider.createServicePillarConfigMapIfNeeded(stack, cluster)));\n         return postgresConfig;\n     }\n \n+    private void collectEmbeddedDatabaseConfigs(Stack stack, Map<String, Object> postgresConfig) {\n+        String databaseDirectory = \"/var/lib/pgsql/data\";\n+        boolean databaseDirectoryOnAttachedDisk = false;\n+        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(INTERNAL_ACTOR_CRN, ThreadBasedUserCrnProvider.getAccountId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMTk5MA==", "bodyText": "Embedded database on attached disk will only be enabled next to the entitlement, if there are attached disks.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r532831990", "createdAt": "2020-11-30T19:06:34Z", "author": {"login": "schfeca75"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/PostgresConfigService.java", "diffHunk": "@@ -56,10 +64,25 @@ public void decorateServicePillarWithPostgresIfNeeded(Map<String, SaltPillarProp\n         Map<String, Object> postgresConfig = new HashMap<>();\n         if (dbServerConfigurer.isRemoteDatabaseNeeded(cluster)) {\n             postgresConfig.put(\"configure_remote_db\", \"true\");\n+        } else {\n+            collectEmbeddedDatabaseConfigs(stack, postgresConfig);\n         }\n         rdsConfigProviderFactory.getAllSupportedRdsConfigProviders().forEach(provider ->\n                 postgresConfig.putAll(provider.createServicePillarConfigMapIfNeeded(stack, cluster)));\n         return postgresConfig;\n     }\n \n+    private void collectEmbeddedDatabaseConfigs(Stack stack, Map<String, Object> postgresConfig) {\n+        String databaseDirectory = \"/var/lib/pgsql/data\";\n+        boolean databaseDirectoryOnAttachedDisk = false;\n+        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(INTERNAL_ACTOR_CRN, ThreadBasedUserCrnProvider.getAccountId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0NTYxMA=="}, "originalCommit": {"oid": "1092d602d82f6d17cb50328b4d127cb2fa90cbf6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzcwOTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/EmbeddedDatabaseConfigProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxOTo1NDozOVrOH7cy_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTowNzoxNVrOH8JgiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTgzNw==", "bodyText": "On YCloud it is going to be 0, right? And will be resolved as /hadoopfs/root1 ?", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r532099837", "createdAt": "2020-11-28T19:54:39Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/EmbeddedDatabaseConfigProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.cloudbreak.core.bootstrap.service.container.postgres;\n+\n+import static com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider.INTERNAL_ACTOR_CRN;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.auth.altus.model.Entitlement;\n+import com.sequenceiq.cloudbreak.domain.Template;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.template.VolumeUtils;\n+\n+@Component\n+public class EmbeddedDatabaseConfigProvider {\n+    public static final String POSTGRES_DIRECTORY_KEY = \"postgres_directory\";\n+\n+    public static final String POSTGRES_LOG_DIRECTORY_KEY = \"postgres_log_directory\";\n+\n+    public static final String POSTGRES_DATA_ON_ATTACHED_DISK_KEY = \"postgres_data_on_attached_disk\";\n+\n+    public static final String POSTGRES_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql\";\n+\n+    public static final String POSTGRES_LOG_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql/log\";\n+\n+    public static final String POSTGRES_DEFAULT_DIRECTORY = \"/var/lib/pgsql\";\n+\n+    public static final String POSTGRES_DEFAULT_LOG_DIRECTORY = \"/var/log\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddedDatabaseConfigProvider.class);\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    public Map<String, Object> collectEmbeddedDatabaseConfigs(Stack stack) {\n+        Map<String, Object> result;\n+        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(INTERNAL_ACTOR_CRN, ThreadBasedUserCrnProvider.getAccountId())) {\n+            LOGGER.info(\"Attached disk will be used to store data for postgres sql server, as '{}' entitlement is enabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = createEmbeddedDbOnAttachedDiskConfig(stack);\n+        } else {\n+            LOGGER.info(\"Default settings for data storage will be used for postgres sql server, as '{}' entitlement is disabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = Map.of(\n+                    POSTGRES_DIRECTORY_KEY, POSTGRES_DEFAULT_DIRECTORY,\n+                    POSTGRES_LOG_DIRECTORY_KEY, POSTGRES_DEFAULT_LOG_DIRECTORY,\n+                    POSTGRES_DATA_ON_ATTACHED_DISK_KEY, false);\n+        }\n+        LOGGER.debug(\"Embedded Postgres sql server pillar parameters: {}\", result);\n+        return result;\n+    }\n+\n+    private Map<String, Object> createEmbeddedDbOnAttachedDiskConfig(Stack stack) {\n+        Template template = stack.getPrimaryGatewayInstance().getInstanceGroup().getTemplate();\n+        int volumeCount = template == null ? 1 : template.getVolumeTemplates().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67113bbe1b4c1281c2eaad8c1322259178808fc0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE3NTU2Mg==", "bodyText": "I checked and it is correct, but fails anyway since the /hadoopfs/root1 folder does not exist.  I think if there are 0 attached volumes we should use the original place instead of the /hadoopfs.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r532175562", "createdAt": "2020-11-29T08:39:16Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/EmbeddedDatabaseConfigProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.cloudbreak.core.bootstrap.service.container.postgres;\n+\n+import static com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider.INTERNAL_ACTOR_CRN;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.auth.altus.model.Entitlement;\n+import com.sequenceiq.cloudbreak.domain.Template;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.template.VolumeUtils;\n+\n+@Component\n+public class EmbeddedDatabaseConfigProvider {\n+    public static final String POSTGRES_DIRECTORY_KEY = \"postgres_directory\";\n+\n+    public static final String POSTGRES_LOG_DIRECTORY_KEY = \"postgres_log_directory\";\n+\n+    public static final String POSTGRES_DATA_ON_ATTACHED_DISK_KEY = \"postgres_data_on_attached_disk\";\n+\n+    public static final String POSTGRES_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql\";\n+\n+    public static final String POSTGRES_LOG_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql/log\";\n+\n+    public static final String POSTGRES_DEFAULT_DIRECTORY = \"/var/lib/pgsql\";\n+\n+    public static final String POSTGRES_DEFAULT_LOG_DIRECTORY = \"/var/log\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddedDatabaseConfigProvider.class);\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    public Map<String, Object> collectEmbeddedDatabaseConfigs(Stack stack) {\n+        Map<String, Object> result;\n+        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(INTERNAL_ACTOR_CRN, ThreadBasedUserCrnProvider.getAccountId())) {\n+            LOGGER.info(\"Attached disk will be used to store data for postgres sql server, as '{}' entitlement is enabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = createEmbeddedDbOnAttachedDiskConfig(stack);\n+        } else {\n+            LOGGER.info(\"Default settings for data storage will be used for postgres sql server, as '{}' entitlement is disabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = Map.of(\n+                    POSTGRES_DIRECTORY_KEY, POSTGRES_DEFAULT_DIRECTORY,\n+                    POSTGRES_LOG_DIRECTORY_KEY, POSTGRES_DEFAULT_LOG_DIRECTORY,\n+                    POSTGRES_DATA_ON_ATTACHED_DISK_KEY, false);\n+        }\n+        LOGGER.debug(\"Embedded Postgres sql server pillar parameters: {}\", result);\n+        return result;\n+    }\n+\n+    private Map<String, Object> createEmbeddedDbOnAttachedDiskConfig(Stack stack) {\n+        Template template = stack.getPrimaryGatewayInstance().getInstanceGroup().getTemplate();\n+        int volumeCount = template == null ? 1 : template.getVolumeTemplates().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTgzNw=="}, "originalCommit": {"oid": "67113bbe1b4c1281c2eaad8c1322259178808fc0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgzMjM5Mg==", "bodyText": "Embedded database on attached disk will only be enabled next to the entitlement, if there are attached disks.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r532832392", "createdAt": "2020-11-30T19:07:15Z", "author": {"login": "schfeca75"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/container/postgres/EmbeddedDatabaseConfigProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.cloudbreak.core.bootstrap.service.container.postgres;\n+\n+import static com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider.INTERNAL_ACTOR_CRN;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+import com.sequenceiq.cloudbreak.auth.altus.model.Entitlement;\n+import com.sequenceiq.cloudbreak.domain.Template;\n+import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.template.VolumeUtils;\n+\n+@Component\n+public class EmbeddedDatabaseConfigProvider {\n+    public static final String POSTGRES_DIRECTORY_KEY = \"postgres_directory\";\n+\n+    public static final String POSTGRES_LOG_DIRECTORY_KEY = \"postgres_log_directory\";\n+\n+    public static final String POSTGRES_DATA_ON_ATTACHED_DISK_KEY = \"postgres_data_on_attached_disk\";\n+\n+    public static final String POSTGRES_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql\";\n+\n+    public static final String POSTGRES_LOG_SUBDIRECTORY_ON_ATTACHED_DISK = \"pgsql/log\";\n+\n+    public static final String POSTGRES_DEFAULT_DIRECTORY = \"/var/lib/pgsql\";\n+\n+    public static final String POSTGRES_DEFAULT_LOG_DIRECTORY = \"/var/log\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddedDatabaseConfigProvider.class);\n+\n+    @Inject\n+    private EntitlementService entitlementService;\n+\n+    public Map<String, Object> collectEmbeddedDatabaseConfigs(Stack stack) {\n+        Map<String, Object> result;\n+        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(INTERNAL_ACTOR_CRN, ThreadBasedUserCrnProvider.getAccountId())) {\n+            LOGGER.info(\"Attached disk will be used to store data for postgres sql server, as '{}' entitlement is enabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = createEmbeddedDbOnAttachedDiskConfig(stack);\n+        } else {\n+            LOGGER.info(\"Default settings for data storage will be used for postgres sql server, as '{}' entitlement is disabled\",\n+                    Entitlement.CDP_EMBEDDED_DATABASE_ON_ATTACHED_DISK);\n+            result = Map.of(\n+                    POSTGRES_DIRECTORY_KEY, POSTGRES_DEFAULT_DIRECTORY,\n+                    POSTGRES_LOG_DIRECTORY_KEY, POSTGRES_DEFAULT_LOG_DIRECTORY,\n+                    POSTGRES_DATA_ON_ATTACHED_DISK_KEY, false);\n+        }\n+        LOGGER.debug(\"Embedded Postgres sql server pillar parameters: {}\", result);\n+        return result;\n+    }\n+\n+    private Map<String, Object> createEmbeddedDbOnAttachedDiskConfig(Stack stack) {\n+        Template template = stack.getPrimaryGatewayInstance().getInstanceGroup().getTemplate();\n+        int volumeCount = template == null ? 1 : template.getVolumeTemplates().stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5OTgzNw=="}, "originalCommit": {"oid": "67113bbe1b4c1281c2eaad8c1322259178808fc0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTY3ODk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/EmbeddedDatabaseService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoxMToxMlrOH8kTGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoxMToxMlrOH8kTGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI3MTMyMQ==", "bodyText": "This could be simplified by passing the volume count only and calculate the true/false in the constructor. This would reduce the code duplication as well.", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r533271321", "createdAt": "2020-12-01T10:11:12Z", "author": {"login": "keyki"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/cluster/EmbeddedDatabaseService.java", "diffHunk": "@@ -1,26 +1,48 @@\n package com.sequenceiq.cloudbreak.service.cluster;\n \n+import java.util.Optional;\n+\n import javax.inject.Inject;\n \n+import org.apache.commons.lang3.ObjectUtils;\n import org.springframework.stereotype.Component;\n \n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request.database.DatabaseAvailabilityType;\n import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n import com.sequenceiq.cloudbreak.domain.Template;\n import com.sequenceiq.cloudbreak.domain.stack.Stack;\n+import com.sequenceiq.cloudbreak.domain.stack.instance.InstanceGroup;\n+import com.sequenceiq.common.api.type.InstanceGroupType;\n \n @Component\n public class EmbeddedDatabaseService {\n     @Inject\n     private EntitlementService entitlementService;\n \n     public EmbeddedDatabaseInfo getEmbeddedDatabaseInfo(String actorCrn, String accountId, Stack stack) {\n-        if (entitlementService.embeddedDatabaseOnAttachedDiskEnabled(actorCrn, accountId)) {\n-            Template template = stack.getPrimaryGatewayInstance().getInstanceGroup().getTemplate();\n-            int volumeCount = template == null ? 0 : template.getVolumeTemplates().stream()\n-                    .mapToInt(volume -> volume.getVolumeCount()).sum();\n+        DatabaseAvailabilityType externalDatabase = ObjectUtils.defaultIfNull(stack.getExternalDatabaseCreationType(), DatabaseAvailabilityType.NONE);\n+        if (DatabaseAvailabilityType.NONE == externalDatabase && entitlementService.embeddedDatabaseOnAttachedDiskEnabled(actorCrn, accountId)) {\n+            int volumeCount = calculateVolumeCountOnGatewayGroup(stack);\n             return new EmbeddedDatabaseInfo(volumeCount > 0, volumeCount);\n         } else {\n             return new EmbeddedDatabaseInfo(false, 0);\n         }\n     }\n+\n+    public EmbeddedDatabaseInfo getEmbeddedDatabaseInfo(Stack stack) {\n+        if (stack.getCluster().getEmbeddedDatabaseOnAttachedDisk()) {\n+            int volumeCount = calculateVolumeCountOnGatewayGroup(stack);\n+            return new EmbeddedDatabaseInfo(volumeCount > 0, volumeCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c42dad0bb701110ba29ab6e7bd8ec09db4fc020"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NTc3ODAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/schema/app/20201130155647_CB-9580_new_field_on_cluster:_embedded_db_is_configured_on_attached_disk_or_not.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyNToxNlrOH8lUSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMDoyNToxNlrOH8lUSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI4ODAwOA==", "bodyText": "This is the way to add a new column with a default value: https://dba.stackexchange.com/questions/60965/does-postgresql-optimize-adding-columns-with-non-null-defaults/216153#216153", "url": "https://github.com/hortonworks/cloudbreak/pull/9518#discussion_r533288008", "createdAt": "2020-12-01T10:25:16Z", "author": {"login": "keyki"}, "path": "core/src/main/resources/schema/app/20201130155647_CB-9580_new_field_on_cluster:_embedded_db_is_configured_on_attached_disk_or_not.sql", "diffHunk": "@@ -0,0 +1,9 @@\n+-- // CB-9580 new field on cluster: embedded db is configured on attached disk or not\n+-- Migration SQL that makes the change goes here.\n+\n+ALTER TABLE cluster ADD COLUMN IF NOT EXISTS embeddeddatabaseonattacheddisk boolean NOT NULL DEFAULT FALSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c42dad0bb701110ba29ab6e7bd8ec09db4fc020"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3528, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}