{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MzU5Nzk1", "number": 8607, "title": "CB-7425 If I try to delete in batch, should not fail on the first error", "bodyText": "Credential deletion can fail so if user initiate multiple delete then we will try to delete the next element as well\nSee detailed description in the commit message.", "createdAt": "2020-07-21T10:25:06Z", "url": "https://github.com/hortonworks/cloudbreak/pull/8607", "merged": true, "mergeCommit": {"oid": "140ab27b8ab5dfdbcab5ee942bfa4a921a758d69"}, "closed": true, "closedAt": "2020-07-21T12:54:48Z", "author": {"login": "doktoric"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3DnL5AH2gAyNDU0MzU5Nzk1OjAwYzJhNjA5ZWYzMzAzNzEzYzE5MDc3ODY1MjFiMjFiNjdjOWViNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3D77CgFqTQ1MjMzODU1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "00c2a609ef3303713c1907786521b21b67c9eb4f", "author": {"user": {"login": "doktoric", "name": "Richard Doktorics"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/00c2a609ef3303713c1907786521b21b67c9eb4f", "committedDate": "2020-07-21T10:24:26Z", "message": "CB-7425 If I try to delete in batch, should not fail on the first error\n\nCredential deletion can fail so if user initiate multiple delete then we will try to delete the next element as well"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzI2NDc0", "url": "https://github.com/hortonworks/cloudbreak/pull/8607#pullrequestreview-452326474", "createdAt": "2020-07-21T10:27:54Z", "commit": {"oid": "00c2a609ef3303713c1907786521b21b67c9eb4f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOG0x3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyNzo1NVrOG0x3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjA4Mw==", "bodyText": "change the order of deletion so exception should occur first, then delete after", "url": "https://github.com/hortonworks/cloudbreak/pull/8607#discussion_r457996083", "createdAt": "2020-07-21T10:27:55Z", "author": {"login": "bergerdenes"}, "path": "environment/src/test/java/com/sequenceiq/environment/credential/service/CredentialDeleteServiceTest.java", "diffHunk": "@@ -98,27 +95,40 @@ void testMultipleIfAllTheCredentialsAreExistsAndAbleToArchiveThenExpectedCredent\n     @Test\n     void testMultipleIfOneOfTheCredentialsIsNotExistsThenNotFoundExceptionComes() {\n         when(credentialService.findByNameAndAccountId(anyString(), anyString(), any(Set.class), any())).thenReturn(Optional.empty());\n-        assertThrows(NotFoundException.class, () -> underTest.deleteMultiple(Set.of(\"someCredNameWhichDoesNotExists\"), ACCOUNT_ID, ENVIRONMENT));\n+        Set<Credential> result = underTest.deleteMultiple(Set.of(\"someCredNameWhichDoesNotExists\"), ACCOUNT_ID, ENVIRONMENT);\n \n         verify(credentialService, times(1)).findByNameAndAccountId(anyString(), anyString(), anyCollection(), any());\n         verify(environmentViewService, times(0)).findAllByCredentialId(anyLong());\n         verify(credentialService, times(0)).save(any());\n+        assertTrue(result.isEmpty());\n     }\n \n     @Test\n-    void testMultipleWhenEnvironmentStillUsesTheCredentialThenBadRequestShouldCome() {\n-        String name = \"something\";\n-        Credential cred = createCredentialWithName(name);\n-        cred.setId(1L);\n-        when(credentialService.findByNameAndAccountId(eq(name), eq(ACCOUNT_ID), any(Set.class), any())).thenReturn(Optional.of(cred));\n-        when(environmentViewService.findAllByCredentialId(cred.getId())).thenReturn(Set.of(new EnvironmentView()));\n+    void testMultipleWhenEnvironmentStillUsesTheCredential2ThenBadRequestShouldComeOnSecondButTheFirstDeletionSuccess() {\n+        doNothing().when(grpcUmsClient).notifyResourceDeleted(any(), any());\n+        String name1 = \"something1\";\n+        Credential cred1 = createCredentialWithName(name1);\n+        cred1.setId(1L);\n+        when(credentialService.findByNameAndAccountId(eq(name1), eq(ACCOUNT_ID), any(Set.class), any())).thenReturn(Optional.of(cred1));\n+        when(credentialService.save(any())).thenReturn(cred1);\n \n-        assertThrows(BadRequestException.class, () -> underTest.deleteMultiple(Set.of(name), ACCOUNT_ID, ENVIRONMENT));\n+        String name2 = \"something2\";\n+        Credential cred2 = createCredentialWithName(name2);\n+        cred2.setId(2L);\n+        when(credentialService.findByNameAndAccountId(eq(name2), eq(ACCOUNT_ID), any(Set.class), any()))\n+                .thenThrow(new BadRequestException(\"anything can happen\"));\n \n-        verify(credentialService, times(1)).findByNameAndAccountId(anyString(), anyString(), anyCollection(), any());\n+        when(environmentViewService.findAllByCredentialId(cred1.getId())).thenReturn(Set.of());\n+\n+        Set<Credential> result = underTest.deleteMultiple(Set.of(name1, name2), ACCOUNT_ID, ENVIRONMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c2a609ef3303713c1907786521b21b67c9eb4f"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzM4NTU4", "url": "https://github.com/hortonworks/cloudbreak/pull/8607#pullrequestreview-452338558", "createdAt": "2020-07-21T10:47:05Z", "commit": {"oid": "00c2a609ef3303713c1907786521b21b67c9eb4f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}