{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDkxMDYx", "number": 8820, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMTozOFrOEdi1BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo0MjoxOVrOEdjQBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDE0Nzg4OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMTozOFrOHIwVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozMTozOFrOHIwVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0MjU4NQ==", "bodyText": "Please use this standard library method for file reading:\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/file/Files.html#readString(java.nio.file.Path)", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478942585", "createdAt": "2020-08-28T08:31:38Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDE2Mzg0OnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozNDoxOVrOHIwe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODozNDoxOVrOHIwe9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk0NTAxNA==", "bodyText": "Why not an empty list with List.of()?", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478945014", "createdAt": "2020-08-28T08:34:19Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDIwNDAyOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo0MDoyNlrOHIw2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo0MDoyNlrOHIw2xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MTEwOA==", "bodyText": "Cool, functional, but I guess foundResources.contains(resourceName) will be enough instead of foundResources.stream().anyMatch(resourceName::equals).", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478951108", "createdAt": "2020-08-28T08:40:26Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDIxNzAxOnYy", "diffSide": "RIGHT", "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODo0MjoxOVrOHIw-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQyMDo0MjozOVrOHJT6RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MzA5Ng==", "bodyText": "This is strange. You try to delete credentials, then you immediately say it is failed. Where does this information comes from?", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478953096", "createdAt": "2020-08-28T08:42:19Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()\n+                        .anyMatch(resourceName::equals)) {\n+                    LOG.info(\"{}:{} will be deleted!\", resourceNameType, foundResources.stream()\n+                            .filter(resourceName::equals).findAny().orElse(null));\n+                    switch (resourceNameType) {\n+                        case \"distroxName\":\n+                        case \"stackName\":\n+                            deleteDistrox(getCloudbreakClient(), resourceName);\n+                            break;\n+                        case \"sdxName\":\n+                            deleteSdx(getSdxClient(), resourceName);\n+                            break;\n+                        case \"credentialName\":\n+                            deleteCredential(getEnvironmentClient(), resourceName);\n+                            e2eCleanupFailed.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk2MzU4Nw==", "bodyText": "Answer in the description:\n\nIf the Cleanup finds one or more credential(s) present from the resource JSON at the given tenant, Cleanup exits with error:\nERROR c.s.it.util.cleanup.CleanupUtil [nolabel] - End To End cleanup have been failed, because of credential(s) '[aws-test-1b8a1afafded4daca3e1cc5e9533f37, yarn-test-54daadca706347818431edc9c6b560]' found left behind! after all the found resources have been deleted/terminated.\n\nThis was the requirement:\n\n\"If Cleanup job should terminate / delete any resource after test, that should mean the E2E cleanup was not success. So we should investigate and fix the issue.", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r478963587", "createdAt": "2020-08-28T08:53:26Z", "author": {"login": "aszegedi"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()\n+                        .anyMatch(resourceName::equals)) {\n+                    LOG.info(\"{}:{} will be deleted!\", resourceNameType, foundResources.stream()\n+                            .filter(resourceName::equals).findAny().orElse(null));\n+                    switch (resourceNameType) {\n+                        case \"distroxName\":\n+                        case \"stackName\":\n+                            deleteDistrox(getCloudbreakClient(), resourceName);\n+                            break;\n+                        case \"sdxName\":\n+                            deleteSdx(getSdxClient(), resourceName);\n+                            break;\n+                        case \"credentialName\":\n+                            deleteCredential(getEnvironmentClient(), resourceName);\n+                            e2eCleanupFailed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MzA5Ng=="}, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTExMDc0NQ==", "bodyText": "I see. What about other resources? Don't we expect them to be deleted as well?", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r479110745", "createdAt": "2020-08-28T10:44:26Z", "author": {"login": "foldik"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()\n+                        .anyMatch(resourceName::equals)) {\n+                    LOG.info(\"{}:{} will be deleted!\", resourceNameType, foundResources.stream()\n+                            .filter(resourceName::equals).findAny().orElse(null));\n+                    switch (resourceNameType) {\n+                        case \"distroxName\":\n+                        case \"stackName\":\n+                            deleteDistrox(getCloudbreakClient(), resourceName);\n+                            break;\n+                        case \"sdxName\":\n+                            deleteSdx(getSdxClient(), resourceName);\n+                            break;\n+                        case \"credentialName\":\n+                            deleteCredential(getEnvironmentClient(), resourceName);\n+                            e2eCleanupFailed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MzA5Ng=="}, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyNTQ0NA==", "bodyText": "Credential(s) is(are) the final in the sequence of deleting resources. So we can rest assured if we need to delete any credential from the created ones, that means the related E2E job cleanup was not successful.\nWe can sure the final deletable resource from the list is the credential. If we need to delete any listed credential from the resources Json file, we need to investigate the related E2E build:\n\nWhat was happened at the Cleanup phase? Is this started at the end of the test execution?\nWhy the E2E cleanup cannot fulfil its goal?\n\nIn this situation the amount and type (distrox, sdx, environment, credential) of the remained resources are not important for the Cleanup App. The fact: we found deletable resource(s) is the vital information and need to highlight for reviewers.", "url": "https://github.com/hortonworks/cloudbreak/pull/8820#discussion_r479525444", "createdAt": "2020-08-28T20:42:39Z", "author": {"login": "aszegedi"}, "path": "integration-test/src/main/java/com/sequenceiq/it/util/cleanup/CleanupUtil.java", "diffHunk": "@@ -172,21 +191,213 @@ public void cleanupCredentials() {\n         return sdxNames;\n     }\n \n-    private void deleteEnvironments(Set<String> environmentNames, EnvironmentClient environmentClient) {\n-        environmentNames.forEach(environmentName -> LOG.info(\"Environment with name: {} will be deleted!\", environmentName));\n+    private List<String> getResourcesFromFile(String resourceNameType, Path filePath) {\n+        List<String> resourceNames = new ArrayList<>();\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath.toString()))) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line);\n+            }\n+            JSONObject jsonObject = new JSONObject(builder.toString());\n+            if (jsonObject.has(resourceNameType)) {\n+                try {\n+                    JSONArray resources = jsonObject.getJSONArray(resourceNameType);\n+                    for (int i = 0; i < resources.length(); i++) {\n+                        String resource = resources.getString(i);\n+                        resourceNames.add(resource);\n+                        LOG.info(\"Get '{}' JSON array '{}' element from resource file with: '{}'.\", resourceNameType, i, resource);\n+                    }\n+                } catch (JSONException e) {\n+                    String resource = jsonObject.getString(resourceNameType);\n+                    resourceNames.add(resource);\n+                    LOG.info(\"Get '{}' JSON object from resource file with: '{}'.\", resourceNameType, resource);\n+                }\n+            } else {\n+                LOG.error(\"Cannot find '{}' in resource file '{}'.\", resourceNameType, filePath.getFileName());\n+            }\n+            return resourceNames;\n+        } catch (JSONException e) {\n+            LOG.warn(\"Cannot get '{}' key, because of: {}\", resourceNameType, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (FileNotFoundException e) {\n+            LOG.warn(\"'{}' file not found, because of: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        } catch (IOException e) {\n+            LOG.warn(\"Reading '{}' file throws exception: {}\", filePath, e.getMessage(), e);\n+            return resourceNames;\n+        }\n+    }\n+\n+    private void deleteResources(List<String> foundResources, String resourceNameType) {\n+        List<Path> fileList = new ArrayList<>();\n+        List<String> deletedCredentials = new ArrayList<>();\n+        AtomicBoolean e2eCleanupFailed = new AtomicBoolean(false);\n+\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(outputDirectory))) {\n+            for (Path path : stream) {\n+                String fileName = path.getFileName().toString();\n+                if (fileName.startsWith(\"resource_names\") && fileName.endsWith(\".json\")) {\n+                    LOG.info(\"Found resource file: '{}' is going to be added to resource files' list\", path.getFileName().toAbsolutePath().normalize());\n+                    fileList.add(path);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Cannot find resource file at path: '{}', because of: {}\", Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage(), e);\n+            throw new RuntimeException(String.format(\"Cannot find resource file at path: '%s', because of: %s\",\n+                    Paths.get(outputDirectory).toAbsolutePath().normalize(), e.getMessage()));\n+        }\n+        fileList.forEach(filePath -> {\n+            LOG.info(\"Processing resource file: '{}'\", filePath.getFileName());\n+            List<String> resourcesName = Optional.ofNullable(getResourcesFromFile(resourceNameType, filePath))\n+                    .orElse(List.of(\"\"));\n+            resourcesName.forEach(resourceName -> {\n+                if (foundResources.stream()\n+                        .anyMatch(resourceName::equals)) {\n+                    LOG.info(\"{}:{} will be deleted!\", resourceNameType, foundResources.stream()\n+                            .filter(resourceName::equals).findAny().orElse(null));\n+                    switch (resourceNameType) {\n+                        case \"distroxName\":\n+                        case \"stackName\":\n+                            deleteDistrox(getCloudbreakClient(), resourceName);\n+                            break;\n+                        case \"sdxName\":\n+                            deleteSdx(getSdxClient(), resourceName);\n+                            break;\n+                        case \"credentialName\":\n+                            deleteCredential(getEnvironmentClient(), resourceName);\n+                            e2eCleanupFailed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODk1MzA5Ng=="}, "originalCommit": {"oid": "98ced8dd754f7762489c7d0601f00ed150a7d19d"}, "originalPosition": 303}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2403, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}