{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzk5MzQ0", "number": 9071, "title": "CB-8947-filter-structured-event", "bodyText": "See detailed description in the commit message.", "createdAt": "2020-09-23T13:53:50Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9071", "merged": true, "mergeCommit": {"oid": "0f045d155ba32ec1c30c8de8fc1cf60b77c72adc"}, "closed": true, "closedAt": "2020-09-24T11:15:10Z", "author": {"login": "topolyai5"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLtV9dgBqjM3OTgzODA3MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdL-87cAFqTQ5NTQ0NTkyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffa3b8a9e6fac6cfa756d0fa0d9ede4653d2370c", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/ffa3b8a9e6fac6cfa756d0fa0d9ede4653d2370c", "committedDate": "2020-09-23T13:52:18Z", "message": "asd"}, "afterCommit": {"oid": "15953f8f24dd36adb5ffe10ab33989b55db7b396", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/15953f8f24dd36adb5ffe10ab33989b55db7b396", "committedDate": "2020-09-23T14:19:38Z", "message": "asd"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15953f8f24dd36adb5ffe10ab33989b55db7b396", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/15953f8f24dd36adb5ffe10ab33989b55db7b396", "committedDate": "2020-09-23T14:19:38Z", "message": "asd"}, "afterCommit": {"oid": "4988b0e4426e6b483569a540f381708f5792278a", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4988b0e4426e6b483569a540f381708f5792278a", "committedDate": "2020-09-23T14:40:12Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredNotificationDetails."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4988b0e4426e6b483569a540f381708f5792278a", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/4988b0e4426e6b483569a540f381708f5792278a", "committedDate": "2020-09-23T14:40:12Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredNotificationDetails."}, "afterCommit": {"oid": "d19552b675b55f314a920055921b5f4f77b0874f", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d19552b675b55f314a920055921b5f4f77b0874f", "committedDate": "2020-09-24T07:06:20Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "committedDate": "2020-09-24T08:02:35Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d19552b675b55f314a920055921b5f4f77b0874f", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d19552b675b55f314a920055921b5f4f77b0874f", "committedDate": "2020-09-24T07:06:20Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent."}, "afterCommit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "author": {"user": {"login": "topolyai5", "name": "Gergely Topolyai"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7373ea1a817c7fc9f0d35dcceb981d703fed0b44", "committedDate": "2020-09-24T08:02:35Z", "message": "CB-8947 Filterable events on the API by ResourceEventType. Status and statusResponse added to CDPStructuredEvent."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDMwNjky", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#pullrequestreview-495430692", "createdAt": "2020-09-24T10:28:24Z", "commit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOHXT_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoyNFrOHXT_Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjc1NA==", "bodyText": "Shouldn't we do something if the eventypes is not empty??", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#discussion_r494206754", "createdAt": "2020-09-24T10:28:24Z", "author": {"login": "biharitomi"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/service/db/CDPStructuredEventDBService.java", "diffHunk": "@@ -68,43 +69,43 @@ protected void prepareCreation(CDPStructuredEventEntity resource) {\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn, Pageable pageable) {\n+        LOGGER.debug(\"Gathering pageable events for types: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn, pageable);\n+            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn, pageable);\n             return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get pageable events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n \n     @Override\n-    public <T extends CDPStructuredEvent> Page<T> getPagedEventsOfResource(List<StructuredEventType> eventType, String resourceCrn, Pageable pageable) {\n-        LOGGER.debug(\"Gathering pageable events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n+    public <T extends CDPStructuredEvent> List<T> getEventsOfResource(List<StructuredEventType> eventTypes, String resourceCrn) {\n+        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventTypes, resourceCrn);\n+        List<StructuredEventType> types = getAllEventTypeIfEmpty(eventTypes);\n         try {\n-            Page<CDPStructuredEventEntity> events = pagingStructuredEventRepository.findByEventTypeInAndResourceCrn(eventType, resourceCrn, pageable);\n-            return (Page<T>) Optional.ofNullable(events).orElse(Page.empty()).map(event -> conversionService.convert(event, CDPStructuredEvent.class));\n-        } catch (Exception ex) {\n-            String msg = String.format(\"Failed get pageable events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n-            LOGGER.warn(msg, ex);\n-            throw new CloudbreakServiceException(msg, ex);\n-        }\n-    }\n-\n-    @Override\n-    public <T extends CDPStructuredEvent> List<T> getNotificationEventsOfResource(StructuredEventType eventType, String resourceCrn) {\n-        LOGGER.debug(\"Gathering events for type: '{}' and resource CRN: '{}'\", eventType, resourceCrn);\n-        try {\n-            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeAndResourceCrn(eventType, resourceCrn);\n+            List<CDPStructuredEventEntity> events = structuredEventRepository.findByEventTypeInAndResourceCrn(types, resourceCrn);\n             return (List<T>) Optional.ofNullable(events).orElse(new ArrayList<>()).stream()\n                     .map(event -> conversionService.convert(event, CDPStructuredEvent.class))\n                     .collect(Collectors.toList());\n         } catch (Exception ex) {\n-            String msg = String.format(\"Failed get events for type: '%s' and resource CRN: '%s'\", eventType, resourceCrn);\n+            String msg = String.format(\"Failed get events for types: '%s' and resource CRN: '%s'\", types, resourceCrn);\n             LOGGER.warn(msg, ex);\n             throw new CloudbreakServiceException(msg, ex);\n         }\n     }\n+\n+    private List<StructuredEventType> getAllEventTypeIfEmpty(List<StructuredEventType> eventTypes) {\n+        List<StructuredEventType> types = new ArrayList<>(eventTypes);\n+        if (CollectionUtils.isEmpty(eventTypes)) {\n+            LOGGER.info(\"We need to add all structured event types to the filter\");\n+            types.add(StructuredEventType.NOTIFICATION);\n+            types.add(StructuredEventType.REST);\n+            types.add(StructuredEventType.FLOW);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDQ1OTI4", "url": "https://github.com/hortonworks/cloudbreak/pull/9071#pullrequestreview-495445928", "createdAt": "2020-09-24T10:51:04Z", "commit": {"oid": "7373ea1a817c7fc9f0d35dcceb981d703fed0b44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2236, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}