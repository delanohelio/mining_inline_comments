{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDkyMTE0", "number": 7441, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMTozM1rODkmsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMjo0NlrODkmuCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzA5Mzc1OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/AbstractPermissionCheckerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMTozM1rOFxBS0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMTozM1rOFxBS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NTc0Ng==", "bodyText": "This might be better as a Warn message.", "url": "https://github.com/hortonworks/cloudbreak/pull/7441#discussion_r386945746", "createdAt": "2020-03-03T11:01:33Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/AbstractPermissionCheckerService.java", "diffHunk": "@@ -60,34 +65,39 @@ protected Object checkPermission(ProceedingJoinPoint proceedingJoinPoint, Method\n         Optional<Annotation> classAnnotation = commonPermissionCheckingUtils.getClassAnnotation(authorizationClass);\n \n         AuthorizationResource classAuthorizationResource = (AuthorizationResource) classAnnotation.get();\n+        AuthorizationResourceType resource = classAuthorizationResource.type();\n+        String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n \n         List<? extends Annotation> annotations = getPossibleMethodAnnotations().stream()\n                 .map(c -> methodSignature.getMethod().getAnnotation(c))\n                 .collect(Collectors.toList());\n \n-        Annotation methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n-        if (methodAnnotation instanceof DisableCheckPermissions) {\n+        Optional<Annotation> methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n+        if (!methodAnnotation.isPresent()) {\n+            LOGGER.info(\"Your Controller ({}) method {} does not have any authorization related annotation, \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e4464aac6a0a3731bd21828634f82e626406fac"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzA5NzA1OnYy", "diffSide": "RIGHT", "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/AbstractPermissionCheckerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTowMjo0NlrOFxBU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMToxNjowMFrOFxBuEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NjI5NQ==", "bodyText": "What happens if someone specifies another annotation, should we verify an exact list of Annotations we are looking for? Would it be an error in the permission checking util or cause some RunTimeError?", "url": "https://github.com/hortonworks/cloudbreak/pull/7441#discussion_r386946295", "createdAt": "2020-03-03T11:02:46Z", "author": {"login": "lnardai"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/AbstractPermissionCheckerService.java", "diffHunk": "@@ -60,34 +65,39 @@ protected Object checkPermission(ProceedingJoinPoint proceedingJoinPoint, Method\n         Optional<Annotation> classAnnotation = commonPermissionCheckingUtils.getClassAnnotation(authorizationClass);\n \n         AuthorizationResource classAuthorizationResource = (AuthorizationResource) classAnnotation.get();\n+        AuthorizationResourceType resource = classAuthorizationResource.type();\n+        String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n \n         List<? extends Annotation> annotations = getPossibleMethodAnnotations().stream()\n                 .map(c -> methodSignature.getMethod().getAnnotation(c))\n                 .collect(Collectors.toList());\n \n-        Annotation methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n-        if (methodAnnotation instanceof DisableCheckPermissions) {\n+        Optional<Annotation> methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n+        if (!methodAnnotation.isPresent()) {\n+            LOGGER.info(\"Your Controller ({}) method {} does not have any authorization related annotation, \" +\n+                            \"thus we are checking write permission on current account.\",\n+                    proceedingJoinPoint.getTarget().getClass().getSimpleName(), methodSignature.getMethod().getName());\n+            commonPermissionCheckingUtils.checkPermissionForUser(resource, AuthorizationResourceAction.WRITE, userCrn);\n+            return commonPermissionCheckingUtils.proceed(proceedingJoinPoint, methodSignature, startTime);\n+        } else if (methodAnnotation.get() instanceof DisableCheckPermissions) {\n             return commonPermissionCheckingUtils.proceed(proceedingJoinPoint, methodSignature, startTime);\n         }\n \n-        String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n-        PermissionChecker<? extends Annotation> permissionChecker = permissionCheckerMap.get(methodAnnotation.annotationType());\n-        AuthorizationResourceType resource = classAuthorizationResource.type();\n-        return permissionChecker.checkPermissions(methodAnnotation, resource, userCrn, proceedingJoinPoint, methodSignature, startTime);\n+        PermissionChecker<? extends Annotation> permissionChecker = permissionCheckerMap.get(methodAnnotation.get().annotationType());\n+        return permissionChecker.checkPermissions(methodAnnotation.get(), resource, userCrn, proceedingJoinPoint, methodSignature, startTime);\n     }\n \n-    private Annotation validateNumberOfAnnotations(MethodSignature methodSignature, List<? extends Annotation> annotations) {\n+    private Optional<Annotation> validateNumberOfAnnotations(MethodSignature methodSignature, List<? extends Annotation> annotations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e4464aac6a0a3731bd21828634f82e626406fac"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MjcyMA==", "bodyText": "Child class (PermissionCheckerService) has a static list about possible authz annotations and we are checking those.", "url": "https://github.com/hortonworks/cloudbreak/pull/7441#discussion_r386952720", "createdAt": "2020-03-03T11:16:00Z", "author": {"login": "horadla23"}, "path": "authorization-common/src/main/java/com/sequenceiq/authorization/service/AbstractPermissionCheckerService.java", "diffHunk": "@@ -60,34 +65,39 @@ protected Object checkPermission(ProceedingJoinPoint proceedingJoinPoint, Method\n         Optional<Annotation> classAnnotation = commonPermissionCheckingUtils.getClassAnnotation(authorizationClass);\n \n         AuthorizationResource classAuthorizationResource = (AuthorizationResource) classAnnotation.get();\n+        AuthorizationResourceType resource = classAuthorizationResource.type();\n+        String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n \n         List<? extends Annotation> annotations = getPossibleMethodAnnotations().stream()\n                 .map(c -> methodSignature.getMethod().getAnnotation(c))\n                 .collect(Collectors.toList());\n \n-        Annotation methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n-        if (methodAnnotation instanceof DisableCheckPermissions) {\n+        Optional<Annotation> methodAnnotation = validateNumberOfAnnotations(methodSignature, annotations);\n+        if (!methodAnnotation.isPresent()) {\n+            LOGGER.info(\"Your Controller ({}) method {} does not have any authorization related annotation, \" +\n+                            \"thus we are checking write permission on current account.\",\n+                    proceedingJoinPoint.getTarget().getClass().getSimpleName(), methodSignature.getMethod().getName());\n+            commonPermissionCheckingUtils.checkPermissionForUser(resource, AuthorizationResourceAction.WRITE, userCrn);\n+            return commonPermissionCheckingUtils.proceed(proceedingJoinPoint, methodSignature, startTime);\n+        } else if (methodAnnotation.get() instanceof DisableCheckPermissions) {\n             return commonPermissionCheckingUtils.proceed(proceedingJoinPoint, methodSignature, startTime);\n         }\n \n-        String userCrn = ThreadBasedUserCrnProvider.getUserCrn();\n-        PermissionChecker<? extends Annotation> permissionChecker = permissionCheckerMap.get(methodAnnotation.annotationType());\n-        AuthorizationResourceType resource = classAuthorizationResource.type();\n-        return permissionChecker.checkPermissions(methodAnnotation, resource, userCrn, proceedingJoinPoint, methodSignature, startTime);\n+        PermissionChecker<? extends Annotation> permissionChecker = permissionCheckerMap.get(methodAnnotation.get().annotationType());\n+        return permissionChecker.checkPermissions(methodAnnotation.get(), resource, userCrn, proceedingJoinPoint, methodSignature, startTime);\n     }\n \n-    private Annotation validateNumberOfAnnotations(MethodSignature methodSignature, List<? extends Annotation> annotations) {\n+    private Optional<Annotation> validateNumberOfAnnotations(MethodSignature methodSignature, List<? extends Annotation> annotations) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk0NjI5NQ=="}, "originalCommit": {"oid": "9e4464aac6a0a3731bd21828634f82e626406fac"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2820, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}