{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDg1MzM2", "number": 9043, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo1NToyMVrOEllTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1OTozMFrOEmGTgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODQzOTU2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo1NToyMVrOHVIdAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDozMzowNVrOHVJvWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMDY0MA==", "bodyText": "if stack is not found, is it ok to let the exception propagate?", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491920640", "createdAt": "2020-09-21T09:55:21Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n+            environmentValue.ifPresent(nameValuePair -> {\n+                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n+                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MTcyMg==", "bodyText": "Yes, in this case, the structured event could not be created", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491941722", "createdAt": "2020-09-21T10:33:05Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n+            environmentValue.ifPresent(nameValuePair -> {\n+                String accountId = ThreadBasedUserCrnProvider.getAccountId();\n+                Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyMDY0MA=="}, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODQ2NTcxOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowMjo0MVrOHVItGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDozMzo1M1rOHVJw3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDc2Mw==", "bodyText": "unfortunately only FreeIpaV1Endpoint has environment in the URI, LDAP and Kerberos related endpoints have environmentCrn. I think those should be handled alse", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491924763", "createdAt": "2020-09-21T10:02:41Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MjEwOQ==", "bodyText": "I love the consistency", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491942109", "createdAt": "2020-09-21T10:33:53Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        try {\n+            String requestUri = restCallDetails.getRestRequest().getRequestUri();\n+            URI uri = new URI(requestUri);\n+            List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n+            Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyNDc2Mw=="}, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODQ5MTkwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoxMDoyMlrOHVI9KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoxMDoyMlrOHVI9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyODg3Mg==", "bodyText": "refactor suggestion: break up into smaller methods\n    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n            String nameField, String crnField) {\n        try {\n            Optional<NameValuePair> environmentValue = extractEnvironmentValue(restCallDetails);\n            environmentValue.ifPresent(nameValuePair -> updateRestParams(restParams, nameField, crnField, nameValuePair));\n        } catch (URISyntaxException e) {\n            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n        }\n    }\n\n    private void updateRestParams(Map<String, String> restParams, String nameField, String crnField, NameValuePair nameValuePair) {\n        String accountId = ThreadBasedUserCrnProvider.getAccountId();\n        Stack stack = stackService.getByEnvironmentCrnAndAccountIdEvenIfTerminated(nameValuePair.getValue(), accountId);\n        restParams.put(nameField, stack.getName());\n        restParams.put(crnField, stack.getResourceCrn());\n        restParams.put(RESOURCE_ID, stack.getId().toString());\n    }\n\n    private Optional<NameValuePair> extractEnvironmentValue(RestCallDetails restCallDetails) throws URISyntaxException {\n        String requestUri = restCallDetails.getRestRequest().getRequestUri();\n        URI uri = new URI(requestUri);\n        List<NameValuePair> queryParams = URLEncodedUtils.parse(uri, StandardCharsets.UTF_8);\n        Optional<NameValuePair> environmentValue = queryParams.stream().filter(p -> \"environment\".equals(p.getName())).findFirst();\n        return environmentValue;\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491928872", "createdAt": "2020-09-21T10:10:22Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeIpaCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Override\n+    public void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODUwMjM0OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaUrlParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoxMzozNlrOHVJDxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODo0Njo1NVrOHVwI0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw==", "bodyText": "shall we introduce other parsers for the other endpoints? like KerberosMgmtV1Endpoint, KerberosConfigV1Endpoint, LdapConfigV1Endpoint, DnsV1Endpoint?", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491930567", "createdAt": "2020-09-21T10:13:36Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaUrlParser.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+\n+@Component\n+public class FreeipaUrlParser extends CDPRestUrlParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk0MjUxMA==", "bodyText": "Good questions, I will ask", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491942510", "createdAt": "2020-09-21T10:34:40Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaUrlParser.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+\n+@Component\n+public class FreeipaUrlParser extends CDPRestUrlParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw=="}, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU3MDgzMg==", "bodyText": "Only Kerberos config and Ldap config added", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492570832", "createdAt": "2020-09-22T08:46:55Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaUrlParser.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser;\n+\n+@Component\n+public class FreeipaUrlParser extends CDPRestUrlParser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzMDU2Nw=="}, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODU1NjE3OnYy", "diffSide": "RIGHT", "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoyNzo1NlrOHVJlpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDoyNzo1NlrOHVJlpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkzOTIzOQ==", "bodyText": "it would be more \"clean\" if this method would return with the restParams, indicating it modifies it's content.\nThe most elegant way would be to make a copy of the restParams parameter to initialize the result and add values to that one, as the parameter could be even an immutable map", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r491939239", "createdAt": "2020-09-21T10:27:56Z", "author": {"login": "lacikaaa"}, "path": "structuredevent-service-cdp/src/main/java/com/sequenceiq/cloudbreak/structuredevent/rest/CustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.sequenceiq.cloudbreak.structuredevent.rest;\n+\n+import java.util.Map;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+\n+public interface CustomCrnOrNameProvider {\n+\n+    void provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams, String nameField, String crnField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eef3f38cd4e55807629944790b6a4b54a472961b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc0NzUzOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzozOTo1MVrOHV6jwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzozOTo1MVrOHV6jwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MTU3MA==", "bodyText": "could you drop this as it's not used anymore", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492741570", "createdAt": "2020-09-22T13:39:51Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/entity/Stack.java", "diffHunk": "@@ -349,6 +350,15 @@ public void setAccountId(String accountId) {\n         this.accountId = accountId;\n     }\n \n+    public String getCreator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902eff885ab1c2337393bfd0e9633c061248777b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc2Mjc5OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Mjo0N1rOHV6s_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Mjo0N1rOHV6s_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0MzkzNA==", "bodyText": "please remove this, we don't really use jetbrains annotations", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492743934", "createdAt": "2020-09-22T13:42:47Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+\n+public abstract class AbstractCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);\n+\n+    private final Set<String> environmentParams = Set.of(\"environment\", \"environmentCrn\");\n+\n+    @Override\n+    public Map<String, String> provide(RestCallDetails restCallDetails, CDPOperationDetails operationDetails, Map<String, String> restParams,\n+            String nameField, String crnField) {\n+        Map<String, String> param = new HashMap<>();\n+        try {\n+            Optional<NameValuePair> environmentValue = findEnvironmentCrnInQueryParams(restCallDetails);\n+            environmentValue.ifPresent(nameValuePair -> addFieldToParams(param, nameField, crnField, nameValuePair));\n+        } catch (URISyntaxException e) {\n+            LOGGER.warn(\"Cannot provide name and crn because the uri is invalid or any error occurred: {}\", e.getMessage(), e);\n+        }\n+        return param;\n+    }\n+\n+    private void addFieldToParams(Map<String, String> restParams, String nameField, String crnField, NameValuePair nameValuePair) {\n+        String accountId = ThreadBasedUserCrnProvider.getAccountId();\n+        List<? extends AccountAwareResource> resources = getResource(nameValuePair.getValue(), accountId);\n+        restParams.put(nameField, resources.stream().map(AccountAwareResource::getName).collect(Collectors.joining(\",\")));\n+        restParams.put(crnField, resources.stream().map(AccountAwareResource::getResourceCrn).collect(Collectors.joining(\",\")));\n+        restParams.put(RESOURCE_ID, resources.stream().map(r -> r.getId().toString()).collect(Collectors.joining(\",\")));\n+    }\n+\n+    protected abstract List<? extends AccountAwareResource> getResource(String environmentCrn, String accountId);\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "902eff885ab1c2337393bfd0e9633c061248777b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc4NzkyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0Nzo1N1rOHV68xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo1MjozNlrOHV-IbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzk3Mw==", "bodyText": "if this is named, shouldn't be the others too?", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492747973", "createdAt": "2020-09-22T13:47:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component(\"freeipaCustomCrnOrNameProvider\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwMDEwOQ==", "bodyText": "No, it should not. It is need because the resourcetype is freeipa but the naming convention is FreeIpa. The others is fine", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492800109", "createdAt": "2020-09-22T14:52:36Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeIpaCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component(\"freeipaCustomCrnOrNameProvider\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0Nzk3Mw=="}, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzc5MDAyOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0ODoyN1rOHV6-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo0ODoyN1rOHV6-IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc0ODMyMA==", "bodyText": "wrong class", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492748320", "createdAt": "2020-09-22T13:48:27Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/AbstractCustomCrnOrNameProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.rest.urlparser.CDPRestUrlParser.RESOURCE_ID;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.rest.RestCallDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.cloudbreak.structuredevent.rest.CustomCrnOrNameProvider;\n+\n+public abstract class AbstractCustomCrnOrNameProvider implements CustomCrnOrNameProvider {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(FreeIpaCustomCrnOrNameProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzgwMzI2OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaStructuredFlowEventFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1MTowN1rOHV7GbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNjowMzo0NFrOHWXmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MDQ0NQ==", "bodyText": "note: hell of a constructor, a builder might be better", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492750445", "createdAt": "2020-09-22T13:51:07Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaStructuredFlowEventFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.FLOW;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPStructuredFlowEventFactory;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeipaStructuredFlowEventFactory implements CDPStructuredFlowEventFactory {\n+\n+    @Inject\n+    private Clock clock;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private NodeConfig nodeConfig;\n+\n+    @Value(\"${info.app.version:}\")\n+    private String serviceVersion;\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed) {\n+        return createStructuredFlowEvent(resourceId, flowDetails, detailed, null);\n+    }\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n+        Stack stack = stackService.getStackById(resourceId);\n+        String resourceType = CloudbreakEventService.FREEIPA_RESOURCE_TYPE;\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(clock.getCurrentTimeMillis(), FLOW, resourceType, stack.getId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzIxNzM5NA==", "bodyText": "please create a follow-up jira", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r493217394", "createdAt": "2020-09-23T06:03:44Z", "author": {"login": "topolyai5"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/events/FreeipaStructuredFlowEventFactory.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.sequenceiq.freeipa.events;\n+\n+import static com.sequenceiq.cloudbreak.structuredevent.event.StructuredEventType.FLOW;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.cloudbreak.auth.ThreadBasedUserCrnProvider;\n+import com.sequenceiq.cloudbreak.common.service.Clock;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+import com.sequenceiq.cloudbreak.structuredevent.event.FlowDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPOperationDetails;\n+import com.sequenceiq.cloudbreak.structuredevent.event.cdp.CDPStructuredFlowEvent;\n+import com.sequenceiq.cloudbreak.structuredevent.service.CDPStructuredFlowEventFactory;\n+import com.sequenceiq.flow.ha.NodeConfig;\n+import com.sequenceiq.freeipa.entity.Stack;\n+import com.sequenceiq.freeipa.service.stack.StackService;\n+\n+@Component\n+public class FreeipaStructuredFlowEventFactory implements CDPStructuredFlowEventFactory {\n+\n+    @Inject\n+    private Clock clock;\n+\n+    @Inject\n+    private StackService stackService;\n+\n+    @Inject\n+    private NodeConfig nodeConfig;\n+\n+    @Value(\"${info.app.version:}\")\n+    private String serviceVersion;\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed) {\n+        return createStructuredFlowEvent(resourceId, flowDetails, detailed, null);\n+    }\n+\n+    @Override\n+    public CDPStructuredFlowEvent createStructuredFlowEvent(Long resourceId, FlowDetails flowDetails, Boolean detailed, Exception exception) {\n+        Stack stack = stackService.getStackById(resourceId);\n+        String resourceType = CloudbreakEventService.FREEIPA_RESOURCE_TYPE;\n+        CDPOperationDetails operationDetails = new CDPOperationDetails(clock.getCurrentTimeMillis(), FLOW, resourceType, stack.getId(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1MDQ0NQ=="}, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzg0MTM3OnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberos/KerberosConfigWithArchived.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1ODozMFrOHV7d7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1ODozMFrOHV7d7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NjQ2Mw==", "bodyText": "duplicating the entity seems a bit overkill, isn't there any better solution? like creating a common ancestor having all the field\nor if you need only some field you should only include those here and make this only readable", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492756463", "createdAt": "2020-09-22T13:58:30Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/kerberos/KerberosConfigWithArchived.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.sequenceiq.freeipa.kerberos;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import com.sequenceiq.cloudbreak.auth.security.AuthResource;\n+import com.sequenceiq.cloudbreak.common.archive.ArchivableResource;\n+import com.sequenceiq.cloudbreak.service.secret.SecretValue;\n+import com.sequenceiq.cloudbreak.service.secret.domain.Secret;\n+import com.sequenceiq.cloudbreak.service.secret.domain.SecretToString;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.api.v1.kerberos.model.KerberosType;\n+import com.sequenceiq.freeipa.entity.util.KerberosTypeConverter;\n+\n+@Entity\n+@Table(name = \"kerberosconfig\")\n+public class KerberosConfigWithArchived implements ArchivableResource, AuthResource, AccountAwareResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzg0NjQwOnYy", "diffSide": "RIGHT", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1OTozMFrOHV7hLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzo1OTozMFrOHV7hLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc1NzI5NQ==", "bodyText": "same note as for kerberos entity", "url": "https://github.com/hortonworks/cloudbreak/pull/9043#discussion_r492757295", "createdAt": "2020-09-22T13:59:30Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/ldap/LdapConfigWithArchived.java", "diffHunk": "@@ -0,0 +1,346 @@\n+package com.sequenceiq.freeipa.ldap;\n+\n+import java.util.Objects;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Convert;\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import com.sequenceiq.cloudbreak.auth.security.AuthResource;\n+import com.sequenceiq.cloudbreak.common.archive.ArchivableResource;\n+import com.sequenceiq.cloudbreak.service.secret.SecretValue;\n+import com.sequenceiq.cloudbreak.service.secret.domain.Secret;\n+import com.sequenceiq.cloudbreak.service.secret.domain.SecretToString;\n+import com.sequenceiq.cloudbreak.structuredevent.repository.AccountAwareResource;\n+import com.sequenceiq.freeipa.api.v1.ldap.model.DirectoryType;\n+\n+@Entity\n+@Table(name = \"ldapconfig\")\n+public class LdapConfigWithArchived implements ArchivableResource, AuthResource, AccountAwareResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea943757cf6da3087cfc024181a9b4520aed2490"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2177, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}