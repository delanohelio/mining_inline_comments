{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTQ2MDk5", "number": 7301, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1MzoyNVrODgatMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzozMVrODgbOuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzE4NTc3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/FunctionChecked.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1MzoyNVrOFqnJzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0Nzo1MVrOFqo92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNTk5OA==", "bodyText": "Why not CheckedFunction? Or ValidatedFunction? Would sound more correct.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380225998", "createdAt": "2020-02-17T14:53:25Z", "author": {"login": "attilapalfi92"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/FunctionChecked.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+@FunctionalInterface\n+public interface FunctionChecked<T, R, E extends Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMTYzMw==", "bodyText": "bad package, I would create in util. I prefer the function first because to find easily by another one", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380231633", "createdAt": "2020-02-17T15:03:09Z", "author": {"login": "topolyai5"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/FunctionChecked.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+@FunctionalInterface\n+public interface FunctionChecked<T, R, E extends Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNTk5OA=="}, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NTcwNQ==", "bodyText": "But this name does not make sense. You can find it anyway.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380255705", "createdAt": "2020-02-17T15:47:51Z", "author": {"login": "attilapalfi92"}, "path": "common/src/main/java/com/sequenceiq/cloudbreak/validation/FunctionChecked.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package com.sequenceiq.cloudbreak.validation;\n+\n+@FunctionalInterface\n+public interface FunctionChecked<T, R, E extends Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNTk5OA=="}, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzE5MjA4OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDo1NTowOVrOFqnNqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowMTo1N1rOFqnddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNjk4Ng==", "bodyText": "I think optionalDeployClientConfigCommand is a leftover name from refactor and should be optionalApiCommand, isn't it?", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380226986", "createdAt": "2020-02-17T14:55:09Z", "author": {"login": "attilapalfi92"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {\n+            List<ApiCommand> commands = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems();\n+            ApiCommand deployClientConfigCmd = getApiCommand(commands, \"DeployClusterClientConfig\", stack.getName(), clustersResourceApi::deployClientConfig);\n+            pollDeployConfig(deployClientConfigCmd);\n+            ApiCommand refreshServicesCmd = getApiCommand(commands, \"RefreshCluster\", stack.getName(), clustersResourceApi::refresh);\n+            pollRefresh(refreshServicesCmd);\n+            LOGGER.debug(\"Config deployed and stale services are refreshed in Cloudera Manager.\");\n         } else {\n             LOGGER.debug(\"No stale services found in Cloudera Manager.\");\n         }\n     }\n \n+    private ApiCommand getApiCommand(List<ApiCommand> commands, String commandString, String clusterName, FunctionChecked<String, ApiCommand, ApiException> fn)\n+            throws ApiException {\n+        Optional<ApiCommand> optionalDeployClientConfigCommand = commands.stream().filter(cmd -> commandString.equals(cmd.getName())).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMTAyOQ==", "bodyText": "yes, you are right, i will fix it", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380231029", "createdAt": "2020-02-17T15:01:57Z", "author": {"login": "topolyai5"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {\n+            List<ApiCommand> commands = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems();\n+            ApiCommand deployClientConfigCmd = getApiCommand(commands, \"DeployClusterClientConfig\", stack.getName(), clustersResourceApi::deployClientConfig);\n+            pollDeployConfig(deployClientConfigCmd);\n+            ApiCommand refreshServicesCmd = getApiCommand(commands, \"RefreshCluster\", stack.getName(), clustersResourceApi::refresh);\n+            pollRefresh(refreshServicesCmd);\n+            LOGGER.debug(\"Config deployed and stale services are refreshed in Cloudera Manager.\");\n         } else {\n             LOGGER.debug(\"No stale services found in Cloudera Manager.\");\n         }\n     }\n \n+    private ApiCommand getApiCommand(List<ApiCommand> commands, String commandString, String clusterName, FunctionChecked<String, ApiCommand, ApiException> fn)\n+            throws ApiException {\n+        Optional<ApiCommand> optionalDeployClientConfigCommand = commands.stream().filter(cmd -> commandString.equals(cmd.getName())).findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIyNjk4Ng=="}, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzIzNTc4OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNzoyOVrOFqnoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODowOToyOFrOFq4kqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzgyMA==", "bodyText": "what's behind the configStale and the clientConfigStale? the actual values come from a specific logic but the variable name does not reflect it. let's say something like serviceContainsStatusWithNotFreshStaleness.. or other.. it's much longer but a good variable name could make unnecessary to understand the stream-filter line(s) above.\nalso, do we have a unit-test for this logic somewhere? if not please make some.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380233820", "createdAt": "2020-02-17T15:07:29Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ5NzkxNg==", "bodyText": "I think this variable name too long. The other hand it just a boolean flag, not a list of services with not fresh staleness.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380497916", "createdAt": "2020-02-18T07:32:21Z", "author": {"login": "topolyai5"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzgyMA=="}, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUxMTQwMg==", "bodyText": "surely it's too long, I didn't say that you have to use my suggestion, but if you read this condition for the first time you must read the assignation line to understand what the variable actually represents. that's why it's a bad choice of name.", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380511402", "createdAt": "2020-02-18T08:09:28Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -187,32 +187,40 @@ private Boolean isPrewarmed(Long clusterId) {\n     public void restartStaleServices(MgmtServiceResourceApi mgmtServiceResourceApi, ClustersResourceApi clustersResourceApi)\n             throws ApiException, CloudbreakException {\n         restartClouderaManagementServices(mgmtServiceResourceApi);\n-        restartCMStaleServices(clustersResourceApi);\n+        deployConfigAndRefreshCMStaleServices(clustersResourceApi);\n     }\n \n-    private void restartCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n+    private void deployConfigAndRefreshCMStaleServices(ClustersResourceApi clustersResourceApi) throws ApiException, CloudbreakException {\n         LOGGER.debug(\"Restarting stale services and redeploying client configurations in Cloudera Manager.\");\n         ServicesResourceApi servicesResourceApi = clouderaManagerApiFactory.getServicesResourceApi(apiClient);\n         List<ApiService> services = servicesResourceApi.readServices(stack.getName(), SUMMARY).getItems();\n         boolean configStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getConfigStalenessStatus()));\n-        if (configStale) {\n-            Optional<ApiCommand> optionalRestartCommand = clustersResourceApi.listActiveCommands(stack.getName(), SUMMARY).getItems().stream()\n-                    .filter(cmd -> \"RestartWaitingForStalenessSuccess\".equals(cmd.getName())).findFirst();\n-            ApiCommand restartServicesCommand;\n-            if (optionalRestartCommand.isPresent()) {\n-                restartServicesCommand = optionalRestartCommand.get();\n-                LOGGER.debug(\"Restart for stale services is already running with id: [{}]\", restartServicesCommand.getId());\n-            } else {\n-                restartServicesCommand = clustersResourceApi.restartCommand(stack.getName(),\n-                        new ApiRestartClusterArgs().redeployClientConfiguration(Boolean.TRUE).restartOnlyStaleServices(Boolean.TRUE));\n-            }\n-            pollRestart(restartServicesCommand);\n-            LOGGER.debug(\"Restarted stale services in Cloudera Manager.\");\n+        boolean clientConfigStale = services.stream().anyMatch(service -> !ApiConfigStalenessStatus.FRESH.equals(service.getClientConfigStalenessStatus()));\n+        if (configStale || clientConfigStale) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzgyMA=="}, "originalCommit": {"oid": "7b1b6628ab005b060f1f0862d4da61ea007afe33"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI3MTI2OnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzoyNlrOFqn93g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzoyNlrOFqn93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTMyNg==", "bodyText": "please cover this method with unit test(s)", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380239326", "createdAt": "2020-02-17T15:17:26Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -238,6 +246,26 @@ private void pollRestart(ApiCommand restartCommand) throws CloudbreakException {\n         }\n     }\n \n+    private void pollDeployConfig(ApiCommand restartCommand) throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI3MTYxOnYy", "diffSide": "RIGHT", "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzozMVrOFqn-Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToxNzozMVrOFqn-Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzOTM3NA==", "bodyText": "please cover this method with unit test(s)", "url": "https://github.com/hortonworks/cloudbreak/pull/7301#discussion_r380239374", "createdAt": "2020-02-17T15:17:31Z", "author": {"login": "gregito"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerModificationService.java", "diffHunk": "@@ -238,6 +246,26 @@ private void pollRestart(ApiCommand restartCommand) throws CloudbreakException {\n         }\n     }\n \n+    private void pollDeployConfig(ApiCommand restartCommand) throws CloudbreakException {\n+        PollingResult hostTemplatePollingResult = clouderaManagerPollingServiceProvider.startPollingCmClientConfigDeployment(\n+                stack, apiClient, restartCommand.getId());\n+        if (isExited(hostTemplatePollingResult)) {\n+            throw new CancellationException(\"Cluster was terminated while waiting for config deploy\");\n+        } else if (isTimeout(hostTemplatePollingResult)) {\n+            throw new CloudbreakException(\"Timeout while Cloudera Manager was config deploying services.\");\n+        }\n+    }\n+\n+    private void pollRefresh(ApiCommand restartCommand) throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73584700bf13fc42f3a8e01d7ff72f165af7775d"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2852, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}