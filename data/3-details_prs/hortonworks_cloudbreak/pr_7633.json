{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjQ5OTA0", "number": 7633, "title": "CB-6225: health check not returning status of all hosts.", "bodyText": "This patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call.\nUpdated unit test.\nManually validated against 3 node FreeIPA and various levels of failure.\nAlso fixes:\nCB-6226", "createdAt": "2020-03-23T21:31:31Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7633", "merged": true, "mergeCommit": {"oid": "d72db5fd5e8e7f8f2f483623827314068bd65d91"}, "closed": true, "closedAt": "2020-03-30T20:40:28Z", "author": {"login": "holleyism"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQsNU7gBqjMxNTgxNTAxMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSv8MIAFqTM4Mzk1MTk2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23feb8da25f44534ea98852344e06112771bf1d7", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/23feb8da25f44534ea98852344e06112771bf1d7", "committedDate": "2020-03-23T21:30:29Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}, "afterCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/722bc1a91e6495b6f9799b158dc24bee0188c59e", "committedDate": "2020-03-24T05:38:38Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzYyNjQz", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#pullrequestreview-380362643", "createdAt": "2020-03-24T14:27:09Z", "commit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyNzowOVrOF6yzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozNTowOFrOF6zMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NDExNw==", "bodyText": "why 3?\nalso it should be configurable", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397194117", "createdAt": "2020-03-24T14:27:09Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -45,6 +45,10 @@\n \n     private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n \n+    private static final String WRONG_MASTER_MESSAGE = \"invalid 'cn': must be\";\n+\n+    private static final int MAX_RETRIES = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NTUxMw==", "bodyText": "you could use Stack#getNotDeletedInstanceMetaDataList if you don't need the deleted ones, but if you really need terminated instances I think we should add this stream as a method to Stack as it seems to me we might need it multiple times", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397195513", "createdAt": "2020-03-24T14:28:51Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NjM0OA==", "bodyText": "why don't we know which instance we should use?", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397196348", "createdAt": "2020-03-24T14:29:57Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw==", "bodyText": "you should use for (InstanceMetaData instance : instances) as you don't use the index elsewhere", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397197207", "createdAt": "2020-03-24T14:31:03Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTA3MA==", "bodyText": "so you add it to the list to check it again or is it a bug?", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397199070", "createdAt": "2020-03-24T14:33:24Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (!isInstanceTerminatedOrDeleted(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack, masterCn, instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    String msg = e.getLocalizedMessage();\n+                    if (msg.contains(WRONG_MASTER_MESSAGE) && retries < MAX_RETRIES) {\n+                        masterCn = msg.substring(msg.indexOf('\"') + 1);\n+                        masterCn = masterCn.substring(0, masterCn.indexOf('\"'));\n+                        instances.add(instance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDQwNA==", "bodyText": "if we get into this branch, shouldn't we exit the for loop?", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r397200404", "createdAt": "2020-03-24T14:35:08Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (!isInstanceTerminatedOrDeleted(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack, masterCn, instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    String msg = e.getLocalizedMessage();\n+                    if (msg.contains(WRONG_MASTER_MESSAGE) && retries < MAX_RETRIES) {\n+                        masterCn = msg.substring(msg.indexOf('\"') + 1);\n+                        masterCn = masterCn.substring(0, masterCn.indexOf('\"'));\n+                        instances.add(instance);\n+                        retries++;\n+                    } else {\n+                        NodeHealthDetails nodeResponse = new NodeHealthDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/722bc1a91e6495b6f9799b158dc24bee0188c59e", "committedDate": "2020-03-24T05:38:38Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}, "afterCommit": {"oid": "152129b3b9bb2a82cfcd85462a037f7829ab7f57", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/152129b3b9bb2a82cfcd85462a037f7829ab7f57", "committedDate": "2020-03-24T15:33:11Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "152129b3b9bb2a82cfcd85462a037f7829ab7f57", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/152129b3b9bb2a82cfcd85462a037f7829ab7f57", "committedDate": "2020-03-24T15:33:11Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}, "afterCommit": {"oid": "9e07c04b9a67d322f631307d8c8da6aacfe3268a", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9e07c04b9a67d322f631307d8c8da6aacfe3268a", "committedDate": "2020-03-24T18:30:04Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e07c04b9a67d322f631307d8c8da6aacfe3268a", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/9e07c04b9a67d322f631307d8c8da6aacfe3268a", "committedDate": "2020-03-24T18:30:04Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes."}, "afterCommit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "committedDate": "2020-03-28T05:23:39Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjg2OTY2", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#pullrequestreview-383286966", "createdAt": "2020-03-28T05:59:42Z", "commit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNTo1OTo0MlrOF9HKyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNjoxNDo0M1rOF9HPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNDkwNA==", "bodyText": "so there is no reason now not to switch to the above format, or am I missing something?", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399624904", "createdAt": "2020-03-28T05:59:42Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +57,69 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getInstanceGroups().stream()\n+                .flatMap(instanceGroup -> instanceGroup.getInstanceMetaData().stream()).collect(Collectors.toList());\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+        // The code here is weird because the server_conncheck API requires a specific node\n+        // and we don't know what determines what that node needs to be.  But if we use\n+        // the wrong master, we get an exception that says\n+        //   invalid 'cn': must be \"ipaserver0.xx.wl.cloudera.site\"\n+        // so we parse that, set that as master, and then retry the node.\n+        String masterCn = findMaster(stack).getDiscoveryFQDN();\n+        int retries = 0;\n+        for (int idx = 0; idx < instances.size(); idx++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NzIwNw=="}, "originalCommit": {"oid": "722bc1a91e6495b6f9799b158dc24bee0188c59e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNTkzOA==", "bodyText": "the method name doesn't reflect what it does. I think instance.isAvailable() should be in the caller if, and the else branch from there should call the body of this method (wo the if here oc)", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399625938", "createdAt": "2020-03-28T06:13:32Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +58,49 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getAllInstanceMetaDataList();\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (isInstanceAvailable(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack,  instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    NodeHealthDetails nodeResponse = new NodeHealthDetails();\n+                    response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                    nodeResponse.setName(instance.getDiscoveryFQDN());\n+                    nodeResponse.setStatus(InstanceStatus.UNREACHABLE);\n+                    nodeResponse.addIssue(e.getLocalizedMessage());\n+                    LOGGER.error(String.format(\"Unable to check the health of FreeIPA instance: %s\", instance.getInstanceId()), e);\n+                }\n+            }\n         }\n-        return createResponse(stack, rpcResponse, master);\n+        return updateResponse(stack, response);\n     }\n \n-    private HealthDetailsFreeIpaResponse createResponse(Stack stack, Optional<RPCResponse<Boolean>> rpcResponse, InstanceMetaData master) {\n-        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n-        response.setEnvironmentCrn(stack.getEnvironmentCrn());\n-        response.setCrn(stack.getResourceCrn());\n-        if (rpcResponse.isPresent()) {\n-            response.setName((String) rpcResponse.get().getValue());\n-            parseMessages(rpcResponse.get(), response);\n-            if (isOverallHealthy(response)) {\n-                response.setStatus(DetailedStackStatus.PROVISIONED.getStatus());\n-            } else {\n-                response.setStatus(DetailedStackStatus.UNHEALTHY.getStatus());\n-            }\n+    private boolean isInstanceAvailable(InstanceMetaData instance, HealthDetailsFreeIpaResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjAwMQ==", "bodyText": "refactor into a method pls", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399626001", "createdAt": "2020-03-28T06:14:03Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -53,35 +58,49 @@\n \n     public HealthDetailsFreeIpaResponse getHealthDetails(String environmentCrn, String accountId) {\n         Stack stack = stackService.getByEnvironmentCrnAndAccountIdWithLists(environmentCrn, accountId);\n-        InstanceMetaData master = findMaster(stack);\n-        Optional<RPCResponse<Boolean>> rpcResponse = Optional.empty();\n-        try {\n-            rpcResponse = Optional.ofNullable(checkFreeIpaHealth(stack, master));\n-        } catch (FreeIpaClientException e) {\n-            LOGGER.error(\"Unable to check the health of FreeIPA.\", e);\n+        List<InstanceMetaData> instances = stack.getAllInstanceMetaDataList();\n+        HealthDetailsFreeIpaResponse response = new HealthDetailsFreeIpaResponse();\n+\n+        for (int idx = 0; idx < instances.size(); idx++) {\n+            InstanceMetaData instance =  instances.get(idx);\n+            if (isInstanceAvailable(instance, response)) {\n+                try {\n+                    RPCResponse<Boolean> rpcResponse = checkFreeIpaHealth(stack,  instance);\n+                    parseMessages(rpcResponse, response);\n+                } catch (FreeIpaClientException e) {\n+                    NodeHealthDetails nodeResponse = new NodeHealthDetails();\n+                    response.addNodeHealthDetailsFreeIpaResponses(nodeResponse);\n+                    nodeResponse.setName(instance.getDiscoveryFQDN());\n+                    nodeResponse.setStatus(InstanceStatus.UNREACHABLE);\n+                    nodeResponse.addIssue(e.getLocalizedMessage());\n+                    LOGGER.error(String.format(\"Unable to check the health of FreeIPA instance: %s\", instance.getInstanceId()), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYyNjA1NA==", "bodyText": "this is not needed anymore I think", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#discussion_r399626054", "createdAt": "2020-03-28T06:14:43Z", "author": {"login": "lacikaaa"}, "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/stack/FreeIpaHealthDetailsService.java", "diffHunk": "@@ -45,6 +45,11 @@\n \n     private static final Pattern NEW_NODE_PATTERN = Pattern.compile(\"Check connection from master to remote replica '(.[^\\']*)\");\n \n+    private static final String WRONG_MASTER_MESSAGE = \"invalid 'cn': must be\";\n+\n+    @Value(\"${freeipa.healthcheck.max-retries:3}\")\n+    private int maxRetries;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/e44ca956b8b3e4fcd91ed75f6233126ff0692d9f", "committedDate": "2020-03-28T05:23:39Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}, "afterCommit": {"oid": "c1891efbcb8df5492cd81f269e9116265063cd83", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c1891efbcb8df5492cd81f269e9116265063cd83", "committedDate": "2020-03-29T07:09:37Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c16131f88d4ed6c4962b158792f19c8cb199d57e", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c16131f88d4ed6c4962b158792f19c8cb199d57e", "committedDate": "2020-03-30T15:06:01Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1891efbcb8df5492cd81f269e9116265063cd83", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c1891efbcb8df5492cd81f269e9116265063cd83", "committedDate": "2020-03-29T07:09:37Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}, "afterCommit": {"oid": "c16131f88d4ed6c4962b158792f19c8cb199d57e", "author": {"user": {"login": "holleyism", "name": "Adam Holley"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/c16131f88d4ed6c4962b158792f19c8cb199d57e", "committedDate": "2020-03-30T15:06:01Z", "message": "CB-6225: health check not returning status of all hosts.\n\nThis patch changes the health check to return individual\nhealth of all HA nodes. The cn of the server_conncheck API\nmust be the host that the client is connected to. So we\nexposed the connected hostname to use as the first parameter\nof the API call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTUxOTYx", "url": "https://github.com/hortonworks/cloudbreak/pull/7633#pullrequestreview-383951961", "createdAt": "2020-03-30T15:08:00Z", "commit": {"oid": "c16131f88d4ed6c4962b158792f19c8cb199d57e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2497, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}