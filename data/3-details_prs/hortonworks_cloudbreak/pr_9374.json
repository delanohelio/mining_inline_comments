{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTk3NjU1", "number": 9374, "title": "CB-8962: Added a Cloudwatch alarm to each AWS instance created.", "bodyText": "Jira: https://jira.cloudera.com/browse/CB-8962\nWe specifically wanted to extend the FreeIPA Cloudwatch alarm feature to all AWS nodes created. In order to do this I simply rolled back the specific FreeIPA logic that added a Cloudwatch parameter to the Cloudstacks created for the instances, and removed the check for that parameter in the Cloudwatch alarm parameter.\nAs far as I know, removing this check will simply cause all AWS instances created by cloudbreak to create the Cloudwatch alarm by default. Please let me know if I am forgetting or overlooking something that could possibly break by removing this check.\nAll of the logic for automatically removing the Cloudwatch alarm when the instances are terminated, or on some failure, already exists from the FreeIPA changes made before and is still in use.\nI tested this by setting up a light duty and medium duty environment/datalake locally, running both the core cloudbreak service and the FreeIPA service locally. I ensured that both cases created the same alarm for all instances as shown in the images below:\n\nAll Nodes with Alarms\nAlarm per Node\n\nI am not really sure why the alarm count went down from 2 to 1 (previously each node had 2 of the same alarms), but we can discuss this and why it is happening after the unplug days.", "createdAt": "2020-11-04T07:41:04Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9374", "merged": true, "mergeCommit": {"oid": "32242dfb30c5522f34ebb834afbc34b7603f4523"}, "closed": true, "closedAt": "2020-11-24T22:05:08Z", "author": {"login": "sxxgrc"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZJLrzgBqjM5NTYzMTIyMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfwMIhgFqTUzNzkwNTg1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "212c8e9895c639bdd3abaed97ce607f5f05c2a1d", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/212c8e9895c639bdd3abaed97ce607f5f05c2a1d", "committedDate": "2020-11-04T07:31:18Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "466740ff70a2c422fbd79744dc626098d7e3e011", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/466740ff70a2c422fbd79744dc626098d7e3e011", "committedDate": "2020-11-04T08:06:54Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "466740ff70a2c422fbd79744dc626098d7e3e011", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/466740ff70a2c422fbd79744dc626098d7e3e011", "committedDate": "2020-11-04T08:06:54Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "d2e68dc7b992344e243d58eb487e8b16e099366e", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d2e68dc7b992344e243d58eb487e8b16e099366e", "committedDate": "2020-11-04T08:41:06Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2e68dc7b992344e243d58eb487e8b16e099366e", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d2e68dc7b992344e243d58eb487e8b16e099366e", "committedDate": "2020-11-04T08:41:06Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "committedDate": "2020-11-04T09:06:33Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/7627dd7f3eb04a8c1cb36647837e5339d4739f3b", "committedDate": "2020-11-04T09:06:33Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "fc540f4ea31f2568d200a7968d943485c068e387", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fc540f4ea31f2568d200a7968d943485c068e387", "committedDate": "2020-11-09T19:59:21Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc540f4ea31f2568d200a7968d943485c068e387", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fc540f4ea31f2568d200a7968d943485c068e387", "committedDate": "2020-11-09T19:59:21Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "523aef9f89af91e88374533f4cb0264e96d172d5", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/523aef9f89af91e88374533f4cb0264e96d172d5", "committedDate": "2020-11-09T23:05:04Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "523aef9f89af91e88374533f4cb0264e96d172d5", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/523aef9f89af91e88374533f4cb0264e96d172d5", "committedDate": "2020-11-09T23:05:04Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "fe8fc664aec16beca6ac63a75c537396a9c0ab45", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fe8fc664aec16beca6ac63a75c537396a9c0ab45", "committedDate": "2020-11-10T21:07:07Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe8fc664aec16beca6ac63a75c537396a9c0ab45", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/fe8fc664aec16beca6ac63a75c537396a9c0ab45", "committedDate": "2020-11-10T21:07:07Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "689f115238921c318e3458e89a1e8027a5f3bb79", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/689f115238921c318e3458e89a1e8027a5f3bb79", "committedDate": "2020-11-10T23:08:36Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDAwNTA0", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-532400504", "createdAt": "2020-11-17T14:12:31Z", "commit": {"oid": "689f115238921c318e3458e89a1e8027a5f3bb79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMjozMVrOH02t6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNDoxMjozMVrOH02t6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NDQ4OQ==", "bodyText": "please remove these comments, they don't have any extra information", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r525184489", "createdAt": "2020-11-17T14:12:31Z", "author": {"login": "lacikaaa"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,48 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        // Grab the CloudWatch client.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689f115238921c318e3458e89a1e8027a5f3bb79"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "689f115238921c318e3458e89a1e8027a5f3bb79", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/689f115238921c318e3458e89a1e8027a5f3bb79", "committedDate": "2020-11-10T23:08:36Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8bb657338cfc4b5e1904706583d7b31b4c518497", "committedDate": "2020-11-17T17:15:08Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzg2ODkz", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533386893", "createdAt": "2020-11-18T12:17:33Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNzozM1rOH1rEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNzozM1rOH1rEnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjI2OA==", "bodyText": "I guess we should log the error message somewhere here", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526042268", "createdAt": "2020-11-18T12:17:33Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n+        instances.stream().forEach(instance -> {\n+            try {\n+                PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n+                metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n+                metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n+                metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n+                metricAlarmRequest.setStatistic(\"Maximum\");\n+                metricAlarmRequest.setNamespace(\"AWS/EC2\");\n+                metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n+                metricAlarmRequest.setPeriod(cloudwatchPeriod);\n+                metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n+                metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n+                metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n+                amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n+                LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n+            } catch (AmazonCloudWatchException acwe) {\n+                LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzg3MTI5", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533387129", "createdAt": "2020-11-18T12:17:52Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNzo1M1rOH1rFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxNzo1M1rOH1rFNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MjQyMw==", "bodyText": "do we need any helm chart change because of the renamed property?", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526042423", "createdAt": "2020-11-18T12:17:53Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzg3ODcw", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533387870", "createdAt": "2020-11-18T12:18:54Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxODo1NFrOH1rHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxODo1NFrOH1rHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzAxOA==", "bodyText": "I think instancemetadata also contains this information", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526043018", "createdAt": "2020-11-18T12:18:54Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -86,20 +83,18 @@ public void deleteCloudWatchAlarmsForSystemFailures(CloudStack stack, String reg\n     }\n \n     public void deleteCloudWatchAlarmsForSystemFailures(CloudStack stack, String regionName, AwsCredentialView credentialView, List<String> instanceIds) {\n-        if (isCloudwatchEnabled(stack)) {\n-            List<String> instanceIdsFromStack = stack.getGroups().stream()\n-                    .flatMap(group -> group.getInstances().stream())\n-                    .map(CloudInstance::getInstanceId)\n-                    .collect(Collectors.toList());\n-            List<String> instanceIdsNotInStack = instanceIds.stream()\n-                    .filter(instanceId -> !instanceIdsFromStack.contains(instanceId))\n-                    .collect(Collectors.toList());\n-            if (!instanceIdsNotInStack.isEmpty()) {\n-                LOGGER.warn(\"Instance IDs [{}] are not part of cloud stack {}, these instances may have already been deleted on the cloud provider side.\",\n-                        instanceIdsFromStack, stack);\n-            }\n-            deleteCloudWatchAlarmsForSystemFailures(regionName, credentialView, instanceIds);\n+        List<String> instanceIdsFromStack = stack.getGroups().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzg4MzY5", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533388369", "createdAt": "2020-11-18T12:19:35Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxOTozNVrOH1rJCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoxOTozNVrOH1rJCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0MzQwMg==", "bodyText": "I guess we should log the error somewhere here", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526043402", "createdAt": "2020-11-18T12:19:35Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -116,16 +111,17 @@ private void deleteCloudWatchAlarmsForSystemFailures(String regionName, AwsCrede\n \n     private Stream<List<String>> getExistingCloudWatchAlarms(String regionName, AwsCredentialView credentialView, List<String> alarmNames) {\n         Stream<List<String>> filteredAlarmNamesStream;\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n         try {\n             DescribeAlarmsRequest request = new DescribeAlarmsRequest().withAlarmNames(alarmNames).withMaxRecords(maxBatchsize);\n-            AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n             List<String> filteredAlarmNames = amazonCloudWatchClient.describeAlarms(request).getMetricAlarms().stream()\n                     .map(MetricAlarm::getAlarmName)\n                     .collect(Collectors.toList());\n             filteredAlarmNamesStream = Stream.of(filteredAlarmNames);\n             LOGGER.debug(\"Checking cloudwatch alarms [{}] for existence and found [{}]\", alarmNames, filteredAlarmNames);\n         } catch (AmazonCloudWatchException acwe) {\n-            LOGGER.error(\"Unable to describe cloudwatch alarms falling back to delete all alarms indivdually [{}]: {}\", alarmNames, acwe.getLocalizedMessage());\n+            LOGGER.error(\"Unable to describe cloudwatch alarms falling back to delete all alarms individually [{}]: {}\", alarmNames, acwe.getLocalizedMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzg5NTg0", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533389584", "createdAt": "2020-11-18T12:20:50Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMDo1MFrOH1rLqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMDo1MFrOH1rLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDA3NA==", "bodyText": "this is a mock bean here but there is no assertion or verification on this", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526044074", "createdAt": "2020-11-18T12:20:50Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/test/java/com/sequenceiq/cloudbreak/cloud/aws/component/AwsLaunchTest.java", "diffHunk": "@@ -156,6 +157,9 @@\n     @MockBean\n     private CustomAmazonWaiterProvider customAmazonWaiterProvider;\n \n+    @MockBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzkwNTcw", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-533390570", "createdAt": "2020-11-18T12:22:07Z", "commit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMjowN1rOH1rOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjoyMjowN1rOH1rOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA0NDc5NA==", "bodyText": "is it possible to create multiple cloudwatch alarms with one request to aws?", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#discussion_r526044794", "createdAt": "2020-11-18T12:22:07Z", "author": {"login": "doktoric"}, "path": "cloud-aws/src/main/java/com/sequenceiq/cloudbreak/cloud/aws/connector/resource/AwsCloudWatchService.java", "diffHunk": "@@ -34,47 +32,46 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(AwsCloudWatchService.class);\n \n-    @Value(\"${freeipa.aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n+    @Value(\"${aws.cloudwatch.suffix:-Status-Check-Failed-System}\")\n     private String alarmSuffix;\n \n-    @Value(\"${freeipa.aws.cloudwatch.period:60}\")\n+    @Value(\"${aws.cloudwatch.period:60}\")\n     private int cloudwatchPeriod;\n \n-    @Value(\"${freeipa.aws.cloudwatch.evaluationPeriods:2}\")\n+    @Value(\"${aws.cloudwatch.evaluationPeriods:2}\")\n     private int cloudwatchEvaluationPeriods;\n \n-    @Value(\"${freeipa.aws.cloudwatch.threshold:1.0}\")\n+    @Value(\"${aws.cloudwatch.threshold:1.0}\")\n     private double cloudwatchThreshhold;\n \n-    @Value(\"${freeipa.aws.cloudwatch.max-batchsize:100}\")\n+    @Value(\"${aws.cloudwatch.max-batchsize:100}\")\n     private int maxBatchsize;\n \n     @Inject\n     private AwsClient awsClient;\n \n-    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, CloudStack stack, String regionName, AwsCredentialView credentialView) {\n-        if (isCloudwatchEnabled(stack)) {\n-            instances.stream().forEach(instance -> {\n-                try {\n-                    PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n-                    metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n-                    metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n-                    metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n-                    metricAlarmRequest.setStatistic(\"Maximum\");\n-                    metricAlarmRequest.setNamespace(\"AWS/EC2\");\n-                    metricAlarmRequest.setDimensions(Arrays.asList(new Dimension().withName(\"InstanceId\").withValue(instance.getInstanceId())));\n-                    metricAlarmRequest.setPeriod(cloudwatchPeriod);\n-                    metricAlarmRequest.setEvaluationPeriods(cloudwatchEvaluationPeriods);\n-                    metricAlarmRequest.setThreshold(cloudwatchThreshhold);\n-                    metricAlarmRequest.setComparisonOperator(\"GreaterThanOrEqualToThreshold\");\n-                    AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n-                    amazonCloudWatchClient.putMetricAlarm(metricAlarmRequest);\n-                    LOGGER.debug(\"Created cloudwatch alarm for instanceId {}.\", instance.getInstanceId());\n-                } catch (AmazonCloudWatchException acwe) {\n-                    LOGGER.error(\"Unable to create cloudwatch alarm for instanceId {}: {}\", instance.getInstanceId(), acwe.getLocalizedMessage());\n-                }\n-            });\n-        }\n+    public void addCloudWatchAlarmsForSystemFailures(List<CloudResource> instances, String regionName, AwsCredentialView credentialView) {\n+        AmazonCloudWatchClient amazonCloudWatchClient = awsClient.createCloudWatchClient(credentialView, regionName);\n+\n+        instances.stream().forEach(instance -> {\n+            try {\n+                PutMetricAlarmRequest metricAlarmRequest = new PutMetricAlarmRequest();\n+                metricAlarmRequest.setAlarmActions(Arrays.asList(\"arn:aws:automate:\" + regionName + \":ec2:recover\"));\n+                metricAlarmRequest.setAlarmName(instance.getInstanceId() + alarmSuffix);\n+                metricAlarmRequest.setMetricName(\"StatusCheckFailed_System\");\n+                metricAlarmRequest.setStatistic(\"Maximum\");\n+                metricAlarmRequest.setNamespace(\"AWS/EC2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bb657338cfc4b5e1904706583d7b31b4c518497", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8bb657338cfc4b5e1904706583d7b31b4c518497", "committedDate": "2020-11-17T17:15:08Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "715b199943d78b0731693604a3c90b2fc8c92101", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/715b199943d78b0731693604a3c90b2fc8c92101", "committedDate": "2020-11-18T23:44:51Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "715b199943d78b0731693604a3c90b2fc8c92101", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/715b199943d78b0731693604a3c90b2fc8c92101", "committedDate": "2020-11-18T23:44:51Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "788c9054e6d17680e951f0d42300df63625ecd14", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/788c9054e6d17680e951f0d42300df63625ecd14", "committedDate": "2020-11-18T23:49:00Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628ca707aa9165a8e9faa5d8d027a308905bdfa6", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/628ca707aa9165a8e9faa5d8d027a308905bdfa6", "committedDate": "2020-11-19T00:05:28Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "788c9054e6d17680e951f0d42300df63625ecd14", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/788c9054e6d17680e951f0d42300df63625ecd14", "committedDate": "2020-11-18T23:49:00Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}, "afterCommit": {"oid": "628ca707aa9165a8e9faa5d8d027a308905bdfa6", "author": {"user": {"login": "sxxgrc", "name": "Santiago Garcia Acosta"}}, "url": "https://github.com/hortonworks/cloudbreak/commit/628ca707aa9165a8e9faa5d8d027a308905bdfa6", "committedDate": "2020-11-19T00:05:28Z", "message": "CB-8962: Added a Cloudwatch alarm to each AWS datalake instance created."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTA1ODU2", "url": "https://github.com/hortonworks/cloudbreak/pull/9374#pullrequestreview-537905856", "createdAt": "2020-11-24T20:57:35Z", "commit": {"oid": "628ca707aa9165a8e9faa5d8d027a308905bdfa6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2079, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}