{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODY2ODY2", "number": 9073, "title": "CB-8703 Rotate the CM host certificates", "bodyText": "CB-8703 Rotate the CM host certificates:\n\nnew internal API call on StackV4Controller: rotateCertificates\nnew flow for certificates rotation: ClusterCertificatesRotationFlowConfig\ncurrently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\nHost certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request", "createdAt": "2020-09-23T15:32:46Z", "url": "https://github.com/hortonworks/cloudbreak/pull/9073", "merged": true, "mergeCommit": {"oid": "aecd01f2c545889ca64c474c276331f32eb06329"}, "closed": true, "closedAt": "2020-09-30T10:14:53Z", "author": {"login": "schfeca75"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLvKCLABqjM3OTkwMDU3NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN5yA0AFqTQ5OTI2OTUxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8514cdcccb38dd16f445f36ee65ae01b3ca6ad4", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d8514cdcccb38dd16f445f36ee65ae01b3ca6ad4", "committedDate": "2020-09-23T15:31:38Z", "message": "CB-8703 Rotate the CM host certificates"}, "afterCommit": {"oid": "20e444badf56202fa0a06c8f54fae10f80cf3ec8", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/20e444badf56202fa0a06c8f54fae10f80cf3ec8", "committedDate": "2020-09-23T16:26:02Z", "message": "CB-8703 Rotate the CM host certificates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20e444badf56202fa0a06c8f54fae10f80cf3ec8", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/20e444badf56202fa0a06c8f54fae10f80cf3ec8", "committedDate": "2020-09-23T16:26:02Z", "message": "CB-8703 Rotate the CM host certificates"}, "afterCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/dcdbc7de12cfa1e93ef818255c0c22149e13edf0", "committedDate": "2020-09-28T13:25:14Z", "message": "CB-8703 Rotate the CM host certificates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTU2NjU5", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497556659", "createdAt": "2020-09-28T14:15:09Z", "commit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoxNTowOVrOHY_xJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoxNTowOVrOHY_xJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3MjY0NA==", "bodyText": "could you refactor this into smaller parts or move the logic into a separate class?", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495972644", "createdAt": "2020-09-28T14:15:09Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityService.java", "diffHunk": "@@ -313,6 +330,45 @@ public String getMasterKey() {\n         return securityConfigProvider.getMasterKey(stack.getCluster());\n     }\n \n+    @Override\n+    public void rotateHostCertificates() throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTU5NjU4", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497559658", "createdAt": "2020-09-28T14:18:21Z", "commit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoxODoyMVrOHY_5iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoxODoyMVrOHY_5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk3NDc5Mg==", "bodyText": "I think the stacktrace should be logged", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495974792", "createdAt": "2020-09-28T14:18:21Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityService.java", "diffHunk": "@@ -313,6 +330,45 @@ public String getMasterKey() {\n         return securityConfigProvider.getMasterKey(stack.getCluster());\n     }\n \n+    @Override\n+    public void rotateHostCertificates() throws CloudbreakException {\n+        Cluster cluster = stack.getCluster();\n+        String user = cluster.getCloudbreakAmbariUser();\n+        String password = cluster.getCloudbreakAmbariPassword();\n+        try {\n+            ApiClient client = getClient(stack.getGatewayPort(), user, password, clientConfig);\n+            HostsResourceApi hostsResourceApi = clouderaManagerApiFactory.getHostsResourceApi(client);\n+            BatchResourceApi batchResourceApi = clouderaManagerApiFactory.getBatchResourceApi(client);\n+            ApiHostList hostList = hostsResourceApi.readHosts(null, null, \"SUMMARY\");\n+            List<ApiBatchRequestElement> batchRequestElements = hostList.getItems().stream()\n+                    .filter(host -> host.getClusterRef() != null)\n+                    .map(host -> new ApiBatchRequestElement()\n+                            .method(HTTPMethod.POST)\n+                            .url(ClouderaManagerApiClientProvider.API_V_31 + \"/hosts/\" + host.getHostId() + \"/commands/generateHostCerts\")\n+                            .body(\"{}\")\n+                            .acceptType(\"application/json\")\n+                            .contentType(\"application/json\"))\n+                    .collect(Collectors.toList());\n+            ApiBatchRequest batchRequest = new ApiBatchRequest().items(batchRequestElements);\n+            ApiBatchResponse apiBatchResponse = batchResourceApi.execute(batchRequest);\n+            if (apiBatchResponse.getSuccess()) {\n+                List<BigDecimal> ids = apiBatchResponse.getItems().stream()\n+                        .map(bre -> new Json((String) bre.getResponse()).getSilent(ApiCommand.class).getId())\n+                        .collect(Collectors.toList());\n+                PollingResult pollingResult = clouderaManagerPollingServiceProvider.startPollingCommandList(stack, client, ids, \"Rotate host certificates\");\n+                if (PollingResult.isExited(pollingResult)) {\n+                    throw new CancellationException(\"Cluster was terminated during rotation of host certificates\");\n+                } else if (PollingResult.isTimeout(pollingResult)) {\n+                    throw new ClouderaManagerOperationFailedException(\"Timeout while Cloudera Manager rotates the host certificates.\");\n+                }\n+            } else {\n+                throw new ClouderaManagerOperationFailedException(\"Host certificates rotation batch operation failed: \" + apiBatchResponse);\n+            }\n+        } catch (ApiException | ClouderaManagerClientInitException e) {\n+            throw new CloudbreakException(\"Can't rotate the host certificates due to: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTY5NDM2", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497569436", "createdAt": "2020-09-28T14:28:06Z", "commit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyODowNlrOHZAVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDoyODowNlrOHZAVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MTk4Nw==", "bodyText": "could you refactor? for could be a separate method and the if could be also", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495981987", "createdAt": "2020-09-28T14:28:06Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/AbstractClouderaManagerCommandListCheckerTask.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiHostRef;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerCommandListPollerObject;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public abstract class AbstractClouderaManagerCommandListCheckerTask<T extends ClouderaManagerCommandListPollerObject>\n+        extends AbstractClouderaManagerApiCheckerTask<T> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractClouderaManagerCommandListCheckerTask.class);\n+\n+    protected AbstractClouderaManagerCommandListCheckerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+    }\n+\n+    protected boolean doStatusCheck(T pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTcxNjgx", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497571681", "createdAt": "2020-09-28T14:30:15Z", "commit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMDoxNVrOHZAcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMDoxNVrOHZAcEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4MzYzMg==", "bodyText": "this could be also a separate method", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495983632", "createdAt": "2020-09-28T14:30:15Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/AbstractClouderaManagerCommandListCheckerTask.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiHostRef;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerCommandListPollerObject;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public abstract class AbstractClouderaManagerCommandListCheckerTask<T extends ClouderaManagerCommandListPollerObject>\n+        extends AbstractClouderaManagerApiCheckerTask<T> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractClouderaManagerCommandListCheckerTask.class);\n+\n+    protected AbstractClouderaManagerCommandListCheckerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+    }\n+\n+    protected boolean doStatusCheck(T pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        List<ApiCommand> failedCommands = new ArrayList<>();\n+        for (BigDecimal commandId : pollerObject.getIdList()) {\n+            ApiCommand apiCommand = commandsResourceApi.readCommand(commandId);\n+            if (apiCommand.getActive()) {\n+                LOGGER.debug(\"Command [\" + getCommandName() + \"] with id [\" + commandId + \"] is active, so it hasn't finished yet\");\n+                return false;\n+            } else if (!apiCommand.getSuccess()) {\n+                failedCommands.add(apiCommand);\n+            }\n+        }\n+        if (!failedCommands.isEmpty()) {\n+            String message = failedCommands.stream().map(cmd -> {\n+                String resultMessage = cmd.getResultMessage();\n+                List<String> detailedMessages = parseResultMessageFromChildren(cmd.getChildren());\n+                ApiHostRef hostRef = cmd.getHostRef();\n+                String hostRefStr = hostRef == null ? \"Unknown\" : hostRef.getHostname();\n+                return \"Command [\" + cmd.getName() + \":\" + cmd.getId() + \"] failed on host [\" + hostRefStr + \"]: \" + resultMessage +\n+                        \". Detailed messages: \" + String.join(\"\\n\", detailedMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTc0NDIw", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497574420", "createdAt": "2020-09-28T14:32:48Z", "commit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMjo0OVrOHZAjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozMjo0OVrOHZAjvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk4NTU5Nw==", "bodyText": "please avoid in the middle returns", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495985597", "createdAt": "2020-09-28T14:32:49Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/AbstractClouderaManagerCommandListCheckerTask.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiHostRef;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerCommandListPollerObject;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public abstract class AbstractClouderaManagerCommandListCheckerTask<T extends ClouderaManagerCommandListPollerObject>\n+        extends AbstractClouderaManagerApiCheckerTask<T> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractClouderaManagerCommandListCheckerTask.class);\n+\n+    protected AbstractClouderaManagerCommandListCheckerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+    }\n+\n+    protected boolean doStatusCheck(T pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        List<ApiCommand> failedCommands = new ArrayList<>();\n+        for (BigDecimal commandId : pollerObject.getIdList()) {\n+            ApiCommand apiCommand = commandsResourceApi.readCommand(commandId);\n+            if (apiCommand.getActive()) {\n+                LOGGER.debug(\"Command [\" + getCommandName() + \"] with id [\" + commandId + \"] is active, so it hasn't finished yet\");\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdbc7de12cfa1e93ef818255c0c22149e13edf0"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTgzMjE1", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497583215", "createdAt": "2020-09-28T14:39:10Z", "commit": {"oid": "719ef35e1071f6092bbb5e6d9717245ee571aea8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOToxMFrOHZA1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDozOToxMFrOHZA1Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MDExMQ==", "bodyText": "internal endpoints should use crn instead of name if possible", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495990111", "createdAt": "2020-09-28T14:39:10Z", "author": {"login": "lacikaaa"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/StackV4Endpoint.java", "diffHunk": "@@ -411,4 +414,11 @@ RestoreV4Response restoreDatabaseByName(@PathParam(\"workspaceId\") Long workspace\n     RestoreV4Response restoreDatabaseByNameInternal(@PathParam(\"workspaceId\") Long workspaceId, @PathParam(\"name\") String name,\n             @QueryParam(\"backupLocation\") String backupLocation, @QueryParam(\"backupId\") String backupId,\n             @QueryParam(\"initiatorUserCrn\") String initiatorUserCrn);\n+\n+    @PUT\n+    @Path(\"internal/{name}/rotate_certificates\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719ef35e1071f6092bbb5e6d9717245ee571aea8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NTg5MTQw", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497589140", "createdAt": "2020-09-28T14:41:37Z", "commit": {"oid": "719ef35e1071f6092bbb5e6d9717245ee571aea8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MTozN1rOHZA8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo0MTozN1rOHZA8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk5MTkzMg==", "bodyText": "please implement toString()", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r495991932", "createdAt": "2020-09-28T14:41:37Z", "author": {"login": "lacikaaa"}, "path": "core-api/src/main/java/com/sequenceiq/cloudbreak/api/endpoint/v4/stacks/request/CertificatesRotationV4Request.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.request;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.stacks.base.CertificateRotationType;\n+import com.sequenceiq.cloudbreak.doc.ModelDescriptions.ClusterModelDescription;\n+import com.sequenceiq.common.model.JsonEntity;\n+\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+\n+@ApiModel\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class CertificatesRotationV4Request implements JsonEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719ef35e1071f6092bbb5e6d9717245ee571aea8"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "719ef35e1071f6092bbb5e6d9717245ee571aea8", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/719ef35e1071f6092bbb5e6d9717245ee571aea8", "committedDate": "2020-09-28T14:24:48Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}, "afterCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d038869a998198648ae4235b10c663fa06bf6288", "committedDate": "2020-09-28T14:47:37Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjE5MDA4", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497619008", "createdAt": "2020-09-28T14:58:37Z", "commit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1ODozN1rOHZB7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNDo1ODozN1rOHZB7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAwNzk3Nw==", "bodyText": "wrong class", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496007977", "createdAt": "2020-09-28T14:58:37Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/certrotate/ClusterCertificatesRotationService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.certrotate;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.CloudbreakFlowMessageService;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.cloudbreak.service.StackUpdater;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n+\n+@Service\n+public class ClusterCertificatesRotationService {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterCreationService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjIyNTAz", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497622503", "createdAt": "2020-09-28T15:02:07Z", "commit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMjowN1rOHZCLoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowMjowN1rOHZCLoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxMjE5Mg==", "bodyText": "this method is a duplicate, please consider refactoring it into a common place", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496012192", "createdAt": "2020-09-28T15:02:07Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/flow2/cluster/certrotate/ClusterCertificatesRotationService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.sequenceiq.cloudbreak.core.flow2.cluster.certrotate;\n+\n+import javax.inject.Inject;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.DetailedStackStatus;\n+import com.sequenceiq.cloudbreak.api.endpoint.v4.common.Status;\n+import com.sequenceiq.cloudbreak.common.service.TransactionService;\n+import com.sequenceiq.cloudbreak.core.flow2.cluster.provision.ClusterCreationService;\n+import com.sequenceiq.cloudbreak.core.flow2.stack.CloudbreakFlowMessageService;\n+import com.sequenceiq.cloudbreak.domain.view.StackView;\n+import com.sequenceiq.cloudbreak.event.ResourceEvent;\n+import com.sequenceiq.cloudbreak.service.CloudbreakException;\n+import com.sequenceiq.cloudbreak.service.StackUpdater;\n+import com.sequenceiq.cloudbreak.service.cluster.ClusterService;\n+\n+@Service\n+public class ClusterCertificatesRotationService {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterCreationService.class);\n+\n+    @Inject\n+    private StackUpdater stackUpdater;\n+\n+    @Inject\n+    private CloudbreakFlowMessageService flowMessageService;\n+\n+    @Inject\n+    private ClusterService clusterService;\n+\n+    void initClusterCertificatesRotation(long stackId) {\n+        String statusReason = \"Rotating the certificates of the cluster.\";\n+        LOGGER.debug(statusReason);\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.CLUSTER_OPERATION, statusReason);\n+        clusterService.updateClusterStatusByStackId(stackId, Status.UPDATE_IN_PROGRESS);\n+        flowMessageService.fireEventAndLog(stackId, Status.UPDATE_IN_PROGRESS.name(), ResourceEvent.CLUSTER_CERTIFICATES_ROTATION_STARTED);\n+    }\n+\n+    void hostCertificatesRotationStarted(long stackId) {\n+        String statusReason = \"The rotation of the host certificates of the cluster has been started.\";\n+        LOGGER.debug(statusReason);\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.CLUSTER_OPERATION, statusReason);\n+        clusterService.updateClusterStatusByStackId(stackId, Status.UPDATE_IN_PROGRESS);\n+        flowMessageService.fireEventAndLog(stackId, Status.UPDATE_IN_PROGRESS.name(), ResourceEvent.CLUSTER_HOST_CERTIFICATES_ROTATION);\n+    }\n+\n+    void certificatesRotationFinished(long stackId) {\n+        clusterService.updateClusterStatusByStackId(stackId, Status.AVAILABLE);\n+        stackUpdater.updateStackStatus(stackId, DetailedStackStatus.AVAILABLE, \"Rotation of the cluster's certificates finished.\");\n+        flowMessageService.fireEventAndLog(stackId, Status.AVAILABLE.name(), ResourceEvent.CLUSTER_CERTIFICATES_ROTATION_FINISHED);\n+    }\n+\n+    void certificatesRotationFailed(StackView stackView, Exception exception) {\n+        if (stackView.getClusterView() != null) {\n+            Long stackId = stackView.getId();\n+            String errorMessage = getErrorMessageFromException(exception);\n+            clusterService.updateClusterStatusByStackId(stackId, Status.UPDATE_FAILED, errorMessage);\n+            stackUpdater.updateStackStatus(stackId, DetailedStackStatus.AVAILABLE);\n+            flowMessageService.fireEventAndLog(stackId, Status.UPDATE_FAILED.name(), ResourceEvent.CLUSTER_CERTIFICATES_ROTATION_FAILED, errorMessage);\n+        } else {\n+            LOGGER.info(\"Cluster was null. Flow action was not required.\");\n+        }\n+    }\n+\n+    private String getErrorMessageFromException(Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjI3ODc3", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497627877", "createdAt": "2020-09-28T15:07:47Z", "commit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowNzo0N1rOHZClgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTowNzo0N1rOHZClgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAxODgxOA==", "bodyText": "this is a duplicate except a few words in the message. please consider refactoring it into a common method", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496018818", "createdAt": "2020-09-28T15:07:47Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/service/ClusterCommonService.java", "diffHunk": "@@ -281,4 +283,18 @@ public FlowIdentifier updatePillarConfiguration(NameOrCrn nameOrCrn, Long worksp\n         }\n         return clusterOperationService.updatePillarConfiguration(stack);\n     }\n+\n+    public CertificatesRotationV4Response rotateClusterCertificates(NameOrCrn nameOrCrn, Long workspaceId,\n+            CertificatesRotationV4Request certificatesRotationV4Request) {\n+        Stack stack = stackService.getByNameOrCrnInWorkspace(nameOrCrn, workspaceId);\n+        MDCBuilder.buildMdcContext(stack);\n+        if (!stack.isAvailable()) {\n+            throw new BadRequestException(String.format(\n+                    \"Stack '%s' is currently in '%s' state. Certificates rotation can \"\n+                            + \"only be made when the underlying stack is 'AVAILABLE'.\",\n+                    stack.getName(),\n+                    stack.getStatus()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjMzMDkw", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-497633090", "createdAt": "2020-09-28T15:13:17Z", "commit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxMzoxOFrOHZC-QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxMzoxOFrOHZC-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyNTE1Mg==", "bodyText": "it should be an AND condition, shouldn't it?", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496025152", "createdAt": "2020-09-28T15:13:18Z", "author": {"login": "lacikaaa"}, "path": "template-manager-cmtemplate/src/main/java/com/sequenceiq/cloudbreak/cmtemplate/CMRepositoryVersionUtil.java", "diffHunk": "@@ -78,6 +80,12 @@ public static boolean isRazConfigurationSupportedInDatahub(ClouderaManagerRepo c\n         return isVersionNewerOrEqualThanLimited(clouderaManagerRepoDetails::getVersion, CLOUDERAMANAGER_VERSION_7_2_2);\n     }\n \n+    public static boolean isSudoAccessNeededForHostCertRotation(ClouderaManagerRepo clouderaManagerRepoDetails) {\n+        LOGGER.info(\"ClouderaManagerRepo is compared for Host certs rotation Sudo access\");\n+        return isVersionOlderThanLimited(clouderaManagerRepoDetails::getVersion, CLOUDERAMANAGER_VERSION_7_2_3) ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d038869a998198648ae4235b10c663fa06bf6288", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/d038869a998198648ae4235b10c663fa06bf6288", "committedDate": "2020-09-28T14:47:37Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}, "afterCommit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/328064cface88a44c0237e2ca8a94352cb111bf3", "committedDate": "2020-09-28T20:26:46Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzI2MjA4", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-498326208", "createdAt": "2020-09-29T10:25:43Z", "commit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyNTo0M1rOHZmlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyNTo0M1rOHZmlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwODYyNA==", "bodyText": "could you add unit tests?", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496608624", "createdAt": "2020-09-29T10:25:43Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/ClouderaManagerSecurityService.java", "diffHunk": "@@ -313,6 +330,25 @@ public String getMasterKey() {\n         return securityConfigProvider.getMasterKey(stack.getCluster());\n     }\n \n+    @Override\n+    public void rotateHostCertificates() throws CloudbreakException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzUwMzM1", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-498350335", "createdAt": "2020-09-29T10:59:47Z", "commit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo1OTo0OFrOHZntxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo1OTo0OFrOHZntxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyNzE0Mg==", "bodyText": "as we talked offline, please refactor this part", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#discussion_r496627142", "createdAt": "2020-09-29T10:59:48Z", "author": {"login": "lacikaaa"}, "path": "cluster-cm/src/main/java/com/sequenceiq/cloudbreak/cm/polling/task/AbstractClouderaManagerCommandListCheckerTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.sequenceiq.cloudbreak.cm.polling.task;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.cloudera.api.swagger.CommandsResourceApi;\n+import com.cloudera.api.swagger.client.ApiException;\n+import com.cloudera.api.swagger.model.ApiCommand;\n+import com.cloudera.api.swagger.model.ApiHostRef;\n+import com.sequenceiq.cloudbreak.cm.ClouderaManagerOperationFailedException;\n+import com.sequenceiq.cloudbreak.cm.client.ClouderaManagerApiPojoFactory;\n+import com.sequenceiq.cloudbreak.cm.polling.ClouderaManagerCommandListPollerObject;\n+import com.sequenceiq.cloudbreak.structuredevent.event.CloudbreakEventService;\n+\n+public abstract class AbstractClouderaManagerCommandListCheckerTask<T extends ClouderaManagerCommandListPollerObject>\n+        extends AbstractClouderaManagerApiCheckerTask<T> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractClouderaManagerCommandListCheckerTask.class);\n+\n+    protected AbstractClouderaManagerCommandListCheckerTask(ClouderaManagerApiPojoFactory clouderaManagerApiPojoFactory,\n+            CloudbreakEventService cloudbreakEventService) {\n+        super(clouderaManagerApiPojoFactory, cloudbreakEventService);\n+    }\n+\n+    protected boolean doStatusCheck(T pollerObject, CommandsResourceApi commandsResourceApi) throws ApiException {\n+        List<ApiCommand> failedCommands = new ArrayList<>();\n+        boolean commandsAreFinished = collectApiCommands(pollerObject, commandsResourceApi, failedCommands);\n+        if (commandsAreFinished) {\n+            processApiCommandResults(failedCommands);\n+        }\n+        return commandsAreFinished;\n+    }\n+\n+    private boolean collectApiCommands(T pollerObject, CommandsResourceApi commandsResourceApi, List<ApiCommand> failedCommands)  throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "328064cface88a44c0237e2ca8a94352cb111bf3", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/328064cface88a44c0237e2ca8a94352cb111bf3", "committedDate": "2020-09-28T20:26:46Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}, "afterCommit": {"oid": "48184474e607985988b0827d76d5081ee5774ac5", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/48184474e607985988b0827d76d5081ee5774ac5", "committedDate": "2020-09-29T23:18:20Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48184474e607985988b0827d76d5081ee5774ac5", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/48184474e607985988b0827d76d5081ee5774ac5", "committedDate": "2020-09-29T23:18:20Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}, "afterCommit": {"oid": "692b0df996d3a2e3e659e2d0002de039aa84d9ed", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/692b0df996d3a2e3e659e2d0002de039aa84d9ed", "committedDate": "2020-09-29T23:37:39Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70586a35f334f7d43ba20f7fb0921d9e3f40b3bb", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/70586a35f334f7d43ba20f7fb0921d9e3f40b3bb", "committedDate": "2020-09-30T09:25:54Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "692b0df996d3a2e3e659e2d0002de039aa84d9ed", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/692b0df996d3a2e3e659e2d0002de039aa84d9ed", "committedDate": "2020-09-29T23:37:39Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}, "afterCommit": {"oid": "70586a35f334f7d43ba20f7fb0921d9e3f40b3bb", "author": {"user": {"login": "schfeca75", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/70586a35f334f7d43ba20f7fb0921d9e3f40b3bb", "committedDate": "2020-09-30T09:25:54Z", "message": "CB-8703 Rotate the CM host certificates:\n* new internal API call on StackV4Controller: rotateCertificates\n* new flow for certificates rotation: ClusterCertificatesRotationFlowConfig\n* currently host certificates rotation is implemented, but there is a flow step for the CMCA rotation but it's not implemented yet\n* Host certificates rotation is implemented with BatchResourceApi, multiple host certificates rotation commands are requested in one request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MjY5NTE1", "url": "https://github.com/hortonworks/cloudbreak/pull/9073#pullrequestreview-499269515", "createdAt": "2020-09-30T09:57:28Z", "commit": {"oid": "70586a35f334f7d43ba20f7fb0921d9e3f40b3bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2239, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}