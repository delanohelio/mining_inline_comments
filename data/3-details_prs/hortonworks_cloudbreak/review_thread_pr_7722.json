{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NjEyNDMw", "number": 7722, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxMDoyNlrODuO9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNjozMFrODuZXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODA2MTUyOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzoxMDoyNlrOGAHnDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1NTo0MFrOGAkGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Nzg3MQ==", "bodyText": "I think there is only one line difference in these 2 methods. caould you refactor it? I would do something like:\nif (vm.getStatus() == InstanceStatus.STARTED) {\n    doReboot(completables, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n} else if (vm.getStatus() == InstanceStatus.STOPPED) {\n    doReboot(completables, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n}\n\nand\nprivate void doReboot(List<Completable> completables, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses, Supplier<Completable> supplier) {\n        completables.add(supplier.get()\n                .doOnError(throwable -> {\n                    LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n                })\n                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n                .subscribeOn(Schedulers.io()));\n    }", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r402777871", "createdAt": "2020-04-03T07:10:26Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +68,47 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n-            AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses);\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doStart(completables, ac, vm, statuses);\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+    }\n+\n+    private void doStart(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance start: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caff594f4c40be66afaf49faae8da8e02d13db74"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0NDU3Mg==", "bodyText": "changed", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403244572", "createdAt": "2020-04-03T18:55:40Z", "author": {"login": "holleyism"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +68,47 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n-            AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses);\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doStart(completables, ac, vm, statuses);\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+    }\n+\n+    private void doStart(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses) {\n+        AzureClient azureClient = ac.getParameter(AzureClient.class);\n+        String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+        completables.add(azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId())\n+                .doOnError(throwable -> {\n+                    LOGGER.error(\"Error happend on azure instance start: {}\", vm, throwable);\n+                    statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.FAILED, throwable.getMessage()));\n+                })\n+                .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm.getCloudInstance(), InstanceStatus.STARTED)))\n+                .subscribeOn(Schedulers.io()));\n+\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3Nzg3MQ=="}, "originalCommit": {"oid": "caff594f4c40be66afaf49faae8da8e02d13db74"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTc2NzYzOnYy", "diffSide": "RIGHT", "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNDoxNjozMFrOGAXbOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDowNzowM1rOGAnEgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNjk4Nw==", "bodyText": "so AuthenticatedContext ac is not used anymore, could you remove?\nalso could you give supplier a bit more meaningful name? thanks", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403036987", "createdAt": "2020-04-03T14:16:30Z", "author": {"login": "lacikaaa"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +69,35 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80731721d160f513f000cf307a3c529e87c277d0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI5MzMxMg==", "bodyText": "fixed", "url": "https://github.com/hortonworks/cloudbreak/pull/7722#discussion_r403293312", "createdAt": "2020-04-03T20:07:03Z", "author": {"login": "holleyism"}, "path": "cloud-azure/src/main/java/com/sequenceiq/cloudbreak/cloud/azure/AzureInstanceConnector.java", "diffHunk": "@@ -68,22 +69,35 @@ public String getConsoleOutput(AuthenticatedContext authenticatedContext, CloudI\n     public List<CloudVmInstanceStatus> reboot(AuthenticatedContext ac, List<CloudInstance> vms) {\n         LOGGER.info(\"Rebooting vms on Azure: {}\", vms.stream().map(CloudInstance::getInstanceId).collect(Collectors.toList()));\n         List<CloudVmInstanceStatus> statuses = new ArrayList<>();\n-        List<Completable> rebootCompletables = new ArrayList<>();\n-        for (CloudInstance vm : vms) {\n-            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm);\n+        List<Completable> completables = new ArrayList<>();\n+        List<CloudVmInstanceStatus> currentStatuses = check(ac, vms);\n+        for (CloudVmInstanceStatus vm : currentStatuses) {\n             AzureClient azureClient = ac.getParameter(AzureClient.class);\n-            rebootCompletables.add(azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getInstanceId())\n-                    .doOnError(throwable -> {\n-                        LOGGER.error(\"Error happend on azure instance reboot: {}\", vm, throwable);\n-                        statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.FAILED, throwable.getMessage()));\n-                    })\n-                    .doOnCompleted(() -> statuses.add(new CloudVmInstanceStatus(vm, InstanceStatus.STARTED)))\n-                    .subscribeOn(Schedulers.io()));\n+            String resourceGroupName = azureUtils.getResourceGroupName(ac.getCloudContext(), vm.getCloudInstance());\n+            if (vm.getStatus() == InstanceStatus.STARTED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.rebootVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else if (vm.getStatus() == InstanceStatus.STOPPED) {\n+                doReboot(completables, ac, vm, statuses, () -> azureClient.startVirtualMachineAsync(resourceGroupName, vm.getCloudInstance().getInstanceId()));\n+            } else {\n+                LOGGER.error(String.format(\"Unable to reboot instance %s because of invalid status %s.\",\n+                        vm.getCloudInstance().getInstanceId(), vm.getStatus().toString()));\n+            }\n         }\n-        Completable.merge(rebootCompletables).await();\n+        Completable.merge(completables).await();\n         return statuses;\n     }\n \n+    private void doReboot(List<Completable> completables, AuthenticatedContext ac, CloudVmInstanceStatus vm, List<CloudVmInstanceStatus> statuses,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAzNjk4Nw=="}, "originalCommit": {"oid": "80731721d160f513f000cf307a3c529e87c277d0"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2627, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}