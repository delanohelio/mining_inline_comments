{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mzc1ODI4", "number": 7886, "title": "CB-6347 Redbeams autosync for start/stop", "bodyText": "CB-6347 Redbeams autosync for start/stop", "createdAt": "2020-04-24T07:19:56Z", "url": "https://github.com/hortonworks/cloudbreak/pull/7886", "merged": true, "mergeCommit": {"oid": "4539ff0059f8ca28ff6efae488aeb91e9af85c5f"}, "closed": true, "closedAt": "2020-04-27T08:51:35Z", "author": {"login": "pkedvessy"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaufrkgFqTM5OTc5NjM1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbrU4nAFqTQwMDc1MDQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5Nzk2MzUx", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#pullrequestreview-399796351", "createdAt": "2020-04-24T09:42:21Z", "commit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo0MjoyMlrOGLPeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTo1ODoxNlrOGLQFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MTAwMw==", "bodyText": "You should call the unschedule at the beginning of the termination. As I see, the termination statuses are not the part of the getAutoSyncStatuses()", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414441003", "createdAt": "2020-04-24T09:42:22Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/flow/redbeams/termination/action/RedbeamsTerminationActions.java", "diffHunk": "@@ -99,6 +103,8 @@ protected Selectable createRequest(RedbeamsContext context) {\n                 // through the termination\n                 metricService.incrementMetricCounter(MetricType.DB_TERMINATION_FINISHED, context.getDBStack());\n                 dbStackService.delete(context.getDBStack());\n+                dbStackJobService.unschedule(context.getDBStack());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NzMyMw==", "bodyText": "if any error is occurring at External DB status lookup failed, you will get an NPE", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414447323", "createdAt": "2020-04-24T09:52:31Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0ODY0Nw==", "bodyText": "please use junit from jupiter package", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414448647", "createdAt": "2020-04-24T09:54:35Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/test/java/com/sequenceiq/redbeams/sync/DBStackJobServiceTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.statuschecker.service.JobService;\n+import org.junit.Before;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1MTA1OA==", "bodyText": "is STARTED  means AVAILABLE? What is the difference between STARTED and AVAILABLE?", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#discussion_r414451058", "createdAt": "2020-04-24T09:58:16Z", "author": {"login": "topolyai5"}, "path": "redbeams/src/main/java/com/sequenceiq/redbeams/sync/DBStackStatusSyncService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.sequenceiq.redbeams.sync;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import javax.inject.Inject;\n+\n+import com.sequenceiq.cloudbreak.cloud.CloudConnector;\n+import com.sequenceiq.cloudbreak.cloud.context.AuthenticatedContext;\n+import com.sequenceiq.cloudbreak.cloud.context.CloudContext;\n+import com.sequenceiq.cloudbreak.cloud.init.CloudPlatformConnectors;\n+import com.sequenceiq.cloudbreak.cloud.model.CloudCredential;\n+import com.sequenceiq.cloudbreak.cloud.model.ExternalDatabaseStatus;\n+import com.sequenceiq.cloudbreak.cloud.model.Location;\n+import com.sequenceiq.redbeams.api.model.common.DetailedDBStackStatus;\n+import com.sequenceiq.redbeams.api.model.common.Status;\n+import com.sequenceiq.redbeams.converter.cloud.CredentialToCloudCredentialConverter;\n+import com.sequenceiq.redbeams.domain.stack.DBStack;\n+import com.sequenceiq.redbeams.dto.Credential;\n+import com.sequenceiq.redbeams.service.CredentialService;\n+import com.sequenceiq.redbeams.service.stack.DBStackStatusUpdater;\n+\n+import static com.sequenceiq.cloudbreak.cloud.model.AvailabilityZone.availabilityZone;\n+import static com.sequenceiq.cloudbreak.cloud.model.Location.location;\n+import static com.sequenceiq.cloudbreak.cloud.model.Region.region;\n+\n+@Component\n+public class DBStackStatusSyncService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DBStackStatusSyncService.class);\n+\n+    @Inject\n+    private CredentialService credentialService;\n+\n+    @Inject\n+    private CredentialToCloudCredentialConverter credentialConverter;\n+\n+    @Inject\n+    private CloudPlatformConnectors cloudPlatformConnectors;\n+\n+    @Inject\n+    private DBStackStatusUpdater dbStackStatusUpdater;\n+\n+    public void sync(DBStack dbStack) {\n+        DetailedDBStackStatus detailedDBStackStatus = getDetailedDBStackStatusFromProvider(dbStack);\n+        Status status = detailedDBStackStatus.getStatus();\n+        if (!dbStack.getStatus().equals(status)) {\n+            LOGGER.debug(\":::Auto sync::: Update DB Stack Status from '{}' to '{}'\", dbStack.getStatus(), status);\n+\n+            dbStackStatusUpdater.updateStatus(dbStack.getId(), detailedDBStackStatus);\n+        }\n+    }\n+\n+    private DetailedDBStackStatus getDetailedDBStackStatusFromProvider(DBStack dbStack) {\n+        ExternalDatabaseStatus externalDatabaseStatus = getExternalDatabaseStatus(dbStack);\n+        DetailedDBStackStatus detailedDBStackStatus = null;\n+        switch (externalDatabaseStatus) {\n+            case STARTED: detailedDBStackStatus = DetailedDBStackStatus.STARTED;\n+                break;\n+            case STOPPED: detailedDBStackStatus = DetailedDBStackStatus.STOPPED;\n+                break;\n+            case STOP_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.STOP_IN_PROGRESS;\n+                break;\n+            case START_IN_PROGRESS: detailedDBStackStatus = DetailedDBStackStatus.START_IN_PROGRESS;\n+                break;\n+            default: detailedDBStackStatus = DetailedDBStackStatus.UNKNOWN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70f0cf7a5233202c53de262ce52c6941b1ffa45c", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/70f0cf7a5233202c53de262ce52c6941b1ffa45c", "committedDate": "2020-04-23T22:05:40Z", "message": "CB-6347 Redbeams autosync for start/stop"}, "afterCommit": {"oid": "49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "committedDate": "2020-04-24T14:04:04Z", "message": "CB-6347 Redbeams autosync for start/stop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/49f229b05b86f11c93cb4faa33ed01c71fb9e00b", "committedDate": "2020-04-24T14:04:04Z", "message": "CB-6347 Redbeams autosync for start/stop"}, "afterCommit": {"oid": "eb17102c2e9069a1d53cd66b5971a2160ae51af9", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/eb17102c2e9069a1d53cd66b5971a2160ae51af9", "committedDate": "2020-04-24T19:13:00Z", "message": "CB-6347 Redbeams autosync for start/stop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fb3ed3e8c376227e23f2356f549bf0e3af86797", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8fb3ed3e8c376227e23f2356f549bf0e3af86797", "committedDate": "2020-04-24T21:07:52Z", "message": "CB-6347 Redbeams autosync for start/stop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb17102c2e9069a1d53cd66b5971a2160ae51af9", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/eb17102c2e9069a1d53cd66b5971a2160ae51af9", "committedDate": "2020-04-24T19:13:00Z", "message": "CB-6347 Redbeams autosync for start/stop"}, "afterCommit": {"oid": "8fb3ed3e8c376227e23f2356f549bf0e3af86797", "author": {"user": {"login": "pkedvessy", "name": null}}, "url": "https://github.com/hortonworks/cloudbreak/commit/8fb3ed3e8c376227e23f2356f549bf0e3af86797", "committedDate": "2020-04-24T21:07:52Z", "message": "CB-6347 Redbeams autosync for start/stop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzUwNDcy", "url": "https://github.com/hortonworks/cloudbreak/pull/7886#pullrequestreview-400750472", "createdAt": "2020-04-27T08:50:47Z", "commit": {"oid": "8fb3ed3e8c376227e23f2356f549bf0e3af86797"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2240, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}