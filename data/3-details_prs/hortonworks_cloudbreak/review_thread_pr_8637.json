{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mzc0MzYz", "number": 8637, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOESQqJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOESQqJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgyNzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOG3V-rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowMjo0OFrOG3V-rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NDk3Mg==", "bodyText": "just mentioning, don't have to replace: StringUtils#isNoneEmpty could work also", "url": "https://github.com/hortonworks/cloudbreak/pull/8637#discussion_r460684972", "createdAt": "2020-07-27T07:02:48Z", "author": {"login": "lacikaaa"}, "path": "core/src/main/java/com/sequenceiq/cloudbreak/core/bootstrap/service/host/ClusterHostServiceRunner.java", "diffHunk": "@@ -414,32 +419,61 @@ private void decoratePillarWithClouderaManagerAutoTls(Cluster cluster, Map<Strin\n         }\n     }\n \n-    private void decoratePillarWithClouderaManagerLicense(Long stackId, Map<String, SaltPillarProperties> servicePillar) {\n+    private Optional<String> decoratePillarWithClouderaManagerLicense(Long stackId, Map<String, SaltPillarProperties> servicePillar) {\n         String userCrn = stackService.get(stackId).getCreator().getUserCrn();\n-\n         Account account = umsClient.getAccountDetails(userCrn, Crn.safeFromString(userCrn).getAccountId(), Optional.empty());\n-\n-        if (StringUtils.isNotEmpty(account.getClouderaManagerLicenseKey())) {\n-            LOGGER.debug(\"Got license key from UMS: {}\", account.getClouderaManagerLicenseKey());\n+        Optional<String> licenseOpt = Optional.ofNullable(account.getClouderaManagerLicenseKey());\n+        if (licenseOpt.isPresent() && isNotEmpty(licenseOpt.get())) {\n+            String license = licenseOpt.get();\n+            LOGGER.debug(\"Got license key from UMS: {}\", license);\n             servicePillar.put(\"cloudera-manager-license\",\n                     new SaltPillarProperties(\"/cloudera-manager/license.sls\",\n                             singletonMap(\"cloudera-manager\",\n-                                    singletonMap(\"license\", account.getClouderaManagerLicenseKey()))));\n+                                    singletonMap(\"license\", license))));\n         }\n+        return licenseOpt;\n     }\n \n-    private void decoratePillarWithClouderaManagerRepo(Long stackId, Long clusterId, Map<String, SaltPillarProperties> servicePillar)\n+    @VisibleForTesting\n+    void decoratePillarWithClouderaManagerRepo(Long clusterId, Map<String, SaltPillarProperties> servicePillar, Optional<String> license)\n             throws CloudbreakOrchestratorFailedException {\n-\n         ClouderaManagerRepo clouderaManagerRepo = clusterComponentConfigProvider.getClouderaManagerRepoDetails(clusterId);\n-\n         if (clouderaManagerRepo == null) {\n             throw new CloudbreakOrchestratorFailedException(\"Cloudera Manager repository details are missing.\");\n         }\n-\n         servicePillar.put(\"cloudera-manager-repo\", new SaltPillarProperties(\"/cloudera-manager/repo.sls\",\n-                singletonMap(\"cloudera-manager\", singletonMap(\"repo\", clouderaManagerRepo))));\n+                singletonMap(\"cloudera-manager\", createCMRepoPillar(clouderaManagerRepo, license))));\n+\n+    }\n \n+    private Map<String, Object> createCMRepoPillar(ClouderaManagerRepo clouderaManagerRepo, Optional<String> license) {\n+        Map<String, Object> pillarValues = new HashMap<>();\n+        pillarValues.put(\"repo\", clouderaManagerRepo);\n+        parseLicense(license).ifPresent(jsonLicense -> {\n+            String username = jsonLicense.getPaywallUsername();\n+            String password = jsonLicense.getPaywallPassword();\n+            if (isNotEmpty(username) && isNotEmpty(password)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a84b423fae1dc1f960a4b6cddef20df9ad967338"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}