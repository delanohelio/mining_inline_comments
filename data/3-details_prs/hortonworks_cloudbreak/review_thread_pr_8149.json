{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjQ1NTA1", "number": 8149, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNTowNFrOD_KA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNzozMVrOD_KBSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUwOTUxOnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/ClusterStateEvaluator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNTowNFrOGZrctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzozMzoyMFrOGZ3e0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTQ0NA==", "bodyText": "The handler for this ends up putting a cluster in the SUSPENDED state even if it already in the SUSPENDED state, which will end up being an unnecessary DB operation every minute for STOPPED clusters. Would be useful to avoid that.\nAlso, this will result in all known clusters being polled every minute from Cloudbreak. I think we should introduce a more light weigh API than the on that returns all Stack details (obviously a different PR for this).", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429579444", "createdAt": "2020-05-23T21:25:04Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/ClusterStateEvaluator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.periscope.monitor.evaluator;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.periscope.monitor.context.ClusterIdEvaluatorContext;\n+import com.sequenceiq.periscope.monitor.context.EvaluatorContext;\n+import com.sequenceiq.periscope.monitor.event.UpdateFailedEvent;\n+\n+@Component(\"ClusterStateEvaluator\")\n+@Scope(\"prototype\")\n+public class ClusterStateEvaluator extends EvaluatorExecutor {\n+\n+    private static final String EVALUATOR_NAME = ClusterStateEvaluator.class.getName();\n+\n+    @Inject\n+    private EventPublisher eventPublisher;\n+\n+    private long clusterId;\n+\n+    @Override\n+    public void setContext(EvaluatorContext context) {\n+        clusterId = (long) context.getData();\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public EvaluatorContext getContext() {\n+        return new ClusterIdEvaluatorContext(clusterId);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return EVALUATOR_NAME;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        eventPublisher.publishEvent(new UpdateFailedEvent(clusterId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NjU5NA==", "bodyText": "Removed DB Hit. For CB Sync optimization I have already created this jira. https://jira.cloudera.com/browse/CB-6619", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429776594", "createdAt": "2020-05-25T07:33:20Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/monitor/evaluator/ClusterStateEvaluator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.periscope.monitor.evaluator;\n+\n+import javax.annotation.Nonnull;\n+import javax.inject.Inject;\n+\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import com.sequenceiq.periscope.monitor.context.ClusterIdEvaluatorContext;\n+import com.sequenceiq.periscope.monitor.context.EvaluatorContext;\n+import com.sequenceiq.periscope.monitor.event.UpdateFailedEvent;\n+\n+@Component(\"ClusterStateEvaluator\")\n+@Scope(\"prototype\")\n+public class ClusterStateEvaluator extends EvaluatorExecutor {\n+\n+    private static final String EVALUATOR_NAME = ClusterStateEvaluator.class.getName();\n+\n+    @Inject\n+    private EventPublisher eventPublisher;\n+\n+    private long clusterId;\n+\n+    @Override\n+    public void setContext(EvaluatorContext context) {\n+        clusterId = (long) context.getData();\n+    }\n+\n+    @Override\n+    @Nonnull\n+    public EvaluatorContext getContext() {\n+        return new ClusterIdEvaluatorContext(clusterId);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return EVALUATOR_NAME;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        eventPublisher.publishEvent(new UpdateFailedEvent(clusterId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTQ0NA=="}, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUxMDAxOnYy", "diffSide": "RIGHT", "path": "autoscale/src/test/java/com/sequenceiq/periscope/modul/rejected/RejectedThreadContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNjowNFrOGZrc7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzozMTo1N1rOGZ3cZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTUwMw==", "bodyText": "Accidental change? or should this be test. Also other places where this change is made.", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429579503", "createdAt": "2020-05-23T21:26:04Z", "author": {"login": "sidseth"}, "path": "autoscale/src/test/java/com/sequenceiq/periscope/modul/rejected/RejectedThreadContext.java", "diffHunk": "@@ -59,6 +60,7 @@\n     @MockBean({Clock.class, ClusterService.class, CloudbreakClientConfiguration.class,\n             MetricUtils.class, InternalCrnBuilder.class, FailedNodeRepository.class})\n     @EnableAsync\n+    @Profile(\"dev\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NTk3Mw==", "bodyText": "This is correct, this context is used to setup specific thread pool size for dev mode testing.", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429775973", "createdAt": "2020-05-25T07:31:57Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/test/java/com/sequenceiq/periscope/modul/rejected/RejectedThreadContext.java", "diffHunk": "@@ -59,6 +60,7 @@\n     @MockBean({Clock.class, ClusterService.class, CloudbreakClientConfiguration.class,\n             MetricUtils.class, InternalCrnBuilder.class, FailedNodeRepository.class})\n     @EnableAsync\n+    @Profile(\"dev\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTUwMw=="}, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUxMDM3OnYy", "diffSide": "RIGHT", "path": "autoscale/src/test/java/com/sequenceiq/periscope/testcontext/EndpointTestContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNzoxM1rOGZrdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyODoyNFrOGZ3Vyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTU0OA==", "bodyText": "What should this be?", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429579548", "createdAt": "2020-05-23T21:27:13Z", "author": {"login": "sidseth"}, "path": "autoscale/src/test/java/com/sequenceiq/periscope/testcontext/EndpointTestContext.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.sequenceiq.periscope.testcontext;\n+\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.sequenceiq.cloudbreak.service.secret.service.SecretService;\n+\n+@TestConfiguration\n+@EntityScan(basePackages = {\"com.sequenceiq.periscope\"})\n+@Profile(\"test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3NDI4Mg==", "bodyText": "It is test and runs in unit test cycle.", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429774282", "createdAt": "2020-05-25T07:28:24Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/test/java/com/sequenceiq/periscope/testcontext/EndpointTestContext.java", "diffHunk": "@@ -0,0 +1,16 @@\n+package com.sequenceiq.periscope.testcontext;\n+\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Profile;\n+\n+import com.sequenceiq.cloudbreak.service.secret.service.SecretService;\n+\n+@TestConfiguration\n+@EntityScan(basePackages = {\"com.sequenceiq.periscope\"})\n+@Profile(\"test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTU0OA=="}, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUxMDQ5OnYy", "diffSide": "RIGHT", "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/EntitlementValidationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToyNzozMVrOGZrdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNzoyNzo0MVrOGZ3UfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTU2NQ==", "bodyText": "Names changes to DATAHUB_ instead of CDP_", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429579565", "createdAt": "2020-05-23T21:27:31Z", "author": {"login": "sidseth"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/EntitlementValidationService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.periscope.service;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+\n+@Service\n+public class EntitlementValidationService {\n+\n+    private static final String ALLOWED = \"ALLOWED_PLATFORM\";\n+\n+    private static final Map<String, String> PLATFORM_ENTITLEMENTS = Map.of(\n+            \"AWS\", \"CDP_AWS_AUTOSCALING\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc3Mzk0OA==", "bodyText": "ack", "url": "https://github.com/hortonworks/cloudbreak/pull/8149#discussion_r429773948", "createdAt": "2020-05-25T07:27:41Z", "author": {"login": "smaniraju"}, "path": "autoscale/src/main/java/com/sequenceiq/periscope/service/EntitlementValidationService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.sequenceiq.periscope.service;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.cache.annotation.Cacheable;\n+import org.springframework.stereotype.Service;\n+\n+import com.sequenceiq.cloudbreak.auth.altus.EntitlementService;\n+\n+@Service\n+public class EntitlementValidationService {\n+\n+    private static final String ALLOWED = \"ALLOWED_PLATFORM\";\n+\n+    private static final Map<String, String> PLATFORM_ENTITLEMENTS = Map.of(\n+            \"AWS\", \"CDP_AWS_AUTOSCALING\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3OTU2NQ=="}, "originalCommit": {"oid": "03f0a153aa7bd1856f3e256b7efdbedbfb68628d"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3244, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}