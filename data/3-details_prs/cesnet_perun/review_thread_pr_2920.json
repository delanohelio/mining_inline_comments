{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTEzNjQ4", "number": 2920, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzowMjoxMlrOEr7ROw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODoyNTo0N1rOEr86jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDk1MjkxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzowMjoxMlrOHe9gcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMjo0N1rOHhFkAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyNzA1OA==", "bodyText": "Are you sure this is the right place for these variables? Can't you use a module for attribute instead? By this, you are creating a duplicate of the key in the code.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502227058", "createdAt": "2020-10-09T07:02:12Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -112,6 +112,8 @@\n \tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n \n \tprivate static final String EXPIRATION = AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\";\n+\tprivate static final String EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":membershipExpirationRules\";\n+\tprivate static final String SPONSORED_MEMBERS_EXPIRATION_KEY = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjE5Mw==", "bodyText": "I have used static variables from module urn_perun_vo_attribute_def_def_membershipExpirationRules.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456193", "createdAt": "2020-10-14T07:22:47Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -112,6 +112,8 @@\n \tfinal static Logger log = LoggerFactory.getLogger(MembersManagerBlImpl.class);\n \n \tprivate static final String EXPIRATION = AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\";\n+\tprivate static final String EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":membershipExpirationRules\";\n+\tprivate static final String SPONSORED_MEMBERS_EXPIRATION_KEY = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyNzA1OA=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDk1OTI1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzowNDo0NFrOHe9kTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyMjo1NFrOHhFkMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyODA0NQ==", "bodyText": "I don't think \"dateMatcher\" is the right name for this variable.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502228045", "createdAt": "2020-10-09T07:04:44Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -133,6 +135,14 @@ public void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attr\n \t\t\t\t\t\tparameter + \"': \" + attrValue.get(parameter));\n \t\t\t}\n \t\t}\n+\n+\t\tparameter = doNotExpireSponsoredMembers;\n+\t\tif(keys.contains(parameter)) {\n+\t\t\tMatcher dateMatcher = expireSponsoredMembersPattern.matcher(attrValue.get(parameter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NjI0Mw==", "bodyText": "Fixed.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456243", "createdAt": "2020-10-14T07:22:54Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -133,6 +135,14 @@ public void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attr\n \t\t\t\t\t\tparameter + \"': \" + attrValue.get(parameter));\n \t\t\t}\n \t\t}\n+\n+\t\tparameter = doNotExpireSponsoredMembers;\n+\t\tif(keys.contains(parameter)) {\n+\t\t\tMatcher dateMatcher = expireSponsoredMembersPattern.matcher(attrValue.get(parameter));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyODA0NQ=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDk2OTQ5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzowODozOFrOHe9qcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyNDoxN1rOHhFnBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTYxOA==", "bodyText": "Please add also test which checks this behavior without attribute set (or with the false in value set) if not exists yet.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502229618", "createdAt": "2020-10-09T07:08:38Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");\n+\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, expirationRulesAttr);\n+\t\tattribute.setValue(rulesMap);\n+\t\tperun.getAttributesManagerBl().setAttribute(sess, createdVo, attribute);\n+\t\t//create sponsored member\n+\t\tMap<String, String> nameOfUser1 = new HashMap<>();\n+\t\tnameOfUser1.put(\"guestName\", \"Ing. Ji\u0159\u00ed Nov\u00e1k, CSc.\");\n+\t\tMember sponsoredMember = perun.getMembersManagerBl().createSponsoredMember(sess, createdVo, \"dummy\", nameOfUser1, \"secret\", sponsorUser, false);\n+\t\t//Remove sponsor\n+\t\tperun.getMembersManagerBl().removeSponsor(sess, sponsoredMember, sponsorUser);\n+\t\t//refresh from DB\n+\t\tsponsoredMember = perun.getMembersManagerBl().getMemberById(sess, sponsoredMember.getId());\n+\n+\t\tassertNotSame(\"Sponsored member without sponsor cannot expire when doNotExpireSponsoredMembers rule is set to true\", sponsoredMember.getStatus(), Status.EXPIRED);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1Njk2NQ==", "bodyText": "There is already a test, which checks the situation when the attribute is not set.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504456965", "createdAt": "2020-10-14T07:24:17Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");\n+\t\tAttribute attribute = perun.getAttributesManagerBl().getAttribute(sess, createdVo, expirationRulesAttr);\n+\t\tattribute.setValue(rulesMap);\n+\t\tperun.getAttributesManagerBl().setAttribute(sess, createdVo, attribute);\n+\t\t//create sponsored member\n+\t\tMap<String, String> nameOfUser1 = new HashMap<>();\n+\t\tnameOfUser1.put(\"guestName\", \"Ing. Ji\u0159\u00ed Nov\u00e1k, CSc.\");\n+\t\tMember sponsoredMember = perun.getMembersManagerBl().createSponsoredMember(sess, createdVo, \"dummy\", nameOfUser1, \"secret\", sponsorUser, false);\n+\t\t//Remove sponsor\n+\t\tperun.getMembersManagerBl().removeSponsor(sess, sponsoredMember, sponsorUser);\n+\t\t//refresh from DB\n+\t\tsponsoredMember = perun.getMembersManagerBl().getMemberById(sess, sponsoredMember.getId());\n+\n+\t\tassertNotSame(\"Sponsored member without sponsor cannot expire when doNotExpireSponsoredMembers rule is set to true\", sponsoredMember.getStatus(), Status.EXPIRED);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTYxOA=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDk3MDkyOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzowOToxNVrOHe9rZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyNDoyN1rOHhFnaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTg2Mg==", "bodyText": "Even there you probably can use the static variable from the module.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502229862", "createdAt": "2020-10-09T07:09:15Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzA2Nw==", "bodyText": "Fixed.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457067", "createdAt": "2020-10-14T07:24:27Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/MembersManagerEntryIntegrationTest.java", "diffHunk": "@@ -1714,6 +1717,32 @@ public void findOnlySponsoredMembers() throws Exception {\n \t\tassertTrue(members.size() == 0);\n \t}\n \n+\t@Test\n+\tpublic void removeLastSponsorWithoutExpiration() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"removeLastSponsorWithoutExpiration\");\n+\n+\t\t//Set up sponsor\n+\t\tMember sponsorMember = setUpSponsor(createdVo);\n+\t\tUser sponsorUser = perun.getUsersManagerBl().getUserByMember(sess, sponsorMember);\n+\t\tAuthzResolverBlImpl.setRole(sess, sponsorUser, createdVo, Role.SPONSOR);\n+\t\t//Set up expiration rule\n+\t\tMap<String, String> rulesMap = new LinkedHashMap<>();\n+\t\trulesMap.put(\"doNotExpireSponsoredMembers\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyOTg2Mg=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDk3ODkzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNzoxMjowNlrOHe9wLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyNDozNVrOHhFnvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTA4Nw==", "bodyText": "I would change this variable to \"shouldBeExpired = true\". It will be easier for reading.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502231087", "createdAt": "2020-10-09T07:12:06Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzE0OQ==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457149", "createdAt": "2020-10-14T07:24:35Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTA4Nw=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTE0MjA3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODowMzo0OVrOHe_TfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyNDo1NFrOHhFokA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ==", "bodyText": "I would suggest changing the new value to a non-negated version. This makes it harder to understand when you have a false value.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";\n          \n          \n            \n            \tpublic static final String expireSponsoredMembers = \"expireSponsoredMembers\";", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502256509", "createdAt": "2020-10-09T08:03:49Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -35,6 +36,7 @@\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n+\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1ODMxNw==", "bodyText": "It is also a possibility and I have no problem with it.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502258317", "createdAt": "2020-10-09T08:07:14Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -35,6 +36,7 @@\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n+\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1ODQ2Mg==", "bodyText": "Then the default is true.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502258462", "createdAt": "2020-10-09T08:07:31Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -35,6 +36,7 @@\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n+\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzM2MA==", "bodyText": "OK, reworked.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457360", "createdAt": "2020-10-14T07:24:54Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractMembershipExpirationRulesModule.java", "diffHunk": "@@ -35,6 +36,7 @@\n \tpublic static final String membershipDoNotAllowLoaKeyName = \"doNotAllowLoa\";\n \tpublic static final String autoExtensionLastLoginPeriod = \"autoExtensionLastLoginPeriod\";\n \tpublic static final String autoExtensionExtSources = \"autoExtensionExtSources\";\n+\tpublic static final String doNotExpireSponsoredMembers = \"doNotExpireSponsoredMembers\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI1NjUwOQ=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTIyMjU1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODoyNTo0N1rOHfAEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoyNTowOVrOHhFpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2OTA4Nw==", "bodyText": "I would think about this exception. Maybe if there is a problem, we should log it as error and continue as default = expire members.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r502269087", "createdAt": "2020-10-09T08:25:47Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;\n \t\ttry {\n-\t\t\tAttribute expiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, sponsoredMember, EXPIRATION);\n-\t\t\texpiration.setValue(BeansUtils.getDateFormatterWithoutTime().format(new Date()));\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess,sponsoredMember,expiration);\n-\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException| WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(\"cannot set expiration date to today for sponsored member \"+sponsoredMember.getId(),e);\n-\t\t}\n-\t\ttry {\n-\t\t\texpireMember(sess, sponsoredMember);\n-\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"cannot expire member \"+sponsoredMember.getId(),ex);\n+\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, EXPIRATION_RULES_ATTR);\n+\t\t\tMap<String, String> rulesMap = expirationRules.valueAsMap();\n+\t\t\tif (rulesMap != null && rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY) != null)\n+\t\t\t\tcannotBeExpired = Boolean.parseBoolean(rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY));\n+\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException e) {\n+\t\t\tthrow new InternalErrorException(\"Cannot determine whether a previously sponsored member \" + sponsoredMember.getId() + \"should expire.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NzQ4Mw==", "bodyText": "Done.", "url": "https://github.com/CESNET/perun/pull/2920#discussion_r504457483", "createdAt": "2020-10-14T07:25:09Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/MembersManagerBlImpl.java", "diffHunk": "@@ -2523,25 +2525,38 @@ private String createUserAccountInExternalSystem (PerunSession session, User use\n \t}\n \n \t/**\n-\t * Execute process which expires member and removes his sponsorship\n+\t * Execute process which expires member and removes his sponsorship.\n \t *\n \t * @param sess perun session\n \t * @param sponsoredMember who will be processed\n+\t * @param vo of sponsored member\n \t */\n-\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember) {\n+\tprivate void processMemberAfterRemovingLastSponsor(PerunSession sess, Member sponsoredMember, Vo vo) {\n \n-\t\t//Set member's expiration to today and set status to expired.\n+\t\t//Check whether the member should be expired according to vo's expiration rules.\n+\t\tboolean cannotBeExpired = false;\n \t\ttry {\n-\t\t\tAttribute expiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, sponsoredMember, EXPIRATION);\n-\t\t\texpiration.setValue(BeansUtils.getDateFormatterWithoutTime().format(new Date()));\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess,sponsoredMember,expiration);\n-\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException| WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(\"cannot set expiration date to today for sponsored member \"+sponsoredMember.getId(),e);\n-\t\t}\n-\t\ttry {\n-\t\t\texpireMember(sess, sponsoredMember);\n-\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"cannot expire member \"+sponsoredMember.getId(),ex);\n+\t\t\tAttribute expirationRules = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, EXPIRATION_RULES_ATTR);\n+\t\t\tMap<String, String> rulesMap = expirationRules.valueAsMap();\n+\t\t\tif (rulesMap != null && rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY) != null)\n+\t\t\t\tcannotBeExpired = Boolean.parseBoolean(rulesMap.get(SPONSORED_MEMBERS_EXPIRATION_KEY));\n+\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException e) {\n+\t\t\tthrow new InternalErrorException(\"Cannot determine whether a previously sponsored member \" + sponsoredMember.getId() + \"should expire.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2OTA4Nw=="}, "originalCommit": {"oid": "86f21d2952e827b42d38bbb8d162fd8b74e13eb4"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2321, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}