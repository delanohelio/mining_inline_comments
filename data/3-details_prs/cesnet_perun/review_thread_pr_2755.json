{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDA0MjM5", "number": 2755, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1Nzo0MVrOEHlSxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMDoyMFrOEH3U_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Mzg2NTAzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzo1Nzo0MVrOGnBzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMjoxOVrOGni8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NzE0NA==", "bodyText": "I think that if this happens (that a group that is under sync. doesn't have this attr set) that it should be an internal error because we set this attribute when the sync is initialized. So, I think you can just wrap the exception into an internal error and not into another AttributeNotExistsException.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r443577144", "createdAt": "2020-06-22T13:57:41Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -2892,6 +2897,70 @@ private ExtSource getGroupExtSourceForSynchronization(PerunSession sess, Group g\n \t\treturn overwriteUserAttributesList;\n \t}\n \n+\t/**\n+\t * Get login attribute by login attribute name from base group. It is used for identifying groups\n+\t * in structure of groups.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get login attribute for\n+\t *\n+\t * @return login attribute as attribute definition\n+\t *\n+\t * @throws InternalErrorException if some internal error happens or login attribute from extSource is null or empty\n+\t * @throws AttributeNotExistsException when attribute login from extSource not exists in Perun DB\n+\t */\n+\tprivate AttributeDefinition getLoginAttributeForGroupStructure(PerunSession sess, Group baseGroup) throws AttributeNotExistsException {\n+\t\tString loginAttributeName;\n+\n+\t\ttry {\n+\t\t\tAttribute loginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, baseGroup, GroupsManager.GROUPS_STRUCTURE_LOGIN_ATTRNAME);\n+\t\t\tloginAttributeName = loginAttribute.valueAsString();\n+\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\n+\t\tif(loginAttributeName == null || loginAttributeName.isEmpty()) {\n+\t\t\tthrow new InternalErrorException(\"Missing login name for group structure under base group: \" + baseGroup);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, loginAttributeName);\n+\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t//add more information to the exception\n+\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login '\" + loginAttributeName + \"' for structure under base group:\" + baseGroup, ex);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get map of all sub groups of defined base group with their logins as keys in map.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get all subgroups for\n+\t * @param loginAttributeDefinition attribute to get login for every sub group in structure\n+\t * @return map of all groups with logins as keys\n+\t *\n+\t * @throws AttributeNotExistsException if there is no such attribute with login set for the group\n+\t */\n+\tprivate Map<String, Group> getAllSubGroupsWithLogins(PerunSession sess, Group baseGroup, AttributeDefinition loginAttributeDefinition) throws AttributeNotExistsException {\n+\t\tMap<String, Group> listOfSubGroupsWithLogins = new HashMap<>();\n+\n+\t\tList<Group> groups = this.getAllSubGroups(sess, baseGroup);\n+\t\tfor(Group group: groups) {\n+\t\t\ttry {\n+\t\t\t\tAttribute loginValue = perunBl.getAttributesManagerBl().getAttribute(sess, group, loginAttributeDefinition.getName());\n+\t\t\t\tlistOfSubGroupsWithLogins.put(loginValue.valueAsString(), group);\n+\t\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\t\t//it does mean wrong behavior of other methods\n+\t\t\t\tthrow new InternalErrorException(ex);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\t//catch and throw again to add more information about the specific problem here\n+\t\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login \" + loginAttributeDefinition + \" for group \" + group + \" in structure under base group \" + baseGroup, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMDI0Nw==", "bodyText": "I wasn't sure, but InernalError is also fine with me. Replaced", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444120247", "createdAt": "2020-06-23T10:22:19Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -2892,6 +2897,70 @@ private ExtSource getGroupExtSourceForSynchronization(PerunSession sess, Group g\n \t\treturn overwriteUserAttributesList;\n \t}\n \n+\t/**\n+\t * Get login attribute by login attribute name from base group. It is used for identifying groups\n+\t * in structure of groups.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get login attribute for\n+\t *\n+\t * @return login attribute as attribute definition\n+\t *\n+\t * @throws InternalErrorException if some internal error happens or login attribute from extSource is null or empty\n+\t * @throws AttributeNotExistsException when attribute login from extSource not exists in Perun DB\n+\t */\n+\tprivate AttributeDefinition getLoginAttributeForGroupStructure(PerunSession sess, Group baseGroup) throws AttributeNotExistsException {\n+\t\tString loginAttributeName;\n+\n+\t\ttry {\n+\t\t\tAttribute loginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, baseGroup, GroupsManager.GROUPS_STRUCTURE_LOGIN_ATTRNAME);\n+\t\t\tloginAttributeName = loginAttribute.valueAsString();\n+\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\n+\t\tif(loginAttributeName == null || loginAttributeName.isEmpty()) {\n+\t\t\tthrow new InternalErrorException(\"Missing login name for group structure under base group: \" + baseGroup);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, loginAttributeName);\n+\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t//add more information to the exception\n+\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login '\" + loginAttributeName + \"' for structure under base group:\" + baseGroup, ex);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Get map of all sub groups of defined base group with their logins as keys in map.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get all subgroups for\n+\t * @param loginAttributeDefinition attribute to get login for every sub group in structure\n+\t * @return map of all groups with logins as keys\n+\t *\n+\t * @throws AttributeNotExistsException if there is no such attribute with login set for the group\n+\t */\n+\tprivate Map<String, Group> getAllSubGroupsWithLogins(PerunSession sess, Group baseGroup, AttributeDefinition loginAttributeDefinition) throws AttributeNotExistsException {\n+\t\tMap<String, Group> listOfSubGroupsWithLogins = new HashMap<>();\n+\n+\t\tList<Group> groups = this.getAllSubGroups(sess, baseGroup);\n+\t\tfor(Group group: groups) {\n+\t\t\ttry {\n+\t\t\t\tAttribute loginValue = perunBl.getAttributesManagerBl().getAttribute(sess, group, loginAttributeDefinition.getName());\n+\t\t\t\tlistOfSubGroupsWithLogins.put(loginValue.valueAsString(), group);\n+\t\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\t\t//it does mean wrong behavior of other methods\n+\t\t\t\tthrow new InternalErrorException(ex);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\t//catch and throw again to add more information about the specific problem here\n+\t\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login \" + loginAttributeDefinition + \" for group \" + group + \" in structure under base group \" + baseGroup, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3NzE0NA=="}, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjcxMTUwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0OTo1N1rOGndZ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1MToyNVrOGnfqIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyOTQyNA==", "bodyText": "I think this Map is not necessary.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444029424", "createdAt": "2020-06-23T07:49:57Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3785,22 +3854,27 @@ private Attribute prepareGroupStructureSynchronizationAttribute(PerunSession ses\n \t * @param candidateGroupsToAdd  New groups\n \t * @param groupsToRemove Former groups which are not in synchronized ExtSource now\n \t */\n-\tprivate void categorizeGroupsForSynchronization(List<Group> currentGroups, List<CandidateGroup> candidateGroups, List<CandidateGroup> candidateGroupsToAdd, Map<CandidateGroup, Group> groupsToUpdate, List<Group> groupsToRemove) {\n+\tprivate void categorizeGroupsForSynchronization(Map<String, Group> currentGroups, List<CandidateGroup> candidateGroups, List<CandidateGroup> candidateGroupsToAdd, Map<CandidateGroup, Group> groupsToUpdate, List<Group> groupsToRemove) {\n+\t\t//prepare map structure for candidate groups\n+\t\tMap<String, CandidateGroup> candidateGroupsByLogins = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NjMzOA==", "bodyText": "You are right. Removed.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444066338", "createdAt": "2020-06-23T08:51:25Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3785,22 +3854,27 @@ private Attribute prepareGroupStructureSynchronizationAttribute(PerunSession ses\n \t * @param candidateGroupsToAdd  New groups\n \t * @param groupsToRemove Former groups which are not in synchronized ExtSource now\n \t */\n-\tprivate void categorizeGroupsForSynchronization(List<Group> currentGroups, List<CandidateGroup> candidateGroups, List<CandidateGroup> candidateGroupsToAdd, Map<CandidateGroup, Group> groupsToUpdate, List<Group> groupsToRemove) {\n+\tprivate void categorizeGroupsForSynchronization(Map<String, Group> currentGroups, List<CandidateGroup> candidateGroups, List<CandidateGroup> candidateGroupsToAdd, Map<CandidateGroup, Group> groupsToUpdate, List<Group> groupsToRemove) {\n+\t\t//prepare map structure for candidate groups\n+\t\tMap<String, CandidateGroup> candidateGroupsByLogins = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyOTQyNA=="}, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njc4ODU1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxMToyM1rOGneKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1MTozM1rOGnfqdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MTgwOA==", "bodyText": "I think this can happen only if the baseGroup is null. Therefore, I think it is not necessary.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444041808", "createdAt": "2020-06-23T08:11:23Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3923,42 +3999,106 @@ private void updateExistingGroupsWhileSynchronization(PerunSession sess, Group b\n \t * @param groupToUpdate for which will be parent specified\n \t * @param baseGroup under which may be new parent\n \t * @param candidateGroup with potential new parent group\n+\t * @param loginAttributeName attribute name for login of group\n \t * @return updated parent group (if null, parent group hasn't changed)\n \t * @throws InternalErrorException\n \t */\n-\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup) throws InternalErrorException {\n+\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup, String loginAttributeName) throws InternalErrorException {\n+\t\t//get current parent of updated group, if there is no group (null), it means the group is under the base group\n+\t\tString oldParentGroupLogin = getOldParentGroupWithLogin(sess, groupToUpdate, baseGroup, loginAttributeName);\n \n-\t\tString actualParentName;\n-\t\ttry {\n-\t\t\tactualParentName = getGroupById(sess, groupToUpdate.getParentGroupId()).getShortName();\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n+\t\t//check if there is difference between parents of current and new group, if not, return null\n+\t\tif(Objects.equals(oldParentGroupLogin, candidateGroup.getParentGroupLogin())) return null;\n+\n+\t\t//if there is difference, we need to find a new parent group\n+\t\tGroup newParentGroup = getNewParentGroupWithLogin(sess, candidateGroup, baseGroup, loginAttributeName);\n+\n+\t\t//null in parent group means base group, return it\n+\t\tif(newParentGroup == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NjQyMA==", "bodyText": "Also right, removed.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444066420", "createdAt": "2020-06-23T08:51:33Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3923,42 +3999,106 @@ private void updateExistingGroupsWhileSynchronization(PerunSession sess, Group b\n \t * @param groupToUpdate for which will be parent specified\n \t * @param baseGroup under which may be new parent\n \t * @param candidateGroup with potential new parent group\n+\t * @param loginAttributeName attribute name for login of group\n \t * @return updated parent group (if null, parent group hasn't changed)\n \t * @throws InternalErrorException\n \t */\n-\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup) throws InternalErrorException {\n+\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup, String loginAttributeName) throws InternalErrorException {\n+\t\t//get current parent of updated group, if there is no group (null), it means the group is under the base group\n+\t\tString oldParentGroupLogin = getOldParentGroupWithLogin(sess, groupToUpdate, baseGroup, loginAttributeName);\n \n-\t\tString actualParentName;\n-\t\ttry {\n-\t\t\tactualParentName = getGroupById(sess, groupToUpdate.getParentGroupId()).getShortName();\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n+\t\t//check if there is difference between parents of current and new group, if not, return null\n+\t\tif(Objects.equals(oldParentGroupLogin, candidateGroup.getParentGroupLogin())) return null;\n+\n+\t\t//if there is difference, we need to find a new parent group\n+\t\tGroup newParentGroup = getNewParentGroupWithLogin(sess, candidateGroup, baseGroup, loginAttributeName);\n+\n+\t\t//null in parent group means base group, return it\n+\t\tif(newParentGroup == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MTgwOA=="}, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgxNTIzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxOTowMVrOGnebOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyMjo0MFrOGni9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjEzNw==", "bodyText": "I think that you could wrap it in the InternalError as well since you can't actually react to it in any meaningful way.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444046137", "createdAt": "2020-06-23T08:19:01Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -2892,6 +2897,70 @@ private ExtSource getGroupExtSourceForSynchronization(PerunSession sess, Group g\n \t\treturn overwriteUserAttributesList;\n \t}\n \n+\t/**\n+\t * Get login attribute by login attribute name from base group. It is used for identifying groups\n+\t * in structure of groups.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get login attribute for\n+\t *\n+\t * @return login attribute as attribute definition\n+\t *\n+\t * @throws InternalErrorException if some internal error happens or login attribute from extSource is null or empty\n+\t * @throws AttributeNotExistsException when attribute login from extSource not exists in Perun DB\n+\t */\n+\tprivate AttributeDefinition getLoginAttributeForGroupStructure(PerunSession sess, Group baseGroup) throws AttributeNotExistsException {\n+\t\tString loginAttributeName;\n+\n+\t\ttry {\n+\t\t\tAttribute loginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, baseGroup, GroupsManager.GROUPS_STRUCTURE_LOGIN_ATTRNAME);\n+\t\t\tloginAttributeName = loginAttribute.valueAsString();\n+\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\n+\t\tif(loginAttributeName == null || loginAttributeName.isEmpty()) {\n+\t\t\tthrow new InternalErrorException(\"Missing login name for group structure under base group: \" + baseGroup);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, loginAttributeName);\n+\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t//add more information to the exception\n+\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login '\" + loginAttributeName + \"' for structure under base group:\" + baseGroup, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMDM5OQ==", "bodyText": "Changed to InternalErrorException.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444120399", "createdAt": "2020-06-23T10:22:40Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -2892,6 +2897,70 @@ private ExtSource getGroupExtSourceForSynchronization(PerunSession sess, Group g\n \t\treturn overwriteUserAttributesList;\n \t}\n \n+\t/**\n+\t * Get login attribute by login attribute name from base group. It is used for identifying groups\n+\t * in structure of groups.\n+\t *\n+\t * @param sess\n+\t * @param baseGroup base group to get login attribute for\n+\t *\n+\t * @return login attribute as attribute definition\n+\t *\n+\t * @throws InternalErrorException if some internal error happens or login attribute from extSource is null or empty\n+\t * @throws AttributeNotExistsException when attribute login from extSource not exists in Perun DB\n+\t */\n+\tprivate AttributeDefinition getLoginAttributeForGroupStructure(PerunSession sess, Group baseGroup) throws AttributeNotExistsException {\n+\t\tString loginAttributeName;\n+\n+\t\ttry {\n+\t\t\tAttribute loginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, baseGroup, GroupsManager.GROUPS_STRUCTURE_LOGIN_ATTRNAME);\n+\t\t\tloginAttributeName = loginAttribute.valueAsString();\n+\t\t} catch (WrongAttributeAssignmentException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\n+\t\tif(loginAttributeName == null || loginAttributeName.isEmpty()) {\n+\t\t\tthrow new InternalErrorException(\"Missing login name for group structure under base group: \" + baseGroup);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, loginAttributeName);\n+\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t//add more information to the exception\n+\t\t\tthrow new AttributeNotExistsException(\"There is missing attribute login '\" + loginAttributeName + \"' for structure under base group:\" + baseGroup, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjEzNw=="}, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgxOTgzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMDoyMFrOGneeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1MTo1OFrOGnfreA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjkxNQ==", "bodyText": "This name and Javadoc are misleading. You are returning only the parent group login not the parent group with its login.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444046915", "createdAt": "2020-06-23T08:20:20Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3923,42 +3999,106 @@ private void updateExistingGroupsWhileSynchronization(PerunSession sess, Group b\n \t * @param groupToUpdate for which will be parent specified\n \t * @param baseGroup under which may be new parent\n \t * @param candidateGroup with potential new parent group\n+\t * @param loginAttributeName attribute name for login of group\n \t * @return updated parent group (if null, parent group hasn't changed)\n \t * @throws InternalErrorException\n \t */\n-\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup) throws InternalErrorException {\n+\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup, String loginAttributeName) throws InternalErrorException {\n+\t\t//get current parent of updated group, if there is no group (null), it means the group is under the base group\n+\t\tString oldParentGroupLogin = getOldParentGroupWithLogin(sess, groupToUpdate, baseGroup, loginAttributeName);\n \n-\t\tString actualParentName;\n-\t\ttry {\n-\t\t\tactualParentName = getGroupById(sess, groupToUpdate.getParentGroupId()).getShortName();\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n+\t\t//check if there is difference between parents of current and new group, if not, return null\n+\t\tif(Objects.equals(oldParentGroupLogin, candidateGroup.getParentGroupLogin())) return null;\n+\n+\t\t//if there is difference, we need to find a new parent group\n+\t\tGroup newParentGroup = getNewParentGroupWithLogin(sess, candidateGroup, baseGroup, loginAttributeName);\n+\n+\t\t//null in parent group means base group, return it\n+\t\tif(newParentGroup == null) {\n+\t\t\tnewParentGroup = baseGroup;\n \t\t}\n \n-\t\tGroup newParentGroup = null;\n+\t\t//check if the new parent group is also under the base group somewhere (if not, set base group as new parent group)\n+\t\tif(!newParentGroup.equals(baseGroup) && !getAllSubGroups(sess, baseGroup).contains(newParentGroup)) {\n+\t\t\tnewParentGroup = baseGroup;\n+\t\t}\n \n-\t\t//If candidate group doesn't have parent and actual parent is not base group, specify base group as parent\n-\t\tif (candidateGroup.getParentGroupName() == null) {\n-\t\t\tif(!actualParentName.equals(baseGroup.getShortName())) {\n-\t\t\t\tnewParentGroup = baseGroup;\n-\t\t\t}\n-\t\t} else if (!actualParentName.equals(candidateGroup.getParentGroupName())) {\n-\t\t\t//If actualParentName does not equal candidate group parent name, set baseGroup as newParentGroup (default option which can be changed)\n-\t\t\tif(!actualParentName.equals(baseGroup.getShortName())) {\n-\t\t\t\tnewParentGroup = baseGroup;\n-\t\t\t}\n-\t\t\t// if the parent exists in the structure of the baseGroup, change newParentGroup from baseGroup to to that subGroup\n-\t\t\tList<Group> subGroups = getAllSubGroups(sess, baseGroup);\n-\t\t\tfor (Group subGroup : subGroups) {\n-\t\t\t\tif (subGroup.getShortName().equals(candidateGroup.getParentGroupName())) {\n-\t\t\t\t\tnewParentGroup = subGroup;\n-\t\t\t\t\tbreak;\n+\t\t//check situation, where group is already under base group and the destination parent group is now base group too\n+\t\tif(oldParentGroupLogin == null && newParentGroup.equals(baseGroup)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn newParentGroup;\n+\t}\n+\n+\t/**\n+\t * Return parent group and its login for the candidate group in the group structure.\n+\t *\n+\t * @param sess perun session\n+\t * @param candidateGroup candidate group\n+\t * @param baseGroup base group in structure\n+\t * @param loginAttributeName attribute name of login in the structure\n+\t * @return new parent group of candidate group, if there is none, return base group\n+\t */\n+\tprivate Group getNewParentGroupWithLogin(PerunSession sess, CandidateGroup candidateGroup, Group baseGroup, String loginAttributeName) {\n+\t\tGroup newParentGroup = baseGroup;\n+\n+\t\t//if parent group login is not null, we need to find this new parent group (otherwise it is base group so return empty pair)\n+\t\tif(candidateGroup.getParentGroupLogin() != null) {\n+\t\t\ttry {\n+\t\t\t\t//we need to have vo to filter groups, base group has to be from the same vo as new parent of candidate group\n+\t\t\t\tVo baseGroupVo = getPerunBl().getVosManagerBl().getVoById(sess, baseGroup.getVoId());\n+\t\t\t\tList<Group> groupsWithLogin = getPerunBl().getSearcherBl().getGroups(sess, baseGroupVo, Collections.singletonMap(loginAttributeName, candidateGroup.getParentGroupLogin()));\n+\t\t\t\t//if there is missing the destination parent group, set base group as parent, there could be missing parent group in the extSource data\n+\t\t\t\tif (!groupsWithLogin.isEmpty()) {\n+\t\t\t\t\t//if there are more than one group with login, there is no way how to choose correct behavior\n+\t\t\t\t\tif (groupsWithLogin.size() > 1)\n+\t\t\t\t\t\tthrow new InternalErrorException(\"More than 1 group has login attribute '\" + loginAttributeName + \"' set with the same login \" + candidateGroup.getParentGroupLogin());\n+\t\t\t\t\t//our new parent group is exactly the one with the login set\n+\t\t\t\t\treturn groupsWithLogin.get(0);\n \t\t\t\t}\n+\t\t\t} catch (VoNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"Vo of base group: \" + baseGroup + \" can't be found. Unexpected situation, can't continue.\");\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"Can't find attribute definition for '\" + loginAttributeName + \"'.\");\n \t\t\t}\n \t\t}\n+\n \t\treturn newParentGroup;\n \t}\n \n+\t/**\n+\t * Return parent group and its login for the group to update in the group structure.\n+\t *\n+\t * @param sess perun session\n+\t * @param groupToUpdate group to update\n+\t * @param baseGroup base group in structure\n+\t * @param loginAttributeName attribute name of login in the structure\n+\t * @return current parent group login of group to update, null if there is none (it means base group should be parent)\n+\t */\n+\tprivate String getOldParentGroupWithLogin(PerunSession sess, Group groupToUpdate, Group baseGroup, String  loginAttributeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NjY4MA==", "bodyText": "Name and javadoc of this method and also the method getNewParentGroupWithLogin was changed.", "url": "https://github.com/CESNET/perun/pull/2755#discussion_r444066680", "createdAt": "2020-06-23T08:51:58Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3923,42 +3999,106 @@ private void updateExistingGroupsWhileSynchronization(PerunSession sess, Group b\n \t * @param groupToUpdate for which will be parent specified\n \t * @param baseGroup under which may be new parent\n \t * @param candidateGroup with potential new parent group\n+\t * @param loginAttributeName attribute name for login of group\n \t * @return updated parent group (if null, parent group hasn't changed)\n \t * @throws InternalErrorException\n \t */\n-\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup) throws InternalErrorException {\n+\tprivate Group specifyParentForUpdatedGroup(PerunSession sess, Group groupToUpdate, Group baseGroup, CandidateGroup candidateGroup, String loginAttributeName) throws InternalErrorException {\n+\t\t//get current parent of updated group, if there is no group (null), it means the group is under the base group\n+\t\tString oldParentGroupLogin = getOldParentGroupWithLogin(sess, groupToUpdate, baseGroup, loginAttributeName);\n \n-\t\tString actualParentName;\n-\t\ttry {\n-\t\t\tactualParentName = getGroupById(sess, groupToUpdate.getParentGroupId()).getShortName();\n-\t\t} catch (GroupNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n+\t\t//check if there is difference between parents of current and new group, if not, return null\n+\t\tif(Objects.equals(oldParentGroupLogin, candidateGroup.getParentGroupLogin())) return null;\n+\n+\t\t//if there is difference, we need to find a new parent group\n+\t\tGroup newParentGroup = getNewParentGroupWithLogin(sess, candidateGroup, baseGroup, loginAttributeName);\n+\n+\t\t//null in parent group means base group, return it\n+\t\tif(newParentGroup == null) {\n+\t\t\tnewParentGroup = baseGroup;\n \t\t}\n \n-\t\tGroup newParentGroup = null;\n+\t\t//check if the new parent group is also under the base group somewhere (if not, set base group as new parent group)\n+\t\tif(!newParentGroup.equals(baseGroup) && !getAllSubGroups(sess, baseGroup).contains(newParentGroup)) {\n+\t\t\tnewParentGroup = baseGroup;\n+\t\t}\n \n-\t\t//If candidate group doesn't have parent and actual parent is not base group, specify base group as parent\n-\t\tif (candidateGroup.getParentGroupName() == null) {\n-\t\t\tif(!actualParentName.equals(baseGroup.getShortName())) {\n-\t\t\t\tnewParentGroup = baseGroup;\n-\t\t\t}\n-\t\t} else if (!actualParentName.equals(candidateGroup.getParentGroupName())) {\n-\t\t\t//If actualParentName does not equal candidate group parent name, set baseGroup as newParentGroup (default option which can be changed)\n-\t\t\tif(!actualParentName.equals(baseGroup.getShortName())) {\n-\t\t\t\tnewParentGroup = baseGroup;\n-\t\t\t}\n-\t\t\t// if the parent exists in the structure of the baseGroup, change newParentGroup from baseGroup to to that subGroup\n-\t\t\tList<Group> subGroups = getAllSubGroups(sess, baseGroup);\n-\t\t\tfor (Group subGroup : subGroups) {\n-\t\t\t\tif (subGroup.getShortName().equals(candidateGroup.getParentGroupName())) {\n-\t\t\t\t\tnewParentGroup = subGroup;\n-\t\t\t\t\tbreak;\n+\t\t//check situation, where group is already under base group and the destination parent group is now base group too\n+\t\tif(oldParentGroupLogin == null && newParentGroup.equals(baseGroup)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn newParentGroup;\n+\t}\n+\n+\t/**\n+\t * Return parent group and its login for the candidate group in the group structure.\n+\t *\n+\t * @param sess perun session\n+\t * @param candidateGroup candidate group\n+\t * @param baseGroup base group in structure\n+\t * @param loginAttributeName attribute name of login in the structure\n+\t * @return new parent group of candidate group, if there is none, return base group\n+\t */\n+\tprivate Group getNewParentGroupWithLogin(PerunSession sess, CandidateGroup candidateGroup, Group baseGroup, String loginAttributeName) {\n+\t\tGroup newParentGroup = baseGroup;\n+\n+\t\t//if parent group login is not null, we need to find this new parent group (otherwise it is base group so return empty pair)\n+\t\tif(candidateGroup.getParentGroupLogin() != null) {\n+\t\t\ttry {\n+\t\t\t\t//we need to have vo to filter groups, base group has to be from the same vo as new parent of candidate group\n+\t\t\t\tVo baseGroupVo = getPerunBl().getVosManagerBl().getVoById(sess, baseGroup.getVoId());\n+\t\t\t\tList<Group> groupsWithLogin = getPerunBl().getSearcherBl().getGroups(sess, baseGroupVo, Collections.singletonMap(loginAttributeName, candidateGroup.getParentGroupLogin()));\n+\t\t\t\t//if there is missing the destination parent group, set base group as parent, there could be missing parent group in the extSource data\n+\t\t\t\tif (!groupsWithLogin.isEmpty()) {\n+\t\t\t\t\t//if there are more than one group with login, there is no way how to choose correct behavior\n+\t\t\t\t\tif (groupsWithLogin.size() > 1)\n+\t\t\t\t\t\tthrow new InternalErrorException(\"More than 1 group has login attribute '\" + loginAttributeName + \"' set with the same login \" + candidateGroup.getParentGroupLogin());\n+\t\t\t\t\t//our new parent group is exactly the one with the login set\n+\t\t\t\t\treturn groupsWithLogin.get(0);\n \t\t\t\t}\n+\t\t\t} catch (VoNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"Vo of base group: \" + baseGroup + \" can't be found. Unexpected situation, can't continue.\");\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"Can't find attribute definition for '\" + loginAttributeName + \"'.\");\n \t\t\t}\n \t\t}\n+\n \t\treturn newParentGroup;\n \t}\n \n+\t/**\n+\t * Return parent group and its login for the group to update in the group structure.\n+\t *\n+\t * @param sess perun session\n+\t * @param groupToUpdate group to update\n+\t * @param baseGroup base group in structure\n+\t * @param loginAttributeName attribute name of login in the structure\n+\t * @return current parent group login of group to update, null if there is none (it means base group should be parent)\n+\t */\n+\tprivate String getOldParentGroupWithLogin(PerunSession sess, Group groupToUpdate, Group baseGroup, String  loginAttributeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjkxNQ=="}, "originalCommit": {"oid": "007e44eff32b3807d5a653d59fc3a1e4249d9799"}, "originalPosition": 290}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1899, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}