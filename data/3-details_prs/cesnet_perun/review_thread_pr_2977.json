{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzYyNzcz", "number": 2977, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1Njo0M1rOE3Nq9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo0MzozNVrOE3SXVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzMxMTI0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1Njo0M1rOHwbS-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NDo0MlrOHxD9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MDkyMg==", "bodyText": "You can't specify this in the method.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520540922", "createdAt": "2020-11-10T12:56:43Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzEzNg==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207136", "createdAt": "2020-11-11T08:54:42Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MDkyMg=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzY5NzI4OnYy", "diffSide": "RIGHT", "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNTozNVrOHwfAYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NDo0NlrOHxD9gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTY5Ng==", "bodyText": "This is probably not the right way how to process an exception in RPC.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520601696", "createdAt": "2020-11-10T14:25:35Z", "author": {"login": "stavamichal"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -145,10 +161,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzE2OA==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207168", "createdAt": "2020-11-11T08:54:46Z", "author": {"login": "balcirakpeter"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -145,10 +161,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTY5Ng=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzcwOTk1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODoyMFrOHwfIbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NDo1MVrOHxD9qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzc1OA==", "bodyText": "There is a missing javadoc.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520603758", "createdAt": "2020-11-10T14:28:20Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -141,25 +141,30 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\twhile (roleNames.hasNext()) {\n \t\t\tString roleName = roleNames.next();\n \t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n+\t\t\tList<Map<String, String>> privilegedRolesToManage = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_manage\"));\n+\t\t\tList<Map<String, String>> privilegedRolesToRead = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_read\"));\n+\t\t\tMap<String, String> entitiesToManage = createMapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n+\t\t\tMap<String, String> objectsToAssign = createMapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n \n-\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t}\n+\t\t\trules.add(new RoleManagementRules(roleName, privilegedRolesToManage, privilegedRolesToRead, entitiesToManage, objectsToAssign));\n+\t\t}\n+\n+\t\treturn rules;\n+\t}\n \n-\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n+\tprivate List<Map<String, String>> createMapFromPrivilegedRoles(JsonNode privilegedRolesNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzIwOQ==", "bodyText": "Added", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207209", "createdAt": "2020-11-11T08:54:51Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -141,25 +141,30 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\twhile (roleNames.hasNext()) {\n \t\t\tString roleName = roleNames.next();\n \t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n+\t\t\tList<Map<String, String>> privilegedRolesToManage = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_manage\"));\n+\t\t\tList<Map<String, String>> privilegedRolesToRead = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_read\"));\n+\t\t\tMap<String, String> entitiesToManage = createMapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n+\t\t\tMap<String, String> objectsToAssign = createMapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n \n-\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t}\n+\t\t\trules.add(new RoleManagementRules(roleName, privilegedRolesToManage, privilegedRolesToRead, entitiesToManage, objectsToAssign));\n+\t\t}\n+\n+\t\treturn rules;\n+\t}\n \n-\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n+\tprivate List<Map<String, String>> createMapFromPrivilegedRoles(JsonNode privilegedRolesNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzc1OA=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDAwMjQ0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNzo0NVrOHwh_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NDo1NVrOHxD90A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n          \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of the given attributes doesn`t exist.\", ex);", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520650724", "createdAt": "2020-11-10T15:27:45Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1195,6 +1229,70 @@ public static void makeUserPerunAdmin(PerunSession sess, User user) throws Alrea\n \t\treturn AuthzResolverImpl.getAllPolicies();\n \t}\n \n+\t/**\n+\t * Get all authorizedGroups for complementary object and role.\n+\t *\n+\t * @param complementaryObject for which we will get administrator groups\n+\t * @param role expected role to filter authorizedGroups by\n+\t *\n+\t * @return list of authorizedGroups for complementary object and role\n+\t */\n+\tpublic static List<Group> getAdminGroups(PerunBean complementaryObject, String role) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(groupObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\treturn authzResolverImpl.getAdminGroups(mappingOfValues);\n+\t}\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>onlyDirectAdmins</b> is <b>true</b>, return only direct users of the complementary object for role with specific attributes.\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param sess perun session\n+\t * @param complementaryObject for which we will get administrator\n+\t * @param specificAttributes list of specified attributes which are needed in object richUser\n+\t * @param role expected role to filter managers by\n+\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t */\n+\tpublic static List<RichUser> getRichAdmins(PerunSession sess, PerunBean complementaryObject, List<String> specificAttributes, String role, boolean onlyDirectAdmins, boolean allUserAttributes) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(userObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\tList<User> admins = authzResolverImpl.getAdmins(mappingOfValues, onlyDirectAdmins);\n+\t\tList<RichUser> richAdminsWithAttributes;\n+\n+\t\tif(allUserAttributes) {\n+\t\t\ttry {\n+\t\t\t\trichAdminsWithAttributes = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(sess, admins);\n+\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\tthrow new InternalErrorException(e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tList<AttributeDefinition> attrDefinitions = getPerunBl().getAttributesManagerBl().getAttributesDefinition(sess, specificAttributes);\n+\t\t\t\tList<RichUser> richAdmins = perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, admins);\n+\t\t\t\trichAdminsWithAttributes = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(sess, richAdmins, attrDefinitions);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzI0OA==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207248", "createdAt": "2020-11-11T08:54:55Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1195,6 +1229,70 @@ public static void makeUserPerunAdmin(PerunSession sess, User user) throws Alrea\n \t\treturn AuthzResolverImpl.getAllPolicies();\n \t}\n \n+\t/**\n+\t * Get all authorizedGroups for complementary object and role.\n+\t *\n+\t * @param complementaryObject for which we will get administrator groups\n+\t * @param role expected role to filter authorizedGroups by\n+\t *\n+\t * @return list of authorizedGroups for complementary object and role\n+\t */\n+\tpublic static List<Group> getAdminGroups(PerunBean complementaryObject, String role) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(groupObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\treturn authzResolverImpl.getAdminGroups(mappingOfValues);\n+\t}\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>onlyDirectAdmins</b> is <b>true</b>, return only direct users of the complementary object for role with specific attributes.\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param sess perun session\n+\t * @param complementaryObject for which we will get administrator\n+\t * @param specificAttributes list of specified attributes which are needed in object richUser\n+\t * @param role expected role to filter managers by\n+\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t */\n+\tpublic static List<RichUser> getRichAdmins(PerunSession sess, PerunBean complementaryObject, List<String> specificAttributes, String role, boolean onlyDirectAdmins, boolean allUserAttributes) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(userObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\tList<User> admins = authzResolverImpl.getAdmins(mappingOfValues, onlyDirectAdmins);\n+\t\tList<RichUser> richAdminsWithAttributes;\n+\n+\t\tif(allUserAttributes) {\n+\t\t\ttry {\n+\t\t\t\trichAdminsWithAttributes = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(sess, admins);\n+\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\tthrow new InternalErrorException(e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tList<AttributeDefinition> attrDefinitions = getPerunBl().getAttributesManagerBl().getAttributesDefinition(sess, specificAttributes);\n+\t\t\t\tList<RichUser> richAdmins = perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, admins);\n+\t\t\t\trichAdminsWithAttributes = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(sess, richAdmins, attrDefinitions);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDcyNA=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDA0MjkxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozNTo0OVrOHwiZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NTowMVrOHxD-DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzI0OA==", "bodyText": "I think you can use here the HashSet. This list is actually never used since you always convert it into a HashSet.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657248", "createdAt": "2020-11-10T15:35:49Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -854,6 +860,39 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins) {\n+\t\tString query = prepareQueryToGetRichAdmins(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tList<User> admins = jdbc.query(query, USER_MAPPER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzMwOQ==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207309", "createdAt": "2020-11-11T08:55:01Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -854,6 +860,39 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins) {\n+\t\tString query = prepareQueryToGetRichAdmins(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tList<User> admins = jdbc.query(query, USER_MAPPER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzI0OA=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDA0NzMzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozNjo0NFrOHwicEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NTowN1rOHxD-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzkzOQ==", "bodyText": "Also, this method works only with users, not rich users.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657939", "createdAt": "2020-11-10T15:36:44Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n+\t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzM4NQ==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207385", "createdAt": "2020-11-11T08:55:07Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n+\t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzkzOQ=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDA4MDIzOnYy", "diffSide": "RIGHT", "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo0MzozNVrOHwixFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo1NToxMVrOHxD-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MzMxOQ==", "bodyText": "This exception should probably be also wrapped and rethrown.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520663319", "createdAt": "2020-11-10T15:43:35Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -117,10 +120,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwNzQxNQ==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r521207415", "createdAt": "2020-11-11T08:55:11Z", "author": {"login": "balcirakpeter"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -117,10 +120,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MzMxOQ=="}, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2158, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}