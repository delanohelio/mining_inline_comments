{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTE1OTky", "number": 2979, "title": "add new JSONLITE serializer to rpc", "bodyText": "Adds JsonSerializerJSONLITE serializer, which omits all audit-related properties ({created|modified}{By|At}, beanName).", "createdAt": "2020-11-10T14:10:51Z", "url": "https://github.com/CESNET/perun/pull/2979", "merged": true, "mergeCommit": {"oid": "696c267ab3c040b3b5870252bc7e58348c265db7"}, "closed": true, "closedAt": "2020-11-11T11:20:10Z", "author": {"login": "mvocu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbJkGZAH2gAyNTE4NTE1OTkyOmUzYzFkYzYyMmY5ZGU3ZDdhMTEyNjllNjI5YjU3Mzc0MWE1ODAwMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbcIDsAFqTUyODA4Mjg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034", "author": {"user": {"login": "mvocu", "name": "Michal Voc\u016f"}}, "url": "https://github.com/CESNET/perun/commit/e3c1dc622f9de7d7a11269e629b573741a580034", "committedDate": "2020-11-10T13:41:46Z", "message": "add new JSONLITE serializer to rpc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzE3MjM3", "url": "https://github.com/CESNET/perun/pull/2979#pullrequestreview-527317237", "createdAt": "2020-11-10T15:25:22Z", "commit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNToyMlrOHwh4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNzozMlrOHwh_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0ODc5Mg==", "bodyText": "I know it is a copy, but we should use English here.", "url": "https://github.com/CESNET/perun/pull/2979#discussion_r520648792", "createdAt": "2020-11-10T15:25:22Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/rpc/serializer/JsonSerializerJSONLITE.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package cz.metacentrum.perun.rpc.serializer;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import cz.metacentrum.perun.cabinet.model.Author;\n+import cz.metacentrum.perun.cabinet.model.Authorship;\n+import cz.metacentrum.perun.cabinet.model.Category;\n+import cz.metacentrum.perun.cabinet.model.Publication;\n+import cz.metacentrum.perun.cabinet.model.Thanks;\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.rt.PerunRuntimeException;\n+import cz.metacentrum.perun.core.api.exceptions.RpcException;\n+import cz.metacentrum.perun.taskslib.model.Task;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JSON lite serializer which strips auditing data from Perun beans.\n+ *\n+ * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n+ * @author Michal Voc\u016f <vocu@cesnet.cz>\n+ */\n+public final class JsonSerializerJSONLITE implements Serializer {\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\",\t\"modifiedByUid\", \n+\t\t\"valueCreatedAt\", \"valueCreatedBy\", \"valueModifiedAt\", \"valueModifiedBy\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface AttributeMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\",\t\"modifiedByUid\", \n+\t\t\"beanName\" \n+\t\t})\n+\tprivate interface AttributeDefinitionMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\",\n+\t\t\"createdByUid\", \"modifiedByUid\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface UserMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface ExceptionMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface CandidateMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\", \"modifiedByUid\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface PerunBeanMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface PerunRequestMixIn {\n+\t}\n+\n+\t/* FOR Cabinet PerunBeans we need createdBy etc. data */\n+\t@JsonIgnoreProperties({})\n+\tprivate interface CabinetMixIn {\n+\t}\n+\n+\t@SuppressWarnings(\"unused\")\n+\tprivate interface TaskMixIn {\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"startTime\")\n+\t\tLong getStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"schedule\")\n+\t\tLong getScheduleAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSchedule();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"genEndTime\")\n+\t\tLong getGenEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getGenEndTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sendEndTime\")\n+\t\tLong getSendEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSendEndTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sendStartTime\")\n+\t\tLong getSendStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSendStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"genStartTime\")\n+\t\tLong getGenStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getGenStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sentToEngine\")\n+\t\tLong getSentToEngineAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSentToEngine();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"endTime\")\n+\t\tLong getEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getEndTime();\n+\t}\n+\n+\tpublic static final String CONTENT_TYPE = \"application/json; charset=utf-8\";\n+\tprivate static final ObjectMapper mapper = new ObjectMapper();\n+\tprivate static final Map<Class<?>,Class<?>> mixinMap = new HashMap<>();\n+\n+\tstatic {\n+\t\tmixinMap.put(Attribute.class, AttributeMixIn.class);\n+\t\tmixinMap.put(AttributeDefinition.class, AttributeDefinitionMixIn.class);\n+\t\tmixinMap.put(User.class, UserMixIn.class);\n+\t\tmixinMap.put(Candidate.class, CandidateMixIn.class);\n+\t\tmixinMap.put(PerunException.class, ExceptionMixIn.class);\n+\t\tmixinMap.put(PerunRuntimeException.class, ExceptionMixIn.class);\n+\t\tmixinMap.put(PerunBean.class, PerunBeanMixIn.class);\n+\t\tmixinMap.put(PerunRequest.class, PerunRequestMixIn.class);\n+\t\tmixinMap.put(Authorship.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Author.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Category.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Publication.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Thanks.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Task.class, TaskMixIn.class);\n+\n+\t\tmapper.setMixIns(mixinMap);\n+\t}\n+\n+\tprivate static final JsonFactory jsonFactory = new JsonFactory();\n+\n+\tstatic {\n+\t\t//FIXME odstraneno disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDU0MA==", "bodyText": "Method \"jsonFactory.createJsonGenerator()\" is deprecated. Is there any chance to change that without great effort?", "url": "https://github.com/CESNET/perun/pull/2979#discussion_r520650540", "createdAt": "2020-11-10T15:27:32Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/rpc/serializer/JsonSerializerJSONLITE.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package cz.metacentrum.perun.rpc.serializer;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import cz.metacentrum.perun.cabinet.model.Author;\n+import cz.metacentrum.perun.cabinet.model.Authorship;\n+import cz.metacentrum.perun.cabinet.model.Category;\n+import cz.metacentrum.perun.cabinet.model.Publication;\n+import cz.metacentrum.perun.cabinet.model.Thanks;\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.rt.PerunRuntimeException;\n+import cz.metacentrum.perun.core.api.exceptions.RpcException;\n+import cz.metacentrum.perun.taskslib.model.Task;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JSON lite serializer which strips auditing data from Perun beans.\n+ *\n+ * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n+ * @author Michal Voc\u016f <vocu@cesnet.cz>\n+ */\n+public final class JsonSerializerJSONLITE implements Serializer {\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\",\t\"modifiedByUid\", \n+\t\t\"valueCreatedAt\", \"valueCreatedBy\", \"valueModifiedAt\", \"valueModifiedBy\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface AttributeMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\",\t\"modifiedByUid\", \n+\t\t\"beanName\" \n+\t\t})\n+\tprivate interface AttributeDefinitionMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\",\n+\t\t\"createdByUid\", \"modifiedByUid\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface UserMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface ExceptionMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface CandidateMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\n+\t\t\"createdAt\", \"createdBy\", \"modifiedAt\", \"modifiedBy\", \n+\t\t\"createdByUid\", \"modifiedByUid\", \n+\t\t\"beanName\"\n+\t\t})\n+\tprivate interface PerunBeanMixIn {\n+\t}\n+\n+\t@JsonIgnoreProperties({\"beanName\"})\n+\tprivate interface PerunRequestMixIn {\n+\t}\n+\n+\t/* FOR Cabinet PerunBeans we need createdBy etc. data */\n+\t@JsonIgnoreProperties({})\n+\tprivate interface CabinetMixIn {\n+\t}\n+\n+\t@SuppressWarnings(\"unused\")\n+\tprivate interface TaskMixIn {\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"startTime\")\n+\t\tLong getStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"schedule\")\n+\t\tLong getScheduleAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSchedule();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"genEndTime\")\n+\t\tLong getGenEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getGenEndTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sendEndTime\")\n+\t\tLong getSendEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSendEndTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sendStartTime\")\n+\t\tLong getSendStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSendStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"genStartTime\")\n+\t\tLong getGenStartTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getGenStartTime();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"sentToEngine\")\n+\t\tLong getSentToEngineAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getSentToEngine();\n+\n+\t\t@JsonSerialize\n+\t\t@JsonProperty(value = \"endTime\")\n+\t\tLong getEndTimeAsLong();\n+\n+\t\t@JsonIgnore\n+\t\tLocalDateTime getEndTime();\n+\t}\n+\n+\tpublic static final String CONTENT_TYPE = \"application/json; charset=utf-8\";\n+\tprivate static final ObjectMapper mapper = new ObjectMapper();\n+\tprivate static final Map<Class<?>,Class<?>> mixinMap = new HashMap<>();\n+\n+\tstatic {\n+\t\tmixinMap.put(Attribute.class, AttributeMixIn.class);\n+\t\tmixinMap.put(AttributeDefinition.class, AttributeDefinitionMixIn.class);\n+\t\tmixinMap.put(User.class, UserMixIn.class);\n+\t\tmixinMap.put(Candidate.class, CandidateMixIn.class);\n+\t\tmixinMap.put(PerunException.class, ExceptionMixIn.class);\n+\t\tmixinMap.put(PerunRuntimeException.class, ExceptionMixIn.class);\n+\t\tmixinMap.put(PerunBean.class, PerunBeanMixIn.class);\n+\t\tmixinMap.put(PerunRequest.class, PerunRequestMixIn.class);\n+\t\tmixinMap.put(Authorship.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Author.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Category.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Publication.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Thanks.class, CabinetMixIn.class);\n+\t\tmixinMap.put(Task.class, TaskMixIn.class);\n+\n+\t\tmapper.setMixIns(mixinMap);\n+\t}\n+\n+\tprivate static final JsonFactory jsonFactory = new JsonFactory();\n+\n+\tstatic {\n+\t\t//FIXME odstraneno disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+\t\tjsonFactory\n+\t\t\t.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET)\n+\t\t\t.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)\n+\t\t\t.setCodec(mapper);\n+\t}\n+\n+\tprivate OutputStream out;\n+\n+\t/**\n+\t * @param out {@code OutputStream} to output serialized data\n+\t * @throws IOException if an IO error occurs\n+\t */\n+\tpublic JsonSerializerJSONLITE(OutputStream out) throws IOException {\n+\t\tthis.out = out;\n+\t}\n+\n+\t@Override\n+\tpublic String getContentType() {\n+\t\treturn CONTENT_TYPE;\n+\t}\n+\n+\t@Override\n+\tpublic void write(Object object) throws IOException {\n+\t\tJsonGenerator gen = jsonFactory.createJsonGenerator(out, JsonEncoding.UTF8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034"}, "originalPosition": 196}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDYwMjIw", "url": "https://github.com/CESNET/perun/pull/2979#pullrequestreview-527460220", "createdAt": "2020-11-10T17:53:03Z", "commit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Nzo1OFrOHwosjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzo1Nzo1OFrOHwosjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MDQ2Mg==", "bodyText": "We should probably keep standard ignored properties from JsonSerializer and only add newly requested ignores.\n\t@JsonIgnoreProperties({\"name\"})\n\tprivate interface AttributeMixIn {\n\t}\n\n\t@JsonIgnoreProperties({\"name\"})\n\tprivate interface AttributeDefinitionMixIn {\n\t}\n\n\t@JsonIgnoreProperties({\"commonName\", \"displayName\"})\n\tprivate interface UserMixIn {\n\t}\n\n\t@JsonIgnoreProperties({\"userExtSources\"})\n\tprivate interface CandidateMixIn {\n\t}\n\n\t@JsonIgnoreProperties({\"cause\", \"localizedMessage\", \"stackTrace\"})\n\tprivate interface PerunExceptionMixIn {\n\t}", "url": "https://github.com/CESNET/perun/pull/2979#discussion_r520760462", "createdAt": "2020-11-10T17:57:58Z", "author": {"login": "zlamalp"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/rpc/serializer/JsonSerializerJSONLITE.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package cz.metacentrum.perun.rpc.serializer;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonEncoding;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import cz.metacentrum.perun.cabinet.model.Author;\n+import cz.metacentrum.perun.cabinet.model.Authorship;\n+import cz.metacentrum.perun.cabinet.model.Category;\n+import cz.metacentrum.perun.cabinet.model.Publication;\n+import cz.metacentrum.perun.cabinet.model.Thanks;\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.PerunException;\n+import cz.metacentrum.perun.core.api.exceptions.rt.PerunRuntimeException;\n+import cz.metacentrum.perun.core.api.exceptions.RpcException;\n+import cz.metacentrum.perun.taskslib.model.Task;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JSON lite serializer which strips auditing data from Perun beans.\n+ *\n+ * @author Pavel Zl\u00e1mal <zlamal@cesnet.cz>\n+ * @author Michal Voc\u016f <vocu@cesnet.cz>\n+ */\n+public final class JsonSerializerJSONLITE implements Serializer {\n+\n+\t@JsonIgnoreProperties({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3c1dc622f9de7d7a11269e629b573741a580034"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32cec1f098bccea9aedc955a9ab44539284a4fa4", "author": {"user": {"login": "mvocu", "name": "Michal Voc\u016f"}}, "url": "https://github.com/CESNET/perun/commit/32cec1f098bccea9aedc955a9ab44539284a4fa4", "committedDate": "2020-11-11T10:41:31Z", "message": "add standard ignores from JsonSerializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07dfd039a239b24b29c849578fd9f845b1555f7a", "author": {"user": {"login": "mvocu", "name": "Michal Voc\u016f"}}, "url": "https://github.com/CESNET/perun/commit/07dfd039a239b24b29c849578fd9f845b1555f7a", "committedDate": "2020-11-11T11:03:40Z", "message": "replace deprecated method calls according to Jackson Javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDgxMTI1", "url": "https://github.com/CESNET/perun/pull/2979#pullrequestreview-528081125", "createdAt": "2020-11-11T11:16:39Z", "commit": {"oid": "07dfd039a239b24b29c849578fd9f845b1555f7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MDgyODQ4", "url": "https://github.com/CESNET/perun/pull/2979#pullrequestreview-528082848", "createdAt": "2020-11-11T11:19:20Z", "commit": {"oid": "07dfd039a239b24b29c849578fd9f845b1555f7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1665, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}