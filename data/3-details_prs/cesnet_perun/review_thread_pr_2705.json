{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjE1NTM3", "number": 2705, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNTo0ODo1MVrOD9GLkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzoyMzo1OVrOD_Mpyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzkwOTk0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNTo0ODo1MVrOGWbDqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoyMzozNlrOGYqdNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTE2MQ==", "bodyText": "Path /etc/perun/ is stored inside the ${perun.conf} variable. You can use that.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r426165161", "createdAt": "2020-05-16T15:48:51Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxNDYxNQ==", "bodyText": "It seems that this variable can only be used inside pom file. I would have to create a separate properties file and load it from there. In other places in code, the path is also hardcoded. So I would leave it that way.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r428514615", "createdAt": "2020-05-21T08:23:36Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NTE2MQ=="}, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzkxNjAwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNTo1OTozNVrOGWbG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToyMzoxOFrOGYsMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjAwNA==", "bodyText": "This method should have some Javadoc. It is not clear what is the purpose of it.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r426166004", "createdAt": "2020-05-16T15:59:35Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {\n+\t\t\tthrow new InternalErrorException(\"Failed to parse property: '\" + propertyName + \"' from file: \" + path);\n+\t\t}\n+\t\treturn propertyNode;\n+\t}\n+\n+\tprivate static JsonNode parsePropertyNode(JsonNode root, String propertyName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MzA2OA==", "bodyText": "I have added javadoc to all private methods.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r428543068", "createdAt": "2020-05-21T09:23:18Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {\n+\t\t\tthrow new InternalErrorException(\"Failed to parse property: '\" + propertyName + \"' from file: \" + path);\n+\t\t}\n+\t\treturn propertyNode;\n+\t}\n+\n+\tprivate static JsonNode parsePropertyNode(JsonNode root, String propertyName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjAwNA=="}, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzkxNzcwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesConfigLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNjowMTo0MlrOGWbHwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToyMzozMlrOGYsM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjIwOQ==", "bodyText": "You should mention that the property name can be chained by dots.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r426166209", "createdAt": "2020-05-16T16:01:42Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesConfigLoader.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+public interface ModulesConfigLoader {\n+\n+\t/**\n+\t * For module with the given name, find a String configuration property with given name.\n+\t *\n+\t * @param moduleName name of a module\n+\t * @param property name of a property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0MzE5MA==", "bodyText": "Done.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r428543190", "createdAt": "2020-05-21T09:23:32Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesConfigLoader.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+public interface ModulesConfigLoader {\n+\n+\t/**\n+\t * For module with the given name, find a String configuration property with given name.\n+\t *\n+\t * @param moduleName name of a module\n+\t * @param property name of a property", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2NjIwOQ=="}, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzkyMzEwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNjowOTozNlrOGWbKYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToyNToyM1rOGYsQNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Njg4Mg==", "bodyText": "I am citing Pavel Z. who commented on this behavior in the previous PR:\n\"I just wonder, if we couldn't use empty value as a correct input for some logic. Like value is either set or not, then some logic performs specific or generic behavior. You could fall-back to default values by type like empty list / null / false etc.\"", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r426166882", "createdAt": "2020-05-16T16:09:36Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NDA1NA==", "bodyText": "I have added new versions of the methods that allow you to specify a default value that is returned, if the found value is null or not found. I don't think it is a good idea to generally return some fallback default values. It might now be clear that it does return these default values and what they actually are.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r428544054", "createdAt": "2020-05-21T09:25:23Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2Njg4Mg=="}, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDUwODA4OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDowMjo1MlrOGWfvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwOToyNTo1N1rOGYsRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MTg0MQ==", "bodyText": "Here I would prefer this way of loading a YAML file:\nYAMLMapper mapper = new YAMLMapper();\nreturn mapper.readTree(new File(path));", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r426241841", "createdAt": "2020-05-17T10:02:52Z", "author": {"login": "martin-kuba"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {\n+\t\t\tthrow new InternalErrorException(\"Failed to parse property: '\" + propertyName + \"' from file: \" + path);\n+\t\t}\n+\t\treturn propertyNode;\n+\t}\n+\n+\tprivate static JsonNode parsePropertyNode(JsonNode root, String propertyName) {\n+\t\tJsonNode currentNode = root;\n+\t\twhile (propertyName.contains(\".\")) {\n+\t\t\tString[] split = propertyName.split(\"\\\\.\", 2);\n+\t\t\tcurrentNode = currentNode.get(split[0]);\n+\t\t\tpropertyName = split[1];\n+\t\t}\n+\t\treturn currentNode.get(propertyName);\n+\t}\n+\n+\tprivate static JsonNode loadModulesYamlFile(String path) {\n+\t\ttry (InputStream is = new FileInputStream(path)) {\n+\t\t\treturn yamlObjectMapper.readTree(is);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU0NDI4NQ==", "bodyText": "I have updated the implementation corresponding to your suggestion.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r428544285", "createdAt": "2020-05-21T09:25:57Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/ModulesYamlConfigLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package cz.metacentrum.perun.core.impl.modules;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static cz.metacentrum.perun.core.impl.Utils.notNull;\n+\n+/**\n+ * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n+ */\n+\n+public class ModulesYamlConfigLoader implements ModulesConfigLoader {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(ModulesYamlConfigLoader.class);\n+\n+\tprivate static final ObjectMapper yamlObjectMapper = new ObjectMapper(new YAMLFactory());\n+\tprivate String modulesDirPath = \"/etc/perun/modules/\";\n+\n+\tpublic ModulesYamlConfigLoader() { }\n+\n+\tpublic ModulesYamlConfigLoader(String modulesDirPath) {\n+\t\tthis.modulesDirPath = modulesDirPath;\n+\t}\n+\n+\t@Override\n+\tpublic String loadStringProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).asText();\n+\t}\n+\n+\t@Override\n+\tpublic Integer loadIntegerProperty(String moduleName, String property) {\n+\t\treturn loadPropertyNode(moduleName, property).isNull() ? null : loadPropertyNode(moduleName, property).asInt();\n+\t}\n+\n+\t@Override\n+\tpublic List<String> loadStringListProperty(String moduleName, String property) {\n+\t\tList<String> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.asText()));\n+\t\treturn values;\n+\t}\n+\n+\t@Override\n+\tpublic List<Integer> loadIntegerListProperty(String moduleName, String property) {\n+\t\tList<Integer> values = new ArrayList<>();\n+\t\tJsonNode propertyNode = loadPropertyNode(moduleName, property);\n+\t\tpropertyNode.iterator().forEachRemaining(node -> values.add(node.isNull() ? null : node.asInt()));\n+\t\treturn values;\n+\t}\n+\n+\tprivate JsonNode loadPropertyNode(String moduleName, String propertyName) {\n+\t\tnotNull(moduleName, \"configFile\");\n+\t\tnotNull(propertyName, \"propertyName\");\n+\n+\t\tString path = modulesDirPath + moduleName + \".yaml\";\n+\n+\t\tJsonNode root = loadModulesYamlFile(path);\n+\n+\t\tJsonNode propertyNode = parsePropertyNode(root, propertyName);\n+\t\tif (propertyNode == null) {\n+\t\t\tthrow new InternalErrorException(\"Failed to parse property: '\" + propertyName + \"' from file: \" + path);\n+\t\t}\n+\t\treturn propertyNode;\n+\t}\n+\n+\tprivate static JsonNode parsePropertyNode(JsonNode root, String propertyName) {\n+\t\tJsonNode currentNode = root;\n+\t\twhile (propertyName.contains(\".\")) {\n+\t\t\tString[] split = propertyName.split(\"\\\\.\", 2);\n+\t\t\tcurrentNode = currentNode.get(split[0]);\n+\t\t\tpropertyName = split[1];\n+\t\t}\n+\t\treturn currentNode.get(propertyName);\n+\t}\n+\n+\tprivate static JsonNode loadModulesYamlFile(String path) {\n+\t\ttry (InputStream is = new FileInputStream(path)) {\n+\t\t\treturn yamlObjectMapper.readTree(is);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MTg0MQ=="}, "originalCommit": {"oid": "b657fa44df67514a3f4b12bc42d3d408e908207f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTk0MTg2OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_user_attribute_def_def_login_namespace_fenix_persistent_shadow.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQxMzoyMzo1OVrOGZu7FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo0MToyM1rOGZ-Ynw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNjM3Mg==", "bodyText": "I've just realized that the domain name property will be stored without the \"@\" character. However, we need to include the \"@\" while setting the attribute value.\nSo, please could you change the code to something like this?\nif (attribute.getFriendlyName().equals(attrNameFenix)) {\n    String domain = \"@\" + getDomainNameFenix();\n    filledAttribute.setValue(sha1HashCount(user, domain).toString() + domain);", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r429636372", "createdAt": "2020-05-24T13:23:59Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_user_attribute_def_def_login_namespace_fenix_persistent_shadow.java", "diffHunk": "@@ -41,7 +54,7 @@ public Attribute fillAttribute(PerunSessionImpl perunSession, User user, Attribu\n \t\tAttribute filledAttribute = new Attribute(attribute);\n \n \t\tif (attribute.getFriendlyName().equals(attrNameFenix)) {\n-\t\t\tfilledAttribute.setValue(sha1HashCount(user, domainNameFenix).toString() + domainNameFenix);\n+\t\t\tfilledAttribute.setValue(sha1HashCount(user, getDomainNameFenix()).toString() + getDomainNameFenix());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a8dc0a423261b985124d788a6e9bd7b2bcfd51"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4OTY5NQ==", "bodyText": "I have applied your suggested changes.", "url": "https://github.com/CESNET/perun/pull/2705#discussion_r429889695", "createdAt": "2020-05-25T11:41:23Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_user_attribute_def_def_login_namespace_fenix_persistent_shadow.java", "diffHunk": "@@ -41,7 +54,7 @@ public Attribute fillAttribute(PerunSessionImpl perunSession, User user, Attribu\n \t\tAttribute filledAttribute = new Attribute(attribute);\n \n \t\tif (attribute.getFriendlyName().equals(attrNameFenix)) {\n-\t\t\tfilledAttribute.setValue(sha1HashCount(user, domainNameFenix).toString() + domainNameFenix);\n+\t\t\tfilledAttribute.setValue(sha1HashCount(user, getDomainNameFenix()).toString() + getDomainNameFenix());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYzNjM3Mg=="}, "originalCommit": {"oid": "69a8dc0a423261b985124d788a6e9bd7b2bcfd51"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2042, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}