{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMTEwNDg0", "number": 3015, "title": "New methods getObjectWhereUserIsInRoles", "bodyText": "These methods were implemented for Vo, Facility, Resource, Group,\nMember and SecurityTeam.\nMethod for service was not implemented because it is not used at all.\nGroups are obtained with all their subgroups.\nSPONSORSHIP is supported for members.\nFixed typo in GROUPOBSERVER name.", "createdAt": "2020-12-01T08:14:39Z", "url": "https://github.com/CESNET/perun/pull/3015", "merged": true, "mergeCommit": {"oid": "1e8573b477724d3e2259abad15d2390d852a4e6f"}, "closed": true, "closedAt": "2020-12-02T11:19:12Z", "author": {"login": "balcirakpeter"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh7NhJAFqTU0MTg0MTUyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiMl8dAFqTU0MjczMDQyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxODQxNTI4", "url": "https://github.com/CESNET/perun/pull/3015#pullrequestreview-541841528", "createdAt": "2020-12-01T12:20:32Z", "commit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjoyMDozMlrOH8qJSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo1MzozOVrOH8wojQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM2NzExNQ==", "bodyText": "There is no info in the commit message that you also fixed a bug (typo) there.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r533367115", "createdAt": "2020-12-01T12:20:32Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/core/api/Role.java", "diffHunk": "@@ -10,7 +10,7 @@\n \tpublic static final String PERUNOBSERVER = \"PERUNOBSERVER\";\n \tpublic static final String VOADMIN = \"VOADMIN\";\n \tpublic static final String GROUPADMIN = \"GROUPADMIN\";\n-\tpublic static final String GROUPOBSERVER = \"GROUPOBSERER\";\n+\tpublic static final String GROUPOBSERVER = \"GROUPOBSERVER\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MzgzMQ==", "bodyText": "You should use \"Set\" here to prevent duplicates in the result.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r533383831", "createdAt": "2020-12-01T12:50:43Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1843,6 +1843,134 @@ public static PerunBl setPerunBl(PerunBl perunBl) {\n \t\treturn perunBl;\n \t}\n \n+\t/**\n+\t * Get all Vos where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Vos are retrieved\n+\t * @param roles for which Vos are retrieved\n+\t * @return List of Vos\n+\t */\n+\tpublic static List<Vo> getVosWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getVosWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Facilities where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Facilities are retrieved\n+\t * @param roles for which Facilities are retrieved\n+\t * @return List of Facilities\n+\t */\n+\tpublic static List<Facility> getFacilitiesWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getFacilitiesWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Resources where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Resources are retrieved\n+\t * @param roles for which Resources are retrieved\n+\t * @return List of Resources\n+\t */\n+\tpublic static List<Resource> getResourcesWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getResourcesWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Groups where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Groups are retrieved\n+\t * @param roles for which Groups are retrieved\n+\t * @return List of Groups\n+\t */\n+\tpublic static List<Group> getGroupsWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<Group> result = new HashSet<>();\n+\t\tList<Group> parentGroups = authzResolverImpl.getGroupsWhereUserIsInRoles(user, roles);\n+\n+\t\tfor (Group parentGroup: parentGroups) {\n+\t\t\tresult.add(parentGroup);\n+\t\t\tresult.addAll(perunBl.getGroupsManagerBl().getAllSubGroups(sess, parentGroup));\n+\t\t}\n+\n+\t\treturn new ArrayList<>(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1NzAwMg==", "bodyText": "Typo in the name of the method.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r533457002", "createdAt": "2020-12-01T14:39:47Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -902,6 +917,120 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<Vo> getVosWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\t\tparameters, VO_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<Facility> getFacilitiesWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + facilityMappingSelectQuery + \" from authz join facilities on authz.facility_id=facilities.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\tparameters, FACILITY_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<Resource> getResourcesWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + resourceMappingSelectQuery + \" from authz join resources on authz.resource_id=resources.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\tparameters, RESOURCE_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroupsWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + groupMappingSelectQuery + \" from authz join groups on authz.group_id=groups.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\tparameters, GROUP_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<Member> getMembersWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + memberMappingSelectQuery + \" from authz join members on authz.member_id=members.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\tparameters, MEMBER_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<SecurityTeam> getSecurityTeamsWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + securityTeamMappingSelectQuery + \" from authz join security_teams on authz.security_team_id=security_teams.id \" +\n+\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n+\t\t\t\t\t\" where (authz.user_id=:uid or members.user_id=:uid) and authz.role_id in \" +\n+\t\t\t\t\t\"(select id from roles where name in (:roles))\",\n+\t\t\t\tparameters, SECURITY_TEAM_MAPPER);\n+\t\t} catch (RuntimeException ex) {\n+\t\t\tthrow new InternalErrorException(ex);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create parameters for obtaining objects according to user and list of roles.\n+\t *\n+\t * @param user for who will be fetched id\n+\t * @param roles which will be lower cased\n+\t * @return user and roles parameters\n+\t */\n+\tprivate MapSqlParameterSource prepareParametersToGetObjectsByuserRoles(User user, List<String> roles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2OTQ1Mw==", "bodyText": "You should prevent duplicates in the list (use set or something like that). Should be used for all these methods.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r533469453", "createdAt": "2020-12-01T14:49:02Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -902,6 +917,120 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<Vo> getVosWhereUserIsInRoles(User user, List<String> roles) {\n+\t\tMapSqlParameterSource parameters = prepareParametersToGetObjectsByuserRoles(user, roles);\n+\n+\t\ttry {\n+\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MzQyMQ==", "bodyText": "There is missing information about the type of parameter (List for example here). The same problem is in the other Javadoc here.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r533473421", "createdAt": "2020-12-01T14:53:39Z", "author": {"login": "stavamichal"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -782,5 +785,269 @@ public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\tcz.metacentrum.perun.core.api.AuthzResolver.loadAuthorizationComponents(ac.getSession());\n \t\t\treturn null;\n \t\t}\n+\t},\n+\n+\t/*#\n+\t * Get all Vos where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param user for who Vos are retrieved\n+\t * @param roles for which Vos are retrieved\n+\t * @return List of Vos\n+\t *\n+\t * @throws PrivilegeException when the principal is not authorized.\n+\t */\n+\t/*#\n+\t * Get all Vos where the given principal has set one of the given roles\n+\t * or the given principal is a member of an authorized group with such roles.\n+\t *\n+\t * @param roles for which Vos are retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjI0MDQ1", "url": "https://github.com/CESNET/perun/pull/3015#pullrequestreview-542624045", "createdAt": "2020-12-02T09:06:06Z", "commit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTowNjowNlrOH9Q3Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOToxNzo1MVrOH9RWdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwMTQ5OQ==", "bodyText": "I am not really sure if we want this behavior. It might be a bit confusing. Image a rich tree group structure and some user who has been given a GROUPADMIN of the root group. In GUI, he will be shown, that he is an admin of something like 1000 groups and he will not be able to distinguish between the root group and subgroups.", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r534001499", "createdAt": "2020-12-02T09:06:06Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1843,6 +1843,134 @@ public static PerunBl setPerunBl(PerunBl perunBl) {\n \t\treturn perunBl;\n \t}\n \n+\t/**\n+\t * Get all Vos where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Vos are retrieved\n+\t * @param roles for which Vos are retrieved\n+\t * @return List of Vos\n+\t */\n+\tpublic static List<Vo> getVosWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getVosWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Facilities where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Facilities are retrieved\n+\t * @param roles for which Facilities are retrieved\n+\t * @return List of Facilities\n+\t */\n+\tpublic static List<Facility> getFacilitiesWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getFacilitiesWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Resources where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Resources are retrieved\n+\t * @param roles for which Resources are retrieved\n+\t * @return List of Resources\n+\t */\n+\tpublic static List<Resource> getResourcesWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn authzResolverImpl.getResourcesWhereUserIsInRoles(user, roles);\n+\t}\n+\n+\t/**\n+\t * Get all Groups where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param sess Perun session\n+\t * @param user for who Groups are retrieved\n+\t * @param roles for which Groups are retrieved\n+\t * @return List of Groups\n+\t */\n+\tpublic static List<Group> getGroupsWhereUserIsInRoles(PerunSession sess, User user, List<String> roles) {\n+\t\tfor (String role: roles) {\n+\t\t\tif (!roleExists(role)) {\n+\t\t\t\tthrow new InternalErrorException(\"Role: \"+ role +\" does not exists.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tSet<Group> result = new HashSet<>();\n+\t\tList<Group> parentGroups = authzResolverImpl.getGroupsWhereUserIsInRoles(user, roles);\n+\n+\t\tfor (Group parentGroup: parentGroups) {\n+\t\t\tresult.add(parentGroup);\n+\t\t\tresult.addAll(perunBl.getGroupsManagerBl().getAllSubGroups(sess, parentGroup));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwOTQ2Mg==", "bodyText": "Nit: For assertions like this, it is good to use the Assertj library. You don't even need to check the size explicitly with such assertion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertTrue(result.containsAll(Arrays.asList(testVo, testVo3)));\n          \n          \n            \n            \t\tassertThat(result).containsOnly(testVo, testVo3);", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r534009462", "createdAt": "2020-12-02T09:17:51Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/api/AuthzResolverIntegrationTest.java", "diffHunk": "@@ -1080,6 +1080,248 @@ public void getVoRichAdminsWithWrongObjects() throws Exception {\n \t\tAuthzResolver.getRichAdmins(sess, testUser, new ArrayList<>(), Role.VOADMIN, false, true);\n \t}\n \n+\t@Test\n+\tpublic void getVosWhereUserIsInRoles() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"getVosWhereUserIsInRoles\");\n+\n+\t\tfinal Vo testVo = perun.getVosManager().createVo(sess, new Vo(0,\"testvo1\",\"testvo1\"));\n+\t\tfinal Vo testVo2 = perun.getVosManager().createVo(sess, new Vo(1,\"testvo2\",\"testvo2\"));\n+\t\tfinal Vo testVo3 = perun.getVosManager().createVo(sess, new Vo(2,\"testvo3\",\"testvo3\"));\n+\t\tfinal Group testGroup = perun.getGroupsManager().createGroup(sess, testVo, new Group(\"testGroup\", \"testg\"));\n+\t\tfinal Member testMember = createSomeMember(testVo);\n+\t\tfinal User testUser = perun.getUsersManagerBl().getUserByMember(sess, testMember);\n+\t\tperun.getGroupsManager().addMember(sess, testGroup, testMember);\n+\n+\t\tAuthzResolver.setRole(sess, testUser, testVo, Role.VOADMIN);\n+\t\tAuthzResolver.setRole(sess, testUser, testVo2, Role.SPONSOR);\n+\t\tAuthzResolver.setRole(sess, testGroup, testVo3, Role.VOOBSERVER);\n+\t\tList<Vo> result = AuthzResolver.getVosWhereUserIsInRoles(sess, testUser, Arrays.asList(Role.VOADMIN, Role.VOOBSERVER));\n+\n+\t\tassertEquals(2, result.size());\n+\t\tassertTrue(result.containsAll(Arrays.asList(testVo, testVo3)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17e3d668fc56a07c51f2e0c908fbee8174675869", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/17e3d668fc56a07c51f2e0c908fbee8174675869", "committedDate": "2020-12-01T08:11:24Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are obtained with all their subgroups.\n- SPONSORSHIP is supported for members."}, "afterCommit": {"oid": "50f108cd7726e1aaaf34f2c42cc529f7ae44a833", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/50f108cd7726e1aaaf34f2c42cc529f7ae44a833", "committedDate": "2020-12-02T09:42:50Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50f108cd7726e1aaaf34f2c42cc529f7ae44a833", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/50f108cd7726e1aaaf34f2c42cc529f7ae44a833", "committedDate": "2020-12-02T09:42:50Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}, "afterCommit": {"oid": "8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd", "committedDate": "2020-12-02T09:46:59Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjY1NzE5", "url": "https://github.com/CESNET/perun/pull/3015#pullrequestreview-542665719", "createdAt": "2020-12-02T09:53:21Z", "commit": {"oid": "8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo1MzoyMVrOH9S3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo1NTozN1rOH9S90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNDIxMw==", "bodyText": "Set of objects (there are more of these typos in the file).", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r534034213", "createdAt": "2020-12-02T09:53:21Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -568,4 +570,67 @@\n \t * @return list of authorizedGroups\n \t */\n \tList<Group> getAdminGroups(Map<String, Integer> mappingOfValues);\n+\n+\t/**\n+\t * Get all Vos where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param user for who Vos are retrieved\n+\t * @param roles for which Vos are retrieved\n+\t * @return List of Vos", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTkyMg==", "bodyText": "The param is still in the wrong format. It should be like this:\n@param roles List<String> list of role names for which Vos are retrieved", "url": "https://github.com/CESNET/perun/pull/3015#discussion_r534035922", "createdAt": "2020-12-02T09:55:37Z", "author": {"login": "stavamichal"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -782,5 +785,273 @@ public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\tcz.metacentrum.perun.core.api.AuthzResolver.loadAuthorizationComponents(ac.getSession());\n \t\t\treturn null;\n \t\t}\n+\t},\n+\n+\t/*#\n+\t * Get all Vos where the given user has set one of the given roles\n+\t * or the given user is a member of an authorized group with such roles.\n+\t *\n+\t * @param user id for which Vos are retrieved\n+\t * @param List of role names for which Vos are retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6c84e15203825c555b1096a036b9fd7b26f246f", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/b6c84e15203825c555b1096a036b9fd7b26f246f", "committedDate": "2020-12-02T10:05:30Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/8d05b53ff8bf1033e3be8d1d5262ee1e72ee65dd", "committedDate": "2020-12-02T09:46:59Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}, "afterCommit": {"oid": "b6c84e15203825c555b1096a036b9fd7b26f246f", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/b6c84e15203825c555b1096a036b9fd7b26f246f", "committedDate": "2020-12-02T10:05:30Z", "message": "New methods getObjectWhereUserIsInRoles\n\n- These methods were implemented for Vo, Facility, Resource, Group,\n  Member and SecurityTeam.\n- Method for service was not implemented because it is not used at all.\n- Groups are fetched without their subgroups.\n- SPONSORSHIP is supported for members.\n- Fixed typo in GROUPOBSERVER name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjc4MzYz", "url": "https://github.com/CESNET/perun/pull/3015#pullrequestreview-542678363", "createdAt": "2020-12-02T10:07:32Z", "commit": {"oid": "b6c84e15203825c555b1096a036b9fd7b26f246f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzMwNDIy", "url": "https://github.com/CESNET/perun/pull/3015#pullrequestreview-542730422", "createdAt": "2020-12-02T11:10:59Z", "commit": {"oid": "b6c84e15203825c555b1096a036b9fd7b26f246f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1721, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}