{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODY0NTQ3", "number": 2958, "title": "Added extraction of ues attributes to extractAdditionalUserExtSources", "bodyText": "the method extractAdditionalUserExtSources() now returns RichUserExtSources with attributes extracted from subjectData\nalso created new type of Candidate which holds RichUserExtSources and will be used during synchronization (in later commit)\ngetCandidate now returns this new CandidateSync, every current usage of method was modified to transform to the old Candidate", "createdAt": "2020-10-28T22:05:46Z", "url": "https://github.com/CESNET/perun/pull/2958", "merged": true, "mergeCommit": {"oid": "03097dbb8a2a29f95c90c2c70d3fdc0ab219319c"}, "closed": true, "closedAt": "2020-11-11T07:54:29Z", "author": {"login": "metodej"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXEsGcgH2gAyNTExODY0NTQ3OmE5MGQ1YjVkYmY0NDg4NjU2NmJkYzBkMzJkZjllYjYxNTRjODYyOGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbL6pKAFqTUyNzM4MDQ2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/a90d5b5dbf44886566bdc0d32df9eb6154c8628b", "committedDate": "2020-10-28T21:45:17Z", "message": "Added extraction of ues attributes to extractAdditionalUserExtSources\n\n- the method extractAdditionalUserExtSources() now returns RichUserExtSources with attributes extracted from subjectData\n- also created new type of Candidate which holds RichUserExtSources and will be used during synchronization (in later commit)\n- getCandidate now returns this new CandidateSync, every current usage of method was modified to transform to the old Candidate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDQ0MjMx", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-519444231", "createdAt": "2020-10-29T08:49:33Z", "commit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0OTozM1rOHqRvnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTowNDoxN1rOHqSSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk1Ng==", "bodyText": "I am missing the main UserExtSource which is also in Candidate. You wouldn't be able to say which one is the main from the list which I am note sure is or isn't a problem. I would work with this RichUserExtSource as a separate UES like in the Candidate to prevent this problem.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r514092956", "createdAt": "2020-10-29T08:49:33Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/core/api/CandidateSync.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package cz.metacentrum.perun.core.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Candidate used in group synchronization.\n+ * @author Metodej Klang\n+ */\n+public class CandidateSync extends User {\n+\n+\tprivate List<RichUserExtSource> richUserExtSources;\n+\tprivate Map<String, String> attributes;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NjI4Nw==", "bodyText": "The main userExtSource should be saved in a different field of the object. Without it, you can't say which one is the main one.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r514096287", "createdAt": "2020-10-29T08:55:07Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ExtSourcesManagerBlImpl.java", "diffHunk": "@@ -281,11 +281,13 @@ public Candidate getCandidate(PerunSession perunSession, Map<String,String> subj\n \t\t\t\tattributes.put(attrName, subjectData.get(attrName));\n \t\t\t}\n \t\t}\n-\t\tList<UserExtSource> additionalUserExtSources = Utils.extractAdditionalUserExtSources(perunSession, subjectData);\n-\t\tcandidate.setAdditionalUserExtSources(additionalUserExtSources);\n-\t\tcandidate.setAttributes(attributes);\n \n-\t\treturn candidate;\n+\t\tList<RichUserExtSource> additionalUserExtSources = Arrays.asList(new RichUserExtSource(userExtSource, new ArrayList<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5OTUyMg==", "bodyText": "Also, you will never get the correct object of a Candidate from the CandidateSync without this information.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r514099522", "createdAt": "2020-10-29T09:00:18Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/core/api/CandidateSync.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package cz.metacentrum.perun.core.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Candidate used in group synchronization.\n+ * @author Metodej Klang\n+ */\n+public class CandidateSync extends User {\n+\n+\tprivate List<RichUserExtSource> richUserExtSources;\n+\tprivate Map<String, String> attributes;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5Mjk1Ng=="}, "originalCommit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwMTg1Mg==", "bodyText": "There could be more than 1 attribute after the login. You should parse all of them. So this code should probably work for length>1.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r514101852", "createdAt": "2020-10-29T09:04:17Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -206,8 +212,25 @@ public static String join(Iterable<?> collection, String separator) {\n \t\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tUserExtSource userExtSource = new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin);\n+\n+\t\t\t\t\tList<Attribute> attributes = new ArrayList<>();\n+\t\t\t\t\t// Set ues attribute\n+\t\t\t\t\tif (additionalExtLoginAndAttribute.length == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDE5MDg4", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-520419088", "createdAt": "2020-10-30T07:12:15Z", "commit": {"oid": "a90d5b5dbf44886566bdc0d32df9eb6154c8628b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/0fa53b5bfc4686c7bf1237e8206856ee6755087d", "committedDate": "2020-10-30T09:21:24Z", "message": "Fixes based on review\n\n- added main RichUserExtSource to CandidateSync (as Candidate has)\n- added support of more attributes in extractAdditionalUserExtSources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTU1NjMx", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-520555631", "createdAt": "2020-10-30T10:49:57Z", "commit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo0OTo1N1rOHrJ1BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDo1MjozNVrOHrJ5_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMTg0NA==", "bodyText": "I am just wondering about a use case where we want to find users by some attribute from the main userExtSource. I think that the way the code is written now, it will be not possible. What do you think @metodej and @stavamichal ?", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r515011844", "createdAt": "2020-10-30T10:49:57Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ExtSourcesManagerBlImpl.java", "diffHunk": "@@ -281,11 +279,12 @@ public Candidate getCandidate(PerunSession perunSession, Map<String,String> subj\n \t\t\t\tattributes.put(attrName, subjectData.get(attrName));\n \t\t\t}\n \t\t}\n-\t\tList<UserExtSource> additionalUserExtSources = Utils.extractAdditionalUserExtSources(perunSession, subjectData);\n-\t\tcandidate.setAdditionalUserExtSources(additionalUserExtSources);\n-\t\tcandidate.setAttributes(attributes);\n \n-\t\treturn candidate;\n+\t\tcandidateSync.setRichUserExtSource(new RichUserExtSource(userExtSource, new ArrayList<>()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMzExNw==", "bodyText": "I think this will work only for single value attributes. @stavamichal do we want to support also multivalue attributes?", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r515013117", "createdAt": "2020-10-30T10:52:35Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -206,8 +213,28 @@ public static String join(Iterable<?> collection, String separator) {\n \t\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tUserExtSource userExtSource = new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin);\n+\n+\t\t\t\t\tList<Attribute> attributes = new ArrayList<>();\n+\t\t\t\t\t// Set ues attribute\n+\t\t\t\t\tif (additionalExtLoginAndAttribute.length > 1) {\n+\t\t\t\t\t\tList<String> uesAttributesWithValues =  new LinkedList<>();\n+\t\t\t\t\t\tuesAttributesWithValues.addAll(Arrays.asList(additionalExtLoginAndAttribute));\n+\t\t\t\t\t\tuesAttributesWithValues.remove(0);\n+\t\t\t\t\t\tfor (String uesAttributeWithValue : uesAttributesWithValues) {\n+\t\t\t\t\t\t\tString[] uesAttribute = uesAttributeWithValue.split(\"=\");\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tAttribute attribute = new Attribute(sess.getPerun().getAttributesManager().getAttributeDefinition(sess, uesAttribute[0]), uesAttribute[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzI3NzIx", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-523327721", "createdAt": "2020-11-04T12:47:57Z", "commit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjo0Nzo1N1rOHtWnmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxMjo0Nzo1N1rOHtWnmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzMxODU1NQ==", "bodyText": "RichUserExtSource is missing in hashCode counting and also in method equals.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r517318555", "createdAt": "2020-11-04T12:47:57Z", "author": {"login": "stavamichal"}, "path": "perun-base/src/main/java/cz/metacentrum/perun/core/api/CandidateSync.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package cz.metacentrum.perun.core.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Candidate used in group synchronization.\n+ * @author Metodej Klang\n+ */\n+public class CandidateSync extends User {\n+\n+\tprivate RichUserExtSource richUserExtSource;\n+\tprivate List<RichUserExtSource> additionalRichUserExtSources;\n+\tprivate Map<String, String> attributes;\n+\n+\tpublic CandidateSync() {\n+\t}\n+\n+\tpublic CandidateSync(Candidate candidate) {\n+\t\tthis.setFirstName(candidate.getFirstName());\n+\t\tthis.setLastName(candidate.getLastName());\n+\t\tthis.setMiddleName(candidate.getMiddleName());\n+\t\tthis.setTitleAfter(candidate.getTitleAfter());\n+\t\tthis.setTitleBefore(candidate.getTitleBefore());\n+\t\tthis.setServiceUser(candidate.isServiceUser());\n+\t\tthis.setSponsoredUser(candidate.isSponsoredUser());\n+\t\tsetAttributes(candidate.getAttributes());\n+\t\tsetRichUserExtSource(new RichUserExtSource(candidate.getUserExtSource(), new ArrayList<>()));\n+\t\tif (candidate.getAdditionalUserExtSources() != null) {\n+\t\t\tsetAdditionalRichUserExtSources(candidate.getAdditionalUserExtSources().stream().map(extSource ->\n+\t\t\t\tnew RichUserExtSource(extSource, new ArrayList<>())).collect(Collectors.toList()));\n+\t\t}\n+\t}\n+\n+\tpublic RichUserExtSource getRichUserExtSource() {\n+\t\treturn richUserExtSource;\n+\t}\n+\n+\tpublic void setRichUserExtSource(RichUserExtSource richUserExtSource) {\n+\t\tthis.richUserExtSource = richUserExtSource;\n+\t}\n+\n+\tpublic Map<String, String> getAttributes() {\n+\t\treturn attributes;\n+\t}\n+\n+\tpublic void setAttributes(Map<String, String> attributes) {\n+\t\tthis.attributes = attributes;\n+\t}\n+\n+\tpublic List<RichUserExtSource> getAdditionalRichUserExtSources() {\n+\t\treturn additionalRichUserExtSources;\n+\t}\n+\n+\tpublic void setAdditionalRichUserExtSources(List<RichUserExtSource> additionalRichUserExtSources) {\n+\t\tthis.additionalRichUserExtSources = additionalRichUserExtSources;\n+\t}\n+\n+\tpublic List<RichUserExtSource> getUserExtSources() {\n+\t\tList<RichUserExtSource> userExtSources = new ArrayList<>();\n+\t\tif (this.richUserExtSource != null) {\n+\t\t\tuserExtSources.add(this.richUserExtSource);\n+\t\t}\n+\t\tif (this.additionalRichUserExtSources != null) {\n+\t\t\tuserExtSources.addAll(this.additionalRichUserExtSources);\n+\t\t}\n+\t\treturn Collections.unmodifiableList(userExtSources);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fa53b5bfc4686c7bf1237e8206856ee6755087d"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f35d0d9774f23eed28177be784501968a0468d56", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/f35d0d9774f23eed28177be784501968a0468d56", "committedDate": "2020-11-05T13:02:53Z", "message": "Fixes based on review\n\n- new object CandidateSync has now all its attributes included in hashCode and equals methods\n- added support of multivalue login attributes\n- deleted debug printing in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjU2MzMx", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-524256331", "createdAt": "2020-11-05T13:26:45Z", "commit": {"oid": "f35d0d9774f23eed28177be784501968a0468d56"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoyNjo0NVrOHuDKpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzoyODozMVrOHuDPAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0ODQyMw==", "bodyText": "This whole method should be refactored to smaller parts with better Javadoc. There should be info what is the expected format of additionalUserExtSource in the subject, which part is which and how it will be parsed.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518048423", "createdAt": "2020-11-05T13:26:45Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -158,8 +163,8 @@ public static String join(Iterable<?> collection, String separator) {\n \t * @return List<UserExtSource> all additional ExtSources from the subject, returned list will never contain null value\n \t * @throws InternalErrorException\n \t */\n-\tpublic static List<UserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n-\t\tList<UserExtSource> additionalUserExtSources = new ArrayList<>();\n+\tpublic static List<RichUserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35d0d9774f23eed28177be784501968a0468d56"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA0OTUzOQ==", "bodyText": "The name of this method is very similar to the one parsing attribute value from escaped string (from DB) to the object Attribute in Perun. I would change the name and add more info to the javadoc (because this method has just one purpose and can't be used for other).", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518049539", "createdAt": "2020-11-05T13:28:31Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -206,14 +213,49 @@ public static String join(Iterable<?> collection, String separator) {\n \t\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t\tUserExtSource userExtSource = new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin);\n+\n+\t\t\t\t\tList<Attribute> attributes = new ArrayList<>();\n+\t\t\t\t\t// Set ues attribute\n+\t\t\t\t\tif (additionalExtLoginAndAttribute.length > 1) {\n+\t\t\t\t\t\tList<String> uesAttributesWithValues =  new LinkedList<>();\n+\t\t\t\t\t\tuesAttributesWithValues.addAll(Arrays.asList(additionalExtLoginAndAttribute));\n+\t\t\t\t\t\tuesAttributesWithValues.remove(0);\n+\t\t\t\t\t\tfor (String uesAttributeWithValue : uesAttributesWithValues) {\n+\t\t\t\t\t\t\tString[] uesAttribute = uesAttributeWithValue.split(\"=\");\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tAttribute attribute = new Attribute(sess.getPerun().getAttributesManager().getAttributeDefinition(sess, uesAttribute[0]), getAttributeValueFromString(uesAttribute[1]));\n+\t\t\t\t\t\t\t\tattributes.add(attribute);\n+\t\t\t\t\t\t\t} catch (AttributeNotExistsException e) {\n+\t\t\t\t\t\t\t\tlog.error(\"User with login {} has invalid attribute for userExtSource defined as {} with value {}.\", login, uesAttribute[0], uesAttribute[1]);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tRichUserExtSource richUserExtSource = new RichUserExtSource(userExtSource, attributes);\n \t\t\t\t\t// Add additional user extSource\n-\t\t\t\t\tadditionalUserExtSources.add(new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin));\n+\t\t\t\t\tadditionalUserExtSources.add(richUserExtSource);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn additionalUserExtSources;\n \t}\n \n+\t/**\n+\t * Splits attribute value by \";\" and returns list of string values or single string if no \";\" occurres.\n+\t *\n+\t * @param attributeValue unsplitted attribute value\n+\t * @return splitted attribute value to list of string or single string\n+\t */\n+\tprivate static Object getAttributeValueFromString(String attributeValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f35d0d9774f23eed28177be784501968a0468d56"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/070a86b8b33f08a4fb9cc5f528de18ba529f8726", "committedDate": "2020-11-05T15:39:37Z", "message": "Fixes based on review\n\n- changed structure of extractAdditionalUserExtSources and javadoc for better readability (hopefully)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9060a6d68073acc545aafb4dade99c19960518ef", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/9060a6d68073acc545aafb4dade99c19960518ef", "committedDate": "2020-11-05T15:30:35Z", "message": "Fixes based on review\n\n- changed structure of extractAdditionalUserExtSources and javadoc for better readability (hopefully)"}, "afterCommit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/070a86b8b33f08a4fb9cc5f528de18ba529f8726", "committedDate": "2020-11-05T15:39:37Z", "message": "Fixes based on review\n\n- changed structure of extractAdditionalUserExtSources and javadoc for better readability (hopefully)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDAwMjg1", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-524400285", "createdAt": "2020-11-05T15:48:29Z", "commit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNTo0ODoyOVrOHuJs1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjowMDowM1rOHuKP2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE1NTQ3OA==", "bodyText": "So the LoA part is optional right? Can we have it explicitly in the javadoc please?", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518155478", "createdAt": "2020-11-05T15:48:29Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -152,68 +153,163 @@ public static String join(Iterable<?> collection, String separator) {\n \n \t/**\n \t * Returns additionalUserExtSources from the subject. It's used for synchronization from different ExtSources. subjectFromExtSource was obtained from the ExtSource.\n+\t * Expected format of additional userExtSource is: extSourceName|extSourceType|extLogin;uesAttribute1=value1,value2;uesAttribute2=value1[|LoA]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2MTAzMw==", "bodyText": "You don't really need to check it here. If there are 3 parts, you can work with that as it was ok already. So just pass the array (or arraylist) of arguments inside of the method parseAdditionalUserExtSource and let it process (or throw an exception if anything is wrong).", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518161033", "createdAt": "2020-11-05T15:55:38Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -152,68 +153,163 @@ public static String join(Iterable<?> collection, String separator) {\n \n \t/**\n \t * Returns additionalUserExtSources from the subject. It's used for synchronization from different ExtSources. subjectFromExtSource was obtained from the ExtSource.\n+\t * Expected format of additional userExtSource is: extSourceName|extSourceType|extLogin;uesAttribute1=value1,value2;uesAttribute2=value1[|LoA]\n \t *\n \t * @param sess perun session\n \t * @param subjectFromExtSource map with the subject\n-\t * @return List<UserExtSource> all additional ExtSources from the subject, returned list will never contain null value\n-\t * @throws InternalErrorException\n+\t * @return List<RichUserExtSource> all additional ExtSources (and possibly their attributes) from the subject, returned list will never contain null value\n \t */\n-\tpublic static List<UserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n-\t\tList<UserExtSource> additionalUserExtSources = new ArrayList<>();\n+\tpublic static List<RichUserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n+\t\tList<RichUserExtSource> additionalUserExtSources = new ArrayList<>();\n \t\tfor (String attrName : subjectFromExtSource.keySet()) {\n \t\t\tif(attrName != null &&\n \t\t\t\tsubjectFromExtSource.get(attrName) != null &&\n \t\t\t\tattrName.startsWith(ExtSourcesManagerImpl.USEREXTSOURCEMAPPING)) {\n \t\t\t\tString login = subjectFromExtSource.get(\"login\");\n \n-\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\"); // Entry contains extSourceName|extSourceType|extLogin[|LoA]\n+\t\t\t\t// Entry contains extSourceName|extSourceType|extLogin;uesAttribute=value1,value2[|LoA]\n+\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\");\n \t\t\t\tlog.debug(\"Processing additionalUserExtSource {}\",  subjectFromExtSource.get(attrName));\n \n-\t\t\t\t//Check if the array has at least 3 parts, this is protection against outOfBoundException\n+\t\t\t\t// Check if the array has at least 3 parts, this is protection against outOfBoundException\n \t\t\t\tif(userExtSourceRaw.length < 3) {\n \t\t\t\t\tthrow new InternalErrorException(\"There is a missing mandatory part of additional user extSource value when processing it - '\" + attrName + \"'\");\n \t\t\t\t}\n \n+\t\t\t\t// Parse required parts of additional ues from subject\n \t\t\t\tString additionalExtSourceName = userExtSourceRaw[0];\n \t\t\t\tString additionalExtSourceType = userExtSourceRaw[1];\n-\t\t\t\tString additionalExtLogin = userExtSourceRaw[2];\n-\t\t\t\tint additionalExtLoa = 0;\n-\t\t\t\t// Loa is not mandatory argument\n-\t\t\t\tif (userExtSourceRaw.length>3 && userExtSourceRaw[3] != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tadditionalExtLoa = Integer.parseInt(userExtSourceRaw[3]);\n-\t\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t\t\tthrow new ParserException(\"Subject with login [\" + login + \"] has wrong LoA '\" + userExtSourceRaw[3] + \"'.\", e, \"LoA\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tExtSource additionalExtSource;\n+\t\t\t\tString[] additionalExtLoginAndAttributes = userExtSourceRaw[2].split(\";\");\n+\t\t\t\tString additionalExtLogin = additionalExtLoginAndAttributes[0];\n \n+\t\t\t\t// Check if any of the required part is not null nor it is empty\n \t\t\t\tif (additionalExtSourceName == null || additionalExtSourceName.isEmpty() ||\n \t\t\t\t\tadditionalExtSourceType == null || additionalExtSourceType.isEmpty() ||\n \t\t\t\t\tadditionalExtLogin == null || additionalExtLogin.isEmpty()) {\n \t\t\t\t\tlog.error(\"User with login {} has invalid additional userExtSource defined {}.\", login, userExtSourceRaw);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2Mjc5OA==", "bodyText": "This method should take care of parsing data needed for creating the UES. If any argument will be missing, you can throw an exception here. Then you can catch it outside and just log it and skip the whole process (as before). What do you think? Create a new exception if needed or use standard ParseException.", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518162798", "createdAt": "2020-11-05T15:57:55Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -152,68 +153,163 @@ public static String join(Iterable<?> collection, String separator) {\n \n \t/**\n \t * Returns additionalUserExtSources from the subject. It's used for synchronization from different ExtSources. subjectFromExtSource was obtained from the ExtSource.\n+\t * Expected format of additional userExtSource is: extSourceName|extSourceType|extLogin;uesAttribute1=value1,value2;uesAttribute2=value1[|LoA]\n \t *\n \t * @param sess perun session\n \t * @param subjectFromExtSource map with the subject\n-\t * @return List<UserExtSource> all additional ExtSources from the subject, returned list will never contain null value\n-\t * @throws InternalErrorException\n+\t * @return List<RichUserExtSource> all additional ExtSources (and possibly their attributes) from the subject, returned list will never contain null value\n \t */\n-\tpublic static List<UserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n-\t\tList<UserExtSource> additionalUserExtSources = new ArrayList<>();\n+\tpublic static List<RichUserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n+\t\tList<RichUserExtSource> additionalUserExtSources = new ArrayList<>();\n \t\tfor (String attrName : subjectFromExtSource.keySet()) {\n \t\t\tif(attrName != null &&\n \t\t\t\tsubjectFromExtSource.get(attrName) != null &&\n \t\t\t\tattrName.startsWith(ExtSourcesManagerImpl.USEREXTSOURCEMAPPING)) {\n \t\t\t\tString login = subjectFromExtSource.get(\"login\");\n \n-\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\"); // Entry contains extSourceName|extSourceType|extLogin[|LoA]\n+\t\t\t\t// Entry contains extSourceName|extSourceType|extLogin;uesAttribute=value1,value2[|LoA]\n+\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\");\n \t\t\t\tlog.debug(\"Processing additionalUserExtSource {}\",  subjectFromExtSource.get(attrName));\n \n-\t\t\t\t//Check if the array has at least 3 parts, this is protection against outOfBoundException\n+\t\t\t\t// Check if the array has at least 3 parts, this is protection against outOfBoundException\n \t\t\t\tif(userExtSourceRaw.length < 3) {\n \t\t\t\t\tthrow new InternalErrorException(\"There is a missing mandatory part of additional user extSource value when processing it - '\" + attrName + \"'\");\n \t\t\t\t}\n \n+\t\t\t\t// Parse required parts of additional ues from subject\n \t\t\t\tString additionalExtSourceName = userExtSourceRaw[0];\n \t\t\t\tString additionalExtSourceType = userExtSourceRaw[1];\n-\t\t\t\tString additionalExtLogin = userExtSourceRaw[2];\n-\t\t\t\tint additionalExtLoa = 0;\n-\t\t\t\t// Loa is not mandatory argument\n-\t\t\t\tif (userExtSourceRaw.length>3 && userExtSourceRaw[3] != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tadditionalExtLoa = Integer.parseInt(userExtSourceRaw[3]);\n-\t\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t\t\tthrow new ParserException(\"Subject with login [\" + login + \"] has wrong LoA '\" + userExtSourceRaw[3] + \"'.\", e, \"LoA\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tExtSource additionalExtSource;\n+\t\t\t\tString[] additionalExtLoginAndAttributes = userExtSourceRaw[2].split(\";\");\n+\t\t\t\tString additionalExtLogin = additionalExtLoginAndAttributes[0];\n \n+\t\t\t\t// Check if any of the required part is not null nor it is empty\n \t\t\t\tif (additionalExtSourceName == null || additionalExtSourceName.isEmpty() ||\n \t\t\t\t\tadditionalExtSourceType == null || additionalExtSourceType.isEmpty() ||\n \t\t\t\t\tadditionalExtLogin == null || additionalExtLogin.isEmpty()) {\n \t\t\t\t\tlog.error(\"User with login {} has invalid additional userExtSource defined {}.\", login, userExtSourceRaw);\n \t\t\t\t} else {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t// Try to get extSource, with full extSource object (containg ID)\n-\t\t\t\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().getExtSourceByName(sess, additionalExtSourceName);\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Create new one if not exists\n-\t\t\t\t\t\t\tadditionalExtSource = new ExtSource(additionalExtSourceName, additionalExtSourceType);\n-\t\t\t\t\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().createExtSource(sess, additionalExtSource, null);\n-\t\t\t\t\t\t} catch (ExtSourceExistsException e1) {\n-\t\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t// Add additional user extSource\n-\t\t\t\t\tadditionalUserExtSources.add(new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin));\n+\n+\t\t\t\t\t// Get LoA of additional ues (0 if not stated)\n+\t\t\t\t\tint additionalExtLoa = parseAdditionalUESLoa(login, userExtSourceRaw);\n+\n+\t\t\t\t\t// Get additional ues\n+\t\t\t\t\tUserExtSource additionalUserExtSource = parseAdditionalUserExtSource(sess, additionalExtSourceType, additionalExtSourceName, additionalExtLoa, additionalExtLogin);\n+\n+\t\t\t\t\t// Get ues attributes\n+\t\t\t\t\tList<Attribute> uesAttributes = parseUESAttributes(sess, login, additionalExtLoginAndAttributes);\n+\n+\t\t\t\t\t// Create richUserExtSource from ues and its attributes\n+\t\t\t\t\tRichUserExtSource richUserExtSource = new RichUserExtSource(additionalUserExtSource, uesAttributes);\n+\n+\t\t\t\t\t// Add additional rich user extSource\n+\t\t\t\t\tadditionalUserExtSources.add(richUserExtSource);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn additionalUserExtSources;\n \t}\n \n+\t/**\n+\t * Returns loa of addtional ues, if not stated, returns 0.\n+\t * Used in extractAdditionalUserExtSources to get ues LoA.\n+\t *\n+\t * @param login login of subject\n+\t * @param userExtSourceRaw array containing LoA\n+\t * @return int LoA\n+\t */\n+\tprivate static int parseAdditionalUESLoa(String login, String[] userExtSourceRaw) {\n+\t\tint additionalExtLoa = 0;\n+\t\t// Loa is not mandatory argument\n+\t\tif (userExtSourceRaw.length>3 && userExtSourceRaw[3] != null) {\n+\t\t\ttry {\n+\t\t\t\tadditionalExtLoa = Integer.parseInt(userExtSourceRaw[3]);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tthrow new ParserException(\"Subject with login [\" + login + \"] has wrong LoA '\" + userExtSourceRaw[3] + \"'.\", e, \"LoA\");\n+\t\t\t}\n+\t\t}\n+\t\treturn additionalExtLoa;\n+\t}\n+\n+\t/**\n+\t * Returns additional user ext source either found already in Perun or new.\n+\t * Used in extractAdditionalUserExtSources to get ues.\n+\t *\n+\t * @param sess perun session\n+\t * @param additionalExtSourceType type of additional ues\n+\t * @param additionalExtSourceName name of additional ues\n+\t * @param additionalExtLoa LoA of additional ues\n+\t * @param additionalExtLogin login of additional ues\n+\t * @return UserExtSource additional ues\n+\t */\n+\tprivate static UserExtSource parseAdditionalUserExtSource(PerunSession sess, String additionalExtSourceType, String additionalExtSourceName, int additionalExtLoa, String additionalExtLogin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE2NDQ0MA==", "bodyText": "You can throw the part with attributes here and then take care of parsing and everything else (same as in the method above).", "url": "https://github.com/CESNET/perun/pull/2958#discussion_r518164440", "createdAt": "2020-11-05T16:00:03Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -152,68 +153,163 @@ public static String join(Iterable<?> collection, String separator) {\n \n \t/**\n \t * Returns additionalUserExtSources from the subject. It's used for synchronization from different ExtSources. subjectFromExtSource was obtained from the ExtSource.\n+\t * Expected format of additional userExtSource is: extSourceName|extSourceType|extLogin;uesAttribute1=value1,value2;uesAttribute2=value1[|LoA]\n \t *\n \t * @param sess perun session\n \t * @param subjectFromExtSource map with the subject\n-\t * @return List<UserExtSource> all additional ExtSources from the subject, returned list will never contain null value\n-\t * @throws InternalErrorException\n+\t * @return List<RichUserExtSource> all additional ExtSources (and possibly their attributes) from the subject, returned list will never contain null value\n \t */\n-\tpublic static List<UserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n-\t\tList<UserExtSource> additionalUserExtSources = new ArrayList<>();\n+\tpublic static List<RichUserExtSource> extractAdditionalUserExtSources(PerunSession sess, Map<String, String> subjectFromExtSource) {\n+\t\tList<RichUserExtSource> additionalUserExtSources = new ArrayList<>();\n \t\tfor (String attrName : subjectFromExtSource.keySet()) {\n \t\t\tif(attrName != null &&\n \t\t\t\tsubjectFromExtSource.get(attrName) != null &&\n \t\t\t\tattrName.startsWith(ExtSourcesManagerImpl.USEREXTSOURCEMAPPING)) {\n \t\t\t\tString login = subjectFromExtSource.get(\"login\");\n \n-\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\"); // Entry contains extSourceName|extSourceType|extLogin[|LoA]\n+\t\t\t\t// Entry contains extSourceName|extSourceType|extLogin;uesAttribute=value1,value2[|LoA]\n+\t\t\t\tString[] userExtSourceRaw =  subjectFromExtSource.get(attrName).split(\"\\\\|\");\n \t\t\t\tlog.debug(\"Processing additionalUserExtSource {}\",  subjectFromExtSource.get(attrName));\n \n-\t\t\t\t//Check if the array has at least 3 parts, this is protection against outOfBoundException\n+\t\t\t\t// Check if the array has at least 3 parts, this is protection against outOfBoundException\n \t\t\t\tif(userExtSourceRaw.length < 3) {\n \t\t\t\t\tthrow new InternalErrorException(\"There is a missing mandatory part of additional user extSource value when processing it - '\" + attrName + \"'\");\n \t\t\t\t}\n \n+\t\t\t\t// Parse required parts of additional ues from subject\n \t\t\t\tString additionalExtSourceName = userExtSourceRaw[0];\n \t\t\t\tString additionalExtSourceType = userExtSourceRaw[1];\n-\t\t\t\tString additionalExtLogin = userExtSourceRaw[2];\n-\t\t\t\tint additionalExtLoa = 0;\n-\t\t\t\t// Loa is not mandatory argument\n-\t\t\t\tif (userExtSourceRaw.length>3 && userExtSourceRaw[3] != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tadditionalExtLoa = Integer.parseInt(userExtSourceRaw[3]);\n-\t\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t\t\tthrow new ParserException(\"Subject with login [\" + login + \"] has wrong LoA '\" + userExtSourceRaw[3] + \"'.\", e, \"LoA\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tExtSource additionalExtSource;\n+\t\t\t\tString[] additionalExtLoginAndAttributes = userExtSourceRaw[2].split(\";\");\n+\t\t\t\tString additionalExtLogin = additionalExtLoginAndAttributes[0];\n \n+\t\t\t\t// Check if any of the required part is not null nor it is empty\n \t\t\t\tif (additionalExtSourceName == null || additionalExtSourceName.isEmpty() ||\n \t\t\t\t\tadditionalExtSourceType == null || additionalExtSourceType.isEmpty() ||\n \t\t\t\t\tadditionalExtLogin == null || additionalExtLogin.isEmpty()) {\n \t\t\t\t\tlog.error(\"User with login {} has invalid additional userExtSource defined {}.\", login, userExtSourceRaw);\n \t\t\t\t} else {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t// Try to get extSource, with full extSource object (containg ID)\n-\t\t\t\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().getExtSourceByName(sess, additionalExtSourceName);\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Create new one if not exists\n-\t\t\t\t\t\t\tadditionalExtSource = new ExtSource(additionalExtSourceName, additionalExtSourceType);\n-\t\t\t\t\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().createExtSource(sess, additionalExtSource, null);\n-\t\t\t\t\t\t} catch (ExtSourceExistsException e1) {\n-\t\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t// Add additional user extSource\n-\t\t\t\t\tadditionalUserExtSources.add(new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin));\n+\n+\t\t\t\t\t// Get LoA of additional ues (0 if not stated)\n+\t\t\t\t\tint additionalExtLoa = parseAdditionalUESLoa(login, userExtSourceRaw);\n+\n+\t\t\t\t\t// Get additional ues\n+\t\t\t\t\tUserExtSource additionalUserExtSource = parseAdditionalUserExtSource(sess, additionalExtSourceType, additionalExtSourceName, additionalExtLoa, additionalExtLogin);\n+\n+\t\t\t\t\t// Get ues attributes\n+\t\t\t\t\tList<Attribute> uesAttributes = parseUESAttributes(sess, login, additionalExtLoginAndAttributes);\n+\n+\t\t\t\t\t// Create richUserExtSource from ues and its attributes\n+\t\t\t\t\tRichUserExtSource richUserExtSource = new RichUserExtSource(additionalUserExtSource, uesAttributes);\n+\n+\t\t\t\t\t// Add additional rich user extSource\n+\t\t\t\t\tadditionalUserExtSources.add(richUserExtSource);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn additionalUserExtSources;\n \t}\n \n+\t/**\n+\t * Returns loa of addtional ues, if not stated, returns 0.\n+\t * Used in extractAdditionalUserExtSources to get ues LoA.\n+\t *\n+\t * @param login login of subject\n+\t * @param userExtSourceRaw array containing LoA\n+\t * @return int LoA\n+\t */\n+\tprivate static int parseAdditionalUESLoa(String login, String[] userExtSourceRaw) {\n+\t\tint additionalExtLoa = 0;\n+\t\t// Loa is not mandatory argument\n+\t\tif (userExtSourceRaw.length>3 && userExtSourceRaw[3] != null) {\n+\t\t\ttry {\n+\t\t\t\tadditionalExtLoa = Integer.parseInt(userExtSourceRaw[3]);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tthrow new ParserException(\"Subject with login [\" + login + \"] has wrong LoA '\" + userExtSourceRaw[3] + \"'.\", e, \"LoA\");\n+\t\t\t}\n+\t\t}\n+\t\treturn additionalExtLoa;\n+\t}\n+\n+\t/**\n+\t * Returns additional user ext source either found already in Perun or new.\n+\t * Used in extractAdditionalUserExtSources to get ues.\n+\t *\n+\t * @param sess perun session\n+\t * @param additionalExtSourceType type of additional ues\n+\t * @param additionalExtSourceName name of additional ues\n+\t * @param additionalExtLoa LoA of additional ues\n+\t * @param additionalExtLogin login of additional ues\n+\t * @return UserExtSource additional ues\n+\t */\n+\tprivate static UserExtSource parseAdditionalUserExtSource(PerunSession sess, String additionalExtSourceType, String additionalExtSourceName, int additionalExtLoa, String additionalExtLogin) {\n+\t\tExtSource additionalExtSource;\n+\t\ttry {\n+\t\t\t// Try to get extSource, with full extSource object (containg ID)\n+\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().getExtSourceByName(sess, additionalExtSourceName);\n+\t\t} catch (ExtSourceNotExistsException e) {\n+\t\t\ttry {\n+\t\t\t\t// Create new one if not exists\n+\t\t\t\tadditionalExtSource = new ExtSource(additionalExtSourceName, additionalExtSourceType);\n+\t\t\t\tadditionalExtSource = ((PerunBl) sess.getPerun()).getExtSourcesManagerBl().createExtSource(sess, additionalExtSource, null);\n+\t\t\t} catch (ExtSourceExistsException e1) {\n+\t\t\t\tthrow new ConsistencyErrorException(\"Creating existing extSource: \" + additionalExtSourceName);\n+\t\t\t}\n+\t\t}\n+\t\treturn new UserExtSource(additionalExtSource, additionalExtLoa, additionalExtLogin);\n+\t}\n+\n+\t/**\n+\t * Parses attributes of additional ues, which are in format: uesAttributeName=value1,value2. These attributes are returned with their values.\n+\t * Used in extractAdditionalUserExtSources to get ues attributes.\n+\t *\n+\t * @param sess perun session\n+\t * @param login login of subject\n+\t * @param additionalExtLoginAndAttribute array containing extLogin and uesAttributes\n+\t * @return List<Attribute> attributes of additional ues\n+\t */\n+\tprivate static List<Attribute> parseUESAttributes(PerunSession sess, String login, String[] additionalExtLoginAndAttribute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "070a86b8b33f08a4fb9cc5f528de18ba529f8726"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e64b4b09e1bedc8cd845e7d9a2473ab81f15044", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/3e64b4b09e1bedc8cd845e7d9a2473ab81f15044", "committedDate": "2020-11-06T11:36:42Z", "message": "Fixes based on review\n\n- changed structure of extractAdditionalUserExtSources and javadoc for even better readability\n- also added more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDczMjQ1", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-526073245", "createdAt": "2020-11-09T09:37:42Z", "commit": {"oid": "3e64b4b09e1bedc8cd845e7d9a2473ab81f15044"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzgwNDYz", "url": "https://github.com/CESNET/perun/pull/2958#pullrequestreview-527380463", "createdAt": "2020-11-10T16:26:12Z", "commit": {"oid": "3e64b4b09e1bedc8cd845e7d9a2473ab81f15044"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1131, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}