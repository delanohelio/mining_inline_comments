{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzE2OTcx", "number": 2816, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0MToxOVrOER2Xog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNTo1ODozOFrOESPvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTUyMDM0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0MToxOVrOG2yCSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTozOTowNVrOG3bHfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NjA3Mg==", "bodyText": "Typo", "url": "https://github.com/CESNET/perun/pull/2816#discussion_r460096072", "createdAt": "2020-07-24T14:41:19Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -116,36 +107,52 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\tMap<String, RoleManagementRules> rolesManagementRules = new HashMap<>();\n \n \t\ttry {\n-\t\t\tJsonNode rootNode = loadConfigurationFile();\n-\t\t\t//Fetch all policies from the configuration file\n-\t\t\tJsonNode rolesNodes = rootNode.get(\"perun_roles_management\");\n-\n-\t\t\t// For each role node construct RoleManagementRules and add it to the map\n-\t\t\tIterator<String> roleNames = rolesNodes.fieldNames();\n-\t\t\twhile (roleNames.hasNext()) {\n-\t\t\t\tString roleName = roleNames.next();\n-\t\t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n-\n-\t\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t\t}\n-\n-\t\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n-\n-\t\t\t\trolesManagementRules.put(roleName, new RoleManagementRules(roleName, privilegedRoles, entitiesToManage, objectsToAssign));\n+\t\t\tJsonNode rootNode = loadConfigurationFile(configurationPath);\n+\t\t\tloadPerunRolesManagementGromJsonNode(rootNode)\n+\t\t\t\t\t.forEach(rule -> rolesManagementRules.put(rule.getRoleName(), rule));\n+\n+\t\t\tif (secondaryConfigurationPath != null) {\n+\t\t\t\trootNode = loadConfigurationFile(secondaryConfigurationPath);\n+\t\t\t\tloadPerunRolesManagementGromJsonNode(rootNode)\n+\t\t\t\t\t\t.forEach(rule -> rolesManagementRules.put(rule.getRoleName(), rule));\n \t\t\t}\n \t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(\"The configuration file \" + configurationPath.getFilename() + \" has invalid syntax.\", e);\n+\t\t\tthrow new InternalErrorException(\"One of the roles configuration file has invalid syntax. Configuration files: \" +\n+\t\t\t\t\tconfigurationPath.getFilename() +\n+\t\t\t\t\t(secondaryConfigurationPath == null ? \"not defined\" : secondaryConfigurationPath.getFilename()), e);\n \t\t}\n \n \t\treturn rolesManagementRules;\n \t}\n \n+\tprivate Set<RoleManagementRules> loadPerunRolesManagementGromJsonNode(JsonNode rootNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dff994f84905e5b29abb6155ac5c6e8f83318df6"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2OTE0OQ==", "bodyText": "fixed", "url": "https://github.com/CESNET/perun/pull/2816#discussion_r460769149", "createdAt": "2020-07-27T09:39:05Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -116,36 +107,52 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\tMap<String, RoleManagementRules> rolesManagementRules = new HashMap<>();\n \n \t\ttry {\n-\t\t\tJsonNode rootNode = loadConfigurationFile();\n-\t\t\t//Fetch all policies from the configuration file\n-\t\t\tJsonNode rolesNodes = rootNode.get(\"perun_roles_management\");\n-\n-\t\t\t// For each role node construct RoleManagementRules and add it to the map\n-\t\t\tIterator<String> roleNames = rolesNodes.fieldNames();\n-\t\t\twhile (roleNames.hasNext()) {\n-\t\t\t\tString roleName = roleNames.next();\n-\t\t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n-\n-\t\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t\t}\n-\n-\t\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n-\n-\t\t\t\trolesManagementRules.put(roleName, new RoleManagementRules(roleName, privilegedRoles, entitiesToManage, objectsToAssign));\n+\t\t\tJsonNode rootNode = loadConfigurationFile(configurationPath);\n+\t\t\tloadPerunRolesManagementGromJsonNode(rootNode)\n+\t\t\t\t\t.forEach(rule -> rolesManagementRules.put(rule.getRoleName(), rule));\n+\n+\t\t\tif (secondaryConfigurationPath != null) {\n+\t\t\t\trootNode = loadConfigurationFile(secondaryConfigurationPath);\n+\t\t\t\tloadPerunRolesManagementGromJsonNode(rootNode)\n+\t\t\t\t\t\t.forEach(rule -> rolesManagementRules.put(rule.getRoleName(), rule));\n \t\t\t}\n \t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(\"The configuration file \" + configurationPath.getFilename() + \" has invalid syntax.\", e);\n+\t\t\tthrow new InternalErrorException(\"One of the roles configuration file has invalid syntax. Configuration files: \" +\n+\t\t\t\t\tconfigurationPath.getFilename() +\n+\t\t\t\t\t(secondaryConfigurationPath == null ? \"not defined\" : secondaryConfigurationPath.getFilename()), e);\n \t\t}\n \n \t\treturn rolesManagementRules;\n \t}\n \n+\tprivate Set<RoleManagementRules> loadPerunRolesManagementGromJsonNode(JsonNode rootNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NjA3Mg=="}, "originalCommit": {"oid": "dff994f84905e5b29abb6155ac5c6e8f83318df6"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTY3NjUxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNTo1ODozOFrOG3Umgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoyOTozM1rOG3Wszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY2MjQwMg==", "bodyText": "Shouldn't we first load normal configuration and then overwrite it with secondary config (as we do in loadPerunRolesManagement())?", "url": "https://github.com/CESNET/perun/pull/2816#discussion_r460662402", "createdAt": "2020-07-27T05:58:38Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -71,36 +77,22 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t *\n \t * @return list of PerunPolicies\n \t */\n-\tpublic List<PerunPolicy> loadPerunPolicies() {\n-\t\tList<PerunPolicy> policies = new ArrayList<>();\n+\tpublic Set<PerunPolicy> loadPerunPolicies() {\n+\t\tSet<PerunPolicy> policies = new HashSet<>();\n \n \t\ttry {\n-\t\t\tJsonNode rootNode = loadConfigurationFile();\n-\t\t\t//Fetch all policies from the configuration file\n-\t\t\tJsonNode policiesNode = rootNode.get(\"perun_policies\");\n-\n-\t\t\t// For each policy node construct PerunPolicy and add it to the list\n-\t\t\tIterator<String> policyNames = policiesNode.fieldNames();\n-\t\t\twhile(policyNames.hasNext()) {\n-\t\t\t\tString policyName = policyNames.next();\n-\t\t\t\tJsonNode policyNode = policiesNode.get(policyName);\n-\t\t\t\tList<Map<String, String>> perunRoles = new ArrayList<>();\n-\t\t\t\tJsonNode perunRolesNode = policyNode.get(\"policy_roles\");\n-\n-\t\t\t\t//Field policy_roles is saved as List of maps in the for loop\n-\t\t\t\tfor (JsonNode perunRoleNode : perunRolesNode) {\n-\t\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(perunRoleNode);\n-\t\t\t\t\tperunRoles.add(innerRoleMap);\n-\t\t\t\t}\n-\n-\t\t\t\t//Field include_policies is saved as List of Strings.\n-\t\t\t\tList<String> includePolicies = new ArrayList<>(objectMapper.convertValue(policyNode.get(\"include_policies\"), new TypeReference<List<String>>() {\n-\t\t\t\t}));\n-\n-\t\t\t\tpolicies.add(new PerunPolicy(policyName, perunRoles, includePolicies));\n+\t\t\tJsonNode rootNode;\n+\t\t\tif (secondaryConfigurationPath != null) {\n+\t\t\t\trootNode = loadConfigurationFile(secondaryConfigurationPath);\n+\t\t\t\tpolicies.addAll(loadPoliciesFromJsonNode(rootNode));\n \t\t\t}\n+\t\t\trootNode = loadConfigurationFile(configurationPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acad23ccf27e5d8296ac535e770680174916c21e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5Njc4Mw==", "bodyText": "Ok, @balcirakpeter corrected me, that its on purpose, because of behavior of adding policies method.", "url": "https://github.com/CESNET/perun/pull/2816#discussion_r460696783", "createdAt": "2020-07-27T07:29:33Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -71,36 +77,22 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t *\n \t * @return list of PerunPolicies\n \t */\n-\tpublic List<PerunPolicy> loadPerunPolicies() {\n-\t\tList<PerunPolicy> policies = new ArrayList<>();\n+\tpublic Set<PerunPolicy> loadPerunPolicies() {\n+\t\tSet<PerunPolicy> policies = new HashSet<>();\n \n \t\ttry {\n-\t\t\tJsonNode rootNode = loadConfigurationFile();\n-\t\t\t//Fetch all policies from the configuration file\n-\t\t\tJsonNode policiesNode = rootNode.get(\"perun_policies\");\n-\n-\t\t\t// For each policy node construct PerunPolicy and add it to the list\n-\t\t\tIterator<String> policyNames = policiesNode.fieldNames();\n-\t\t\twhile(policyNames.hasNext()) {\n-\t\t\t\tString policyName = policyNames.next();\n-\t\t\t\tJsonNode policyNode = policiesNode.get(policyName);\n-\t\t\t\tList<Map<String, String>> perunRoles = new ArrayList<>();\n-\t\t\t\tJsonNode perunRolesNode = policyNode.get(\"policy_roles\");\n-\n-\t\t\t\t//Field policy_roles is saved as List of maps in the for loop\n-\t\t\t\tfor (JsonNode perunRoleNode : perunRolesNode) {\n-\t\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(perunRoleNode);\n-\t\t\t\t\tperunRoles.add(innerRoleMap);\n-\t\t\t\t}\n-\n-\t\t\t\t//Field include_policies is saved as List of Strings.\n-\t\t\t\tList<String> includePolicies = new ArrayList<>(objectMapper.convertValue(policyNode.get(\"include_policies\"), new TypeReference<List<String>>() {\n-\t\t\t\t}));\n-\n-\t\t\t\tpolicies.add(new PerunPolicy(policyName, perunRoles, includePolicies));\n+\t\t\tJsonNode rootNode;\n+\t\t\tif (secondaryConfigurationPath != null) {\n+\t\t\t\trootNode = loadConfigurationFile(secondaryConfigurationPath);\n+\t\t\t\tpolicies.addAll(loadPoliciesFromJsonNode(rootNode));\n \t\t\t}\n+\t\t\trootNode = loadConfigurationFile(configurationPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY2MjQwMg=="}, "originalCommit": {"oid": "acad23ccf27e5d8296ac535e770680174916c21e"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1965, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}