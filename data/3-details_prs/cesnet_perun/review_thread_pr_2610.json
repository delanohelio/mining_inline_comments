{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MjYzODk2", "number": 2610, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxMDo0OVrODmQlfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxMDo0OVrODmQlfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ0MjIwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/api/AuthzResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxMDo0OVrOFzkj7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NjozMVrOFzsHmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDcxNg==", "bodyText": "I think it is not necessary to provide this version of the method in RPC.", "url": "https://github.com/CESNET/perun/pull/2610#discussion_r389620716", "createdAt": "2020-03-09T12:10:49Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/api/AuthzResolver.java", "diffHunk": "@@ -39,6 +40,20 @@ public static boolean authorizedExternal(PerunSession sess, String policyDefinit\n \t\treturn AuthzResolverBlImpl.authorized(sess, policyDefinition, objects);\n \t}\n \n+\t/**\n+\t * Checks if the principal is authorized.\n+\t * Used when there are no PerunBeans needed for authorization.\n+\t * This method should be accessed through external components.\n+\t *\n+\t * @param sess PerunSession which contains the principal.\n+\t * @param policyDefinition of policy which contains authorization rules.\n+\t * @return true if the principal has particular rights, false otherwise.\n+\t * @throws PolicyNotExistsException when the given policyDefinition does not exist in the PerunPoliciesContainer.\n+\t */\n+\tpublic static boolean authorizedExternal(PerunSession sess, String policyDefinition) throws PolicyNotExistsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6eb37543678cce1daa4e871471371be56cfd420"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NDUzOQ==", "bodyText": "Erased", "url": "https://github.com/CESNET/perun/pull/2610#discussion_r389744539", "createdAt": "2020-03-09T14:56:31Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/api/AuthzResolver.java", "diffHunk": "@@ -39,6 +40,20 @@ public static boolean authorizedExternal(PerunSession sess, String policyDefinit\n \t\treturn AuthzResolverBlImpl.authorized(sess, policyDefinition, objects);\n \t}\n \n+\t/**\n+\t * Checks if the principal is authorized.\n+\t * Used when there are no PerunBeans needed for authorization.\n+\t * This method should be accessed through external components.\n+\t *\n+\t * @param sess PerunSession which contains the principal.\n+\t * @param policyDefinition of policy which contains authorization rules.\n+\t * @return true if the principal has particular rights, false otherwise.\n+\t * @throws PolicyNotExistsException when the given policyDefinition does not exist in the PerunPoliciesContainer.\n+\t */\n+\tpublic static boolean authorizedExternal(PerunSession sess, String policyDefinition) throws PolicyNotExistsException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMDcxNg=="}, "originalCommit": {"oid": "b6eb37543678cce1daa4e871471371be56cfd420"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}