{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNjU3MzEz", "number": 2797, "title": " Change of transaction over synchronizeGroup", "bodyText": "synchronizeGroup does not run in separate transaction anymore\nmethods used in synchronizeGroup that updated, removed, and added members from external source now accept as parameter only one member at a time and all three methods run in separate transaction\nalso added tests of synchronizeGroup", "createdAt": "2020-07-20T17:17:27Z", "url": "https://github.com/CESNET/perun/pull/2797", "merged": true, "mergeCommit": {"oid": "1c5945e2179dd9fec7c4c76e420f061a4ed248df"}, "closed": true, "closedAt": "2020-08-18T07:42:51Z", "author": {"login": "metodej"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3BxwRAFqTQ1MjIwNzg1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-GmHbgFqTQ2NTY3MTQwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMjA3ODUz", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-452207853", "createdAt": "2020-07-21T07:48:27Z", "commit": {"oid": "4b6aaaeb48e6248d3157d242e70567799059769c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo0ODoyN1rOG0sMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzo1Mzo0M1rOG0sYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwMzI4Mg==", "bodyText": "In a specific situation list of attributes could be empty for every candidate. I would prefer to do two things here:\n1] create a private method for the whole logic of preparing those attributes\n2] use either some boolean variable with info that this step was already made or also check the emptiness of candidate's list of attributes", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r457903282", "createdAt": "2020-07-21T07:48:27Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -1687,14 +1684,36 @@ protected boolean hasCandidateExistingMember(Candidate candidate, RichMember ric\n \t\t\t\tcategorizeMembersForSynchronization(sess, actualGroupMembers, candidates, candidatesToAdd, membersToUpdate, membersToRemove);\n \t\t\t}\n \n+\t\t\t//Remove presented members in group who are not presented in synchronized ExtSource\n+\t\t\tCollections.sort(membersToRemove);\n+\t\t\tfor (RichMember memberToRemove : membersToRemove) {\n+\t\t\t\tremoveFormerMemberWhileSynchronization(sess, group, memberToRemove);\n+\t\t\t}\n+\n+\t\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n \t\t\t//Update members already presented in group\n-\t\t\tupdateExistingMembersWhileSynchronization(sess, group, membersToUpdate, overwriteUserAttributesList, mergeMemberAttributesList);\n+\t\t\tfor (Candidate candidate : membersToUpdate.keySet()) {\n+\t\t\t\tRichMember memberToUpdate = membersToUpdate.get(candidate);\n+\t\t\t\t//Load attrDefinitions just once for first candidate\n+\t\t\t\tif (attrDefs.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6aaaeb48e6248d3157d242e70567799059769c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwNDMzNA==", "bodyText": "There is a missing reason why the attribute can't be synchronized.", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r457904334", "createdAt": "2020-07-21T07:50:26Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -1687,14 +1684,36 @@ protected boolean hasCandidateExistingMember(Candidate candidate, RichMember ric\n \t\t\t\tcategorizeMembersForSynchronization(sess, actualGroupMembers, candidates, candidatesToAdd, membersToUpdate, membersToRemove);\n \t\t\t}\n \n+\t\t\t//Remove presented members in group who are not presented in synchronized ExtSource\n+\t\t\tCollections.sort(membersToRemove);\n+\t\t\tfor (RichMember memberToRemove : membersToRemove) {\n+\t\t\t\tremoveFormerMemberWhileSynchronization(sess, group, memberToRemove);\n+\t\t\t}\n+\n+\t\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n \t\t\t//Update members already presented in group\n-\t\t\tupdateExistingMembersWhileSynchronization(sess, group, membersToUpdate, overwriteUserAttributesList, mergeMemberAttributesList);\n+\t\t\tfor (Candidate candidate : membersToUpdate.keySet()) {\n+\t\t\t\tRichMember memberToUpdate = membersToUpdate.get(candidate);\n+\t\t\t\t//Load attrDefinitions just once for first candidate\n+\t\t\t\tif (attrDefs.isEmpty()) {\n+\t\t\t\t\tfor (String attrName : candidate.getAttributes().keySet()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n+\t\t\t\t\t\t\tattrDefs.add(attrDef);\n+\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6aaaeb48e6248d3157d242e70567799059769c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkwNjE4OQ==", "bodyText": "You can replace this part by the same private method you would create for the problem in the comment above and also use something like:\nif( !candidate.getAttributes.isEmpty() && attrDefs.isEmpty() ) {\n...\n}", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r457906189", "createdAt": "2020-07-21T07:53:43Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3346,384 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n-\n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, richMember);\n-\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t//log it and skip this member\n-\t\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", richMember, group);\n-\t\t\t\tcontinue;\n-\t\t\t}\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\t//load attrDefinitions just once for first candidate\n-\t\t\tif(attrDefs.isEmpty()) {\n-\t\t\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n-\t\t\t\t\t\tattrDefs.add(attrDef);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group);\n-\t\t\t\t\t\t//skip this attribute at all\n-\t\t\t\t\t}\n+\t\t//load attrDefinitions if not received\n+\t\tif(attrDefs.isEmpty()) {\n+\t\t\tfor(String attrName : candidate.getAttributes().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6aaaeb48e6248d3157d242e70567799059769c"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b6aaaeb48e6248d3157d242e70567799059769c", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/4b6aaaeb48e6248d3157d242e70567799059769c", "committedDate": "2020-07-20T17:16:28Z", "message": " Change of transaction over synchronizeGroup\n\n- synchronizeGroup does not run in separate transaction anymore\n- methods used in synchronizeGroup that updated, removed, and added members from external source now accept as parameter only one member at a time and all three methods run in separate transaction\n- also added tests of synchronizeGroup"}, "afterCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/e7dcad60c58bc6711a0b0c476001df1329ff371c", "committedDate": "2020-07-22T13:09:42Z", "message": "Refactor processing methods of synchronizeGroup\n\n- methods updateExistingMemberWhileSynchronization and removeFormerMemberWhileSynchronization were separated into smaller chunks of private methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MDAwMzY3", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-454000367", "createdAt": "2020-07-23T10:16:02Z", "commit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDoxNjowMlrOG2EbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDozODo0N1rOG2FFgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0ODc3MQ==", "bodyText": "// Remove members from group who are not present in synchronized ExtSource", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r459348771", "createdAt": "2020-07-23T10:16:02Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -1687,14 +1684,28 @@ protected boolean hasCandidateExistingMember(Candidate candidate, RichMember ric\n \t\t\t\tcategorizeMembersForSynchronization(sess, actualGroupMembers, candidates, candidatesToAdd, membersToUpdate, membersToRemove);\n \t\t\t}\n \n+\t\t\t//Remove presented members in group who are not presented in synchronized ExtSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1ODE0MQ==", "bodyText": "Not part of your changes, but I believe this comment makes no sense, since groups can be top-level and don't have \"members\" as a parent.", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r459358141", "createdAt": "2020-07-23T10:35:38Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3338,488 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, richMember);\n-\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t//log it and skip this member\n-\t\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", richMember, group);\n-\t\t\t\tcontinue;\n+\t\t//load attrDefinitions if not received\n+\t\tif (!candidate.getAttributes().isEmpty() && attrDefs.isEmpty()) {\n+\t\t\tattrDefs = getAttributesToSynchronizeFromCandidates(sess, group, candidate);\n+\t\t}\n+\n+\t\t//get RichMember with attributes\n+\t\tmemberToUpdate = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(memberToUpdate), attrDefs).get(0);\n+\n+\t\t// try to find user core attributes and update user -> update name and titles\n+\t\tupdateUserCoreAttributes(sess, candidate, memberToUpdate, overwriteUserAttributesList);\n+\n+\t\tfor (String attributeName : candidate.getAttributes().keySet()) {\n+\t\t\t//update member attribute\n+\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+\t\t\t\tupdateMemberAttribute(sess, group, candidate, memberToUpdate, attributeName, mergeMemberAttributesList);\n+\t\t\t//update user attribute\n+\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n+\t\t\t\tupdateUserAttribute(sess, group, candidate, memberToUpdate, attributeName, overwriteUserAttributesList);\n+\t\t\t} else {\n+\t\t\t\t//we are not supporting other attributes than member or user so skip it without error, but log it\n+\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeName);\n \t\t\t}\n+\t\t}\n \n-\t\t\t//load attrDefinitions just once for first candidate\n-\t\t\tif(attrDefs.isEmpty()) {\n-\t\t\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n-\t\t\t\t\t\tattrDefs.add(attrDef);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group);\n-\t\t\t\t\t\t//skip this attribute at all\n-\t\t\t\t\t}\n+\t\t//Synchronize userExtSources (add not existing)\n+\t\tfor (UserExtSource ues : candidate.getUserExtSources()) {\n+\t\t\tif (!getPerunBl().getUsersManagerBl().userExtSourceExists(sess, ues)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, memberToUpdate.getUser(), ues);\n+\t\t\t\t} catch (UserExtSourceExistsException e) {\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding already existing userExtSource \" + ues, e);\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \n-\t\t\t//get RichMember with attributes\n-\t\t\trichMember = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(richMember), attrDefs).get(0);\n-\n-\t\t\t// try to find user core attributes and update user -> update name and titles\n-\t\t\tif (overwriteUserAttributesList != null) {\n-\t\t\t\tboolean someFound = false;\n-\t\t\t\tUser user = richMember.getUser();\n-\t\t\t\tfor (String attrName : overwriteUserAttributesList) {\n-\t\t\t\t\tif (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":firstName\")) {\n-\t\t\t\t\t\tuser.setFirstName(candidate.getFirstName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":middleName\")) {\n-\t\t\t\t\t\tuser.setMiddleName(candidate.getMiddleName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":lastName\")) {\n-\t\t\t\t\t\tuser.setLastName(candidate.getLastName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleBefore\")) {\n-\t\t\t\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleAfter\")) {\n-\t\t\t\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t}\n+\t\t//Set correct member Status\n+\t\tupdateMemberStatus(sess, memberToUpdate);\n+\t}\n+\n+\t/**\n+\t * Get all attributes to synchronize from candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attributes\n+\t * @return list of attribute definitions\n+\t */\n+\tprivate List<AttributeDefinition> getAttributesToSynchronizeFromCandidates(PerunSession sess, Group group, Candidate candidate) {\n+\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n+\n+\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n+\t\t\ttry {\n+\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n+\t\t\t\tattrDefs.add(attrDef);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group + \"because the attribute definition does not exist.\");\n+\t\t\t\t//skip this attribute at all\n+\t\t\t}\n+\t\t}\n+\t\treturn attrDefs;\n+\t}\n+\n+\t/**\n+\t * Update user core attributes from overwriteUserAttributesList based on values of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param overwriteUserAttributesList list of attributes to be updated\n+\t */\n+\tprivate void updateUserCoreAttributes(PerunSession sess, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList) {\n+\t\tif (overwriteUserAttributesList != null) {\n+\t\t\tboolean someFound = false;\n+\t\t\tUser user = memberToUpdate.getUser();\n+\t\t\tfor (String attrName : overwriteUserAttributesList) {\n+\t\t\t\tif (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":firstName\")) {\n+\t\t\t\t\tuser.setFirstName(candidate.getFirstName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":middleName\")) {\n+\t\t\t\t\tuser.setMiddleName(candidate.getMiddleName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":lastName\")) {\n+\t\t\t\t\tuser.setLastName(candidate.getLastName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleBefore\")) {\n+\t\t\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleAfter\")) {\n+\t\t\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n+\t\t\t\t\tsomeFound = true;\n \t\t\t\t}\n-\t\t\t\tif (someFound) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tperunBl.getUsersManagerBl().updateUser(sess, user);\n-\t\t\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"User from perun not exists when should - removed during sync.\", e);\n-\t\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (someFound) {\n+\t\t\t\ttry {\n+\t\t\t\t\tperunBl.getUsersManagerBl().updateUser(sess, user);\n+\t\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"User from perun does not exist when he should have - he was removed during sync.\", e);\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\tfor (String attributeName : candidate.getAttributes().keySet()) {\n-\t\t\t\t//update member attribute\n-\t\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tboolean attributeFound = false;\n-\t\t\t\t\tfor (Attribute memberAttribute: richMember.getMemberAttributes()) {\n-\t\t\t\t\t\tif(memberAttribute.getName().equals(attributeName)) {\n-\t\t\t\t\t\t\tattributeFound = true;\n-\t\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), memberAttribute.getType());\n-\t\t\t\t\t\t\tif (subjectAttributeValue != null && !Objects.equals(memberAttribute.getValue(), subjectAttributeValue)) {\n-\t\t\t\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n-\t\t\t\t\t\t\t\t\tgroup, memberAttribute, richMember.getId(), memberAttribute.getValue(), subjectAttributeValue);\n-\t\t\t\t\t\t\t\tmemberAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tif(mergeMemberAttributesList.contains(memberAttribute.getName())) {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, richMember, memberAttribute);\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember, memberAttribute);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t\t\t} catch\t(WrongAttributeAssignmentException e) {\n-\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t//we found it, but there is no change;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t//member has not set this attribute so set it now if possible\n-\t\t\t\t\tif(!attributeFound) {\n-\t\t\t\t\t\t// FIXME - this whole section probably can be removed. Previously null attributes were not retrieved with member\n-\t\t\t\t\t\t// FIXME - they are now always present, if not the same, then they are set in a code above.\n-\t\t\t\t\t\tAttribute newAttribute = new Attribute(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName));\n-\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), newAttribute.getType());\n-\t\t\t\t\t\tnewAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Try to set member's attributes\n-\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember, newAttribute);\n-\t\t\t\t\t\t\tlog.trace(\"Setting the {} value {}\", newAttribute, candidate.getAttributes().get(attributeName));\n-\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t//update user attribute\n-\t\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tboolean attributeFound = false;\n-\t\t\t\t\tfor (Attribute userAttribute: richMember.getUserAttributes()) {\n-\t\t\t\t\t\tif(userAttribute.getName().equals(attributeName)) {\n-\t\t\t\t\t\t\tattributeFound = true;\n-\t\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), userAttribute.getType());\n-\t\t\t\t\t\t\tif (!Objects.equals(userAttribute.getValue(), subjectAttributeValue)) {\n-\t\t\t\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n-\t\t\t\t\t\t\t\t\tgroup, userAttribute, richMember.getId(), userAttribute.getValue(), subjectAttributeValue);\n-\t\t\t\t\t\t\t\tuserAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t//Choose set or merge by extSource attribute overwriteUserAttributes (if contains this one)\n-\t\t\t\t\t\t\t\t\tif(overwriteUserAttributesList.contains(userAttribute.getName())) {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember.getUser(), userAttribute);\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, richMember.getUser(), userAttribute);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t//we found it, but there is no change\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t//user has not set this attribute so set it now if\n-\t\t\t\t\tif(!attributeFound) {\n-\t\t\t\t\t\t// FIXME - this whole section probably can be removed. Previously null attributes were not retrieved with member\n-\t\t\t\t\t\t// FIXME - they are now always present, if not the same, then they are set in a code above.\n-\t\t\t\t\t\tAttribute newAttribute = new Attribute(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName));\n-\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), newAttribute.getType());\n-\t\t\t\t\t\tnewAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Try to set user's attributes\n-\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember.getUser(), newAttribute);\n-\t\t\t\t\t\t\tlog.trace(\"Setting the {} value {}\", newAttribute, candidate.getAttributes().get(attributeName));\n-\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n+\t/**\n+\t * Update value of member attribute based on value of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param attributeName name of attribute being updated\n+\t * @param mergeMemberAttributesList list of member attributes to be merged and not overwritten\n+\t */\n+\tprivate void updateMemberAttribute(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, String attributeName, List<String> mergeMemberAttributesList) {\n+\t\tfor (Attribute memberAttribute: memberToUpdate.getMemberAttributes()) {\n+\t\t\tif (memberAttribute.getName().equals(attributeName)) {\n+\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), memberAttribute.getType());\n+\t\t\t\tif (subjectAttributeValue != null && !Objects.equals(memberAttribute.getValue(), subjectAttributeValue)) {\n+\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n+\t\t\t\t\t\tgroup, memberAttribute, memberToUpdate.getId(), memberAttribute.getValue(), subjectAttributeValue);\n+\t\t\t\t\tmemberAttribute.setValue(subjectAttributeValue);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t//Choose set or merge by extSource attribute mergeMemberAttributes (if contains this one)\n+\t\t\t\t\t\tif (mergeMemberAttributesList != null && mergeMemberAttributesList.contains(memberAttribute.getName())) {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, memberToUpdate, memberAttribute);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, memberToUpdate, memberAttribute);\n \t\t\t\t\t\t}\n+\t\t\t\t\t} catch (AttributeValueException e) {\n+\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n+\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, memberToUpdate);\n+\t\t\t\t\t} catch\t(WrongAttributeAssignmentException e) {\n+\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//we are not supporting other attributes then member or user so skip it without error, but log it\n-\t\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeName);\n \t\t\t\t}\n+\t\t\t\t//we found it, no need to continue in cycle\n+\t\t\t\tbreak;\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\t//Synchronize userExtSources (add not existing)\n-\t\t\tfor (UserExtSource ues : candidate.getUserExtSources()) {\n-\t\t\t\tif (!getPerunBl().getUsersManagerBl().userExtSourceExists(sess, ues)) {\n+\t/**\n+\t * Update value of user attribute based on value of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param attributeName name of attribute being updated\n+\t * @param overwriteUserAttributesList list of user attributes to be overwritten and not merged\n+\t */\n+\tprivate void updateUserAttribute(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, String attributeName, List<String> overwriteUserAttributesList) {\n+\t\tfor (Attribute userAttribute: memberToUpdate.getUserAttributes()) {\n+\t\t\tif(userAttribute.getName().equals(attributeName)) {\n+\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), userAttribute.getType());\n+\t\t\t\tif (!Objects.equals(userAttribute.getValue(), subjectAttributeValue)) {\n+\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n+\t\t\t\t\t\tgroup, userAttribute, memberToUpdate.getId(), userAttribute.getValue(), subjectAttributeValue);\n+\t\t\t\t\tuserAttribute.setValue(subjectAttributeValue);\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, richMember.getUser(), ues);\n-\t\t\t\t\t} catch (UserExtSourceExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding already existing userExtSource \" + ues, e);\n+\t\t\t\t\t\t//Choose set or merge by extSource attribute overwriteUserAttributes (if contains this one)\n+\t\t\t\t\t\tif(overwriteUserAttributesList != null && overwriteUserAttributesList.contains(userAttribute.getName())) {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, memberToUpdate.getUser(), userAttribute);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, memberToUpdate.getUser(), userAttribute);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (AttributeValueException e) {\n+\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n+\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, memberToUpdate);\n+\t\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n+\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\t//we found it, no need to continue in cycle\n+\t\t\t\tbreak;\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\t//Set correct member Status\n-\t\t\tStatus memberStatus = richMember.getStatus();\n-\t\t\tif (statusesAffectedBySynchronization.contains(memberStatus)) {\n-\t\t\t\t//prepare variables with information about member's expiration\n-\t\t\t\tboolean memberHasExpiration;\n-\t\t\t\tboolean memberExpiredInPast = false;\n-\n-\t\t\t\tDate now = new Date();\n-\t\t\t\tDate currentMembershipExpirationDate = now;\n-\t\t\t\tAttribute membershipExpiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, richMember, AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n-\t\t\t\t//Check if member has not empty expiration date\n-\t\t\t\tmemberHasExpiration = membershipExpiration.getValue() != null;\n-\n-\t\t\t\tif (memberHasExpiration) {\n-\t\t\t\t\t//Check if member has expiration date in the past or not (default is false even if he doesn't have expiration at all)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tcurrentMembershipExpirationDate = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpiration.getValue());\n-\t\t\t\t\t\tmemberExpiredInPast = currentMembershipExpirationDate.before(now);\n-\t\t\t\t\t} catch (ParseException ex) {\n-\t\t\t\t\t\tlog.error(\"Group synchronization: memberId {} expiration String cannot be parsed, exception {}.\", richMember.getId(), ex);\n-\t\t\t\t\t}\n+\t/**\n+\t * Update member status if not VALID nor SUSPENDED to EXPIRED or VALID based on membership expiration attribute.\n+\t *\n+\t * @param sess perun session\n+\t * @param memberToUpdate member to update\n+\t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n+\t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n+\t */\n+\tprivate void updateMemberStatus(PerunSession sess, RichMember memberToUpdate) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\tStatus memberStatus = memberToUpdate.getStatus();\n+\t\tif (statusesAffectedBySynchronization.contains(memberStatus)) {\n+\t\t\t//prepare variables with information about member's expiration\n+\t\t\tboolean memberHasExpiration;\n+\t\t\tboolean memberExpiredInPast = false;\n+\n+\t\t\tDate now = new Date();\n+\t\t\tDate currentMembershipExpirationDate = now;\n+\t\t\tAttribute membershipExpiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberToUpdate, AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n+\t\t\t//Check if member has not empty expiration date\n+\t\t\tmemberHasExpiration = membershipExpiration.getValue() != null;\n+\n+\t\t\tif (memberHasExpiration) {\n+\t\t\t\t//Check if member has expiration date in the past or not (default is false even if he doesn't have expiration at all)\n+\t\t\t\ttry {\n+\t\t\t\t\tcurrentMembershipExpirationDate = BeansUtils.getDateFormatterWithoutTime().parse(membershipExpiration.valueAsString());\n+\t\t\t\t\tmemberExpiredInPast = currentMembershipExpirationDate.before(now);\n+\t\t\t\t} catch (ParseException ex) {\n+\t\t\t\t\tlog.error(\"Group synchronization: memberId {} expiration String cannot be parsed, exception {}.\", memberToUpdate.getId(), ex);\n \t\t\t\t}\n+\t\t\t}\n \n-\t\t\t\tif ((Status.DISABLED.equals(memberStatus) || Status.INVALID.equals(memberStatus)) && memberHasExpiration && memberExpiredInPast) {\n-\t\t\t\t\t//If member has expiration in the past (should be expired now) and is in other state than expired, expire him\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t//if success, this method will change status of member as side effect\n-\t\t\t\t\t\tperunBl.getMembersManagerBl().expireMember(sess, richMember);\n-\t\t\t\t\t\tlog.info(\"Switching member id {} to EXPIRE state, due to expiration {}.\", richMember.getId(), membershipExpiration.getValue());\n-\t\t\t\t\t\tlog.debug(\"Switching member to EXPIRE state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n-\t\t\t\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException e) {\n-\t\t\t\t\t\tlog.error(\"Consistency error while trying to expire member id {}, exception {}\", richMember.getId(), e);\n-\t\t\t\t\t}\n-\t\t\t\t} else if ((memberHasExpiration && !memberExpiredInPast) || !memberHasExpiration) {\n-\t\t\t\t\t//If member shouldn't be expired, validate him (don't have expiration at all or expire in the future from now)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tperunBl.getMembersManagerBl().validateMember(sess, richMember);\n-\t\t\t\t\t\tlog.info(\"Switching member id {} to VALID state, due to expiration {}.\", richMember.getId(), membershipExpiration.getValue());\n-\t\t\t\t\t\tlog.debug(\"Switching member to VALID state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n-\t\t\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n-\t\t\t\t\t\tlog.error(\"Error during validating member id {}, exception {}\", richMember.getId(), e);\n-\t\t\t\t\t}\n+\t\t\tif ((Status.DISABLED.equals(memberStatus) || Status.INVALID.equals(memberStatus)) && memberHasExpiration && memberExpiredInPast) {\n+\t\t\t\t//If member has expiration in the past (should be expired now) and is in other state than expired, expire him\n+\t\t\t\ttry {\n+\t\t\t\t\t//if success, this method will change status of member as side effect\n+\t\t\t\t\tperunBl.getMembersManagerBl().expireMember(sess, memberToUpdate);\n+\t\t\t\t\tlog.info(\"Switching member id {} to EXPIRE state, due to expiration {}.\", memberToUpdate.getId(), membershipExpiration.getValue());\n+\t\t\t\t\tlog.debug(\"Switching member to EXPIRE state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n+\t\t\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException e) {\n+\t\t\t\t\tlog.error(\"Consistency error while trying to expire member id {}, exception {}\", memberToUpdate.getId(), e);\n+\t\t\t\t}\n+\t\t\t} else if (!memberHasExpiration || !memberExpiredInPast) {\n+\t\t\t\t//If member shouldn't be expired, validate him (don't have expiration at all or expire in the future from now)\n+\t\t\t\ttry {\n+\t\t\t\t\tperunBl.getMembersManagerBl().validateMember(sess, memberToUpdate);\n+\t\t\t\t\tlog.info(\"Switching member id {} to VALID state, due to expiration {}.\", memberToUpdate.getId(), membershipExpiration.getValue());\n+\t\t\t\t\tlog.debug(\"Switching member to VALID state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n+\t\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n+\t\t\t\t\tlog.error(\"Error during validating member id {}, exception {}\", memberToUpdate.getId(), e);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n \t/**\n-\t * Get list of new candidates and add them to the Group.\n+\t * Get new candidate and add him to the Group.\n \t *\n \t * If Candidate can't be added to Group, skip him and add this information to skippedMembers list.\n \t *\n \t * When creating new member from Candidate, if user already exists, merge his attributes,\n \t * if attribute exists in list of overwriteUserAttributesList, update it instead of merging.\n \t *\n-\t * @param sess\n+\t * This method runs in separate transaction.\n+\t *\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param candidatesToAdd list of new members (candidates)\n+\t * @param candidate new member (candidate)\n \t * @param overwriteUserAttributesList list of attributes to be updated for user if found\n \t * @param mergeMemberAttributesList list of attributes to be merged for member if found\n \t * @param skippedMembers list of not successfully synchronized members\n-\t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t */\n-\tprivate void addMissingMembersWhileSynchronization(PerunSession sess, Group group, List<Candidate> candidatesToAdd, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<String> skippedMembers) {\n-\t\t//sort candidates to prevent deadlocks during member locking\n-\t\t//IMPORTANT: Candidates sorting may produce a different result than members sorting, thus there is a potential risk of creating a deadlock\n-\t\tCollections.sort(candidatesToAdd);\n-\t\t// Now add missing members\n-\t\tfor (Candidate candidate: candidatesToAdd) {\n-\t\t\tMember member;\n-\t\t\ttry {\n-\t\t\t\t// Check if the member is already in the VO (just not in the group)\n-\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n+\tpublic void addMissingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<String> skippedMembers) {\n+\t\tMember member;\n+\t\ttry {\n+\t\t\t// Check if the member is already in the VO (just not in the group)\n+\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n \n-\t\t\t\t// member exists - update attributes\n-\t\t\t\tMap<Candidate,RichMember> memberMap = new HashMap<>();\n-\t\t\t\tmemberMap.put(candidate, getPerunBl().getMembersManagerBl().getRichMember(sess, member));\n-\t\t\t\ttry {\n-\t\t\t\t\tupdateExistingMembersWhileSynchronization(sess, group, memberMap, overwriteUserAttributesList, mergeMemberAttributesList);\n-\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n-\t\t\t\t\t// if update fails, skip him\n-\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e.getMessage() + \"'\");\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+\t\t\t// member exists - update attributes\n+\t\t\tRichMember memberToUpdate = getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n+\t\t\ttry {\n+\t\t\t\tupdateExistingMemberWhileSynchronization(sess, group, candidate, memberToUpdate, overwriteUserAttributesList, mergeMemberAttributesList, new ArrayList<>());\n+\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n+\t\t\t\t// if update fails, skip him\n+\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e.getMessage() + \"'\");\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\t\t} catch (MemberNotExistsException e) {\n+\t\t} catch (MemberNotExistsException e) {\n+\t\t\ttry {\n+\t\t\t\t// We have new member (candidate), so create him using synchronous createMember (and overwrite chosen user attributes)\n+\t\t\t\tmember = getPerunBl().getMembersManagerBl().createMemberSync(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate, null, overwriteUserAttributesList);\n+\t\t\t\tlog.info(\"Group synchronization {}: New member id {} created during synchronization.\", group, member.getId());\n+\t\t\t} catch (AlreadyMemberException e1) {\n+\t\t\t\t//Probably race condition, give him another chance to fix this mess\n+\t\t\t\t// Check if the member is already in the VO (just not in the group)\n \t\t\t\ttry {\n-\t\t\t\t\t// We have new member (candidate), so create him using synchronous createMember (and overwrite chosed user attributes)\n-\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().createMemberSync(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate, null, overwriteUserAttributesList);\n-\t\t\t\t\tlog.info(\"Group synchronization {}: New member id {} created during synchronization.\", group, member.getId());\n-\t\t\t\t} catch (AlreadyMemberException e1) {\n-\t\t\t\t\t//Probably race condition, give him another chance to fix this mess\n-\t\t\t\t\t// Check if the member is already in the VO (just not in the group)\n+\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n+\t\t\t\t\t// member exists - update attribute\n+\t\t\t\t\tRichMember memberToUpdate = getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n-\t\t\t\t\t\t// member exists - update attribute\n-\t\t\t\t\t\tMap<Candidate,RichMember> memberMap = new HashMap<>();\n-\t\t\t\t\t\tmemberMap.put(candidate, getPerunBl().getMembersManagerBl().getRichMember(sess, member));\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tupdateExistingMembersWhileSynchronization(sess, group, memberMap, overwriteUserAttributesList, mergeMemberAttributesList);\n-\t\t\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e2) {\n-\t\t\t\t\t\t\t// if update fails, skip him\n-\t\t\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n-\t\t\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e2.getMessage() + \"'\");\n-\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (Exception e2) {\n-\t\t\t\t\t\t//Something is still wrong, thrown consistency exception\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Trying to add existing member (it is not possible to get him by userExtSource even if is also not possible to create him in DB)!\");\n+\t\t\t\t\t\tupdateExistingMemberWhileSynchronization(sess, group, candidate, memberToUpdate, overwriteUserAttributesList, mergeMemberAttributesList, new ArrayList<>());\n+\t\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e2) {\n+\t\t\t\t\t\t// if update fails, skip him\n+\t\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n+\t\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e2.getMessage() + \"'\");\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t} catch (AttributeValueException e1) {\n-\t\t\t\t\tlog.warn(\"Can't create member from candidate {} due to attribute value exception {}.\", candidate, e1);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when createing member from candidate: Exception: \" + e1.getName() + \" => '\" + e1.getMessage() + \"'\");\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (ExtendMembershipException e1) {\n-\t\t\t\t\tlog.warn(\"Can't create member from candidate {} due to membership expiration exception {}.\", candidate, e1);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because membership expiration: Exception: \" + e1.getName() + \" => \" + e1.getMessage() + \"]\");\n-\t\t\t\t\tcontinue;\n+\t\t\t\t} catch (Exception e2) {\n+\t\t\t\t\t//Something is still wrong, thrown consistency exception\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"Trying to add existing member (it is not possible to get him by userExtSource even if is also not possible to create him in DB)!\");\n \t\t\t\t}\n+\t\t\t} catch (AttributeValueException e1) {\n+\t\t\t\tlog.warn(\"Can't create member from candidate {} due to attribute value exception {}.\", candidate, e1);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when createing member from candidate: Exception: \" + e1.getName() + \" => '\" + e1.getMessage() + \"'\");\n+\t\t\t\treturn;\n+\t\t\t} catch (ExtendMembershipException e1) {\n+\t\t\t\tlog.warn(\"Can't create member from candidate {} due to membership expiration exception {}.\", candidate, e1);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because membership expiration: Exception: \" + e1.getName() + \" => \" + e1.getMessage() + \"]\");\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t}\n \n-\t\t\ttry {\n-\t\t\t\t// Add the member to the group\n-\t\t\t\tif (!group.getName().equals(VosManager.MEMBERS_GROUP)) {\n-\t\t\t\t\t// Do not add members to the generic members group\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t\t} catch(GroupNotExistsException ex) {\n-\t\t\t\t\t\t// Shouldn't happen, because every group has at least Members group as a parent\n-\t\t\t\t\t\t// Shouldn't happen, group should always exist\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t}\n+\t\ttry {\n+\t\t\t// Add the member to the group\n+\t\t\tif (!group.getName().equals(VosManager.MEMBERS_GROUP)) {\n+\t\t\t\t// Do not add members to the generic members group\n+\t\t\t\ttry {\n+\t\t\t\t\tgetPerunBl().getGroupsManagerBl().addMember(sess, group, member);\n+\t\t\t\t} catch(GroupNotExistsException ex) {\n+\t\t\t\t\t// Shouldn't happen, because every group has at least Members group as a parent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "originalPosition": 656}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1OTYxOA==", "bodyText": "We could probably resolve authoritative status of the group outside just once and pass it into this method as parameter. Like this we are getting that attribute n-times (removed members count).", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r459359618", "createdAt": "2020-07-23T10:38:47Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3338,488 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, richMember);\n-\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t//log it and skip this member\n-\t\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", richMember, group);\n-\t\t\t\tcontinue;\n+\t\t//load attrDefinitions if not received\n+\t\tif (!candidate.getAttributes().isEmpty() && attrDefs.isEmpty()) {\n+\t\t\tattrDefs = getAttributesToSynchronizeFromCandidates(sess, group, candidate);\n+\t\t}\n+\n+\t\t//get RichMember with attributes\n+\t\tmemberToUpdate = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(memberToUpdate), attrDefs).get(0);\n+\n+\t\t// try to find user core attributes and update user -> update name and titles\n+\t\tupdateUserCoreAttributes(sess, candidate, memberToUpdate, overwriteUserAttributesList);\n+\n+\t\tfor (String attributeName : candidate.getAttributes().keySet()) {\n+\t\t\t//update member attribute\n+\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+\t\t\t\tupdateMemberAttribute(sess, group, candidate, memberToUpdate, attributeName, mergeMemberAttributesList);\n+\t\t\t//update user attribute\n+\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n+\t\t\t\tupdateUserAttribute(sess, group, candidate, memberToUpdate, attributeName, overwriteUserAttributesList);\n+\t\t\t} else {\n+\t\t\t\t//we are not supporting other attributes than member or user so skip it without error, but log it\n+\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeName);\n \t\t\t}\n+\t\t}\n \n-\t\t\t//load attrDefinitions just once for first candidate\n-\t\t\tif(attrDefs.isEmpty()) {\n-\t\t\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n-\t\t\t\t\t\tattrDefs.add(attrDef);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group);\n-\t\t\t\t\t\t//skip this attribute at all\n-\t\t\t\t\t}\n+\t\t//Synchronize userExtSources (add not existing)\n+\t\tfor (UserExtSource ues : candidate.getUserExtSources()) {\n+\t\t\tif (!getPerunBl().getUsersManagerBl().userExtSourceExists(sess, ues)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, memberToUpdate.getUser(), ues);\n+\t\t\t\t} catch (UserExtSourceExistsException e) {\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding already existing userExtSource \" + ues, e);\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \n-\t\t\t//get RichMember with attributes\n-\t\t\trichMember = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(richMember), attrDefs).get(0);\n-\n-\t\t\t// try to find user core attributes and update user -> update name and titles\n-\t\t\tif (overwriteUserAttributesList != null) {\n-\t\t\t\tboolean someFound = false;\n-\t\t\t\tUser user = richMember.getUser();\n-\t\t\t\tfor (String attrName : overwriteUserAttributesList) {\n-\t\t\t\t\tif (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":firstName\")) {\n-\t\t\t\t\t\tuser.setFirstName(candidate.getFirstName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":middleName\")) {\n-\t\t\t\t\t\tuser.setMiddleName(candidate.getMiddleName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":lastName\")) {\n-\t\t\t\t\t\tuser.setLastName(candidate.getLastName());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleBefore\")) {\n-\t\t\t\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleAfter\")) {\n-\t\t\t\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n-\t\t\t\t\t\tsomeFound = true;\n-\t\t\t\t\t}\n+\t\t//Set correct member Status\n+\t\tupdateMemberStatus(sess, memberToUpdate);\n+\t}\n+\n+\t/**\n+\t * Get all attributes to synchronize from candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attributes\n+\t * @return list of attribute definitions\n+\t */\n+\tprivate List<AttributeDefinition> getAttributesToSynchronizeFromCandidates(PerunSession sess, Group group, Candidate candidate) {\n+\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n+\n+\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n+\t\t\ttry {\n+\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n+\t\t\t\tattrDefs.add(attrDef);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group + \"because the attribute definition does not exist.\");\n+\t\t\t\t//skip this attribute at all\n+\t\t\t}\n+\t\t}\n+\t\treturn attrDefs;\n+\t}\n+\n+\t/**\n+\t * Update user core attributes from overwriteUserAttributesList based on values of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param overwriteUserAttributesList list of attributes to be updated\n+\t */\n+\tprivate void updateUserCoreAttributes(PerunSession sess, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList) {\n+\t\tif (overwriteUserAttributesList != null) {\n+\t\t\tboolean someFound = false;\n+\t\t\tUser user = memberToUpdate.getUser();\n+\t\t\tfor (String attrName : overwriteUserAttributesList) {\n+\t\t\t\tif (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":firstName\")) {\n+\t\t\t\t\tuser.setFirstName(candidate.getFirstName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":middleName\")) {\n+\t\t\t\t\tuser.setMiddleName(candidate.getMiddleName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":lastName\")) {\n+\t\t\t\t\tuser.setLastName(candidate.getLastName());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleBefore\")) {\n+\t\t\t\t\tuser.setTitleBefore(candidate.getTitleBefore());\n+\t\t\t\t\tsomeFound = true;\n+\t\t\t\t} else if (attrName.startsWith(AttributesManager.NS_USER_ATTR_CORE+\":titleAfter\")) {\n+\t\t\t\t\tuser.setTitleAfter(candidate.getTitleAfter());\n+\t\t\t\t\tsomeFound = true;\n \t\t\t\t}\n-\t\t\t\tif (someFound) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tperunBl.getUsersManagerBl().updateUser(sess, user);\n-\t\t\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"User from perun not exists when should - removed during sync.\", e);\n-\t\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (someFound) {\n+\t\t\t\ttry {\n+\t\t\t\t\tperunBl.getUsersManagerBl().updateUser(sess, user);\n+\t\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"User from perun does not exist when he should have - he was removed during sync.\", e);\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\tfor (String attributeName : candidate.getAttributes().keySet()) {\n-\t\t\t\t//update member attribute\n-\t\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tboolean attributeFound = false;\n-\t\t\t\t\tfor (Attribute memberAttribute: richMember.getMemberAttributes()) {\n-\t\t\t\t\t\tif(memberAttribute.getName().equals(attributeName)) {\n-\t\t\t\t\t\t\tattributeFound = true;\n-\t\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), memberAttribute.getType());\n-\t\t\t\t\t\t\tif (subjectAttributeValue != null && !Objects.equals(memberAttribute.getValue(), subjectAttributeValue)) {\n-\t\t\t\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n-\t\t\t\t\t\t\t\t\tgroup, memberAttribute, richMember.getId(), memberAttribute.getValue(), subjectAttributeValue);\n-\t\t\t\t\t\t\t\tmemberAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tif(mergeMemberAttributesList.contains(memberAttribute.getName())) {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, richMember, memberAttribute);\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember, memberAttribute);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t\t\t} catch\t(WrongAttributeAssignmentException e) {\n-\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t//we found it, but there is no change;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t//member has not set this attribute so set it now if possible\n-\t\t\t\t\tif(!attributeFound) {\n-\t\t\t\t\t\t// FIXME - this whole section probably can be removed. Previously null attributes were not retrieved with member\n-\t\t\t\t\t\t// FIXME - they are now always present, if not the same, then they are set in a code above.\n-\t\t\t\t\t\tAttribute newAttribute = new Attribute(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName));\n-\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), newAttribute.getType());\n-\t\t\t\t\t\tnewAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Try to set member's attributes\n-\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember, newAttribute);\n-\t\t\t\t\t\t\tlog.trace(\"Setting the {} value {}\", newAttribute, candidate.getAttributes().get(attributeName));\n-\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t//update user attribute\n-\t\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tboolean attributeFound = false;\n-\t\t\t\t\tfor (Attribute userAttribute: richMember.getUserAttributes()) {\n-\t\t\t\t\t\tif(userAttribute.getName().equals(attributeName)) {\n-\t\t\t\t\t\t\tattributeFound = true;\n-\t\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), userAttribute.getType());\n-\t\t\t\t\t\t\tif (!Objects.equals(userAttribute.getValue(), subjectAttributeValue)) {\n-\t\t\t\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n-\t\t\t\t\t\t\t\t\tgroup, userAttribute, richMember.getId(), userAttribute.getValue(), subjectAttributeValue);\n-\t\t\t\t\t\t\t\tuserAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t//Choose set or merge by extSource attribute overwriteUserAttributes (if contains this one)\n-\t\t\t\t\t\t\t\t\tif(overwriteUserAttributesList.contains(userAttribute.getName())) {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember.getUser(), userAttribute);\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, richMember.getUser(), userAttribute);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n-\t\t\t\t\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t//we found it, but there is no change\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t//user has not set this attribute so set it now if\n-\t\t\t\t\tif(!attributeFound) {\n-\t\t\t\t\t\t// FIXME - this whole section probably can be removed. Previously null attributes were not retrieved with member\n-\t\t\t\t\t\t// FIXME - they are now always present, if not the same, then they are set in a code above.\n-\t\t\t\t\t\tAttribute newAttribute = new Attribute(getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName));\n-\t\t\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), newAttribute.getType());\n-\t\t\t\t\t\tnewAttribute.setValue(subjectAttributeValue);\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t// Try to set user's attributes\n-\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, richMember.getUser(), newAttribute);\n-\t\t\t\t\t\t\tlog.trace(\"Setting the {} value {}\", newAttribute, candidate.getAttributes().get(attributeName));\n-\t\t\t\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n-\t\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, richMember);\n+\t/**\n+\t * Update value of member attribute based on value of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param attributeName name of attribute being updated\n+\t * @param mergeMemberAttributesList list of member attributes to be merged and not overwritten\n+\t */\n+\tprivate void updateMemberAttribute(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, String attributeName, List<String> mergeMemberAttributesList) {\n+\t\tfor (Attribute memberAttribute: memberToUpdate.getMemberAttributes()) {\n+\t\t\tif (memberAttribute.getName().equals(attributeName)) {\n+\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), memberAttribute.getType());\n+\t\t\t\tif (subjectAttributeValue != null && !Objects.equals(memberAttribute.getValue(), subjectAttributeValue)) {\n+\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n+\t\t\t\t\t\tgroup, memberAttribute, memberToUpdate.getId(), memberAttribute.getValue(), subjectAttributeValue);\n+\t\t\t\t\tmemberAttribute.setValue(subjectAttributeValue);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t//Choose set or merge by extSource attribute mergeMemberAttributes (if contains this one)\n+\t\t\t\t\t\tif (mergeMemberAttributesList != null && mergeMemberAttributesList.contains(memberAttribute.getName())) {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, memberToUpdate, memberAttribute);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, memberToUpdate, memberAttribute);\n \t\t\t\t\t\t}\n+\t\t\t\t\t} catch (AttributeValueException e) {\n+\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n+\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, memberToUpdate);\n+\t\t\t\t\t} catch\t(WrongAttributeAssignmentException e) {\n+\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n \t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t//we are not supporting other attributes then member or user so skip it without error, but log it\n-\t\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeName);\n \t\t\t\t}\n+\t\t\t\t//we found it, no need to continue in cycle\n+\t\t\t\tbreak;\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\t//Synchronize userExtSources (add not existing)\n-\t\t\tfor (UserExtSource ues : candidate.getUserExtSources()) {\n-\t\t\t\tif (!getPerunBl().getUsersManagerBl().userExtSourceExists(sess, ues)) {\n+\t/**\n+\t * Update value of user attribute based on value of candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attribute values\n+\t * @param memberToUpdate member to update\n+\t * @param attributeName name of attribute being updated\n+\t * @param overwriteUserAttributesList list of user attributes to be overwritten and not merged\n+\t */\n+\tprivate void updateUserAttribute(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, String attributeName, List<String> overwriteUserAttributesList) {\n+\t\tfor (Attribute userAttribute: memberToUpdate.getUserAttributes()) {\n+\t\t\tif(userAttribute.getName().equals(attributeName)) {\n+\t\t\t\tObject subjectAttributeValue = getPerunBl().getAttributesManagerBl().stringToAttributeValue(candidate.getAttributes().get(attributeName), userAttribute.getType());\n+\t\t\t\tif (!Objects.equals(userAttribute.getValue(), subjectAttributeValue)) {\n+\t\t\t\t\tlog.trace(\"Group synchronization {}: value of the attribute {} for memberId {} changed. Original value {}, new value {}.\",\n+\t\t\t\t\t\tgroup, userAttribute, memberToUpdate.getId(), userAttribute.getValue(), subjectAttributeValue);\n+\t\t\t\t\tuserAttribute.setValue(subjectAttributeValue);\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, richMember.getUser(), ues);\n-\t\t\t\t\t} catch (UserExtSourceExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Adding already existing userExtSource \" + ues, e);\n+\t\t\t\t\t\t//Choose set or merge by extSource attribute overwriteUserAttributes (if contains this one)\n+\t\t\t\t\t\tif(overwriteUserAttributesList != null && overwriteUserAttributesList.contains(userAttribute.getName())) {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttributeInNestedTransaction(sess, memberToUpdate.getUser(), userAttribute);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tgetPerunBl().getAttributesManagerBl().mergeAttributeValueInNestedTransaction(sess, memberToUpdate.getUser(), userAttribute);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (AttributeValueException e) {\n+\t\t\t\t\t\t// There is a problem with attribute value, so set INVALID status for the member\n+\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, memberToUpdate);\n+\t\t\t\t\t} catch (WrongAttributeAssignmentException e) {\n+\t\t\t\t\t\tthrow new ConsistencyErrorException(e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\t//we found it, no need to continue in cycle\n+\t\t\t\tbreak;\n \t\t\t}\n+\t\t}\n+\t}\n \n-\t\t\t//Set correct member Status\n-\t\t\tStatus memberStatus = richMember.getStatus();\n-\t\t\tif (statusesAffectedBySynchronization.contains(memberStatus)) {\n-\t\t\t\t//prepare variables with information about member's expiration\n-\t\t\t\tboolean memberHasExpiration;\n-\t\t\t\tboolean memberExpiredInPast = false;\n-\n-\t\t\t\tDate now = new Date();\n-\t\t\t\tDate currentMembershipExpirationDate = now;\n-\t\t\t\tAttribute membershipExpiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, richMember, AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n-\t\t\t\t//Check if member has not empty expiration date\n-\t\t\t\tmemberHasExpiration = membershipExpiration.getValue() != null;\n-\n-\t\t\t\tif (memberHasExpiration) {\n-\t\t\t\t\t//Check if member has expiration date in the past or not (default is false even if he doesn't have expiration at all)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tcurrentMembershipExpirationDate = BeansUtils.getDateFormatterWithoutTime().parse((String) membershipExpiration.getValue());\n-\t\t\t\t\t\tmemberExpiredInPast = currentMembershipExpirationDate.before(now);\n-\t\t\t\t\t} catch (ParseException ex) {\n-\t\t\t\t\t\tlog.error(\"Group synchronization: memberId {} expiration String cannot be parsed, exception {}.\", richMember.getId(), ex);\n-\t\t\t\t\t}\n+\t/**\n+\t * Update member status if not VALID nor SUSPENDED to EXPIRED or VALID based on membership expiration attribute.\n+\t *\n+\t * @param sess perun session\n+\t * @param memberToUpdate member to update\n+\t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n+\t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n+\t */\n+\tprivate void updateMemberStatus(PerunSession sess, RichMember memberToUpdate) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\tStatus memberStatus = memberToUpdate.getStatus();\n+\t\tif (statusesAffectedBySynchronization.contains(memberStatus)) {\n+\t\t\t//prepare variables with information about member's expiration\n+\t\t\tboolean memberHasExpiration;\n+\t\t\tboolean memberExpiredInPast = false;\n+\n+\t\t\tDate now = new Date();\n+\t\t\tDate currentMembershipExpirationDate = now;\n+\t\t\tAttribute membershipExpiration = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberToUpdate, AttributesManager.NS_MEMBER_ATTR_DEF + \":membershipExpiration\");\n+\t\t\t//Check if member has not empty expiration date\n+\t\t\tmemberHasExpiration = membershipExpiration.getValue() != null;\n+\n+\t\t\tif (memberHasExpiration) {\n+\t\t\t\t//Check if member has expiration date in the past or not (default is false even if he doesn't have expiration at all)\n+\t\t\t\ttry {\n+\t\t\t\t\tcurrentMembershipExpirationDate = BeansUtils.getDateFormatterWithoutTime().parse(membershipExpiration.valueAsString());\n+\t\t\t\t\tmemberExpiredInPast = currentMembershipExpirationDate.before(now);\n+\t\t\t\t} catch (ParseException ex) {\n+\t\t\t\t\tlog.error(\"Group synchronization: memberId {} expiration String cannot be parsed, exception {}.\", memberToUpdate.getId(), ex);\n \t\t\t\t}\n+\t\t\t}\n \n-\t\t\t\tif ((Status.DISABLED.equals(memberStatus) || Status.INVALID.equals(memberStatus)) && memberHasExpiration && memberExpiredInPast) {\n-\t\t\t\t\t//If member has expiration in the past (should be expired now) and is in other state than expired, expire him\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t//if success, this method will change status of member as side effect\n-\t\t\t\t\t\tperunBl.getMembersManagerBl().expireMember(sess, richMember);\n-\t\t\t\t\t\tlog.info(\"Switching member id {} to EXPIRE state, due to expiration {}.\", richMember.getId(), membershipExpiration.getValue());\n-\t\t\t\t\t\tlog.debug(\"Switching member to EXPIRE state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n-\t\t\t\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException e) {\n-\t\t\t\t\t\tlog.error(\"Consistency error while trying to expire member id {}, exception {}\", richMember.getId(), e);\n-\t\t\t\t\t}\n-\t\t\t\t} else if ((memberHasExpiration && !memberExpiredInPast) || !memberHasExpiration) {\n-\t\t\t\t\t//If member shouldn't be expired, validate him (don't have expiration at all or expire in the future from now)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tperunBl.getMembersManagerBl().validateMember(sess, richMember);\n-\t\t\t\t\t\tlog.info(\"Switching member id {} to VALID state, due to expiration {}.\", richMember.getId(), membershipExpiration.getValue());\n-\t\t\t\t\t\tlog.debug(\"Switching member to VALID state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n-\t\t\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n-\t\t\t\t\t\tlog.error(\"Error during validating member id {}, exception {}\", richMember.getId(), e);\n-\t\t\t\t\t}\n+\t\t\tif ((Status.DISABLED.equals(memberStatus) || Status.INVALID.equals(memberStatus)) && memberHasExpiration && memberExpiredInPast) {\n+\t\t\t\t//If member has expiration in the past (should be expired now) and is in other state than expired, expire him\n+\t\t\t\ttry {\n+\t\t\t\t\t//if success, this method will change status of member as side effect\n+\t\t\t\t\tperunBl.getMembersManagerBl().expireMember(sess, memberToUpdate);\n+\t\t\t\t\tlog.info(\"Switching member id {} to EXPIRE state, due to expiration {}.\", memberToUpdate.getId(), membershipExpiration.getValue());\n+\t\t\t\t\tlog.debug(\"Switching member to EXPIRE state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n+\t\t\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException e) {\n+\t\t\t\t\tlog.error(\"Consistency error while trying to expire member id {}, exception {}\", memberToUpdate.getId(), e);\n+\t\t\t\t}\n+\t\t\t} else if (!memberHasExpiration || !memberExpiredInPast) {\n+\t\t\t\t//If member shouldn't be expired, validate him (don't have expiration at all or expire in the future from now)\n+\t\t\t\ttry {\n+\t\t\t\t\tperunBl.getMembersManagerBl().validateMember(sess, memberToUpdate);\n+\t\t\t\t\tlog.info(\"Switching member id {} to VALID state, due to expiration {}.\", memberToUpdate.getId(), membershipExpiration.getValue());\n+\t\t\t\t\tlog.debug(\"Switching member to VALID state, additional info: membership expiration date='{}', system now date='{}'\", currentMembershipExpirationDate, now);\n+\t\t\t\t} catch (WrongAttributeValueException | WrongReferenceAttributeValueException e) {\n+\t\t\t\t\tlog.error(\"Error during validating member id {}, exception {}\", memberToUpdate.getId(), e);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n \t/**\n-\t * Get list of new candidates and add them to the Group.\n+\t * Get new candidate and add him to the Group.\n \t *\n \t * If Candidate can't be added to Group, skip him and add this information to skippedMembers list.\n \t *\n \t * When creating new member from Candidate, if user already exists, merge his attributes,\n \t * if attribute exists in list of overwriteUserAttributesList, update it instead of merging.\n \t *\n-\t * @param sess\n+\t * This method runs in separate transaction.\n+\t *\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param candidatesToAdd list of new members (candidates)\n+\t * @param candidate new member (candidate)\n \t * @param overwriteUserAttributesList list of attributes to be updated for user if found\n \t * @param mergeMemberAttributesList list of attributes to be merged for member if found\n \t * @param skippedMembers list of not successfully synchronized members\n-\t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t */\n-\tprivate void addMissingMembersWhileSynchronization(PerunSession sess, Group group, List<Candidate> candidatesToAdd, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<String> skippedMembers) {\n-\t\t//sort candidates to prevent deadlocks during member locking\n-\t\t//IMPORTANT: Candidates sorting may produce a different result than members sorting, thus there is a potential risk of creating a deadlock\n-\t\tCollections.sort(candidatesToAdd);\n-\t\t// Now add missing members\n-\t\tfor (Candidate candidate: candidatesToAdd) {\n-\t\t\tMember member;\n-\t\t\ttry {\n-\t\t\t\t// Check if the member is already in the VO (just not in the group)\n-\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n+\tpublic void addMissingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<String> skippedMembers) {\n+\t\tMember member;\n+\t\ttry {\n+\t\t\t// Check if the member is already in the VO (just not in the group)\n+\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n \n-\t\t\t\t// member exists - update attributes\n-\t\t\t\tMap<Candidate,RichMember> memberMap = new HashMap<>();\n-\t\t\t\tmemberMap.put(candidate, getPerunBl().getMembersManagerBl().getRichMember(sess, member));\n-\t\t\t\ttry {\n-\t\t\t\t\tupdateExistingMembersWhileSynchronization(sess, group, memberMap, overwriteUserAttributesList, mergeMemberAttributesList);\n-\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n-\t\t\t\t\t// if update fails, skip him\n-\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e.getMessage() + \"'\");\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+\t\t\t// member exists - update attributes\n+\t\t\tRichMember memberToUpdate = getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n+\t\t\ttry {\n+\t\t\t\tupdateExistingMemberWhileSynchronization(sess, group, candidate, memberToUpdate, overwriteUserAttributesList, mergeMemberAttributesList, new ArrayList<>());\n+\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n+\t\t\t\t// if update fails, skip him\n+\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e.getMessage() + \"'\");\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\t\t} catch (MemberNotExistsException e) {\n+\t\t} catch (MemberNotExistsException e) {\n+\t\t\ttry {\n+\t\t\t\t// We have new member (candidate), so create him using synchronous createMember (and overwrite chosen user attributes)\n+\t\t\t\tmember = getPerunBl().getMembersManagerBl().createMemberSync(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate, null, overwriteUserAttributesList);\n+\t\t\t\tlog.info(\"Group synchronization {}: New member id {} created during synchronization.\", group, member.getId());\n+\t\t\t} catch (AlreadyMemberException e1) {\n+\t\t\t\t//Probably race condition, give him another chance to fix this mess\n+\t\t\t\t// Check if the member is already in the VO (just not in the group)\n \t\t\t\ttry {\n-\t\t\t\t\t// We have new member (candidate), so create him using synchronous createMember (and overwrite chosed user attributes)\n-\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().createMemberSync(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate, null, overwriteUserAttributesList);\n-\t\t\t\t\tlog.info(\"Group synchronization {}: New member id {} created during synchronization.\", group, member.getId());\n-\t\t\t\t} catch (AlreadyMemberException e1) {\n-\t\t\t\t\t//Probably race condition, give him another chance to fix this mess\n-\t\t\t\t\t// Check if the member is already in the VO (just not in the group)\n+\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n+\t\t\t\t\t// member exists - update attribute\n+\t\t\t\t\tRichMember memberToUpdate = getPerunBl().getMembersManagerBl().getRichMember(sess, member);\n \t\t\t\t\ttry {\n-\t\t\t\t\t\tmember = getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, getPerunBl().getGroupsManagerBl().getVo(sess, group), candidate.getUserExtSources());\n-\t\t\t\t\t\t// member exists - update attribute\n-\t\t\t\t\t\tMap<Candidate,RichMember> memberMap = new HashMap<>();\n-\t\t\t\t\t\tmemberMap.put(candidate, getPerunBl().getMembersManagerBl().getRichMember(sess, member));\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tupdateExistingMembersWhileSynchronization(sess, group, memberMap, overwriteUserAttributesList, mergeMemberAttributesList);\n-\t\t\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e2) {\n-\t\t\t\t\t\t\t// if update fails, skip him\n-\t\t\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n-\t\t\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e2.getMessage() + \"'\");\n-\t\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (Exception e2) {\n-\t\t\t\t\t\t//Something is still wrong, thrown consistency exception\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Trying to add existing member (it is not possible to get him by userExtSource even if is also not possible to create him in DB)!\");\n+\t\t\t\t\t\tupdateExistingMemberWhileSynchronization(sess, group, candidate, memberToUpdate, overwriteUserAttributesList, mergeMemberAttributesList, new ArrayList<>());\n+\t\t\t\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e2) {\n+\t\t\t\t\t\t// if update fails, skip him\n+\t\t\t\t\t\tlog.warn(\"Can't update member from candidate {} due to attribute value exception {}.\", candidate, e);\n+\t\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when updating member from candidate: Exception: \" + e.getName() + \" => '\" + e2.getMessage() + \"'\");\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t} catch (AttributeValueException e1) {\n-\t\t\t\t\tlog.warn(\"Can't create member from candidate {} due to attribute value exception {}.\", candidate, e1);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when createing member from candidate: Exception: \" + e1.getName() + \" => '\" + e1.getMessage() + \"'\");\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (ExtendMembershipException e1) {\n-\t\t\t\t\tlog.warn(\"Can't create member from candidate {} due to membership expiration exception {}.\", candidate, e1);\n-\t\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because membership expiration: Exception: \" + e1.getName() + \" => \" + e1.getMessage() + \"]\");\n-\t\t\t\t\tcontinue;\n+\t\t\t\t} catch (Exception e2) {\n+\t\t\t\t\t//Something is still wrong, thrown consistency exception\n+\t\t\t\t\tthrow new ConsistencyErrorException(\"Trying to add existing member (it is not possible to get him by userExtSource even if is also not possible to create him in DB)!\");\n \t\t\t\t}\n+\t\t\t} catch (AttributeValueException e1) {\n+\t\t\t\tlog.warn(\"Can't create member from candidate {} due to attribute value exception {}.\", candidate, e1);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because there was problem when createing member from candidate: Exception: \" + e1.getName() + \" => '\" + e1.getMessage() + \"'\");\n+\t\t\t\treturn;\n+\t\t\t} catch (ExtendMembershipException e1) {\n+\t\t\t\tlog.warn(\"Can't create member from candidate {} due to membership expiration exception {}.\", candidate, e1);\n+\t\t\t\tskippedMembers.add(\"MemberEntry:[\" + candidate + \"] was skipped because membership expiration: Exception: \" + e1.getName() + \" => \" + e1.getMessage() + \"]\");\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t}\n \n-\t\t\ttry {\n-\t\t\t\t// Add the member to the group\n-\t\t\t\tif (!group.getName().equals(VosManager.MEMBERS_GROUP)) {\n-\t\t\t\t\t// Do not add members to the generic members group\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getGroupsManagerBl().addMember(sess, group, member);\n-\t\t\t\t\t} catch(GroupNotExistsException ex) {\n-\t\t\t\t\t\t// Shouldn't happen, because every group has at least Members group as a parent\n-\t\t\t\t\t\t// Shouldn't happen, group should always exist\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t\t}\n+\t\ttry {\n+\t\t\t// Add the member to the group\n+\t\t\tif (!group.getName().equals(VosManager.MEMBERS_GROUP)) {\n+\t\t\t\t// Do not add members to the generic members group\n+\t\t\t\ttry {\n+\t\t\t\t\tgetPerunBl().getGroupsManagerBl().addMember(sess, group, member);\n+\t\t\t\t} catch(GroupNotExistsException ex) {\n+\t\t\t\t\t// Shouldn't happen, because every group has at least Members group as a parent\n+\t\t\t\t\t// Shouldn't happen, group should always exist\n+\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n \t\t\t\t}\n-\t\t\t\tlog.info(\"Group synchronization {}: New member id {} added.\", group, member.getId());\n-\t\t\t} catch (AlreadyMemberException e) {\n-\t\t\t\t//This part is ok, it means someone add member before synchronization ends, log it and skip this member\n-\t\t\t\tlog.debug(\"Member {} was added to group {} before adding process. Skip this member.\", member, group);\n-\t\t\t\tcontinue;\n-\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\t// There is a problem with attribute value, so set INVALID status of the member\n-\t\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, member);\n \t\t\t}\n+\t\t\tlog.info(\"Group synchronization {}: New member id {} added.\", group, member.getId());\n+\t\t} catch (AlreadyMemberException e) {\n+\t\t\t//This part is ok, it means someone add member before synchronization ends, log it and skip this member\n+\t\t\tlog.debug(\"Member {} was added to group {} before adding process. Skip this member.\", member, group);\n+\t\t\treturn;\n+\t\t} catch (AttributeValueException e) {\n+\t\t\t// There is a problem with attribute value, so set INVALID status of the member\n+\t\t\tgetPerunBl().getMembersManagerBl().invalidateMember(sess, member);\n+\t\t}\n \n-\t\t\t// Try to validate member\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().validateMember(sess, member);\n-\t\t\t} catch (AttributeValueException e) {\n-\t\t\t\tlog.warn(\"Member id {} will be in INVALID status due to wrong attributes {}.\", member.getId(), e);\n-\t\t\t}\n+\t\t// Try to validate member\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().validateMember(sess, member);\n+\t\t} catch (AttributeValueException e) {\n+\t\t\tlog.warn(\"Member id {} will be in INVALID status due to wrong attributes {}.\", member.getId(), e);\n \t\t}\n \t}\n \n \t/**\n-\t * Remove former members from group (if they are not listed in ExtSource yet).\n+\t * Remove former member from group (if he is not listed in ExtSource).\n \t *\n \t * If this is membersGroup (of some Vo) try to disableMember, if not possible then delete him.\n \t * If this is regular group (of some Vo) remove him and if this group is also\n \t * his last authoritative group, disable or delete him also in the Vo.\n \t *\n-\t * @param sess\n+\t * This method runs in separate transaction.\n+\t *\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToRemove list of members to be removed from Group\n+\t * @param memberToRemove member to be removed from Group\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n+\t * @throws WrongAttributeAssignmentException if there is some problem with assignment of attribute\n+\t * @throws GroupNotExistsException if group does not exist\n+\t */\n+\tpublic void removeFormerMemberWhileSynchronization(PerunSession sess, Group group, RichMember memberToRemove) throws WrongAttributeAssignmentException, GroupNotExistsException {\n+\t\t// Member is missing in the external group, so remove him from the perun group\n+\t\ttry {\n+\t\t\t//members group\n+\t\t\tif (group.getName().equals(VosManager.MEMBERS_GROUP)) {\n+\t\t\t\t// If the group is members group, the member must be disabled as a member of VO\n+\t\t\t\tremoveMemberFromMembersGroup(sess, group, memberToRemove);\n+\t\t\t//not members group\n+\t\t\t} else {\n+\t\t\t\t//If this group is authoritative group, check if this is last authoritative group of this member\n+\t\t\t\t//If Yes = deleteMember (from Vo), if No = only removeMember\n+\t\t\t\tif (isAuthoritative(sess, group)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "originalPosition": 724}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTI0MDky", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-453924092", "createdAt": "2020-07-23T08:22:53Z", "commit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyMjo1M1rOG2AuPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyNzozM1rOG2A4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI4ODEyNg==", "bodyText": "What about cycling through the list of attribute definitions we already filled? It should be the same and it could be stripped by not existing attributes. You can also send attrDef through method instead of just name (because definition has also name of attribute).", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r459288126", "createdAt": "2020-07-23T08:22:53Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3338,488 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, richMember);\n-\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t//log it and skip this member\n-\t\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", richMember, group);\n-\t\t\t\tcontinue;\n+\t\t//load attrDefinitions if not received\n+\t\tif (!candidate.getAttributes().isEmpty() && attrDefs.isEmpty()) {\n+\t\t\tattrDefs = getAttributesToSynchronizeFromCandidates(sess, group, candidate);\n+\t\t}\n+\n+\t\t//get RichMember with attributes\n+\t\tmemberToUpdate = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(memberToUpdate), attrDefs).get(0);\n+\n+\t\t// try to find user core attributes and update user -> update name and titles\n+\t\tupdateUserCoreAttributes(sess, candidate, memberToUpdate, overwriteUserAttributesList);\n+\n+\t\tfor (String attributeName : candidate.getAttributes().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MDY1NQ==", "bodyText": "This part is small but it could be also done in a separate private method.", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r459290655", "createdAt": "2020-07-23T08:27:33Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3338,488 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n \n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, richMember);\n-\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t//log it and skip this member\n-\t\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", richMember, group);\n-\t\t\t\tcontinue;\n+\t\t//load attrDefinitions if not received\n+\t\tif (!candidate.getAttributes().isEmpty() && attrDefs.isEmpty()) {\n+\t\t\tattrDefs = getAttributesToSynchronizeFromCandidates(sess, group, candidate);\n+\t\t}\n+\n+\t\t//get RichMember with attributes\n+\t\tmemberToUpdate = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(memberToUpdate), attrDefs).get(0);\n+\n+\t\t// try to find user core attributes and update user -> update name and titles\n+\t\tupdateUserCoreAttributes(sess, candidate, memberToUpdate, overwriteUserAttributesList);\n+\n+\t\tfor (String attributeName : candidate.getAttributes().keySet()) {\n+\t\t\t//update member attribute\n+\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+\t\t\t\tupdateMemberAttribute(sess, group, candidate, memberToUpdate, attributeName, mergeMemberAttributesList);\n+\t\t\t//update user attribute\n+\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n+\t\t\t\tupdateUserAttribute(sess, group, candidate, memberToUpdate, attributeName, overwriteUserAttributesList);\n+\t\t\t} else {\n+\t\t\t\t//we are not supporting other attributes than member or user so skip it without error, but log it\n+\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeName);\n \t\t\t}\n+\t\t}\n \n-\t\t\t//load attrDefinitions just once for first candidate\n-\t\t\tif(attrDefs.isEmpty()) {\n-\t\t\t\tfor(String attrName : candidate.getAttributes().keySet()) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tAttributeDefinition attrDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attrName);\n-\t\t\t\t\t\tattrDefs.add(attrDef);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Can't synchronize attribute \" + attrName + \" for candidate \" + candidate + \" and for group \" + group);\n-\t\t\t\t\t\t//skip this attribute at all\n-\t\t\t\t\t}\n+\t\t//Synchronize userExtSources (add not existing)\n+\t\tfor (UserExtSource ues : candidate.getUserExtSources()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7dcad60c58bc6711a0b0c476001df1329ff371c"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDAzMzQw", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-462403340", "createdAt": "2020-08-06T10:39:17Z", "commit": {"oid": "adfd6b24c91aa97d01ce10422557e4aaf6966efb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzMzMjU2", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-462333256", "createdAt": "2020-08-06T09:05:57Z", "commit": {"oid": "adfd6b24c91aa97d01ce10422557e4aaf6966efb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTowNTo1N1rOG8qAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTowNTo1N1rOG8qAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI1NTk5OQ==", "bodyText": "Not sure if this could happend, but you should check if getAttributes is not null.", "url": "https://github.com/CESNET/perun/pull/2797#discussion_r466255999", "createdAt": "2020-08-06T09:05:57Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -3327,434 +3339,497 @@ private boolean isThisLightweightSynchronization(PerunSession sess, Group group)\n \t * mergeAttributes = for List and Map add new values, do not remove old one,\n \t *                   for other cases store new values (like String, Integer etc.)\n \t *\n+\t * This method runs in separate transaction.\n \t *\n-\t * @param sess\n+\t * @param sess perun session\n \t * @param group to be synchronized\n-\t * @param membersToUpdate list of members for updating in Perun by information from extSource\n+\t * @param candidate candidate to update by\n+\t * @param memberToUpdate richMember for updating in Perun by information from extSource\n \t * @param overwriteUserAttributesList list of user attributes to be updated instead of merged\n \t * @param mergeMemberAttributesList list of member attributes to be merged instead of updated\n+\t * @param attrDefs list of attribute definitions to update from candidate, if null the list is filled in process\n \t *\n-\t * @throws InternalErrorException if some internal error occurs\n \t * @throws AttributeNotExistsException if some attributes not exists and for this reason can't be updated\n \t * @throws WrongAttributeAssignmentException if some attribute is updated in bad way (bad assignment)\n \t */\n-\tprivate void updateExistingMembersWhileSynchronization(PerunSession sess, Group group, Map<Candidate, RichMember> membersToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\tpublic void updateExistingMemberWhileSynchronization(PerunSession sess, Group group, Candidate candidate, RichMember memberToUpdate, List<String> overwriteUserAttributesList, List<String> mergeMemberAttributesList, List<AttributeDefinition> attrDefs) throws AttributeNotExistsException, WrongAttributeAssignmentException {\n+\t\t//If member does not exists in this moment (somebody removed him before updating process), skip him and log it\n+\t\ttry {\n+\t\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, memberToUpdate);\n+\t\t} catch (MemberNotExistsException ex) {\n+\t\t\t//log it and skip this member\n+\t\t\tlog.debug(\"Someone removed member {} from group {} before updating process. Skip him.\", memberToUpdate, group);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t//load attrDefinitions if not received\n+\t\tif (!candidate.getAttributes().isEmpty() && attrDefs.isEmpty()) {\n+\t\t\tattrDefs = getAttributesToSynchronizeFromCandidates(sess, group, candidate);\n+\t\t}\n+\n+\t\t//get RichMember with attributes\n+\t\tmemberToUpdate = getPerunBl().getMembersManagerBl().convertMembersToRichMembersWithAttributes(sess, Collections.singletonList(memberToUpdate), attrDefs).get(0);\n+\n+\t\t// try to find user core attributes and update user -> update name and titles\n+\t\tupdateUserCoreAttributes(sess, candidate, memberToUpdate, overwriteUserAttributesList);\n+\n+\t\tfor (AttributeDefinition attributeDefinition : attrDefs) {\n+\t\t\t//update member attribute\n+\t\t\tif(attributeDefinition.getNamespace().startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+\t\t\t\tupdateMemberAttribute(sess, group, candidate, memberToUpdate, attributeDefinition, mergeMemberAttributesList);\n+\t\t\t//update user attribute\n+\t\t\t} else if(attributeDefinition.getNamespace().startsWith(AttributesManager.NS_USER_ATTR)) {\n+\t\t\t\tupdateUserAttribute(sess, group, candidate, memberToUpdate, attributeDefinition, overwriteUserAttributesList);\n+\t\t\t} else {\n+\t\t\t\t//we are not supporting other attributes than member or user so skip it without error, but log it\n+\t\t\t\tlog.warn(\"Attribute {} can't be set, because it is not member or user attribute.\", attributeDefinition.getName());\n+\t\t\t}\n+\t\t}\n+\n+\t\t//Synchronize userExtSources (add not existing)\n+\t\taddUserExtSources(sess, candidate, memberToUpdate);\n+\n+\t\t//Set correct member Status\n+\t\tupdateMemberStatus(sess, memberToUpdate);\n+\t}\n+\n+\t/**\n+\t * Get all attributes to synchronize from candidate.\n+\t *\n+\t * @param sess perun session\n+\t * @param group group being synchronized\n+\t * @param candidate candidate from whom we get attributes\n+\t * @return list of attribute definitions\n+\t */\n+\tprivate List<AttributeDefinition> getAttributesToSynchronizeFromCandidates(PerunSession sess, Group group, Candidate candidate) {\n \t\tList<AttributeDefinition> attrDefs = new ArrayList<>();\n-\t\t//Iterate through all subject attributes\n-\t\tfor(Candidate candidate: membersToUpdate.keySet()) {\n-\t\t\tRichMember richMember = membersToUpdate.get(candidate);\n \n-\t\t\t//If member not exists in this moment (somebody remove him before start of updating), skip him and log it\n+\t\tfor(String attrName : candidate.getAttributes().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfd6b24c91aa97d01ce10422557e4aaf6966efb"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f2c6ff016aaf6626624d7266c0838c12b5c3e6", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/56f2c6ff016aaf6626624d7266c0838c12b5c3e6", "committedDate": "2020-08-10T09:49:59Z", "message": "Change of transaction over synchronizeGroup\n\n- synchronizeGroup does not run in separate transaction anymore\n- methods used in synchronizeGroup that updated, removed, and added members from external source now accept as parameter only one member at a time and all three methods run in separate transaction\n- refactored code of processing methods, especially solved and removed two occurrences of FIXME\n- changed order of submethods to remove, update, add so the group is smaller for update and add methods\n- also added tests of synchronizeGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09e16625ad6b7c58efca63f07da3c280d40b77b1", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/09e16625ad6b7c58efca63f07da3c280d40b77b1", "committedDate": "2020-08-10T09:49:59Z", "message": "Refactor processing methods of synchronizeGroup\n\n- methods updateExistingMemberWhileSynchronization and removeFormerMemberWhileSynchronization were separated into smaller chunks of private methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed24d785a56fefbc12fbf9bde118e58afd74b9da", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/ed24d785a56fefbc12fbf9bde118e58afd74b9da", "committedDate": "2020-08-10T09:49:59Z", "message": " Fixes based on review\n\n- updated some comments\n- check of authoritative group moved outside of cycle of members in removeFormerMemberWhileSynchronization\n- updating member and user attributes works with attribute definitions in updateExistingMemberWhileSynchronization\n- updating userExtSources moved to private method for better readability in updateExistingMemberWhileSynchronization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd41fba75c519d09225e60db09f42c715de1efc", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/dcd41fba75c519d09225e60db09f42c715de1efc", "committedDate": "2020-08-10T09:50:53Z", "message": "Fixes based on review\n\n- added check for null attributes of candidate in getAttributesToSynchronizeFromCandidates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adfd6b24c91aa97d01ce10422557e4aaf6966efb", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/adfd6b24c91aa97d01ce10422557e4aaf6966efb", "committedDate": "2020-07-25T12:16:42Z", "message": " Fixes based on review\n\n- updated some comments\n- check of authoritative group moved outside of cycle of members in removeFormerMemberWhileSynchronization\n- updating member and user attributes works with attribute definitions in updateExistingMemberWhileSynchronization\n- updating userExtSources moved to private method for better readability in updateExistingMemberWhileSynchronization"}, "afterCommit": {"oid": "dcd41fba75c519d09225e60db09f42c715de1efc", "author": {"user": {"login": "metodej", "name": null}}, "url": "https://github.com/CESNET/perun/commit/dcd41fba75c519d09225e60db09f42c715de1efc", "committedDate": "2020-08-10T09:50:53Z", "message": "Fixes based on review\n\n- added check for null attributes of candidate in getAttributesToSynchronizeFromCandidates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTU3NTkz", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-464157593", "createdAt": "2020-08-10T11:44:12Z", "commit": {"oid": "dcd41fba75c519d09225e60db09f42c715de1efc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjcxNDA1", "url": "https://github.com/CESNET/perun/pull/2797#pullrequestreview-465671405", "createdAt": "2020-08-12T07:50:27Z", "commit": {"oid": "dcd41fba75c519d09225e60db09f42c715de1efc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1258, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}