{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDM5MTQ5", "number": 2737, "title": "CORE,GUI: Login / password checks for einfra", "bodyText": "CORE\n\n\nLogic of attribute checks for login syntax was moved into\ntha password manager modules.\n\n\nHelping methods in ModulesUtilsBl were updated to work just with\nlogin and namespace (without Attribute object).\n\n\nNew configuration option \"login-namespace:[namespace]:allowedExceptions\"\nin /etc/perun/perun-namespaces.properties can be used to allow\notherwise invalid logins (syntactically or unpermitted).\nThis is necessary to enforce correct checks on new logins, but\nleave out currently existing invalid logins.\n\n\nAdded checked InvalidLoginException, which is thrown if login\nis invalid by syntax or is not permitted.\n\n\nisLoginAvailable() now also checks if login is syntactically\ncorrect and allowed within namespace before returning info about\navailability. This allows us to have input check in current\nforms.\n\n\nUpdated generic user:def:login-namespace attribute module to wrap\nnew logic and throw WrongAttributeValue as expected.\n\n\nImplemented password strength check in password manager modules.\n\n\nGenericPasswordManagerModule checks only emptiness, to conform\nprevious behavior.\nEinfraPasswordManagerModule checks various password properties\nand its logic will be extended later. It is also applied to\nSambaduPasswordManagerModule.\n\n\nVarious generic methods working with login/password now throws those\ntwo new exceptions, and usually also methods using them.\nCore and RPC javadoc for such methods was updated.\n\n\nGUI\n\nCheck for login availability can handle InvalidLoginException.\nShow einfra specific help and perform checks on password.", "createdAt": "2020-06-11T12:21:58Z", "url": "https://github.com/CESNET/perun/pull/2737", "merged": true, "mergeCommit": {"oid": "4d82b1f6bdf6d21b854a46c644e94427d0b9172a"}, "closed": true, "closedAt": "2020-06-22T06:18:41Z", "author": {"login": "zlamalp"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqfs4jgBqjM0Mzc3MjM5Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsFeGQgFqTQzMjE2ODI5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c4b89c242a7587eafd98b6de64280d232017bf2", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/3c4b89c242a7587eafd98b6de64280d232017bf2", "committedDate": "2020-06-12T09:44:37Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}, "afterCommit": {"oid": "ae2e265acf92d65caa2343e05bdc786fb2cacb52", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/ae2e265acf92d65caa2343e05bdc786fb2cacb52", "committedDate": "2020-06-12T09:46:28Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a523c89b707199af615c2acff18e5de87016ba", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/17a523c89b707199af615c2acff18e5de87016ba", "committedDate": "2020-06-12T10:21:33Z", "message": "GUI: Implemented login/password checks for einfra\n\n- Check for login availability can handle InvalidLoginException.\n- Show einfra specific help and perform checks on password."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81b1487d45376b73fbf608af80a1af35adda18ec", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/81b1487d45376b73fbf608af80a1af35adda18ec", "committedDate": "2020-06-12T10:21:34Z", "message": "GUI: Fixed conditions on password check\n\n- Fixed wrong condition on password input box validator results.\n- InvalidLoginException will be checked type, hence we must compare\n  exception name and not type.\n- Show proper help also on create service member."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9211d17bcc18ea4207d7b8e6f6380a96e748f6c6", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/9211d17bcc18ea4207d7b8e6f6380a96e748f6c6", "committedDate": "2020-06-12T10:21:34Z", "message": "CORE: Support login/password checks by password manager modules\n\n- Logic of attribute checks for login syntax was moved into\n  tha password manager modules.\n- Helping methods in ModulesUtilsBl were updated to work just with\n  login and namespace (without Attribute object).\n- New configuration option \"login-namespace:[namespace]:allowedExceptions\"\n  in /etc/perun/perun-namespaces.properties can be used to allow\n  otherwise invalid logins (syntactically or unpermitted).\n  This is necessary to enforce correct checks on new logins, but\n  leave out currently existing invalid logins.\n- Added checked InvalidLoginException, which is thrown if login\n  is invalid by syntax or is not permitted.\n- isLoginAvailable() now also checks if login is syntactically\n  correct and allowed within namespace before returning info about\n  availability. This allows us to have input check in current\n  forms.\n- Updated generic user:def:login-namespace attribute module to wrap\n  new logic and throw WrongAttributeValue as expected.\n\n- Implemented password strength check in password manager modules.\n- GenericPasswordManagerModule checks only emptiness, to conform\n  previous behavior.\n  EinfraPasswordManagerModule checks various password properties\n  and its logic will be extended later. It is also applied to\n  SambaduPasswordManagerModule.\n\n- Various generic methods working with login/password now throws those\n  two new exceptions, and usually also methods using them.\n  Core and RPC javadoc for such methods was updated.\n\nWe will have to cleanup various password manager exceptions, they are now\nkept for the purpose of compatibility with currently deployed scripts.\n\nIMPORTANT: On deployment, existing \"invalid\" logins must be set between\n           allowed exceptions. This is relevant for \"einfra\", since it\n           now implement non-generic check."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9451bbb9d7994080e9fa1e81567a477343358469", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/9451bbb9d7994080e9fa1e81567a477343358469", "committedDate": "2020-06-12T10:21:34Z", "message": "CORE: Fixed password manager script path for samba\n\n- Since we extend Einfra password manager module, which modifies\n  basic paths, we must re-init them."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae2e265acf92d65caa2343e05bdc786fb2cacb52", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/ae2e265acf92d65caa2343e05bdc786fb2cacb52", "committedDate": "2020-06-12T09:46:28Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}, "afterCommit": {"oid": "e46cbdf5599f9e04139056d86cf9fe3a3d5e47e1", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/e46cbdf5599f9e04139056d86cf9fe3a3d5e47e1", "committedDate": "2020-06-12T10:21:35Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/eb28bc5e523d6260a35a673a29f7018b6da26aa7", "committedDate": "2020-06-15T07:40:40Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e46cbdf5599f9e04139056d86cf9fe3a3d5e47e1", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/e46cbdf5599f9e04139056d86cf9fe3a3d5e47e1", "committedDate": "2020-06-12T10:21:35Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}, "afterCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/eb28bc5e523d6260a35a673a29f7018b6da26aa7", "committedDate": "2020-06-15T07:40:40Z", "message": "CORE: Fixed mocks in tests of login-namespace attributes\n\n- We must mock results of new methods used in login-namespace module."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMjU3ODMz", "url": "https://github.com/CESNET/perun/pull/2737#pullrequestreview-431257833", "createdAt": "2020-06-16T08:06:02Z", "commit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowNjowM1rOGkP8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NTowOFrOGkRauQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MzEwOQ==", "bodyText": "The name of this method is misleading. It sounds like the login could be a java Exception. I would change that for something like 'isLoginExceptionallyAllowed' or something like that.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440663109", "createdAt": "2020-06-16T08:06:03Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/ModulesUtilsBl.java", "diffHunk": "@@ -236,17 +237,50 @@\n \tvoid checkReservedUnixGroupNames(Attribute groupNameAttribute) throws WrongAttributeValueException;\n \n \t/**\n-\t * Check if value of login attribute is unpermitted.\n-\t * If not, its ok.\n-\t * If yes, throw WrongAttributeValueException.\n-\t * If attribute is null, then it's ok.\n-\t * For unpermitted user logins this method firstly tries to read perun-namespaces.properties file.\n-\t * If there is no property in this file, it reads the default hardcoded values.\n+\t * Check login value against regex defined for login-namespace.\n+\t * It throws InvalidLoginException if matching fails.\n+\t *\n+\t * Regex for each namespace can be defined in /etc/perun/perun-namespaces.properties\n+\t * You can define login exceptions, which override these syntactically wrong login names in the same file.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @param defaultRegex Default regex can be used if namespace doesn't define own.\n+\t * @throws InvalidLoginException If login value doesn't matches the regex\n+\t */\n+\tvoid checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException;\n+\n+\t/**\n+\t * Check if value of login is permitted within the namespace.\n+\t * Returns FALSE, if login value is not permitted within the namespace (eg. matches system user)\n \t *\n-\t * @param loginAttribute login-namespace\n-\t * @throws WrongAttributeValueException\n+\t * Reserved login names can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t * If property for namespace is not found, then check is done against hardcoded defaults.\n+\t *\n+\t * You can define login exceptions, which override these reserved login names in the same file.\n+\t * This method returns TRUE for such exceptions.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is permitted within the namespace / FALSE otherwise\n+\t */\n+\tboolean checkIfUserLoginIsPermitted(String namespace, String login);\n+\n+\t/**\n+\t * Return true, if login value is \"exception\" within its namespace rules.\n+\t * Eg. when syntax check normally doesn't allow such value, but its manually allowed here\n+\t * in order to support already existing (historic) wrong values.\n+\t * It can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is within exceptions / FALSE otherwise\n \t */\n-\tvoid checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException;\n+\tboolean isLoginException(String namespace, String login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MjU2Mw==", "bodyText": "I was thinking about this method and also there would be better name something like \"isUserLoginPermitted\", because it returns true or false. Check is more like OK or Exception in our code.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440672563", "createdAt": "2020-06-16T08:21:46Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ModulesUtilsBlImpl.java", "diffHunk": "@@ -539,20 +540,66 @@ public void checkReservedUnixGroupNames(Attribute groupNameAttribute) throws Wro\n \t}\n \n \t@Override\n-\tpublic void checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException {\n-\t\tif(loginAttribute == null) return;\n+\tpublic void checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException {\n+\t\tUtils.notNull(namespace, \"namespace to check login syntax\");\n+\t\tUtils.notNull(login, \"login to check syntax for\");\n+\n \t\tcheckPerunNamespacesMap();\n \n-\t\tString unpermittedNames = perunNamespaces.get(loginAttribute.getFriendlyName() + \":reservedNames\");\n-\t\tif (unpermittedNames != null) {\n-\t\t\tList<String> unpermittedNamesList = Arrays.asList(unpermittedNames.split(\"\\\\s*,\\\\s*\"));\n-\t\t\tif (unpermittedNamesList.contains(loginAttribute.valueAsString()))\n-\t\t\t\tthrow new WrongAttributeValueException(loginAttribute, \"This login is not permitted.\");\n+\t\tString regex = perunNamespaces.get(\"login-namespace:\"+namespace+\":regex\");\n+\t\tif (regex != null) {\n+\t\t\t//Check if regex is valid\n+\t\t\ttry {\n+\t\t\t\tPattern.compile(regex);\n+\t\t\t} catch (PatternSyntaxException e) {\n+\t\t\t\tlog.error(\"Regex pattern \\\"{}\\\" from \\\"login-namespace:{}:regex\\\" property of perun-namespaces.properties file is invalid.\", regex, namespace);\n+\t\t\t\tthrow new InternalErrorException(\"Regex pattern \\\"\"+regex+\"\\\" from \\\"login-namespace:\"+namespace+\":regex\\\" property of perun-namespaces.properties file is invalid.\");\n+\t\t\t}\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif(!login.matches(regex) && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + regex +\"\\\"\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Regex property not found in our attribute map, so use the default hardcoded regex\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif (!defaultRegex.matcher(login).matches() && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + defaultRegex +\"\\\"\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkIfUserLoginIsPermitted(String namespace, String login) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NDAzNA==", "bodyText": "Why is this exception alone on the line?", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440674034", "createdAt": "2020-06-16T08:24:13Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java", "diffHunk": "@@ -1292,8 +1294,8 @@ public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String\n \tpublic RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, User sponsor)\n \t\t\tthrows InternalErrorException, PrivilegeException, AlreadyMemberException,\n \t\t\tLoginNotExistsException, PasswordCreationFailedException,\n-\t\tExtendMembershipException,\n-\t\t\tWrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException {\n+\t\t\tExtendMembershipException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTQ1Mg==", "bodyText": "Typo 'adn'.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440681452", "createdAt": "2020-06-16T08:35:56Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/EinfraPasswordManagerModule.java", "diffHunk": "@@ -19,10 +20,11 @@\n \n import java.io.IOException;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n /**\n- * Password manager for EINFRA login-namespace. It performs custom checks\n- * on password strength and login format.\n+ * Password manager for EINFRA login-namespace. It provides custom checks on login format\n+ * adn password strength. Also implementation for alternative passwords is customized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzI4OQ==", "bodyText": "I am not sure what does this comment mean.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440687289", "createdAt": "2020-06-16T08:45:08Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/GenericPasswordManagerModule.java", "diffHunk": "@@ -55,64 +64,65 @@ public void setActualLoginNamespace(String actualLoginNamespace) {\n \t}\n \n \t@Override\n-\tpublic Map<String, String> generateAccount(PerunSession session, Map<String, String> parameters) throws InternalErrorException {\n+\tpublic Map<String, String> generateAccount(PerunSession sess, Map<String, String> parameters) {\n \t\t// account generation is not supported\n \t\treturn null;\n \t}\n \n \t@Override\n-\tpublic void reservePassword(PerunSession session, String userLogin, String password) throws InternalErrorException {\n-\t\tif (StringUtils.isBlank(password)) {\n-\t\t\tthrow new EmptyPasswordRuntimeException(\"Password for \" + actualLoginNamespace + \":\" + userLogin + \" cannot be empty.\");\n-\t\t}\n+\tpublic void reservePassword(PerunSession sess, String userLogin, String password) throws InvalidLoginException, PasswordStrengthException {\n+\t\tcheckLoginFormat(sess, userLogin);\n+\t\tcheckPasswordStrength(sess, userLogin, password);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE, actualLoginNamespace, userLogin);\n \t\tsendPassword(process, password);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n-\tpublic void reserveRandomPassword(PerunSession session, String userLogin) throws InternalErrorException {\n+\tpublic void reserveRandomPassword(PerunSession sess, String userLogin) throws InvalidLoginException {\n+\t\tcheckLoginFormat(sess, userLogin);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE_RANDOM, actualLoginNamespace, userLogin);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n \tpublic void checkPassword(PerunSession sess, String userLogin, String password) {\n+\t\t// use custom check instead of strength, since this is about empty input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20534ba82c91cb62f1cc61e45822a29933113084", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/20534ba82c91cb62f1cc61e45822a29933113084", "committedDate": "2020-06-16T10:19:49Z", "message": "CORE: Renamed methods, fixed typos\n\n- Renamed checkIfUserLoginIsPermitted() and isLoginException() methods\n  in ModulesUtilsBl to isUserLoginPermitted() and isLoginExceptionallyAllowed().\n- Aligned thrown exceptions in MembersManagerEntry.\n- Fixed typos and comments in password manager modules."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8d0df51b8b6e20355c16c1a8e5e54f27330ab4f", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/a8d0df51b8b6e20355c16c1a8e5e54f27330ab4f", "committedDate": "2020-06-16T10:19:09Z", "message": "CORE:\n\n- Renamed checkIfUserLoginIsPermitted() and isLoginException() methods\n  in ModulesUtilsBl to isUserLoginPermitted() and isLoginExceptionallyAllowed().\n- Aligned thrown exceptions in MembersManagerEntry.\n- Fixed typos and comments in password manager modules."}, "afterCommit": {"oid": "20534ba82c91cb62f1cc61e45822a29933113084", "author": {"user": {"login": "zlamalp", "name": "Pavel Zl\u00e1mal"}}, "url": "https://github.com/CESNET/perun/commit/20534ba82c91cb62f1cc61e45822a29933113084", "committedDate": "2020-06-16T10:19:49Z", "message": "CORE: Renamed methods, fixed typos\n\n- Renamed checkIfUserLoginIsPermitted() and isLoginException() methods\n  in ModulesUtilsBl to isUserLoginPermitted() and isLoginExceptionallyAllowed().\n- Aligned thrown exceptions in MembersManagerEntry.\n- Fixed typos and comments in password manager modules."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTY4Mjk5", "url": "https://github.com/CESNET/perun/pull/2737#pullrequestreview-432168299", "createdAt": "2020-06-17T08:21:09Z", "commit": {"oid": "20534ba82c91cb62f1cc61e45822a29933113084"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1194, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}