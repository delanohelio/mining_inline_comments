{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTg1MDE2", "number": 2535, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOToxNjoxMVrODWMLCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDowNDowM1rODY04eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTk0Njk5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOToxNjoxMVrOFazq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMjoxMDoxMlrOFa3ruQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1Mzg3OA==", "bodyText": "Shouldn't this verify the presence of the resultGroup instead?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(allParentGroups.contains(operandGroup)) {\n          \n          \n            \n            \t\tif(allParentGroups.contains(resultGroup)) {", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r363653878", "createdAt": "2020-01-07T09:16:11Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -4109,7 +4109,14 @@ public Group createGroupUnion(PerunSession sess, Group resultGroup, Group operan\n \t\t// check if there is already a record of these two groups\n \t\tif (this.groupsManagerImpl.isRelationBetweenGroups(resultGroup, operandGroup)) {\n \t\t\tthrow new GroupRelationAlreadyExists(\"There is already a relation defined between result group \" + resultGroup +\n-\t\t\t\t\t\" and operand group \" + operandGroup + \" or they are in hierarchical structure.\");\n+\t\t\t\t\t\" and operand group \" + operandGroup + \" or they are in direct hierarchical structure.\");\n+\t\t}\n+\n+\t\t// check indirect relationships (for example \"A\" with \"A:B:C\" are in indirect relationship using \"A:B\")\n+\t\tList<Group> allParentGroups = this.getParentGroups(sess, operandGroup);\n+\t\tif(allParentGroups.contains(operandGroup)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a1857ae9f5ef5a80ca8e9bff2db58ae6777dda"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxOTYwOQ==", "bodyText": "You are right, this would be always true. I checked wrong group. Fixed.", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r363719609", "createdAt": "2020-01-07T12:10:12Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -4109,7 +4109,14 @@ public Group createGroupUnion(PerunSession sess, Group resultGroup, Group operan\n \t\t// check if there is already a record of these two groups\n \t\tif (this.groupsManagerImpl.isRelationBetweenGroups(resultGroup, operandGroup)) {\n \t\t\tthrow new GroupRelationAlreadyExists(\"There is already a relation defined between result group \" + resultGroup +\n-\t\t\t\t\t\" and operand group \" + operandGroup + \" or they are in hierarchical structure.\");\n+\t\t\t\t\t\" and operand group \" + operandGroup + \" or they are in direct hierarchical structure.\");\n+\t\t}\n+\n+\t\t// check indirect relationships (for example \"A\" with \"A:B:C\" are in indirect relationship using \"A:B\")\n+\t\tList<Group> allParentGroups = this.getParentGroups(sess, operandGroup);\n+\t\tif(allParentGroups.contains(operandGroup)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1Mzg3OA=="}, "originalCommit": {"oid": "f6a1857ae9f5ef5a80ca8e9bff2db58ae6777dda"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NTk2NjMwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/GroupsManagerEntryIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOToyMzozOVrOFaz29w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxMjoxMDozN1rOFa3sKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1Njk1MQ==", "bodyText": "I think there is an invalid order of the groups. The way it is implemented now, this test creates this relation:\n2\n|\n3\n|\n4\nAnd calling createGroupUnion(sess, group4, group2, false) tries to import members from group2 to group4. This causes a cycle, and I am not sure if we can detect this in the current implementation. Also, the test passes because of the error which I have pointed out above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tgroupsManagerBl.createGroupUnion(sess, group4, group2, false);\n          \n          \n            \n            \t\tgroupsManagerBl.createGroupUnion(sess, group2, group4, false);", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r363656951", "createdAt": "2020-01-07T09:23:39Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/GroupsManagerEntryIntegrationTest.java", "diffHunk": "@@ -245,6 +245,18 @@ public void expireMemberInSubGroupAndInUpperGroup() throws Exception {\n \t\t\t\tfoundMember.getGroupStatuses().get(group.getId()), MemberGroupStatus.EXPIRED);\n \t}\n \n+\t@Test (expected=GroupRelationNotAllowed.class)\n+\tpublic void createGroupUnionForIndirectRelationship() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"createGroupUnionForIndirectRelationship\");\n+\n+\t\tVo vo = setUpVo();\n+\t\tgroupsManagerBl.createGroup(sess, vo, group2);\n+\t\tgroupsManagerBl.createGroup(sess, group2, group3);\n+\t\tgroupsManagerBl.createGroup(sess, group3, group4);\n+\n+\t\tgroupsManagerBl.createGroupUnion(sess, group4, group2, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a1857ae9f5ef5a80ca8e9bff2db58ae6777dda"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzcxOTcyMA==", "bodyText": "Right, groups are switched here.", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r363719720", "createdAt": "2020-01-07T12:10:37Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/entry/GroupsManagerEntryIntegrationTest.java", "diffHunk": "@@ -245,6 +245,18 @@ public void expireMemberInSubGroupAndInUpperGroup() throws Exception {\n \t\t\t\tfoundMember.getGroupStatuses().get(group.getId()), MemberGroupStatus.EXPIRED);\n \t}\n \n+\t@Test (expected=GroupRelationNotAllowed.class)\n+\tpublic void createGroupUnionForIndirectRelationship() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"createGroupUnionForIndirectRelationship\");\n+\n+\t\tVo vo = setUpVo();\n+\t\tgroupsManagerBl.createGroup(sess, vo, group2);\n+\t\tgroupsManagerBl.createGroup(sess, group2, group3);\n+\t\tgroupsManagerBl.createGroup(sess, group3, group4);\n+\n+\t\tgroupsManagerBl.createGroupUnion(sess, group4, group2, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY1Njk1MQ=="}, "originalCommit": {"oid": "f6a1857ae9f5ef5a80ca8e9bff2db58ae6777dda"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzU4ODQyOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNDowNDowM1rOFe548A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozMjoxNlrOFfc7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MDA2NA==", "bodyText": "I think the use of Sets, with their intersection operation, would improve the performance on larger group structures.", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r367950064", "createdAt": "2020-01-17T14:04:03Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -671,11 +671,42 @@ public void moveGroup(PerunSession sess, Group destinationGroup, Group movingGro\n \t\t\t\tthrow new GroupMoveNotAllowedException(\"There is already group union between moving group: \" + movingGroup + \" and destination group: \" + destinationGroup + \".\", movingGroup, destinationGroup);\n \t\t\t}\n \n+\t\t\t//prevent existence forbidden unions between groups after moving\n+\t\t\t//example: there are groups \"A\", \"A:B\" and \"C\", where \"C\" is included into \"A\" (there is a union), if we move \"C\" under \"A:B\", existing union will change to forbidden one\n+\t\t\t//Get all unions for moving group and all of its subgroups\n+\t\t\tList<Group> movingGroupStructureUnions = new ArrayList<>();\n+\t\t\tmovingGroupStructureUnions.addAll(getGroupUnions(sess, movingGroup, true));\n+\t\t\tfor(Group subGroup: getAllSubGroups(sess, movingGroup)) {\n+\t\t\t\tmovingGroupStructureUnions.addAll(getGroupUnions(sess, subGroup, true));\n+\t\t\t}\n+\t\t\t//remove direct relationship from moving group to it's parent group (if exists)\n+\t\t\t//prevent wrong exception in situation like \"A\", \"A:B\", \"A:C\" and moving \"A:C\" under \"A:B\", which is correct\n+\t\t\tif(movingGroup.getParentGroupId() != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tGroup parentGroupOfMovingGroup = getParentGroup(sess, movingGroup);\n+\t\t\t\t\tmovingGroupStructureUnions.remove(parentGroupOfMovingGroup);\n+\t\t\t\t} catch (ParentGroupNotExistsException ex) {\n+\t\t\t\t\tthrow new InternalErrorException(\"Can't find parentGroup for \" + movingGroup);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t//Get all group stucture of destination group (destination group all all its parent groups)\n+\t\t\tList<Group> destinationGroupStructure = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a5183730bcc6af68f63389792c8ddfcfe82f2d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNDA1OA==", "bodyText": "Changed to using intersection between sets.", "url": "https://github.com/CESNET/perun/pull/2535#discussion_r368524058", "createdAt": "2020-01-20T12:32:16Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/GroupsManagerBlImpl.java", "diffHunk": "@@ -671,11 +671,42 @@ public void moveGroup(PerunSession sess, Group destinationGroup, Group movingGro\n \t\t\t\tthrow new GroupMoveNotAllowedException(\"There is already group union between moving group: \" + movingGroup + \" and destination group: \" + destinationGroup + \".\", movingGroup, destinationGroup);\n \t\t\t}\n \n+\t\t\t//prevent existence forbidden unions between groups after moving\n+\t\t\t//example: there are groups \"A\", \"A:B\" and \"C\", where \"C\" is included into \"A\" (there is a union), if we move \"C\" under \"A:B\", existing union will change to forbidden one\n+\t\t\t//Get all unions for moving group and all of its subgroups\n+\t\t\tList<Group> movingGroupStructureUnions = new ArrayList<>();\n+\t\t\tmovingGroupStructureUnions.addAll(getGroupUnions(sess, movingGroup, true));\n+\t\t\tfor(Group subGroup: getAllSubGroups(sess, movingGroup)) {\n+\t\t\t\tmovingGroupStructureUnions.addAll(getGroupUnions(sess, subGroup, true));\n+\t\t\t}\n+\t\t\t//remove direct relationship from moving group to it's parent group (if exists)\n+\t\t\t//prevent wrong exception in situation like \"A\", \"A:B\", \"A:C\" and moving \"A:C\" under \"A:B\", which is correct\n+\t\t\tif(movingGroup.getParentGroupId() != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tGroup parentGroupOfMovingGroup = getParentGroup(sess, movingGroup);\n+\t\t\t\t\tmovingGroupStructureUnions.remove(parentGroupOfMovingGroup);\n+\t\t\t\t} catch (ParentGroupNotExistsException ex) {\n+\t\t\t\t\tthrow new InternalErrorException(\"Can't find parentGroup for \" + movingGroup);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t//Get all group stucture of destination group (destination group all all its parent groups)\n+\t\t\tList<Group> destinationGroupStructure = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzk1MDA2NA=="}, "originalCommit": {"oid": "c5a5183730bcc6af68f63389792c8ddfcfe82f2d"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2061, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}