{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDM5MTQ5", "number": 2737, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowNjowM1rOEF0-YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NTowOFrOEF14Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTQ2MjczOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/ModulesUtilsBl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowNjowM1rOGkP8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMToxNVrOGkU8pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MzEwOQ==", "bodyText": "The name of this method is misleading. It sounds like the login could be a java Exception. I would change that for something like 'isLoginExceptionallyAllowed' or something like that.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440663109", "createdAt": "2020-06-16T08:06:03Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/ModulesUtilsBl.java", "diffHunk": "@@ -236,17 +237,50 @@\n \tvoid checkReservedUnixGroupNames(Attribute groupNameAttribute) throws WrongAttributeValueException;\n \n \t/**\n-\t * Check if value of login attribute is unpermitted.\n-\t * If not, its ok.\n-\t * If yes, throw WrongAttributeValueException.\n-\t * If attribute is null, then it's ok.\n-\t * For unpermitted user logins this method firstly tries to read perun-namespaces.properties file.\n-\t * If there is no property in this file, it reads the default hardcoded values.\n+\t * Check login value against regex defined for login-namespace.\n+\t * It throws InvalidLoginException if matching fails.\n+\t *\n+\t * Regex for each namespace can be defined in /etc/perun/perun-namespaces.properties\n+\t * You can define login exceptions, which override these syntactically wrong login names in the same file.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @param defaultRegex Default regex can be used if namespace doesn't define own.\n+\t * @throws InvalidLoginException If login value doesn't matches the regex\n+\t */\n+\tvoid checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException;\n+\n+\t/**\n+\t * Check if value of login is permitted within the namespace.\n+\t * Returns FALSE, if login value is not permitted within the namespace (eg. matches system user)\n \t *\n-\t * @param loginAttribute login-namespace\n-\t * @throws WrongAttributeValueException\n+\t * Reserved login names can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t * If property for namespace is not found, then check is done against hardcoded defaults.\n+\t *\n+\t * You can define login exceptions, which override these reserved login names in the same file.\n+\t * This method returns TRUE for such exceptions.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is permitted within the namespace / FALSE otherwise\n+\t */\n+\tboolean checkIfUserLoginIsPermitted(String namespace, String login);\n+\n+\t/**\n+\t * Return true, if login value is \"exception\" within its namespace rules.\n+\t * Eg. when syntax check normally doesn't allow such value, but its manually allowed here\n+\t * in order to support already existing (historic) wrong values.\n+\t * It can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is within exceptions / FALSE otherwise\n \t */\n-\tvoid checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException;\n+\tboolean isLoginException(String namespace, String login);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NTEyNQ==", "bodyText": "Renamed to suggested name. I have no better.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440745125", "createdAt": "2020-06-16T10:21:15Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/ModulesUtilsBl.java", "diffHunk": "@@ -236,17 +237,50 @@\n \tvoid checkReservedUnixGroupNames(Attribute groupNameAttribute) throws WrongAttributeValueException;\n \n \t/**\n-\t * Check if value of login attribute is unpermitted.\n-\t * If not, its ok.\n-\t * If yes, throw WrongAttributeValueException.\n-\t * If attribute is null, then it's ok.\n-\t * For unpermitted user logins this method firstly tries to read perun-namespaces.properties file.\n-\t * If there is no property in this file, it reads the default hardcoded values.\n+\t * Check login value against regex defined for login-namespace.\n+\t * It throws InvalidLoginException if matching fails.\n+\t *\n+\t * Regex for each namespace can be defined in /etc/perun/perun-namespaces.properties\n+\t * You can define login exceptions, which override these syntactically wrong login names in the same file.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @param defaultRegex Default regex can be used if namespace doesn't define own.\n+\t * @throws InvalidLoginException If login value doesn't matches the regex\n+\t */\n+\tvoid checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException;\n+\n+\t/**\n+\t * Check if value of login is permitted within the namespace.\n+\t * Returns FALSE, if login value is not permitted within the namespace (eg. matches system user)\n \t *\n-\t * @param loginAttribute login-namespace\n-\t * @throws WrongAttributeValueException\n+\t * Reserved login names can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t * If property for namespace is not found, then check is done against hardcoded defaults.\n+\t *\n+\t * You can define login exceptions, which override these reserved login names in the same file.\n+\t * This method returns TRUE for such exceptions.\n+\t * It is to support historically wrong values or specific exception within existing namespaces.\n+\t * @see #isLoginException(String, String)\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is permitted within the namespace / FALSE otherwise\n+\t */\n+\tboolean checkIfUserLoginIsPermitted(String namespace, String login);\n+\n+\t/**\n+\t * Return true, if login value is \"exception\" within its namespace rules.\n+\t * Eg. when syntax check normally doesn't allow such value, but its manually allowed here\n+\t * in order to support already existing (historic) wrong values.\n+\t * It can be defined for each namespace in /etc/perun/perun-namespaces.properties\n+\t *\n+\t * @param namespace Namespace to perform check in\n+\t * @param login Login to check\n+\t * @return TRUE if login value is within exceptions / FALSE otherwise\n \t */\n-\tvoid checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException;\n+\tboolean isLoginException(String namespace, String login);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MzEwOQ=="}, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTUyMDcyOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ModulesUtilsBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyMTo0NlrOGkQhMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMToyNVrOGkU9Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MjU2Mw==", "bodyText": "I was thinking about this method and also there would be better name something like \"isUserLoginPermitted\", because it returns true or false. Check is more like OK or Exception in our code.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440672563", "createdAt": "2020-06-16T08:21:46Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ModulesUtilsBlImpl.java", "diffHunk": "@@ -539,20 +540,66 @@ public void checkReservedUnixGroupNames(Attribute groupNameAttribute) throws Wro\n \t}\n \n \t@Override\n-\tpublic void checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException {\n-\t\tif(loginAttribute == null) return;\n+\tpublic void checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException {\n+\t\tUtils.notNull(namespace, \"namespace to check login syntax\");\n+\t\tUtils.notNull(login, \"login to check syntax for\");\n+\n \t\tcheckPerunNamespacesMap();\n \n-\t\tString unpermittedNames = perunNamespaces.get(loginAttribute.getFriendlyName() + \":reservedNames\");\n-\t\tif (unpermittedNames != null) {\n-\t\t\tList<String> unpermittedNamesList = Arrays.asList(unpermittedNames.split(\"\\\\s*,\\\\s*\"));\n-\t\t\tif (unpermittedNamesList.contains(loginAttribute.valueAsString()))\n-\t\t\t\tthrow new WrongAttributeValueException(loginAttribute, \"This login is not permitted.\");\n+\t\tString regex = perunNamespaces.get(\"login-namespace:\"+namespace+\":regex\");\n+\t\tif (regex != null) {\n+\t\t\t//Check if regex is valid\n+\t\t\ttry {\n+\t\t\t\tPattern.compile(regex);\n+\t\t\t} catch (PatternSyntaxException e) {\n+\t\t\t\tlog.error(\"Regex pattern \\\"{}\\\" from \\\"login-namespace:{}:regex\\\" property of perun-namespaces.properties file is invalid.\", regex, namespace);\n+\t\t\t\tthrow new InternalErrorException(\"Regex pattern \\\"\"+regex+\"\\\" from \\\"login-namespace:\"+namespace+\":regex\\\" property of perun-namespaces.properties file is invalid.\");\n+\t\t\t}\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif(!login.matches(regex) && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + regex +\"\\\"\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Regex property not found in our attribute map, so use the default hardcoded regex\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif (!defaultRegex.matcher(login).matches() && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + defaultRegex +\"\\\"\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkIfUserLoginIsPermitted(String namespace, String login) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NTIyNw==", "bodyText": "Renamed, makes sense.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440745227", "createdAt": "2020-06-16T10:21:25Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/ModulesUtilsBlImpl.java", "diffHunk": "@@ -539,20 +540,66 @@ public void checkReservedUnixGroupNames(Attribute groupNameAttribute) throws Wro\n \t}\n \n \t@Override\n-\tpublic void checkUnpermittedUserLogins(Attribute loginAttribute) throws WrongAttributeValueException {\n-\t\tif(loginAttribute == null) return;\n+\tpublic void checkLoginNamespaceRegex(String namespace, String login, Pattern defaultRegex) throws InvalidLoginException {\n+\t\tUtils.notNull(namespace, \"namespace to check login syntax\");\n+\t\tUtils.notNull(login, \"login to check syntax for\");\n+\n \t\tcheckPerunNamespacesMap();\n \n-\t\tString unpermittedNames = perunNamespaces.get(loginAttribute.getFriendlyName() + \":reservedNames\");\n-\t\tif (unpermittedNames != null) {\n-\t\t\tList<String> unpermittedNamesList = Arrays.asList(unpermittedNames.split(\"\\\\s*,\\\\s*\"));\n-\t\t\tif (unpermittedNamesList.contains(loginAttribute.valueAsString()))\n-\t\t\t\tthrow new WrongAttributeValueException(loginAttribute, \"This login is not permitted.\");\n+\t\tString regex = perunNamespaces.get(\"login-namespace:\"+namespace+\":regex\");\n+\t\tif (regex != null) {\n+\t\t\t//Check if regex is valid\n+\t\t\ttry {\n+\t\t\t\tPattern.compile(regex);\n+\t\t\t} catch (PatternSyntaxException e) {\n+\t\t\t\tlog.error(\"Regex pattern \\\"{}\\\" from \\\"login-namespace:{}:regex\\\" property of perun-namespaces.properties file is invalid.\", regex, namespace);\n+\t\t\t\tthrow new InternalErrorException(\"Regex pattern \\\"\"+regex+\"\\\" from \\\"login-namespace:\"+namespace+\":regex\\\" property of perun-namespaces.properties file is invalid.\");\n+\t\t\t}\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif(!login.matches(regex) && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + regex +\"\\\"\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Regex property not found in our attribute map, so use the default hardcoded regex\n+\t\t\t// check syntax or if its between exceptions\n+\t\t\tif (!defaultRegex.matcher(login).matches() && !isLoginException(namespace, login)) {\n+\t\t\t\tlog.warn(\"Login '{}' in {} namespace doesn't match regex: {}\", login, namespace, regex);\n+\t\t\t\tthrow new InvalidLoginException(\"Login doesn't matches expected regex: \\\"\" + defaultRegex +\"\\\"\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean checkIfUserLoginIsPermitted(String namespace, String login) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MjU2Mw=="}, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTUyOTY5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoyNDoxM1rOGkQm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMDo1NFrOGkU73A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NDAzNA==", "bodyText": "Why is this exception alone on the line?", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440674034", "createdAt": "2020-06-16T08:24:13Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java", "diffHunk": "@@ -1292,8 +1294,8 @@ public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String\n \tpublic RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, User sponsor)\n \t\t\tthrows InternalErrorException, PrivilegeException, AlreadyMemberException,\n \t\t\tLoginNotExistsException, PasswordCreationFailedException,\n-\t\tExtendMembershipException,\n-\t\t\tWrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException {\n+\t\t\tExtendMembershipException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NDkyNA==", "bodyText": "I aligned all exceptions in three rows.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440744924", "createdAt": "2020-06-16T10:20:54Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/entry/MembersManagerEntry.java", "diffHunk": "@@ -1292,8 +1294,8 @@ public void sendPasswordResetLinkEmail(PerunSession sess, Member member, String\n \tpublic RichMember createSponsoredMember(PerunSession session, Vo vo, String namespace, Map<String, String> name, String password, User sponsor)\n \t\t\tthrows InternalErrorException, PrivilegeException, AlreadyMemberException,\n \t\t\tLoginNotExistsException, PasswordCreationFailedException,\n-\t\tExtendMembershipException,\n-\t\t\tWrongAttributeValueException, ExtSourceNotExistsException, WrongReferenceAttributeValueException, UserNotInRoleException {\n+\t\t\tExtendMembershipException,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3NDAzNA=="}, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTU3NTM3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/EinfraPasswordManagerModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODozNTo1NlrOGkRD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMDozNlrOGkU7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTQ1Mg==", "bodyText": "Typo 'adn'.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440681452", "createdAt": "2020-06-16T08:35:56Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/EinfraPasswordManagerModule.java", "diffHunk": "@@ -19,10 +20,11 @@\n \n import java.io.IOException;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n /**\n- * Password manager for EINFRA login-namespace. It performs custom checks\n- * on password strength and login format.\n+ * Password manager for EINFRA login-namespace. It provides custom checks on login format\n+ * adn password strength. Also implementation for alternative passwords is customized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NDc1OA==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440744758", "createdAt": "2020-06-16T10:20:36Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/EinfraPasswordManagerModule.java", "diffHunk": "@@ -19,10 +20,11 @@\n \n import java.io.IOException;\n import java.util.Map;\n+import java.util.regex.Pattern;\n \n /**\n- * Password manager for EINFRA login-namespace. It performs custom checks\n- * on password strength and login format.\n+ * Password manager for EINFRA login-namespace. It provides custom checks on login format\n+ * adn password strength. Also implementation for alternative passwords is customized.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4MTQ1Mg=="}, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTYxMTI2OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/GenericPasswordManagerModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODo0NTowOFrOGkRauQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoyMzowMlrOGkVAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzI4OQ==", "bodyText": "I am not sure what does this comment mean.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440687289", "createdAt": "2020-06-16T08:45:08Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/GenericPasswordManagerModule.java", "diffHunk": "@@ -55,64 +64,65 @@ public void setActualLoginNamespace(String actualLoginNamespace) {\n \t}\n \n \t@Override\n-\tpublic Map<String, String> generateAccount(PerunSession session, Map<String, String> parameters) throws InternalErrorException {\n+\tpublic Map<String, String> generateAccount(PerunSession sess, Map<String, String> parameters) {\n \t\t// account generation is not supported\n \t\treturn null;\n \t}\n \n \t@Override\n-\tpublic void reservePassword(PerunSession session, String userLogin, String password) throws InternalErrorException {\n-\t\tif (StringUtils.isBlank(password)) {\n-\t\t\tthrow new EmptyPasswordRuntimeException(\"Password for \" + actualLoginNamespace + \":\" + userLogin + \" cannot be empty.\");\n-\t\t}\n+\tpublic void reservePassword(PerunSession sess, String userLogin, String password) throws InvalidLoginException, PasswordStrengthException {\n+\t\tcheckLoginFormat(sess, userLogin);\n+\t\tcheckPasswordStrength(sess, userLogin, password);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE, actualLoginNamespace, userLogin);\n \t\tsendPassword(process, password);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n-\tpublic void reserveRandomPassword(PerunSession session, String userLogin) throws InternalErrorException {\n+\tpublic void reserveRandomPassword(PerunSession sess, String userLogin) throws InvalidLoginException {\n+\t\tcheckLoginFormat(sess, userLogin);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE_RANDOM, actualLoginNamespace, userLogin);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n \tpublic void checkPassword(PerunSession sess, String userLogin, String password) {\n+\t\t// use custom check instead of strength, since this is about empty input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0NjEyNw==", "bodyText": "I rephrase that. Basically we must not check password strength here, since we check \"old\" possibly weaker password. We just must make sure, that input is not empty.", "url": "https://github.com/CESNET/perun/pull/2737#discussion_r440746127", "createdAt": "2020-06-16T10:23:02Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/pwdmgr/GenericPasswordManagerModule.java", "diffHunk": "@@ -55,64 +64,65 @@ public void setActualLoginNamespace(String actualLoginNamespace) {\n \t}\n \n \t@Override\n-\tpublic Map<String, String> generateAccount(PerunSession session, Map<String, String> parameters) throws InternalErrorException {\n+\tpublic Map<String, String> generateAccount(PerunSession sess, Map<String, String> parameters) {\n \t\t// account generation is not supported\n \t\treturn null;\n \t}\n \n \t@Override\n-\tpublic void reservePassword(PerunSession session, String userLogin, String password) throws InternalErrorException {\n-\t\tif (StringUtils.isBlank(password)) {\n-\t\t\tthrow new EmptyPasswordRuntimeException(\"Password for \" + actualLoginNamespace + \":\" + userLogin + \" cannot be empty.\");\n-\t\t}\n+\tpublic void reservePassword(PerunSession sess, String userLogin, String password) throws InvalidLoginException, PasswordStrengthException {\n+\t\tcheckLoginFormat(sess, userLogin);\n+\t\tcheckPasswordStrength(sess, userLogin, password);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE, actualLoginNamespace, userLogin);\n \t\tsendPassword(process, password);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n-\tpublic void reserveRandomPassword(PerunSession session, String userLogin) throws InternalErrorException {\n+\tpublic void reserveRandomPassword(PerunSession sess, String userLogin) throws InvalidLoginException {\n+\t\tcheckLoginFormat(sess, userLogin);\n \t\tProcess process = createPwdManagerProcess(PASSWORD_RESERVE_RANDOM, actualLoginNamespace, userLogin);\n \t\thandleExit(process, actualLoginNamespace, userLogin);\n \t}\n \n \t@Override\n \tpublic void checkPassword(PerunSession sess, String userLogin, String password) {\n+\t\t// use custom check instead of strength, since this is about empty input", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY4NzI4OQ=="}, "originalCommit": {"oid": "eb28bc5e523d6260a35a673a29f7018b6da26aa7"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1882, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}