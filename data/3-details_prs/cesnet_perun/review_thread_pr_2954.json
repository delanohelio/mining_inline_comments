{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNTU3MDgy", "number": 2954, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyODoyOFrOEzMNDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0ODoyM1rOEzuATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTEyNzgxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyODoyOFrOHqRAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxNzo0NlrOHqd_eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4MDgyNA==", "bodyText": "You should add VOADMIN too.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514080824", "createdAt": "2020-10-29T08:28:28Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "diffHunk": "@@ -7229,6 +7229,30 @@ protected void initialize() {\n \t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n \t\tattributes.put(attr, rights);\n \n+\t\t//urn:perun:vo:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to vo) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+\t\tattributes.put(attr, rights);\n+\n+\t\t//urn:perun:group:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to group) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MzYyNg==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514293626", "createdAt": "2020-10-29T14:17:46Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "diffHunk": "@@ -7229,6 +7229,30 @@ protected void initialize() {\n \t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n \t\tattributes.put(attr, rights);\n \n+\t\t//urn:perun:vo:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to vo) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+\t\tattributes.put(attr, rights);\n+\n+\t\t//urn:perun:group:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to group) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4MDgyNA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTE3ODEzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0MjoxMFrOHqRejw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozMDozMFrOHqXlcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4ODU5MQ==", "bodyText": "I would also add here rights for the vo admin:\nrights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514088591", "createdAt": "2020-10-29T08:42:10Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "diffHunk": "@@ -7229,6 +7229,30 @@ protected void initialize() {\n \t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n \t\tattributes.put(attr, rights);\n \n+\t\t//urn:perun:vo:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to vo) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+\t\tattributes.put(attr, rights);\n+\n+\t\t//urn:perun:group:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to group) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4ODY1OA==", "bodyText": "Rights have been added", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514188658", "createdAt": "2020-10-29T11:30:30Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AttributesManagerBlImpl.java", "diffHunk": "@@ -7229,6 +7229,30 @@ protected void initialize() {\n \t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n \t\tattributes.put(attr, rights);\n \n+\t\t//urn:perun:vo:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to vo) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.VOADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));\n+\t\tattributes.put(attr, rights);\n+\n+\t\t//urn:perun:group:attribute-def:def:applicationExpirationRules\n+\t\tattr = new AttributeDefinition();\n+\t\tattr.setDisplayName(\"Application expiration rules\");\n+\t\tattr.setFriendlyName(\"applicationExpirationRules\");\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setDescription(\"Set of rules to determine date of application (to group) expiration. If not set, application will not be auto rejected.\");\n+\t\tattr.setType(LinkedHashMap.class.getName());\n+\t\t//set attribute rights (with dummy id of attribute - not known yet)\n+\t\trights = new ArrayList<>();\n+\t\trights.add(new AttributeRights(-1, Role.GROUPADMIN, Arrays.asList(ActionType.READ, ActionType.WRITE)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4ODU5MQ=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTIxMzgwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1MTozMlrOHqR0Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozNzo1NlrOHqX0fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDEzOQ==", "bodyText": "This name should match the name of the module.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tattr.setFriendlyName(\"groupApplicationAutoExpirationRules\");\n          \n          \n            \n            \t\tattr.setFriendlyName(\"applicationExpirationRules\");", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514094139", "createdAt": "2020-10-29T08:51:32Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_group_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Group> implements GroupAttributesModuleImplApi {\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Group group, AttributeDefinition attribute) throws WrongAttributeAssignmentException {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, group, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"groupApplicationAutoExpirationRules\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MjUxMA==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514192510", "createdAt": "2020-10-29T11:37:56Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_group_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Group> implements GroupAttributesModuleImplApi {\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Group group, AttributeDefinition attribute) throws WrongAttributeAssignmentException {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, group, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"groupApplicationAutoExpirationRules\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDEzOQ=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTIxNzk2OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1MjozMFrOHqR2mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozODo1OFrOHqX2dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDc0NA==", "bodyText": "You can remove this if you don't use it.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514094744", "createdAt": "2020-10-29T08:52:30Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.VoAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_vo_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Vo> implements VoAttributesModuleImplApi {\n+\n+\t//public static final String VO_APPLICATION_AUTO_EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":applicationAutoExpirationRules\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzAxMw==", "bodyText": "Comment has been removed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514193013", "createdAt": "2020-10-29T11:38:58Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.VoAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_vo_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Vo> implements VoAttributesModuleImplApi {\n+\n+\t//public static final String VO_APPLICATION_AUTO_EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":applicationAutoExpirationRules\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDc0NA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTIxODcwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo1Mjo0M1rOHqR3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozODowNlrOHqX0yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tattr.setFriendlyName(\"voApplicationExpirationRules\");\n          \n          \n            \n            \t\tattr.setFriendlyName(\"applicationExpirationRules\");", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514094866", "createdAt": "2020-10-29T08:52:43Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.VoAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_vo_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Vo> implements VoAttributesModuleImplApi {\n+\n+\t//public static final String VO_APPLICATION_AUTO_EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":applicationAutoExpirationRules\";\n+\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Vo vo, AttributeDefinition attribute) {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Vo vo, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, vo, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Vo vo, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Vo vo, Attribute attribute) {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"voApplicationExpirationRules\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MjU4Ng==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514192586", "createdAt": "2020-10-29T11:38:06Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_vo_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Vo;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.VoAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_vo_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Vo> implements VoAttributesModuleImplApi {\n+\n+\t//public static final String VO_APPLICATION_AUTO_EXPIRATION_RULES_ATTR = AttributesManager.NS_VO_ATTR_DEF + \":applicationAutoExpirationRules\";\n+\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Vo vo, AttributeDefinition attribute) {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Vo vo, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, vo, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Vo vo, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Vo vo, Attribute attribute) {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_VO_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"voApplicationExpirationRules\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5NDg2Ng=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTI4MjE5OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOTowOTowN1rOHqSdsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxMTo1NFrOHqdt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNDc1NQ==", "bodyText": "I think the attribute will always be not null. You should instead check its value:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (expiration != null) {\n          \n          \n            \n            \t\t\tif (expiration.getValue() != null) {", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514104755", "createdAt": "2020-10-29T09:09:07Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4OTEzMw==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514289133", "createdAt": "2020-10-29T14:11:54Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNDc1NQ=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTI5MjEyOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxMTozNFrOHqSjqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxMTozNFrOHqSjqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNjI4Mw==", "bodyText": "Same here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (expiration != null) {\n          \n          \n            \n            \t\t\tif (expiration.getValue() != null) {", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514106283", "createdAt": "2020-10-29T09:11:34Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTI5ODUwOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxMzoxMVrOHqSnpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxMjoyNlrOHqdvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNzMwMg==", "bodyText": "For enums, you can compare values directly:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (application.getState().toString().equals(\"NEW\")) {\n          \n          \n            \n            \t\t\tif (application.getState() == AppState.NEW)) {", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514107302", "createdAt": "2020-10-29T09:13:11Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4OTU1OQ==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514289559", "createdAt": "2020-10-29T14:12:26Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwNzMwMg=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTMwNjA4OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxNTowMFrOHqSsJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNjoxN1rOHqgWgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwODQ1NA==", "bodyText": "I think there might be a problem with the localization of the message. Some applications support also the Czech language. But I am not sure how to exactly solve this. @zlamalp any ideas?", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514108454", "createdAt": "2020-10-29T09:15:00Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMjI4OQ==", "bodyText": "You would have to resolve preferred language of the user (if it is available) or from the application form data. Otherwise we should fallback to the english. Its done for registrar mails in MailManagerImpl.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514332289", "createdAt": "2020-10-29T15:06:17Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwODQ1NA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTMxMzY5OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxNjo1NlrOHqSw8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMjo0MDowNlrOHqZ5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwOTY4Mg==", "bodyText": "I think you should put this in an else branch for the if checking the application state.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514109682", "createdAt": "2020-10-29T09:16:56Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(createdAt)) {\n+\t\t\t\tregistrarManager.rejectApplication(sess ,application.getId(), \"Application with id \" +\n+\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwNjAxNg==", "bodyText": "But I think that the second parameter of attribute shouldn't depend on application state. So I think that should be possible to set only second value of attribute and then we couldn't check it only in else branch.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514206016", "createdAt": "2020-10-29T12:03:26Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(createdAt)) {\n+\t\t\t\tregistrarManager.rejectApplication(sess ,application.getId(), \"Application with id \" +\n+\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwOTY4Mg=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIyNjQ4NQ==", "bodyText": "You are right, I forget that we want this for all states.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514226485", "createdAt": "2020-10-29T12:40:06Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(createdAt)) {\n+\t\t\t\tregistrarManager.rejectApplication(sess ,application.getId(), \"Application with id \" +\n+\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDEwOTY4Mg=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTMxNzYzOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxODowNlrOHqSzeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxMzo1MFrOHqdz2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMDMzMA==", "bodyText": "You are missing here a comment about what the method does.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514110330", "createdAt": "2020-10-29T09:18:06Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -686,4 +757,62 @@ private AttributeDefinition setUpGroupMembershipExpirationAttribute() throws Exc\n \n \t\treturn perun.getAttributesManager().createAttribute(session, attr);\n \t}\n+\n+\t/**\n+\t * Converts object ApplicationFormItemWithPrefillValue to ApplicationFormItemData\n+\t *\n+\t * @param object ApplicationFormItemWithPrefilledValue to convert\n+\t * @return converted object ApplicationFormItemData\n+\t */\n+\tprivate ApplicationFormItemData convertAppFormItemWithPrefValToAppFormItemData(ApplicationFormItemWithPrefilledValue object) {\n+\t\treturn new ApplicationFormItemData(object.getFormItem(), object.getFormItem().getShortname(), \"\", \"0\");\n+\t}\n+\n+\t/**\n+\t *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDY1MA==", "bodyText": "Comment has been added", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514290650", "createdAt": "2020-10-29T14:13:50Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -686,4 +757,62 @@ private AttributeDefinition setUpGroupMembershipExpirationAttribute() throws Exc\n \n \t\treturn perun.getAttributesManager().createAttribute(session, attr);\n \t}\n+\n+\t/**\n+\t * Converts object ApplicationFormItemWithPrefillValue to ApplicationFormItemData\n+\t *\n+\t * @param object ApplicationFormItemWithPrefilledValue to convert\n+\t * @return converted object ApplicationFormItemData\n+\t */\n+\tprivate ApplicationFormItemData convertAppFormItemWithPrefValToAppFormItemData(ApplicationFormItemWithPrefilledValue object) {\n+\t\treturn new ApplicationFormItemData(object.getFormItem(), object.getFormItem().getShortname(), \"\", \"0\");\n+\t}\n+\n+\t/**\n+\t *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMDMzMA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTMyNDA5OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToxOTozOVrOHqS3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxNjozMlrOHqd79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMTMzMg==", "bodyText": "This deserves comment on why you have to do it.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514111332", "createdAt": "2020-10-29T09:19:39Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MjcyNg==", "bodyText": "Comment has been added (and also removed with group creating to private method )", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514292726", "createdAt": "2020-10-29T14:16:32Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMTMzMg=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTY4Mjg3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1Mzo1NFrOHqWXrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxODoxMFrOHqeAgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2ODc1MA==", "bodyText": "I would remove \"Group\" and use only \"Application auto expiration rules\", same for the VO attribute, since those attributes won't be shown together in GUI and will be related only to the displayed/managed entity. Also you have without it in AttributesManagerBlImpl init method.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514168750", "createdAt": "2020-10-29T10:53:54Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_group_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Group> implements GroupAttributesModuleImplApi {\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Group group, AttributeDefinition attribute) throws WrongAttributeAssignmentException {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, group, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"groupApplicationAutoExpirationRules\");\n+\t\tattr.setDisplayName(\"Group application auto expiration rules\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5Mzg5MA==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514293890", "createdAt": "2020-10-29T14:18:10Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_applicationExpirationRules.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.AbstractApplicationExpirationRulesModule;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.util.LinkedHashMap;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public class urn_perun_group_attribute_def_def_applicationExpirationRules extends AbstractApplicationExpirationRulesModule<Group> implements GroupAttributesModuleImplApi {\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl perunSession, Group group, AttributeDefinition attribute) throws WrongAttributeAssignmentException {\n+\t\treturn new Attribute(attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeValueException {\n+\t\tsuper.checkAttributeSyntax(perunSession, group, attribute);\n+\t}\n+\n+\t@Override\n+\tpublic void checkAttributeSemantics(PerunSessionImpl perunSession, Group group, Attribute attribute) throws WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic void changedAttributeHook(PerunSessionImpl session, Group group, Attribute attribute) throws WrongReferenceAttributeValueException {\n+\n+\t}\n+\n+\t@Override\n+\tpublic AttributeDefinition getAttributeDefinition() {\n+\t\tAttributeDefinition attr = new AttributeDefinition();\n+\t\tattr.setNamespace(AttributesManager.NS_GROUP_ATTR_DEF);\n+\t\tattr.setFriendlyName(\"groupApplicationAutoExpirationRules\");\n+\t\tattr.setDisplayName(\"Group application auto expiration rules\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2ODc1MA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTcwNTg4OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractApplicationExpirationRulesModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTowMDowOVrOHqWlsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoxOToyNFrOHqeD_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3MjMzOQ==", "bodyText": "I believe attribute.valueAsMap() wouldn't throw a null pointer, since you can cast null to any type. You could simplify it like this:\nMap<String, String> attrValue = attribute.valueAsMap();\n\nif (attrValue == null || attrValue.isEmpty()) return;", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514172339", "createdAt": "2020-10-29T11:00:09Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractApplicationExpirationRulesModule.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package cz.metacentrum.perun.core.implApi.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public abstract class AbstractApplicationExpirationRulesModule<T extends PerunBean> extends AttributesModuleAbstract implements AttributesModuleImplApi {\n+\tpublic static final String applicationWaitingForEmailVerificationKeyName = \"emailVerification\";\n+\tpublic static final String applicationIgnoredByAdminKeyName = \"ignoredByAdmin\";\n+\tprivate static final Pattern daysToExpirationPattern = Pattern.compile(\"^\\\\d+$\");\n+\n+\tpublic void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attribute) throws WrongAttributeValueException {\n+\n+\t\tMap<String, String> attrValue;\n+\n+\t\t//For no value is correct (it means no rules)\n+\t\tif (attribute.getValue() == null) return;\n+\n+\t\t//save value to map attrValue\n+\t\tattrValue = attribute.valueAsMap();\n+\n+\t\t//Same for empty HashList\n+\t\tif (attrValue.isEmpty()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5NDc4Mg==", "bodyText": "Simplified", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514294782", "createdAt": "2020-10-29T14:19:24Z", "author": {"login": "HejdaJakub"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/modules/attributes/AbstractApplicationExpirationRulesModule.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package cz.metacentrum.perun.core.implApi.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.PerunBean;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeValueException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * @author Jakub Hejda <Jakub.Hejda@cesnet.cz>\n+ */\n+public abstract class AbstractApplicationExpirationRulesModule<T extends PerunBean> extends AttributesModuleAbstract implements AttributesModuleImplApi {\n+\tpublic static final String applicationWaitingForEmailVerificationKeyName = \"emailVerification\";\n+\tpublic static final String applicationIgnoredByAdminKeyName = \"ignoredByAdmin\";\n+\tprivate static final Pattern daysToExpirationPattern = Pattern.compile(\"^\\\\d+$\");\n+\n+\tpublic void checkAttributeSyntax(PerunSessionImpl sess, T entity, Attribute attribute) throws WrongAttributeValueException {\n+\n+\t\tMap<String, String> attrValue;\n+\n+\t\t//For no value is correct (it means no rules)\n+\t\tif (attribute.getValue() == null) return;\n+\n+\t\t//save value to map attrValue\n+\t\tattrValue = attribute.valueAsMap();\n+\n+\t\t//Same for empty HashList\n+\t\tif (attrValue.isEmpty()) return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3MjMzOQ=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTczMzQ4OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTowNzo1OFrOHqW28Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDoyMTo1NlrOHqeLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3Njc1Mw==", "bodyText": "I would prefer having getter/setter and put @Autowired above the setter. Also please specify it in perun-registrar-lib.xml in bean definition.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514176753", "createdAt": "2020-10-29T11:07:58Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -102,6 +106,9 @@ public void setPerun(PerunBl perun) {\n \tpublic ExpirationNotifScheduler() {\n \t}\n \n+\t@Autowired\n+\tprivate RegistrarManager registrarManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5NjcwNA==", "bodyText": "Ok, I changed it like you write above", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514296704", "createdAt": "2020-10-29T14:21:56Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -102,6 +106,9 @@ public void setPerun(PerunBl perun) {\n \tpublic ExpirationNotifScheduler() {\n \t}\n \n+\t@Autowired\n+\tprivate RegistrarManager registrarManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3Njc1Mw=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTc0OTA0OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToxMjoyMVrOHqXAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMTowMFrOHqgGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3OTE5Mw==", "bodyText": "Generally it would be better to try/catch exceptions on each application rejection rather than the bulk of them or all vos. Like this, one exception will discard processing of all other applications, vos and groups.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514179193", "createdAt": "2020-10-29T11:12:21Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMDQyNA==", "bodyText": "The rejection process is in method rejectExpiredApplications so I added try/catch block here. Is it what you meant?", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514300424", "createdAt": "2020-10-29T14:26:41Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3OTE5Mw=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyODI1Mw==", "bodyText": "Yes, thank you.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514328253", "createdAt": "2020-10-29T15:01:00Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE3OTE5Mw=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTc3OTkzOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyMToyOVrOHqXTKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMDo0NVrOHqemww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4Mzk3Ng==", "bodyText": "You seem to provide the same rejection message ending (rejected because of expiration rules set for Vo.) for both VO and Group use-case. You can get Vo and Group objects from the Application (group is null for vo applications) and eg. provide entity name in the message, since application ID is generally meaningless to the user, who might even forgot he registered somewhere.\nYou should also state for the user, if it was rejected, because admin didn't do it in the timely manner, or it was users fault, he forgot to verify his mail address.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514183976", "createdAt": "2020-10-29T11:21:29Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwMzY4Mw==", "bodyText": "Yes, I forgot about it. Thanks! Now it should be ok.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514303683", "createdAt": "2020-10-29T14:30:45Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4Mzk3Ng=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTgwNzAwOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyOToyOFrOHqXjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0Mjo1NFrOHqiJlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4ODExMA==", "bodyText": "You should \"continue\" in the cycle after first rejection above, since code here and below might be applied to the same application object you already processed and would fail on \"already rejected\" kind of exception.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514188110", "createdAt": "2020-10-29T11:29:28Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MTc0OQ==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514361749", "createdAt": "2020-10-29T15:42:54Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4ODExMA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTgxMjQ1OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozMTowNVrOHqXmhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMToyMFrOHqeowA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4ODkzNA==", "bodyText": "We might want to compute the time against modified_at in this case, since created_at is about NEW applications, and vo manager can't even approve such applications.\nExpected time for admin reaction/approval would be shortened like this by the time it took the user to verify his application.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514188934", "createdAt": "2020-10-29T11:31:05Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(createdAt)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNDE5Mg==", "bodyText": "Changed", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514304192", "createdAt": "2020-10-29T14:31:20Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +378,82 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) throws PerunException {\n+\t\tMap<String, String> attrValue = expiration.valueAsMap();\n+\t\tfor(Application application : applications) {\n+\t\t\tString date = application.getCreatedAt();\n+\t\t\tLocalDate createdAt = LocalDate.parse(date.substring(0, 10));\n+\t\t\tLocalDate now = getCurrentLocalDate();\n+\t\t\tif (application.getState().toString().equals(\"NEW\")) {\n+\t\t\t\tint expirationAppWaitingForEmail = Integer.parseInt(attrValue.get(\"emailVerification\"));\n+\t\t\t\tif (now.minusDays(expirationAppWaitingForEmail).isAfter(createdAt)) {\n+\t\t\t\t\tregistrarManager.rejectApplication(sess, application.getId(), \"Application with id \" +\n+\t\t\t\t\t\tapplication.getId() + \" was auto rejected because of expiration rules set for Vo.\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tint expirationAppIgnoredByAdmin = Integer.parseInt(attrValue.get(\"ignoredByAdmin\"));\n+\t\t\tif (now.minusDays(expirationAppIgnoredByAdmin).isAfter(createdAt)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4ODkzNA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTgzNzM2OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozODoyNlrOHqX1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1ODo0OFrOHqf_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mjc1MA==", "bodyText": "I don't get that. This deletes all vo and group applications of that VO. Shouldn't each test have own rollbacked transaction? Why do you do this?", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514192750", "createdAt": "2020-10-29T11:38:26Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwMjU2Mg==", "bodyText": "This is actually necessary because the HSQLDB has a slightly different schema. In the regular postgres.sql we have:\ncreate unique index applform_u1 on application_form (vo_id) where group_id is null;\ncreate unique index applform_u2 on application_form (vo_id, group_id) where group_id is not null;\n\nBut in the test-schema.sql:\ncreate unique index applform_u1 on application_form (vo_id);\ncreate unique index applform_u2 on application_form (vo_id, group_id);\n\nIt seems that HSQLDB doesn't support the where condition. Because of that, in tests, there can be only a single application form across the whole Vo and its groups.\nSo, to create an application form in a group, you have to delete the form for its vo.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514202562", "createdAt": "2020-10-29T11:57:06Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mjc1MA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIwMjk4Ng==", "bodyText": "I couldn't figure out a better solution, so I suggested this workaround for now.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514202986", "createdAt": "2020-10-29T11:57:53Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mjc1MA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNjQxMw==", "bodyText": "Wow, didn't know that. Maybe this note should be in the test method and it should be called only for HSQLDB, since we sometime run tests against real DB, where this condition doesn't apply.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514326413", "createdAt": "2020-10-29T14:58:48Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mjc1MA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg0MTMzOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozOTo0NFrOHqX4Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMzowOFrOHqeuGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQxOA==", "bodyText": "I would prefer only passing expected VO in the list. Otherwise it would process all VOs in the DB. We sometimes run tests against non-empty devel DB.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514193418", "createdAt": "2020-10-29T11:39:44Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNTU2Mg==", "bodyText": "Changed to singleton list of expected vo", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514305562", "createdAt": "2020-10-29T14:33:08Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +239,70 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());\n+\n+\t\tGroup group = new Group();\n+\t\tgroup.setName(\"Group for apply\");\n+\t\tperun.getGroupsManagerBl().createGroup(session, vo, group);\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", perun.getVosManagerBl().getVos(session));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQxOA=="}, "originalCommit": {"oid": "882c6c35ed697736bf388c18b079204074f40cb7"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDAyMDIwOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoxNzoyNlrOHqtDpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzowMzo1M1rOHrDTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDQ1NQ==", "bodyText": "We no longer throw PerunException.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514540455", "createdAt": "2020-10-29T20:17:26Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +382,102 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNDkyNA==", "bodyText": "Javadoc has been edited", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514904924", "createdAt": "2020-10-30T07:03:53Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +382,102 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then\n+\t * reject it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t * @throws PerunException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDQ1NQ=="}, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDAyMzMxOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoxODoyOVrOHqtFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzowNDoyN1rOHrDUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDk2OA==", "bodyText": "We now check against last modification timestamp, not creation day of application. Only for NEW applications, modified_at and created_at should be equal.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514540968", "createdAt": "2020-10-29T20:18:29Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +382,102 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNTEzMQ==", "bodyText": "Also edited", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514905131", "createdAt": "2020-10-30T07:04:27Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +382,102 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares creation day of application to values in expiration attribute and if find expired application, then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MDk2OA=="}, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDAzNTYzOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyMjowN1rOHqtM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDo0NDoxNFrOHqt8Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjgyMw==", "bodyText": "Probably not as a part of this pull-request, but we should really implement specific methods to get only such VOs and Groups, where there are expiration rules defined and which have some unprocessed applications.\nLike this we are checking too much vos/group (like on BBMRI there is cca 6000 groups, but only a few have applications).\nAlso I feel like we should split this. We can have own class for application expiration and trigger it separately from the member expiration logic.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514542823", "createdAt": "2020-10-29T20:22:07Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -321,6 +332,20 @@ public void checkMembersState() {\n \t\t\tlog.error(\"Synchronizer: checkMembersState, attribute name is from wrong namespace.\", e);\n \t\t}\n \n+\t\t// check applications expiration in vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0ODE1Nw==", "bodyText": "I agree with both. But I am not sure we can now get attributes for entites where the attribute is set(at least I dont know about such metod?).\nAlso, there is a lot of things happenening in this class and it would be definitely worth splitting it up.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514548157", "createdAt": "2020-10-29T20:31:43Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -321,6 +332,20 @@ public void checkMembersState() {\n \t\t\tlog.error(\"Synchronizer: checkMembersState, attribute name is from wrong namespace.\", e);\n \t\t}\n \n+\t\t// check applications expiration in vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjgyMw=="}, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1NDkxNA==", "bodyText": "There isn't such generic method, but if we split this logic, we can simply add new specific query method to get us just what we want - like when we get only members with expiration relative to passed date in the membership expiration logic.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514554914", "createdAt": "2020-10-29T20:44:14Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -321,6 +332,20 @@ public void checkMembersState() {\n \t\t\tlog.error(\"Synchronizer: checkMembersState, attribute name is from wrong namespace.\", e);\n \t\t}\n \n+\t\t// check applications expiration in vos\n+\t\ttry {\n+\t\t\tvoApplicationsAutoRejection(vos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0MjgyMw=="}, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDA1NjI5OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDoyODoxNlrOHqtZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzowODo1MFrOHrDZdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NjA5Mw==", "bodyText": "I forgot to mention, that you should call this only for HSQLDB, since it doesn't apply to the Postgres DB. See Compatibility.isHSQLDB().", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514546093", "createdAt": "2020-10-29T20:28:16Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -686,4 +751,81 @@ private AttributeDefinition setUpGroupMembershipExpirationAttribute() throws Exc\n \n \t\treturn perun.getAttributesManager().createAttribute(session, attr);\n \t}\n+\n+\t/**\n+\t * In test DB in application_form is created unique index for vo_id without dependency on group_id, so if you\n+\t * want to create application form for group, firstly you have to delete automatically created form for Vo.\n+\t * Then method creates new group.\n+\t *\n+\t * @return created group\n+\t * @throws GroupExistsException\n+\t */\n+\tprivate Group deleteApplicationFormAndCreateGroup() throws GroupExistsException {\n+\t\t// delete automatically created form for Vo\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNjQ4NQ==", "bodyText": "It's true! So edited", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514906485", "createdAt": "2020-10-30T07:08:50Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -686,4 +751,81 @@ private AttributeDefinition setUpGroupMembershipExpirationAttribute() throws Exc\n \n \t\treturn perun.getAttributesManager().createAttribute(session, attr);\n \t}\n+\n+\t/**\n+\t * In test DB in application_form is created unique index for vo_id without dependency on group_id, so if you\n+\t * want to create application form for group, firstly you have to delete automatically created form for Vo.\n+\t * Then method creates new group.\n+\t *\n+\t * @return created group\n+\t * @throws GroupExistsException\n+\t */\n+\tprivate Group deleteApplicationFormAndCreateGroup() throws GroupExistsException {\n+\t\t// delete automatically created form for Vo\n+\t\tjdbc.update(\"DELETE from application_form WHERE vo_id = ?\", vo.getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU0NjA5Mw=="}, "originalCommit": {"oid": "c1c8fb87a8204ccae6bcaf5adc4b11f690534331"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY1Nzg4OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0NjoyMlrOHrHxpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0NjoyMlrOHrHxpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3ODIxMg==", "bodyText": "This doesn't have to be part of this PR, but this method would deserve to be split into multiple methods. With so many indentations, it isn't easy to navigate in it.", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514978212", "createdAt": "2020-10-30T09:46:22Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/ExpirationNotifScheduler.java", "diffHunk": "@@ -357,6 +382,101 @@ private void checkVoMembersState(List<Vo> vos) throws WrongAttributeAssignmentEx\n \t\texpireSponsorships();\n \t}\n \n+\t/**\n+\t * Checks all applications for given vos and if some application is expired (according to expiration rules set by\n+\t * VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void voApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tfor (Vo vo : vos) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, vo, A_VO_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForVo(sess, vo, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets all existing groups and then checks all applications for this groups and if some application is expired\n+\t * (according to expiration rules set by VO Manager), then rejects this application.\n+\t *\n+\t * @param vos virtual organizations\n+\t * @throws PerunException\n+\t */\n+\tprivate void groupApplicationsAutoRejection(List<Vo> vos) throws PerunException {\n+\t\tList<String> states = new ArrayList<>();\n+\t\tstates.add(\"NEW\");\n+\t\tstates.add(\"VERIFIED\");\n+\n+\t\tList<Group> groups = new ArrayList<>();\n+\t\tfor (Vo vo : vos) {\n+\t\t\tgroups.addAll(perun.getGroupsManagerBl().getGroups(sess, vo));\n+\t\t}\n+\n+\t\tfor (Group group : groups) {\n+\t\t\tAttribute expiration = perun.getAttributesManagerBl().getAttribute(sess, group, A_GROUP_APP_EXP_RULES);\n+\t\t\tif (expiration.getValue() != null) {\n+\t\t\t\tList<Application> applications = registrarManager.getApplicationsForGroup(sess, group, states);\n+\t\t\t\trejectExpiredApplications(applications, expiration);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Compares date of last modification of application to values in expiration attribute and if finds expired application, then\n+\t * rejects it.\n+\t *\n+\t * @param applications applications\n+\t * @param expiration attribute with number of days to application expiration\n+\t */\n+\tprivate void rejectExpiredApplications (List<Application> applications, Attribute expiration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01748ece49e002c2abe9877c69a86fdf08f7e85e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY2NTI2OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0ODoxNFrOHrH14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoxMToyMlrOHrIm9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTI5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n          \n          \n            \n            \t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationShouldNotBeAutoRejected\");", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514979299", "createdAt": "2020-10-30T09:48:14Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +242,62 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tGroup group = deleteApplicationFormAndCreateGroup();\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01748ece49e002c2abe9877c69a86fdf08f7e85e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5MTg2Mg==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514991862", "createdAt": "2020-10-30T10:11:22Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +242,62 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n+\n+\t\tGroup group = deleteApplicationFormAndCreateGroup();\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, group, GROUP_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"groupApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\t@Test\n+\tpublic void checkGroupApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTI5OQ=="}, "originalCommit": {"oid": "01748ece49e002c2abe9877c69a86fdf08f7e85e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjY2NTcyOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo0ODoyM1rOHrH2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoxMToyN1rOHrInKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");\n          \n          \n            \n            \t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationShouldBeAutoRejected\");", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514979387", "createdAt": "2020-10-30T09:48:23Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +242,62 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01748ece49e002c2abe9877c69a86fdf08f7e85e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5MTkxNA==", "bodyText": "Done", "url": "https://github.com/CESNET/perun/pull/2954#discussion_r514991914", "createdAt": "2020-10-30T10:11:27Z", "author": {"login": "HejdaJakub"}, "path": "perun-registrar-lib/src/test/java/cz/metacentrum/perun/registrar/ExpirationNotifSchedulerTest.java", "diffHunk": "@@ -232,6 +242,62 @@ public void checkMembersState() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void checkVoApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(70, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application should be rejected.\", returnedApp.getState(), Application.AppState.REJECTED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkVoApplicationShouldNotBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkVoApplicationShouldNotBeAutoRejected\");\n+\n+\t\tApplication submitApp = setUpAndSubmitAppForPotentialAutoRejection(50, null, VO_APP_EXP_RULES);\n+\n+\t\tReflectionTestUtils.invokeMethod(spyScheduler, \"voApplicationsAutoRejection\", Collections.singletonList(vo));\n+\n+\t\t// check results\n+\t\tApplication returnedApp = registrarManager.getApplicationById(session, submitApp.getId());\n+\t\tassertEquals(\"Application shouldn't be rejected.\", returnedApp.getState(), Application.AppState.VERIFIED);\n+\t}\n+\n+\t@Test\n+\tpublic void checkGroupApplicationShouldBeAutoRejected() throws Exception {\n+\t\tSystem.out.println(CLASS_NAME + \"checkGroupApplicationAutoRejection\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk3OTM4Nw=="}, "originalCommit": {"oid": "01748ece49e002c2abe9877c69a86fdf08f7e85e"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2361, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}