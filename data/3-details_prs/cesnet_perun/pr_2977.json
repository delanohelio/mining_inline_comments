{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzYyNzcz", "number": 2977, "title": "General getAdmins methods", "bodyText": "Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\npossible to configure the acces rights.\nAccess rights are stored in perun-roles.yml under the\nrole_management_rules->privileged_roles_to_read.\nSimilar methods in other managers were not converted to this general\napproach yet. It will be done in a small separate PR so this one is not\ntoo complex.", "createdAt": "2020-11-10T09:52:50Z", "url": "https://github.com/CESNET/perun/pull/2977", "merged": true, "mergeCommit": {"oid": "54ae3004ad2561fee70e207c9d6820722decda92"}, "closed": true, "closedAt": "2020-11-12T12:12:17Z", "author": {"login": "balcirakpeter"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbKSzpgFqTUyNzE3Mzc0OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbxee3AFqTUyOTAyNTg5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MTczNzQ4", "url": "https://github.com/CESNET/perun/pull/2977#pullrequestreview-527173748", "createdAt": "2020-11-10T12:56:43Z", "commit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1Njo0M1rOHwbS-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyODoyMFrOHwfIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0MDkyMg==", "bodyText": "You can't specify this in the method.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520540922", "createdAt": "2020-11-10T12:56:43Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMTY5Ng==", "bodyText": "This is probably not the right way how to process an exception in RPC.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520601696", "createdAt": "2020-11-10T14:25:35Z", "author": {"login": "stavamichal"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -145,10 +161,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {\n+\t\t\t\te.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMzc1OA==", "bodyText": "There is a missing javadoc.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520603758", "createdAt": "2020-11-10T14:28:20Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/PerunRolesLoader.java", "diffHunk": "@@ -141,25 +141,30 @@ public void loadPerunRoles(JdbcPerunTemplate jdbc) {\n \t\twhile (roleNames.hasNext()) {\n \t\t\tString roleName = roleNames.next();\n \t\t\tJsonNode roleNode = rolesNodes.get(roleName);\n-\t\t\tList<Map<String, String>> privilegedRoles = new ArrayList<>();\n-\t\t\tJsonNode privilegedRolesNode = roleNode.get(\"privileged_roles\");\n+\t\t\tList<Map<String, String>> privilegedRolesToManage = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_manage\"));\n+\t\t\tList<Map<String, String>> privilegedRolesToRead = createMapFromPrivilegedRoles(roleNode.get(\"privileged_roles_to_read\"));\n+\t\t\tMap<String, String> entitiesToManage = createMapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n+\t\t\tMap<String, String> objectsToAssign = createMapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n \n-\t\t\t//Field privileged_roles is saved as List of maps in the for loop\n-\t\t\tfor (JsonNode privilegedRoleNode : privilegedRolesNode) {\n-\t\t\t\tMap<String, String> innerRoleMap = createmapFromJsonNode(privilegedRoleNode);\n-\t\t\t\tprivilegedRoles.add(innerRoleMap);\n-\t\t\t}\n+\t\t\trules.add(new RoleManagementRules(roleName, privilegedRolesToManage, privilegedRolesToRead, entitiesToManage, objectsToAssign));\n+\t\t}\n+\n+\t\treturn rules;\n+\t}\n \n-\t\t\tMap<String, String> entitiesToManage = createmapFromJsonNode(roleNode.get(\"entities_to_manage\"));\n-\t\t\tMap<String, String> objectsToAssign = createmapFromJsonNode(roleNode.get(\"assign_to_objects\"));\n+\tprivate List<Map<String, String>> createMapFromPrivilegedRoles(JsonNode privilegedRolesNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzE5Nzkz", "url": "https://github.com/CESNET/perun/pull/2977#pullrequestreview-527319793", "createdAt": "2020-11-10T15:27:45Z", "commit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNzo0NVrOHwh_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTo0MzozNVrOHwixFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MDcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n          \n          \n            \n            \t\t\t\tthrow new InternalErrorException(\"One of the given attributes doesn`t exist.\", ex);", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520650724", "createdAt": "2020-11-10T15:27:45Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/AuthzResolverBlImpl.java", "diffHunk": "@@ -1195,6 +1229,70 @@ public static void makeUserPerunAdmin(PerunSession sess, User user) throws Alrea\n \t\treturn AuthzResolverImpl.getAllPolicies();\n \t}\n \n+\t/**\n+\t * Get all authorizedGroups for complementary object and role.\n+\t *\n+\t * @param complementaryObject for which we will get administrator groups\n+\t * @param role expected role to filter authorizedGroups by\n+\t *\n+\t * @return list of authorizedGroups for complementary object and role\n+\t */\n+\tpublic static List<Group> getAdminGroups(PerunBean complementaryObject, String role) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(groupObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\treturn authzResolverImpl.getAdminGroups(mappingOfValues);\n+\t}\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>onlyDirectAdmins</b> is <b>true</b>, return only direct users of the complementary object for role with specific attributes.\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param sess perun session\n+\t * @param complementaryObject for which we will get administrator\n+\t * @param specificAttributes list of specified attributes which are needed in object richUser\n+\t * @param role expected role to filter managers by\n+\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.\n+\t */\n+\tpublic static List<RichUser> getRichAdmins(PerunSession sess, PerunBean complementaryObject, List<String> specificAttributes, String role, boolean onlyDirectAdmins, boolean allUserAttributes) throws RoleCannotBeManagedException {\n+\n+\t\tif (!objectAndRoleManageableByEntity(userObjectType, complementaryObject, role)) {\n+\t\t\tthrow new RoleCannotBeManagedException(role, complementaryObject);\n+\t\t}\n+\n+\t\tMap<String, Integer> mappingOfValues = createMappingToReadRoleOnObject(complementaryObject, role);\n+\n+\t\tList<User> admins = authzResolverImpl.getAdmins(mappingOfValues, onlyDirectAdmins);\n+\t\tList<RichUser> richAdminsWithAttributes;\n+\n+\t\tif(allUserAttributes) {\n+\t\t\ttry {\n+\t\t\t\trichAdminsWithAttributes = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(sess, admins);\n+\t\t\t} catch (UserNotExistsException e) {\n+\t\t\t\tthrow new InternalErrorException(e);\n+\t\t\t}\n+\t\t} else {\n+\t\t\ttry {\n+\t\t\t\tList<AttributeDefinition> attrDefinitions = getPerunBl().getAttributesManagerBl().getAttributesDefinition(sess, specificAttributes);\n+\t\t\t\tList<RichUser> richAdmins = perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, admins);\n+\t\t\t\trichAdminsWithAttributes = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(sess, richAdmins, attrDefinitions);\n+\t\t\t} catch (AttributeNotExistsException ex) {\n+\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzI0OA==", "bodyText": "I think you can use here the HashSet. This list is actually never used since you always convert it into a HashSet.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657248", "createdAt": "2020-11-10T15:35:49Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/AuthzResolverImpl.java", "diffHunk": "@@ -854,6 +860,39 @@ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, S\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<User> getAdmins(Map<String, Integer> mappingOfValues, boolean onlyDirectAdmins) {\n+\t\tString query = prepareQueryToGetRichAdmins(mappingOfValues);\n+\n+\t\ttry {\n+\t\t\tList<User> admins = jdbc.query(query, USER_MAPPER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NzkzOQ==", "bodyText": "Also, this method works only with users, not rich users.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520657939", "createdAt": "2020-11-10T15:36:44Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/AuthzResolverImplApi.java", "diffHunk": "@@ -547,4 +548,26 @@\n \t * @throws RoleNotSetException\n \t */\n \tvoid unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException;\n+\n+\t/**\n+\t * Get all richUser administrators for complementary object and role with specified attributes.\n+\t *\n+\t * If <b>allUserAttributes</b> is <b>true</b>, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+\t *\n+\t * @param mappingOfValues from which will be the query created (keys are column names and values are their ids)\n+\t * @param onlyDirectAdmins if we do not want to include also members of authorized groups.\n+\t *\n+\t * @return list of richUser administrators for complementary object and role with specified attributes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MzMxOQ==", "bodyText": "This exception should probably be also wrapped and rethrown.", "url": "https://github.com/CESNET/perun/pull/2977#discussion_r520663319", "createdAt": "2020-11-10T15:43:35Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-rpc/src/main/java/cz/metacentrum/perun/rpc/methods/AuthzResolverMethod.java", "diffHunk": "@@ -117,10 +120,23 @@ public AuthzRoles call(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER, \"Role with name \" + roleName + \" does not exist.\");\n \t\t\t}\n \t\t\troleName = roleName.toUpperCase();\n+\t\t\tint complementaryObjectId = parms.readInt(\"complementaryObjectId\");\n+\t\t\tString complementaryObjectName = parms.readString(\"complementaryObjectName\");\n+\n+\t\t\tPerunBean bean = null;\n+\t\t\ttry {\n+\t\t\t\tbean = (PerunBean) Class.forName(\"cz.metacentrum.perun.core.api.\" + complementaryObjectName).getConstructor().newInstance();\n+\t\t\t\tbean.setId(complementaryObjectId);\n+\t\t\t} catch (InstantiationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/ce0aea85a9feb0b02724adc53217bb06518fa2af", "committedDate": "2020-11-11T08:53:16Z", "message": "General getAdmins methods\n\n- Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\n  possible to configure the acces rights.\n- Access rights are stored in perun-roles.yml under the\n  role_management_rules->privileged_roles_to_read.\n- Similar methods in other managers were not converted to this general\n  approach yet. It will be done in a small separate PR so this one is not\n  too complex."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2748c516f03c961fe9aa71c73782e48ee725a591", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/2748c516f03c961fe9aa71c73782e48ee725a591", "committedDate": "2020-11-10T09:45:43Z", "message": "General getAdmins methods\n\n- Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\n  possible to configure the acces rights.\n- Access rights are stored in perun-roles.yml under the\n  role_management_rules->privileged_roles_to_read.\n- Similar methods in other managers were not converted to this general\n  approach yet. It will be done in a small separate PR so this one is not\n  too complex."}, "afterCommit": {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af", "author": {"user": {"login": "balcirakpeter", "name": null}}, "url": "https://github.com/CESNET/perun/commit/ce0aea85a9feb0b02724adc53217bb06518fa2af", "committedDate": "2020-11-11T08:53:16Z", "message": "General getAdmins methods\n\n- Methods getAdminGroups and getRichAdmins in AuthzResolver were reworked so it is\n  possible to configure the acces rights.\n- Access rights are stored in perun-roles.yml under the\n  role_management_rules->privileged_roles_to_read.\n- Similar methods in other managers were not converted to this general\n  approach yet. It will be done in a small separate PR so this one is not\n  too complex."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjQ0NDA1", "url": "https://github.com/CESNET/perun/pull/2977#pullrequestreview-528244405", "createdAt": "2020-11-11T14:54:45Z", "commit": {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDI1ODk1", "url": "https://github.com/CESNET/perun/pull/2977#pullrequestreview-529025895", "createdAt": "2020-11-12T12:11:50Z", "commit": {"oid": "ce0aea85a9feb0b02724adc53217bb06518fa2af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1659, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}