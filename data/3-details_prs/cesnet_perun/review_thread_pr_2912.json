{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODg4NzQy", "number": 2912, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTowNDowMFrOEnaP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyOTowMlrOErF9Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzU5OTUyOnYy", "diffSide": "RIGHT", "path": "perun-db/find_group_inconsistencies", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTowNDowMFrOHX_Gvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODoxNToxMlrOHe_t8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMzIxNQ==", "bodyText": "Wrong indentation.", "url": "https://github.com/CESNET/perun/pull/2912#discussion_r494913215", "createdAt": "2020-09-25T11:04:00Z", "author": {"login": "stavamichal"}, "path": "perun-db/find_group_inconsistencies", "diffHunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/perl -w\n+use strict;\n+use warnings FATAL => 'all';\n+\n+use DBI;\n+use POSIX qw(:errno_h);\n+use Getopt::Long qw(:config no_ignore_case);\n+no if $] >= 5.017011, warnings => 'experimental::smartmatch';\n+\n+sub help {\n+\treturn qq{\n+        Find all groups' members inconsistencies.\n+        --------------------------------------\n+        Available options:\n+\n+        --vo        | -v Vo id in which inconsistencies will be looking for (optional)\n+        --user      | -u Username for Postgre DB (required)\n+        --password  | -p Password for Postgre DB (required)\n+        };\n+}\n+\n+my ($user, $pwd, $input_vo);\n+my @already_processed_groups = ();\n+\n+GetOptions (\"help|h\" => sub { print help(); exit 0;}, \"vo|v=s\" => \\$input_vo,\"user|u=s\" => \\$user, \"password|w=s\" => \\$pwd) || die help();\n+\n+if (!defined $pwd) { print \"[ERROR] Password for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+if (!defined $user) { print \"[ERROR] Username for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+\n+my $dbh = DBI->connect('dbi:Pg:dbname=perun',$user,$pwd,{RaiseError=>1,AutoCommit=>0,pg_enable_utf8=>1}) or die EPERM,\" Connect\";\n+\n+my $sth_vos = $dbh->prepare(q{\n+\tselect id from vos;\n+});\n+\n+my $sth_root_groups = $dbh->prepare(q{\n+\tselect id from groups where vo_id = ? and parent_group_id is null and id not in (select operand_gid from groups_groups) and name != 'members';\n+});\n+\n+my $sth_child_groups = $dbh->prepare(q{\n+\tselect operand_gid from groups_groups where result_gid = ?\n+});\n+\n+my $sth_indirect_group_members = $dbh->prepare(q{\n+\tselect member_id from groups_members where group_id = ? and membership_type = 2\n+});\n+\n+my $sth_group_members = $dbh->prepare(q{\n+\tselect distinct member_id from groups_members where group_id = ?\n+});\n+\n+if (defined $input_vo) {\n+\tfind_inconsistencies_in_vo($input_vo);\n+} else {\n+\t$sth_vos->execute();\n+\twhile (my ($selected_vo) = $sth_vos->fetchrow_array()) {\n+\t\tfind_inconsistencies_in_vo($selected_vo);\n+\t}\n+}\n+disconnect $dbh;\n+\n+#\n+# Find group inconsistencies in specific vo\n+#\n+sub find_inconsistencies_in_vo {\n+\tmy $vo = shift;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd4ad9051371fe7c23200ed8599898cafbcbd465"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2MzI4Mw==", "bodyText": "Fixed", "url": "https://github.com/CESNET/perun/pull/2912#discussion_r502263283", "createdAt": "2020-10-09T08:15:12Z", "author": {"login": "balcirakpeter"}, "path": "perun-db/find_group_inconsistencies", "diffHunk": "@@ -0,0 +1,111 @@\n+#!/usr/bin/perl -w\n+use strict;\n+use warnings FATAL => 'all';\n+\n+use DBI;\n+use POSIX qw(:errno_h);\n+use Getopt::Long qw(:config no_ignore_case);\n+no if $] >= 5.017011, warnings => 'experimental::smartmatch';\n+\n+sub help {\n+\treturn qq{\n+        Find all groups' members inconsistencies.\n+        --------------------------------------\n+        Available options:\n+\n+        --vo        | -v Vo id in which inconsistencies will be looking for (optional)\n+        --user      | -u Username for Postgre DB (required)\n+        --password  | -p Password for Postgre DB (required)\n+        };\n+}\n+\n+my ($user, $pwd, $input_vo);\n+my @already_processed_groups = ();\n+\n+GetOptions (\"help|h\" => sub { print help(); exit 0;}, \"vo|v=s\" => \\$input_vo,\"user|u=s\" => \\$user, \"password|w=s\" => \\$pwd) || die help();\n+\n+if (!defined $pwd) { print \"[ERROR] Password for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+if (!defined $user) { print \"[ERROR] Username for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+\n+my $dbh = DBI->connect('dbi:Pg:dbname=perun',$user,$pwd,{RaiseError=>1,AutoCommit=>0,pg_enable_utf8=>1}) or die EPERM,\" Connect\";\n+\n+my $sth_vos = $dbh->prepare(q{\n+\tselect id from vos;\n+});\n+\n+my $sth_root_groups = $dbh->prepare(q{\n+\tselect id from groups where vo_id = ? and parent_group_id is null and id not in (select operand_gid from groups_groups) and name != 'members';\n+});\n+\n+my $sth_child_groups = $dbh->prepare(q{\n+\tselect operand_gid from groups_groups where result_gid = ?\n+});\n+\n+my $sth_indirect_group_members = $dbh->prepare(q{\n+\tselect member_id from groups_members where group_id = ? and membership_type = 2\n+});\n+\n+my $sth_group_members = $dbh->prepare(q{\n+\tselect distinct member_id from groups_members where group_id = ?\n+});\n+\n+if (defined $input_vo) {\n+\tfind_inconsistencies_in_vo($input_vo);\n+} else {\n+\t$sth_vos->execute();\n+\twhile (my ($selected_vo) = $sth_vos->fetchrow_array()) {\n+\t\tfind_inconsistencies_in_vo($selected_vo);\n+\t}\n+}\n+disconnect $dbh;\n+\n+#\n+# Find group inconsistencies in specific vo\n+#\n+sub find_inconsistencies_in_vo {\n+\tmy $vo = shift;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkxMzIxNQ=="}, "originalCommit": {"oid": "cd4ad9051371fe7c23200ed8599898cafbcbd465"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjIxODE4OnYy", "diffSide": "RIGHT", "path": "perun-db/find_group_inconsistencies", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyOTowMlrOHdqpjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODoxNToyMFrOHe_uRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2OTUxNg==", "bodyText": "Please add documentation of this function.", "url": "https://github.com/CESNET/perun/pull/2912#discussion_r500869516", "createdAt": "2020-10-07T09:29:02Z", "author": {"login": "stavamichal"}, "path": "perun-db/find_group_inconsistencies", "diffHunk": "@@ -0,0 +1,120 @@\n+#!/usr/bin/perl -w\n+use strict;\n+use warnings FATAL => 'all';\n+\n+use DBI;\n+use POSIX qw(:errno_h);\n+use Getopt::Long qw(:config no_ignore_case);\n+no if $] >= 5.017011, warnings => 'experimental::smartmatch';\n+\n+sub help {\n+\treturn qq{\n+        Find all groups' members inconsistencies.\n+        --------------------------------------\n+        Available options:\n+\n+        --vo        | -v Vo id in which inconsistencies will be looking for (optional)\n+        --user      | -u Username for Postgre DB (required)\n+        --password  | -p Password for Postgre DB (required)\n+        };\n+}\n+\n+my ($user, $pwd, $input_vo);\n+my @already_processed_groups = ();\n+\n+GetOptions (\"help|h\" => sub { print help(); exit 0;}, \"vo|v=s\" => \\$input_vo,\"user|u=s\" => \\$user, \"password|w=s\" => \\$pwd) || die help();\n+\n+if (!defined $pwd) { print \"[ERROR] Password for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+if (!defined $user) { print \"[ERROR] Username for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+\n+my $dbh = DBI->connect('dbi:Pg:dbname=perun',$user,$pwd,{RaiseError=>1,AutoCommit=>0,pg_enable_utf8=>1}) or die EPERM,\" Connect\";\n+\n+my $sth_vos = $dbh->prepare(q{\n+\tselect id from vos;\n+});\n+\n+my $sth_root_groups = $dbh->prepare(q{\n+\tselect id from groups where vo_id = ? and parent_group_id is null and id not in (select operand_gid from groups_groups) and name != 'members';\n+});\n+\n+my $sth_child_groups = $dbh->prepare(q{\n+\tselect operand_gid from groups_groups where result_gid = ?\n+});\n+\n+my $sth_indirect_group_members = $dbh->prepare(q{\n+\tselect member_id, source_group_id from groups_members where group_id = ? and membership_type = 2\n+});\n+\n+my $sth_group_members = $dbh->prepare(q{\n+\tselect distinct member_id from groups_members where group_id = ?\n+});\n+\n+if (defined $input_vo) {\n+\tfind_inconsistencies_in_vo($input_vo);\n+} else {\n+\t$sth_vos->execute();\n+\twhile (my ($selected_vo) = $sth_vos->fetchrow_array()) {\n+\t\tfind_inconsistencies_in_vo($selected_vo);\n+\t}\n+}\n+disconnect $dbh;\n+\n+#\n+# Find group inconsistencies in specific vo\n+#\n+sub find_inconsistencies_in_vo {\n+\tmy $vo = shift;\n+\n+        print(\"Process of finding group inconsistencies in vo:$vo has started.\\n\");\n+\n+        my $root_groups = $dbh->selectcol_arrayref($sth_root_groups, {}, ($vo));\n+        my $root_indirect_members = prepare_structure_of_indirect_members($root_groups);\n+        check_against_next_group_level($root_indirect_members);\n+\n+        print(\"Process of finding group inconsistencies in vo:$vo has finished.\\n\");\n+}\n+\n+#\n+# Recursively check current level of groups against their child groups (unions included).\n+#\n+sub check_against_next_group_level {\n+\tmy $current_indirect_members = shift;\n+\treturn unless (%$current_indirect_members);\n+\n+\tmy @all_sub_groups = ();\n+\n+\tforeach my $parent_group (sort keys %$current_indirect_members) {\n+\t\tnext if($parent_group ~~ @already_processed_groups);\n+\t\tmy @sub_groups = @{$dbh->selectcol_arrayref($sth_child_groups, {}, ($parent_group))};\n+\t\tforeach my $sub_group (@sub_groups) {\n+\t\t\tmy @all_sub_group_members = @{$dbh->selectcol_arrayref($sth_group_members, {}, ($sub_group))};\n+\t\t\tforeach my $sub_group_member (@all_sub_group_members) {\n+\t\t\t\tunless ($sub_group_member ~~ @{$current_indirect_members->{$parent_group}->{$sub_group}}) {\n+\t\t\t\t\tprint(\"Inconsistency found. Member $sub_group_member should exists as Indirect in parent group $parent_group of group $sub_group.\\n\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tpush(@all_sub_groups, $sub_group);\n+\t\t}\n+\t}\n+\tmy $next_indirect_members = prepare_structure_of_indirect_members(\\@all_sub_groups);\n+\tpush(@already_processed_groups, keys %$current_indirect_members);\n+\tcheck_against_next_group_level($next_indirect_members);\n+}\n+\n+sub prepare_structure_of_indirect_members {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "190ba5287e5a354516b87df46da5bde3af831d60"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI2MzM2NA==", "bodyText": "Added", "url": "https://github.com/CESNET/perun/pull/2912#discussion_r502263364", "createdAt": "2020-10-09T08:15:20Z", "author": {"login": "balcirakpeter"}, "path": "perun-db/find_group_inconsistencies", "diffHunk": "@@ -0,0 +1,120 @@\n+#!/usr/bin/perl -w\n+use strict;\n+use warnings FATAL => 'all';\n+\n+use DBI;\n+use POSIX qw(:errno_h);\n+use Getopt::Long qw(:config no_ignore_case);\n+no if $] >= 5.017011, warnings => 'experimental::smartmatch';\n+\n+sub help {\n+\treturn qq{\n+        Find all groups' members inconsistencies.\n+        --------------------------------------\n+        Available options:\n+\n+        --vo        | -v Vo id in which inconsistencies will be looking for (optional)\n+        --user      | -u Username for Postgre DB (required)\n+        --password  | -p Password for Postgre DB (required)\n+        };\n+}\n+\n+my ($user, $pwd, $input_vo);\n+my @already_processed_groups = ();\n+\n+GetOptions (\"help|h\" => sub { print help(); exit 0;}, \"vo|v=s\" => \\$input_vo,\"user|u=s\" => \\$user, \"password|w=s\" => \\$pwd) || die help();\n+\n+if (!defined $pwd) { print \"[ERROR] Password for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+if (!defined $user) { print \"[ERROR] Username for Postgre DB is required! Use --help | -h to print help.\\n\"; exit 1; }\n+\n+my $dbh = DBI->connect('dbi:Pg:dbname=perun',$user,$pwd,{RaiseError=>1,AutoCommit=>0,pg_enable_utf8=>1}) or die EPERM,\" Connect\";\n+\n+my $sth_vos = $dbh->prepare(q{\n+\tselect id from vos;\n+});\n+\n+my $sth_root_groups = $dbh->prepare(q{\n+\tselect id from groups where vo_id = ? and parent_group_id is null and id not in (select operand_gid from groups_groups) and name != 'members';\n+});\n+\n+my $sth_child_groups = $dbh->prepare(q{\n+\tselect operand_gid from groups_groups where result_gid = ?\n+});\n+\n+my $sth_indirect_group_members = $dbh->prepare(q{\n+\tselect member_id, source_group_id from groups_members where group_id = ? and membership_type = 2\n+});\n+\n+my $sth_group_members = $dbh->prepare(q{\n+\tselect distinct member_id from groups_members where group_id = ?\n+});\n+\n+if (defined $input_vo) {\n+\tfind_inconsistencies_in_vo($input_vo);\n+} else {\n+\t$sth_vos->execute();\n+\twhile (my ($selected_vo) = $sth_vos->fetchrow_array()) {\n+\t\tfind_inconsistencies_in_vo($selected_vo);\n+\t}\n+}\n+disconnect $dbh;\n+\n+#\n+# Find group inconsistencies in specific vo\n+#\n+sub find_inconsistencies_in_vo {\n+\tmy $vo = shift;\n+\n+        print(\"Process of finding group inconsistencies in vo:$vo has started.\\n\");\n+\n+        my $root_groups = $dbh->selectcol_arrayref($sth_root_groups, {}, ($vo));\n+        my $root_indirect_members = prepare_structure_of_indirect_members($root_groups);\n+        check_against_next_group_level($root_indirect_members);\n+\n+        print(\"Process of finding group inconsistencies in vo:$vo has finished.\\n\");\n+}\n+\n+#\n+# Recursively check current level of groups against their child groups (unions included).\n+#\n+sub check_against_next_group_level {\n+\tmy $current_indirect_members = shift;\n+\treturn unless (%$current_indirect_members);\n+\n+\tmy @all_sub_groups = ();\n+\n+\tforeach my $parent_group (sort keys %$current_indirect_members) {\n+\t\tnext if($parent_group ~~ @already_processed_groups);\n+\t\tmy @sub_groups = @{$dbh->selectcol_arrayref($sth_child_groups, {}, ($parent_group))};\n+\t\tforeach my $sub_group (@sub_groups) {\n+\t\t\tmy @all_sub_group_members = @{$dbh->selectcol_arrayref($sth_group_members, {}, ($sub_group))};\n+\t\t\tforeach my $sub_group_member (@all_sub_group_members) {\n+\t\t\t\tunless ($sub_group_member ~~ @{$current_indirect_members->{$parent_group}->{$sub_group}}) {\n+\t\t\t\t\tprint(\"Inconsistency found. Member $sub_group_member should exists as Indirect in parent group $parent_group of group $sub_group.\\n\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tpush(@all_sub_groups, $sub_group);\n+\t\t}\n+\t}\n+\tmy $next_indirect_members = prepare_structure_of_indirect_members(\\@all_sub_groups);\n+\tpush(@already_processed_groups, keys %$current_indirect_members);\n+\tcheck_against_next_group_level($next_indirect_members);\n+}\n+\n+sub prepare_structure_of_indirect_members {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg2OTUxNg=="}, "originalCommit": {"oid": "190ba5287e5a354516b87df46da5bde3af831d60"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2303, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}