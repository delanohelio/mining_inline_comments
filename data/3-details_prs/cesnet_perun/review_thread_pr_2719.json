{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjE0MjAw", "number": 2719, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxOTo1N1rOEACyhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxOTo1N1rOEACyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDgxMTU2OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_uniqueID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToxOTo1N1rOGbEwDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozNDoxNVrOGbFLiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0MjU3NA==", "bodyText": "NIT: This is really difficult to read. Something like this would be much easier:\nbyte[] result = mDigest.digest(ByteBuffer\n\t\t\t\t.allocate(length)\n\t\t\t\t.putInt(group.getId())\n\t\t\t\t.put(salt.getBytes(StandardCharsets.UTF_8))\n\t\t\t\t.array());", "url": "https://github.com/CESNET/perun/pull/2719#discussion_r431042574", "createdAt": "2020-05-27T11:19:57Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_uniqueID.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleAbstract;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * Class for checking and filling unique IDs for groups in the Perun.\n+ * This unique ID is unpredictable and is usable for identifying of groups in other systems.\n+ *\n+ * @author  Michal Stava stavamichal@gmail.com\n+ */\n+public class urn_perun_group_attribute_def_def_uniqueID  extends GroupAttributesModuleAbstract implements GroupAttributesModuleImplApi {\n+\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl session, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+\t\tAttribute filledAttribute = new Attribute(attribute);\n+\t\tfilledAttribute.setValue(sha1HashCount(group).toString());\n+\t\treturn filledAttribute;\n+\t}\n+\n+\t/**\n+\t * Generate unique ID as hexadecimal string representation of SHA1 digest from group ID.\n+\t * Input is salted per Perun instance. Effective resulting string consist of [0-9a-f] characters.\n+\t *\n+\t * It is used to generate unique IDs for Perun groups.\n+\t *\n+\t * @param group Group to generate ID for\n+\t * @return Builder to get string ID\n+\t * @throws InternalErrorException When generation fails\n+\t */\n+\tprotected StringBuilder sha1HashCount(Group group) throws InternalErrorException {\n+\t\ttry {\n+\t\t\tString salt = BeansUtils.getCoreConfig().getInstanceId();\n+\t\t\tMessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\t\t\t// counts sha1hash and converts output to hex\n+\t\t\tint length = 4+salt.getBytes(StandardCharsets.UTF_8).length;\n+\t\t\tbyte[] result = mDigest.digest(ByteBuffer.allocate(length).putInt(group.getId()).put(salt.getBytes(StandardCharsets.UTF_8)).array());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d659f829e5ada7f62edb8e9aa82e734d711aaca"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0OTYwOA==", "bodyText": "Changed.", "url": "https://github.com/CESNET/perun/pull/2719#discussion_r431049608", "createdAt": "2020-05-27T11:34:15Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_group_attribute_def_def_uniqueID.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package cz.metacentrum.perun.core.impl.modules.attributes;\n+\n+import cz.metacentrum.perun.core.api.Attribute;\n+import cz.metacentrum.perun.core.api.AttributeDefinition;\n+import cz.metacentrum.perun.core.api.AttributesManager;\n+import cz.metacentrum.perun.core.api.BeansUtils;\n+import cz.metacentrum.perun.core.api.Group;\n+import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n+import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n+import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleAbstract;\n+import cz.metacentrum.perun.core.implApi.modules.attributes.GroupAttributesModuleImplApi;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * Class for checking and filling unique IDs for groups in the Perun.\n+ * This unique ID is unpredictable and is usable for identifying of groups in other systems.\n+ *\n+ * @author  Michal Stava stavamichal@gmail.com\n+ */\n+public class urn_perun_group_attribute_def_def_uniqueID  extends GroupAttributesModuleAbstract implements GroupAttributesModuleImplApi {\n+\n+\t@Override\n+\tpublic Attribute fillAttribute(PerunSessionImpl session, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+\t\tAttribute filledAttribute = new Attribute(attribute);\n+\t\tfilledAttribute.setValue(sha1HashCount(group).toString());\n+\t\treturn filledAttribute;\n+\t}\n+\n+\t/**\n+\t * Generate unique ID as hexadecimal string representation of SHA1 digest from group ID.\n+\t * Input is salted per Perun instance. Effective resulting string consist of [0-9a-f] characters.\n+\t *\n+\t * It is used to generate unique IDs for Perun groups.\n+\t *\n+\t * @param group Group to generate ID for\n+\t * @return Builder to get string ID\n+\t * @throws InternalErrorException When generation fails\n+\t */\n+\tprotected StringBuilder sha1HashCount(Group group) throws InternalErrorException {\n+\t\ttry {\n+\t\t\tString salt = BeansUtils.getCoreConfig().getInstanceId();\n+\t\t\tMessageDigest mDigest = MessageDigest.getInstance(\"SHA1\");\n+\t\t\t// counts sha1hash and converts output to hex\n+\t\t\tint length = 4+salt.getBytes(StandardCharsets.UTF_8).length;\n+\t\t\tbyte[] result = mDigest.digest(ByteBuffer.allocate(length).putInt(group.getId()).put(salt.getBytes(StandardCharsets.UTF_8)).array());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0MjU3NA=="}, "originalCommit": {"oid": "2d659f829e5ada7f62edb8e9aa82e734d711aaca"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2057, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}