{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTY4NTkw", "number": 2898, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1MzozN1rOEig1Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1ODozOVrOEig7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI0OTY3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/VosManagerBlImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1MzozN1rOHQbyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1MzozN1rOHQbyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif(! allUsersIds.contains(userId)) {\n          \n          \n            \n            \t\t\t\tif (!allUsersIds.contains(userId)) {", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994486", "createdAt": "2020-09-11T11:53:37Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/VosManagerBlImpl.java", "diffHunk": "@@ -753,24 +753,33 @@ private void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User us\n \t * @return list of MemberCandidates for given RichUsers, group and candidates\n \t * @throws InternalErrorException internal error\n \t */\n-\tprivate List<MemberCandidate> createMemberCandidates(PerunSession sess, List<RichUser> users, Vo vo, Group group, List<Candidate> candidates, List<String> attrNames) {\n+\tpublic List<MemberCandidate> createMemberCandidates(PerunSession sess, List<RichUser> users, Vo vo, Group group, List<Candidate> candidates, List<String> attrNames) {\n \t\tList<MemberCandidate> memberCandidates = new ArrayList<>();\n+\t\tSet<Integer> allUsersIds = new HashSet<>();\n+\t\tint userId;\n \n \t\t// try to find matching RichUser for candidates\n \t\tfor (Candidate candidate : candidates) {\n \t\t\tMemberCandidate mc = new MemberCandidate();\n-\t\t\tmc.setCandidate(candidate);\n \n \t\t\ttry {\n \t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByUserExtSources(sess, candidate.getUserExtSources());\n-\t\t\t\tRichUser richUser = getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(sess, user, attrNames);\n+\t\t\t\tuserId = user.getId();\n+\n+\t\t\t\t// check if user already exists in the list\n+\t\t\t\tif(! allUsersIds.contains(userId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1MjM5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDozNlrOHQbz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDozNlrOHQbz3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDkwOA==", "bodyText": "Please, try to keep the code as much formatted as possible. Try to avoid these empty lines.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994908", "createdAt": "2020-09-11T11:54:36Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1MjgwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDo0M1rOHQb0GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDo0M1rOHQb0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NDk2OA==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486994968", "createdAt": "2020-09-11T11:54:43Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1MzQzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDo1NVrOHQb0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NDo1NVrOHQb0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTA2NA==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995064", "createdAt": "2020-09-11T11:54:55Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1Mzg0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTowMFrOHQb0qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTowMFrOHQb0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTExMw==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995113", "createdAt": "2020-09-11T11:55:00Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1NDI0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTowN1rOHQb04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTowN1rOHQb04w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTE3MQ==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995171", "createdAt": "2020-09-11T11:55:07Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isNull();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1NDYxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NToxM1rOHQb1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NToxM1rOHQb1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTIxNg==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995216", "createdAt": "2020-09-11T11:55:13Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isNull();\n+\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1NzcxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTo1OFrOHQb2rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NTo1OFrOHQb2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTYzMQ==", "bodyText": "We don't want to use wildcard imports. Please, try to adjust your IDE's settings.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995631", "createdAt": "2020-09-11T11:55:58Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI1ODM3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NjowN1rOHQb3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1NjowN1rOHQb3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5NTcyNQ==", "bodyText": "Same for these two.", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486995725", "createdAt": "2020-09-11T11:56:07Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjI2NTQ5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1ODozOVrOHQb7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo1ODozOVrOHQb7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk5Njg2NA==", "bodyText": "You can pass here only the first candidate.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n          \n          \n            \n            \t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());", "url": "https://github.com/CESNET/perun/pull/2898#discussion_r486996864", "createdAt": "2020-09-11T11:58:39Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-core/src/test/java/cz/metacentrum/perun/core/bl/VosManagerBlImplUnitTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package cz.metacentrum.perun.core.bl;\n+\n+import cz.metacentrum.perun.core.api.*;\n+import cz.metacentrum.perun.core.api.exceptions.UserNotExistsException;\n+import cz.metacentrum.perun.core.blImpl.VosManagerBlImpl;\n+import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.*;\n+\n+public class VosManagerBlImplUnitTest {\n+\tprivate VosManagerBlImpl vosManagerBl;\n+\tprivate VosManagerImplApi vosManagerImpl = mock(VosManagerImplApi.class);\n+\tprivate PerunSession sess = mock(PerunSession.class);\n+\tprivate Candidate candidate1 = mock(Candidate.class);\n+\tprivate Candidate candidate2 = mock(Candidate.class);\n+\tprivate Vo vo = mock(Vo.class);\n+\tprivate Group group = mock(Group.class);\n+\tprivate VosManagerBlImpl vosManagerBlSpy;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tvosManagerBl = new VosManagerBlImpl(vosManagerImpl);\n+\t\tvosManagerBl.setPerunBl(mock(PerunBl.class, RETURNS_DEEP_STUBS));\n+\t\tvosManagerBlSpy = spy(vosManagerBl);\n+\n+\t}\n+\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsOnlyOneMemberCandidateForDuplicateUsers() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(candidate2.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsCandidate() throws Exception {\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenThrow(UserNotExistsException.class);\n+\t\twhen(candidate1.getUserExtSources())\n+\t\t\t.thenReturn(Collections.emptyList());\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1), Collections.emptyList());\n+\t\tassertThat(memberCandidates).hasSize(1);\n+\t\tassertThat(memberCandidates.get(0).getCandidate()).isEqualTo(candidate1);\n+\t\tassertThat(memberCandidates.get(0).getRichUser()).isNull();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void createMemberCandidatesReturnsUser() throws Exception {\n+\t\tUser user = new User();\n+\t\tRichUser richUser = new RichUser();\n+\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().getUserByUserExtSources(any(), any()))\n+\t\t\t.thenReturn(user);\n+\t\twhen(candidate1.getUserExtSources()).\n+\t\t\tthenReturn(Collections.emptyList());\n+\t\twhen(vosManagerBlSpy.getPerunBl().getUsersManagerBl().convertUserToRichUserWithAttributesByNames(any(), any(), any()))\n+\t\t\t.thenReturn(richUser);\n+\n+\t\tList<MemberCandidate> memberCandidates = vosManagerBlSpy.createMemberCandidates(sess, Collections.emptyList(),\n+\t\t\tvo, group, Arrays.asList(candidate1, candidate2), Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fed8b6489c1d64670d131fd085b17012ee76fffd"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2276, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}