{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjgxMTg2", "number": 2831, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMTo0N1rOEU8zBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozOTozNFrOEVysBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDAzMDc3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/MembersManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMTo0N1rOG7bhQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjo1NToyNlrOG70PGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDA0OQ==", "bodyText": "There is possible SQL injection, since you put values from the config right into the SQL. Please use ? placeholder instead and pass it as a lists of strings. If necessary, you can use namedParameterJdbcTemplate instead of jdbc, but I believe query() should be able to work with the list params.", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r464970049", "createdAt": "2020-08-04T11:01:47Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/MembersManagerImpl.java", "diffHunk": "@@ -533,18 +548,18 @@ public MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User use\n \t\tSet<Member> members = new HashSet<>(jdbc.query(\"select distinct \" + memberMappingSelectQuery +\n \t\t\t\t\" from members \" +\n \t\t\t\t\" left join users u on members.user_id=u.id \" +\n-\t\t\t\t\" left join member_attr_values mav1 on members.id=mav1.member_id and mav1.attr_id in (select id from attr_names where attr_name='\" + MembersManagerImpl.A_D_MEMBER_MAIl + \"') \" +\n-\t\t\t\t\" left join user_attr_values uav1 on u.id=uav1.user_id and uav1.attr_id in (select id from attr_names where attr_name='\" + MembersManagerImpl.A_D_USER_PREFERRED_MAIL + \"') \" +\n-\t\t\t\t\" left join user_attr_values uav2 on u.id=uav2.user_id and uav2.attr_id in (select id from attr_names where friendly_name like 'login-namespace:%') \" +\n+\t\t\t\t\" left join member_attr_values mav on members.id=mav.member_id and mav.attr_id in (select id from attr_names where attr_name in (\" + memberAttributes.toString() + \"))\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2fc222daa94de71223a897227df3aebecdbdf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3NTAwMw==", "bodyText": "Oh, thank you, it should be fixed now, although I was unable to make it work without namedParameterJdbcTemplate .", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r465375003", "createdAt": "2020-08-04T22:55:26Z", "author": {"login": "metodej"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/MembersManagerImpl.java", "diffHunk": "@@ -533,18 +548,18 @@ public MemberGroupStatus getUnifiedMemberGroupStatus(PerunSession sess, User use\n \t\tSet<Member> members = new HashSet<>(jdbc.query(\"select distinct \" + memberMappingSelectQuery +\n \t\t\t\t\" from members \" +\n \t\t\t\t\" left join users u on members.user_id=u.id \" +\n-\t\t\t\t\" left join member_attr_values mav1 on members.id=mav1.member_id and mav1.attr_id in (select id from attr_names where attr_name='\" + MembersManagerImpl.A_D_MEMBER_MAIl + \"') \" +\n-\t\t\t\t\" left join user_attr_values uav1 on u.id=uav1.user_id and uav1.attr_id in (select id from attr_names where attr_name='\" + MembersManagerImpl.A_D_USER_PREFERRED_MAIL + \"') \" +\n-\t\t\t\t\" left join user_attr_values uav2 on u.id=uav2.user_id and uav2.attr_id in (select id from attr_names where friendly_name like 'login-namespace:%') \" +\n+\t\t\t\t\" left join member_attr_values mav on members.id=mav.member_id and mav.attr_id in (select id from attr_names where attr_name in (\" + memberAttributes.toString() + \"))\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDA0OQ=="}, "originalCommit": {"oid": "0ab2fc222daa94de71223a897227df3aebecdbdf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDAzNjc3OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMzo0MFrOG7bkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTowMzo0MFrOG7bkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3MDk1MQ==", "bodyText": "Same as in MembersManagerImpl, please use ? placeholders.", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r464970951", "createdAt": "2020-08-04T11:03:40Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "diffHunk": "@@ -794,90 +795,92 @@ public void removeAllUserExtSources(PerunSession sess, User user) {\n \n \t@Override\n \tpublic List<User> findUsers(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<>(users);\n+\t\treturn findUsers(searchString, false);\n \t}\n \n \t@Override\n \tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n+\t\treturn findUsers(searchString, true);\n+\t}\n \n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n+\t/**\n+\t * Returns list of users who matches the searchString, searching name, id, member attributes, user attributes\n+\t * and userExtSource attributes (listed in CoreConfig).\n+\t *\n+\t * @param searchString string used to search by\n+\t * @param exactMatch if true, searches name only by exact match\n+\t * @return list of users\n+\t */\n+\tprivate List<User> findUsers(String searchString, boolean exactMatch) {\n+\t\tString userNameQueryString;\n+\t\tif (exactMatch) {\n+\t\t\t// Part of query to search by user name (exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString= \" strpos(lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString=\" lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\")=?\";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Part of query to search by user name (not exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString = \" strpos(lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \"),?) > 0 \";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString = \" lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \") like '%' || ? || '%' \";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t}\n \n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n+\t\t// Part of query to search by user id\n+\t\tString idQueryString = \"\";\n \t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+\t\t\tint id = Integer.parseInt(searchString);\n+\t\t\tidQueryString = \" users.id=\" + id + \" or \";\n \t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n+\t\t\t// IGNORE wrong format of ID\n+\t\t}\n+\n+\t\t// Divide attributes received from CoreConfig into member, user and userExtSource attributes\n+\t\tList<String> allAttributes = BeansUtils.getCoreConfig().getAttributesToSearchUsersAndMembersBy();\n+\t\tStringBuilder memberAttributes = new StringBuilder(\"''\");\n+\t\tStringBuilder userAttributes = new StringBuilder(\"''\");\n+\t\tStringBuilder uesAttributes = new StringBuilder(\"''\");\n+\t\tfor (String attribute : allAttributes) {\n+\t\t\tif (attribute.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+\t\t\t\tmemberAttributes.append(\",'\").append(attribute).append(\"'\");\n+\t\t\t} else if (attribute.startsWith(AttributesManager.NS_USER_ATTR)) {\n+\t\t\t\tuserAttributes.append(\",'\").append(attribute).append(\"'\");\n+\t\t\t} else if (attribute.startsWith(AttributesManager.NS_UES_ATTR)) {\n+\t\t\t\tuesAttributes.append(\",'\").append(attribute).append(\"'\");\n+\t\t\t}\n \t\t}\n \n-\t\tusers.addAll(findUsersByExactName(sess, searchString));\n+\t\t// Search by member attributes\n+\t\t// Search by user attributes\n+\t\t// Search by login in userExtSources\n+\t\t// Search by userExtSource attributes\n+\t\t// Search by user id\n+\t\t// Search by name for user\n+\t\tSet<User> users = new HashSet<>(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n+\t\t\t\" from users \" +\n+\t\t\t\" left join members m on users.id=m.user_id \" +\n+\t\t\t\" left join member_attr_values mav on m.id=mav.member_id and mav.attr_id in (select id from attr_names where attr_name in (\" + memberAttributes.toString() + \"))\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab2fc222daa94de71223a897227df3aebecdbdf"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg0Njc5OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozNTowNFrOG8vuAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowMDoxMVrOG-EurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0OTU2OA==", "bodyText": "The next lines of code seem to be the same as in MembersManagerImpl. Could you extract it to a separate method that can be used in both managers?", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r466349568", "createdAt": "2020-08-06T11:35:04Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "diffHunk": "@@ -794,90 +795,112 @@ public void removeAllUserExtSources(PerunSession sess, User user) {\n \n \t@Override\n \tpublic List<User> findUsers(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<>(users);\n+\t\treturn findUsers(searchString, false);\n \t}\n \n \t@Override\n \tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n+\t\treturn findUsers(searchString, true);\n+\t}\n \n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n+\t/**\n+\t * Returns list of users who matches the searchString, searching name, id, member attributes, user attributes\n+\t * and userExtSource attributes (listed in CoreConfig).\n+\t *\n+\t * @param searchString string used to search by\n+\t * @param exactMatch if true, searches name only by exact match\n+\t * @return list of users\n+\t */\n+\tprivate List<User> findUsers(String searchString, boolean exactMatch) {\n+\t\tString userNameQueryString;\n+\t\tif (exactMatch) {\n+\t\t\t// Part of query to search by user name (exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString= \" strpos(lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=:nameString\";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString=\" lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\")=:nameString\";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Part of query to search by user name (not exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString = \" strpos(lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \"),:nameString) > 0 \";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString = \" lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \") like '%' || :nameString || '%' \";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t}\n \n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n+\t\t// Part of query to search by user id\n+\t\tString idQueryString = \"\";\n \t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+\t\t\tint id = Integer.parseInt(searchString);\n+\t\t\tidQueryString = \" users.id=\" + id + \" or \";\n \t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n+\t\t\t// IGNORE wrong format of ID\n+\t\t}\n+\n+\t\t// Divide attributes received from CoreConfig into member, user and userExtSource attributes\n+\t\tList<String> allAttributes = BeansUtils.getCoreConfig().getAttributesToSearchUsersAndMembersBy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a3ab5cdef57f473fc25bdcd494975140b21da3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MjM4MQ==", "bodyText": "Ok, I've created new methods in Utils, although I'm not sure if it is not too complicated, I couldn't think of anything nicer.", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r467742381", "createdAt": "2020-08-10T08:00:11Z", "author": {"login": "metodej"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "diffHunk": "@@ -794,90 +795,112 @@ public void removeAllUserExtSources(PerunSession sess, User user) {\n \n \t@Override\n \tpublic List<User> findUsers(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<>(users);\n+\t\treturn findUsers(searchString, false);\n \t}\n \n \t@Override\n \tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n+\t\treturn findUsers(searchString, true);\n+\t}\n \n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n+\t/**\n+\t * Returns list of users who matches the searchString, searching name, id, member attributes, user attributes\n+\t * and userExtSource attributes (listed in CoreConfig).\n+\t *\n+\t * @param searchString string used to search by\n+\t * @param exactMatch if true, searches name only by exact match\n+\t * @return list of users\n+\t */\n+\tprivate List<User> findUsers(String searchString, boolean exactMatch) {\n+\t\tString userNameQueryString;\n+\t\tif (exactMatch) {\n+\t\t\t// Part of query to search by user name (exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString= \" strpos(lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=:nameString\";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString=\" lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\")=:nameString\";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// Part of query to search by user name (not exact)\n+\t\t\tif (Compatibility.isPostgreSql()) {\n+\t\t\t\tuserNameQueryString = \" strpos(lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \"),:nameString) > 0 \";\n+\t\t\t} else if (Compatibility.isHSQLDB()) {\n+\t\t\t\tuserNameQueryString = \" lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \") like '%' || :nameString || '%' \";\n+\t\t\t} else {\n+\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n+\t\t\t}\n+\t\t}\n \n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n+\t\t// Part of query to search by user id\n+\t\tString idQueryString = \"\";\n \t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+\t\t\tint id = Integer.parseInt(searchString);\n+\t\t\tidQueryString = \" users.id=\" + id + \" or \";\n \t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n+\t\t\t// IGNORE wrong format of ID\n+\t\t}\n+\n+\t\t// Divide attributes received from CoreConfig into member, user and userExtSource attributes\n+\t\tList<String> allAttributes = BeansUtils.getCoreConfig().getAttributesToSearchUsersAndMembersBy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0OTU2OA=="}, "originalCommit": {"oid": "72a3ab5cdef57f473fc25bdcd494975140b21da3"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg2MDIzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozOTozNFrOG8v2RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzo1OTowNFrOG-EsoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MTY4NA==", "bodyText": "Both conditional branches can be extracted to separate methods. One could be called something like \"prepareUserSearchQueryExactMatch\" and the second one \"prepareUserSearchQuerySimilarMatch\" or something like that. It will be more readable. Moreover, the second method can be used also in MembersManagerImpl so you eliminate duplicities.", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r466351684", "createdAt": "2020-08-06T11:39:34Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "diffHunk": "@@ -794,90 +795,112 @@ public void removeAllUserExtSources(PerunSession sess, User user) {\n \n \t@Override\n \tpublic List<User> findUsers(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<>(users);\n+\t\treturn findUsers(searchString, false);\n \t}\n \n \t@Override\n \tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n+\t\treturn findUsers(searchString, true);\n+\t}\n \n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n+\t/**\n+\t * Returns list of users who matches the searchString, searching name, id, member attributes, user attributes\n+\t * and userExtSource attributes (listed in CoreConfig).\n+\t *\n+\t * @param searchString string used to search by\n+\t * @param exactMatch if true, searches name only by exact match\n+\t * @return list of users\n+\t */\n+\tprivate List<User> findUsers(String searchString, boolean exactMatch) {\n+\t\tString userNameQueryString;\n+\t\tif (exactMatch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a3ab5cdef57f473fc25bdcd494975140b21da3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0MTg1Ng==", "bodyText": "Ok, I've created new methods in Utils.", "url": "https://github.com/CESNET/perun/pull/2831#discussion_r467741856", "createdAt": "2020-08-10T07:59:04Z", "author": {"login": "metodej"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/UsersManagerImpl.java", "diffHunk": "@@ -794,90 +795,112 @@ public void removeAllUserExtSources(PerunSession sess, User user) {\n \n \t@Override\n \tpublic List<User> findUsers(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where lower(user_ext_sources.login_ext)=lower(?) and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and lower(user_attr_values.attr_value)=lower(?) \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<>(users);\n+\t\treturn findUsers(searchString, false);\n \t}\n \n \t@Override\n \tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) {\n-\t\tSet<User> users = new HashSet<>();\n+\t\treturn findUsers(searchString, true);\n+\t}\n \n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n+\t/**\n+\t * Returns list of users who matches the searchString, searching name, id, member attributes, user attributes\n+\t * and userExtSource attributes (listed in CoreConfig).\n+\t *\n+\t * @param searchString string used to search by\n+\t * @param exactMatch if true, searches name only by exact match\n+\t * @return list of users\n+\t */\n+\tprivate List<User> findUsers(String searchString, boolean exactMatch) {\n+\t\tString userNameQueryString;\n+\t\tif (exactMatch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MTY4NA=="}, "originalCommit": {"oid": "72a3ab5cdef57f473fc25bdcd494975140b21da3"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2382, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}