{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MjQ3NjA1", "number": 2875, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoyNzoyNlrOEfZAqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NjozNFrOEf3scA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzUxMDgzOnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoyNzoyNlrOHLo0tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDoyNzoyNlrOHLo0tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk2NTIzNg==", "bodyText": "Typo getNamesPatter", "url": "https://github.com/CESNET/perun/pull/2875#discussion_r481965236", "createdAt": "2020-09-02T10:27:26Z", "author": {"login": "balcirakpeter"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "diffHunk": "@@ -3323,27 +3353,133 @@ private Candidate createCandidateFromApplicationData(Integer appId) {\n \t\t\t\tcandidate.setTitleAfter(commonName.get(\"titleAfter\"));\n \t\t\t}\n \t\t}\n+\t}\n \n-\t\t// if names are separated, used them after\n-\t\tfor (String attrName : attributes.keySet()) {\n-\t\t\t// if value not null or empty - set to candidate\n-\t\t\tif (attributes.get(attrName) != null\n-\t\t\t\t&& !attributes.get(attrName).isEmpty()) {\n-\t\t\t\tif (URN_USER_TITLE_BEFORE.equals(attrName)) {\n-\t\t\t\t\tcandidate.setTitleBefore(attributes.get(attrName));\n-\t\t\t\t} else if (URN_USER_TITLE_AFTER.equals(attrName)) {\n-\t\t\t\t\tcandidate.setTitleAfter(attributes.get(attrName));\n-\t\t\t\t} else if (URN_USER_FIRST_NAME.equals(attrName)) {\n-\t\t\t\t\tcandidate.setFirstName(attributes.get(attrName));\n-\t\t\t\t} else if (URN_USER_LAST_NAME.equals(attrName)) {\n-\t\t\t\t\tcandidate.setLastName(attributes.get(attrName));\n-\t\t\t\t} else if (URN_USER_MIDDLE_NAME.equals(attrName)) {\n-\t\t\t\t\tcandidate.setMiddleName(attributes.get(attrName));\n-\t\t\t\t}\n+\t/**\n+\t * Check if the given fed info contains givenName and sn (surname). If so,\n+\t * it sets it to the candidate and tries to match titles and middle name from\n+\t * display name.\n+\t *\n+\t * @param candidate candidate\n+\t * @param attributes attributes with values\n+\t * @param fedInfo key-value info from idp\n+\t */\n+\tpublic void parseNamesFromDisplayNameAndFedInfo(Candidate candidate, Map<String, String> attributes,\n+\t                                                Map<String, String> fedInfo) {\n+\t\tif (fedInfo != null && containsNonEmptyValue(fedInfo, FED_GIVEN_NAME) && containsNonEmptyValue(fedInfo, FED_SN)) {\n+\t\t\tString firstName = fedInfo.get(FED_GIVEN_NAME);\n+\t\t\tString lastName = fedInfo.get(FED_SN);\n+\n+\t\t\tcandidate.setFirstName(firstName);\n+\t\t\tcandidate.setLastName(lastName);\n+\n+\t\t\ttryToParseTitlesAndMiddleName(candidate, attributes, firstName, lastName);\n+\t\t} else {\n+\t\t\tparseNamesFromDisplayName(candidate, attributes);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * If the given map of attributes contains a user display name, it tries to match\n+\t * the given firstName and lastName and find titles and middle name.\n+\t *\n+\t * @param candidate candidate\n+\t * @param attributes map of attributes with values\n+\t * @param firstName first name to match\n+\t * @param lastName last name to match\n+\t */\n+\tprivate void tryToParseTitlesAndMiddleName(Candidate candidate, Map<String, String> attributes, String firstName,\n+\t                                           String lastName) {\n+\t\tif (containsNonEmptyValue(attributes, URN_USER_DISPLAY_NAME)) {\n+\t\t\tString displayName = attributes.get(URN_USER_DISPLAY_NAME);\n+\n+\t\t\tPattern pattern = getNamesPatter(firstName, lastName);\n+\t\t\tif (!tryToParseTitlesAndMiddleNameFromPattern(candidate, displayName, pattern)) {\n+\t\t\t\tPattern reversePattern = getNamesPatter(lastName, firstName);\n+\t\t\t\ttryToParseTitlesAndMiddleNameFromPattern(candidate, displayName, reversePattern);\n \t\t\t}\n \t\t}\n+\t}\n \n-\t\treturn candidate;\n+\t/**\n+\t * Tries to match the given pattern to the given display name. If it matches, its sets\n+\t * titles and middle name from matcher of the given pattern to the given candidate.\n+\t *\n+\t * This method expects the pattern to define 3 groups in order - 1. Titles before, 2. Middle name, 3. Titles after\n+\t *\n+\t * @param candidate candidate\n+\t * @param displayName display name\n+\t * @param pattern pattern with 3 matching groups\n+\t * @return true, if the matcher matched\n+\t */\n+\tprivate boolean tryToParseTitlesAndMiddleNameFromPattern(Candidate candidate, String displayName, Pattern pattern) {\n+\t\tMatcher matcher = pattern.matcher(displayName);\n+\t\tif (!matcher.matches()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (matcher.groupCount() != 3) {\n+\t\t\tthrow new InternalErrorException(\"Expected pattern with 3 groups to match - titles before, middle name and \" +\n+\t\t\t\t\t\"titles after, but get \" + matcher.groupCount() + \" groups.\" );\n+\t\t}\n+\n+\t\tparseTitlesBefore(candidate, matcher.group(1));\n+\t\tparseMiddleName(candidate, matcher.group(2));\n+\t\tparseTitlesAfter(candidate, matcher.group(3));\n+\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * To given candidate, sets titleBefore from trim of given value, or null if empty.\n+\t *\n+\t * @param candidate candidate\n+\t * @param value value\n+\t */\n+\tprivate void parseTitlesBefore(Candidate candidate, String value) {\n+\t\tcandidate.setTitleBefore(value.trim().isEmpty() ? null : value.trim());\n+\t}\n+\n+\t/**\n+\t * To given candidate, sets middle name from trim of given value.\n+\t * @param candidate candidate\n+\t * @param value value\n+\t */\n+\tprivate void parseMiddleName(Candidate candidate, String value) {\n+\t\tcandidate.setMiddleName(value.trim().isEmpty() ? null : value.trim());\n+\t}\n+\n+\t/**\n+\t * To given candidate, sets titleAfter from trim of given value, or null if empty.\n+\t *\n+\t * @param candidate candidate\n+\t * @param value value\n+\t */\n+\tprivate void parseTitlesAfter(Candidate candidate, String value) {\n+\t\tcandidate.setTitleAfter(value.trim().isEmpty() ? null : value.trim());\n+\t}\n+\n+\t/**\n+\t * Generates pattern for parsing titles and middle name from given values.\n+\t *\n+\t * The pattern is of format: ^(.*){firstName}(.*){lastName}(.*)$\n+\t *\n+\t * @param firstName first name\n+\t * @param lastName last name\n+\t * @return pattern for parsing titles and middle name\n+\t */\n+\tprivate Pattern getNamesPatter(String firstName, String lastName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70306a0acf9bdc26b5fb356e9fcec27ac7dff2de"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODUyNTE5OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1MzoxMVrOHMaiEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo0NTowN1rOHN6f1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3OTY2Nw==", "bodyText": "Not necessarily in this pull-request, but we might want to improve updateUserNameTitles(Application app) too, since it parses displayName form the form in order to get and update titles before/after. It might work better if we use new matching against first/last name regexes from getNamesPattern().", "url": "https://github.com/CESNET/perun/pull/2875#discussion_r482779667", "createdAt": "2020-09-03T07:53:11Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "diffHunk": "@@ -1675,7 +1679,7 @@ public Application approveApplicationInternal(PerunSession sess, int appId) thro\n \t\t\t\t\t\t// ==> updateNameTitles() in case of change in appForm.\n \t\t\t\t\t\tupdateUserNameTitles(app);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b08b4a0d9f15843a0119e37adff05b45ff34cf7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MTk1Nw==", "bodyText": "We actually want to make some bigger changes to the logic of parsing names. So I think this won't be necessary right now, or we can fix that in some other PR.", "url": "https://github.com/CESNET/perun/pull/2875#discussion_r484351957", "createdAt": "2020-09-07T10:45:07Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "diffHunk": "@@ -1675,7 +1679,7 @@ public Application approveApplicationInternal(PerunSession sess, int appId) thro\n \t\t\t\t\t\t// ==> updateNameTitles() in case of change in appForm.\n \t\t\t\t\t\tupdateUserNameTitles(app);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3OTY2Nw=="}, "originalCommit": {"oid": "1b08b4a0d9f15843a0119e37adff05b45ff34cf7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODUzODA4OnYy", "diffSide": "RIGHT", "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NjozNFrOHMap-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMDo0NToyOFrOHN6gvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MTY4OQ==", "bodyText": "We already have these constants few lines below. But you can update them to your format/style which is correct.", "url": "https://github.com/CESNET/perun/pull/2875#discussion_r482781689", "createdAt": "2020-09-03T07:56:34Z", "author": {"login": "zlamalp"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "diffHunk": "@@ -158,6 +160,8 @@\n \tprivate static final String NAMESPACE_GROUP_MAIL_FOOTER = AttributesManager.NS_GROUP_ATTR_DEF;\n \tstatic final String URN_GROUP_MAIL_FOOTER = NAMESPACE_GROUP_MAIL_FOOTER + \":\" + FRIENDLY_NAME_GROUP_MAIL_FOOTER;\n \n+\tprivate static final String FED_SN = \"sn\";\n+\tprivate static final String FED_GIVEN_NAME = \"givenName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b08b4a0d9f15843a0119e37adff05b45ff34cf7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1MjE4OA==", "bodyText": "I have used the old constants.", "url": "https://github.com/CESNET/perun/pull/2875#discussion_r484352188", "createdAt": "2020-09-07T10:45:28Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-registrar-lib/src/main/java/cz/metacentrum/perun/registrar/impl/RegistrarManagerImpl.java", "diffHunk": "@@ -158,6 +160,8 @@\n \tprivate static final String NAMESPACE_GROUP_MAIL_FOOTER = AttributesManager.NS_GROUP_ATTR_DEF;\n \tstatic final String URN_GROUP_MAIL_FOOTER = NAMESPACE_GROUP_MAIL_FOOTER + \":\" + FRIENDLY_NAME_GROUP_MAIL_FOOTER;\n \n+\tprivate static final String FED_SN = \"sn\";\n+\tprivate static final String FED_GIVEN_NAME = \"givenName\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MTY4OQ=="}, "originalCommit": {"oid": "1b08b4a0d9f15843a0119e37adff05b45ff34cf7"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2250, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}