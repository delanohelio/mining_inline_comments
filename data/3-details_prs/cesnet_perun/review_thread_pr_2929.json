{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzQxNDA3", "number": 2929, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoyNjo0NFrOEyNnRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDo0N1rOEyRBsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDg3MzAzOnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoyNjo0NFrOHouWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoyNjo0NFrOHouWNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NDQzNw==", "bodyText": "I think this attribute should be optional. Therefore, you can reference it.", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512464437", "createdAt": "2020-10-27T07:26:44Z", "author": {"login": "balcirakpeter"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 424}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDg3NjA5OnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoyNzo1M1rOHouYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoyNzo1M1rOHouYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2NDkxMA==", "bodyText": "I think when there is no groupId, this parameter does not make sense", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512464910", "createdAt": "2020-10-27T07:27:53Z", "author": {"login": "balcirakpeter"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 423}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDkzMzUwOnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzo0Njo0NFrOHou6JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1MjoyNlrOHozlXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzYzNg==", "bodyText": "This referenced attribute is set as required but I think for this scenario it should be optional.", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512473636", "createdAt": "2020-10-27T07:46:44Z", "author": {"login": "balcirakpeter"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 542}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MDIzNw==", "bodyText": "You can use attrsNames which is already declared as a parameter but you have to fix its name. I have noticed it is wrong attrsNames -> attrsNames[]", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512550237", "createdAt": "2020-10-27T09:52:26Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3MzYzNg=="}, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 542}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDk0Mjc1OnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzo0OTozN1rOHou_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzo0OTozN1rOHou_uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ3NTA2Nw==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512475067", "createdAt": "2020-10-27T07:49:37Z", "author": {"login": "balcirakpeter"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 562}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTM2MDk5OnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozNzozNFrOHoy_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozNzozNFrOHoy_Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0MDQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /json/membersManager/deleteMembers:\n          \n          \n            \n              /urlinjsonout/membersManager/deleteMembers:", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512540455", "createdAt": "2020-10-27T09:37:34Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8122,11 +8153,46 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/deleteMembers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQyODM5OnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Mzo1OFrOHozpTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1Mzo1OFrOHozpTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTI0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)\n          \n          \n            \n                      description: status (VALID | INVALID | EXPIRED | DISABLED)", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512551247", "createdAt": "2020-10-27T09:53:58Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g-r:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroupResource\n+      summary: Get all RichMembers with attributes specific for list of attrsNames.\n+        Attributes are defined by member (user) and resource (facility) objects.\n+        It returns also user-facility (in userAttributes of RichMember) and member-resource (in memberAttributes of RichMember) attributes.\n+        Members are defined by group and are filtered by list of allowed statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/resourceId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/membersManager/setStatus:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: setStatus\n+      summary: Set membership status of a member.\n+      parameters:\n+        - $ref: '#/components/parameters/memberId'\n+        - name: status\n+          description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 607}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQzMjE5OnYy", "diffSide": "RIGHT", "path": "perun-openapi/openapi.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDo0N1rOHozrlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NDo0N1rOHozrlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MTgyOQ==", "bodyText": "This is no longer possible, please, remove it.", "url": "https://github.com/CESNET/perun/pull/2929#discussion_r512551829", "createdAt": "2020-10-27T09:54:47Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -8140,6 +8206,241 @@ paths:\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n+  /json/membersManager/findCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersForGroup\n+      summary: Return list of richMembers for specific group by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+        If lookingInParentGroup is true, find all these richMembers only for parentGroup of this group.\n+        If this group is top level group, so find richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/findCompleteRichMembers/attrs:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: FindCompleteRichMembersByAttributes\n+      summary: Return list of richMembers from perun by the searchString with attributes specific for list of attrsNames\n+        and who have only status which is contain in list of statuses. If attrsNames is empty or null\n+        return all attributes for specific richMembers. If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/searchString'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+          default:\n+            $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/createMember/extSource:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberFromExtSource\n+      summary: Creates a new member and sets all member's attributes from the candidate.\n+        Also stores the associated user if doesn't exist. This method is used by the registrar.\n+        This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberFromExtSource\n+              description: \"input to create member from extSource\"\n+              type: object\n+              required:\n+                - vo\n+                - extSourceName\n+                - extSourceType\n+                - login\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                extSourceName: { type: string }\n+                extSourceType: { type: string }\n+                login: { type: string }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+\n+  /json/membersManager/createMember/u:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: CreateMemberForUser\n+      summary: Creates a new member from user. This method also add user to all groups in list.\n+        Empty list of groups is ok, the behavior is then same like in the method without list of groups.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForUser\n+              description: \"input to create member for user\"\n+              type: object\n+              required:\n+                - vo\n+                - user\n+              properties:\n+                vo: { type: integer }\n+                user: { type: integer }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/createMember/c:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: createMemberForCandidate\n+      summary: Creates a new member from candidate returned by the method VosManager.findCandidates\n+        which fills Candidate.userExtSource. This method also add user to all groups in list. Empty list of groups is ok,\n+        the behavior is then same like in the method without list of groups. This method runs asynchronously\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/MemberResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateMemberForCandidate\n+              description: \"input to create member for candidate\"\n+              type: object\n+              required:\n+                - vo\n+                - candidate\n+              properties:\n+                vo: { type: integer }\n+                candidate: { $ref: '#/components/schemas/Candidate' }\n+                groups: { type: array, items: { $ref: '#/components/schemas/Group' } }\n+\n+  /json/membersManager/getCompleteRichMembers/v:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForVo\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the vo and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/voId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroup\n+      summary: Get all RichMembers with attributes specific for list of attrsNames from the group and have only status\n+        which is contain in list of statuses. If attrsNames is empty or null return all attributes for specific richMembers.\n+        If listOfStatuses is empty or null, return all possible statuses. If lookingInParentGroup is true,\n+        get all these richMembers only for parentGroup of this group. If this group is top level group,\n+        so get richMembers from members group.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - $ref: '#/components/parameters/listOfAllowedStatuses'\n+        - $ref: '#/components/parameters/lookingInParentGroup'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/membersManager/getCompleteRichMembers/g-r:\n+    get:\n+      tags:\n+        - MembersManager\n+      operationId: getCompleteRichMembersForGroupResource\n+      summary: Get all RichMembers with attributes specific for list of attrsNames.\n+        Attributes are defined by member (user) and resource (facility) objects.\n+        It returns also user-facility (in userAttributes of RichMember) and member-resource (in memberAttributes of RichMember) attributes.\n+        Members are defined by group and are filtered by list of allowed statuses.\n+      parameters:\n+        - $ref: '#/components/parameters/groupId'\n+        - $ref: '#/components/parameters/resourceId'\n+        - $ref: '#/components/parameters/listOfAttributesNames'\n+        - name: \"allowedStatuses[]\"\n+          description: \"list of allowed statuses List<String>\"\n+          in: query\n+          required: true\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfRichMembersResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/membersManager/setStatus:\n+    post:\n+      tags:\n+        - MembersManager\n+      operationId: setStatus\n+      summary: Set membership status of a member.\n+      parameters:\n+        - $ref: '#/components/parameters/memberId'\n+        - name: status\n+          description: status (VALID | INVALID | SUSPENDED | EXPIRED | DISABLED)\n+          schema:\n+            type: string\n+          in: query\n+          required: true\n+        - name: message\n+          description: \"reason for suspension\"\n+          schema:\n+            type: string\n+          in: query\n+          required: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5d45c8d66040d36523f9710b72db0da85cb7b07"}, "originalPosition": 617}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2329, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}