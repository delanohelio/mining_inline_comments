{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTU2MjYw", "number": 2741, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDowODowMFrOEFAUnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxNzo0NFrOEFPtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjgzNjE1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/SearcherImplApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDowODowMFrOGi-ivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNDowNFrOGi-9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMyOTQ2OA==", "bodyText": "InternalErrorException is runtime. We are removing all ocurrences in other pull-request.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439329468", "createdAt": "2020-06-12T10:08:00Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/SearcherImplApi.java", "diffHunk": "@@ -41,6 +41,27 @@\n \t */\n \tList<User> getUsers(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) throws InternalErrorException;\n \n+\t/**\n+\t * This method get Map of Attributes with searching values and try to find all groups, which have specific attributes in format.\n+\t * Better information about format below. When there are more than 1 attribute in Map, it means all must be true \"looking for all of them\" (AND)\n+\t *\n+\t * IMPORTANT: can't get CORE ATTRIBUTES\n+\t *\n+\t * @param sess perun session\n+\t * @param attributesWithSearchingValues map of attributes\n+\t *        when attribute is type String, so value is string and we are looking for total match (Partial is not supported now, will be supported later by symbol *)\n+\t *        when attribute is type Integer, so value is integer in String and we are looking for total match\n+\t *        when attribute is type List<String>, so value is String and we are looking for at least one total or partial matching element\n+\t *        when attribute is type Map<String> so value is String in format \"key=value\" and we are looking total match of both or if is it \"key\" so we are looking for total match of key\n+\t *        IMPORTANT: In map there is not allowed char '=' in key. First char '=' is delimiter in MAP item key=value!!!\n+\t * @return list of groups who have attributes with specific values (behavior above)\n+\t *        if no group exist, return empty list of groups\n+\t *        if attributeWithSearchingValues is empty, return all groups\n+\t *\n+\t * @throws InternalErrorException\n+\t */\n+\tList<Group> getGroups(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) throws InternalErrorException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe3b0ffba690d09973b354be331ed3ab6dec6f4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNjMyNQ==", "bodyText": "You are right. Removed.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439336325", "createdAt": "2020-06-12T10:24:04Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/implApi/SearcherImplApi.java", "diffHunk": "@@ -41,6 +41,27 @@\n \t */\n \tList<User> getUsers(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) throws InternalErrorException;\n \n+\t/**\n+\t * This method get Map of Attributes with searching values and try to find all groups, which have specific attributes in format.\n+\t * Better information about format below. When there are more than 1 attribute in Map, it means all must be true \"looking for all of them\" (AND)\n+\t *\n+\t * IMPORTANT: can't get CORE ATTRIBUTES\n+\t *\n+\t * @param sess perun session\n+\t * @param attributesWithSearchingValues map of attributes\n+\t *        when attribute is type String, so value is string and we are looking for total match (Partial is not supported now, will be supported later by symbol *)\n+\t *        when attribute is type Integer, so value is integer in String and we are looking for total match\n+\t *        when attribute is type List<String>, so value is String and we are looking for at least one total or partial matching element\n+\t *        when attribute is type Map<String> so value is String in format \"key=value\" and we are looking total match of both or if is it \"key\" so we are looking for total match of key\n+\t *        IMPORTANT: In map there is not allowed char '=' in key. First char '=' is delimiter in MAP item key=value!!!\n+\t * @return list of groups who have attributes with specific values (behavior above)\n+\t *        if no group exist, return empty list of groups\n+\t *        if attributeWithSearchingValues is empty, return all groups\n+\t *\n+\t * @throws InternalErrorException\n+\t */\n+\tList<Group> getGroups(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) throws InternalErrorException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMyOTQ2OA=="}, "originalCommit": {"oid": "0fe3b0ffba690d09973b354be331ed3ab6dec6f4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjg0OTY1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMzowNVrOGi-rOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNDoyM1rOGi-9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTY0Mg==", "bodyText": "list of users -> list of groups, also for the line below", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439331642", "createdAt": "2020-06-12T10:13:05Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "diffHunk": "@@ -7,20 +7,50 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n \n import java.time.LocalDate;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n  * Searcher Class for searching objects by Map of Attributes\n  *\n  * @author Michal Stava <stavamichal@gmail.com>\n  */\n public interface SearcherBl {\n+\t/**\n+\t * Filter output from getGroups by vo_id.\n+\t * @see #getGroups(PerunSession, Map)\n+\t */\n+\tList<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+\n+\t/**\n+\t * This method get Map of Attributes with searching values and try to find all groups, which have specific attributes in format.\n+\t * Better information about format below. When there are more than 1 attribute in Map, it means all must be true \"looking for all of them\" (AND)\n+\t *\n+\t * IMPORTANT: can't get CORE ATTRIBUTES, it will skip any core attribute in map without information about it\n+\t *\n+\t * @param sess perun session\n+\t * @param attributesWithSearchingValues map of attributes names\n+\t *        when attribute is type String, so value is string and we are looking for total match (Partial is not supported now, will be supported later by symbol *)\n+\t *        when attribute is type Integer, so value is integer in String and we are looking for total match\n+\t *        when attribute is type List<String>, so value is String and we are looking for at least one total or partial matching element\n+\t *        when attribute is type Map<String> so value is String in format \"key=value\" and we are looking total match of both or if is it \"key\" so we are looking for total match of key\n+\t *        IMPORTANT: In map there is not allowed char '=' in key. First char '=' is delimiter in MAP item key=value!!!\n+\t * @return list of users who have attributes with specific values (behavior above)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe3b0ffba690d09973b354be331ed3ab6dec6f4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNjQ0NQ==", "bodyText": "Copy&Paste mistake. Changed.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439336445", "createdAt": "2020-06-12T10:24:23Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "diffHunk": "@@ -7,20 +7,50 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n \n import java.time.LocalDate;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n /**\n  * Searcher Class for searching objects by Map of Attributes\n  *\n  * @author Michal Stava <stavamichal@gmail.com>\n  */\n public interface SearcherBl {\n+\t/**\n+\t * Filter output from getGroups by vo_id.\n+\t * @see #getGroups(PerunSession, Map)\n+\t */\n+\tList<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+\n+\t/**\n+\t * This method get Map of Attributes with searching values and try to find all groups, which have specific attributes in format.\n+\t * Better information about format below. When there are more than 1 attribute in Map, it means all must be true \"looking for all of them\" (AND)\n+\t *\n+\t * IMPORTANT: can't get CORE ATTRIBUTES, it will skip any core attribute in map without information about it\n+\t *\n+\t * @param sess perun session\n+\t * @param attributesWithSearchingValues map of attributes names\n+\t *        when attribute is type String, so value is string and we are looking for total match (Partial is not supported now, will be supported later by symbol *)\n+\t *        when attribute is type Integer, so value is integer in String and we are looking for total match\n+\t *        when attribute is type List<String>, so value is String and we are looking for at least one total or partial matching element\n+\t *        when attribute is type Map<String> so value is String in format \"key=value\" and we are looking total match of both or if is it \"key\" so we are looking for total match of key\n+\t *        IMPORTANT: In map there is not allowed char '=' in key. First char '=' is delimiter in MAP item key=value!!!\n+\t * @return list of users who have attributes with specific values (behavior above)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTY0Mg=="}, "originalCommit": {"oid": "0fe3b0ffba690d09973b354be331ed3ab6dec6f4"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM0ODIyOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/SearcherImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo1NjozM1rOGjWxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyMjoxNVrOGjmBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNjQ5Ng==", "bodyText": "The query method does not throw EmptyResultDataAccessException.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439726496", "createdAt": "2020-06-13T09:56:33Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/SearcherImpl.java", "diffHunk": "@@ -64,6 +64,24 @@ public SearcherImpl(DataSource perunPool) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) {\n+\t\tStringBuilder query = new StringBuilder();\n+\t\tquery.append(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups \");\n+\n+\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n+\n+\t\tinsertWhereClausesAndQueryParametersFromAttributes(query, parameters, \"group_attr_values\", \"group\", \"groups\", attributesWithSearchingValues, false);\n+\n+\t\ttry {\n+\t\t\treturn jdbc.query(query.toString(), parameters, GroupsManagerImpl.GROUP_MAPPER);\n+\t\t} catch (EmptyResultDataAccessException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjIzMw==", "bodyText": "Fixed.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439976233", "createdAt": "2020-06-15T07:22:15Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/SearcherImpl.java", "diffHunk": "@@ -64,6 +64,24 @@ public SearcherImpl(DataSource perunPool) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<Attribute, String> attributesWithSearchingValues) {\n+\t\tStringBuilder query = new StringBuilder();\n+\t\tquery.append(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups \");\n+\n+\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n+\n+\t\tinsertWhereClausesAndQueryParametersFromAttributes(query, parameters, \"group_attr_values\", \"group\", \"groups\", attributesWithSearchingValues, false);\n+\n+\t\ttry {\n+\t\t\treturn jdbc.query(query.toString(), parameters, GroupsManagerImpl.GROUP_MAPPER);\n+\t\t} catch (EmptyResultDataAccessException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNjQ5Ng=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1MzQzOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDowNzo0NVrOGjW0Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyNToxN1rOGjmG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzE1NA==", "bodyText": "Up to discussion (performance): Both methods getGroups should firstly retrieve all necessary groups. Meaning, that this method retrieves all Vo groups and the second one retrieves all groups. Then they could both use some private method which takes these groups as a parameter alongside the map of attributes. According to these parameters, the private method returns only sufficient groups.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727154", "createdAt": "2020-06-13T10:07:45Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NzcxMg==", "bodyText": "You are right, there is a way to do it more efficiently, but we would need to change methods in the implementation layer adequately. When we found this method is too slow, we can change it later.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439977712", "createdAt": "2020-06-15T07:25:17Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzE1NA=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NTE1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMTowMFrOGjW1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyNjoxMVrOGjmIxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzM3Nw==", "bodyText": "Unused import", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727377", "createdAt": "2020-06-13T10:11:00Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "diffHunk": "@@ -7,20 +7,48 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n \n import java.time.LocalDate;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3ODE4MQ==", "bodyText": "Removed all unused imports in the class.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439978181", "createdAt": "2020-06-15T07:26:11Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/bl/SearcherBl.java", "diffHunk": "@@ -7,20 +7,48 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n \n import java.time.LocalDate;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzM3Nw=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NTY1OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMjowN1rOGjW1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyNzo1OFrOGjmMPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzQzNg==", "bodyText": "Unused import", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727436", "createdAt": "2020-06-13T10:12:07Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -9,12 +9,14 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n import cz.metacentrum.perun.core.bl.PerunBl;\n import cz.metacentrum.perun.core.bl.SearcherBl;\n import cz.metacentrum.perun.core.implApi.SearcherImplApi;\n+import org.apache.logging.log4j.util.Strings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTA3MA==", "bodyText": "Removed all unused imports in the class.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439979070", "createdAt": "2020-06-15T07:27:58Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -9,12 +9,14 @@\n import cz.metacentrum.perun.core.api.PerunSession;\n import cz.metacentrum.perun.core.api.Resource;\n import cz.metacentrum.perun.core.api.User;\n+import cz.metacentrum.perun.core.api.Vo;\n import cz.metacentrum.perun.core.api.exceptions.AttributeNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n import cz.metacentrum.perun.core.bl.PerunBl;\n import cz.metacentrum.perun.core.bl.SearcherBl;\n import cz.metacentrum.perun.core.implApi.SearcherImplApi;\n+import org.apache.logging.log4j.util.Strings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzQzNg=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NTcwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMjoxNFrOGjW1UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyODozMFrOGjmNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzQ0MQ==", "bodyText": "Unused import", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727441", "createdAt": "2020-06-13T10:12:14Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -23,7 +25,10 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTMzMA==", "bodyText": "Removed all unused imports in the class.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439979330", "createdAt": "2020-06-15T07:28:30Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -23,7 +25,10 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzQ0MQ=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NTc0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMjoyMFrOGjW1Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMjoyMFrOGjW1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzQ0Ng==", "bodyText": "Unused import", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727446", "createdAt": "2020-06-13T10:12:20Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -23,7 +25,10 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n+import java.util.function.Function;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NjM0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxMzo0NFrOGjW1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzoyOToyM1rOGjmO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzUyOQ==", "bodyText": "You can return the result of the method right away.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727529", "createdAt": "2020-06-13T10:13:44Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");\n+\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, name);\n+\t\t\tif(getPerunBl().getAttributesManagerBl().isCoreAttribute(sess, attrDef)) {\n+\t\t\t\t//skip core attributes, there are unsupported at this moment\n+\t\t\t\tcontinue;\n+\t\t\t} else {\n+\t\t\t\tmapOfAttrsWithValues.put(new Attribute(attrDef), attributesWithSearchingValues.get(name));\n+\t\t\t}\n+\t\t}\n+\n+\t\tList<Group> groupsFromAttributes = getSearcherImpl().getGroups(sess, mapOfAttrsWithValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3OTczMg==", "bodyText": "Changed.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439979732", "createdAt": "2020-06-15T07:29:23Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");\n+\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, name);\n+\t\t\tif(getPerunBl().getAttributesManagerBl().isCoreAttribute(sess, attrDef)) {\n+\t\t\t\t//skip core attributes, there are unsupported at this moment\n+\t\t\t\tcontinue;\n+\t\t\t} else {\n+\t\t\t\tmapOfAttrsWithValues.put(new Attribute(attrDef), attributesWithSearchingValues.get(name));\n+\t\t\t}\n+\t\t}\n+\n+\t\tList<Group> groupsFromAttributes = getSearcherImpl().getGroups(sess, mapOfAttrsWithValues);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzUyOQ=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1NjkxOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxNTowN1rOGjW1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzozMDo1MFrOGjmRtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzYwOA==", "bodyText": "Unnecessary continue statement. You can negate the if statement so you do not have to use else branch.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727608", "createdAt": "2020-06-13T10:15:07Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");\n+\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, name);\n+\t\t\tif(getPerunBl().getAttributesManagerBl().isCoreAttribute(sess, attrDef)) {\n+\t\t\t\t//skip core attributes, there are unsupported at this moment\n+\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4MDQ2OQ==", "bodyText": "I want to have it this way to show that there should be part of the code but that part is skipped on purpose.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439980469", "createdAt": "2020-06-15T07:30:50Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");\n+\t\t\tAttributeDefinition attrDef = perunBl.getAttributesManagerBl().getAttributeDefinition(sess, name);\n+\t\t\tif(getPerunBl().getAttributesManagerBl().isCoreAttribute(sess, attrDef)) {\n+\t\t\t\t//skip core attributes, there are unsupported at this moment\n+\t\t\t\tcontinue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzYwOA=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM1ODIwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMDoxNzo0NFrOGjW2oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNzozMTozM1rOGjmTFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzc3Nw==", "bodyText": "I prefer isEmpty() rather than equals(\"\"). It is more readable and I've read that isEmpty() is a little bit quicker than the other approach.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439727777", "createdAt": "2020-06-13T10:17:44Z", "author": {"login": "balcirakpeter"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk4MDgyMA==", "bodyText": "Me too, copy&paste problem. Fixed.", "url": "https://github.com/CESNET/perun/pull/2741#discussion_r439980820", "createdAt": "2020-06-15T07:31:33Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/blImpl/SearcherBlImpl.java", "diffHunk": "@@ -84,6 +89,38 @@ public SearcherBlImpl(SearcherImplApi searcherImpl) {\n \t\treturn this.getUsersForCoreAttributesByMapOfAttributes(sess, mapOfCoreAttributesWithValues);\n \t}\n \n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Vo vo, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\treturn this.getGroups(sess, attributesWithSearchingValues).stream()\n+\t\t\t.filter( group -> group.getVoId() == vo.getId())\n+\t\t\t.collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tpublic List<Group> getGroups(PerunSession sess, Map<String, String> attributesWithSearchingValues) throws AttributeNotExistsException {\n+\t\t//If there is no attribute, so every group match\n+\t\tif(attributesWithSearchingValues == null || attributesWithSearchingValues.isEmpty()) {\n+\t\t\treturn perunBl.getVosManagerBl().getVos(sess).stream()\n+\t\t\t\t.flatMap( vo -> perunBl.getGroupsManagerBl().getAllGroups(sess, vo).stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t}\n+\n+\t\tMap<Attribute, String> mapOfAttrsWithValues = new HashMap<>();\n+\t\tfor(String name: attributesWithSearchingValues.keySet()) {\n+\t\t\tif(name == null || name.equals(\"\")) throw new AttributeNotExistsException(\"There is attribute with no specific name!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNzc3Nw=="}, "originalCommit": {"oid": "34ad0191139d27399dda0653a9fc94371855c42a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1888, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}