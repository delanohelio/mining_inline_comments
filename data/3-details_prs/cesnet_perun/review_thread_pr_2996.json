{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDI0NzUx", "number": 2996, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjowOTowOVrOE8sUkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozOTo1M1rOE9Kq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDc2MTc4OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjowOTowOVrOH498ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo1ODo1OFrOH5E0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5NzIyNg==", "bodyText": "validationLink is unused in the later code. Maybe it get mixed with linkLocation in the template?", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529497226", "createdAt": "2020-11-24T12:09:09Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODk2NA==", "bodyText": "Yes, I used linkLocation instead of validation link. It should be fixed now.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529518964", "createdAt": "2020-11-24T12:47:46Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5NzIyNg=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyNDkyMQ==", "bodyText": "It remained in defaultBody as directly joined strings. Maybe you should just prepare all replacable strings first and then use placeholders (eg. {link}) also in default template body. This might apply to other mail types too.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529524921", "createdAt": "2020-11-24T12:57:39Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5NzIyNg=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwOTkxNg==", "bodyText": "You are right, it is still in the body. I have replaced that.\nIf you are using defaultBody or defaultSubject I would prefer to not doing replacements. It is better to have it ready before using.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529609916", "createdAt": "2020-11-24T14:58:58Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5NzIyNg=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDc2ODE0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjoxMDo0NlrOH4-AQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0Nzo0M1rOH4_RUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5ODE3OA==", "bodyText": "Please update javadoc, there is no namespace and id in the method params.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529498178", "createdAt": "2020-11-24T12:10:46Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);\n \t\t}\n+\t}\n \n-\t\t// get validation link params\n+\t/**\n+\t * Prepare validity time of validation link.\n+\t *\n+\t * @return validity as formatted string\n+\t */\n+\tprivate static String prepareValidityTo() {\n+\t\t//TODO: at this moment validity window is used the same for password reset as for account activation\n+\t\tString validity = Integer.toString(BeansUtils.getCoreConfig().getPwdresetValidationWindow());\n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n+\t\tLocalDateTime localDateTime = LocalDateTime.now().plusHours(Integer.parseInt(validity));\n+\t\treturn dtf.format(localDateTime);\n+\t}\n+\n+\t/**\n+\t * Prepare validation link for password reset or account activation.\n+\t *\n+\t * @param url base URL of Perun instance\n+\t * @param linkLocation location of validation link under specific Perun instance (for example '/non/pwd-reset/')\n+\t * @param id ID of request\n+\t * @param user user to who link will be send\n+\t * @param namespace namespace to processing request for\n+\t *\n+\t * @return link of validation as String\n+\t */\n+\tprivate static String prepareValidationLinkForPasswordResetAndAccountActivation(String url, String linkLocation, int id, User user, String namespace) {\n+\t\tnotNull(user, \"user\");\n+\t\tnotNull(url, \"url\");\n+\t\tnotNull(linkLocation, \"linkLocation\");\n+\n+\t\t// prepare arguments\n \t\tString i = cipherInput(String.valueOf(user.getId()), false);\n \t\tString m = cipherInput(String.valueOf(id), false);\n \n-\t\ttry {\n+\t\tStringBuilder link = new StringBuilder();\n \n+\t\ttry {\n \t\t\tURL urlObject = new URL(url);\n \n-\t\t\tStringBuilder link = new StringBuilder();\n-\n \t\t\tlink.append(urlObject.getProtocol());\n \t\t\tlink.append(\"://\");\n \t\t\tlink.append(urlObject.getHost());\n-\t\t\t// reset link uses non-authz\n-\t\t\tlink.append(\"/non/pwd-reset/\");\n+\t\t\tlink.append(linkLocation);\n \t\t\tlink.append(\"?i=\");\n \t\t\tlink.append(URLEncoder.encode(i, \"UTF-8\"));\n \t\t\tlink.append(\"&m=\");\n \t\t\tlink.append(URLEncoder.encode(m, \"UTF-8\"));\n-\t\t\t// append login-namespace so GUI is themes and password checked by namespace rules\n \t\t\tlink.append(\"&login-namespace=\");\n \t\t\tlink.append(URLEncoder.encode(namespace, \"UTF-8\"));\n-\n-\t\t\t//validity formatting\n-\t\t\tString validity = Integer.toString(BeansUtils.getCoreConfig().getPwdresetValidationWindow());\n-\t\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n-\t\t\tLocalDateTime localDateTime = LocalDateTime.now().plusHours(Integer.parseInt(validity));\n-\t\t\tString validityFormatted = dtf.format(localDateTime);\n-\n-\t\t\t// Build message en\n-\t\t\tString textEn = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to reset your password in namespace \\\"\" + namespace + \"\\\".\" +\n-\t\t\t\t\t\"\\n\\nPlease visit the link below, where you can set new password:\\n\\n\" + link + \"\\n\\n\" +\n-\t\t\t\t\t\"Link is valid till \" + validityFormatted + \"\\n\\n\" +\n-\t\t\t\t\t\"Message is automatically generated.\" +\n-\t\t\t\t\t\"\\n----------------------------------------------------------------\" +\n-\t\t\t\t\t\"\\nPerun - Identity & Access Management System\";\n-\n-\n-\t\t\tif (messageTemplate == null) {\n-\t\t\t\tmessage.setText(textEn);\n-\t\t\t} else {\n-\n-\t\t\t\t// allow enforcing per-language links\n-\t\t\t\tif (messageTemplate.contains(\"{link-\")) {\n-\t\t\t\t\tPattern pattern = Pattern.compile(\"\\\\{link-[^}]+}\");\n-\t\t\t\t\tMatcher matcher = pattern.matcher(messageTemplate);\n-\t\t\t\t\twhile (matcher.find()) {\n-\n-\t\t\t\t\t\t// whole \"{link-something}\"\n-\t\t\t\t\t\tString toSubstitute = matcher.group(0);\n-\t\t\t\t\t\tString langLink = link.toString();\n-\n-\t\t\t\t\t\tPattern namespacePattern = Pattern.compile(\"-(.*?)}\");\n-\t\t\t\t\t\tMatcher m2 = namespacePattern.matcher(toSubstitute);\n-\t\t\t\t\t\tif (m2.find()) {\n-\t\t\t\t\t\t\t// only language \"cs\", \"en\",...\n-\t\t\t\t\t\t\tString lang = m2.group(1);\n-\t\t\t\t\t\t\tlangLink = langLink + \"&locale=\" + lang;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tmessageTemplate = messageTemplate.replace(toSubstitute, langLink);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tmessageTemplate = messageTemplate.replace(\"{link}\", link);\n-\t\t\t\t}\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{displayName}\", user.getDisplayName());\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{namespace}\", namespace);\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{validity}\", validityFormatted);\n-\t\t\t\tmessage.setText(messageTemplate);\n-\t\t\t}\n-\n-\t\t\tmailSender.send(message);\n-\n-\t\t} catch (MailException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to send mail for password reset.\", ex);\n-\t\t} catch (UnsupportedEncodingException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to encode URL for password reset.\", ex);\n \t\t} catch (MalformedURLException ex) {\n \t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t} catch (UnsupportedEncodingException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to encode URL for password reset.\", ex);\n \t\t}\n \n+\t\treturn link.toString();\n \t}\n \n \t/**\n-\t * Sends email to user confirming his password was changed.\n+\t * Prepare validation link for email change\n \t *\n-\t * @param user user to send notification for\n-\t * @param email user's email to send notification to\n-\t * @param namespace namespace the password was re-set\n-\t * @param login login of user\n-\t * @param subject Subject from template or null\n-\t * @param content Message from template or null\n+\t * @param url base URL of Perun instance\n+\t * @param linkLocation location of validation link under specific Perun instance (for example '/non/pwd-reset/')\n+\t * @param id ID of request\n+\t * @param user user to who link will be send\n+\t * @param namespace namespace to processing request for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 535}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODkyOA==", "bodyText": "Right, fixed.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529518928", "createdAt": "2020-11-24T12:47:43Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);\n \t\t}\n+\t}\n \n-\t\t// get validation link params\n+\t/**\n+\t * Prepare validity time of validation link.\n+\t *\n+\t * @return validity as formatted string\n+\t */\n+\tprivate static String prepareValidityTo() {\n+\t\t//TODO: at this moment validity window is used the same for password reset as for account activation\n+\t\tString validity = Integer.toString(BeansUtils.getCoreConfig().getPwdresetValidationWindow());\n+\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n+\t\tLocalDateTime localDateTime = LocalDateTime.now().plusHours(Integer.parseInt(validity));\n+\t\treturn dtf.format(localDateTime);\n+\t}\n+\n+\t/**\n+\t * Prepare validation link for password reset or account activation.\n+\t *\n+\t * @param url base URL of Perun instance\n+\t * @param linkLocation location of validation link under specific Perun instance (for example '/non/pwd-reset/')\n+\t * @param id ID of request\n+\t * @param user user to who link will be send\n+\t * @param namespace namespace to processing request for\n+\t *\n+\t * @return link of validation as String\n+\t */\n+\tprivate static String prepareValidationLinkForPasswordResetAndAccountActivation(String url, String linkLocation, int id, User user, String namespace) {\n+\t\tnotNull(user, \"user\");\n+\t\tnotNull(url, \"url\");\n+\t\tnotNull(linkLocation, \"linkLocation\");\n+\n+\t\t// prepare arguments\n \t\tString i = cipherInput(String.valueOf(user.getId()), false);\n \t\tString m = cipherInput(String.valueOf(id), false);\n \n-\t\ttry {\n+\t\tStringBuilder link = new StringBuilder();\n \n+\t\ttry {\n \t\t\tURL urlObject = new URL(url);\n \n-\t\t\tStringBuilder link = new StringBuilder();\n-\n \t\t\tlink.append(urlObject.getProtocol());\n \t\t\tlink.append(\"://\");\n \t\t\tlink.append(urlObject.getHost());\n-\t\t\t// reset link uses non-authz\n-\t\t\tlink.append(\"/non/pwd-reset/\");\n+\t\t\tlink.append(linkLocation);\n \t\t\tlink.append(\"?i=\");\n \t\t\tlink.append(URLEncoder.encode(i, \"UTF-8\"));\n \t\t\tlink.append(\"&m=\");\n \t\t\tlink.append(URLEncoder.encode(m, \"UTF-8\"));\n-\t\t\t// append login-namespace so GUI is themes and password checked by namespace rules\n \t\t\tlink.append(\"&login-namespace=\");\n \t\t\tlink.append(URLEncoder.encode(namespace, \"UTF-8\"));\n-\n-\t\t\t//validity formatting\n-\t\t\tString validity = Integer.toString(BeansUtils.getCoreConfig().getPwdresetValidationWindow());\n-\t\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n-\t\t\tLocalDateTime localDateTime = LocalDateTime.now().plusHours(Integer.parseInt(validity));\n-\t\t\tString validityFormatted = dtf.format(localDateTime);\n-\n-\t\t\t// Build message en\n-\t\t\tString textEn = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to reset your password in namespace \\\"\" + namespace + \"\\\".\" +\n-\t\t\t\t\t\"\\n\\nPlease visit the link below, where you can set new password:\\n\\n\" + link + \"\\n\\n\" +\n-\t\t\t\t\t\"Link is valid till \" + validityFormatted + \"\\n\\n\" +\n-\t\t\t\t\t\"Message is automatically generated.\" +\n-\t\t\t\t\t\"\\n----------------------------------------------------------------\" +\n-\t\t\t\t\t\"\\nPerun - Identity & Access Management System\";\n-\n-\n-\t\t\tif (messageTemplate == null) {\n-\t\t\t\tmessage.setText(textEn);\n-\t\t\t} else {\n-\n-\t\t\t\t// allow enforcing per-language links\n-\t\t\t\tif (messageTemplate.contains(\"{link-\")) {\n-\t\t\t\t\tPattern pattern = Pattern.compile(\"\\\\{link-[^}]+}\");\n-\t\t\t\t\tMatcher matcher = pattern.matcher(messageTemplate);\n-\t\t\t\t\twhile (matcher.find()) {\n-\n-\t\t\t\t\t\t// whole \"{link-something}\"\n-\t\t\t\t\t\tString toSubstitute = matcher.group(0);\n-\t\t\t\t\t\tString langLink = link.toString();\n-\n-\t\t\t\t\t\tPattern namespacePattern = Pattern.compile(\"-(.*?)}\");\n-\t\t\t\t\t\tMatcher m2 = namespacePattern.matcher(toSubstitute);\n-\t\t\t\t\t\tif (m2.find()) {\n-\t\t\t\t\t\t\t// only language \"cs\", \"en\",...\n-\t\t\t\t\t\t\tString lang = m2.group(1);\n-\t\t\t\t\t\t\tlangLink = langLink + \"&locale=\" + lang;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tmessageTemplate = messageTemplate.replace(toSubstitute, langLink);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tmessageTemplate = messageTemplate.replace(\"{link}\", link);\n-\t\t\t\t}\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{displayName}\", user.getDisplayName());\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{namespace}\", namespace);\n-\t\t\t\tmessageTemplate = messageTemplate.replace(\"{validity}\", validityFormatted);\n-\t\t\t\tmessage.setText(messageTemplate);\n-\t\t\t}\n-\n-\t\t\tmailSender.send(message);\n-\n-\t\t} catch (MailException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to send mail for password reset.\", ex);\n-\t\t} catch (UnsupportedEncodingException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to encode URL for password reset.\", ex);\n \t\t} catch (MalformedURLException ex) {\n \t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t} catch (UnsupportedEncodingException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to encode URL for password reset.\", ex);\n \t\t}\n \n+\t\treturn link.toString();\n \t}\n \n \t/**\n-\t * Sends email to user confirming his password was changed.\n+\t * Prepare validation link for email change\n \t *\n-\t * @param user user to send notification for\n-\t * @param email user's email to send notification to\n-\t * @param namespace namespace the password was re-set\n-\t * @param login login of user\n-\t * @param subject Subject from template or null\n-\t * @param content Message from template or null\n+\t * @param url base URL of Perun instance\n+\t * @param linkLocation location of validation link under specific Perun instance (for example '/non/pwd-reset/')\n+\t * @param id ID of request\n+\t * @param user user to who link will be send\n+\t * @param namespace namespace to processing request for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5ODE3OA=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 535}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDc4MjUwOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjoxNDo1NFrOH4-Iyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo1OTo1M1rOH5E3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMDM2Mw==", "bodyText": "Please do explicit logging in error mode for that exception. Thank you.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529500363", "createdAt": "2020-11-24T12:14:54Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODg5Nw==", "bodyText": "Added.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529518897", "createdAt": "2020-11-24T12:47:40Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMDM2Mw=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMjY4MA==", "bodyText": "Location of the error in the code should be visible from the stacktrace of the passed ex. I would shorten the error message like: Unable to send mail to \"email\". or something like this.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529522680", "createdAt": "2020-11-24T12:54:01Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMDM2Mw=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxMDYzNw==", "bodyText": "Changed.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529610637", "createdAt": "2020-11-24T14:59:53Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1112,148 +1322,116 @@ public static void sendPasswordResetEmail(User user, String email, String namesp\n \t\tmessage.setTo(email);\n \t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n \n-\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\t\t// set subject and body\n+\t\tmessage.setSubject(subjectOfEmail);\n+\t\tmessage.setText(bodyOfEmail);\n \n-\t\tif (subject == null) {\n-\t\t\tmessage.setSubject(\"[\" + instanceName + \"] Password reset in namespace: \" + namespace);\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{namespace}\", namespace);\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n+\t\t// send email\n+\t\ttry {\n+\t\t\tmailSender.send(message);\n+\t\t} catch (MailException ex) {\n+\t\t\tthrow new InternalErrorException(\"Unable to send email.\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMDM2Mw=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDc5ODEyOnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjoxOTozM1rOH4-Sfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0NzozOFrOH4_RIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMjg0Ng==", "bodyText": "We must append &activation=true so that app for password reset knows, it should behave as an account activation. Or you can handle this in link preparation method.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529502846", "createdAt": "2020-11-24T12:19:33Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);\n \n-\t\t\tStringBuilder link = new StringBuilder();\n+\t\tString defaultSubject = \"[\"+instanceName+\"] New email address verification\";\n+\t\tString defaultBody = \"Dear \"+user.getDisplayName()+\",\\n\\nWe've received request to change your preferred email address to: \"+email+\".\"+\n+\t\t\t\"\\n\\nTo confirm this change please use link below:\\n\\n\"+linkLocation+\"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n \n-\t\t\tlink.append(urlObject.getProtocol());\n-\t\t\tlink.append(\"://\");\n-\t\t\tlink.append(urlObject.getHost());\n-\t\t\tlink.append(path);\n-\t\t\tlink.append(\"?i=\");\n-\t\t\tlink.append(URLEncoder.encode(i, \"UTF-8\"));\n-\t\t\tlink.append(\"&m=\");\n-\t\t\tlink.append(URLEncoder.encode(m, \"UTF-8\"));\n-\t\t\tlink.append(\"&u=\" + user.getId());\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n \n-\t\t\t// Build message\n-\t\t\tString text = \"Dear \"+user.getDisplayName()+\",\\n\\nWe've received request to change your preferred email address to: \"+email+\".\"+\n-\t\t\t\t\t\"\\n\\nTo confirm this change please use link below:\\n\\n\"+link+\"\\n\\n\" +\n-\t\t\t\t\t\"Message is automatically generated.\" +\n-\t\t\t\t\t\"\\n----------------------------------------------------------------\" +\n-\t\t\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{link}\", linkLocation);\n+\t\tcontent = prepareBodyOfEmail(content, defaultBody, bodyParametersToReplace);\n \n-\t\t\tif (content == null || content.isEmpty()) {\n-\t\t\t\tmessage.setText(text);\n-\t\t\t} else {\n-\t\t\t\tcontent = content.replace(\"{link}\",link);\n-\t\t\t\tmessage.setText(content);\n-\t\t\t}\n+\t\tsendEmail(subject, content, email);\n+\t}\n \n-\t\t\tmailSender.send(message);\n+\t/**\n+\t * Sends email with link to non-authz account activation where user can activate his account by setting a password.\n+\t *\n+\t * @param user user to send notification for\n+\t * @param email user's email to send notification to\n+\t * @param namespace namespace to reset password in\n+\t * @param url base URL of Perun instance\n+\t * @param id ID of account activation request\n+\t * @param messageTemplate message of the email (use default if null)\n+\t * @param subject subject of the email (use default if null)\n+\t */\n+\tpublic static void sendAccountActivationEmail(User user, String email, String namespace, String url, int id, String messageTemplate, String subject) {\n+\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\t} catch (UnsupportedEncodingException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to encode validation URL for mail change.\", ex);\n-\t\t} catch (MalformedURLException ex) {\n-\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\tString validationLink = prepareValidationLinkForPasswordResetAndAccountActivation(url, \"/non/pwd-reset/\", id, user, namespace);\n+\t\tString validityTo = prepareValidityTo();\n+\n+\t\tString defaultSubject = \"[\" + instanceName + \"] Account activation in namespace: \" + namespace;\n+\t\tString defaultBody = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to activate your account in namespace \\\"\" + namespace + \"\\\".\" +\n+\t\t\t\"\\n\\nPlease visit the link below, where you can activate your account:\\n\\n\" + validationLink + \"\\n\\n\" +\n+\t\t\t\"Link is valid till \" + validityTo + \"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubjectParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n+\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{displayName}\", user.getDisplayName());\n+\t\tbodyParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tbodyParametersToReplace.put(\"{validity}\", validityTo);\n+\t\t// allow enforcing per-language links\n+\t\tif (messageTemplate.contains(\"{link-\")) {\n+\t\t\tPattern pattern = Pattern.compile(\"\\\\{link-[^}]+}\");\n+\t\t\tMatcher matcher = pattern.matcher(messageTemplate);\n+\t\t\twhile (matcher.find()) {\n+\t\t\t\t// whole \"{link-something}\"\n+\t\t\t\tString toSubstitute = matcher.group(0);\n+\t\t\t\tString langLink = validationLink;\n+\n+\t\t\t\tPattern namespacePattern = Pattern.compile(\"-(.*?)}\");\n+\t\t\t\tMatcher m2 = namespacePattern.matcher(toSubstitute);\n+\t\t\t\tif (m2.find()) {\n+\t\t\t\t\t// only language \"cs\", \"en\",...\n+\t\t\t\t\tString lang = m2.group(1);\n+\t\t\t\t\tlangLink = langLink + \"&locale=\" + lang;\n+\t\t\t\t}\n+\t\t\t\tbodyParametersToReplace.put(toSubstitute, langLink);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tbodyParametersToReplace.put(\"{link}\", validationLink);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODg4Mg==", "bodyText": "Added to preparation of link.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r529518882", "createdAt": "2020-11-24T12:47:38Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1009,84 +1007,106 @@ public static String getMessageAuthenticationCode(String input) {\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendValidationEmail(User user, String url, String email, int changeId, String subject, String content, String customUrlPath) {\n-\n-\t\tJavaMailSender mailSender = BeansUtils.getDefaultMailSender();\n-\n-\t\t// create message\n-\t\tSimpleMailMessage message = new SimpleMailMessage();\n-\t\tmessage.setTo(email);\n-\t\tmessage.setFrom(BeansUtils.getCoreConfig().getMailchangeBackupFrom());\n-\n \t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\tif (subject == null ||subject.isEmpty()) {\n-\t\t\tmessage.setSubject(\"[\"+instanceName+\"] New email address verification\");\n-\t\t} else {\n-\t\t\tsubject = subject.replace(\"{instanceName}\", instanceName);\n-\t\t\tmessage.setSubject(subject);\n-\t\t}\n-\n-\t\t// get validation link params\n-\t\tString i = Integer.toString(changeId, Character.MAX_RADIX);\n-\t\tString m = Utils.getMessageAuthenticationCode(i);\n-\n+\t\t// use default if unknown rpc path\n+\t\tString linkLocation = \"/gui/\";\n \t\ttry {\n-\n-\t\t\t// !! There is a hard-requirement for Perun instance\n-\t\t\t// to host GUI on same server as RPC like: \"serverUrl/gui/\"\n-\n \t\t\tURL urlObject = new URL(url);\n-\n-\t\t\t// use default if unknown rpc path\n-\t\t\tString path = \"/gui/\";\n-\n-\t\t\tif (customUrlPath != null) {\n-\t\t\t\tpath = customUrlPath;\n+\t\t\t//if there is custom path, use it, if not, try to use specific path\n+\t\t\tif (customUrlPath != null && !customUrlPath.isEmpty()) {\n+\t\t\t\tlinkLocation = customUrlPath;\n \t\t\t} else if (urlObject.getPath().contains(\"/krb/\")) {\n-\t\t\t\tpath = \"/krb/gui/\";\n+\t\t\t\tlinkLocation = \"/krb/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/fed/\")) {\n-\t\t\t\tpath = \"/fed/gui/\";\n+\t\t\t\tlinkLocation = \"/fed/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/ceitec/\")) {\n \t\t\t\t// to support ceitec proxy, since it gets more fed attributes than IDM SP.\n-\t\t\t\tpath = \"/ceitec/gui/\";\n+\t\t\t\tlinkLocation = \"/ceitec/gui/\";\n \t\t\t} else if (urlObject.getPath().contains(\"/cert/\")) {\n-\t\t\t\tpath = \"/cert/gui/\";\n+\t\t\t\tlinkLocation = \"/cert/gui/\";\n \t\t\t}\n+\t\t} catch (MalformedURLException ex) {\n+\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\t}\n+\t\tString validationLink = prepareValidationLinkForEmailChange(url, linkLocation, changeId, user);\n \n-\t\t\tStringBuilder link = new StringBuilder();\n+\t\tString defaultSubject = \"[\"+instanceName+\"] New email address verification\";\n+\t\tString defaultBody = \"Dear \"+user.getDisplayName()+\",\\n\\nWe've received request to change your preferred email address to: \"+email+\".\"+\n+\t\t\t\"\\n\\nTo confirm this change please use link below:\\n\\n\"+linkLocation+\"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n \n-\t\t\tlink.append(urlObject.getProtocol());\n-\t\t\tlink.append(\"://\");\n-\t\t\tlink.append(urlObject.getHost());\n-\t\t\tlink.append(path);\n-\t\t\tlink.append(\"?i=\");\n-\t\t\tlink.append(URLEncoder.encode(i, \"UTF-8\"));\n-\t\t\tlink.append(\"&m=\");\n-\t\t\tlink.append(URLEncoder.encode(m, \"UTF-8\"));\n-\t\t\tlink.append(\"&u=\" + user.getId());\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n \n-\t\t\t// Build message\n-\t\t\tString text = \"Dear \"+user.getDisplayName()+\",\\n\\nWe've received request to change your preferred email address to: \"+email+\".\"+\n-\t\t\t\t\t\"\\n\\nTo confirm this change please use link below:\\n\\n\"+link+\"\\n\\n\" +\n-\t\t\t\t\t\"Message is automatically generated.\" +\n-\t\t\t\t\t\"\\n----------------------------------------------------------------\" +\n-\t\t\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{link}\", linkLocation);\n+\t\tcontent = prepareBodyOfEmail(content, defaultBody, bodyParametersToReplace);\n \n-\t\t\tif (content == null || content.isEmpty()) {\n-\t\t\t\tmessage.setText(text);\n-\t\t\t} else {\n-\t\t\t\tcontent = content.replace(\"{link}\",link);\n-\t\t\t\tmessage.setText(content);\n-\t\t\t}\n+\t\tsendEmail(subject, content, email);\n+\t}\n \n-\t\t\tmailSender.send(message);\n+\t/**\n+\t * Sends email with link to non-authz account activation where user can activate his account by setting a password.\n+\t *\n+\t * @param user user to send notification for\n+\t * @param email user's email to send notification to\n+\t * @param namespace namespace to reset password in\n+\t * @param url base URL of Perun instance\n+\t * @param id ID of account activation request\n+\t * @param messageTemplate message of the email (use default if null)\n+\t * @param subject subject of the email (use default if null)\n+\t */\n+\tpublic static void sendAccountActivationEmail(User user, String email, String namespace, String url, int id, String messageTemplate, String subject) {\n+\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n \n-\t\t} catch (UnsupportedEncodingException ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to encode validation URL for mail change.\", ex);\n-\t\t} catch (MalformedURLException ex) {\n-\t\t\tthrow new InternalErrorException(\"Not valid URL of running Perun instance.\", ex);\n+\t\tString validationLink = prepareValidationLinkForPasswordResetAndAccountActivation(url, \"/non/pwd-reset/\", id, user, namespace);\n+\t\tString validityTo = prepareValidityTo();\n+\n+\t\tString defaultSubject = \"[\" + instanceName + \"] Account activation in namespace: \" + namespace;\n+\t\tString defaultBody = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to activate your account in namespace \\\"\" + namespace + \"\\\".\" +\n+\t\t\t\"\\n\\nPlease visit the link below, where you can activate your account:\\n\\n\" + validationLink + \"\\n\\n\" +\n+\t\t\t\"Link is valid till \" + validityTo + \"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubjectParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n+\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{displayName}\", user.getDisplayName());\n+\t\tbodyParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tbodyParametersToReplace.put(\"{validity}\", validityTo);\n+\t\t// allow enforcing per-language links\n+\t\tif (messageTemplate.contains(\"{link-\")) {\n+\t\t\tPattern pattern = Pattern.compile(\"\\\\{link-[^}]+}\");\n+\t\t\tMatcher matcher = pattern.matcher(messageTemplate);\n+\t\t\twhile (matcher.find()) {\n+\t\t\t\t// whole \"{link-something}\"\n+\t\t\t\tString toSubstitute = matcher.group(0);\n+\t\t\t\tString langLink = validationLink;\n+\n+\t\t\t\tPattern namespacePattern = Pattern.compile(\"-(.*?)}\");\n+\t\t\t\tMatcher m2 = namespacePattern.matcher(toSubstitute);\n+\t\t\t\tif (m2.find()) {\n+\t\t\t\t\t// only language \"cs\", \"en\",...\n+\t\t\t\t\tString lang = m2.group(1);\n+\t\t\t\t\tlangLink = langLink + \"&locale=\" + lang;\n+\t\t\t\t}\n+\t\t\t\tbodyParametersToReplace.put(toSubstitute, langLink);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tbodyParametersToReplace.put(\"{link}\", validationLink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUwMjg0Ng=="}, "originalCommit": {"oid": "26ed76c48f91e0a5c28c9f5b4501b6ed7deede5e"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTczNDA0OnYy", "diffSide": "RIGHT", "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDozOTo1M1rOH5tSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTo0MTo0OVrOH5vm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3Mjg5MA==", "bodyText": "This fails if messageTemplate is null, which is, when there is no pre-defined template stored in the entityless attribute. Same for the account activation method.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r530272890", "createdAt": "2020-11-25T10:39:53Z", "author": {"login": "zlamalp"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1103,6 +1123,196 @@ public static void sendValidationEmail(User user, String url, String email, int\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendPasswordResetEmail(User user, String email, String namespace, String url, int id, String messageTemplate, String subject) {\n+\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\n+\t\tString validationLink = prepareValidationLinkForPasswordResetAndAccountActivation(url, \"/non/pwd-reset/\", id, user, namespace, false);\n+\t\tString validityTo = prepareValidityTo();\n+\n+\t\tString defaultSubject = \"[\" + instanceName + \"] Password reset in namespace: \" + namespace;\n+\t\tString defaultBody = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to reset your password in namespace \\\"\" + namespace + \"\\\".\" +\n+\t\t\t\"\\n\\nPlease visit the link below, where you can set new password:\\n\\n\" + validationLink + \"\\n\\n\" +\n+\t\t\t\"Link is valid till \" + validityTo + \"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubjectParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n+\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{displayName}\", user.getDisplayName());\n+\t\tbodyParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tbodyParametersToReplace.put(\"{validity}\", validityTo);\n+\t\t// allow enforcing per-language links\n+\t\tif (messageTemplate.contains(\"{link-\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4453e226648f4d7c3d6a48f7379072a01fb07b9"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMxMDkwMA==", "bodyText": "Fixed.", "url": "https://github.com/CESNET/perun/pull/2996#discussion_r530310900", "createdAt": "2020-11-25T11:41:49Z", "author": {"login": "stavamichal"}, "path": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/Utils.java", "diffHunk": "@@ -1103,6 +1123,196 @@ public static void sendValidationEmail(User user, String url, String email, int\n \t * @throws InternalErrorException\n \t */\n \tpublic static void sendPasswordResetEmail(User user, String email, String namespace, String url, int id, String messageTemplate, String subject) {\n+\t\tString instanceName = BeansUtils.getCoreConfig().getInstanceName();\n+\n+\t\tString validationLink = prepareValidationLinkForPasswordResetAndAccountActivation(url, \"/non/pwd-reset/\", id, user, namespace, false);\n+\t\tString validityTo = prepareValidityTo();\n+\n+\t\tString defaultSubject = \"[\" + instanceName + \"] Password reset in namespace: \" + namespace;\n+\t\tString defaultBody = \"Dear \" + user.getDisplayName() + \",\\n\\nWe've received request to reset your password in namespace \\\"\" + namespace + \"\\\".\" +\n+\t\t\t\"\\n\\nPlease visit the link below, where you can set new password:\\n\\n\" + validationLink + \"\\n\\n\" +\n+\t\t\t\"Link is valid till \" + validityTo + \"\\n\\n\" +\n+\t\t\t\"Message is automatically generated.\" +\n+\t\t\t\"\\n----------------------------------------------------------------\" +\n+\t\t\t\"\\nPerun - Identity & Access Management System\";\n+\n+\t\tMap<String, String> subjectParametersToReplace = new HashMap<>();\n+\t\tsubjectParametersToReplace.put(\"{instanceName}\", instanceName);\n+\t\tsubjectParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tsubject = prepareSubjectOfEmail(subject, defaultSubject, subjectParametersToReplace);\n+\n+\t\tMap<String, String> bodyParametersToReplace = new HashMap<>();\n+\t\tbodyParametersToReplace.put(\"{displayName}\", user.getDisplayName());\n+\t\tbodyParametersToReplace.put(\"{namespace}\", namespace);\n+\t\tbodyParametersToReplace.put(\"{validity}\", validityTo);\n+\t\t// allow enforcing per-language links\n+\t\tif (messageTemplate.contains(\"{link-\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3Mjg5MA=="}, "originalCommit": {"oid": "a4453e226648f4d7c3d6a48f7379072a01fb07b9"}, "originalPosition": 210}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2181, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}