{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTcwODUx", "number": 2718, "title": "OpenApi Cabinet Manager", "bodyText": "service manager methods implemented\n\n\nadded new schemas, parameters and responses", "createdAt": "2020-05-26T03:46:37Z", "url": "https://github.com/CESNET/perun/pull/2718", "merged": true, "mergeCommit": {"oid": "122cad03085fd9f7f8ff989f8500794081d5a8cc"}, "closed": true, "closedAt": "2020-06-16T10:22:57Z", "author": {"login": "xpavlic"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABck8IlPAH2gAyNDIyOTcwODUxOjllMjExNjk2YWE2YzMwMmM4M2RjMGIzMDdhYTNiZWUyMmI1YTY1ZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrymOjAFqTQzMTM2NDE3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9e211696aa6c302c83dc0b307aa3bee22b5a65dd", "author": {"user": null}, "url": "https://github.com/CESNET/perun/commit/9e211696aa6c302c83dc0b307aa3bee22b5a65dd", "committedDate": "2020-05-26T03:31:02Z", "message": "CabinetManagerOpenApi done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3530b7d4a389dab2fc4bafa97a975a5e6d6ec609", "author": {"user": null}, "url": "https://github.com/CESNET/perun/commit/3530b7d4a389dab2fc4bafa97a975a5e6d6ec609", "committedDate": "2020-05-26T03:43:15Z", "message": "CabinetManagerOpenApi fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc", "author": {"user": null}, "url": "https://github.com/CESNET/perun/commit/38361072b3eaccd310155aa52b9f526bffd438fc", "committedDate": "2020-05-26T04:12:25Z", "message": "bugs fixed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjY5NzI3", "url": "https://github.com/CESNET/perun/pull/2718#pullrequestreview-422669727", "createdAt": "2020-06-02T13:22:49Z", "commit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzoyMjo0OVrOGdxVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0MjoyOFrOGdyNEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MDIwOA==", "bodyText": "I think this would not work. When you call the urlinjsonout serializer/deserialzer, the RPC expects you to put the data in URL parameters, not in the request body. See other methods in the specification. Or you can change the serializer to json.\nThe general rule is that you call urlinjsonout when you are calling POST and you are passing only ids of objects. If you call POST and want to pass some object, then you call the json serializer and pass the data in the request body.\nIf you have any questions you can write to me on Slack.", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433870208", "createdAt": "2020-06-02T13:22:49Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 534}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MDM4Mg==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433870382", "createdAt": "2020-06-02T13:23:04Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 564}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MjE1MA==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433872150", "createdAt": "2020-06-02T13:25:36Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 595}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MzE0NA==", "bodyText": "Same here.", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433873144", "createdAt": "2020-06-02T13:26:59Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 631}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NDAzOQ==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433874039", "createdAt": "2020-06-02T13:28:11Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 673}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NDU0Mw==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433874543", "createdAt": "2020-06-02T13:28:51Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 714}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjYyNw==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433876627", "createdAt": "2020-06-02T13:31:51Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 766}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3Nzk5OQ==", "bodyText": "If you want, you can use here the userId parameter.", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433877999", "createdAt": "2020-06-02T13:33:43Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 815}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODg4OQ==", "bodyText": "You can use here the searchString parameter.", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433878889", "createdAt": "2020-06-02T13:34:59Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user\n+          in: query\n+          schema:\n+            type: integer\n+          description: ID of user to get Rank for\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/DoubleResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAuthorsByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAuthorsByPublicationId\n+      summary: Return all Authors of Publication specified by its ID. Empty list of none found.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAllAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAllAuthors\n+      summary: Return all Authors of Publications. Empty list of none found.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findNewAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findNewAuthors\n+      summary: |\n+        Find new Authors for Publication. Empty list of none found.\n+        Used by users to search for colleagues to add them as co-authors.\n+      parameters:\n+        - name: searchString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 862}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTIzNg==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433879236", "createdAt": "2020-06-02T13:35:31Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user\n+          in: query\n+          schema:\n+            type: integer\n+          description: ID of user to get Rank for\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/DoubleResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAuthorsByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAuthorsByPublicationId\n+      summary: Return all Authors of Publication specified by its ID. Empty list of none found.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAllAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAllAuthors\n+      summary: Return all Authors of Publications. Empty list of none found.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findNewAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findNewAuthors\n+      summary: |\n+        Find new Authors for Publication. Empty list of none found.\n+        Used by users to search for colleagues to add them as co-authors.\n+      parameters:\n+        - name: searchString\n+          in: query\n+          schema:\n+            type: string\n+          description: Search string to find new Authors by\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createPublication:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 874}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTQ2Mg==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433879462", "createdAt": "2020-06-02T13:35:51Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user\n+          in: query\n+          schema:\n+            type: integer\n+          description: ID of user to get Rank for\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/DoubleResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAuthorsByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAuthorsByPublicationId\n+      summary: Return all Authors of Publication specified by its ID. Empty list of none found.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAllAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAllAuthors\n+      summary: Return all Authors of Publications. Empty list of none found.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findNewAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findNewAuthors\n+      summary: |\n+        Find new Authors for Publication. Empty list of none found.\n+        Used by users to search for colleagues to add them as co-authors.\n+      parameters:\n+        - name: searchString\n+          in: query\n+          schema:\n+            type: string\n+          description: Search string to find new Authors by\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createPublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createPublication\n+      summary: |\n+        Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublication\n+              description: 'input to createPublication'\n+              type: object\n+              required:\n+                - publication\n+              properties:\n+                publication: { $ref: '#/components/schemas/Publication' }\n+\n+  /urlinjsonout/cabinetManager/updatePublication:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 899}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MTk2Ng==", "bodyText": "same here", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433881966", "createdAt": "2020-06-02T13:39:02Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user\n+          in: query\n+          schema:\n+            type: integer\n+          description: ID of user to get Rank for\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/DoubleResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAuthorsByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAuthorsByPublicationId\n+      summary: Return all Authors of Publication specified by its ID. Empty list of none found.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAllAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAllAuthors\n+      summary: Return all Authors of Publications. Empty list of none found.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findNewAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findNewAuthors\n+      summary: |\n+        Find new Authors for Publication. Empty list of none found.\n+        Used by users to search for colleagues to add them as co-authors.\n+      parameters:\n+        - name: searchString\n+          in: query\n+          schema:\n+            type: string\n+          description: Search string to find new Authors by\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createPublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createPublication\n+      summary: |\n+        Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublication\n+              description: 'input to createPublication'\n+              type: object\n+              required:\n+                - publication\n+              properties:\n+                publication: { $ref: '#/components/schemas/Publication' }\n+\n+  /urlinjsonout/cabinetManager/updatePublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updatePublication\n+      summary: Update existing publication by its ID.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublication\n+              description: 'input to updatePublication'\n+              type: object\n+              required:\n+                - publication\n+              properties:\n+                publication: { $ref: '#/components/schemas/Publication' }\n+\n+  /urlinjsonout/cabinetManager/deletePublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deletePublication\n+      summary: |\n+        Delete publication by its ID. Only Author of the record or PerunAdmin can do this. -\n+        Author deletes Authorships and Thanks from publication. - PerunAdmin also delete publication record.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationById:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationById\n+      summary: |\n+        Return Publication by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationsByGUIFilter:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationsByGUIFilter\n+      summary: |\n+        Finds rich publications in Cabinet by GUI filter: id = exact match\n+        (used when search for publication of authors) title = if \"like\" this substring year = exact match\n+        isbn = if \"like\" this substring category = exact match yearSince = if year >= yearSince\n+        yearTill = if year <= yearTill userId = exact match or 0 If you don't want to filter by publication params,\n+        do not include the attribute in the query.\n+      parameters:\n+        - name: id\n+          in: query\n+          schema:\n+            type: integer\n+          description: Publication id\n+          required: false\n+        - name: title\n+          in: query\n+          schema:\n+            type: string\n+          description: Title\n+          required: false\n+        - name: isbn\n+          in: query\n+          schema:\n+            type: string\n+          description: ISBN\n+          required: false\n+        - name: year\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year\n+          required: false\n+        - name: category\n+          in: query\n+          schema:\n+            type: integer\n+          description: Category\n+          required: false\n+        - name: doi\n+          in: query\n+          schema:\n+            type: string\n+          description: DOI\n+          required: false\n+        - name: yearSince\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year since\n+          required: false\n+        - name: yearTill\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year till\n+          required: false\n+        - name: userId\n+          in: query\n+          schema:\n+            type: integer\n+          description: User id\n+          required: false\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationsByFilter:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationsByFilter\n+      summary: Finds publications in Cabinet by filter.\n+      parameters:\n+        - name: yearSince\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year since\n+          required: false\n+        - name: yearTill\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year till\n+          required: false\n+        - name: userId\n+          in: query\n+          schema:\n+            type: integer\n+          description: User id\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/lockPublications:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 1057}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4NDQzNQ==", "bodyText": "I think that instead of these methods, you can define only one with non-required parameters.", "url": "https://github.com/CESNET/perun/pull/2718#discussion_r433884435", "createdAt": "2020-06-02T13:42:28Z", "author": {"login": "Vojtech-Sassmann"}, "path": "perun-openapi/openapi.yml", "diffHunk": "@@ -5613,122 +5848,797 @@ paths:\n       summary: |\n         Log arbitrary auditer message/event to the audit log.\n       parameters:\n-        -  { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n+        - { name: msg, in: query, schema: { type: string }, description: \"Message to be logged\", required: true }\n       responses:\n         '200':\n           $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-\n-\n   #################################################\n   #                                               #\n-  # DatabaseManager                               #\n+  # CabinetManager                                #\n   #                                               #\n   #################################################\n \n-  /json/databaseManager/getCurrentDatabaseVersion:\n+  /json/cabinetManager/getPublicationSystems:\n     get:\n       tags:\n-        - DatabaseManager\n-      operationId: getCurrentDatabaseVersion\n-      summary: Returns current database version, e.g. \"3.1.55\"\n+        - CabinetManager\n+      operationId: getPublicationSystems\n+      summary: Get all PublicationSystems in Perun. If none, return empty list.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/ListOfPublicationSystemsResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseDriverInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/deletePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseDriverInformation\n-      summary: Returns current database driver info, e.g. \"PostgreSQL JDBC Driver-42.2.8\"\n+        - CabinetManager\n+      operationId: deletePublicationSystem\n+      summary: Deletes PublicationSystem by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/VoidResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/databaseManager/getDatabaseInformation:\n-    get:\n+  /urlinjsonout/cabinetManager/createPublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getDatabaseInformation\n-      summary: Returns current database info, e.g. \"PostgreSQL-12.0 (Debian 12.0-2.pgdg100+1)\"\n+        - CabinetManager\n+      operationId: createPublicationSystem\n+      summary: Creates new PublicationSystem.\n       responses:\n         '200':\n-          $ref: '#/components/responses/StringResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublicationSystem\n+              description: 'input to createPublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  /json/databaseManager/getTimeOfQueryPerformance:\n-    get:\n+  /urlinjsonout/cabinetManager/updatePublicationSystem:\n+    post:\n       tags:\n-        - DatabaseManager\n-      operationId: getTimeOfQueryPerformance\n-      summary: Get time in ns \"nanoseconds\" of calling 1 simple update query to DB\n+        - CabinetManager\n+      operationId: updatePublicationSystem\n+      summary: Updates PublicationSystem by its ID.\n       responses:\n         '200':\n-          $ref: '#/components/responses/LongResponse'\n+          $ref: '#/components/responses/PublicationSystemResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublicationSystem\n+              description: 'input to updatePublicationSystem'\n+              type: object\n+              required:\n+                - pubsys\n+              properties:\n+                pubsys: { $ref: '#/components/schemas/PublicationSystem' }\n \n-  #################################################\n-  #                                               #\n-  # ExtSourcesManager                             #\n-  #                                               #\n-  #################################################\n+  /json/cabinetManager/getCategories:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getCategories\n+      summary: Return list of all Categories in Perun or empty list of none present.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfCategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n \n-  /json/extSourcesManager/createExtSource/es:\n+  /urlinjsonout/cabinetManager/createCategory/cat:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceFromExtSourceObject\n-      summary: \"Creates an external source. ExtSource object must contain: name, type. Other parameters are ignored.\"\n+        - CabinetManager\n+      operationId: createCategoryCat\n+      summary: |\n+        Creates new Category for Publications with specified name and rank.\n+        Category object's parameter name must be non-empty, max 128 chars long and rank must be double\n+        with single digit after decimal point. Other parameters are ignored.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n       requestBody:\n         required: true\n         content:\n           application/json:\n             schema:\n-              title: ExtSourceObject\n-              description: \"input to createExtSourceFromExtSourceObject\"\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n               type: object\n               required:\n-                - extSource\n+                - category\n               properties:\n-                extSource: { $ref: '#/components/schemas/ExtSource' }\n+                category: { $ref: '#/components/schemas/Category' }\n \n-  /urlinjsonout/extSourcesManager/createExtSource/n-t:\n+  /urlinjsonout/cabinetManager/createCategory/n-r:\n     post:\n       tags:\n-        - ExtSourcesManager\n-      operationId: createExtSourceWithNameType\n-      summary: \"Creates an external source.\"\n-      parameters:\n-        - $ref: '#/components/parameters/name'\n-        - name: type\n-          schema:\n-            type: string\n-          description: type of ExtSource\n-          required: true\n-          in: query\n+        - CabinetManager\n+      operationId: createCategoryNR\n+      summary: Creates new Category for Publications with specified name and rank.\n       responses:\n         '200':\n-          $ref: '#/components/responses/ExtSourceResponse'\n+          $ref: '#/components/responses/CategoryResponse'\n         default:\n           $ref: '#/components/responses/ExceptionResponse'\n-\n-  /urlinjsonout/extSourcesManager/deleteExtSource:\n-    post:\n-      tags:\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateCategory\n+              description: 'input to createCategory'\n+              type: object\n+              required:\n+                - name\n+                - rank\n+              properties:\n+                name: { type: string, description: 'name of the category' }\n+                rank: { type: number, format: double, description: 'the rank of the category' }\n+\n+  /urlinjsonout/cabinetManager/updateCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updateCategory\n+      summary: |\n+        Updates publications category in Perun. Category to update is found by ID.\n+        When category rank is changed, priorityCoefficient for all authors of books from this category,\n+        is recalculated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/CategoryResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdateCategory\n+              description: 'input to updateCategory'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                category: { $ref: '#/components/schemas/Category' }\n+\n+  /urlinjsonout/cabinetManager/deleteCategory:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteCategory\n+      summary: Delete category by its ID. If category contains any publications, it can't be deleted.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createThanks\n+      summary: Creates new Thanks for Publication\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ThanksResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateThanks\n+              description: 'input to createThanks'\n+              type: object\n+              required:\n+                - category\n+              properties:\n+                thanks: { $ref: '#/components/schemas/Thanks' }\n+\n+  /urlinjsonout/cabinetManager/deleteThanks:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteThanks\n+      summary: Delete Thanks by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRichThanksByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRichThanksByPublicationId\n+      summary: Get ThanksForGUI of Publication specified by its ID or empty list.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfThanksForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createAutorship\n+      summary: |\n+        Creates Authorship. Everything except current date must be already set in Authorship object.\n+        Authorship is checked for existence before creation, if exists, existing object is returned.\n+        When authorship is successfully created, users priority coefficient is updated.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/AuthorshipResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreateAuthorship\n+              description: 'input to createAuthorship'\n+              type: object\n+              required:\n+                - authorship\n+              properties:\n+                authorship: { $ref: '#/components/schemas/Authorship' }\n+\n+  /urlinjsonout/cabinetManager/deleteAuthorship:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deleteAuthorship\n+      summary: Delete Authorship by its userId and publicationId.\n+      parameters:\n+        - $ref: '#/components/parameters/publicationId'\n+        - $ref: '#/components/parameters/userId'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/getRank:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: getRank\n+      summary: Gets overall rank of given user as sum of all his publications Authorships.\n+      parameters:\n+        - name: user\n+          in: query\n+          schema:\n+            type: integer\n+          description: ID of user to get Rank for\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/DoubleResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAuthorsByPublicationId:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAuthorsByPublicationId\n+      summary: Return all Authors of Publication specified by its ID. Empty list of none found.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findAllAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findAllAuthors\n+      summary: Return all Authors of Publications. Empty list of none found.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findNewAuthors:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findNewAuthors\n+      summary: |\n+        Find new Authors for Publication. Empty list of none found.\n+        Used by users to search for colleagues to add them as co-authors.\n+      parameters:\n+        - name: searchString\n+          in: query\n+          schema:\n+            type: string\n+          description: Search string to find new Authors by\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfAuthorResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/createPublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: createPublication\n+      summary: |\n+        Create Publication. If exists by its ID or EXT_ID,PUB_SYS_ID then existing publication is returned.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputCreatePublication\n+              description: 'input to createPublication'\n+              type: object\n+              required:\n+                - publication\n+              properties:\n+                publication: { $ref: '#/components/schemas/Publication' }\n+\n+  /urlinjsonout/cabinetManager/updatePublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: updatePublication\n+      summary: Update existing publication by its ID.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputUpdatePublication\n+              description: 'input to updatePublication'\n+              type: object\n+              required:\n+                - publication\n+              properties:\n+                publication: { $ref: '#/components/schemas/Publication' }\n+\n+  /urlinjsonout/cabinetManager/deletePublication:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: deletePublication\n+      summary: |\n+        Delete publication by its ID. Only Author of the record or PerunAdmin can do this. -\n+        Author deletes Authorships and Thanks from publication. - PerunAdmin also delete publication record.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationById:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationById\n+      summary: |\n+        Return Publication by its ID.\n+      parameters:\n+        - $ref: '#/components/parameters/id'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/PublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationsByGUIFilter:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationsByGUIFilter\n+      summary: |\n+        Finds rich publications in Cabinet by GUI filter: id = exact match\n+        (used when search for publication of authors) title = if \"like\" this substring year = exact match\n+        isbn = if \"like\" this substring category = exact match yearSince = if year >= yearSince\n+        yearTill = if year <= yearTill userId = exact match or 0 If you don't want to filter by publication params,\n+        do not include the attribute in the query.\n+      parameters:\n+        - name: id\n+          in: query\n+          schema:\n+            type: integer\n+          description: Publication id\n+          required: false\n+        - name: title\n+          in: query\n+          schema:\n+            type: string\n+          description: Title\n+          required: false\n+        - name: isbn\n+          in: query\n+          schema:\n+            type: string\n+          description: ISBN\n+          required: false\n+        - name: year\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year\n+          required: false\n+        - name: category\n+          in: query\n+          schema:\n+            type: integer\n+          description: Category\n+          required: false\n+        - name: doi\n+          in: query\n+          schema:\n+            type: string\n+          description: DOI\n+          required: false\n+        - name: yearSince\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year since\n+          required: false\n+        - name: yearTill\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year till\n+          required: false\n+        - name: userId\n+          in: query\n+          schema:\n+            type: integer\n+          description: User id\n+          required: false\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findPublicationsByFilter:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findPublicationsByFilter\n+      summary: Finds publications in Cabinet by filter.\n+      parameters:\n+        - name: yearSince\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year since\n+          required: false\n+        - name: yearTill\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year till\n+          required: false\n+        - name: userId\n+          in: query\n+          schema:\n+            type: integer\n+          description: User id\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /urlinjsonout/cabinetManager/lockPublications:\n+    post:\n+      tags:\n+        - CabinetManager\n+      operationId: lockPublications\n+      summary: (Un)Lock passed Publications for changes.\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/VoidResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+      requestBody:\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              title: InputLockPublications\n+              description: 'input to lockPublications'\n+              type: object\n+              required:\n+                - lock\n+                - publications\n+              properties:\n+                publications: { type: array, items: { $ref: '#/components/schemas/Publication' } }\n+                lock: { type: boolean }\n+\n+  /json/cabinetManager/findExternalPublications:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findExternalPublications\n+      summary: |\n+        Finds publications of perun's user specified in param\n+        Search is done in external publication systems (MU, ZCU) All parameters are required.\n+      parameters:\n+        - $ref: '#/components/parameters/userId'\n+        - name: yearSince\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year since\n+          required: true\n+        - name: yearTill\n+          in: query\n+          schema:\n+            type: integer\n+          description: Year till\n+          required: true\n+        - name: pubSysNamespace\n+          in: query\n+          schema:\n+            type: string\n+          description:    (MU or ZCU)\n+          required: true\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/isbn:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsIsbn\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/isbn'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/isbn-doi:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsIsbnDoi\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/isbn'\n+        - $ref: '#/components/parameters/doi'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/title:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsTitle\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/title'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/title-doi:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsTitleDoi\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/title'\n+        - $ref: '#/components/parameters/doi'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/doi:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsDoi\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/doi'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'\n+\n+  /json/cabinetManager/findSimilarPublications/title-isbn-doi:\n+    get:\n+      tags:\n+        - CabinetManager\n+      operationId: findSimilarPublicationsTitleIsbnDoi\n+      summary: Finds similar publications\n+      parameters:\n+        - $ref: '#/components/parameters/title'\n+        - $ref: '#/components/parameters/isbn'\n+        - $ref: '#/components/parameters/doi'\n+      responses:\n+        '200':\n+          $ref: '#/components/responses/ListOfPublicationForGUIResponse'\n+        default:\n+          $ref: '#/components/responses/ExceptionResponse'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38361072b3eaccd310155aa52b9f526bffd438fc"}, "originalPosition": 1203}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdcd6171a5766ac2b14239faaa80eca46d28f6a7", "author": {"user": null}, "url": "https://github.com/CESNET/perun/commit/fdcd6171a5766ac2b14239faaa80eca46d28f6a7", "committedDate": "2020-06-11T11:52:19Z", "message": "methods with request body - serializer fixed, findSimilarPublications merged into one method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzY0MTc1", "url": "https://github.com/CESNET/perun/pull/2718#pullrequestreview-431364175", "createdAt": "2020-06-16T10:21:50Z", "commit": {"oid": "fdcd6171a5766ac2b14239faaa80eca46d28f6a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1387, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}