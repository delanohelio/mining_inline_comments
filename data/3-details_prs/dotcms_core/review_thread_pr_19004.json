{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzQxMDQw", "number": 19004, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMzoxNFrOEV8UYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NDowM1rOEfMvQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQzODExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMzoxNFrOG8_MTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMzoxNFrOG8_MTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzA4NQ==", "bodyText": "Add some log here", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466603085", "createdAt": "2020-08-06T18:23:14Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -700,4 +707,72 @@ private boolean isAllFilledWithAsters(final char [] chars){\n          return true;\n     }\n \n+    /**\n+     * Secrets export\n+     * @param form\n+     * @param user\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     * @throws DotDataException\n+     */\n+    InputStream exportSecrets(final ExportSecretForm form, final User user)\n+            throws DotSecurityException, IOException, DotDataException {\n+\n+        if(isNotSet(form.getPassword())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ0MTk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNDoyMlrOG8_OxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowNjoyM1rOHKZyWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzcxNw==", "bodyText": "I am wondering if it is save to delete a file that is gonna be read", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466603717", "createdAt": "2020-08-06T18:24:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -700,4 +707,72 @@ private boolean isAllFilledWithAsters(final char [] chars){\n          return true;\n     }\n \n+    /**\n+     * Secrets export\n+     * @param form\n+     * @param user\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     * @throws DotDataException\n+     */\n+    InputStream exportSecrets(final ExportSecretForm form, final User user)\n+            throws DotSecurityException, IOException, DotDataException {\n+\n+        if(isNotSet(form.getPassword())){\n+           throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = form.getPassword();\n+        final Key key = AppsUtil.generateKey(password);\n+        final File file = appsAPI\n+                .exportSecrets(key, form.isExportAll(), form.getAppKeysBySite(), user);\n+        try {\n+            return  Files.newInputStream(file.toPath());\n+        } finally {\n+            file.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3MDI5OA==", "bodyText": "I'm changing it to a more reliable and safe approach.", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480670298", "createdAt": "2020-09-01T03:06:23Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -700,4 +707,72 @@ private boolean isAllFilledWithAsters(final char [] chars){\n          return true;\n     }\n \n+    /**\n+     * Secrets export\n+     * @param form\n+     * @param user\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     * @throws DotDataException\n+     */\n+    InputStream exportSecrets(final ExportSecretForm form, final User user)\n+            throws DotSecurityException, IOException, DotDataException {\n+\n+        if(isNotSet(form.getPassword())){\n+           throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = form.getPassword();\n+        final Key key = AppsUtil.generateKey(password);\n+        final File file = appsAPI\n+                .exportSecrets(key, form.isExportAll(), form.getAppKeysBySite(), user);\n+        try {\n+            return  Files.newInputStream(file.toPath());\n+        } finally {\n+            file.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzcxNw=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ0NDQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNDo1OVrOG8_QKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzowNjozOVrOHKZz0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNDA3Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466604073", "createdAt": "2020-08-06T18:24:59Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -700,4 +707,72 @@ private boolean isAllFilledWithAsters(final char [] chars){\n          return true;\n     }\n \n+    /**\n+     * Secrets export\n+     * @param form\n+     * @param user\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     * @throws DotDataException\n+     */\n+    InputStream exportSecrets(final ExportSecretForm form, final User user)\n+            throws DotSecurityException, IOException, DotDataException {\n+\n+        if(isNotSet(form.getPassword())){\n+           throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = form.getPassword();\n+        final Key key = AppsUtil.generateKey(password);\n+        final File file = appsAPI\n+                .exportSecrets(key, form.isExportAll(), form.getAppKeysBySite(), user);\n+        try {\n+            return  Files.newInputStream(file.toPath());\n+        } finally {\n+            file.delete();\n+        }\n+    }\n+\n+    /**\n+     * Secrets import\n+     * @param multipart\n+     * @param user\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws JSONException\n+     * @throws DotSecurityException\n+     * @throws EncryptorException\n+     * @throws ClassNotFoundException\n+     */\n+    void importSecrets(final FormDataMultiPart multipart, final User user)\n+            throws IOException, DotDataException, JSONException, DotSecurityException, EncryptorException, ClassNotFoundException {\n+        final MultiPartUtils multiPartUtils = new MultiPartUtils();\n+        final List<File> files = multiPartUtils.getBinariesFromMultipart(multipart);\n+        if(!UtilMethods.isSet(files)){\n+            throw new DotDataException(\"Unable to extract any files from multi-part request.\");\n+        }\n+\n+        final Map<String, Object> bodyMapFromMultipart = multiPartUtils\n+                .getBodyMapFromMultipart(multipart);\n+        final Object object = bodyMapFromMultipart.get(\"password\");\n+\n+        if(null == object){\n+            throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = object.toString();\n+        final Key key = AppsUtil.generateKey(password);\n+        final Map<String, List<AppSecrets>> importedSecretsBySiteId = appsAPI\n+                .importSecrets(files.get(0).toPath(), key, user);\n+        for (Entry<String, List<AppSecrets>> entry : importedSecretsBySiteId.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY3MDY3Mg==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480670672", "createdAt": "2020-09-01T03:06:39Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -700,4 +707,72 @@ private boolean isAllFilledWithAsters(final char [] chars){\n          return true;\n     }\n \n+    /**\n+     * Secrets export\n+     * @param form\n+     * @param user\n+     * @return\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     * @throws DotDataException\n+     */\n+    InputStream exportSecrets(final ExportSecretForm form, final User user)\n+            throws DotSecurityException, IOException, DotDataException {\n+\n+        if(isNotSet(form.getPassword())){\n+           throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = form.getPassword();\n+        final Key key = AppsUtil.generateKey(password);\n+        final File file = appsAPI\n+                .exportSecrets(key, form.isExportAll(), form.getAppKeysBySite(), user);\n+        try {\n+            return  Files.newInputStream(file.toPath());\n+        } finally {\n+            file.delete();\n+        }\n+    }\n+\n+    /**\n+     * Secrets import\n+     * @param multipart\n+     * @param user\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws JSONException\n+     * @throws DotSecurityException\n+     * @throws EncryptorException\n+     * @throws ClassNotFoundException\n+     */\n+    void importSecrets(final FormDataMultiPart multipart, final User user)\n+            throws IOException, DotDataException, JSONException, DotSecurityException, EncryptorException, ClassNotFoundException {\n+        final MultiPartUtils multiPartUtils = new MultiPartUtils();\n+        final List<File> files = multiPartUtils.getBinariesFromMultipart(multipart);\n+        if(!UtilMethods.isSet(files)){\n+            throw new DotDataException(\"Unable to extract any files from multi-part request.\");\n+        }\n+\n+        final Map<String, Object> bodyMapFromMultipart = multiPartUtils\n+                .getBodyMapFromMultipart(multipart);\n+        final Object object = bodyMapFromMultipart.get(\"password\");\n+\n+        if(null == object){\n+            throw new DotDataException(\"Unable to locate password param.\");\n+        }\n+        final String password = object.toString();\n+        final Key key = AppsUtil.generateKey(password);\n+        final Map<String, List<AppSecrets>> importedSecretsBySiteId = appsAPI\n+                .importSecrets(files.get(0).toPath(), key, user);\n+        for (Entry<String, List<AppSecrets>> entry : importedSecretsBySiteId.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNDA3Mw=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ1MzA5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNzozNFrOG8_Vng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTowNzozNlrOHKizcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTQ3MA==", "bodyText": "I think you do not need to handle the exception, Jersey will do for you", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466605470", "createdAt": "2020-08-06T18:27:34Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();\n+            //no need to close i'll get closed upon writing the response\n+            final InputStream stream = helper.exportSecrets(exportSecretForm, user);\n+            return Response.ok(stream, MediaType.APPLICATION_OCTET_STREAM)\n+                    .header(\"content-disposition\", \"attachment; filename=appSecrets.export\")\n+                    .build(); // 200\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgxODAzNA==", "bodyText": "I handle exceptions my self for the sake of writing test friendly classes.", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480818034", "createdAt": "2020-09-01T05:07:36Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();\n+            //no need to close i'll get closed upon writing the response\n+            final InputStream stream = helper.exportSecrets(exportSecretForm, user);\n+            return Response.ok(stream, MediaType.APPLICATION_OCTET_STREAM)\n+                    .header(\"content-disposition\", \"attachment; filename=appSecrets.export\")\n+                    .build(); // 200\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTQ3MA=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ1MzUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNzo0MlrOG8_V5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMzoxNzoyOVrOHKasgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTU0Mw==", "bodyText": "Add some log here", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466605543", "createdAt": "2020-08-06T18:27:42Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTg0MQ==", "bodyText": "Do we have to do some permission check?", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466605841", "createdAt": "2020-08-06T18:28:18Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTU0Mw=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY4NTE4Nw==", "bodyText": "permissions are checked internally. At helper's lever", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480685187", "createdAt": "2020-09-01T03:17:29Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTU0Mw=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ1NzYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyOTowMFrOG8_YjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNTowNToyMFrOHKirVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNjIyMQ==", "bodyText": "Add some log\nCheck if permission are needed\nException block is not needed", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466606221", "createdAt": "2020-08-06T18:29:00Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();\n+            //no need to close i'll get closed upon writing the response\n+            final InputStream stream = helper.exportSecrets(exportSecretForm, user);\n+            return Response.ok(stream, MediaType.APPLICATION_OCTET_STREAM)\n+                    .header(\"content-disposition\", \"attachment; filename=appSecrets.export\")\n+                    .build(); // 200\n+        } catch (Exception e) {\n+            //By doing this mapping here. The resource becomes integration test friendly.\n+            Logger.error(this.getClass(),\"Exception exporting secrets.\", e);\n+            return ResponseUtil.mapExceptionResponse(e);\n+        }\n+    }\n+\n+    /**\n+     * Secrets import\n+     * @param request\n+     * @param response\n+     * @param form\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/import\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    public final Response importSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final FormDataMultiPart form\n+    ) {\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgxNTk1OA==", "bodyText": "I handle exceptions my self for the sake of writing test friendly classes.", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480815958", "createdAt": "2020-09-01T05:05:20Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsResource.java", "diffHunk": "@@ -433,4 +434,79 @@ public final Response deleteApp(\n         }\n     }\n \n+    /**\n+     * Secrets export\n+     * @param request\n+     * @param response\n+     * @param exportSecretForm\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/export\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response exportSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final ExportSecretForm exportSecretForm\n+    ) {\n+        exportSecretForm.checkValid();\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();\n+            //no need to close i'll get closed upon writing the response\n+            final InputStream stream = helper.exportSecrets(exportSecretForm, user);\n+            return Response.ok(stream, MediaType.APPLICATION_OCTET_STREAM)\n+                    .header(\"content-disposition\", \"attachment; filename=appSecrets.export\")\n+                    .build(); // 200\n+        } catch (Exception e) {\n+            //By doing this mapping here. The resource becomes integration test friendly.\n+            Logger.error(this.getClass(),\"Exception exporting secrets.\", e);\n+            return ResponseUtil.mapExceptionResponse(e);\n+        }\n+    }\n+\n+    /**\n+     * Secrets import\n+     * @param request\n+     * @param response\n+     * @param form\n+     * @return\n+     */\n+    @POST\n+    @Path(\"/import\")\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    public final Response importSecrets(\n+            @Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            final FormDataMultiPart form\n+    ) {\n+        try {\n+            final InitDataObject initData =\n+                    new WebResource.InitBuilder(webResource)\n+                            .requiredBackendUser(true)\n+                            .requiredFrontendUser(false)\n+                            .requestAndResponse(request, response)\n+                            .rejectWhenNoUser(true)\n+                            .init();\n+            final User user = initData.getUser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNjIyMQ=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2MDg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyOTo1MlrOG8_amQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyOTo1MlrOG8_amQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNjc0NQ==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466606745", "createdAt": "2020-08-06T18:29:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPI.java", "diffHunk": "@@ -198,6 +201,35 @@ void removeSecretsForSite(Host host, User user)\n     void resetSecrets(User user)\n                     throws DotDataException, IOException;\n \n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2MTE5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMDowMFrOG8_ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMDowMFrOG8_ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNjc5NA==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466606794", "createdAt": "2020-08-06T18:30:00Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPI.java", "diffHunk": "@@ -198,6 +201,35 @@ void removeSecretsForSite(Host host, User user)\n     void resetSecrets(User user)\n                     throws DotDataException, IOException;\n \n+    /**\n+     *\n+     * @param key\n+     * @param exportAll\n+     * @param appKeysBySite\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     * @throws IOException\n+     */\n+    File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> appKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException;\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NDc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMTowNFrOG8_dDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoxMTowNVrOHLLTZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzM3NQ==", "bodyText": "I think you can use user.isAdmin, it is pretty much the same", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466607375", "createdAt": "2020-08-06T18:31:04Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MzIyNA==", "bodyText": "yeah.", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481153224", "createdAt": "2020-09-01T13:51:32Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzM3NQ=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4MTU3Mg==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481481572", "createdAt": "2020-09-01T23:11:05Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzM3NQ=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ2NzIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMTo1MlrOG8_esA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzoxMDo0MlrOHLLS2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzc5Mg==", "bodyText": "final AppsSecretsImportExport exportedSecrets =\nexportAll?collectSecretsForExport(appKeysByHost(), user): collectSecretsForExport(paramAppKeysBySite, user);", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466607792", "createdAt": "2020-08-06T18:31:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4MTQzNA==", "bodyText": "in my opinion, not everything needs to be converted to ternary operations only because we can. its a matter of style and preference", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481481434", "createdAt": "2020-09-01T23:10:42Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNzc5Mg=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ3MzUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozMzo1M1rOG8_imA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzowOToxMlrOHLLQ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODc5Mg==", "bodyText": "just in case check NPE", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466608792", "createdAt": "2020-08-06T18:33:53Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;\n+        if (exportAll) {\n+            exportedSecrets = collectSecretsForExport(appKeysByHost(), user);\n+        } else {\n+            exportedSecrets = collectSecretsForExport(paramAppKeysBySite, user);\n+        }\n+\n+        final File tempFile = File.createTempFile(\"secretsExport\", \".tmp\");\n+        try {\n+            writeObject(exportedSecrets, tempFile.toPath());\n+            final byte[] bytes = Files.readAllBytes(tempFile.toPath());\n+            try {\n+                final File file = File.createTempFile(\"secrets\", \".export\");\n+                final byte[] encrypted = AppsUtil.encrypt(key, bytes);\n+                try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {\n+                    outputStream.write(encrypted);\n+                    return file;\n+                }\n+            } catch (EncryptorException e) {\n+                throw new DotDataException(e);\n+            }\n+        } finally {\n+            tempFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ4MDk1Nw==", "bodyText": "when I did so.. It says the condition is always different from null", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481480957", "createdAt": "2020-09-01T23:09:12Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;\n+        if (exportAll) {\n+            exportedSecrets = collectSecretsForExport(appKeysByHost(), user);\n+        } else {\n+            exportedSecrets = collectSecretsForExport(paramAppKeysBySite, user);\n+        }\n+\n+        final File tempFile = File.createTempFile(\"secretsExport\", \".tmp\");\n+        try {\n+            writeObject(exportedSecrets, tempFile.toPath());\n+            final byte[] bytes = Files.readAllBytes(tempFile.toPath());\n+            try {\n+                final File file = File.createTempFile(\"secrets\", \".export\");\n+                final byte[] encrypted = AppsUtil.encrypt(key, bytes);\n+                try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {\n+                    outputStream.write(encrypted);\n+                    return file;\n+                }\n+            } catch (EncryptorException e) {\n+                throw new DotDataException(e);\n+            }\n+        } finally {\n+            tempFile.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwODc5Mg=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ3NDg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNDoxNVrOG8_jaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNDoxNVrOG8_jaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwOTAwMA==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466609000", "createdAt": "2020-08-06T18:34:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;\n+        if (exportAll) {\n+            exportedSecrets = collectSecretsForExport(appKeysByHost(), user);\n+        } else {\n+            exportedSecrets = collectSecretsForExport(paramAppKeysBySite, user);\n+        }\n+\n+        final File tempFile = File.createTempFile(\"secretsExport\", \".tmp\");\n+        try {\n+            writeObject(exportedSecrets, tempFile.toPath());\n+            final byte[] bytes = Files.readAllBytes(tempFile.toPath());\n+            try {\n+                final File file = File.createTempFile(\"secrets\", \".export\");\n+                final byte[] encrypted = AppsUtil.encrypt(key, bytes);\n+                try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {\n+                    outputStream.write(encrypted);\n+                    return file;\n+                }\n+            } catch (EncryptorException e) {\n+                throw new DotDataException(e);\n+            }\n+        } finally {\n+            tempFile.delete();\n+        }\n+    }\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ3OTU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNTozN1rOG8_mWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNTozN1rOG8_mWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwOTc1Mg==", "bodyText": "Add doc", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466609752", "createdAt": "2020-08-06T18:35:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -1005,4 +1009,146 @@ public void resetSecrets(final User user)\n        appsCache.clearCache();\n     }\n \n+    /**\n+     *\n+     * @param key\n+     * @param paramAppKeysBySite\n+     * @return\n+     */\n+    public File exportSecrets(final Key key, final boolean exportAll,\n+            final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException, IOException {\n+\n+        if(!userAPI.isCMSAdmin(user)){\n+            throw new DotSecurityException(\"Only Admins are allowed to perform an export operation.\");\n+        }\n+\n+        final AppsSecretsImportExport exportedSecrets;\n+        if (exportAll) {\n+            exportedSecrets = collectSecretsForExport(appKeysByHost(), user);\n+        } else {\n+            exportedSecrets = collectSecretsForExport(paramAppKeysBySite, user);\n+        }\n+\n+        final File tempFile = File.createTempFile(\"secretsExport\", \".tmp\");\n+        try {\n+            writeObject(exportedSecrets, tempFile.toPath());\n+            final byte[] bytes = Files.readAllBytes(tempFile.toPath());\n+            try {\n+                final File file = File.createTempFile(\"secrets\", \".export\");\n+                final byte[] encrypted = AppsUtil.encrypt(key, bytes);\n+                try (OutputStream outputStream = Files.newOutputStream(file.toPath())) {\n+                    outputStream.write(encrypted);\n+                    return file;\n+                }\n+            } catch (EncryptorException e) {\n+                throw new DotDataException(e);\n+            }\n+        } finally {\n+            tempFile.delete();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param paramAppKeysBySite\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    private AppsSecretsImportExport collectSecretsForExport(final Map<String, Set<String>> paramAppKeysBySite, final User user)\n+            throws DotDataException, DotSecurityException {\n+        final Map<String, List<AppSecrets>> exportedSecrets = new HashMap<>();\n+        final Map<String, Set<String>> keysByHost = appKeysByHost();\n+        keysByHost.forEach((siteId, appKeys) -> {\n+            try {\n+                final Host site = hostAPI.find(siteId, user, false);\n+                if (null != site) {\n+\n+                    final Set<String> appKeysBySiteId = paramAppKeysBySite.get(siteId);\n+                    if (isSet(appKeysBySiteId)) {\n+                        for (final String appKey : appKeysBySiteId) {\n+                            final Optional<AppSecrets> optional = getSecrets(appKey, site, user);\n+                            if (optional.isPresent()) {\n+                                final AppSecrets appSecrets = optional.get();\n+                                exportedSecrets\n+                                        .computeIfAbsent(siteId, list -> new LinkedList<>())\n+                                        .add(appSecrets);\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    Logger.warn(AppsAPIImpl.class,\n+                            String.format(\"Unable to find site `%s` \", siteId));\n+                }\n+            } catch (DotDataException | DotSecurityException e) {\n+                Logger.warn(AppsAPIImpl.class, \"An exception occurred collecting the secrets for export\", e);\n+            }\n+        });\n+        return new AppsSecretsImportExport(\n+                exportedSecrets);\n+    }\n+\n+    /**\n+     *\n+     * @param bean\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void writeObject(final AppsSecretsImportExport bean, final Path file)\n+            throws IOException {\n+        try (OutputStream outputStream = Files.newOutputStream(file)) {\n+            try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream)) {\n+                objectOutputStream.writeObject(bean);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDQ4MDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsSecretsImportExport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODozNjowMVrOG8_nHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyMDo1MlrOHK7snQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwOTk1MQ==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r466609951", "createdAt": "2020-08-06T18:36:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsSecretsImportExport.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.dotcms.security.apps;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class AppsSecretsImportExport implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNTg4NQ==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481225885", "createdAt": "2020-09-01T15:20:52Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsSecretsImportExport.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.dotcms.security.apps;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class AppsSecretsImportExport implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwOTk1MQ=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTYxNDczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Apps Resource Test.postman_collection.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1NTozOFrOHGhJkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMzowNTowMlrOHLLLtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NjYyNA==", "bodyText": "Please add a description field on each postman test to know the scenario each test is considering", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r476596624", "createdAt": "2020-08-25T16:55:38Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Apps Resource Test.postman_collection.json", "diffHunk": "@@ -808,6 +808,162 @@\n \t\t\t],\n \t\t\t\"protocolProfileBehavior\": {}\n \t\t},\n+\t\t{\n+\t\t\t\"name\": \"import-export\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3OTYwNA==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481479604", "createdAt": "2020-09-01T23:05:02Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/curl-test/Apps Resource Test.postman_collection.json", "diffHunk": "@@ -808,6 +808,162 @@\n \t\t\t],\n \t\t\t\"protocolProfileBehavior\": {}\n \t\t},\n+\t\t{\n+\t\t\t\"name\": \"import-export\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5NjYyNA=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTYyNzU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo1OToxM1rOHGhSDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyMjo0NlrOHK7yAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5ODc5Ng==", "bodyText": "what is this test for?", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r476598796", "createdAt": "2020-08-25T16:59:13Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -162,4 +162,13 @@ public void Test_Encrypt_Decrypt_Text_No_Middle_String() throws EncryptorExcepti\n         Assert.assertEquals(input, new String(decrypted));\n     }\n \n+     @Test\n+     public void Test_Key_Padding(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI4NTAwOQ==", "bodyText": "We need to generate an encryption Key out of a given password. Keys have fixed values. (12, 24, 32 are valid lengths) A key can't have a random length. Here we simply transform any password adding or removing fill-chars to fit 32 length", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r480285009", "createdAt": "2020-08-31T17:41:43Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -162,4 +162,13 @@ public void Test_Encrypt_Decrypt_Text_No_Middle_String() throws EncryptorExcepti\n         Assert.assertEquals(input, new String(decrypted));\n     }\n \n+     @Test\n+     public void Test_Key_Padding(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5ODc5Ng=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNzI2Nw==", "bodyText": "I also doced the test", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481227267", "createdAt": "2020-09-01T15:22:46Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -162,4 +162,13 @@ public void Test_Encrypt_Decrypt_Text_No_Middle_String() throws EncryptorExcepti\n         Assert.assertEquals(input, new String(decrypted));\n     }\n \n+     @Test\n+     public void Test_Key_Padding(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5ODc5Ng=="}, "originalCommit": {"oid": "cacef0f9a52bc860b17027634f09580dfa8531f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMTUwMDE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NDowM1rOHLUZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMzo1NDowM1rOHLUZpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzMDYzMA==", "bodyText": "Codacy found an issue: Ensure that resources like this InputStream object are closed after use", "url": "https://github.com/dotCMS/core/pull/19004#discussion_r481630630", "createdAt": "2020-09-02T03:54:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -1245,6 +1274,69 @@ public void Test_Pagination_And_Sort_Then_Request_Filter_Expect_Empty_Results()\n \n     }\n \n+    /**\n+     * Given Scenario: We create secrets then export that particular one then the generated file is used as the input for the import method.\n+     * Expected Results: The secrets are imported correctly and replace the same old exiting secrets. No additional secrets are created.\n+     * @throws IOException\n+     */\n+     @Test\n+     public void Test_Export_Import() throws IOException {\n+         final AppDescriptorDataGen dataGen = new AppDescriptorDataGen()\n+                 .stringParam(\"param1\", false,  true)\n+                 .stringParam(\"param2\", false,  true)\n+                 .withName(\"import-export-test\")\n+                 .withDescription(\"import-export-test\")\n+                 //We're indicating that extra params are allowed to test required params are still required.\n+                 .withExtraParameters(true);\n+         final String key = dataGen.getKey();\n+         final HttpServletRequest request = mock(HttpServletRequest.class);\n+         final HttpServletResponse response = mock(HttpServletResponse.class);\n+\n+         when(request.getRequestURI()).thenReturn(\"/baseURL\");\n+         final String fileName = dataGen.getFileName();\n+         final File file = dataGen.nextPersistedDescriptor();\n+         try(InputStream inputStream = Files.newInputStream(file.toPath())){\n+             final FormDataMultiPart formDataMultiPart = createFormDataMultiPart(fileName, inputStream);\n+             final Response appResponseOk = appsResource.createApp(request, response,formDataMultiPart);\n+             Assert.assertNotNull(appResponseOk);\n+             Assert.assertEquals(HttpStatus.SC_OK, appResponseOk.getStatus());\n+\n+             final Response availableAppsResponse = appsResource\n+                     .listAvailableApps(request, response, null);\n+             Assert.assertEquals(HttpStatus.SC_OK, availableAppsResponse.getStatus());\n+             final ResponseEntityView responseEntityView1 = (ResponseEntityView) availableAppsResponse\n+                     .getEntity();\n+             final List<AppView> integrationViewList = (List<AppView>) responseEntityView1\n+                     .getEntity();\n+             assertFalse(integrationViewList.isEmpty());\n+\n+             final Host site = new SiteDataGen().nextPersisted();\n+\n+             final String siteId = site.getIdentifier();\n+             final Map<String, Input> inputParamMap = ImmutableMap.of(\n+              \"param1\", newInputParam(\"value\".toCharArray()),\n+              \"param2\", newInputParam(\"value\".toCharArray())\n+             );\n+             final SecretForm secretForm1 = new SecretForm(inputParamMap);\n+             final Response createSecretResponse1 = appsResource.createAppSecrets(request, response, key, siteId, secretForm1);\n+             Assert.assertEquals(HttpStatus.SC_OK, createSecretResponse1.getStatus());\n+\n+             final String password = \"123456789\";\n+             ExportSecretForm form = new ExportSecretForm(password,false, ImmutableMap.of(siteId, ImmutableSet.of(key)));\n+             final OutboundJaxrsResponse exportResponse = (OutboundJaxrsResponse)appsResource.exportSecrets(request, response, form);\n+             final String json = String.format(\"{ password: \\\"%s\\\" }\",password);\n+             final InputStream entity = (InputStream) exportResponse.getEntity();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761fef99daa11c9d988ad437c6a8def585179a84"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1943, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}