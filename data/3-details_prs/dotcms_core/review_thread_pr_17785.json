{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTQ2NzQy", "number": 17785, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjo1MToyNVrODWBrQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjo1MzoxMlrODWBtFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDIyNzIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjo1MToyNVrOFajA8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzoyMDo1NlrOFajyoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM4MDk3OQ==", "bodyText": "I think all this logic should go to a private method then we can call that method here\nhttps://github.com/dotCMS/core/pull/17785/files#diff-b01fee3e8841e6997654dbe68e5baf2dR429\nthis way if \"request.getAttribute(CMS_FILTER_URI_OVERRIDE) != null)\" that code is not ran", "url": "https://github.com/dotCMS/core/pull/17785#discussion_r363380979", "createdAt": "2020-01-06T16:51:25Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "diffHunk": "@@ -415,9 +415,18 @@ String xssCheck(String uri, String queryString) throws ServletException {\n \tpublic String getURIFromRequest(HttpServletRequest request)\n \t\t\tthrows UnsupportedEncodingException {\n \n-\t\treturn (request.getAttribute(CMS_FILTER_URI_OVERRIDE) != null) ? (String) request\n+        String requestPath = request.getRequestURI();\n+        try {\n+            URI requestURI = new URI(requestPath);\n+            requestPath = requestURI.getPath();\n+        } catch (URISyntaxException e) {\n+            Logger.error(this, \"Couldn't get URL from request \" + requestPath, e);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec406ba8c5328dfe7b0a747a121228451bbf626"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5MzY5Nw==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/17785#discussion_r363393697", "createdAt": "2020-01-06T17:20:56Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "diffHunk": "@@ -415,9 +415,18 @@ String xssCheck(String uri, String queryString) throws ServletException {\n \tpublic String getURIFromRequest(HttpServletRequest request)\n \t\t\tthrows UnsupportedEncodingException {\n \n-\t\treturn (request.getAttribute(CMS_FILTER_URI_OVERRIDE) != null) ? (String) request\n+        String requestPath = request.getRequestURI();\n+        try {\n+            URI requestURI = new URI(requestPath);\n+            requestPath = requestURI.getPath();\n+        } catch (URISyntaxException e) {\n+            Logger.error(this, \"Couldn't get URL from request \" + requestPath, e);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM4MDk3OQ=="}, "originalCommit": {"oid": "bec406ba8c5328dfe7b0a747a121228451bbf626"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDIzMTg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/filters/CMSUrlUtilTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjo1MzoxMlrOFajD6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNzoyMTowMlrOFajyxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM4MTczOQ==", "bodyText": "I know is out from the issue scope but I think is good idea create a test setting the CMS_FILTER_URI_OVERRIDE request attribute", "url": "https://github.com/dotCMS/core/pull/17785#discussion_r363381739", "createdAt": "2020-01-06T16:53:12Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/CMSUrlUtilTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.dotmarketing.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.Test;\n+\n+/**\n+ * @author nollymar \n+ */\n+public class CMSUrlUtilTest {\n+\n+    /**\n+     * Method To Test: {@link CMSUrlUtil#getURIFromRequest(HttpServletRequest)}\n+     * Given Scenario: Call {@link CMSUrlUtil#getURIFromRequest(HttpServletRequest)}\n+     * with a request that contains a mocked URI with a plus sign\n+     * ExpectedResult: The URI returned must be the same one mocked,\n+     * including the plus sign\n+     */\n+    @Test\n+    public void testGetURIFromRequest() throws UnsupportedEncodingException {\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getRequestURI()).thenReturn(\"dotcms+test.txt\");\n+        String result = CMSUrlUtil.getInstance().getURIFromRequest(request);\n+        assertEquals(\"dotcms+test.txt\", result);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec406ba8c5328dfe7b0a747a121228451bbf626"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM5MzczMg==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/17785#discussion_r363393732", "createdAt": "2020-01-06T17:21:02Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/CMSUrlUtilTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.dotmarketing.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.UnsupportedEncodingException;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.Test;\n+\n+/**\n+ * @author nollymar \n+ */\n+public class CMSUrlUtilTest {\n+\n+    /**\n+     * Method To Test: {@link CMSUrlUtil#getURIFromRequest(HttpServletRequest)}\n+     * Given Scenario: Call {@link CMSUrlUtil#getURIFromRequest(HttpServletRequest)}\n+     * with a request that contains a mocked URI with a plus sign\n+     * ExpectedResult: The URI returned must be the same one mocked,\n+     * including the plus sign\n+     */\n+    @Test\n+    public void testGetURIFromRequest() throws UnsupportedEncodingException {\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getRequestURI()).thenReturn(\"dotcms+test.txt\");\n+        String result = CMSUrlUtil.getInstance().getURIFromRequest(request);\n+        assertEquals(\"dotcms+test.txt\", result);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM4MTczOQ=="}, "originalCommit": {"oid": "bec406ba8c5328dfe7b0a747a121228451bbf626"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2582, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}