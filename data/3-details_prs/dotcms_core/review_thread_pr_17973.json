{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzY1MDE1", "number": 17973, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMzo1OFrODqpzFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyOTowMFrOD3Z8ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUxNjA3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMzo1OFrOF6iAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMzo1OFrOF6iAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODgwOQ==", "bodyText": "I would do a NPE checking", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r396918809", "createdAt": "2020-03-24T06:03:58Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -243,7 +294,7 @@ public String suggestVelocityVar(final String tryVar) throws DotDataException {\n     for (int i = 1; i < 100000; i++) {\n       dc.setSQL(this.contentTypeSql.SELECT_COUNT_VAR);\n       dc.addParam(varName.toLowerCase());\n-      if (dc.getInt(\"test\") == 0) {\n+      if (dc.getInt(\"test\") == 0 && !reservedContentTypeVars.contains(varName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUxNjE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowNDowMlrOF6iAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowNDowMlrOF6iAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxODgyNw==", "bodyText": "I would do a NPE checking", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r396918827", "createdAt": "2020-03-24T06:04:02Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -315,7 +366,10 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     }\n \n     ContentType retType = builder.build();\n-\n+    if(reservedContentTypeVars.contains(retType.variable().toLowerCase())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTMxNzE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1NjoxNVrOF-zH2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo1NjoxNVrOF-zH2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzYyNg==", "bodyText": "this is usually done by Tuple.of, but it is ok I guess", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r401393626", "createdAt": "2020-04-01T06:56:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -631,40 +631,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator\n                 .getContentTypeAPI(APILocator.systemUser()).findAll().stream()\n                 .filter((type)->type instanceof EnterpriseType).collect(Collectors.toList());\n \n-        // returns a List of Tuple (typeName, baseType)\n-        return eeTypes.stream().map((type)->\n-                new Tuple2<>(\"my\"+type.variable(), type.baseType())\n-        ).collect(Collectors.toList());\n-    }\n-\n-    @Test\n-    @UseDataProvider(\"dataProviderEEContentTypes\")\n-    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema(\n-            final Tuple2<String, BaseContentType> testCase) throws Exception{\n-        ContentType customType = null;\n-\n-        try {\n-            // create custom persona type. 1=typeName, 2=BaseType\n-            customType = createType(testCase._1,\n-                    testCase._2);\n-\n-            runNoLicense(() -> {\n-                final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n-                assertNull(schema.getType(testCase._1));\n-            });\n-        } finally {\n-            if(customType!=null) {\n-                APILocator.getContentTypeAPI(APILocator.systemUser()).delete(customType);\n+        List<Tuple2<String, BaseContentType>> eeTypesList = eeTypes.stream().map((type)->\n+                        new Tuple2<>(\"my\"+type.variable(), type.baseType())).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDIzMzI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1N1rOGNpWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1N1rOGNpWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MjE4OQ==", "bodyText": "Issue found: Local variable 'eeTypes' could be declared final", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r416962189", "createdAt": "2020-04-28T22:28:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -644,40 +644,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8c769a7dd0b11a9634600d4f4cc7781de25915"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDIzMzMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1OFrOGNpWlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1OFrOGNpWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MjE5Nw==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r416962197", "createdAt": "2020-04-28T22:28:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -644,40 +644,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8c769a7dd0b11a9634600d4f4cc7781de25915"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDIzMzM1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1OVrOGNpWmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyODo1OVrOGNpWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MjIwMw==", "bodyText": "Issue found: Local variable 'eeTypesList' could be declared final", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r416962203", "createdAt": "2020-04-28T22:28:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -644,40 +644,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator\n                 .getContentTypeAPI(APILocator.systemUser()).findAll().stream()\n                 .filter((type)->type instanceof EnterpriseType).collect(Collectors.toList());\n \n-        // returns a List of Tuple (typeName, baseType)\n-        return eeTypes.stream().map((type)->\n-                new Tuple2<>(\"my\"+type.variable(), type.baseType())\n-        ).collect(Collectors.toList());\n-    }\n-\n-    @Test\n-    @UseDataProvider(\"dataProviderEEContentTypes\")\n-    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema(\n-            final Tuple2<String, BaseContentType> testCase) throws Exception{\n-        ContentType customType = null;\n-\n-        try {\n-            // create custom persona type. 1=typeName, 2=BaseType\n-            customType = createType(testCase._1,\n-                    testCase._2);\n-\n-            runNoLicense(() -> {\n-                final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n-                assertNull(schema.getType(testCase._1));\n-            });\n-        } finally {\n-            if(customType!=null) {\n-                APILocator.getContentTypeAPI(APILocator.systemUser()).delete(customType);\n+        List<Tuple2<String, BaseContentType>> eeTypesList = eeTypes.stream().map((type)->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8c769a7dd0b11a9634600d4f4cc7781de25915"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDIzMzM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyOTowMFrOGNpWoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoyOTowMFrOGNpWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk2MjIwOQ==", "bodyText": "Issue found: Local variable 'testCase' could be declared final", "url": "https://github.com/dotCMS/core/pull/17973#discussion_r416962209", "createdAt": "2020-04-28T22:29:00Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -644,40 +644,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator\n                 .getContentTypeAPI(APILocator.systemUser()).findAll().stream()\n                 .filter((type)->type instanceof EnterpriseType).collect(Collectors.toList());\n \n-        // returns a List of Tuple (typeName, baseType)\n-        return eeTypes.stream().map((type)->\n-                new Tuple2<>(\"my\"+type.variable(), type.baseType())\n-        ).collect(Collectors.toList());\n-    }\n-\n-    @Test\n-    @UseDataProvider(\"dataProviderEEContentTypes\")\n-    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema(\n-            final Tuple2<String, BaseContentType> testCase) throws Exception{\n-        ContentType customType = null;\n-\n-        try {\n-            // create custom persona type. 1=typeName, 2=BaseType\n-            customType = createType(testCase._1,\n-                    testCase._2);\n-\n-            runNoLicense(() -> {\n-                final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n-                assertNull(schema.getType(testCase._1));\n-            });\n-        } finally {\n-            if(customType!=null) {\n-                APILocator.getContentTypeAPI(APILocator.systemUser()).delete(customType);\n+        List<Tuple2<String, BaseContentType>> eeTypesList = eeTypes.stream().map((type)->\n+                        new Tuple2<>(\"my\"+type.variable(), type.baseType())).collect(Collectors.toList());\n+\n+        for (Tuple2<String, BaseContentType> testCase : eeTypesList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c8c769a7dd0b11a9634600d4f4cc7781de25915"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2547, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}