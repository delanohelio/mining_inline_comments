{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMjE4NjMy", "number": 17851, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MDozN1rODYPfhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDo0MVrODeopYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzQ2MjQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MDozN1rOFd_Lnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjo1MDozN1rOFd_Lnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODE5MQ==", "bodyText": "sorry to bother, we could use a Logger here, for tracking purposes.", "url": "https://github.com/dotCMS/core/pull/17851#discussion_r366988191", "createdAt": "2020-01-15T16:50:37Z", "author": {"login": "oarrietadotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -316,7 +367,9 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     }\n \n     ContentType retType = builder.build();\n-\n+    if(reservedContentTypeVars.contains(retType.variable().toLowerCase())){\n+        throw new IllegalArgumentException(\"Invalid content type variable - reserved var name: \" + retType.variable().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "849b9274382732424cc6db31f98e65ac87ca93c3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ5ODA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDozN1rOFn4gsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDozN1rOFn4gsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDY1OA==", "bodyText": "Issue found: Local variable 'eeTypes' could be declared final", "url": "https://github.com/dotCMS/core/pull/17851#discussion_r377364658", "createdAt": "2020-02-10T22:50:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -631,40 +631,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ5ODE0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDozOVrOFn4gvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDozOVrOFn4gvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDY3MA==", "bodyText": "Issue found: Local variable 'eeTypesList' could be declared final", "url": "https://github.com/dotCMS/core/pull/17851#discussion_r377364670", "createdAt": "2020-02-10T22:50:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -631,40 +631,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator\n                 .getContentTypeAPI(APILocator.systemUser()).findAll().stream()\n                 .filter((type)->type instanceof EnterpriseType).collect(Collectors.toList());\n \n-        // returns a List of Tuple (typeName, baseType)\n-        return eeTypes.stream().map((type)->\n-                new Tuple2<>(\"my\"+type.variable(), type.baseType())\n-        ).collect(Collectors.toList());\n-    }\n-\n-    @Test\n-    @UseDataProvider(\"dataProviderEEContentTypes\")\n-    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema(\n-            final Tuple2<String, BaseContentType> testCase) throws Exception{\n-        ContentType customType = null;\n-\n-        try {\n-            // create custom persona type. 1=typeName, 2=BaseType\n-            customType = createType(testCase._1,\n-                    testCase._2);\n-\n-            runNoLicense(() -> {\n-                final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n-                assertNull(schema.getType(testCase._1));\n-            });\n-        } finally {\n-            if(customType!=null) {\n-                APILocator.getContentTypeAPI(APILocator.systemUser()).delete(customType);\n+        List<Tuple2<String, BaseContentType>> eeTypesList = eeTypes.stream().map((type)->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ5ODIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDo0MFrOFn4gyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDo0MFrOFn4gyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDY4Mw==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/17851#discussion_r377364683", "createdAt": "2020-02-10T22:50:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -631,40 +631,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ5ODI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDo0MVrOFn4gzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDo0MVrOFn4gzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDY4Nw==", "bodyText": "Issue found: Local variable 'testCase' could be declared final", "url": "https://github.com/dotCMS/core/pull/17851#discussion_r377364687", "createdAt": "2020-02-10T22:50:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -631,40 +631,33 @@ public void testGetSchema_BothSidedRelationshipFields(final RELATIONSHIP_CARDINA\n \n     }\n \n-    @DataProvider\n-    public static List<Object> dataProviderEEContentTypes() throws Exception {\n-        // data provider needs stuff to get initialized because of API access\n-        IntegrationTestInitService.getInstance().init();\n+    @Test\n+    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema() throws Exception{\n \n         // filter only Enterprise content types\n-        final List<ContentType> eeTypes = APILocator\n+        List<ContentType> eeTypes = APILocator\n                 .getContentTypeAPI(APILocator.systemUser()).findAll().stream()\n                 .filter((type)->type instanceof EnterpriseType).collect(Collectors.toList());\n \n-        // returns a List of Tuple (typeName, baseType)\n-        return eeTypes.stream().map((type)->\n-                new Tuple2<>(\"my\"+type.variable(), type.baseType())\n-        ).collect(Collectors.toList());\n-    }\n-\n-    @Test\n-    @UseDataProvider(\"dataProviderEEContentTypes\")\n-    public void testGetSchema_GivenNoEELicense_EnterpriseTypesShouldNotBeAvailableInSchema(\n-            final Tuple2<String, BaseContentType> testCase) throws Exception{\n-        ContentType customType = null;\n-\n-        try {\n-            // create custom persona type. 1=typeName, 2=BaseType\n-            customType = createType(testCase._1,\n-                    testCase._2);\n-\n-            runNoLicense(() -> {\n-                final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n-                assertNull(schema.getType(testCase._1));\n-            });\n-        } finally {\n-            if(customType!=null) {\n-                APILocator.getContentTypeAPI(APILocator.systemUser()).delete(customType);\n+        List<Tuple2<String, BaseContentType>> eeTypesList = eeTypes.stream().map((type)->\n+                        new Tuple2<>(\"my\"+type.variable(), type.baseType())).collect(Collectors.toList());\n+\n+        for (Tuple2<String, BaseContentType> testCase : eeTypesList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd52e3029e5451ea92c531d02be62d9325f2d3e"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2480, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}