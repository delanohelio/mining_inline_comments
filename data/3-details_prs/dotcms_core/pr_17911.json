{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDIyMzcy", "number": 17911, "title": "#17885 upgrade ES version", "bodyText": "", "createdAt": "2020-01-24T21:26:34Z", "url": "https://github.com/dotCMS/core/pull/17911", "merged": true, "mergeCommit": {"oid": "4fc7d8605bf5970283df648a48e8517994ad6cc3"}, "closed": true, "closedAt": "2020-01-29T19:07:44Z", "author": {"login": "dsilvam"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9lrgXgH2gAyMzY3MDIyMzcyOmRkYzA0YzU5ODE2MWEyOTc5ZDFlNjk4ZGE4ZGIyMjAwMTYzYzEwYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_KJzbgFqTM1MDMyNDY0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ddc04c598161a2979d1e698da8db2200163c10b1", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/ddc04c598161a2979d1e698da8db2200163c10b1", "committedDate": "2020-01-24T21:18:19Z", "message": "#17885 upgrade ES version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9120473281b55c15980de7f73d5bfaf551048708", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/9120473281b55c15980de7f73d5bfaf551048708", "committedDate": "2020-01-24T21:28:08Z", "message": "#17885 upgrade ES version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db592a7dc4fe6b4b37559c4d6f69b99670bdc0a1", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/db592a7dc4fe6b4b37559c4d6f69b99670bdc0a1", "committedDate": "2020-01-28T22:46:03Z", "message": "#17885 fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/361b4cb6c4c716e4d4eacfc6040034029a893bf4", "committedDate": "2020-01-29T16:27:01Z", "message": "#17885 fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjUxNjQ0", "url": "https://github.com/dotCMS/core/pull/17911#pullrequestreview-350251644", "createdAt": "2020-01-29T16:35:56Z", "commit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjozNTo1NlrOFjPSJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjozNTo1NlrOFjPSJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5NDg4NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/17911#discussion_r372494884", "createdAt": "2020-01-29T16:35:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletFactoryTest.java", "diffHunk": "@@ -63,33 +70,46 @@ public void findAllCurrent () throws DotDataException, DotSecurityException {\n     @Test\n     public void findAllCurrentOffsetLimit () throws DotDataException, DotSecurityException {\n \n-        //Getting all contentlets live/working contentlets\n-        List<Contentlet> contentlets = contentletFactory.findAllCurrent( 0, 5 );\n-\n-        //Validations\n-        assertTrue( contentlets != null && !contentlets.isEmpty() );\n-        assertEquals( contentlets.size(), 5 );\n-\n-        //Validate the integrity of the array\n-        Contentlet foundContentlet = null;\n-        for ( Contentlet contentlet : contentlets ) {\n-\n-            //TODO: We need to verify for null because the findAllCurrent CAN return null objects, this could happen because the index can return inodes that are not into the db....\n-            if ( contentlet != null ) {\n-                foundContentlet = contentlet;\n-                break;\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        final ContentletDataGen contentletDataGen = new ContentletDataGen(type.id());\n+        final List<Contentlet> newContentlets = new ArrayList<>();\n+\n+        try {\n+\n+            // Let's create 10 contentlets, 5 live 5 working\n+            IntStream.range(0, 10).forEach(\n+                    (i) -> {\n+                        final Contentlet newContent = contentletDataGen.nextPersisted();\n+                        if (i % 2 == 0) {\n+                            Sneaky.sneaked(() -> APILocator.getContentletAPI()\n+                                    .publish(newContent, user, false));\n+                        }\n+                        newContentlets.add(newContent);\n+                    }\n+            );\n+\n+            //Getting all contentlets live/working contentlets\n+            List<Contentlet> contentlets = contentletFactory.findAllCurrent(0, 10);\n+\n+            // filter out null records\n+            contentlets = contentlets.stream().filter(Objects::nonNull).collect(Collectors.toList());\n+            //Validations\n+            assertTrue(contentlets != null && !contentlets.isEmpty());\n+            assertTrue(contentlets.size() >= 10);\n+\n+            //Search for one of the objects we found\n+            String inode = contentlets.get(0).getInode();\n+            Contentlet contentlet = contentletFactory.find(inode);\n+\n+            //Validations\n+            assertTrue(\n+                    contentlet != null && (contentlet.getInode() != null && !contentlet.getInode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjUxNjU3", "url": "https://github.com/dotCMS/core/pull/17911#pullrequestreview-350251657", "createdAt": "2020-01-29T16:35:57Z", "commit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjozNTo1N1rOFjPSLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjozNTo1N1rOFjPSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5NDg5Mw==", "bodyText": "Issue found: Local variable 'inode' could be declared final", "url": "https://github.com/dotCMS/core/pull/17911#discussion_r372494893", "createdAt": "2020-01-29T16:35:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletFactoryTest.java", "diffHunk": "@@ -63,33 +70,46 @@ public void findAllCurrent () throws DotDataException, DotSecurityException {\n     @Test\n     public void findAllCurrentOffsetLimit () throws DotDataException, DotSecurityException {\n \n-        //Getting all contentlets live/working contentlets\n-        List<Contentlet> contentlets = contentletFactory.findAllCurrent( 0, 5 );\n-\n-        //Validations\n-        assertTrue( contentlets != null && !contentlets.isEmpty() );\n-        assertEquals( contentlets.size(), 5 );\n-\n-        //Validate the integrity of the array\n-        Contentlet foundContentlet = null;\n-        for ( Contentlet contentlet : contentlets ) {\n-\n-            //TODO: We need to verify for null because the findAllCurrent CAN return null objects, this could happen because the index can return inodes that are not into the db....\n-            if ( contentlet != null ) {\n-                foundContentlet = contentlet;\n-                break;\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        final ContentletDataGen contentletDataGen = new ContentletDataGen(type.id());\n+        final List<Contentlet> newContentlets = new ArrayList<>();\n+\n+        try {\n+\n+            // Let's create 10 contentlets, 5 live 5 working\n+            IntStream.range(0, 10).forEach(\n+                    (i) -> {\n+                        final Contentlet newContent = contentletDataGen.nextPersisted();\n+                        if (i % 2 == 0) {\n+                            Sneaky.sneaked(() -> APILocator.getContentletAPI()\n+                                    .publish(newContent, user, false));\n+                        }\n+                        newContentlets.add(newContent);\n+                    }\n+            );\n+\n+            //Getting all contentlets live/working contentlets\n+            List<Contentlet> contentlets = contentletFactory.findAllCurrent(0, 10);\n+\n+            // filter out null records\n+            contentlets = contentlets.stream().filter(Objects::nonNull).collect(Collectors.toList());\n+            //Validations\n+            assertTrue(contentlets != null && !contentlets.isEmpty());\n+            assertTrue(contentlets.size() >= 10);\n+\n+            //Search for one of the objects we found\n+            String inode = contentlets.get(0).getInode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzIwMjY5", "url": "https://github.com/dotCMS/core/pull/17911#pullrequestreview-350320269", "createdAt": "2020-01-29T18:15:00Z", "commit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzI0NjQw", "url": "https://github.com/dotCMS/core/pull/17911#pullrequestreview-350324640", "createdAt": "2020-01-29T18:21:55Z", "commit": {"oid": "361b4cb6c4c716e4d4eacfc6040034029a893bf4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1340, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}