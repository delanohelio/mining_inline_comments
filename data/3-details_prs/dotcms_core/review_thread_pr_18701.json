{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Njk1Mzcw", "number": 18701, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowMjoyM1rOEHII_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozNzowOFrOEPIiYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA4ODYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/LuceneQueryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowMjoyM1rOGmV9Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDowMjoyM1rOGmV9Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1ODgzMQ==", "bodyText": "is it possible to do any test here?", "url": "https://github.com/dotCMS/core/pull/18701#discussion_r442858831", "createdAt": "2020-06-19T14:02:23Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/LuceneQueryUtils.java", "diffHunk": "@@ -1,67 +1,44 @@\n package com.dotmarketing.util;\n \n-import com.google.common.collect.ImmutableSet;\n import com.liferay.util.StringPool;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n-import org.apache.lucene.index.Term;\n import org.apache.lucene.queryparser.classic.ParseException;\n-import org.apache.lucene.queryparser.classic.QueryParser;\n-import org.apache.lucene.search.BooleanClause;\n-import org.apache.lucene.search.BooleanClause.Occur;\n-import org.apache.lucene.search.BooleanQuery;\n-import org.apache.lucene.search.TermQuery;\n-\n \n+/**\n+ * Utility class in charge of dealing with Lucene Queries that require a specific formatting, validation, or addition of\n+ * default parameters.\n+ *\n+ * @author Fabrizzio Araya\n+ * @since Jun 21, 2018\n+ */\n public class LuceneQueryUtils {\n \n-\n     /**\n+     * Removes the {@code \"query_\"} prefix that might be included in the Lucene query.\n+     *\n+     * @param luceneQuery The Lucene query.\n      *\n-     * @param luceneQuery\n-     * @return\n+     * @return The Lucene query without the {@code \"query_\"} prefix.\n      */\n     private static String removeQueryPrefix(final String luceneQuery) {\n-\n         return (luceneQuery.startsWith(\"query_\") ? luceneQuery.replace(\"query_\", StringPool.BLANK)\n                 : luceneQuery\n         );\n     }\n \n-    private static Set<BooleanClause> filterQueryTerms = ImmutableSet.of(\n-            new BooleanClause(new TermQuery(new Term(\"contentType\",\"Host\")),Occur.MUST_NOT)\n-    );\n-\n     /**\n-     * This method basically does two things. Gets rid of the 'query_' prefix and also adds an additional condition to ensure we exclude all content of type host\n-     * Since acces to ContentType Host is limited.\n-     * @param luceneQuery\n-     * @return\n-     * @throws ParseException\n+     * This method basically does two things:\n+     * <ol>\n+     *     <li>Gets rid of the 'query_' prefix.</li>\n+     *     <li>Adds an additional condition to ensure we exclude all content of type {@code host} since access to\n+     *     Content Type Host is limited.</li>\n+     * </ol>\n+     *\n+     * @param luceneQuery The Lucene query that will be treated.\n+     *\n+     * @return The sanitized query.\n      */\n-    public static String sanitizeBulkActionsQuery(final String luceneQuery) throws ParseException {\n-\n-        final String cleanedUpQuery = removeQueryPrefix(luceneQuery);\n-        final QueryParser parser = new QueryParser(null, new WhitespaceAnalyzer());\n-        final BooleanQuery query = (BooleanQuery) parser.parse(cleanedUpQuery);\n-        final List<BooleanClause> clauses = query.clauses();\n-        final Set<BooleanClause> clauseSet = new HashSet<>(clauses);\n-        final BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-\n-        for(final BooleanClause clause:clauses){\n-            builder.add(clause);\n-        }\n-\n-        //Do not add terms that are already part of the query.\n-        for (final BooleanClause clause : filterQueryTerms) {\n-              if(!clauseSet.contains(clause)){\n-                 builder.add(clause);\n-              }\n-        }\n-\n-        return builder.build().toString();\n+    public static String sanitizeBulkActionsQuery(final String luceneQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b4f2a74865b3b64bce8e94cebb6d22d93e4ad7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzAzOTcxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/LuceneQueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozNzowOFrOGyrS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowNzoxMVrOGyspng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MTMxNg==", "bodyText": "Is this contentType:host text required for every case? Or just when selecting all the items (not just the paginated)? @wezell", "url": "https://github.com/dotCMS/core/pull/18701#discussion_r455791316", "createdAt": "2020-07-16T13:37:08Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/LuceneQueryUtils.java", "diffHunk": "@@ -1,67 +1,44 @@\n package com.dotmarketing.util;\n \n-import com.google.common.collect.ImmutableSet;\n import com.liferay.util.StringPool;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n-import org.apache.lucene.index.Term;\n import org.apache.lucene.queryparser.classic.ParseException;\n-import org.apache.lucene.queryparser.classic.QueryParser;\n-import org.apache.lucene.search.BooleanClause;\n-import org.apache.lucene.search.BooleanClause.Occur;\n-import org.apache.lucene.search.BooleanQuery;\n-import org.apache.lucene.search.TermQuery;\n-\n \n+/**\n+ * Utility class in charge of dealing with Lucene Queries that require a specific formatting, validation, or addition of\n+ * default parameters.\n+ *\n+ * @author Fabrizzio Araya\n+ * @since Jun 21, 2018\n+ */\n public class LuceneQueryUtils {\n \n-\n     /**\n+     * Removes the {@code \"query_\"} prefix that might be included in the Lucene query.\n+     *\n+     * @param luceneQuery The Lucene query.\n      *\n-     * @param luceneQuery\n-     * @return\n+     * @return The Lucene query without the {@code \"query_\"} prefix.\n      */\n     private static String removeQueryPrefix(final String luceneQuery) {\n-\n         return (luceneQuery.startsWith(\"query_\") ? luceneQuery.replace(\"query_\", StringPool.BLANK)\n                 : luceneQuery\n         );\n     }\n \n-    private static Set<BooleanClause> filterQueryTerms = ImmutableSet.of(\n-            new BooleanClause(new TermQuery(new Term(\"contentType\",\"Host\")),Occur.MUST_NOT)\n-    );\n-\n     /**\n-     * This method basically does two things. Gets rid of the 'query_' prefix and also adds an additional condition to ensure we exclude all content of type host\n-     * Since acces to ContentType Host is limited.\n-     * @param luceneQuery\n-     * @return\n-     * @throws ParseException\n+     * This method basically does two things:\n+     * <ol>\n+     *     <li>Gets rid of the 'query_' prefix.</li>\n+     *     <li>Adds an additional condition to ensure we exclude all content of type {@code host} since access to\n+     *     Content Type Host is limited.</li>\n+     * </ol>\n+     *\n+     * @param luceneQuery The Lucene query that will be treated.\n+     *\n+     * @return The sanitized query.\n      */\n-    public static String sanitizeBulkActionsQuery(final String luceneQuery) throws ParseException {\n-\n-        final String cleanedUpQuery = removeQueryPrefix(luceneQuery);\n-        final QueryParser parser = new QueryParser(null, new WhitespaceAnalyzer());\n-        final BooleanQuery query = (BooleanQuery) parser.parse(cleanedUpQuery);\n-        final List<BooleanClause> clauses = query.clauses();\n-        final Set<BooleanClause> clauseSet = new HashSet<>(clauses);\n-        final BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-\n-        for(final BooleanClause clause:clauses){\n-            builder.add(clause);\n-        }\n-\n-        //Do not add terms that are already part of the query.\n-        for (final BooleanClause clause : filterQueryTerms) {\n-              if(!clauseSet.contains(clause)){\n-                 builder.add(clause);\n-              }\n-        }\n-\n-        return builder.build().toString();\n+    public static String sanitizeBulkActionsQuery(final String luceneQuery) {\n+        return removeQueryPrefix(luceneQuery) + \" -contentType:host\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1b4f2a74865b3b64bce8e94cebb6d22d93e4ad7"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxMzUzNA==", "bodyText": "So, this query is for bulk actions.  Hosts should never be included in buik actions (even if they get included in a content query), so I think this is ok.", "url": "https://github.com/dotCMS/core/pull/18701#discussion_r455813534", "createdAt": "2020-07-16T14:07:11Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/LuceneQueryUtils.java", "diffHunk": "@@ -1,67 +1,44 @@\n package com.dotmarketing.util;\n \n-import com.google.common.collect.ImmutableSet;\n import com.liferay.util.StringPool;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.lucene.analysis.core.WhitespaceAnalyzer;\n-import org.apache.lucene.index.Term;\n import org.apache.lucene.queryparser.classic.ParseException;\n-import org.apache.lucene.queryparser.classic.QueryParser;\n-import org.apache.lucene.search.BooleanClause;\n-import org.apache.lucene.search.BooleanClause.Occur;\n-import org.apache.lucene.search.BooleanQuery;\n-import org.apache.lucene.search.TermQuery;\n-\n \n+/**\n+ * Utility class in charge of dealing with Lucene Queries that require a specific formatting, validation, or addition of\n+ * default parameters.\n+ *\n+ * @author Fabrizzio Araya\n+ * @since Jun 21, 2018\n+ */\n public class LuceneQueryUtils {\n \n-\n     /**\n+     * Removes the {@code \"query_\"} prefix that might be included in the Lucene query.\n+     *\n+     * @param luceneQuery The Lucene query.\n      *\n-     * @param luceneQuery\n-     * @return\n+     * @return The Lucene query without the {@code \"query_\"} prefix.\n      */\n     private static String removeQueryPrefix(final String luceneQuery) {\n-\n         return (luceneQuery.startsWith(\"query_\") ? luceneQuery.replace(\"query_\", StringPool.BLANK)\n                 : luceneQuery\n         );\n     }\n \n-    private static Set<BooleanClause> filterQueryTerms = ImmutableSet.of(\n-            new BooleanClause(new TermQuery(new Term(\"contentType\",\"Host\")),Occur.MUST_NOT)\n-    );\n-\n     /**\n-     * This method basically does two things. Gets rid of the 'query_' prefix and also adds an additional condition to ensure we exclude all content of type host\n-     * Since acces to ContentType Host is limited.\n-     * @param luceneQuery\n-     * @return\n-     * @throws ParseException\n+     * This method basically does two things:\n+     * <ol>\n+     *     <li>Gets rid of the 'query_' prefix.</li>\n+     *     <li>Adds an additional condition to ensure we exclude all content of type {@code host} since access to\n+     *     Content Type Host is limited.</li>\n+     * </ol>\n+     *\n+     * @param luceneQuery The Lucene query that will be treated.\n+     *\n+     * @return The sanitized query.\n      */\n-    public static String sanitizeBulkActionsQuery(final String luceneQuery) throws ParseException {\n-\n-        final String cleanedUpQuery = removeQueryPrefix(luceneQuery);\n-        final QueryParser parser = new QueryParser(null, new WhitespaceAnalyzer());\n-        final BooleanQuery query = (BooleanQuery) parser.parse(cleanedUpQuery);\n-        final List<BooleanClause> clauses = query.clauses();\n-        final Set<BooleanClause> clauseSet = new HashSet<>(clauses);\n-        final BooleanQuery.Builder builder = new BooleanQuery.Builder();\n-\n-        for(final BooleanClause clause:clauses){\n-            builder.add(clause);\n-        }\n-\n-        //Do not add terms that are already part of the query.\n-        for (final BooleanClause clause : filterQueryTerms) {\n-              if(!clauseSet.contains(clause)){\n-                 builder.add(clause);\n-              }\n-        }\n-\n-        return builder.build().toString();\n+    public static String sanitizeBulkActionsQuery(final String luceneQuery) {\n+        return removeQueryPrefix(luceneQuery) + \" -contentType:host\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MTMxNg=="}, "originalCommit": {"oid": "b1b4f2a74865b3b64bce8e94cebb6d22d93e4ad7"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2184, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}