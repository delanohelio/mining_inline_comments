{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODE0MDY1", "number": 18201, "title": "#17901 testing", "bodyText": "Fixing: #17901 (comment)", "createdAt": "2020-03-27T15:18:16Z", "url": "https://github.com/dotCMS/core/pull/18201", "merged": true, "mergeCommit": {"oid": "1c5d7fee15d5d7d345d825f72056b8f8a31b0e9e"}, "closed": true, "closedAt": "2020-03-31T15:52:05Z", "author": {"login": "freddyucv"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRyNI8AH2gAyMzk0ODE0MDY1OjMxZDU0YjU1MDBmMDYwMzJjNzRlZGM2ODgyN2QzNWJkZmFlMGUzZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcR1yY0AFqTM4MzE0MDU5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/31d54b5500f06032c74edc68827d35bdfae0e3e7", "committedDate": "2020-03-27T15:12:24Z", "message": "#17901 testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTYyNjQx", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-382962641", "createdAt": "2020-03-27T15:28:16Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyODoxNlrOF82RIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyODoxNlrOF82RIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODAwMQ==", "bodyText": "why is this done again? looks like it was done already in line 111", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399348001", "createdAt": "2020-03-27T15:28:16Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,80 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page\n+     * Should: save the rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveConditionInRulesPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);\n+        addRulesPermission(role, host, true);\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addRulesPermission(role, host, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTYzNzYz", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-382963763", "createdAt": "2020-03-27T15:29:32Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyOTozMlrOF82UmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyOTozMlrOF82UmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0ODg4OQ==", "bodyText": "javadoc says Condition Group and Condition but code shows only Condition Group", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399348889", "createdAt": "2020-03-27T15:29:32Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,80 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTg0NDY1", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-382984465", "createdAt": "2020-03-27T15:52:50Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTkyMjE3", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-382992217", "createdAt": "2020-03-27T16:01:38Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDA0OTc2", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383004976", "createdAt": "2020-03-27T16:16:31Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDA2NjU0", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383006654", "createdAt": "2020-03-27T16:18:36Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxODozNlrOF84YcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoxODozNlrOF84YcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4MjY0MA==", "bodyText": "Looks like this line shouldn't be there if you don't want publish perms on the page", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399382640", "createdAt": "2020-03-27T16:18:36Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,80 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page\n+     * Should: save the rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveConditionInRulesPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);\n+        addRulesPermission(role, host, true);\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addRulesPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule without PuBLISH permission over the page\n+     * Should: Throw a {@link DotSecurityException}\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldSaveConditionInRulesPageShouldNotWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .folder(folder)\n+                .nextPersisted();\n+\n+        addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);        addRulesPermission(role, host, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDEyNjIy", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383012622", "createdAt": "2020-03-27T16:25:40Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyNTo0MFrOF84rMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjoyNTo0MFrOF84rMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NzQ0Mg==", "bodyText": "create a variable for the third parameter to understand what's going on\nboolean addPublishPermsForRules = true;", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399387442", "createdAt": "2020-03-27T16:25:40Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,80 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDIwMjYw", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383020260", "createdAt": "2020-03-27T16:34:47Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNDo0N1rOF85CFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNDo0N1rOF85CFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5MzMwMA==", "bodyText": "rename method to shouldNotSaveConditionInRuleOnPage", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399393300", "createdAt": "2020-03-27T16:34:47Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,80 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page\n+     * Should: save the rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveConditionInRulesPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);\n+        addRulesPermission(role, host, true);\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addRulesPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkCondition(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule without PuBLISH permission over the page\n+     * Should: Throw a {@link DotSecurityException}\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldSaveConditionInRulesPageShouldNotWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDIwOTM0", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383020934", "createdAt": "2020-03-27T16:35:33Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNTozM1rOF85ETA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNTozM1rOF85ETA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5Mzg2OA==", "bodyText": "rename method to: shouldNotSaveRuleActionInRuleOnPage", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399393868", "createdAt": "2020-03-27T16:35:33Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -144,13 +209,75 @@ public void shouldSaveRuleAction() throws DotSecurityException, DotDataException\n         final Host host = new SiteDataGen().nextPersisted();\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n+\n+        final RuleAction ruleAction = new RuleActionDataGen().rule(rule).next();\n+\n+        rulesAPI.saveRuleAction(ruleAction, user, false);\n+\n+        final List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkActions(ruleAction, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRuleAction(RuleAction, User, boolean)}\n+     * When: User with permission try to create a Rule's Action in a Rule's Page\n+     * Should: Save it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveRuleActionInPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+         final Template template = new TemplateDataGen().nextPersisted();\n+         final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n \n+        this.addRulesPermission(role, host, true);\n+        this.addPermission(role, htmlPageAsset, PermissionLevel.PUBLISH.getType());\n         final RuleAction ruleAction = new RuleActionDataGen().rule(rule).next();\n \n         rulesAPI.saveRuleAction(ruleAction, user, false);\n \n         final List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkActions(ruleAction, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRuleAction(RuleAction, User, boolean)}\n+     * When: User with permission try to create a Rule's Action but without PUBLISH permission over the page\n+     * Should: throw a {@link DotSecurityException}\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test (expected = DotSecurityException.class)\n+    public void shouldSaveRuleActionInPageShouldNotWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDIxNDQ1", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383021445", "createdAt": "2020-03-27T16:36:11Z", "commit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNjoxMVrOF85F9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjozNjoxMVrOF85F9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM5NDI5NA==", "bodyText": "Rename method to: shouldNotDeleteRuleOnPage", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399394294", "createdAt": "2020-03-27T16:36:11Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -193,13 +320,75 @@ public void shouldDeleteRules() throws DotSecurityException, DotDataException {\n         final Host host = new SiteDataGen().nextPersisted();\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n-        this.addPermission(role, host, true);\n+        this.addRulesPermission(role, host, true);\n+\n+        assertTrue(existRule(rule));\n+\n+        rulesAPI.deleteRule(rule, user, false);\n+\n+        assertFalse(existRule(rule));\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#deleteRule(Rule, User, boolean)}\n+     * When: User with permission try to delete a rule's page\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldDeleteRulesInPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n \n-        assertTrue(existRule(user, rule));\n+        this.addRulesPermission(role, host, true);\n+        this.addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);\n+\n+        assertTrue(existRule(rule));\n+\n+        rulesAPI.deleteRule(rule, user, false);\n+\n+        assertFalse(existRule(rule));\n+\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#deleteRule(Rule, User, boolean)}\n+     * When: User with permission try to delete a rule's page without PUBLISH permission over the page\n+     * Should:throw a {@link DotSecurityException}\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldDeleteRulesInPageShouldNotWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d54b5500f06032c74edc68827d35bdfae0e3e7"}, "originalPosition": 235}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d5384f514af695b89fdbc549338def9a8cce2c", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a3d5384f514af695b89fdbc549338def9a8cce2c", "committedDate": "2020-03-27T16:55:17Z", "message": "#17901 refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c57d7fe15875cec1b5a59c6dd7c675575f3bfb4", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/5c57d7fe15875cec1b5a59c6dd7c675575f3bfb4", "committedDate": "2020-03-27T17:58:16Z", "message": "#17901 refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDg4MzMy", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383088332", "createdAt": "2020-03-27T18:03:31Z", "commit": {"oid": "5c57d7fe15875cec1b5a59c6dd7c675575f3bfb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30f796e80b76383c5d421a2a1f2cf15966746eb", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/e30f796e80b76383c5d421a2a1f2cf15966746eb", "committedDate": "2020-03-27T19:11:00Z", "message": "Merge remote-tracking branch 'origin/master' into issue-17901-Unable-to-create-rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e", "committedDate": "2020-03-27T19:11:56Z", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-17901-Unable-to-create-rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTIz", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140523", "createdAt": "2020-03-27T19:22:41Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0MVrOF8--Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0MVrOF8--Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDU5NQ==", "bodyText": "Issue found: Parameter 'role' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490595", "createdAt": "2020-03-27T19:22:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -527,6 +702,30 @@ public void shouldSaveNewRuleInPage() throws DotSecurityException, DotDataExcept\n         assertTrue(rulesId.contains(rule.getId()));\n     }\n \n+    @NotNull\n+    private void addPermission(\n+            final Role role,\n+            final Permissionable permissionable,\n+            final int permissionPublish) {\n+\n+        final Permission publishPermission = getPermission(role, permissionable, permissionPublish);\n+\n+        try {\n+            APILocator.getPermissionAPI().save(publishPermission, permissionable, systemUser, false);\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @NotNull\n+    private Permission getPermission(Role role, Permissionable permissionable, int permissionPublish) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 397}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTM3", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140537", "createdAt": "2020-03-27T19:22:43Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0M1rOF8--LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0M1rOF8--LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDYwNQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490605", "createdAt": "2020-03-27T19:22:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,85 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        addRulesPublishPermissions(role, host);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        createConditionAndCheck(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page\n+     * Should: save the rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveConditionInRulesPage() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTQ2", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140546", "createdAt": "2020-03-27T19:22:44Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NFrOF8--NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NFrOF8--NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDYxMw==", "bodyText": "Issue found: Local variable 'allRules' could be declared final", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490613", "createdAt": "2020-03-27T19:22:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -82,12 +79,85 @@ public void shouldSaveCondition() throws DotSecurityException, DotDataException\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n         final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n-        this.addPermission(role, host, true);\n+        addRulesPublishPermissions(role, host);\n \n         //Saving and testing GroupCondition\n         rulesAPI.saveConditionGroup(conditionGroup, user, false);\n \n         List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        createConditionAndCheck(user, conditionGroup, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When:Try to create a Group Condition and a Condition in a page's rule with PuBLISH permission over the page\n+     * Should: save the rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveConditionInRulesPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .nextPersisted();\n+\n+        addPermission(role, htmlPageAsset, PermissionAPI.PERMISSION_PUBLISH);\n+        addRulesPublishPermissions(role, host);\n+\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTYw", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140560", "createdAt": "2020-03-27T19:22:45Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NVrOF8--QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NVrOF8--QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDYyNA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490624", "createdAt": "2020-03-27T19:22:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -144,13 +214,75 @@ public void shouldSaveRuleAction() throws DotSecurityException, DotDataException\n         final Host host = new SiteDataGen().nextPersisted();\n         final Rule rule = new RuleDataGen().host(host).nextPersisted();\n \n-        this.addPermission(role, host, true);\n+        addRulesPublishPermissions(role, host);\n+\n+        final RuleAction ruleAction = new RuleActionDataGen().rule(rule).next();\n+\n+        rulesAPI.saveRuleAction(ruleAction, user, false);\n+\n+        final List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        checkActions(ruleAction, allRules);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRuleAction(RuleAction, User, boolean)}\n+     * When: User with permission try to create a Rule's Action in a Rule's Page\n+     * Should: Save it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveRuleActionInPage() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTgw", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140580", "createdAt": "2020-03-27T19:22:46Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NlrOF8--VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0NlrOF8--VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDY0NA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business'", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490644", "createdAt": "2020-03-27T19:22:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -16,11 +16,7 @@\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Permission;\n-import com.dotmarketing.business.APILocator;\n-import com.dotmarketing.business.CacheLocator;\n-import com.dotmarketing.business.PermissionAPI;\n-import com.dotmarketing.business.Role;\n-import com.dotmarketing.business.Ruleable;\n+import com.dotmarketing.business.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTQwNTky", "url": "https://github.com/dotCMS/core/pull/18201#pullrequestreview-383140592", "createdAt": "2020-03-27T19:22:48Z", "commit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0OFrOF8--aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyMjo0OFrOF8--aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MDY2NA==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18201#discussion_r399490664", "createdAt": "2020-03-27T19:22:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -527,6 +702,30 @@ public void shouldSaveNewRuleInPage() throws DotSecurityException, DotDataExcept\n         assertTrue(rulesId.contains(rule.getId()));\n     }\n \n+    @NotNull\n+    private void addPermission(\n+            final Role role,\n+            final Permissionable permissionable,\n+            final int permissionPublish) {\n+\n+        final Permission publishPermission = getPermission(role, permissionable, permissionPublish);\n+\n+        try {\n+            APILocator.getPermissionAPI().save(publishPermission, permissionable, systemUser, false);\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcc64bb04edfadcee9a6df0f9cb6ec383121f7e"}, "originalPosition": 392}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1225, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}