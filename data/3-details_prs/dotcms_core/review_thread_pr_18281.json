{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTAzNDY4", "number": 18281, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0NDo0MFrODvwNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjo0MFrODxbBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk5NDcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0NDo0MFrOGCXSlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozMDoxMVrOGC_yDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTkyNA==", "bodyText": "can we write a test for this?", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r405131924", "createdAt": "2020-04-07T21:44:40Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "diffHunk": "@@ -245,14 +257,22 @@ public static void setFieldInternationalization(\n         final long languageId = contentTypeInternationalization.getLanguageId();\n         final boolean live = contentTypeInternationalization.isLive();\n         final User user = APILocator.systemUser();\n-        \n-        for (final String propertyName : fieldMap.keySet()) {\n-            final String key = String.format(\"%s.%s.%s\", contentType.variable(), fieldMap.get(\"variable\"), propertyName);\n-            final String i18nValue = APILocator.getLanguageVariableAPI().getLanguageVariable(\n-                    key, languageId, user, live, user == null);\n-\n-            if (!i18nValue.equals(key) && !i18nValue.equals(fieldMap.get(propertyName).toString())) {\n-                fieldMap.put(propertyName, i18nValue);\n+\n+        try {\n+            for (final String propertyName : fieldMap.keySet()) {\n+                final String key = String.format(\"%s.%s.%s\", contentType.variable(), fieldMap.get(\"variable\"), propertyName);\n+                final String i18nValue = APILocator.getLanguageVariableAPI().getLanguageVariable(\n+                        key, languageId, user, live, user == null);\n+\n+                if (!i18nValue.equals(key) && !i18nValue.equals(fieldMap.get(propertyName).toString())) {\n+                    fieldMap.put(propertyName, i18nValue);\n+                }\n+            }\n+        } catch (DotRuntimeException e) {\n+            if ( ExceptionUtil.causedBy(e, ConnectException.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcfb784ff9da722a3e797056ca839839bae8a1d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NTM0MA==", "bodyText": "done fc44d05#diff-174105054591969073d7cc9d3406b5d5R27", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r405795340", "createdAt": "2020-04-08T20:30:11Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "diffHunk": "@@ -245,14 +257,22 @@ public static void setFieldInternationalization(\n         final long languageId = contentTypeInternationalization.getLanguageId();\n         final boolean live = contentTypeInternationalization.isLive();\n         final User user = APILocator.systemUser();\n-        \n-        for (final String propertyName : fieldMap.keySet()) {\n-            final String key = String.format(\"%s.%s.%s\", contentType.variable(), fieldMap.get(\"variable\"), propertyName);\n-            final String i18nValue = APILocator.getLanguageVariableAPI().getLanguageVariable(\n-                    key, languageId, user, live, user == null);\n-\n-            if (!i18nValue.equals(key) && !i18nValue.equals(fieldMap.get(propertyName).toString())) {\n-                fieldMap.put(propertyName, i18nValue);\n+\n+        try {\n+            for (final String propertyName : fieldMap.keySet()) {\n+                final String key = String.format(\"%s.%s.%s\", contentType.variable(), fieldMap.get(\"variable\"), propertyName);\n+                final String i18nValue = APILocator.getLanguageVariableAPI().getLanguageVariable(\n+                        key, languageId, user, live, user == null);\n+\n+                if (!i18nValue.equals(key) && !i18nValue.equals(fieldMap.get(propertyName).toString())) {\n+                    fieldMap.put(propertyName, i18nValue);\n+                }\n+            }\n+        } catch (DotRuntimeException e) {\n+            if ( ExceptionUtil.causedBy(e, ConnectException.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMTkyNA=="}, "originalCommit": {"oid": "2bcfb784ff9da722a3e797056ca839839bae8a1d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDA0Mjk5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowMTo0NFrOGCXwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoyOTozMVrOGC_wyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTY0MQ==", "bodyText": "This method sounds like a good candidate to be moved to an API. Too much for a util method?", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r405139641", "createdAt": "2020-04-07T22:01:44Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "diffHunk": "@@ -236,6 +239,15 @@ public static Field copyField(final Field field, final int newSortOrder) {\n         return jsonFieldTransformer.from();\n     }\n \n+    /**\n+     * Apply Internationalization to field property using a Language Variable, for each field property set into\n+     * fieldMap a Language Variable with the name contentTypeVariable.fieldVariable.propertyName is searched, if it\n+     * exists then the field's property value is replaced by the language variable value\n+     *\n+     * @param contentType\n+     * @param contentTypeInternationalization set the mode, language and user to search the Language Variable\n+     * @param fieldMap field properties\n+     */\n     public static void setFieldInternationalization(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcfb784ff9da722a3e797056ca839839bae8a1d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NTAxNg==", "bodyText": "done c5d753c", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r405795016", "createdAt": "2020-04-08T20:29:31Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/layout/FieldUtil.java", "diffHunk": "@@ -236,6 +239,15 @@ public static Field copyField(final Field field, final int newSortOrder) {\n         return jsonFieldTransformer.from();\n     }\n \n+    /**\n+     * Apply Internationalization to field property using a Language Variable, for each field property set into\n+     * fieldMap a Language Variable with the name contentTypeVariable.fieldVariable.propertyName is searched, if it\n+     * exists then the field's property value is replaced by the language variable value\n+     *\n+     * @param contentType\n+     * @param contentTypeInternationalization set the mode, language and user to search the Language Variable\n+     * @param fieldMap field properties\n+     */\n     public static void setFieldInternationalization(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzOTY0MQ=="}, "originalCommit": {"oid": "2bcfb784ff9da722a3e797056ca839839bae8a1d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozM1rOGE4smw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozM1rOGE4smw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQxMQ==", "bodyText": "Issue found: The String literal \"value_3\" appears 4 times in this file; the first occurrence is on line 72", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776411", "createdAt": "2020-04-13T23:26:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.junit.Assert.assertEquals;\n+\n+public class FieldAPIImplTest {\n+    private static PermissionAPI perAPI;\n+    private static ContentletAPI conAPI;\n+    private static UserAPI userAPI;\n+    private static RelationshipAPI relationshipAPI;\n+    private static LocalSystemEventsAPI localSystemEventsAPI;\n+    private static LanguageVariableAPI languageVariableAPI;\n+\n+    private static FieldAPIImpl fieldAPIImpl;\n+\n+    @BeforeClass\n+    public static void init(){\n+        perAPI = mock(PermissionAPI.class);\n+        conAPI = mock(ContentletAPI.class);\n+        userAPI = mock(UserAPI.class);\n+        relationshipAPI = mock(RelationshipAPI.class);\n+        localSystemEventsAPI = mock(LocalSystemEventsAPI.class);\n+        languageVariableAPI = mock(LanguageVariableAPI.class);\n+\n+        fieldAPIImpl = new FieldAPIImpl(\n+                perAPI,\n+                conAPI,\n+                userAPI,\n+                relationshipAPI,\n+                localSystemEventsAPI,\n+                languageVariableAPI\n+        );\n+    }\n+\n+    /**\n+     * when: you have to language variable for the Content Type's fields\n+     * Should: Change the field property name by the language variable values\n+     */\n+    @Test\n+    public void shouldFieldInternationalizationWork(){\n+        final long languageId = 1;\n+        final boolean live = true;\n+        final User user = mock(User.class);\n+        final Object object = mock(Object.class);\n+\n+        final ContentType contentType = mock(ContentType.class);\n+        final ContentTypeInternationalization contentTypeInternationalization = mock(ContentTypeInternationalization.class);\n+        final Map<String, Object> fieldMap = map(\n+                \"attribute_1\", \"value_1\",\n+                \"attribute_2\", \"value_2\",\n+                \"attribute_3\", \"value_3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNFrOGE4soQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNFrOGE4soQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQxNw==", "bodyText": "Issue found: The String literal \"attribute_1\" appears 4 times in this file; the first occurrence is on line 70", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776417", "createdAt": "2020-04-13T23:26:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.junit.Assert.assertEquals;\n+\n+public class FieldAPIImplTest {\n+    private static PermissionAPI perAPI;\n+    private static ContentletAPI conAPI;\n+    private static UserAPI userAPI;\n+    private static RelationshipAPI relationshipAPI;\n+    private static LocalSystemEventsAPI localSystemEventsAPI;\n+    private static LanguageVariableAPI languageVariableAPI;\n+\n+    private static FieldAPIImpl fieldAPIImpl;\n+\n+    @BeforeClass\n+    public static void init(){\n+        perAPI = mock(PermissionAPI.class);\n+        conAPI = mock(ContentletAPI.class);\n+        userAPI = mock(UserAPI.class);\n+        relationshipAPI = mock(RelationshipAPI.class);\n+        localSystemEventsAPI = mock(LocalSystemEventsAPI.class);\n+        languageVariableAPI = mock(LanguageVariableAPI.class);\n+\n+        fieldAPIImpl = new FieldAPIImpl(\n+                perAPI,\n+                conAPI,\n+                userAPI,\n+                relationshipAPI,\n+                localSystemEventsAPI,\n+                languageVariableAPI\n+        );\n+    }\n+\n+    /**\n+     * when: you have to language variable for the Content Type's fields\n+     * Should: Change the field property name by the language variable values\n+     */\n+    @Test\n+    public void shouldFieldInternationalizationWork(){\n+        final long languageId = 1;\n+        final boolean live = true;\n+        final User user = mock(User.class);\n+        final Object object = mock(Object.class);\n+\n+        final ContentType contentType = mock(ContentType.class);\n+        final ContentTypeInternationalization contentTypeInternationalization = mock(ContentTypeInternationalization.class);\n+        final Map<String, Object> fieldMap = map(\n+                \"attribute_1\", \"value_1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNVrOGE4sow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNVrOGE4sow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQxOQ==", "bodyText": "Issue found: The String literal \"attribute_2\" appears 4 times in this file; the first occurrence is on line 71", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776419", "createdAt": "2020-04-13T23:26:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.junit.Assert.assertEquals;\n+\n+public class FieldAPIImplTest {\n+    private static PermissionAPI perAPI;\n+    private static ContentletAPI conAPI;\n+    private static UserAPI userAPI;\n+    private static RelationshipAPI relationshipAPI;\n+    private static LocalSystemEventsAPI localSystemEventsAPI;\n+    private static LanguageVariableAPI languageVariableAPI;\n+\n+    private static FieldAPIImpl fieldAPIImpl;\n+\n+    @BeforeClass\n+    public static void init(){\n+        perAPI = mock(PermissionAPI.class);\n+        conAPI = mock(ContentletAPI.class);\n+        userAPI = mock(UserAPI.class);\n+        relationshipAPI = mock(RelationshipAPI.class);\n+        localSystemEventsAPI = mock(LocalSystemEventsAPI.class);\n+        languageVariableAPI = mock(LanguageVariableAPI.class);\n+\n+        fieldAPIImpl = new FieldAPIImpl(\n+                perAPI,\n+                conAPI,\n+                userAPI,\n+                relationshipAPI,\n+                localSystemEventsAPI,\n+                languageVariableAPI\n+        );\n+    }\n+\n+    /**\n+     * when: you have to language variable for the Content Type's fields\n+     * Should: Change the field property name by the language variable values\n+     */\n+    @Test\n+    public void shouldFieldInternationalizationWork(){\n+        final long languageId = 1;\n+        final boolean live = true;\n+        final User user = mock(User.class);\n+        final Object object = mock(Object.class);\n+\n+        final ContentType contentType = mock(ContentType.class);\n+        final ContentTypeInternationalization contentTypeInternationalization = mock(ContentTypeInternationalization.class);\n+        final Map<String, Object> fieldMap = map(\n+                \"attribute_1\", \"value_1\",\n+                \"attribute_2\", \"value_2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNlrOGE4sqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozNlrOGE4sqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQyNQ==", "bodyText": "Issue found: The String literal \"variable\" appears 4 times in this file; the first occurrence is on line 73", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776425", "createdAt": "2020-04-13T23:26:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Matchers.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.junit.Assert.assertEquals;\n+\n+public class FieldAPIImplTest {\n+    private static PermissionAPI perAPI;\n+    private static ContentletAPI conAPI;\n+    private static UserAPI userAPI;\n+    private static RelationshipAPI relationshipAPI;\n+    private static LocalSystemEventsAPI localSystemEventsAPI;\n+    private static LanguageVariableAPI languageVariableAPI;\n+\n+    private static FieldAPIImpl fieldAPIImpl;\n+\n+    @BeforeClass\n+    public static void init(){\n+        perAPI = mock(PermissionAPI.class);\n+        conAPI = mock(ContentletAPI.class);\n+        userAPI = mock(UserAPI.class);\n+        relationshipAPI = mock(RelationshipAPI.class);\n+        localSystemEventsAPI = mock(LocalSystemEventsAPI.class);\n+        languageVariableAPI = mock(LanguageVariableAPI.class);\n+\n+        fieldAPIImpl = new FieldAPIImpl(\n+                perAPI,\n+                conAPI,\n+                userAPI,\n+                relationshipAPI,\n+                localSystemEventsAPI,\n+                languageVariableAPI\n+        );\n+    }\n+\n+    /**\n+     * when: you have to language variable for the Content Type's fields\n+     * Should: Change the field property name by the language variable values\n+     */\n+    @Test\n+    public void shouldFieldInternationalizationWork(){\n+        final long languageId = 1;\n+        final boolean live = true;\n+        final User user = mock(User.class);\n+        final Object object = mock(Object.class);\n+\n+        final ContentType contentType = mock(ContentType.class);\n+        final ContentTypeInternationalization contentTypeInternationalization = mock(ContentTypeInternationalization.class);\n+        final Map<String, Object> fieldMap = map(\n+                \"attribute_1\", \"value_1\",\n+                \"attribute_2\", \"value_2\",\n+                \"attribute_3\", \"value_3\",\n+                \"variable\", \"testField\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozN1rOGE4sqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozN1rOGE4sqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQyNw==", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getFieldInternationalization': the method is declared in an interface type", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776427", "createdAt": "2020-04-13T23:26:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPI.java", "diffHunk": "@@ -229,4 +220,37 @@ default FieldAPI instance() {\n \t * @throws DotDataException\n \t */\n     void saveFields(final List<Field> fields, final User user) throws DotSecurityException, DotDataException;\n+\n+\t/**\n+\t * Apply Internationalization to field property using a Language Variable, for each field property set into\n+\t * fieldMap a Language Variable with the name contentTypeVariable.fieldVariable.propertyName is searched, if it\n+\t * exists then the field's property value is replaced by the language variable value\n+\t *\n+\t * @param contentType\n+\t * @param contentTypeInternationalization set the mode, language and user to search the Language Variable\n+\t * @param fieldMap field properties\n+\t * @return  The Field's properties with the new internationalization values\n+\t */\n+\tpublic Map<String, Object> getFieldInternationalization(\n+\t\t\tfinal ContentType contentType,\n+\t\t\tfinal ContentTypeInternationalization contentTypeInternationalization,\n+\t\t\tfinal Map<String, Object> fieldMap\n+\t);\n+\n+\t/**\n+\t * Apply Internationalization to field property using a Language Variable, for each field property set into\n+\t * fieldMap a Language Variable with the name contentTypeVariable.fieldVariable.propertyName is searched, if it\n+\t * exists then the field's property value is replaced by the language variable value\n+\t *\n+\t * @param contentType\n+\t * @param contentTypeInternationalization set the mode, language and user to search the Language Variable\n+\t * @param fieldMap field properties\n+\t * @return  The Field's properties with the new internationalization values\n+\t */\n+\tpublic Map<String, Object> getFieldInternationalization(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NTk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozOFrOGE4ssg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozOFrOGE4ssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQzNA==", "bodyText": "Issue found: No need to import a type that lives in the same package", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776434", "createdAt": "2020-04-13T23:26:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NjAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozOVrOGE4svA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjozOVrOGE4svA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQ0NA==", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Matchers'", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776444", "createdAt": "2020-04-13T23:26:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.business.UserAPI;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.mockito.Matchers.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ5NjAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjo0MFrOGE4sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzoyNjo0MFrOGE4sww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc3NjQ1MQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.APILocator'", "url": "https://github.com/dotCMS/core/pull/18281#discussion_r407776451", "createdAt": "2020-04-13T23:26:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/contenttype/business/FieldAPIImplTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.business.FieldAPIImpl;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.transform.contenttype.ContentTypeInternationalization;\n+import com.dotcms.languagevariable.business.LanguageVariableAPI;\n+import com.dotcms.system.event.local.business.LocalSystemEventsAPI;\n+import com.dotmarketing.business.APILocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66ef18c78cb62d766e29256273e926614f6bf390"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2450, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}