{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTI5MTMx", "number": 18011, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxNFrODg7MTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToyMFrODg7MWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxNFrOFrZphw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxNFrOFrZphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMxOQ==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053319", "createdAt": "2020-02-19T02:59:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxNlrOFrZpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxNlrOFrZpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMyMw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053323", "createdAt": "2020-02-19T02:59:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)\n+                        || (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level)\n+                        || (!LicenseUtil.isASAllowed())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODM3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxN1rOFrZpkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxN1rOFrZpkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMyOQ==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053329", "createdAt": "2020-02-19T02:59:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODM5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxOFrOFrZpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxOFrOFrZpkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzMQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053331", "createdAt": "2020-02-19T02:59:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)\n+                        || (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxOVrOFrZplg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToxOVrOFrZplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzNA==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053334", "createdAt": "2020-02-19T02:59:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODUwODQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToyMFrOFrZpmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwMjo1OToyMFrOFrZpmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1MzMzNg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18011#discussion_r381053336", "createdAt": "2020-02-19T02:59:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -35,58 +37,82 @@\n     @Override\n     @CloseDB\n     protected final void service(HttpServletRequest req, HttpServletResponse response) throws ServletException, IOException {\n-        VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n+        final VelocityRequestWrapper request = new VelocityRequestWrapper(req);\n         final String uri = CMSUrlUtil.getCurrentURI(request);\n-\n+        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n+        final User frontEndUser = ((UserWebAPIImpl) WebAPILocator.getUserWebAPI()).getLoggedInFrontendUser(request);\n+        request.setRequestUri(uri);\n+        final PageMode mode = PageMode.getWithNavigateMode(request);\n+        \n+        // if you are hitting the servlet without running through the other filters\n         if (uri == null) {\n             response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"VelocityServlet called without running through the CMS Filter\");\n             Logger.error(this.getClass(),\n                     \"You cannot call the VelocityServlet without passing the requested url via a  requestAttribute called  \"\n                             + Constants.CMS_FILTER_URI_OVERRIDE);\n             return;\n         }\n-\n-        final boolean comeFromSomeWhere = request.getHeader(\"referer\") != null;\n-\n-        if (APILocator.getLoginServiceAPI().isLoggedIn(request) && !comeFromSomeWhere){\n+        \n+        // if you are a backend user, redirect you to the page edit screen\n+        if (PortalUtil.getUser(request)!=null && PortalUtil.getUser(request).hasConsoleAccess() && !comeFromSomeWhere){\n             goToEditPage(uri,request, response);\n-        } else {\n-\n-            if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level) ||\n-                    (DbConnectionFactory.isOracle() && LicenseUtil.getLevel() < LicenseLevel.PRIME.level) ||\n-                    (!LicenseUtil.isASAllowed())) {\n-                Logger.error(this, \"Enterprise License is required\");\n+            return;\n+        } \n+        \n+        // if you are not running ee\n+        if ((DbConnectionFactory.isMsSql() && LicenseUtil.getLevel() < LicenseLevel.PROFESSIONAL.level)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da7042733a60679842eef136d95056832898f6c2"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2569, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}