{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjcxODkw", "number": 17922, "title": "#17904 first draft for the reset approver actionlet", "bodyText": "Previously when the FourEyeApproverActionlet and the MultipleApproverActionlet actionlet were used it works the first time correctly, by saving in the history the necessary approvals.\nHowever the second time that a approval was needed with the same task, since the old approvals still in the history, the new ones were not needed.\nWith this change, we have introduced a new actionlet call reset approvers which is not deleting but reseting the state of these history rows in order to allow the next approval validation after the reset.\nIt does not affect the history, basically it switched from a single text for the change description to a json (map object) with three attributes\ndescription : all life description\ntype: comment (normal) or approve (the approval itselft)\nstate: NONE (no state specified) , RESET (the row still there but reseted, means not longer used to determine approvals)\nOn progress approval\n\"{'description':'Admin User completed action Four eyes', 'type':'APPROVAL', 'state':'NONE' }\"\n\nReset approval\n\"{'description':'Admin User completed action Four eyes', 'type':'APPROVAL', 'state':'RESET' }\"\n\nWith the changes the user is able to use approval actionlet, two, three, any times.", "createdAt": "2020-01-28T22:32:47Z", "url": "https://github.com/dotCMS/core/pull/17922", "merged": true, "mergeCommit": {"oid": "31316850aac62c0b081a088c906cac2b29fbda47"}, "closed": true, "closedAt": "2020-02-04T15:57:33Z", "author": {"login": "jdotcms"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-5I0HgH2gAyMzY4MjcxODkwOjY0OTc4MDJjZGM4MTBmOGZjYzVlOWY1ZjdjNmUwNTczYjA2MzI4NTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBCUzEAFqTM1MzAxMTg4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6497802cdc810f8fcc5e9f5f7c6e0573b0632850", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/6497802cdc810f8fcc5e9f5f7c6e0573b0632850", "committedDate": "2020-01-28T22:32:27Z", "message": "#17904 first draft for the reset approver actionlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376046627ec1cd0faf36f456cab6b9c15bdef1be", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/376046627ec1cd0faf36f456cab6b9c15bdef1be", "committedDate": "2020-01-29T23:03:33Z", "message": "#17904 adding new change to update instead of delete the approval messages, in addition an action name or id could be pass to associate the reset actionlet to another action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa34e8b702cc3592c8bc161c730fac88e0a5ba28", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/aa34e8b702cc3592c8bc161c730fac88e0a5ba28", "committedDate": "2020-01-30T22:11:36Z", "message": "#17904 adding some fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/434050eb9e0b9606c2c86837821dcf8a8bd7b5ab", "committedDate": "2020-01-30T22:26:59Z", "message": "#17904 codacy feedback done"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTMzNzAz", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351533703", "createdAt": "2020-01-31T14:19:10Z", "commit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxOToxMFrOFkMtuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozODozOFrOFkNUeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMTM2OA==", "bodyText": "While this method looks ok, as a general rule, I am not a fan of writing shallow custom wrappers on top of what apis provide.  It seems like code sprawl.  Do we need to maintain boilerplate code like this?  Why not just use a lamda filter ... and .findFirst() which is going to be better tested?", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373501368", "createdAt": "2020-01-31T14:19:10Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/util/CollectionsUtils.java", "diffHunk": "@@ -926,7 +925,27 @@\n \t    return new ImmutableListCollector<>();\n     }\n \n-\tprivate static class ImmutableListCollector<T> implements Collector<T, ImmutableList.Builder<T>, ImmutableList<T>> {\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMTk0Mg==", "bodyText": "A unique name should happen automatically when you call new SiteDataGen().nextPersisted(); If it doesn't, this code should be moved there.", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373501942", "createdAt": "2020-01-31T14:20:19Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/FourEyeApproverActionletTest.java", "diffHunk": "@@ -83,7 +83,7 @@ public static void prepare() throws Exception {\n         contentletAPI = APILocator.getContentletAPI();\n         languageAPI = APILocator.getLanguageAPI();\n \n-        site = new SiteDataGen().nextPersisted();\n+        site = new SiteDataGen().name(\"site\"+System.currentTimeMillis()).nextPersisted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwODE5NQ==", "bodyText": "Good tests!", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373508195", "createdAt": "2020-01-31T14:32:28Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/model/WorkflowHistoryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.portlets.workflows.model;\n+\n+import com.liferay.util.StringPool;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+public class WorkflowHistoryTest {\n+\n+    @Test\n+    public void test_getChangeMap_null_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(null);\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return a blank description\", changeMap.get(\"description\"), StringPool.BLANK);\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"type\"), WorkflowHistoryType.COMMENT.name());\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"state\"), WorkflowHistoryState.NONE.name());\n+    }\n+\n+    @Test\n+    public void test_getChangeMap_with_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(\"test\");\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return test description\", workflowHistory.getChangeDescription(), \"test\");\n+        Assert.assertEquals(\"Should return test description\", changeMap.get(\"description\"), \"test\");\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"type\"), WorkflowHistoryType.COMMENT.name());\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"state\"), WorkflowHistoryState.NONE.name());\n+    }\n+\n+    @Test\n+    public void test_getChangeMap_approval_type ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(\"{'description':'test', 'type':'\" + WorkflowHistoryType.APPROVAL.name() + \"', 'state':'\"+  WorkflowHistoryState.NONE.name() +\"' }\");\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return test description\", workflowHistory.getChangeDescription(), \"test\");\n+        Assert.assertEquals(\"Should return test description\", changeMap.get(\"description\"), \"test\");\n+        Assert.assertEquals(\"Should return approval type\", changeMap.get(\"type\"), WorkflowHistoryType.APPROVAL.name());\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"state\"), WorkflowHistoryState.NONE.name());\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwOTUyMQ==", "bodyText": "These should be a Logger.warn\nIf we are not going to log the stack, which is ok, we should at least include the e.getMessage() in our message.  Otherwise the root cause is totally obfuscated.  Logger.warnAndDebug() works as well.", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373509521", "createdAt": "2020-01-31T14:35:10Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/MultipleApproverActionlet.java", "diffHunk": "@@ -64,95 +54,93 @@ public void executeAction(WorkflowProcessor processor, Map<String, WorkflowActio\n \t\t\t}\n \t\t}\n \n-\t\tSet<User> requiredApprovers = new HashSet<User>();\n-\t\tSet<User> hasApproved = new HashSet<User>();\n-\t\tStringTokenizer st = new StringTokenizer(userIds, \", \");\n-\t\twhile (st.hasMoreTokens()) {\n-\t\t\tString x = st.nextToken();\n+\t\tfinal Set<User> requiredApprovers = new HashSet<>();\n+\t\tfinal Set<User> hasApproved       = new HashSet<>();\n+\t\tfinal StringTokenizer userIdTokenizer = new StringTokenizer(userIds, StringPool.COMMA);\n+\t\twhile (userIdTokenizer.hasMoreTokens()) {\n \n-\t\t\tif (Validator.isEmailAddress(x)) {\n+\t\t\tfinal String userIdToken = userIdTokenizer.nextToken();\n+\n+\t\t\tif (Validator.isEmailAddress(userIdToken)) {\n \t\t\t\ttry {\n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadByUserByEmail(x, APILocator.getUserAPI().getSystemUser(), false);\n \n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadByUserByEmail(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with email:\" + x);\n+\n+\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with email:\" + userIdToken);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\ttry {\n \n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadUserById(x, APILocator.getUserAPI().getSystemUser(), false);\n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadUserById(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + x);\n+\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + userIdToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMTI5MA==", "bodyText": "I think we have an StringUtils.isJson method.    Maybe it needs a null check and a trim() but those would be good to have.", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373511290", "createdAt": "2020-01-31T14:38:38Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/model/WorkflowHistory.java", "diffHunk": "@@ -65,7 +69,30 @@ public void setCreationDate(Date creationDate) {\n     }\r\n \r\n     public String getChangeDescription() {\r\n-        return changeDescription;\r\n+\r\n+        if (UtilMethods.isSet(this.changeDescription) && this.changeDescription.trim().startsWith(\"{\")) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434050eb9e0b9606c2c86837821dcf8a8bd7b5ab"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d4e71cda9444f1c3efa7070be96f241ee69b4a8", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/4d4e71cda9444f1c3efa7070be96f241ee69b4a8", "committedDate": "2020-01-31T17:55:32Z", "message": "#17984 Feedback done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4", "committedDate": "2020-01-31T18:02:35Z", "message": "#17984 Feedback done 2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDAy", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682402", "createdAt": "2020-01-31T18:10:33Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozM1rOFkThvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozM1rOFkThvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMjk5MQ==", "bodyText": "Issue found: The String literal \"Should return test description\" appears 4 times in this file; the first occurrence is on line 31", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373612991", "createdAt": "2020-01-31T18:10:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/model/WorkflowHistoryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.portlets.workflows.model;\n+\n+import com.liferay.util.StringPool;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+public class WorkflowHistoryTest {\n+\n+    @Test\n+    public void test_getChangeMap_null_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(null);\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return a blank description\", changeMap.get(\"description\"), StringPool.BLANK);\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"type\"), WorkflowHistoryType.COMMENT.name());\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"state\"), WorkflowHistoryState.NONE.name());\n+    }\n+\n+    @Test\n+    public void test_getChangeMap_with_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(\"test\");\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return test description\", workflowHistory.getChangeDescription(), \"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDA4", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682408", "createdAt": "2020-01-31T18:10:34Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozNFrOFkThxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozNFrOFkThxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMjk5OA==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373612998", "createdAt": "2020-01-31T18:10:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/ResetApproversActionlet.java", "diffHunk": "@@ -0,0 +1,130 @@\n+\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryState;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryType;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n+\n+/**\n+ * Deletes the approvers of the workflow task\n+ * @author jsanca\n+ */\n+public class ResetApproversActionlet extends WorkFlowActionlet {\n+\n+\tprivate static final String ID_DELIMITER = \",\";\n+\tprivate static final String PARAM_CONTENT_ACTIONS = \"action\";\n+\n+\tprivate static ArrayList<WorkflowActionletParameter> ACTIONLET_PARAMETERS = null;\n+\n+\t@Override\n+\tpublic synchronized List<WorkflowActionletParameter> getParameters() {\n+\t\tif (null == ACTIONLET_PARAMETERS) {\n+\t\t\tACTIONLET_PARAMETERS = new ArrayList<>();\n+\t\t\tACTIONLET_PARAMETERS\n+\t\t\t\t\t.add(new WorkflowActionletParameter(PARAM_CONTENT_ACTIONS,\n+\t\t\t\t\t\t\t\"Optional Action ID, or Name\", null,\n+\t\t\t\t\t\t\tfalse));\n+\t\t}\n+\t\treturn ACTIONLET_PARAMETERS;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"Reset Approvals\";\n+\t}\n+\n+\t@Override\n+\tpublic String getHowTo() {\n+\n+\t\treturn \"This actionlet will reset workflow history approvals\";\n+\t}\n+\n+\tprivate Optional<String> getWorkflowIdFromParameter (final WorkflowProcessor processor,\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t final WorkflowActionClassParameter parameter)  {\n+\n+\t\tfinal String value = getParameterValue(parameter);\n+\t\tif (null != value) {\n+\n+\t\t\tif (!UUIDUtil.isUUID(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDIy", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682422", "createdAt": "2020-01-31T18:10:35Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozNlrOFkThzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozNlrOFkThzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzAwNA==", "bodyText": "Issue found: Avoid using redundant field initializer for 'ACTIONLET_PARAMETERS'", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613004", "createdAt": "2020-01-31T18:10:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/ResetApproversActionlet.java", "diffHunk": "@@ -0,0 +1,130 @@\n+\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryState;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryType;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n+\n+/**\n+ * Deletes the approvers of the workflow task\n+ * @author jsanca\n+ */\n+public class ResetApproversActionlet extends WorkFlowActionlet {\n+\n+\tprivate static final String ID_DELIMITER = \",\";\n+\tprivate static final String PARAM_CONTENT_ACTIONS = \"action\";\n+\n+\tprivate static ArrayList<WorkflowActionletParameter> ACTIONLET_PARAMETERS = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDM1", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682435", "createdAt": "2020-01-31T18:10:37Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozN1rOFkTh2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozN1rOFkTh2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzAxOA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.model'", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613018", "createdAt": "2020-01-31T18:10:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/FourEyeApproverActionlet.java", "diffHunk": "@@ -1,27 +1,22 @@\n package com.dotmarketing.portlets.workflows.actionlet;\n \n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getApproversFromHistory;\n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getUsersFromIds;\n-\n import com.dotcms.util.ConversionUtils;\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.business.Role;\n import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.portlets.workflows.model.MultiUserReferenceParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n-import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.portlets.workflows.model.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDQ5", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682449", "createdAt": "2020-01-31T18:10:38Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozOFrOFkTh6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozOFrOFkTh6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzAzNQ==", "bodyText": "Issue found: This call to Collection.toArray() may be optimizable", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613035", "createdAt": "2020-01-31T18:10:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/MultipleApproverActionlet.java", "diffHunk": "@@ -64,95 +66,94 @@ public void executeAction(WorkflowProcessor processor, Map<String, WorkflowActio\n \t\t\t}\n \t\t}\n \n-\t\tSet<User> requiredApprovers = new HashSet<User>();\n-\t\tSet<User> hasApproved = new HashSet<User>();\n-\t\tStringTokenizer st = new StringTokenizer(userIds, \", \");\n-\t\twhile (st.hasMoreTokens()) {\n-\t\t\tString x = st.nextToken();\n+\t\tfinal Set<User> requiredApprovers = new HashSet<>();\n+\t\tfinal Set<User> hasApproved       = new HashSet<>();\n+\t\tfinal StringTokenizer userIdTokenizer = new StringTokenizer(userIds, StringPool.COMMA);\n+\t\twhile (userIdTokenizer.hasMoreTokens()) {\n \n-\t\t\tif (Validator.isEmailAddress(x)) {\n+\t\t\tfinal String userIdToken = userIdTokenizer.nextToken();\n+\n+\t\t\tif (Validator.isEmailAddress(userIdToken)) {\n \t\t\t\ttry {\n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadByUserByEmail(x, APILocator.getUserAPI().getSystemUser(), false);\n \n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadByUserByEmail(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with email:\" + x);\n+\n+\t\t\t\t\tLogger.warnAndDebug(this.getClass(), \"Unable to find user with email:\" + userIdToken\n+\t\t\t\t\t\t\t+ \", message: \" + e.getMessage(), e);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\ttry {\n \n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadUserById(x, APILocator.getUserAPI().getSystemUser(), false);\n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadUserById(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + x);\n+\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + userIdToken);\n \t\t\t\t}\n \n \t\t\t}\n \t\t}\n+\n \t\tList<WorkflowHistory> histories = processor.getHistory();\n \t\t\n \t\t// add this approval to the history\n-\t\tWorkflowHistory h = new WorkflowHistory();\n-\t\th.setActionId(processor.getAction().getId());\n-\t\th.setMadeBy(processor.getUser().getUserId());\n-\t\tif(histories == null){\n-\t\t\thistories = new ArrayList<WorkflowHistory>();\n-\t\t\thistories.add(h);\n-\t\t}else histories.add(h);\n+\t\tfinal WorkflowHistory workflowHistory = new WorkflowHistory();\n+\t\tworkflowHistory.setActionId(processor.getAction().getId());\n+\t\tworkflowHistory.setMadeBy(processor.getUser().getUserId());\n+\t\thistories = histories == null?new ArrayList<>():histories;\n+\t\thistories.add(workflowHistory);\n \t\t\n-\t\tfor (User u : requiredApprovers) {\n+\t\tfor (final User requiredApprover : requiredApprovers) {\n+\t\t\tfor (final WorkflowHistory history : histories) {\n \n-\t\t\tfor (WorkflowHistory history : histories) {\n-\t\t\t\tif (history.getActionId().equals(processor.getAction().getId())) {\n-\t\t\t\t\tif (u.getUserId().equals(history.getMadeBy())) {\n-\t\t\t\t\t\thasApproved.add(u);\n-\t\t\t\t\t}\n+\t\t\t\tfinal Map<String, Object> changeMap = history.getChangeMap();\n+\t\t\t\tif (history.getActionId().equals(processor.getAction().getId()) && // if it is the action id and it is not reset.\n+\t\t\t\t\t\t!WorkflowHistoryState.RESET.name().equals(changeMap.get(\"state\"))) {\n \n-\t\t\t\t}\n+\t\t\t\t\tif (requiredApprover.getUserId().equals(history.getMadeBy())) {\n \n+\t\t\t\t\t\thasApproved.add(requiredApprover);\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n-\n \t\t}\n \t\t\n \t\tif (hasApproved.size() < requiredApprovers.size()) {\n \t\t\t\n \t\t\tshouldStop = true;\n \t\t\t// keep the workflow process on the same step\n \t\t\tprocessor.setNextStep( processor.getStep());\n-\t\t\t\n-\t\t\t\n+\n \t\t\t// only send emails to users who have not approved\n-\t\t\tList<String> emails = new ArrayList<String>();\n-\t\t\tfor (User u : requiredApprovers) {\n-\t\t\t\tif(!hasApproved.contains(u)){\n-\t\t\t\t\temails.add(u.getEmailAddress());\t\t\t\t\t\n+\t\t\tfinal List<String> emails = new ArrayList<>();\n+\t\t\tfor (final User user : requiredApprovers) {\n+\t\t\t\tif(!hasApproved.contains(user)){\n+\t\t\t\t\temails.add(user.getEmailAddress());\n \t\t\t\t}\n \t\t\t}\n \t\t\t\n \t\t\t// to assign it for next assignee\n-\t\t\tfor (User u : requiredApprovers) {\n-\t\t\t\tif(!hasApproved.contains(u)){\t\t\t\t\t\n+\t\t\tfor (final User requiredApprover : requiredApprovers) {\n+\t\t\t\tif(!hasApproved.contains(requiredApprover)){\n \t\t\t\t\ttry {\n-\t                   processor.setNextAssign(APILocator.getRoleAPI().getUserRole(u));\n+\t                   processor.setNextAssign(APILocator.getRoleAPI().getUserRole(requiredApprover));\n \t                   break;\n \t                } catch (DotDataException e) {\n \t                   Logger.error(MultipleApproverActionlet.class,e.getMessage(),e);\n \t                }\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tString[] emailsToSend = (String[]) emails.toArray(new String[emails.size()]);\n \n-\t\t\t\n+\t\t\tfinal String[] emailsToSend = emails.toArray(new String[emails.size()]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 195}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDYw", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682460", "createdAt": "2020-01-31T18:10:39Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozOVrOFkTh9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDozOVrOFkTh9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA0NQ==", "bodyText": "Issue found: Avoid unused private fields such as 'ID_DELIMITER'.", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613045", "createdAt": "2020-01-31T18:10:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/ResetApproversActionlet.java", "diffHunk": "@@ -0,0 +1,130 @@\n+\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryState;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryType;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n+\n+/**\n+ * Deletes the approvers of the workflow task\n+ * @author jsanca\n+ */\n+public class ResetApproversActionlet extends WorkFlowActionlet {\n+\n+\tprivate static final String ID_DELIMITER = \",\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDc0", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682474", "createdAt": "2020-01-31T18:10:40Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0MFrOFkTh-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0MFrOFkTh-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA1MQ==", "bodyText": "Issue found: The String literal \"test\" appears 5 times in this file; the first occurrence is on line 27", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613051", "createdAt": "2020-01-31T18:10:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/model/WorkflowHistoryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.portlets.workflows.model;\n+\n+import com.liferay.util.StringPool;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+public class WorkflowHistoryTest {\n+\n+    @Test\n+    public void test_getChangeMap_null_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(null);\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return a blank description\", changeMap.get(\"description\"), StringPool.BLANK);\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"type\"), WorkflowHistoryType.COMMENT.name());\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"state\"), WorkflowHistoryState.NONE.name());\n+    }\n+\n+    @Test\n+    public void test_getChangeMap_with_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNDkz", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682493", "createdAt": "2020-01-31T18:10:42Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0MlrOFkTiDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0MlrOFkTiDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA2OA==", "bodyText": "Issue found: Use block level rather than method level synchronization", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613068", "createdAt": "2020-01-31T18:10:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/ResetApproversActionlet.java", "diffHunk": "@@ -0,0 +1,130 @@\n+\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryState;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryType;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n+\n+/**\n+ * Deletes the approvers of the workflow task\n+ * @author jsanca\n+ */\n+public class ResetApproversActionlet extends WorkFlowActionlet {\n+\n+\tprivate static final String ID_DELIMITER = \",\";\n+\tprivate static final String PARAM_CONTENT_ACTIONS = \"action\";\n+\n+\tprivate static ArrayList<WorkflowActionletParameter> ACTIONLET_PARAMETERS = null;\n+\n+\t@Override\n+\tpublic synchronized List<WorkflowActionletParameter> getParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNTA0", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682504", "createdAt": "2020-01-31T18:10:43Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0M1rOFkTiEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0M1rOFkTiEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA3Mg==", "bodyText": "Issue found: The String literal \"Should return a comment type\" appears 5 times in this file; the first occurrence is on line 20", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613072", "createdAt": "2020-01-31T18:10:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/model/WorkflowHistoryTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.portlets.workflows.model;\n+\n+import com.liferay.util.StringPool;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+public class WorkflowHistoryTest {\n+\n+    @Test\n+    public void test_getChangeMap_null_description ()  {\n+\n+        final WorkflowHistory workflowHistory = new WorkflowHistory();\n+        workflowHistory.setChangeDescription(null);\n+        final Map<String, Object> changeMap = workflowHistory.getChangeMap();\n+\n+        Assert.assertNotNull(\"GetChangeMap must not return a null map\",changeMap);\n+        Assert.assertEquals(\"Should return a blank description\", changeMap.get(\"description\"), StringPool.BLANK);\n+        Assert.assertEquals(\"Should return a comment type\", changeMap.get(\"type\"), WorkflowHistoryType.COMMENT.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNTEz", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682513", "createdAt": "2020-01-31T18:10:44Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0NFrOFkTiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0NFrOFkTiGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA4MQ==", "bodyText": "Issue found: Avoid using implementation types like 'ArrayList'; use the interface instead", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613081", "createdAt": "2020-01-31T18:10:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/ResetApproversActionlet.java", "diffHunk": "@@ -0,0 +1,130 @@\n+\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowAction;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryState;\n+import com.dotmarketing.portlets.workflows.model.WorkflowHistoryType;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n+\n+/**\n+ * Deletes the approvers of the workflow task\n+ * @author jsanca\n+ */\n+public class ResetApproversActionlet extends WorkFlowActionlet {\n+\n+\tprivate static final String ID_DELIMITER = \",\";\n+\tprivate static final String PARAM_CONTENT_ACTIONS = \"action\";\n+\n+\tprivate static ArrayList<WorkflowActionletParameter> ACTIONLET_PARAMETERS = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNTIz", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682523", "createdAt": "2020-01-31T18:10:45Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0NVrOFkTiIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0NVrOFkTiIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA4OQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil'", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613089", "createdAt": "2020-01-31T18:10:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/FourEyeApproverActionlet.java", "diffHunk": "@@ -1,27 +1,22 @@\n package com.dotmarketing.portlets.workflows.actionlet;\n \n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getApproversFromHistory;\n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getParameterValue;\n-import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.getUsersFromIds;\n-\n import com.dotcms.util.ConversionUtils;\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.business.Role;\n import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.portlets.workflows.model.MultiUserReferenceParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n-import com.dotmarketing.portlets.workflows.model.WorkflowHistory;\n-import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.portlets.workflows.model.*;\n import com.dotmarketing.portlets.workflows.util.WorkflowEmailUtil;\n import com.dotmarketing.util.Logger;\n import com.liferay.portal.model.User;\n import io.vavr.Tuple2;\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n+import static com.dotmarketing.portlets.workflows.util.WorkflowActionletUtil.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNjgyNTM3", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-351682537", "createdAt": "2020-01-31T18:10:47Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0N1rOFkTiKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODoxMDo0N1rOFkTiKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYxMzA5OQ==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/17922#discussion_r373613099", "createdAt": "2020-01-31T18:10:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/MultipleApproverActionlet.java", "diffHunk": "@@ -64,95 +66,94 @@ public void executeAction(WorkflowProcessor processor, Map<String, WorkflowActio\n \t\t\t}\n \t\t}\n \n-\t\tSet<User> requiredApprovers = new HashSet<User>();\n-\t\tSet<User> hasApproved = new HashSet<User>();\n-\t\tStringTokenizer st = new StringTokenizer(userIds, \", \");\n-\t\twhile (st.hasMoreTokens()) {\n-\t\t\tString x = st.nextToken();\n+\t\tfinal Set<User> requiredApprovers = new HashSet<>();\n+\t\tfinal Set<User> hasApproved       = new HashSet<>();\n+\t\tfinal StringTokenizer userIdTokenizer = new StringTokenizer(userIds, StringPool.COMMA);\n+\t\twhile (userIdTokenizer.hasMoreTokens()) {\n \n-\t\t\tif (Validator.isEmailAddress(x)) {\n+\t\t\tfinal String userIdToken = userIdTokenizer.nextToken();\n+\n+\t\t\tif (Validator.isEmailAddress(userIdToken)) {\n \t\t\t\ttry {\n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadByUserByEmail(x, APILocator.getUserAPI().getSystemUser(), false);\n \n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadByUserByEmail(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with email:\" + x);\n+\n+\t\t\t\t\tLogger.warnAndDebug(this.getClass(), \"Unable to find user with email:\" + userIdToken\n+\t\t\t\t\t\t\t+ \", message: \" + e.getMessage(), e);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\ttry {\n \n-\t\t\t\t\tUser u = APILocator.getUserAPI().loadUserById(x, APILocator.getUserAPI().getSystemUser(), false);\n-\t\t\t\t\trequiredApprovers.add(u);\n+\t\t\t\t\tfinal User user = APILocator.getUserAPI().loadUserById(userIdToken,\n+\t\t\t\t\t\t\tAPILocator.getUserAPI().getSystemUser(), false);\n+\t\t\t\t\trequiredApprovers.add(user);\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + x);\n+\t\t\t\t\tLogger.error(this.getClass(), \"Unable to find user with userID:\" + userIdToken);\n \t\t\t\t}\n \n \t\t\t}\n \t\t}\n+\n \t\tList<WorkflowHistory> histories = processor.getHistory();\n \t\t\n \t\t// add this approval to the history\n-\t\tWorkflowHistory h = new WorkflowHistory();\n-\t\th.setActionId(processor.getAction().getId());\n-\t\th.setMadeBy(processor.getUser().getUserId());\n-\t\tif(histories == null){\n-\t\t\thistories = new ArrayList<WorkflowHistory>();\n-\t\t\thistories.add(h);\n-\t\t}else histories.add(h);\n+\t\tfinal WorkflowHistory workflowHistory = new WorkflowHistory();\n+\t\tworkflowHistory.setActionId(processor.getAction().getId());\n+\t\tworkflowHistory.setMadeBy(processor.getUser().getUserId());\n+\t\thistories = histories == null?new ArrayList<>():histories;\n+\t\thistories.add(workflowHistory);\n \t\t\n-\t\tfor (User u : requiredApprovers) {\n+\t\tfor (final User requiredApprover : requiredApprovers) {\n+\t\t\tfor (final WorkflowHistory history : histories) {\n \n-\t\t\tfor (WorkflowHistory history : histories) {\n-\t\t\t\tif (history.getActionId().equals(processor.getAction().getId())) {\n-\t\t\t\t\tif (u.getUserId().equals(history.getMadeBy())) {\n-\t\t\t\t\t\thasApproved.add(u);\n-\t\t\t\t\t}\n+\t\t\t\tfinal Map<String, Object> changeMap = history.getChangeMap();\n+\t\t\t\tif (history.getActionId().equals(processor.getAction().getId()) && // if it is the action id and it is not reset.\n+\t\t\t\t\t\t!WorkflowHistoryState.RESET.name().equals(changeMap.get(\"state\"))) {\n \n-\t\t\t\t}\n+\t\t\t\t\tif (requiredApprover.getUserId().equals(history.getMadeBy())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzkwOTI1", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-352390925", "createdAt": "2020-02-03T16:33:20Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTczMzI2", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-352573326", "createdAt": "2020-02-03T21:25:27Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDExODg3", "url": "https://github.com/dotCMS/core/pull/17922#pullrequestreview-353011887", "createdAt": "2020-02-04T14:22:32Z", "commit": {"oid": "b16ef47b23bd7ad0c96985ed70eb2dadf3b407b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1362, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}