{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Nzk1MDY5", "number": 18360, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDoxM1rOD2uNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDoxM1rOD2uNvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzA2ODc3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDoxM1rOGMm8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDo0NDoxM1rOGMm8Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg3NDEzMQ==", "bodyText": "I think we can create a class to handle this 'Map<String, Map<String, List>>', it can do the code more readable, this class could have methods like\n\nMap<String, List> getXXX(String)\nor Even List getXXX(String, String)", "url": "https://github.com/dotCMS/core/pull/18360#discussion_r415874131", "createdAt": "2020-04-27T14:44:13Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -95,16 +96,32 @@\n             appDescriptors = appDescriptors.stream().filter(appDescriptor -> appDescriptor.getName().matches(regexFilter)).collect(\n                     Collectors.toList());\n         }\n-        final Set<String> hostIdentifiers = appsAPI.appKeysByHost().keySet();\n+        final Set<String> siteIdentifiers = appsAPI.appKeysByHost().keySet();\n         for (final AppDescriptor appDescriptor : appDescriptors) {\n             final String appKey = appDescriptor.getKey();\n-            final long configurationsCount = appsAPI\n-                    .filterSitesForAppKey(appKey, hostIdentifiers, user).size();\n-            views.add(new AppView(appDescriptor, configurationsCount));\n+            final int configurationsCount = appsAPI.filterSitesForAppKey(appKey, siteIdentifiers, user).size();\n+            final int sitesWithWarning = computeWarningsBySite(appDescriptor, siteIdentifiers, user);\n+            views.add(new AppView(appDescriptor, configurationsCount, sitesWithWarning));\n         }\n         return views.stream().sorted(compareByCountAndName).collect(CollectionsUtils.toImmutableList());\n     }\n \n+    /**\n+     * Computes the number of warnings regardless of site under the given app-descriptor\n+     * @param appDescriptor\n+     * @param sitesWithConfigurations\n+     * @param user\n+     * @return sum or warnings for the given app-descriptor. Regardless of site.\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    private int computeWarningsBySite(final AppDescriptor appDescriptor,\n+            final Set<String> sitesWithConfigurations, final User user)\n+            throws DotDataException, DotSecurityException {\n+        final Map<String, Map<String, List<String>>> warningsBySite = appsAPI.computeWarningsBySite(appDescriptor, sitesWithConfigurations, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a2c5625e1d4e72a771dd36852f596f935cb447"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2244, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}