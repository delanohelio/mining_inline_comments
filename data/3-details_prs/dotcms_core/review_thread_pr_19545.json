{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTY1NjEz", "number": 19545, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0NzowM1rOFC9mpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTowODozNFrOFC-ViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjUwNzkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0NzowM1rOICYVfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo0NzowM1rOICYVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2Njc4Mw==", "bodyText": "Update postman tests descriptions accordingly. They can be very useful for other developers, especially when a test is broken and somebody else needs to fix it", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539366783", "createdAt": "2020-12-09T14:47:03Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -1,1185 +1,5668 @@\n {\n \t\"info\": {\n-\t\t\"_postman_id\": \"ca04fce0-52b8-4d12-9ab0-35b4a78c794a\",\n+\t\t\"_postman_id\": \"2db489d7-7e7c-4531-a1cb-4d70d61ffb70\",\n \t\t\"name\": \"Template Resource\",\n \t\t\"description\": \"Make the test for the template resource crud\",\n \t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n \t},\n \t\"item\": [\n \t\t{\n-\t\t\t\"name\": \"Create New Template\",\n-\t\t\t\"event\": [\n+\t\t\t\"name\": \"Archive\",\n+\t\t\t\"item\": [\n \t\t\t\t{\n-\t\t\t\t\t\"listen\": \"test\",\n-\t\t\t\t\t\"script\": {\n-\t\t\t\t\t\t\"id\": \"e4345c2e-2b27-4316-a1ed-3089b9a93470\",\n-\t\t\t\t\t\t\"exec\": [\n-\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporaryInode\\\", jsonData.entity.inode);\",\n-\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"templateIdentifier\\\", jsonData.entity.identifier);\",\n-\t\t\t\t\t\t\t\"\"\n-\t\t\t\t\t\t],\n-\t\t\t\t\t\t\"type\": \"text/javascript\"\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t],\n-\t\t\t\"request\": {\n-\t\t\t\t\"auth\": {\n-\t\t\t\t\t\"type\": \"basic\",\n-\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\"name\": \"Create New Template to Archive\",\n+\t\t\t\t\t\"event\": [\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"password\",\n-\t\t\t\t\t\t\t\"value\": \"admin\",\n-\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"eacc2122-5e9b-475f-b762-8f2a627c70de\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"templateIdToArchive\\\", jsonData.entity.identifier);\",\n+\t\t\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t],\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n \t\t\t\t\t\t},\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"username\",\n-\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n-\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"body\": {\n+\t\t\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t},\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n-\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t\t\t]\n \t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t\t\t},\n+\t\t\t\t\t\"response\": []\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"Archive Template Success\",\n+\t\t\t\t\t\"event\": [\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"showPassword\",\n-\t\t\t\t\t\t\t\"value\": false,\n-\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"5bea8c04-e089-4988-b32a-10f0b885159d\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.successCount).to.be.eql(1);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Failed To Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);\",\n+\t\t\t\t\t\t\t\t\t\"});\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t]\n+\t\t\t\t\t],\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"body\": {\n+\t\t\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\t\t\"raw\": \"[\\\"{{templateIdToArchive}}\\\"]\",\n+\t\t\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates/_archive\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\t\t\"_archive\"\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Archive one template successfully\"\n+\t\t\t\t\t},\n+\t\t\t\t\t\"response\": []\n \t\t\t\t},\n-\t\t\t\t\"method\": \"POST\",\n-\t\t\t\t\"header\": [],\n-\t\t\t\t\"body\": {\n-\t\t\t\t\t\"mode\": \"raw\",\n-\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n-\t\t\t\t\t\"options\": {\n-\t\t\t\t\t\t\"raw\": {\n-\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"Get Template Archived True\",\n+\t\t\t\t\t\"event\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"f5fa2f81-954a-44ba-bf79-b1bea82b80a8\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Deleted Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity[0].deleted).to.eql(true);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\t\"url\": {\n-\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates\",\n-\t\t\t\t\t\"host\": [\n-\t\t\t\t\t\t\"{{serverURL}}\"\n \t\t\t\t\t],\n-\t\t\t\t\t\"path\": [\n-\t\t\t\t\t\t\"api\",\n-\t\t\t\t\t\t\"v1\",\n-\t\t\t\t\t\t\"templates\"\n-\t\t\t\t\t]\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates?filter={{templateIdToArchive}}&archive=true\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"query\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"filter\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"{{templateIdToArchive}}\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"archive\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t\t\t},\n+\t\t\t\t\t\"response\": []\n \t\t\t\t},\n-\t\t\t\t\"description\": \"Creates a new template\"\n-\t\t\t},\n-\t\t\t\"response\": []\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"Can not Delete\",\n-\t\t\t\"event\": [\n \t\t\t\t{\n-\t\t\t\t\t\"listen\": \"test\",\n-\t\t\t\t\t\"script\": {\n-\t\t\t\t\t\t\"id\": \"ae1bab8d-cd9f-4f2b-a6e9-bebc660c4573\",\n-\t\t\t\t\t\t\"exec\": [\n-\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 400\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.response.to.have.status(400);\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"\"\n-\t\t\t\t\t\t],\n-\t\t\t\t\t\t\"type\": \"text/javascript\"\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t],\n-\t\t\t\"request\": {\n-\t\t\t\t\"auth\": {\n-\t\t\t\t\t\"type\": \"basic\",\n-\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\"name\": \"Re-Archive Template Success\",\n+\t\t\t\t\t\"event\": [\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"password\",\n-\t\t\t\t\t\t\t\"value\": \"admin\",\n-\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"e22d0f0d-d8d1-4dde-bdd9-0123011717ea\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.successCount).to.be.eql(1);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Failed To Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);\",\n+\t\t\t\t\t\t\t\t\t\"});\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t],\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n \t\t\t\t\t\t},\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"username\",\n-\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n-\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"body\": {\n+\t\t\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\t\t\"raw\": \"[\\\"{{templateIdToArchive}}\\\"]\",\n+\t\t\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t},\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n-\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates/_archive\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\t\t\"_archive\"\n+\t\t\t\t\t\t\t]\n \t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Archive one template successfully\"\n+\t\t\t\t\t},\n+\t\t\t\t\t\"response\": []\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"Get Template Archived True\",\n+\t\t\t\t\t\"event\": [\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\"key\": \"showPassword\",\n-\t\t\t\t\t\t\t\"value\": false,\n-\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"be450247-7657-4e81-89d0-d0e713b09429\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Deleted Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity[0].deleted).to.eql(true);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n-\t\t\t\t\t]\n-\t\t\t\t},\n-\t\t\t\t\"method\": \"DELETE\",\n-\t\t\t\t\"header\": [],\n-\t\t\t\t\"url\": {\n-\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates/{{temporaryInode}}\",\n-\t\t\t\t\t\"host\": [\n-\t\t\t\t\t\t\"{{serverURL}}\"\n \t\t\t\t\t],\n-\t\t\t\t\t\"path\": [\n-\t\t\t\t\t\t\"api\",\n-\t\t\t\t\t\t\"v1\",\n-\t\t\t\t\t\t\"templates\",\n-\t\t\t\t\t\t\"{{temporaryInode}}\"\n-\t\t\t\t\t]\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates?filter={{templateIdToArchive}}&archive=true\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"query\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"filter\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"{{templateIdToArchive}}\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"archive\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"true\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t\t\t},\n+\t\t\t\t\t\"response\": []\n \t\t\t\t},\n-\t\t\t\t\"description\": \"Can not delete, non-archive template\"\n-\t\t\t},\n-\t\t\t\"response\": []\n-\t\t},\n-\t\t{\n-\t\t\t\"name\": \"Edit Template\",\n-\t\t\t\"event\": [\n \t\t\t\t{\n-\t\t\t\t\t\"listen\": \"test\",\n-\t\t\t\t\t\"script\": {\n-\t\t\t\t\t\t\"id\": \"b7c9e706-9c76-4974-9d6f-da0841d5cf49\",\n-\t\t\t\t\t\t\"exec\": [\n-\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n-\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n-\t\t\t\t\t\t\t\"});\",\n-\t\t\t\t\t\t\t\"\",\n-\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporaryInode\\\", jsonData.entity.inode);\",\n-\t\t\t\t\t\t\t\"\"\n-\t\t\t\t\t\t],\n-\t\t\t\t\t\t\"type\": \"text/javascript\"\n-\t\t\t\t\t}\n+\t\t\t\t\t\"name\": \"Archive Template Failed To Archive Id Not Exist\",\n+\t\t\t\t\t\"event\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\t\t\"id\": \"d718a5c0-feb2-4445-afd0-20d9776cf756\",\n+\t\t\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.successCount).to.be.eql(0);\",\n+\t\t\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\t\t\"pm.test(\\\"Failed To Archive Template Check\\\", function () {\",\n+\t\t\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.fails).to.have.lengthOf(1);\",\n+\t\t\t\t\t\t\t\t\t\"});\"\n+\t\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t],\n+\t\t\t\t\t\"request\": {\n+\t\t\t\t\t\t\"auth\": {\n+\t\t\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t\t\t},\n+\t\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\t\t\"header\": [],\n+\t\t\t\t\t\t\"body\": {\n+\t\t\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\t\t\"raw\": \"[\\\"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\\\"]\",\n+\t\t\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"url\": {\n+\t\t\t\t\t\t\t\"raw\": \"{{serverURL}}/api/v1/templates/_archive\",\n+\t\t\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\t\t\"{{serverURL}}\"\n+\t\t\t\t\t\t\t],\n+\t\t\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\t\t\"_archive\"\n+\t\t\t\t\t\t\t]\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t\"description\": \"Archive one template successfully\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 622}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjU2NzMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1NzoyNlrOICY5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1NzoyNlrOICY5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NTk2Nw==", "bodyText": "\"does not exist\". This typo is repeated all over the file", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539375967", "createdAt": "2020-12-09T14:57:26Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -239,16 +201,21 @@ public final Response getLiveById(@Context final HttpServletRequest  httpRequest\n \n         if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n \n-            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+            throw new DoesNotExistException(\"Live Version of the Template with Id: \" + templateId + \" does not exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjU2ODkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1NzozOFrOICY6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1NzozOFrOICY6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NjE5Mw==", "bodyText": "same here", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539376193", "createdAt": "2020-12-09T14:57:38Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -270,12 +237,22 @@ public final Response getWorkingById(@Context final HttpServletRequest  httpRequ\n \n         if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n \n-            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+            throw new DoesNotExistException(\"Working Version of the Template with Id: \" + templateId + \" does not exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjU3MDU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1Nzo1N1rOICY7SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1Nzo1N1rOICY7SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3NjQ1Nw==", "bodyText": "and here", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539376457", "createdAt": "2020-12-09T14:57:57Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -322,26 +294,77 @@ public final Response save(@Context final HttpServletRequest  request,\n         final User user         = initData.getUser();\n         final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n         final PageMode pageMode = PageMode.get(request);\n-        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+        final Template currentTemplate = this.templateAPI.findWorkingTemplate(templateForm.getIdentifier(),user,pageMode.respectAnonPerms);\n \n-        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n-                || !InodeUtils.isSet(currentTemplate.getInode())) {\n-\n-            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        if (null == currentTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjU4MDkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1OTo1MlrOICZBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDo1OTo1MlrOICZBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM3ODExMQ==", "bodyText": "and here", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539378111", "createdAt": "2020-12-09T14:59:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -421,337 +435,324 @@ public final Response PUBLISH(@Context final HttpServletRequest  request,\n     @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n     public final Response unpublish(@Context final HttpServletRequest  request,\n                                   @Context final HttpServletResponse response,\n-                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+                                  final List<String> templatesToUnpublish) {\n \n         final InitDataObject initData = new WebResource.InitBuilder(webResource)\n                 .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n         final User user         = initData.getUser();\n-        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n         final PageMode pageMode = PageMode.get(request);\n-        final List<String> publishedInodes = new ArrayList<>();\n-        final List<String> failedInodes    = new ArrayList<>();\n+        Long unpublishedTemplatesCount = 0L;\n+        final List<FailedResultView> failedToUnpublish    = new ArrayList<>();\n \n         if (!UtilMethods.isSet(templatesToUnpublish)) {\n \n-            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+            throw new IllegalArgumentException(\"The body must send a collection of template identifiers such as: \" +\n                     \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n         }\n \n-        for (final String templateInode : templatesToUnpublish) {\n-\n-            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n-\n-            if (null != template && InodeUtils.isSet(template.getInode())) {\n-\n-                try {\n-\n-                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n-\n-                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n-                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n-                        publishedInodes.add(templateInode);\n-                    } else {\n-                        failedInodes.add(templateInode);\n-                    }\n-                } catch(Exception wax) {\n-\n-                    Logger.error(this, wax.getMessage(), wax);\n-                    failedInodes.add(templateInode);\n+        for (final String templateId : templatesToUnpublish) {\n+            try{\n+                final Template template = this.templateAPI.findWorkingTemplate(templateId,user,pageMode.respectAnonPerms);\n+                if (null != template && InodeUtils.isSet(template.getInode())){\n+                    this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms);\n+                    ActivityLogger.logInfo(this.getClass(), \"Unpublish Template Action\", \"User \" +\n+                            user.getPrimaryKey() + \" unpublished template: \" + template.getIdentifier());\n+                    unpublishedTemplatesCount++;\n+                } else {\n+                    Logger.error(this, \"Template with Id: \" + templateId + \" does not exists\");\n+                    failedToUnpublish.add(new FailedResultView(templateId,\"Template Does Not Exists\"));\n                 }\n-            } else {\n-\n-                failedInodes.add(templateInode);\n+            } catch(Exception e) {\n+                Logger.debug(this, e.getMessage(), e);\n+                failedToUnpublish.add(new FailedResultView(templateId,e.getMessage()));\n             }\n         }\n \n         return Response.ok(new ResponseEntityView(\n-                CollectionsUtils.map(\n-                        \"unpublishedInodes\", publishedInodes,\n-                        \"failedInodes\",   failedInodes\n-                ))).build();\n+                new BulkResultView(unpublishedTemplatesCount,0L,failedToUnpublish)))\n+                .build();\n     }\n \n     /**\n      * Copy a template\n      * @param request            {@link HttpServletRequest}\n      * @param response           {@link HttpServletResponse}\n-     * @param templateInode      {@link String} template inode to copy\n+     * @param templateId      {@link String} template identifier to copy\n      * @return Response\n      * @throws DotDataException\n      * @throws DotSecurityException\n      */\n     @PUT\n-    @Path(\"/{templateInode}/_copy\")\n+    @Path(\"/{templateId}/_copy\")\n     @JSONP\n     @NoCache\n     @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n     public final Response copy(@Context final HttpServletRequest  request,\n                                @Context final HttpServletResponse response,\n-                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+                               @PathParam(\"templateId\") final String templateId) throws DotDataException, DotSecurityException {\n \n         final InitDataObject initData = new WebResource.InitBuilder(webResource)\n                 .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n         final User user         = initData.getUser();\n-        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n         final PageMode pageMode = PageMode.get(request);\n \n-        Logger.debug(this, ()->\"Copying the Template: \" + templateInode);\n+        Logger.debug(this, ()->\"Copying the Template: \" + templateId);\n \n-        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId,user,pageMode.respectAnonPerms);\n \n         if (null == template || !InodeUtils.isSet(template.getInode())) {\n \n-            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+            throw new DoesNotExistException(\"Template with Id: \" + templateId + \" does not exists\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 587}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NjYyNzkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTowODozNFrOICZeYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTowODozNFrOICZeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM4NTQ0Mg==", "bodyText": "There are common validation used in several method that can be extracted to a method, like: check if the template is locked, does the user have permissions", "url": "https://github.com/dotCMS/core/pull/19545#discussion_r539385442", "createdAt": "2020-12-09T15:08:34Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPIImpl.java", "diffHunk": "@@ -164,167 +180,377 @@ private void save(final Template template) throws DotDataException {\n \t\ttemplateFactory.save(template);\n \t}\n \n-\tprivate void save(final Template template, final String existingId) throws DotDataException {\n-        templateFactory.save(template,existingId);\n-    }\n-\n \tprotected void save(final WebAsset webAsset) throws DotDataException {\n \t\tsave((Template) webAsset);\n \t}\n \n \t@WrapInTransaction\n-\tpublic boolean publishTemplate(final Template template, final User user, final boolean respectFrontendRoles) {\n+\tpublic void publishTemplate(final Template template, final User user, final boolean respectFrontendRoles)\n+\t\t\tthrows DotDataException, DotSecurityException, WebAssetException {\n \n \t\tLogger.debug(this, ()-> \"Publishing the template: \" + template.getIdentifier());\n-\t\treturn Try.of(()->PublishFactory.publishAsset(template, user, respectFrontendRoles)).getOrElseThrow(e -> new RuntimeException(e));\n+\n+\t\t//Check if the Template is locked, and if is locked by a diff user that is executing the action\n+\t\tif(template.isLocked() && !this.versionableAPI.get().getLockedBy(template).get().equals(user.getUserId())){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be published. \"\n+\t\t\t\t\t+ \"Because it is locked\");\n+\t\t\tthrow new DotStateException(\"Template can not be published because is locked\");\n+\t\t}\n+\n+\t\t//Check Publish Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_PUBLISH, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Publish the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Publish the Template\");\n+\t\t}\n+\n+\t\t// Check that the template is archived\n+\t\tif(isArchived(template)){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be publish. \"\n+\t\t\t\t\t+ \"Because it is archived\");\n+\t\t\tthrow new DotStateException(\"Template can not be published because is archived\");\n+\t\t}\n+\n+\t\tpublishTemplate(template,user);\n+\t}\n+\n+\t/**\n+\t * This method was extracted from {@link PublishFactory#publishAsset(Inode, User, boolean)},\n+\t * since in the future template wont inherit from WebAsset\n+\t * @param template\n+\t * @throws DotDataException\n+\t * @throws DotSecurityException\n+\t */\n+\tprivate void publishTemplate(final Template template,final User user)\n+\t\t\tthrows DotSecurityException, DotDataException, WebAssetException {\n+\t\tfinal Template templateWorkingVersion = findWorkingTemplate(template.getIdentifier(),APILocator.systemUser(),false);\n+\t\t//Sets Working as Live\n+\t\tAPILocator.getVersionableAPI().setLive(templateWorkingVersion);\n+\t\t//Gets all Containers In the Template\n+\t\tfinal List<Container> containersInTemplate = APILocator.getTemplateAPI().getContainersInTemplate(template, APILocator.getUserAPI().getSystemUser(), false);\n+\t\tfor(final Container container : containersInTemplate){\n+\t\t\tLogger.debug(PublishFactory.class, \"*****I'm a Template -- Publishing my Container Child= \" + container.getInode());\n+\t\t\tif(!container.isLive()){\n+\t\t\t\tPublishFactory.publishAsset(container,user, false);\n+\t\t\t}\n+\t\t}\n+\t\ttemplateWorkingVersion.setModDate(new java.util.Date());\n+\t\ttemplateWorkingVersion.setModUser(user.getUserId());\n+\t\ttemplateFactory.save(template);\n+\t\t//Clean-up the cache for this template\n+\t\tCacheLocator.getTemplateCache().remove(template.getInode());\n+\t\t//writes the template to a live directory under velocity folder\n+\t\tnew TemplateLoader().invalidate(template);\n \t}\n \n \t@WrapInTransaction\n-\tpublic boolean unpublishTemplate(final Template template, final User user, final boolean respectFrontendRoles) {\n+\tpublic void unpublishTemplate(final Template template, final User user, final boolean respectFrontendRoles)\n+\t\t\tthrows DotSecurityException, DotDataException {\n \n \t\tLogger.debug(this, ()-> \"Unpublishing the template: \" + template.getIdentifier());\n-\t\tfinal Folder parent = Try.of(()->APILocator.getFolderAPI()\n-\t\t\t\t.findParentFolder(template, user, respectFrontendRoles)).getOrElseThrow(e -> new RuntimeException(e));\n-\t\treturn Try.of(()->WebAssetFactory.unPublishAsset(template, user.getUserId(), parent))\n-\t\t\t\t.getOrElseThrow(e -> new RuntimeException(e));\n+\n+\t\t//Check if the Template is locked, and if is locked by a diff user that is executing the action\n+\t\tif(template.isLocked() && !this.versionableAPI.get().getLockedBy(template).get().equals(user.getUserId())){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be unpublished. \"\n+\t\t\t\t\t+ \"Because it is locked\");\n+\t\t\tthrow new DotStateException(\"Template can not be unpublished because is locked\");\n+\t\t}\n+\n+\t\t//Check Edit Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_EDIT, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Edit the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Edit the Template\");\n+\t\t}\n+\n+\t\t// Check that the template is archived\n+\t\tif(isArchived(template)){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be unpublish. \"\n+\t\t\t\t\t+ \"Because it is archived\");\n+\t\t\tthrow new DotStateException(\"Template can not be unpublished because is archived\");\n+\t\t}\n+\n+\t\tunpublishTemplate(template,user);\n+\t}\n+\n+\t/**\n+\t * This method was extracted from {@link WebAssetFactory#unPublishAsset(WebAsset, String, Inode)},\n+\t * since in the future template wont inherit from WebAsset\n+\t * @param template\n+\t * @throws DotDataException\n+\t * @throws DotSecurityException\n+\t */\n+\tprivate void unpublishTemplate(final Template template,final User user)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\t\tfinal Template templateWorkingVersion = findWorkingTemplate(template.getIdentifier(),APILocator.systemUser(),false);\n+\t\t//Remove live version from version_info\n+\t\tAPILocator.getVersionableAPI().removeLive(template.getIdentifier());\n+\t\ttemplateWorkingVersion.setModDate(new java.util.Date());\n+\t\ttemplateWorkingVersion.setModUser(user.getUserId());\n+\t\ttemplateFactory.save(template);\n+\t\t//remove template from the live directory\n+\t\tnew TemplateLoader().invalidate(template);\n \t}\n \n \t@WrapInTransaction\n-\tpublic void unlock (final Template template, final User user) {\n+\tpublic void unlock (final Template template, final User user)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\n+\t\tLogger.debug(this, ()->\"Unlocking the Template: \" + template.getIdentifier());\n+\n+\t\t//Check Edit Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_EDIT, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Edit the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Edit the Template\");\n+\t\t}\n+\n+\t\tthis.versionableAPI.get().setLocked(template, false, user);\n+\t}\n+\n+\t@WrapInTransaction\n+\tpublic void lock (final Template template, final User user)\n+\t\t\tthrows DotSecurityException, DotDataException {\n+\n+\t\tLogger.debug(this, ()->\"Locking the Template: \" + template.getIdentifier());\n+\n+\t\t//Check Edit Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_EDIT, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Edit the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Edit the Template\");\n+\t\t}\n \n-\t\tTry.run(()->this.versionableAPI.get().setLocked(template, false, user))\n-\t\t\t\t.getOrElseThrow(e -> new RuntimeException(e));\n+\t\tthis.versionableAPI.get().setLocked(template, true, user);\n \t}\n \n \t@WrapInTransaction\n-\tpublic boolean archive (final Template template, final User user, final boolean respectFrontendRoles) {\n+\tpublic void archive (final Template template, final User user, final boolean respectFrontendRoles)\n+\t\t\tthrows DotDataException, DotSecurityException {\n \n \t\tLogger.debug(this, ()-> \"Doing archive of the template: \" + template.getIdentifier());\n-\t\tif (Try.of(()->template.isLive()).getOrElseThrow(e -> new RuntimeException(e))) {\n \n-\t\t\tif (!this.unpublishTemplate(template, user, respectFrontendRoles)) {\n+\t\t//Check if the Template is locked, and if is locked by a diff user that is executing the action\n+\t\tif(template.isLocked() && !this.versionableAPI.get().getLockedBy(template).get().equals(user.getUserId())){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be archived. \"\n+\t\t\t\t\t+ \"Because it is locked\");\n+\t\t\tthrow new DotStateException(\"Template can not be archive because is locked\");\n+\t\t}\n \n-\t\t\t\tLogger.debug(this, \"the template: \" + template.getIdentifier() +\n-\t\t\t\t\t\t\" could not be archived, b/c it was live and couldn't unpublish\");\n-\t\t\t\treturn false;\n-\t\t\t}\n+\t\t//Check Edit Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_EDIT, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Edit the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Edit the Template\");\n \t\t}\n \n-\t\treturn Try.of(()-> WebAssetFactory.archiveAsset(template, user.getUserId())).getOrElseThrow(e -> new RuntimeException(e));\n+\t\t//Check that the template is Unpublished\n+\t\tif (template.isLive()) {\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be archive. \"\n+\t\t\t\t\t+ \"Because it is live.\");\n+\t\t\tthrow new DotStateException(\"Template must be unpublished before it can be archived\");\n+\t\t}\n+\n+\t\tarchive(template,user);\n+\t}\n+\n+\t/**\n+\t * This method was extracted from {@link WebAssetFactory#archiveAsset(WebAsset, String)} }, since in the future\n+\t * template wont inherit from WebAsset\n+\t * @param template\n+\t * @throws DotDataException\n+\t * @throws DotSecurityException\n+\t */\n+\tprivate void archive(final Template template, final User user) throws DotSecurityException, DotDataException {\n+\t\tfinal Template templateLiveVersion = findLiveTemplate(template.getIdentifier(),APILocator.systemUser(),false);\n+\t\tfinal Template templateWorkingVersion = findWorkingTemplate(template.getIdentifier(),APILocator.systemUser(),false);\n+\t\tif(templateLiveVersion!=null){\n+\t\t\tAPILocator.getVersionableAPI().removeLive(template.getIdentifier());\n+\t\t}\n+\t\ttemplateWorkingVersion.setModDate(new java.util.Date());\n+\t\ttemplateWorkingVersion.setModUser(user.getUserId());\n+\t\t// sets deleted to true\n+\t\tAPILocator.getVersionableAPI().setDeleted(templateWorkingVersion, true);\n+\t\ttemplateFactory.save(templateWorkingVersion);\n \t}\n \n-\t@WrapInTransaction\n-\tpublic void unarchive (final Template template) {\n \n+\t@WrapInTransaction\n+\tpublic void unarchive (final Template template, final User user)\n+\t\t\tthrows DotDataException, DotSecurityException {\n \t\tLogger.debug(this, ()-> \"Doing unarchive of the template: \" + template.getIdentifier());\n-\t\tif (Try.of(()->template.isArchived()).getOrElseThrow(e -> new RuntimeException(e))) {\n \n-\t\t\tTry.run(()->WebAssetFactory.unArchiveAsset(template))\n-\t\t\t\t\t.getOrElseThrow(e -> new RuntimeException(e));\n+\t\t//Check if the Template is locked, and if is locked by a diff user that is executing the action\n+\t\tif(template.isLocked() && !this.versionableAPI.get().getLockedBy(template).get().equals(user.getUserId())){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be unarchived. \"\n+\t\t\t\t\t+ \"Because it is locked\");\n+\t\t\tthrow new DotStateException(\"Template can not be unarchive because is locked\");\n+\t\t}\n+\n+\t\t//Check Edit Permissions over Template\n+\t\tif(!this.permissionAPI.doesUserHavePermission(template, PERMISSION_EDIT, user)){\n+\t\t\tLogger.error(this,\"The user: \" + user.getUserId() + \" does not have Permissions to Edit the Template\");\n+\t\t\tthrow new DotSecurityException(\"User does not have Permissions to Edit the Template\");\n+\t\t}\n+\t\t// Check that the template is archived\n+\t\tif(!isArchived(template)){\n+\t\t\tLogger.error(this, \"The Template: \" + template.getName() + \" can not be unarchive. \"\n+\t\t\t\t\t+ \"Because it is not archived\");\n+\t\t\tthrow new DotStateException(\"Template must be archived before it can be unarchived\");\n \t\t}\n+\t\ttemplate.setModDate(new java.util.Date());\n+\t\ttemplate.setModUser(user.getUserId());\n+\t\tAPILocator.getVersionableAPI().setDeleted(template, false);\n+\t\ttemplateFactory.save(template);\n+\t}\n+\n+\tpublic boolean isArchived(final Template template) throws DotDataException {\n+\t\treturn APILocator.getVersionableAPI().isDeleted(template);\n \t}\n \n \t@WrapInTransaction\n-\tpublic boolean deleteTemplate(final Template template, final User user, final boolean respectFrontendRoles) {\n+\tpublic void deleteTemplate(final Template template, final User user, final boolean respectFrontendRoles)\n+\t\t\tthrows DotDataException, DotSecurityException {\n \n \t\tLogger.debug(this, ()-> \"Doing delete of the template: \" + template.getIdentifier());\n \n-\t\tif (Try.of(()->template.isArchived()).getOrElseThrow(e -> new RuntimeException(e))) {\n+\t\t//Check if the Template is locked, and if is locked by a diff user that is executing the action\n+\t\tif(template.isLocked() && !this.versionableAPI.get().getLockedBy(template).get().equals(user.getUserId())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fceb33472c956148656e1f6420c03b5554a42bc"}, "originalPosition": 340}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1816, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}