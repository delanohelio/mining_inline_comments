{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDEyNjIy", "number": 18287, "title": "Issue 18230 char arrays", "bodyText": "These changes intend to completely replace the use of string by char arrays to handle secrets.\nAlso, Secrets are destroyed to avoid leaving hanging references in memory.\nchars are encoded using UTF-8", "createdAt": "2020-04-08T18:39:27Z", "url": "https://github.com/dotCMS/core/pull/18287", "merged": true, "mergeCommit": {"oid": "3d28d843b24a1c316726b3e1645d501353b230df"}, "closed": true, "closedAt": "2020-04-15T19:57:31Z", "author": {"login": "fabrizzio-dotCMS"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQz8_lgH2gAyNDAxMDEyNjIyOmYwNWNmYTliODFmNjY5M2U5NDdmYTE5Y2YxNDM3NDY0NWExNDc0MmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX8DmzgFqTM5NDAxMTQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f05cfa9b81f6693e947fa19cf14374645a14742b", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/f05cfa9b81f6693e947fa19cf14374645a14742b", "committedDate": "2020-03-24T14:40:39Z", "message": "#17965 apps bug fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec2ad127a85d8310a134398bfd547e8d8ae1dd2", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9ec2ad127a85d8310a134398bfd547e8d8ae1dd2", "committedDate": "2020-03-25T15:35:38Z", "message": "Merge branch 'master' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72570f1bf5957a5ceb9d12f76b66bd943316d098", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/72570f1bf5957a5ceb9d12f76b66bd943316d098", "committedDate": "2020-03-30T16:32:39Z", "message": "#17956 - save point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3da25a2ea84d23f721f0db55cb570f09bdfd53b", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d3da25a2ea84d23f721f0db55cb570f09bdfd53b", "committedDate": "2020-03-30T21:18:04Z", "message": "#17956 change in the json structure per request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cedb626e7bd921ae26ace0bbb3c67b2619f4c69", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6cedb626e7bd921ae26ace0bbb3c67b2619f4c69", "committedDate": "2020-03-30T23:20:07Z", "message": "#17956 fix in the apps search filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9079ee93d343a554ecaeabaa05ce9b4c08b91844", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9079ee93d343a554ecaeabaa05ce9b4c08b91844", "committedDate": "2020-03-31T00:34:51Z", "message": "#17956 fixing issue counting configs for SYSTEM_HOST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0bdd82efa5f2180dce5c57af2712de53791c11", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/7b0bdd82efa5f2180dce5c57af2712de53791c11", "committedDate": "2020-03-31T14:44:51Z", "message": "#17956 sort props alphabetically and dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dceeda7b91d93b46a2de311c221f50be07ff6cc0", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/dceeda7b91d93b46a2de311c221f50be07ff6cc0", "committedDate": "2020-03-31T16:42:27Z", "message": "#17956  skipping save if the param is a secret all filled with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb760bef22affc16c9bda8bd65430d69bbfeec0", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/dbb760bef22affc16c9bda8bd65430d69bbfeec0", "committedDate": "2020-03-31T16:43:43Z", "message": "#17956  skipping save if the param is a secret all filled with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0032d706ae9aca6366ee3e674fb6ff0e46ad78ab", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0032d706ae9aca6366ee3e674fb6ff0e46ad78ab", "committedDate": "2020-03-31T17:03:34Z", "message": "#17956 adding lang keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73dd4058804ebed94a3b43575279af046e22127", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/e73dd4058804ebed94a3b43575279af046e22127", "committedDate": "2020-04-01T04:17:12Z", "message": "#17956 fix compose key for SYSTEM_HOST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "009b63efb4e628a0cad1f8201c289e4ce9e5dc24", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/009b63efb4e628a0cad1f8201c289e4ce9e5dc24", "committedDate": "2020-04-01T19:17:04Z", "message": "#17956 updating postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f39ae38b95a7f4a6bd4356f448e0f4bd51c6bec", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/2f39ae38b95a7f4a6bd4356f448e0f4bd51c6bec", "committedDate": "2020-04-01T19:19:23Z", "message": "#17956 updating postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/bcf30e60c0bc23f20b9ef00a7383f543e89964f5", "committedDate": "2020-04-01T19:40:03Z", "message": "#17956 commenting out code required for future enhancement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f", "committedDate": "2020-04-02T02:51:31Z", "message": "#17956 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e39af05ab73bc7f426d44d9f184c244a358cc44", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9e39af05ab73bc7f426d44d9f184c244a358cc44", "committedDate": "2020-04-02T16:24:47Z", "message": "#17956  adding a deserializer to deal convert bool values into char array + more feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b09bd431ab6bcfa67d902bdd89c86bb6ef4adc9", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6b09bd431ab6bcfa67d902bdd89c86bb6ef4adc9", "committedDate": "2020-04-02T17:50:14Z", "message": "#17956  clean-up filter  routine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1212d5114e02271982768504268b536243a3cfb3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/1212d5114e02271982768504268b536243a3cfb3", "committedDate": "2020-04-03T21:35:37Z", "message": "#18263  fix app detail items order mirrors yml param order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500344501873ed74dfda087ffd23fe4a46113438", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/500344501873ed74dfda087ffd23fe4a46113438", "committedDate": "2020-04-04T04:38:11Z", "message": "#18263  respect natural order defined by the yml file + cache delete fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c987e9e1355ce5e1aef4268ea286206a5fafb2d", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0c987e9e1355ce5e1aef4268ea286206a5fafb2d", "committedDate": "2020-04-06T18:03:29Z", "message": "#18263  adding a custom serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1ef7e8c2191265c97aed0e8d0a2598ea03e3d6", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6d1ef7e8c2191265c97aed0e8d0a2598ea03e3d6", "committedDate": "2020-04-06T18:06:03Z", "message": "Merge branch 'master' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "850c9d91dfd7999ede024b5abbe5231bfaa4519a", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/850c9d91dfd7999ede024b5abbe5231bfaa4519a", "committedDate": "2020-04-06T18:08:31Z", "message": "Merge branch 'issue-18263-order-keys-in-yml' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6f3af0260ab0ae504866224a7b929fc97bb370", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6b6f3af0260ab0ae504866224a7b929fc97bb370", "committedDate": "2020-04-07T04:43:12Z", "message": "#18230  replacing String by char arrays to prevent password references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30f9d5ec225743989c507085b626cf8c2181323", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/c30f9d5ec225743989c507085b626cf8c2181323", "committedDate": "2020-04-07T16:02:41Z", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a443dc91998352a853c2bca55c0704f38c946b8f", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/a443dc91998352a853c2bca55c0704f38c946b8f", "committedDate": "2020-04-07T16:59:18Z", "message": "#save point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/4ed60cd76684fb92e082d60c65d32d3a70d0addc", "committedDate": "2020-04-07T20:59:51Z", "message": "fixes on broken postman tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60dc4834a402a63586b0d102066ed345ecbc6e74", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/60dc4834a402a63586b0d102066ed345ecbc6e74", "committedDate": "2020-04-08T18:36:29Z", "message": "#18230  char array to replace he use of string for security purposes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7f593ae546798b6f063fbaaf4489820e1352c0c", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d7f593ae546798b6f063fbaaf4489820e1352c0c", "committedDate": "2020-04-08T19:30:03Z", "message": "Merge branch 'issue-17956-apps-improvements' into issue-18230-char-arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d2e9144e765202ecb8c684fc067b9272f015f0", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b0d2e9144e765202ecb8c684fc067b9272f015f0", "committedDate": "2020-04-08T19:58:02Z", "message": "#merge with leatest from  master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "562158af99a1f022af85a4088957500bbbd4cbc4", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/562158af99a1f022af85a4088957500bbbd4cbc4", "committedDate": "2020-04-08T20:21:30Z", "message": "#18230 merge clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/161372d05e8ddf860586be6089cb63c1ea843076", "committedDate": "2020-04-08T20:44:31Z", "message": "#18230 feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzI0OTQ3", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390324947", "createdAt": "2020-04-08T20:55:21Z", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzM2NzMw", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390336730", "createdAt": "2020-04-08T21:14:02Z", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNDowMlrOGDBNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNDowMlrOGDBNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODc1OQ==", "bodyText": "Annotate with @VisibleForTesting and add the correct javadoc with @param and @throws", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405818759", "createdAt": "2020-04-08T21:14:02Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {\n         try {\n-            return jsonMapper.writeValueAsString(object);\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return jsonMapper.readValue(bytes, AppSecrets.class);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return\n+     */\n+    char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzM5MDM3", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390339037", "createdAt": "2020-04-08T21:17:43Z", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNzo0M1rOGDBVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNzo0M1rOGDBVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMDY5Mw==", "bodyText": "all the tests here can be implemented as tests cases in a data provider to make the code cleaner", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405820693", "createdAt": "2020-04-08T21:17:43Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +334,79 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @Test\n+    public void Test_BytesToChars_No_Middle_String_Conversion() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzQyMDI2", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390342026", "createdAt": "2020-04-08T21:22:46Z", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMjo0NlrOGDBerQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMjo0NlrOGDBerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzE0OQ==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405823149", "createdAt": "2020-04-08T21:22:46Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzQyMjA4", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390342208", "createdAt": "2020-04-08T21:23:06Z", "commit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMzowNlrOGDBfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMzowNlrOGDBfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzMxNA==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405823314", "createdAt": "2020-04-08T21:23:06Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691174ed8ea44750fb5702d3966b7cae8cad7d43", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/691174ed8ea44750fb5702d3966b7cae8cad7d43", "committedDate": "2020-04-09T02:41:13Z", "message": "#18230 PR  feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80", "committedDate": "2020-04-09T02:58:08Z", "message": "#18230  PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODI5MjUz", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390829253", "createdAt": "2020-04-09T14:11:32Z", "commit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMTozM1rOGDahEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMjowM1rOGDaijg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzM2MQ==", "bodyText": "I am not sure if the methods 'bytesToCharArrayUTF' and 'charsToBytesUTF' should be test directly", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406233361", "createdAt": "2020-04-09T14:11:33Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzc0Mg==", "bodyText": "doc?", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406233742", "createdAt": "2020-04-09T14:12:03Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODQyMzEw", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390842310", "createdAt": "2020-04-09T14:26:00Z", "commit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyNjowMFrOGDbJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyNjowMFrOGDbJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MzY3MQ==", "bodyText": "Maybe a test for the destroy, to check that is actually being destroyed?", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406243671", "createdAt": "2020-04-09T14:26:00Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppSecrets.java", "diffHunk": "@@ -30,6 +30,13 @@ public String getKey() {\n         return secrets;\n     }\n \n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56d1db48d59edc6cbaa4b02be0cb6e6ddecda309", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/56d1db48d59edc6cbaa4b02be0cb6e6ddecda309", "committedDate": "2020-04-09T15:25:21Z", "message": "#18230  testing secret destroy method per given feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTEwMzc3", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-390910377", "createdAt": "2020-04-09T15:41:43Z", "commit": {"oid": "56d1db48d59edc6cbaa4b02be0cb6e6ddecda309"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjIxMDY0", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-392221064", "createdAt": "2020-04-13T15:32:11Z", "commit": {"oid": "56d1db48d59edc6cbaa4b02be0cb6e6ddecda309"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32261397a76767e5b03036ce2f2af2ab143aebd8", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/32261397a76767e5b03036ce2f2af2ab143aebd8", "committedDate": "2020-04-14T16:34:56Z", "message": "#18230  Extracting core char to byte  conversion methods to a separate class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/454ccd109cfed0d931a28b42ab4caaacb107081e", "committedDate": "2020-04-15T15:57:53Z", "message": "#18230 documenting tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5NzA0", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919704", "createdAt": "2020-04-15T16:04:03Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowM1rOGGA3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowM1rOGGA3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc1Nw==", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958757", "createdAt": "2020-04-15T16:04:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5NzI5", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919729", "createdAt": "2020-04-15T16:04:04Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNFrOGGA3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNFrOGGA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc3Nw==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958777", "createdAt": "2020-04-15T16:04:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5NzQ5", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919749", "createdAt": "2020-04-15T16:04:06Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNlrOGGA3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNlrOGGA3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc5MQ==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958791", "createdAt": "2020-04-15T16:04:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    /**\n+     * Tests the two internal methods used to transform a text stored as a array of chars in UTF-8\n+     * convert those into a byte array and back.\n+     * Given Scenario: a set of char codes representing a UTF-8 range then the set is turned into bytes and back\n+     * Expected Result: The original set of chars is restored after the byte array\n+     * @param testCase\n+     * @throws IOException\n+     */\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase)\n+            throws IOException {\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = testCase.fromCode; i <= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class, () -> String\n+                .format(\" UTF Charset code from `%d` to `%d`  %s `%s` \", testCase.fromCode,\n+                        testCase.toCode, testCase.description, input));\n+        final char[] chars = bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte[] bytes = charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     *\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    static class UTFCharsRangeTestCase {\n+\n+        final int fromCode;\n+        final int toCode;\n+        final String description;\n+\n+        UTFCharsRangeTestCase(final int fromCode, final int toCode, final String description) {\n+            this.fromCode = fromCode;\n+            this.toCode = toCode;\n+            this.description = description;\n+        }\n+    }\n+\n+    /**\n+     * This tests the two methods used to serialize a secret converting it into a json stored as chars\n+     * then and putting it back together as an object.\n+     * Given Scenario: A Random Secret object is constructed with a random alphanumeric string then serialize to bytes and back.\n+     * Expected Result: The resulting object must match the original one passed in.\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {\n+        final AppSecrets secretsIn = new AppSecrets.Builder()\n+                .withKey(\"TheKey\")\n+                .withHiddenSecret(\"hidden1\", \"I'm hidden\")\n+                .withSecret(\"non-hidden1\", \"I'm not hidden\")\n+                .withSecret(\"non-hidden5\", RandomStringUtils.randomAlphanumeric(2337))\n+                .withSecret(\"bool1\", true)\n+                .build();\n+        final char[] toJsonAsChars = toJsonAsChars(secretsIn);\n+        final AppSecrets secretsOut = readJson(toJsonAsChars);\n+        assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+\n+        assertEquals(secretsIn.getSecrets().size(), secretsOut.getSecrets().size());\n+\n+        final Set<Entry<String, Secret>> secretsInEntries = secretsIn.getSecrets().entrySet();\n+        for (final Entry<String, Secret> entryIn : secretsInEntries) {\n+            assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+            final Secret out = secretsOut.getSecrets().get(entryIn.getKey());\n+            assertNotNull(out);\n+            assertTrue(out.equals(entryIn.getValue()));//This does a deepEquals.\n+        }\n+    }\n+\n+    /**\n+     * This basically test the encryption decryption round trip that a text could take.\n+     * Given Scenario:\n+     * Expected Result:\n+     * @throws EncryptorException\n+     */\n+    @Test\n+    public void Test_Encrypt_Decrypt_Text_No_Middle_String() throws EncryptorException {\n+        final Key key = Encryptor.generateKey();\n+        final String input = RandomStringUtils.randomAlphanumeric(1000);\n+        final char[] chars = AppsUtil.encrypt(key, input.toCharArray());\n+        final char[] decrypted = AppsUtil.decrypt(key, new String(chars));\n+        Assert.assertEquals(input, new String(decrypted));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5NzY5", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919769", "createdAt": "2020-04-15T16:04:07Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowN1rOGGA3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowN1rOGGA3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgwNw==", "bodyText": "Issue found: Avoid assignments in operands", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958807", "createdAt": "2020-04-15T16:04:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5Nzg1", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919785", "createdAt": "2020-04-15T16:04:08Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowOFrOGGA3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowOFrOGGA3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgxNw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958817", "createdAt": "2020-04-15T16:04:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5Nzk4", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919798", "createdAt": "2020-04-15T16:04:09Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMFrOGGA3bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMFrOGGA3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgzMQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958831", "createdAt": "2020-04-15T16:04:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {\n+        final CharSequence sequence = java.nio.CharBuffer.wrap(chars);\n+        return ByteStreams\n+                .toByteArray(new CharSequenceInputStream(sequence, StandardCharsets.UTF_8));\n+    }\n+\n+\n+    /**\n+     * Encrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle. It directly takes a char array.\n+     * And doesn't use a string internally.\n+     * @see Encryptor#encrypt(Key, String)\n+     * @param key security Key\n+     * @param chars\n+     * @return encrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] encrypt(final Key key, final char[] chars)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODIw", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919820", "createdAt": "2020-04-15T16:04:11Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMVrOGGA3gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMVrOGGA3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg0OA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958848", "createdAt": "2020-04-15T16:04:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODM2", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919836", "createdAt": "2020-04-15T16:04:12Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMlrOGGA3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMlrOGGA3lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg2OQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958869", "createdAt": "2020-04-15T16:04:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODUx", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919851", "createdAt": "2020-04-15T16:04:13Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxM1rOGGA3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxM1rOGGA3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg4Mw==", "bodyText": "Issue found: Use assertEquals(x, y) instead of assertTrue(x.equals(y))", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958883", "createdAt": "2020-04-15T16:04:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    /**\n+     * Tests the two internal methods used to transform a text stored as a array of chars in UTF-8\n+     * convert those into a byte array and back.\n+     * Given Scenario: a set of char codes representing a UTF-8 range then the set is turned into bytes and back\n+     * Expected Result: The original set of chars is restored after the byte array\n+     * @param testCase\n+     * @throws IOException\n+     */\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase)\n+            throws IOException {\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = testCase.fromCode; i <= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class, () -> String\n+                .format(\" UTF Charset code from `%d` to `%d`  %s `%s` \", testCase.fromCode,\n+                        testCase.toCode, testCase.description, input));\n+        final char[] chars = bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte[] bytes = charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     *\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    static class UTFCharsRangeTestCase {\n+\n+        final int fromCode;\n+        final int toCode;\n+        final String description;\n+\n+        UTFCharsRangeTestCase(final int fromCode, final int toCode, final String description) {\n+            this.fromCode = fromCode;\n+            this.toCode = toCode;\n+            this.description = description;\n+        }\n+    }\n+\n+    /**\n+     * This tests the two methods used to serialize a secret converting it into a json stored as chars\n+     * then and putting it back together as an object.\n+     * Given Scenario: A Random Secret object is constructed with a random alphanumeric string then serialize to bytes and back.\n+     * Expected Result: The resulting object must match the original one passed in.\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {\n+        final AppSecrets secretsIn = new AppSecrets.Builder()\n+                .withKey(\"TheKey\")\n+                .withHiddenSecret(\"hidden1\", \"I'm hidden\")\n+                .withSecret(\"non-hidden1\", \"I'm not hidden\")\n+                .withSecret(\"non-hidden5\", RandomStringUtils.randomAlphanumeric(2337))\n+                .withSecret(\"bool1\", true)\n+                .build();\n+        final char[] toJsonAsChars = toJsonAsChars(secretsIn);\n+        final AppSecrets secretsOut = readJson(toJsonAsChars);\n+        assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+\n+        assertEquals(secretsIn.getSecrets().size(), secretsOut.getSecrets().size());\n+\n+        final Set<Entry<String, Secret>> secretsInEntries = secretsIn.getSecrets().entrySet();\n+        for (final Entry<String, Secret> entryIn : secretsInEntries) {\n+            assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+            final Secret out = secretsOut.getSecrets().get(entryIn.getKey());\n+            assertNotNull(out);\n+            assertTrue(out.equals(entryIn.getValue()));//This does a deepEquals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODY3", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919867", "createdAt": "2020-04-15T16:04:14Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNFrOGGA3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNFrOGGA3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg5Ng==", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958896", "createdAt": "2020-04-15T16:04:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODgz", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919883", "createdAt": "2020-04-15T16:04:15Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNVrOGGA3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNVrOGGA3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODkxMQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958911", "createdAt": "2020-04-15T16:04:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/SecretsStoreKeyStoreImpl.java", "diffHunk": "@@ -286,26 +285,21 @@ private Key key() {\n     }\n \n     @VisibleForTesting\n-    protected String encrypt(final char[] val) {\n-        return encrypt(new String(val));\n-    }\n-\n-    @VisibleForTesting\n-    protected String encrypt(final String val) {\n-        return Sneaky.sneak(() -> Encryptor.encrypt(key(), val));\n+    protected char[] encrypt(final char[] val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTE5ODk2", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-393919896", "createdAt": "2020-04-15T16:04:16Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNlrOGGA3xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNlrOGGA3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODkxOQ==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958919", "createdAt": "2020-04-15T16:04:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {\n+        final CharSequence sequence = java.nio.CharBuffer.wrap(chars);\n+        return ByteStreams\n+                .toByteArray(new CharSequenceInputStream(sequence, StandardCharsets.UTF_8));\n+    }\n+\n+\n+    /**\n+     * Encrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle. It directly takes a char array.\n+     * And doesn't use a string internally.\n+     * @see Encryptor#encrypt(Key, String)\n+     * @param key security Key\n+     * @param chars\n+     * @return encrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] encrypt(final Key key, final char[] chars)\n+            throws EncryptorException {\n+\n+        try {\n+            final Cipher cipher = Cipher.getInstance(key.getAlgorithm());\n+            cipher.init(Cipher.ENCRYPT_MODE, key);\n+            final byte[] decryptedBytes = charsToBytesUTF(chars);\n+            final byte[] encryptedBytes = cipher.doFinal(decryptedBytes);\n+            final String encryptedString = Base64.encode(encryptedBytes);\n+            return encryptedString.toCharArray();\n+        } catch (Exception e) {\n+            throw new EncryptorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Decrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle to extract the resulting bytes.\n+     * @see Encryptor#decrypt(Key, String)\n+     * @param key security Key\n+     * @param encryptedString\n+     * @return decrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] decrypt(final Key key, final String encryptedString)\n+            throws EncryptorException {\n+\n+        try {\n+            final Cipher cipher = Cipher.getInstance(key.getAlgorithm());\n+            cipher.init(Cipher.DECRYPT_MODE, key);\n+            final byte[] encryptedBytes = Base64.decode(encryptedString);\n+            final byte[] decryptedBytes = cipher.doFinal(encryptedBytes);\n+            return bytesToCharArrayUTF(decryptedBytes);\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDAxMzA1", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-394001305", "createdAt": "2020-04-15T17:50:22Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDExNDY4", "url": "https://github.com/dotCMS/core/pull/18287#pullrequestreview-394011468", "createdAt": "2020-04-15T18:04:35Z", "commit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1264, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}