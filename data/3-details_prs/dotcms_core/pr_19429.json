{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjg2NDMz", "number": 19429, "title": "Issue 19428 webdav use db to list files in a folder", "bodyText": "", "createdAt": "2020-10-12T16:35:18Z", "url": "https://github.com/dotCMS/core/pull/19429", "merged": true, "mergeCommit": {"oid": "1245683cb026f4edfedc3720d79a24f4b372ddae"}, "closed": true, "closedAt": "2020-10-28T18:46:40Z", "author": {"login": "wezell"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR2WcQAH2gAyNTAxNjg2NDMzOmNiOGUwNzYyYmFjZjZjZjcyNGMyNTEwMDQwNTM4NzNlYzczMDJlZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXBKk2gFqTUxODkyNTc0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cb8e0762bacf6cf724c251004053873ec7302efa", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/cb8e0762bacf6cf724c251004053873ec7302efa", "committedDate": "2020-10-12T16:13:20Z", "message": "#19428 with tests.  gets folder contents from database."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5cc868bc8f968a954e86a06c42fd3ce932b11ed", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/d5cc868bc8f968a954e86a06c42fd3ce932b11ed", "committedDate": "2020-10-12T16:16:16Z", "message": "#19428 cleaning test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afc4a8334152d2d43096522837b349c2a9d4db0e", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/afc4a8334152d2d43096522837b349c2a9d4db0e", "committedDate": "2020-10-12T16:24:35Z", "message": "#19428 fixing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59125df43a36bc02f3049821b3949293e797e7a", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/b59125df43a36bc02f3049821b3949293e797e7a", "committedDate": "2020-10-12T16:33:38Z", "message": "#19428 adding another test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d813e4c550c37c4c965afe394b74db423fb0c6de", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/d813e4c550c37c4c965afe394b74db423fb0c6de", "committedDate": "2020-10-12T18:18:34Z", "message": "#19410 by way of #19428 set default folder structure based on parent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d5083e72fe0566cf573ad67c22f2c6bb7f585ca", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/2d5083e72fe0566cf573ad67c22f2c6bb7f585ca", "committedDate": "2020-10-12T21:08:56Z", "message": "#19429 fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d97de62ca9435c90f8fa85d0c3ef8526f14d82a2", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/d97de62ca9435c90f8fa85d0c3ef8526f14d82a2", "committedDate": "2020-10-13T01:20:52Z", "message": "#19428 fixing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDQxNDU1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517041455", "createdAt": "2020-10-26T17:59:47Z", "commit": {"oid": "d97de62ca9435c90f8fa85d0c3ef8526f14d82a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b4e0c8c0a6d10174f748e8d5eaccbc12261f5c", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/c1b4e0c8c0a6d10174f748e8d5eaccbc12261f5c", "committedDate": "2020-10-26T20:05:15Z", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-19428-webdav-use-db"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a41a3704c3052d9f9f91c36185149e7c4d1daf38", "committedDate": "2020-10-26T20:19:47Z", "message": "Fixing Codacy suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTczNDU5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517173459", "createdAt": "2020-10-26T21:03:09Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMzowOVrOHoiQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowMzowOVrOHoiQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjQ2Nw==", "bodyText": "good", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512266467", "createdAt": "2020-10-26T21:03:09Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -647,8 +648,11 @@ protected void delete(List<Contentlet> contentlets, boolean deleteIdentifier) th\n \t        for (Contentlet c : contentlets) {\n \t            if(InodeUtils.isSet(c.getInode())){\n \t                Identifier ident = APILocator.getIdentifierAPI().find(c.getIdentifier());\n-\t                String si = ident.getInode();\n-\t                if(!identsDeleted.contains(si) && si!=null && si!=\"\" ){\n+\t                if(ident==null || UtilMethods.isEmpty(ident.getId())) {\n+\t                    continue;\n+\t                }\n+\t                String si = ident.getId();\n+\t                if(!identsDeleted.contains(si)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTc0NjI4", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517174628", "createdAt": "2020-10-26T21:04:53Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDo1M1rOHoiUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDo1M1rOHoiUpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzQzMQ==", "bodyText": "what happen if oldValue is null?", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512267431", "createdAt": "2020-10-26T21:04:53Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/Contentlet.java", "diffHunk": "@@ -1609,16 +1611,19 @@ public ContentletHashMap() {\n \t\t\tsuper();\n \t\t}\n \n-\t\tpublic Object put(final String key, final Object value) {\n+\t\tpublic Object put(final String key, final Object newValue) {\n \n-\t\t\tContentlet.this.markAsDirty();\n+\t\t    final Object oldValue = this.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MTc1ODQ3", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517175847", "createdAt": "2020-10-26T21:06:44Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNjo0NVrOHoiYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNjo0NVrOHoiYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODM5NQ==", "bodyText": "Good", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512268395", "createdAt": "2020-10-26T21:06:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -362,5 +362,22 @@\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-  FileAsset find(String inode, User user, boolean respectFrontendRoles) throws DotDataException, DotSecurityException;\n+\tFileAsset find(String inode, User user, boolean respectFrontendRoles) throws DotDataException, DotSecurityException;\n+\n+\n+    \n+    /**\n+     * Takes a {@link FileAssetSearcher} searcher object and returns fileAssets based on it. You can build a new\n+     * searcher using a builder , e.g.\n+     * FileAssetSearcher searcher = FileAssetSearcher.builder()\n+     * .folder(parent)\n+     * .user(user)\n+     * .respectFrontendRoles(true)\n+     * .build()\n+     * \n+     * @param searcher\n+     * @return\n+     */\n+    List<FileAsset> findFileAssetsByDB(FileAssetSearcher searcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjAwNDgy", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517200482", "createdAt": "2020-10-26T21:46:54Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0Njo1NFrOHojoug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0Njo1NFrOHojoug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4ODk1NA==", "bodyText": "remove this annotation", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512288954", "createdAt": "2020-10-26T21:46:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -35,45 +32,59 @@ public FileAssetFactoryImpl() {\n         permissionAPI = APILocator.getPermissionAPI();\n     }\n \n-    @Override\n-    public List<Contentlet> findFileAssetsByFolderInDB(\n-            final Folder parentFolder,\n-            final  User user,\n-            final boolean live) throws DotDataException, DotSecurityException {\n-\n-        final boolean respectFrontendRoles = live;\n+    \n+    /**\n+     * takes a list of inodes and returns the list of contentlets - includes permissions check\n+     * \n+     * @param identifiers\n+     * @param user\n+     * @param respectFrontendRoles\n+     * @return\n+     */\n \n-        if(!permissionAPI.doesUserHavePermission(parentFolder, PermissionAPI.PERMISSION_READ, user, respectFrontendRoles)){\n-            throw new DotSecurityException(\"User:\" + user.getUserId() + \" does not have permissions on Folder \" + parentFolder);\n-        }\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjAxNTE0", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517201514", "createdAt": "2020-10-26T21:48:54Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0ODo1NFrOHojsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0ODo1NFrOHojsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4OTgwMw==", "bodyText": "StringPool already has SLASH, feel free to add DOUBLE_SLASH", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512289803", "createdAt": "2020-10-26T21:48:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/folders/business/FolderFactoryImpl.java", "diffHunk": "@@ -219,6 +220,8 @@ protected Folder findFolderByPath(String path, final Host site) throws DotDataEx\n \t\tif(site == null || path == null){\n \t\t\treturn null;\n \t\t}\n+\t\t// replace nasty double //\n+\t\tpath=path.replaceAll(\"//\", \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjAyMjYz", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-517202263", "createdAt": "2020-10-26T21:50:14Z", "commit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1MDoxNFrOHojulA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1MDoxNFrOHojulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MDQ1Mg==", "bodyText": "cool, but I would double check this assumption in terms of the content search or site browser if the state is the expected when using /live", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r512290452", "createdAt": "2020-10-26T21:50:14Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/webdav/DotWebdavHelper.java", "diffHunk": "@@ -905,8 +906,10 @@ private Contentlet runWorkflowIfPossible(final String resourceUri, final User us\n \t\t\t\t\t\t\t\t\t\t\t final boolean disableWorkflow, final Contentlet fileAsset)\n \t\t\tthrows DotDataException, DotSecurityException {\n \n-\t\tfileAsset.setIndexPolicy(IndexPolicy.WAIT_FOR);\n-\t\tfileAsset.getMap().put(Contentlet.VALIDATE_EMPTY_FILE, false);\n+\t    // We can use defer because we use the DB to list files / folders\n+\t\tfileAsset.setIndexPolicy(IndexPolicy.DEFER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41a3704c3052d9f9f91c36185149e7c4d1daf38"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a8210500a050802ddf3eb80601c8954cad47ac95", "committedDate": "2020-10-28T17:23:33Z", "message": "#19428 Applying code review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5NzIx", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919721", "createdAt": "2020-10-28T17:32:02Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowMlrOHp1vog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowMlrOHp1vog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDIxMA==", "bodyText": "Codacy found an issue: Field defaultFileType has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634210", "createdAt": "2020-10-28T17:32:02Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/FolderDataGen.java", "diffHunk": "@@ -21,7 +21,10 @@\n     private String fileMasks = \"\";\n     private Folder parent;\n     private Host site = host;\n-\n+    private String defaultFileType = CacheLocator.getContentTypeCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5NzM1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919735", "createdAt": "2020-10-28T17:32:03Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowM1rOHp1vsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowM1rOHp1vsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDIyNw==", "bodyText": "Codacy found an issue: Field offset has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634227", "createdAt": "2020-10-28T17:32:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5NzQ4", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919748", "createdAt": "2020-10-28T17:32:04Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNFrOHp1vwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNFrOHp1vwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDI0Mg==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634242", "createdAt": "2020-10-28T17:32:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5NzY4", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919768", "createdAt": "2020-10-28T17:32:05Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNVrOHp1v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNVrOHp1v0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDI1OQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'java.util.Objects.equals' due to existing import 'java.util.Objects'", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634259", "createdAt": "2020-10-28T17:32:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/Contentlet.java", "diffHunk": "@@ -1609,16 +1611,19 @@ public ContentletHashMap() {\n \t\t\tsuper();\n \t\t}\n \n-\t\tpublic Object put(final String key, final Object value) {\n+\t\tpublic Object put(final String key, final Object newValue) {\n \n-\t\t\tContentlet.this.markAsDirty();\n+\t\t    final Object oldValue = this.get(key);\n+\t\t    if(!java.util.Objects.equals(oldValue, newValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5Nzgz", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919783", "createdAt": "2020-10-28T17:32:06Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNlrOHp1v3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowNlrOHp1v3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDI3MA==", "bodyText": "Codacy found an issue: Field user has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634270", "createdAt": "2020-10-28T17:32:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;\n+        private int limit;\n+        private String searchTerm;\n+        private User user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODA1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919805", "createdAt": "2020-10-28T17:32:07Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowN1rOHp1v7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowN1rOHp1v7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDI4Ng==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634286", "createdAt": "2020-10-28T17:32:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODIw", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919820", "createdAt": "2020-10-28T17:32:08Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowOFrOHp1v-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowOFrOHp1v-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDI5OA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634298", "createdAt": "2020-10-28T17:32:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/folders/business/FolderAPIImpl.java", "diffHunk": "@@ -634,7 +650,9 @@ public Folder createFolders(String path, Host host, User user, boolean respectFr\n \t\t\t\tf.setSortOrder(0);\n \t\t\t\tf.setFilesMasks(\"\");\n \t\t\t\tf.setHostId(host.getIdentifier());\n-\t\t\t\tf.setDefaultFileType(CacheLocator.getContentTypeCache().getStructureByVelocityVarName(APILocator.getFileAssetAPI().DEFAULT_FILE_ASSET_STRUCTURE_VELOCITY_VAR_NAME).getInode());\n+\t\t\t\tf.setDefaultFileType((parent!=null && parent.getDefaultFileType() !=null) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODM1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919835", "createdAt": "2020-10-28T17:32:09Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowOVrOHp1wBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjowOVrOHp1wBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDMxMQ==", "bodyText": "Codacy found an issue: Field limit has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634311", "createdAt": "2020-10-28T17:32:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;\n+        private int limit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODQ5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919849", "createdAt": "2020-10-28T17:32:10Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMFrOHp1wDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMFrOHp1wDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDMxOQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634319", "createdAt": "2020-10-28T17:32:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/model/FolderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotmarketing.portlets.folders.model;\n+\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+\n+public class FolderTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+\n+    /**\n+     * this tests that the isSystemFolder return appropiatly\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_folder_isSystemFolder() throws Exception {\n+\n+        Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n+        assert (systemFolder.isSystemFolder());\n+\n+        // test a db persisted folder\n+        assertFalse(new FolderDataGen().nextPersisted().isSystemFolder());\n+\n+        // test an unpersisted folder\n+        Folder folder = new FolderDataGen().next();\n+        assertFalse(folder.isSystemFolder());\n+\n+\n+\n+    }\n+\n+\n+    /**\n+     * this tests the convience method of getting the host from the folder.getHost() method\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_folder_host_method() throws Exception {\n+\n+        // tests that the system folder lives on system host\n+        final Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n+\n+        assert (systemFolder.getHost().equals(APILocator.systemHost()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODYz", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919863", "createdAt": "2020-10-28T17:32:11Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMVrOHp1wHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMVrOHp1wHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDMzMg==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634332", "createdAt": "2020-10-28T17:32:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODc5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919879", "createdAt": "2020-10-28T17:32:12Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMlrOHp1wKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxMlrOHp1wKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDM0Nw==", "bodyText": "Codacy found an issue: Field live has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634347", "createdAt": "2020-10-28T17:32:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;\n+        private int limit;\n+        private String searchTerm;\n+        private User user;\n+        private boolean respectFrontendRoles;\n+        private boolean live;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5ODg5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919889", "createdAt": "2020-10-28T17:32:13Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxM1rOHp1wNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxM1rOHp1wNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDM1OA==", "bodyText": "Codacy found an issue: Field searchTerm has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634358", "createdAt": "2020-10-28T17:32:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;\n+        private int limit;\n+        private String searchTerm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTAx", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919901", "createdAt": "2020-10-28T17:32:14Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNFrOHp1wQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNFrOHp1wQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDM2OA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634368", "createdAt": "2020-10-28T17:32:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -1292,4 +1292,62 @@ public void test_findFolderByPath_UserWithPermissionsOverFolderAndHost_success()\n \t\tAssert.assertEquals(folder.getOwner(), folderByPath.getOwner());\n \t}\n \n-}\n\\ No newline at end of file\n+\t\n+\t\n+    /**\n+     * this method tests that when you create a folder with a default file type and then create folders\n+     * underneith it, that the children folders inherit the parent's default file type. This is\n+     * especially used when creating folders via webdav\n+     * \n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void test_folders_inherit_the_filetypes_of_their_parents() throws DotDataException, DotSecurityException {\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+        final long currentTime = System.currentTimeMillis();\n+\n+        final ContentType fileAssetType = contentTypeAPI.find(FileAssetAPI.DEFAULT_FILE_ASSET_STRUCTURE_VELOCITY_VAR_NAME);\n+        ContentType newFileAssetType = ContentTypeBuilder\n+                        .builder(fileAssetType)\n+                        .id(null)\n+                        .variable(\"fileAsset\"  + currentTime)\n+                        .name(\"fileAsset\"  + currentTime)\n+                        .build();\n+        \n+        newFileAssetType =  contentTypeAPI.save(newFileAssetType);\n+        \n+\n+        \n+        assertEquals(newFileAssetType.variable(),\"fileAsset\"  + currentTime);\n+        assert(newFileAssetType.id()!=null);\n+        \n+        final Folder parentFolder = new FolderDataGen().defaultFileType(newFileAssetType.id()).site(newHost).nextPersisted();\n+        assertEquals(parentFolder.getDefaultFileType(), newFileAssetType.id());\n+        \n+        \n+        final String folderPath = parentFolder.getPath() + \"folder1/folder2/folder3\";\n+\n+        folderAPI.createFolders(folderPath, newHost, user, false);\n+\n+        // /path/folder1\n+        Folder folder1 = folderAPI.findFolderByPath(parentFolder.getPath() + \"/folder1\", newHost, user, false);\n+        assert(folder1!=null);\n+        assertEquals(folder1.getDefaultFileType(), newFileAssetType.id());\n+        \n+        // /path/folder2\n+        Folder folder2 = folderAPI.findFolderByPath(parentFolder.getPath() + \"/folder1/folder2\", newHost, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTIw", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919920", "createdAt": "2020-10-28T17:32:15Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNVrOHp1wUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNVrOHp1wUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDM4NA==", "bodyText": "Codacy found an issue: assertTrue(true) or similar statements are unnecessary", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634384", "createdAt": "2020-10-28T17:32:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        final List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+        // we have all the working files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == fileAssetSize);\n+\n+        \n+        \n+        searcher = FileAssetSearcher.builder().live(true).user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+        \n+        \n+        // there are no live files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == 0);\n+\n+\n+        \n+        \n+        \n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that file assets saved to a folder are not readable unless the user has read permissions to the parent folder itself\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_folder_permissions()\n+            throws Exception {\n+\n+        final User user = APILocator.getUserAPI().getAnonymousUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        try {\n+            APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        }\n+        catch(DotRuntimeException e) {\n+            assertTrue(\"We should have thrown a DotRuntimeException\", e!=null);\n+            assertTrue(\"This should have a good message\", e.getMessage().contains(\"does not have permission to view the parent folder\"));\n+            return;\n+        }\n+\n+        assertTrue(\"this should have thrown a DotRuntimeException\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTM0", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919934", "createdAt": "2020-10-28T17:32:16Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNlrOHp1wYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxNlrOHp1wYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQwMw==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634403", "createdAt": "2020-10-28T17:32:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        final List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+        // we have all the working files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == fileAssetSize);\n+\n+        \n+        \n+        searcher = FileAssetSearcher.builder().live(true).user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+        \n+        \n+        // there are no live files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == 0);\n+\n+\n+        \n+        \n+        \n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that file assets saved to a folder are not readable unless the user has read permissions to the parent folder itself\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_folder_permissions()\n+            throws Exception {\n+\n+        final User user = APILocator.getUserAPI().getAnonymousUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        try {\n+            APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        }\n+        catch(DotRuntimeException e) {\n+            assertTrue(\"We should have thrown a DotRuntimeException\", e!=null);\n+            assertTrue(\"This should have a good message\", e.getMessage().contains(\"does not have permission to view the parent folder\"));\n+            return;\n+        }\n+\n+        assertTrue(\"this should have thrown a DotRuntimeException\", false);\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to the system folder, e.g. / will be returned from the database\n+     * as exepcteds\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_we_return_files_from_host_system_folder() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTUy", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919952", "createdAt": "2020-10-28T17:32:17Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxN1rOHp1wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxN1rOHp1wbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQxNQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.jetbrains.annotations.NotNull'", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634415", "createdAt": "2020-10-28T17:32:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -3,17 +3,14 @@\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.business.PermissionAPI;\n import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.exception.DotRuntimeException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n-import com.dotmarketing.portlets.folders.model.Folder;\n-import com.dotmarketing.util.Logger;\n import com.google.common.collect.ImmutableList;\n import com.liferay.portal.model.User;\n-import org.jetbrains.annotations.NotNull;\n-\n+import io.vavr.control.Try;\n import java.util.List;\n-import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTY3", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919967", "createdAt": "2020-10-28T17:32:18Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxOFrOHp1weg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxOFrOHp1weg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQyNg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634426", "createdAt": "2020-10-28T17:32:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/model/FolderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotmarketing.portlets.folders.model;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTE5OTg3", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518919987", "createdAt": "2020-10-28T17:32:19Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxOVrOHp1whA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoxOVrOHp1whA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQzNg==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634436", "createdAt": "2020-10-28T17:32:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        final List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+        // we have all the working files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == fileAssetSize);\n+\n+        \n+        \n+        searcher = FileAssetSearcher.builder().live(true).user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+        \n+        \n+        // there are no live files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == 0);\n+\n+\n+        \n+        \n+        \n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that file assets saved to a folder are not readable unless the user has read permissions to the parent folder itself\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_folder_permissions()\n+            throws Exception {\n+\n+        final User user = APILocator.getUserAPI().getAnonymousUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        try {\n+            APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        }\n+        catch(DotRuntimeException e) {\n+            assertTrue(\"We should have thrown a DotRuntimeException\", e!=null);\n+            assertTrue(\"This should have a good message\", e.getMessage().contains(\"does not have permission to view the parent folder\"));\n+            return;\n+        }\n+\n+        assertTrue(\"this should have thrown a DotRuntimeException\", false);\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to the system folder, e.g. / will be returned from the database\n+     * as exepcteds\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_we_return_files_from_host_system_folder() throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = APILocator.getFolderAPI().findSystemFolder();\n+\n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize = 3;\n+\n+        for (int i = 0; i < fileAssetSize; i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+\n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user)\n+                        .host(APILocator.getHostAPI().findDefaultHost(user, false)).respectFrontendRoles(false).build();\n+\n+        List<String> assetNames = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).stream()\n+                        .map(c -> c.getFileName()).collect(Collectors.toList());\n+\n+\n+        assert (assetNames.size() > -fileAssetSize);\n+        fileNames.forEach(f -> {\n+            assert (assetNames.contains(f));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDEx", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920011", "createdAt": "2020-10-28T17:32:20Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyMFrOHp1wkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyMFrOHp1wkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQ1MA==", "bodyText": "Codacy found an issue: Field respectFrontendRoles has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634450", "createdAt": "2020-10-28T17:32:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;\n+        private Folder folder;\n+        private long language;\n+        private int offset;\n+        private int limit;\n+        private String searchTerm;\n+        private User user;\n+        private boolean respectFrontendRoles;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDM1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920035", "createdAt": "2020-10-28T17:32:21Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyMVrOHp1woQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyMVrOHp1woQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQ2NQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634465", "createdAt": "2020-10-28T17:32:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        final List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+        // we have all the working files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == fileAssetSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDU0", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920054", "createdAt": "2020-10-28T17:32:23Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyM1rOHp1wrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyM1rOHp1wrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQ3Ng==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634476", "createdAt": "2020-10-28T17:32:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -1292,4 +1292,62 @@ public void test_findFolderByPath_UserWithPermissionsOverFolderAndHost_success()\n \t\tAssert.assertEquals(folder.getOwner(), folderByPath.getOwner());\n \t}\n \n-}\n\\ No newline at end of file\n+\t\n+\t\n+    /**\n+     * this method tests that when you create a folder with a default file type and then create folders\n+     * underneith it, that the children folders inherit the parent's default file type. This is\n+     * especially used when creating folders via webdav\n+     * \n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void test_folders_inherit_the_filetypes_of_their_parents() throws DotDataException, DotSecurityException {\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+        final long currentTime = System.currentTimeMillis();\n+\n+        final ContentType fileAssetType = contentTypeAPI.find(FileAssetAPI.DEFAULT_FILE_ASSET_STRUCTURE_VELOCITY_VAR_NAME);\n+        ContentType newFileAssetType = ContentTypeBuilder\n+                        .builder(fileAssetType)\n+                        .id(null)\n+                        .variable(\"fileAsset\"  + currentTime)\n+                        .name(\"fileAsset\"  + currentTime)\n+                        .build();\n+        \n+        newFileAssetType =  contentTypeAPI.save(newFileAssetType);\n+        \n+\n+        \n+        assertEquals(newFileAssetType.variable(),\"fileAsset\"  + currentTime);\n+        assert(newFileAssetType.id()!=null);\n+        \n+        final Folder parentFolder = new FolderDataGen().defaultFileType(newFileAssetType.id()).site(newHost).nextPersisted();\n+        assertEquals(parentFolder.getDefaultFileType(), newFileAssetType.id());\n+        \n+        \n+        final String folderPath = parentFolder.getPath() + \"folder1/folder2/folder3\";\n+\n+        folderAPI.createFolders(folderPath, newHost, user, false);\n+\n+        // /path/folder1\n+        Folder folder1 = folderAPI.findFolderByPath(parentFolder.getPath() + \"/folder1\", newHost, user, false);\n+        assert(folder1!=null);\n+        assertEquals(folder1.getDefaultFileType(), newFileAssetType.id());\n+        \n+        // /path/folder2\n+        Folder folder2 = folderAPI.findFolderByPath(parentFolder.getPath() + \"/folder1/folder2\", newHost, user, false);\n+        assert(folder2!=null);\n+        assertEquals(folder2.getDefaultFileType(), newFileAssetType.id());\n+        \n+        // /path/folder3\n+        Folder folder3 = folderAPI.findFolderByPath(parentFolder.getPath() + \"/folder1/folder2/folder3\", newHost, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDY0", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920064", "createdAt": "2020-10-28T17:32:23Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNFrOHp1wuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNFrOHp1wuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDQ4OA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634488", "createdAt": "2020-10-28T17:32:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/model/FolderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotmarketing.portlets.folders.model;\n+\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+\n+public class FolderTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDc5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920079", "createdAt": "2020-10-28T17:32:25Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNVrOHp1wxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNVrOHp1wxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUwMA==", "bodyText": "Codacy found an issue: Use assertNull(x) instead of assertTrue(x==null), or assertNotNull(x) vs assertFalse(x==null)", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634500", "createdAt": "2020-10-28T17:32:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPITest.java", "diffHunk": "@@ -170,5 +173,161 @@ public void Test_That_File_Asset_Gets_Stored_in_Cache_and_is_Not_Rebuilt_Everyti\n       assertTrue(\"FileAssets should be the same Object\", asset3 == asset4);\n       \n     }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_works()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        List<FileAsset> assets = APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        assert(assets.size()==fileAssetSize);\n+        assets.forEach(a-> {\n+            assert(fileNames.contains(a.getFileName()));\n+        });\n+\n+    }\n+    \n+    /**\n+     * This tests that file assets saved to a random folder, e.g. /dasfasd/ will be returned from the database\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_live_working_flag()\n+            throws Exception {\n+\n+        final User user = APILocator.systemUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        final List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+        // we have all the working files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == fileAssetSize);\n+\n+        \n+        \n+        searcher = FileAssetSearcher.builder().live(true).user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+        \n+        \n+        // there are no live files\n+        assert(APILocator.getFileAssetAPI().findFileAssetsByDB(searcher).size() == 0);\n+\n+\n+        \n+        \n+        \n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that file assets saved to a folder are not readable unless the user has read permissions to the parent folder itself\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_that_file_asset_from_db_respects_folder_permissions()\n+            throws Exception {\n+\n+        final User user = APILocator.getUserAPI().getAnonymousUser();\n+        final Folder parentFolder = new FolderDataGen().nextPersisted();\n+    \n+        List<String> fileNames = new ArrayList<>();\n+        final int fileAssetSize=3;\n+        \n+        for(int i=0;i<fileAssetSize;i++) {\n+            final java.io.File file = java.io.File.createTempFile(\"blah\" + i, \".txt\");\n+            fileNames.add(file.getName());\n+            FileUtil.write(file, \"helloworld\");\n+            final FileAssetDataGen fileAssetDataGen = new FileAssetDataGen(parentFolder, file);\n+            fileAssetDataGen.setPolicy(IndexPolicy.DEFER);\n+            fileAssetDataGen.nextPersisted();\n+        }\n+        \n+        FileAssetSearcher searcher = FileAssetSearcher.builder().user(user).folder(parentFolder).respectFrontendRoles(false).build();\n+                        \n+\n+        try {\n+            APILocator.getFileAssetAPI().findFileAssetsByDB(searcher);\n+        }\n+        catch(DotRuntimeException e) {\n+            assertTrue(\"We should have thrown a DotRuntimeException\", e!=null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMDk1", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920095", "createdAt": "2020-10-28T17:32:25Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNlrOHp1wzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyNlrOHp1wzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUwOQ==", "bodyText": "Codacy found an issue: Field host has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634509", "createdAt": "2020-10-28T17:32:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetSearcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import javax.annotation.Nonnull;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+\n+@JsonDeserialize(builder = FileAssetSearcher.Builder.class)\n+public class FileAssetSearcher {\n+\n+    final Host host;\n+    final Folder folder;\n+    final long language;\n+    final int offset, limit;\n+    final String searchTerm;\n+    final User user;\n+    final boolean respectFrontendRoles;\n+    final boolean live;\n+    private FileAssetSearcher(Builder builder) {\n+\n+        \n+        this.host = builder.host ;\n+        this.folder = builder.folder;\n+        this.language = builder.language;\n+        this.offset = builder.offset;\n+        this.limit = builder.limit;\n+        this.searchTerm = builder.searchTerm;\n+        this.user = builder.user;\n+        this.respectFrontendRoles = builder.respectFrontendRoles;\n+        this.live=builder.live;\n+    }\n+    /**\n+     * Creates builder to build {@link FileAssetSearcher}.\n+     * @return created builder\n+     */\n+    \n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+    /**\n+     * Creates a builder to build {@link FileAssetSearcher} and initialize it with the given object.\n+     * @param fileAssetSearcher to initialize the builder with\n+     * @return created builder\n+     */\n+    \n+    public static Builder from(FileAssetSearcher fileAssetSearcher) {\n+        return new Builder(fileAssetSearcher);\n+    }\n+    /**\n+     * Builder to build {@link FileAssetSearcher}.\n+     */\n+    \n+    public static final class Builder {\n+        private Host host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTIwMTA5", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518920109", "createdAt": "2020-10-28T17:32:27Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyN1rOHp1w2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzozMjoyN1rOHp1w2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYzNDUyMA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19429#discussion_r513634520", "createdAt": "2020-10-28T17:32:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/model/FolderTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotmarketing.portlets.folders.model;\n+\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+\n+public class FolderTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+\n+    /**\n+     * this tests that the isSystemFolder return appropiatly\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_folder_isSystemFolder() throws Exception {\n+\n+        Folder systemFolder = APILocator.getFolderAPI().findSystemFolder();\n+        assert (systemFolder.isSystemFolder());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTI1NzQ0", "url": "https://github.com/dotCMS/core/pull/19429#pullrequestreview-518925744", "createdAt": "2020-10-28T17:38:57Z", "commit": {"oid": "a8210500a050802ddf3eb80601c8954cad47ac95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1725, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}