{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODEyMzQz", "number": 19366, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjowMzoyNVrOEpOHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNDo0NVrOErwjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjU4MjY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/auth/providers/saml/v1/DotSamlResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjowMzoyNVrOHaw70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjowMzoyNVrOHaw70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNjc2OA==", "bodyText": "do we want to cache bust here?  I think so, e.g.\n\"/dotAdmin/?r=\" + random + \"#/public/logout\"", "url": "https://github.com/dotCMS/core/pull/19366#discussion_r497826768", "createdAt": "2020-09-30T22:03:25Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/saml/v1/DotSamlResource.java", "diffHunk": "@@ -301,7 +301,7 @@ public void logout(@PathParam(\"idpConfigId\") final String idpConfigId,\n \t\t\t\t\tLogger.debug(this, () -> \"Processing saml logout request for idpConfig id: \" + idpConfigId);\n \t\t\t\t\tfinal String logoutPath = this.samlConfigurationService.getConfigAsString(identityProviderConfiguration,\n \t\t\t\t\t\t\tSamlName.DOT_SAML_LOGOUT_SERVICE_ENDPOINT_URL,\n-\t\t\t\t\t\t\t()->buildBaseUrlFromRequest(httpServletRequest) + \"/\");\n+\t\t\t\t\t\t\t()-> \"/dotAdmin/#/public/logout\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9fa788d4341888186eabb171cadc4b42f8094b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjU4MzM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjowMzo0MFrOHaw8Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjowMzo0MFrOHaw8Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNjg3MQ==", "bodyText": "cache bust again\n\"/dotAdmin/?r=\" + random + \"#/public/logout\"", "url": "https://github.com/dotCMS/core/pull/19366#discussion_r497826871", "createdAt": "2020-09-30T22:03:40Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.dotcms.cms.login;\n+\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.SecurityLogger;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.util.StringPool;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Intercepts performs the logout at the end of the call in order to give chance\n+ * to thirdparties implementation to patch the logout process, if needed\n+ */\n+public class LogoutWebInterceptor implements WebInterceptor{\n+\n+    private static final String      API_CALL                = \"/dotAdmin/logout\";\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        Logger.info(this.getClass(), \"Starting Logout --> \" + request.getRequestURI());\n+\n+        try {\n+\n+            Logger.info(this, ()-> \"Doing the logout\");\n+            final User user = PortalUtil.getUser(request);\n+\n+            APILocator.getLoginServiceAPI().doActionLogout(request, response);\n+\n+            if(null != user){\n+                SecurityLogger.logInfo(this.getClass(), \"User \" +\n+                        user.getFullName() + \" (\" + user.getUserId() + \") has logged out from IP: \" + request.getRemoteAddr());\n+            }\n+\n+            response.sendRedirect(Config.getStringProperty(\"logout.url\", \"/dotAdmin/#/public/logout\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b9fa788d4341888186eabb171cadc4b42f8094b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE5NzQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNDo0NFrOHetOQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNDo0NFrOHetOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MDI1Ng==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.liferay.util.StringPool'", "url": "https://github.com/dotCMS/core/pull/19366#discussion_r501960256", "createdAt": "2020-10-08T19:24:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotcms.cms.login;\n+\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.SecurityLogger;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.util.StringPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b157f59f8f58a9f3ed5efd42fea8cbf6e8095038"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzE5NzQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNDo0NVrOHetOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOToyNDo0NVrOHetOSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MDI2Ng==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19366#discussion_r501960266", "createdAt": "2020-10-08T19:24:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/cms/login/LogoutWebInterceptor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotcms.cms.login;\n+\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.SecurityLogger;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.util.StringPool;\n+\n+import javax.servlet.RequestDispatcher;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Intercepts performs the logout at the end of the call in order to give chance\n+ * to thirdparties implementation to patch the logout process, if needed\n+ */\n+public class LogoutWebInterceptor implements WebInterceptor{\n+\n+    private static final String      API_CALL                = \"/dotAdmin/logout\";\n+    private static final String      API_SHOW                = \"/dotAdmin/show-logout\";\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\",API_SHOW + \"*\",\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        Logger.info(this.getClass(), \"Starting Logout --> \" + request.getRequestURI());\n+\n+        try {\n+\n+            if (request.getRequestURI().contains(API_CALL)) {\n+                Logger.info(this, () -> \"Doing the logout\");\n+                final User user = PortalUtil.getUser(request);\n+\n+                APILocator.getLoginServiceAPI().doActionLogout(request, response);\n+\n+                if (null != user) {\n+                    SecurityLogger.logInfo(this.getClass(), \"User \" +\n+                            user.getFullName() + \" (\" + user.getUserId() + \") has logged out from IP: \" + request.getRemoteAddr());\n+                }\n+            }\n+\n+            //response.sendRedirect(Config.getStringProperty(\"logout.url\", \"/dotAdmin/#/public/logout\"));\n+            final RequestDispatcher dispatcher = Config.CONTEXT\n+                    .getRequestDispatcher(\"/html/portal/show-logout.jsp\");\n+            dispatcher.forward(request, response);\n+            Logger.info(this, ()-> \"Logout DONE\");\n+        }  catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b157f59f8f58a9f3ed5efd42fea8cbf6e8095038"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1916, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}