{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODU2MTc1", "number": 18683, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0MVrOEGXbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0M1rOEGXbOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTEwNjkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0MVrOGlHdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0MVrOGlHdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MjcxMQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572711", "createdAt": "2020-06-17T14:06:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{\n+        \n+        // will kill it from the cache in some time.\n+        final DotSubmitter submitter = DotConcurrentFactory.getInstance().getSubmitter();\n+        final AtomicInteger aInt=new AtomicInteger(0);\n+        \n+        // add 50 to the atomicInteger, 3 seconds in the future\n+        int runs = 50;\n+        for(int i=0;i<runs;i++) {\n+            submitter.delay(()-> aInt.addAndGet(1), 3, TimeUnit.SECONDS);\n+        }\n+        \n+        // None of the jobs have been run\n+        assert(aInt.get()==0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTEwNzAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0MlrOGlHdfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0MlrOGlHdfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MjczMg==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572732", "createdAt": "2020-06-17T14:06:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTEwNzEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0M1rOGlHdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNjo0M1rOGlHdiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3Mjc0NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18683#discussion_r441572744", "createdAt": "2020-06-17T14:06:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -101,4 +103,44 @@ public void run() {\n         }\n \n     }\n+    \n+    \n+    \n+    \n+    /**\n+     * This tests that the delayed queue will run jobs in the future, efficiently\n+     * \n+     * @throws Exception\n+     */\n+    \n+    @Test\n+    public void test_delayed_queue() throws Exception{\n+        \n+        // will kill it from the cache in some time.\n+        final DotSubmitter submitter = DotConcurrentFactory.getInstance().getSubmitter();\n+        final AtomicInteger aInt=new AtomicInteger(0);\n+        \n+        // add 50 to the atomicInteger, 3 seconds in the future\n+        int runs = 50;\n+        for(int i=0;i<runs;i++) {\n+            submitter.delay(()-> aInt.addAndGet(1), 3, TimeUnit.SECONDS);\n+        }\n+        \n+        // None of the jobs have been run\n+        assert(aInt.get()==0);\n+        \n+        // rest.  I must rest\n+        Thread.sleep(6000);\n+        \n+        // all of the jobs have been run\n+        assert(aInt.get()==50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b754ab23aeae22f23566c0bd9da3d79e40c3aee"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2174, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}