{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA2MjUz", "number": 18009, "title": "Issue 18005 graphql file and image field types no fields available", "bodyText": "As a part of this ticket, dotCMS Base Types became empty GraphQL interfaces, meaning, they only work for grouping content of the same dotCMS Base Type but don't have common Interface fields anymore. Because of a missing change as a part of the mentioned ticket, the File and Image dotCMS Field Types were left without GraphQL fields, since they were still mapped to the now field-less Fileasset GraphQL Interface. The solution was to create a new GraphQL Custom Type called Fileasset, that has all the fields removed from the Fileasset GraphQL Interface and map File and Image fields to this new Custom Type.\nIntegration tests were added to verify that Image and File fields have the proper Custom Type and that the Custom Type has all the expected fields.", "createdAt": "2020-02-19T00:38:14Z", "url": "https://github.com/dotCMS/core/pull/18009", "merged": true, "mergeCommit": {"oid": "cc1216678d53e05706d7af5e0188934ea79b8fd4"}, "closed": true, "closedAt": "2020-02-20T15:28:33Z", "author": {"login": "dsilvam"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFrY7bgH2gAyMzc2OTA2MjUzOjNlNmQzM2RhMzM5MjQzZTNkZTU0OTQyM2EwZWVkYTg0NjkxODJlYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGM2CrgH2gAyMzc2OTA2MjUzOjc4MTYzZWI4OTNmYjE4Y2Y0YmNiZmJhNWFmYWQxNTFlNDY3MmEwNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3e6d33da339243e3de549423a0eeda8469182ec3", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/3e6d33da339243e3de549423a0eeda8469182ec3", "committedDate": "2020-02-19T00:28:51Z", "message": "#18005 restore image/file fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a1214bd8fffd1fcb53056d2085a7959e9c75fb", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/48a1214bd8fffd1fcb53056d2085a7959e9c75fb", "committedDate": "2020-02-19T00:31:35Z", "message": "#18005 proper data fetcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/d5e0d212fb9205eb78b703171d42d2492dfcfdc1", "committedDate": "2020-02-19T21:42:19Z", "message": "#18005 test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDYyNTUz", "url": "https://github.com/dotCMS/core/pull/18009#pullrequestreview-361462553", "createdAt": "2020-02-19T21:48:34Z", "commit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNFrOFr43HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNFrOFr43HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcwMQ==", "bodyText": "Issue found: Local variable 'fileAssetFields' could be declared final", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564701", "createdAt": "2020-02-19T21:48:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDYyNTY4", "url": "https://github.com/dotCMS/core/pull/18009#pullrequestreview-361462568", "createdAt": "2020-02-19T21:48:36Z", "commit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNlrOFr43KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNlrOFr43KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcxMw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564713", "createdAt": "2020-02-19T21:48:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,\n+                FILEASSET_DESCRIPTION_FIELD_VAR, FILEASSET_FILEASSET_FIELD_VAR,\n+                FILEASSET_METADATA_FIELD_VAR, FILEASSET_SHOW_ON_MENU_FIELD_VAR,\n+                FILEASSET_SORT_ORDER_FIELD_VAR);\n+        return objectType.getFieldDefinitions().stream().allMatch((fieldDefinition ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDY2NzE1", "url": "https://github.com/dotCMS/core/pull/18009#pullrequestreview-361466715", "createdAt": "2020-02-19T21:55:06Z", "commit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDcwMTgz", "url": "https://github.com/dotCMS/core/pull/18009#pullrequestreview-361470183", "createdAt": "2020-02-19T22:00:45Z", "commit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjowMDo0NVrOFr5OfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjowMDo0NVrOFr5OfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDY4NA==", "bodyText": "maybe we can move this logic into a private method, something like:\nMap<String, TypeFetcher> getFileAssetTypeFields(){\n...\n}", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381570684", "createdAt": "2020-02-19T22:00:45Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/CustomFieldType.java", "diffHunk": "@@ -103,6 +115,17 @@\n         userTypeFields.put(\"lastName\", GraphQLString);\n         userTypeFields.put(\"email\", GraphQLString);\n         customFieldTypes.put(\"USER\", TypeUtil.createObjectType(\"User\", userTypeFields, null));\n+\n+        final Map<String, TypeFetcher> fileAssetTypeFields = new HashMap<>();\n+        fileAssetTypeFields.put(FILEASSET_FILE_NAME_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_DESCRIPTION_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_FILEASSET_FIELD_VAR,\n+                new TypeFetcher(CustomFieldType.BINARY.getType(),new BinaryFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_METADATA_FIELD_VAR,\n+                new TypeFetcher(list(CustomFieldType.KEY_VALUE.getType()), new KeyValueFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SHOW_ON_MENU_FIELD_VAR, new TypeFetcher(list(GraphQLString), new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SORT_ORDER_FIELD_VAR, new TypeFetcher(GraphQLInt, new FieldDataFetcher()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78163eb893fb18cf4bcbfba5afad151e4672a056", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/78163eb893fb18cf4bcbfba5afad151e4672a056", "committedDate": "2020-02-20T15:27:31Z", "message": "#18005 codacy feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1419, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}