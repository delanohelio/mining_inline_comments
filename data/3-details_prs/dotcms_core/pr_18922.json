{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODcwMjA2", "number": 18922, "title": "#18901 save point", "bodyText": "This set of tests will be broken as they come to test the resolution of the serialization problem that recently got pushed to  5.3.4.1\nIt can be pushed to master. Then when the changes from release-5.3.4.1  are brought up to master these tests should pass.", "createdAt": "2020-07-20T21:49:44Z", "url": "https://github.com/dotCMS/core/pull/18922", "merged": true, "mergeCommit": {"oid": "51314bdbc5f1f0f91651840a21323a73e1e75934"}, "closed": true, "closedAt": "2020-07-24T15:37:37Z", "author": {"login": "fabrizzio-dotCMS"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc24zkOAH2gAyNDUzODcwMjA2OjAyMTlmOTliMGQ5ZDNjMDIyNWNlNTQ1YzQwZjExYjRjYTY1NmM1YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4F4TiAFqTQ1NDk4NzkyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0219f99b0d9d3c0225ce545c40f11b4ca656c5aa", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0219f99b0d9d3c0225ce545c40f11b4ca656c5aa", "committedDate": "2020-07-20T21:49:00Z", "message": "#18901 save point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971fcdfc90db9ee3f0992eb1f0254d88192b35d8", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/971fcdfc90db9ee3f0992eb1f0254d88192b35d8", "committedDate": "2020-07-21T03:21:15Z", "message": "#18901 serialization  testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ac0ac7f4ced1d05b565d9739085b205550592c", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/80ac0ac7f4ced1d05b565d9739085b205550592c", "committedDate": "2020-07-21T03:27:31Z", "message": "Merge branch 'master' into issue-18901-testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/e77ff825d34117eb3059d4e5c348908e1c81bcb8", "committedDate": "2020-07-21T04:15:34Z", "message": "#18901 doc test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDIw", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116020", "createdAt": "2020-07-21T04:22:12Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxMlrOG0nkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxMlrOG0nkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQwOQ==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827409", "createdAt": "2020-07-21T04:22:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/TestDataUtils.java", "diffHunk": "@@ -948,25 +942,44 @@ public static Contentlet getFileAssetContent(Boolean persist, long languageId) {\n \n             //Test file\n             final String testImagePath = \"com/dotmarketing/portlets/contentlet/business/test_files/test_image1.jpg\";\n-            final File originalTestImage = new File(\n-                    ConfigTestHelper.getUrlToTestResource(testImagePath).toURI());\n-            final File testImage = new File(Files.createTempDir(),\n-                    \"test_image1\" + System.currentTimeMillis() + \".jpg\");\n-            FileUtil.copyFile(originalTestImage, testImage);\n+            return createFileAsset(testImagePath, folder, languageId, persist);\n+        } catch (Exception e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n \n-            ContentletDataGen fileAssetDataGen = new FileAssetDataGen(folder, testImage)\n-                    .languageId(languageId);\n+    public static Contentlet getFileAssetSVGContent(Boolean persist, long languageId) {\n \n-            if (persist) {\n-                return ContentletDataGen.publish(fileAssetDataGen.nextPersisted());\n-            } else {\n-                return fileAssetDataGen.next();\n-            }\n+        try {\n+            final Folder folder = new FolderDataGen().nextPersisted();\n+\n+            //Test file\n+            final String testImagePath = \"com/dotmarketing/portlets/contentlet/business/test_files/test_image.svg\";\n+            return createFileAsset(testImagePath, folder, languageId, persist);\n         } catch (Exception e) {\n             throw new DotRuntimeException(e);\n         }\n     }\n \n+    private static Contentlet createFileAsset(final String testImagePath, final Folder folder, final long languageId, final boolean persist) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDI2", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116026", "createdAt": "2020-07-21T04:22:13Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxM1rOG0nkVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxM1rOG0nkVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQxNA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827414", "createdAt": "2020-07-21T04:22:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDMw", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116030", "createdAt": "2020-07-21T04:22:14Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNFrOG0nkWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNFrOG0nkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQxOQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827419", "createdAt": "2020-07-21T04:22:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDM2", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116036", "createdAt": "2020-07-21T04:22:15Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNVrOG0nkXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNVrOG0nkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyMw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827423", "createdAt": "2020-07-21T04:22:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDM4", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116038", "createdAt": "2020-07-21T04:22:16Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNlrOG0nkYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNlrOG0nkYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyNQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827425", "createdAt": "2020-07-21T04:22:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDQz", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116043", "createdAt": "2020-07-21T04:22:17Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxN1rOG0nkZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxN1rOG0nkZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyOQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827429", "createdAt": "2020-07-21T04:22:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDUz", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116053", "createdAt": "2020-07-21T04:22:17Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOFrOG0nkbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOFrOG0nkbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQzNw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827437", "createdAt": "2020-07-21T04:22:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDYx", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116061", "createdAt": "2020-07-21T04:22:18Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ0Nw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827447", "createdAt": "2020-07-21T04:22:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDY3", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116067", "createdAt": "2020-07-21T04:22:19Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ1NQ==", "bodyText": "Codacy found an issue: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827455", "createdAt": "2020-07-21T04:22:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());\n+    };\n+\n+\n+    /**\n+     * This will serialize a contentlet to disk\n+     * @param contentlet\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void serializeContentlet(final Contentlet contentlet, final File file)\n+            throws IOException {\n+\n+        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDc3", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116077", "createdAt": "2020-07-21T04:22:20Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMFrOG0nkiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMFrOG0nkiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ2NQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827465", "createdAt": "2020-07-21T04:22:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTE2MDgw", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452116080", "createdAt": "2020-07-21T04:22:21Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMVrOG0nkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMVrOG0nkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ2Nw==", "bodyText": "Codacy found an issue: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827467", "createdAt": "2020-07-21T04:22:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());\n+    };\n+\n+\n+    /**\n+     * This will serialize a contentlet to disk\n+     * @param contentlet\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void serializeContentlet(final Contentlet contentlet, final File file)\n+            throws IOException {\n+\n+        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {\n+            try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {\n+                objectOutputStream.writeObject(contentlet);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This will deserialize a contentlet from disk\n+     * @param file\n+     * @return\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    private Contentlet readSerializedContentlet(final File file) throws IOException, ClassNotFoundException{\n+        try(FileInputStream fileInputStream = new FileInputStream(file)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzkyOTU1", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-452792955", "createdAt": "2020-07-21T20:11:19Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMzY5Mzcz", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-453369373", "createdAt": "2020-07-22T14:24:21Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MjIzNDMy", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-454223432", "createdAt": "2020-07-23T14:59:06Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTg3OTI3", "url": "https://github.com/dotCMS/core/pull/18922#pullrequestreview-454987927", "createdAt": "2020-07-24T15:36:52Z", "commit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 817, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}