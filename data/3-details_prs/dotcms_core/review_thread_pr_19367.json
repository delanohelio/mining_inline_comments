{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1OTc3NDcy", "number": 19367, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NDozMVrOEpjlJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozMzoyN1rOEpkitA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDEwMDIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NDozMVrOHbS0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NDozMVrOHbS0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4MTk2MA==", "bodyText": "I would rename SubmitterConfigCreator to SubmitterConfig and SubmitterConfigCreatorBuilder to SubmitterConfigBuilder", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498381960", "createdAt": "2020-10-01T16:44:31Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "diffHunk": "@@ -269,6 +275,28 @@ public DotSubmitter getSubmitter () {\n         return this.getSubmitter(DOT_SYSTEM_THREAD_POOL);\n     } // getSubmitter.\n \n+    /**\n+     * Register a submitter creator and gets the submitter\n+     * @param name    {@link String}\n+     * @param creator {@link SubmitterConfigCreator}\n+     * @return DotSubmitter\n+     */\n+    public DotSubmitter getSubmitter (final String name, final SubmitterConfigCreator creator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c523f0ca434202476e0bdea7cdad2fad90f4b2e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDEwMzI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NTozMFrOHbS2lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjo0NTozMFrOHbS2lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM4MjQ4Ng==", "bodyText": "why not use the primitives and avoid a possible npe?", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498382486", "createdAt": "2020-10-01T16:45:30Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "diffHunk": "@@ -342,6 +379,156 @@ public IdentifierStripedLock getIdentifierStripedLock(){\n        return this.identifierStripedLock;\n     }\n \n+    /**\n+     * {@link SubmitterConfigCreator} builder\n+     */\n+    public static class SubmitterConfigCreatorBuilder {\n+\n+        private ThreadFactory            threadFactory;\n+        private RejectedExecutionHandler rejectedExecutionHandler;\n+        private Boolean allowCoreThreadTimeOut;\n+        private Integer poolSize;\n+        private Integer maxPoolSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c523f0ca434202476e0bdea7cdad2fad90f4b2e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDI0NzQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozMDoxMlrOHbUWOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDoyOTowMlrOHbZyjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjk2OA==", "bodyText": "nitpick but why not instantiator or even factory instead of creator", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498406968", "createdAt": "2020-10-01T17:30:12Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "diffHunk": "@@ -269,6 +275,28 @@ public DotSubmitter getSubmitter () {\n         return this.getSubmitter(DOT_SYSTEM_THREAD_POOL);\n     } // getSubmitter.\n \n+    /**\n+     * Register a submitter creator and gets the submitter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46cb6a9022c38f9ad79369fa17eb0218e74c63e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NjE0MQ==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498496141", "createdAt": "2020-10-01T20:29:02Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/concurrent/DotConcurrentFactory.java", "diffHunk": "@@ -269,6 +275,28 @@ public DotSubmitter getSubmitter () {\n         return this.getSubmitter(DOT_SYSTEM_THREAD_POOL);\n     } // getSubmitter.\n \n+    /**\n+     * Register a submitter creator and gets the submitter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjk2OA=="}, "originalCommit": {"oid": "b46cb6a9022c38f9ad79369fa17eb0218e74c63e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDI1NzgwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzozMzoyN1rOHbUc4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDoyOToxNFrOHbZy9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODY3NA==", "bodyText": "why ignored?", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498408674", "createdAt": "2020-10-01T17:33:27Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -10,6 +12,163 @@\n \n public class DotConcurrentFactoryTest {\n \n+    @Ignore\n+    @Test\n+    public void testDefaultOne_Submitter_Config() throws JSONException{\n+\n+        final String submitterName = \"testsubmitter\";\n+        final DotConcurrentFactory dotConcurrentFactory =\n+                DotConcurrentFactory.getInstance();\n+\n+        final DotSubmitter submitter =\n+                dotConcurrentFactory.getSubmitter(submitterName,\n+                        new SubmitterConfigBuilder().poolSize(2)\n+                        .maxPoolSize(4).queueCapacity(500).build()\n+                );\n+\n+        System.out.println(submitter);\n+\n+        IntStream.range(0, 40).forEach(\n+                n -> {\n+\n+                    if (n % 10 == 0) {\n+\n+                        System.out.println(submitter);\n+                    }\n+                    submitter.execute(new PrintTask(\"Thread\" + n));\n+                }\n+        );\n+\n+        //check active thread, if zero then shut down the thread pool\n+        for (;;) {\n+            int count = submitter.getActiveCount();\n+            System.out.println(\"Active Threads : \" + count);\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (count == 0) {\n+                //submitter.shutdown();\n+                break;\n+            }\n+        }\n+\n+        System.out.print(\"Staring a new one submitter\");\n+\n+        final DotSubmitter submitter2 =\n+                dotConcurrentFactory.getSubmitter(submitterName);\n+\n+        System.out.println(submitter2);\n+\n+        assertTrue(submitter == submitter2);\n+\n+        IntStream.range(0, 20).forEach(\n+                n -> {\n+                    submitter2.execute(new PrintTask(\"Thread\" + n));\n+                }\n+        );\n+\n+        //check active thread, if zero then shut down the thread pool\n+        for (;;) {\n+            int count = submitter2.getActiveCount();\n+            System.out.println(\"Active Threads : \" + count);\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (count == 0) {\n+                submitter2.shutdown();\n+                break;\n+            }\n+        }\n+\n+    }\n+\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46cb6a9022c38f9ad79369fa17eb0218e74c63e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NjI0NA==", "bodyText": "removed", "url": "https://github.com/dotCMS/core/pull/19367#discussion_r498496244", "createdAt": "2020-10-01T20:29:14Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/integration-test/java/com/dotcms/concurrent/DotConcurrentFactoryTest.java", "diffHunk": "@@ -10,6 +12,163 @@\n \n public class DotConcurrentFactoryTest {\n \n+    @Ignore\n+    @Test\n+    public void testDefaultOne_Submitter_Config() throws JSONException{\n+\n+        final String submitterName = \"testsubmitter\";\n+        final DotConcurrentFactory dotConcurrentFactory =\n+                DotConcurrentFactory.getInstance();\n+\n+        final DotSubmitter submitter =\n+                dotConcurrentFactory.getSubmitter(submitterName,\n+                        new SubmitterConfigBuilder().poolSize(2)\n+                        .maxPoolSize(4).queueCapacity(500).build()\n+                );\n+\n+        System.out.println(submitter);\n+\n+        IntStream.range(0, 40).forEach(\n+                n -> {\n+\n+                    if (n % 10 == 0) {\n+\n+                        System.out.println(submitter);\n+                    }\n+                    submitter.execute(new PrintTask(\"Thread\" + n));\n+                }\n+        );\n+\n+        //check active thread, if zero then shut down the thread pool\n+        for (;;) {\n+            int count = submitter.getActiveCount();\n+            System.out.println(\"Active Threads : \" + count);\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (count == 0) {\n+                //submitter.shutdown();\n+                break;\n+            }\n+        }\n+\n+        System.out.print(\"Staring a new one submitter\");\n+\n+        final DotSubmitter submitter2 =\n+                dotConcurrentFactory.getSubmitter(submitterName);\n+\n+        System.out.println(submitter2);\n+\n+        assertTrue(submitter == submitter2);\n+\n+        IntStream.range(0, 20).forEach(\n+                n -> {\n+                    submitter2.execute(new PrintTask(\"Thread\" + n));\n+                }\n+        );\n+\n+        //check active thread, if zero then shut down the thread pool\n+        for (;;) {\n+            int count = submitter2.getActiveCount();\n+            System.out.println(\"Active Threads : \" + count);\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            if (count == 0) {\n+                submitter2.shutdown();\n+                break;\n+            }\n+        }\n+\n+    }\n+\n+    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwODY3NA=="}, "originalCommit": {"oid": "b46cb6a9022c38f9ad79369fa17eb0218e74c63e"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1920, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}