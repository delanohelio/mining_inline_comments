{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDgzNjQz", "number": 17914, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNFrODarpUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNlrODarpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0NjU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNFrOFhw8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNFrOFhw8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTI0Ng==", "bodyText": "Issue found: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "url": "https://github.com/dotCMS/core/pull/17914#discussion_r370949246", "createdAt": "2020-01-25T18:48:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package com.dotmarketing.servlets;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockServletPathRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.BaseResponse;\n+import com.dotcms.mock.response.MockHttpCaptureResponse;\n+import com.dotcms.mock.response.MockHttpStatusResponse;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class BinaryExporterServletTest {\n+\n+    // Temporary binary png file\n+    private static class TmpBinaryFile implements Closeable {\n+\n+        private final Path pngFilePath;\n+\n+        public TmpBinaryFile(final boolean setContent) throws IOException {\n+            pngFilePath = Files.createTempFile(\"tmp\", \".png\");\n+            if (setContent) {\n+                Files.write(pngFilePath, ShortyServletAndTitleImageTest.pngPixel);\n+            }\n+        }\n+\n+        public Path getPath() {\n+            return pngFilePath;\n+        }\n+\n+        public File getFile() {\n+            return pngFilePath.toFile();\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            Files.deleteIfExists(pngFilePath);\n+        }\n+    }\n+\n+    private static final String BY_ID = \"by-identifier\";\n+    private static final String BY_INODE = \"by-inode\";\n+\n+    private static final String READ_PERMISSIONS = \"has-read-permissions\";\n+    private static final String NO_PERMISSIONS = \"no-permissions\";\n+\n+    private static Host host;\n+    private static Role role;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        // Set testing environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        host = new SiteDataGen().nextPersisted();\n+        role = new RoleDataGen().nextPersisted();\n+\n+    }\n+\n+    @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzA0NjU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNlrOFhw8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNlrOFhw8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTI0Nw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/17914#discussion_r370949247", "createdAt": "2020-01-25T18:48:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package com.dotmarketing.servlets;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockServletPathRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.BaseResponse;\n+import com.dotcms.mock.response.MockHttpCaptureResponse;\n+import com.dotcms.mock.response.MockHttpStatusResponse;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class BinaryExporterServletTest {\n+\n+    // Temporary binary png file\n+    private static class TmpBinaryFile implements Closeable {\n+\n+        private final Path pngFilePath;\n+\n+        public TmpBinaryFile(final boolean setContent) throws IOException {\n+            pngFilePath = Files.createTempFile(\"tmp\", \".png\");\n+            if (setContent) {\n+                Files.write(pngFilePath, ShortyServletAndTitleImageTest.pngPixel);\n+            }\n+        }\n+\n+        public Path getPath() {\n+            return pngFilePath;\n+        }\n+\n+        public File getFile() {\n+            return pngFilePath.toFile();\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            Files.deleteIfExists(pngFilePath);\n+        }\n+    }\n+\n+    private static final String BY_ID = \"by-identifier\";\n+    private static final String BY_INODE = \"by-inode\";\n+\n+    private static final String READ_PERMISSIONS = \"has-read-permissions\";\n+    private static final String NO_PERMISSIONS = \"no-permissions\";\n+\n+    private static Host host;\n+    private static Role role;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2521, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}