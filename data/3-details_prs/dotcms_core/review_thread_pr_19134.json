{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjc4ODE5", "number": 19134, "reviewThreads": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNTo1MlrOEcKWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOVrOEebndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY1MTc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNTo1MlrOHGhhcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNTo1MlrOHGhhcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMjczNg==", "bodyText": "I think this description should be \"Edit a template\", right?", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476602736", "createdAt": "2020-08-25T17:05:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY1MzYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNjozMFrOHGhiqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNjozMFrOHGhiqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMzA0OQ==", "bodyText": "Please update this description also", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476603049", "createdAt": "2020-08-25T17:06:30Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY1NDEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNjo0MFrOHGhjAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNjo0MFrOHGhjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMzEzNg==", "bodyText": "This one too", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476603136", "createdAt": "2020-08-25T17:06:40Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY1ODYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNzo0OFrOHGhlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowNzo0OFrOHGhlvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwMzgzNg==", "bodyText": "This test doesn't seem to be throwing a 404 error", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476603836", "createdAt": "2020-08-25T17:07:48Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 564}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY1OTg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODoxM1rOHGhmhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODoxM1rOHGhmhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDAzOQ==", "bodyText": "rename to _publish as we are doing for operations (not resources)", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604039", "createdAt": "2020-08-25T17:08:13Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2MTE2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODozNFrOHGhnWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODozNFrOHGhnWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDI1MA==", "bodyText": "Please update this description", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604250", "createdAt": "2020-08-25T17:08:34Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 841}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2MTU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODo0MVrOHGhnpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODo0MVrOHGhnpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDMyNA==", "bodyText": "Rename to _unpublish", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604324", "createdAt": "2020-08-25T17:08:41Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unpublish\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2MjMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODo1MVrOHGhoAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowODo1MVrOHGhoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDQxNw==", "bodyText": "And this one too", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604417", "createdAt": "2020-08-25T17:08:51Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unlock Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"89cda907-c446-4200-ac7f-6561bbcce46c\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unlock/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unlock\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 912}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2MzU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToxM1rOHGho0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToxM1rOHGho0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDYyNw==", "bodyText": "same here", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604627", "createdAt": "2020-08-25T17:09:13Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unlock Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"89cda907-c446-4200-ac7f-6561bbcce46c\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unlock/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unlock\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unarchive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1c037742-1d8f-4f2e-82f7-af230c467830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 983}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NDEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToyMVrOHGhpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToyMVrOHGhpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDcxMQ==", "bodyText": "Change to /{templateInode}/_copy", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604711", "createdAt": "2020-08-25T17:09:21Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unpublish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unpublish(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToUnpublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToUnpublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception wax) {\n+\n+                    Logger.error(this, wax.getMessage(), wax);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                        \"unpublishedInodes\", publishedInodes,\n+                        \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Copy a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to copy\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/copy/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response copy(@Context final HttpServletRequest  request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 483}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NDI2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToyNFrOHGhpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOToyNFrOHGhpPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDczNA==", "bodyText": "and here", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604734", "createdAt": "2020-08-25T17:09:24Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unlock Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"89cda907-c446-4200-ac7f-6561bbcce46c\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unlock/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unlock\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unarchive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1c037742-1d8f-4f2e-82f7-af230c467830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"b2d1990b-1bdd-4802-aafe-9f17ecb081e7\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 1054}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NTE5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTozOVrOHGhp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTozOVrOHGhp0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDg4Mg==", "bodyText": "and here", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604882", "createdAt": "2020-08-25T17:09:39Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unlock Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"89cda907-c446-4200-ac7f-6561bbcce46c\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unlock/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unlock\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unarchive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1c037742-1d8f-4f2e-82f7-af230c467830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"b2d1990b-1bdd-4802-aafe-9f17ecb081e7\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Delete Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"fbe16fea-c517-4cda-8765-e4357a1f1aaf\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"DELETE\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 1124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NTI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo0MVrOHGhp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo0MVrOHGhp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDg5Ng==", "bodyText": "Change to /{templateInode}/_unlock", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604896", "createdAt": "2020-08-25T17:09:41Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unpublish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unpublish(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToUnpublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToUnpublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception wax) {\n+\n+                    Logger.error(this, wax.getMessage(), wax);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                        \"unpublishedInodes\", publishedInodes,\n+                        \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Copy a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to copy\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/copy/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response copy(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Copying the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final Response responseRest = Response.ok(new ResponseEntityView(\n+                this.templateHelper.toTemplateView(this.templateAPI.copy(template, user), user))).build();\n+\n+        ActivityLogger.logInfo(this.getClass(), \"Copied Template\", \"User \" +\n+                user.getPrimaryKey() + \" copied template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+\n+        return responseRest;\n+    }\n+\n+    /**\n+     * Unlock a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unlock/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unlock(@Context final HttpServletRequest  request,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 526}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NTk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo1MlrOHGhqRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo1MlrOHGhqRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNDk5OA==", "bodyText": "same here", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476604998", "createdAt": "2020-08-25T17:09:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/Template Resource.postman_collection.json", "diffHunk": "@@ -0,0 +1,1207 @@\n+{\n+\t\"info\": {\n+\t\t\"_postman_id\": \"24f5a37b-e725-4baa-80e2-1bb7da8db898\",\n+\t\t\"name\": \"Template Resource\",\n+\t\t\"description\": \"Make the test for the template resource crud\",\n+\t\t\"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n+\t},\n+\t\"item\": [\n+\t\t{\n+\t\t\t\"name\": \"Create New Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1063286b-eb31-40bc-8cc4-8ca98474b329\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"POST\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Edit Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"aebfbfa9-d254-4f1d-ac80-4e103da2ca7b\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.body).to.eql('This is the body');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"friendlyName check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.friendlyName).to.eql('This is a postman test description');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Title check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.title).to.eql('PostMan Test Changed');\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"{\\n    \\\"inode\\\":\\\"{{temporalInode}}\\\",\\n    \\\"title\\\":\\\"PostMan Test\\\",\\n    \\\"friendlyName\\\":\\\"This is a postman test description\\\",\\n    \\\"body\\\":\\\"This is the body\\\"\\n\\n}\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Creates a new template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Templates\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"d15bbfed-5cc8-4ed3-b119-c97fa0b9bf53\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get all templates\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e0efb340-1f25-44c9-b50e-4d3eb345ed68\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1a25d2fc-d6a8-4a46-a793-e192641b2380\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"e71a10c9-3ebe-4c19-b4d7-012007aaa830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Publish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4bc0edee-b8f5-4cd8-b3fb-89f1d52ae5df\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/publish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"publish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Publish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 200\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"2447a613-db44-4a88-9866-54fbe6035675\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"var jsonData = pm.response.json();\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.test(\\\"body check\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.expect(jsonData.entity.live).to.eql(true);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"pm.collectionVariables.set(\\\"temporalInode\\\", jsonData.entity.inode);\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"UNPublish Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"4f94abfe-0ea3-4e88-9539-820f23940338\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unpublish\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unpublish\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"UNPublish the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Live 404 #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"c402fcd5-057d-4b19-a9ab-98a99b99fa93\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should not exists yet 404\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/live\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"live\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"The template was created but not published yet, so 404 will retrieve\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Template Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"60be1479-5644-4afa-b115-bd5cc2498c99\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/copy/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"copy\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"cfeca164-c651-4c02-a022-3e2c530c8b1e\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unlock Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"89cda907-c446-4200-ac7f-6561bbcce46c\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/unlock/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"unlock\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Unarchive Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"1c037742-1d8f-4f2e-82f7-af230c467830\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Archive Template #2\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"b2d1990b-1bdd-4802-aafe-9f17ecb081e7\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"PUT\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/archive/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"archive\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Delete Template\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"fbe16fea-c517-4cda-8765-e4357a1f1aaf\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be ok 200\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(200);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"DELETE\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"body\": {\n+\t\t\t\t\t\"mode\": \"raw\",\n+\t\t\t\t\t\"raw\": \"[\\\"{{temporalInode}}\\\"]\\n\",\n+\t\t\t\t\t\"options\": {\n+\t\t\t\t\t\t\"raw\": {\n+\t\t\t\t\t\t\t\"language\": \"json\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalInode}}\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalInode}}\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Copies the template\"\n+\t\t\t},\n+\t\t\t\"response\": []\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"Get Template Working Copy\",\n+\t\t\t\"event\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"listen\": \"test\",\n+\t\t\t\t\t\"script\": {\n+\t\t\t\t\t\t\"id\": \"21674d96-5aec-4583-b36d-5d58beaee4e8\",\n+\t\t\t\t\t\t\"exec\": [\n+\t\t\t\t\t\t\t\"pm.test(\\\"Status code should be 404 since was deleted\\\", function () {\",\n+\t\t\t\t\t\t\t\"    pm.response.to.have.status(404);\",\n+\t\t\t\t\t\t\t\"});\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\",\n+\t\t\t\t\t\t\t\"\"\n+\t\t\t\t\t\t],\n+\t\t\t\t\t\t\"type\": \"text/javascript\"\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t],\n+\t\t\t\"request\": {\n+\t\t\t\t\"auth\": {\n+\t\t\t\t\t\"type\": \"basic\",\n+\t\t\t\t\t\"basic\": [\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"password\",\n+\t\t\t\t\t\t\t\"value\": \"admin\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"username\",\n+\t\t\t\t\t\t\t\"value\": \"admin@dotcms.com\",\n+\t\t\t\t\t\t\t\"type\": \"string\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"saveHelperData\",\n+\t\t\t\t\t\t\t\"type\": \"any\"\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\"key\": \"showPassword\",\n+\t\t\t\t\t\t\t\"value\": false,\n+\t\t\t\t\t\t\t\"type\": \"boolean\"\n+\t\t\t\t\t\t}\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"method\": \"GET\",\n+\t\t\t\t\"header\": [],\n+\t\t\t\t\"url\": {\n+\t\t\t\t\t\"raw\": \"localhost:8080/api/v1/templates/{{temporalIdentifier}}/working\",\n+\t\t\t\t\t\"host\": [\n+\t\t\t\t\t\t\"localhost\"\n+\t\t\t\t\t],\n+\t\t\t\t\t\"port\": \"8080\",\n+\t\t\t\t\t\"path\": [\n+\t\t\t\t\t\t\"api\",\n+\t\t\t\t\t\t\"v1\",\n+\t\t\t\t\t\t\"templates\",\n+\t\t\t\t\t\t\"{{temporalIdentifier}}\",\n+\t\t\t\t\t\t\"working\"\n+\t\t\t\t\t]\n+\t\t\t\t},\n+\t\t\t\t\"description\": \"Get a since template\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 1189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2NjYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo1N1rOHGhqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowOTo1N1rOHGhqlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNTA3OQ==", "bodyText": "Change to /{templateInode}/_archive", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476605079", "createdAt": "2020-08-25T17:09:57Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unpublish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unpublish(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToUnpublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToUnpublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception wax) {\n+\n+                    Logger.error(this, wax.getMessage(), wax);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                        \"unpublishedInodes\", publishedInodes,\n+                        \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Copy a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to copy\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/copy/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response copy(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Copying the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final Response responseRest = Response.ok(new ResponseEntityView(\n+                this.templateHelper.toTemplateView(this.templateAPI.copy(template, user), user))).build();\n+\n+        ActivityLogger.logInfo(this.getClass(), \"Copied Template\", \"User \" +\n+                user.getPrimaryKey() + \" copied template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+\n+        return responseRest;\n+    }\n+\n+    /**\n+     * Unlock a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unlock/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unlock(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Unlocking the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_READ);\n+        this.templateAPI.unlock(template, user);\n+\n+        Logger.debug(this, \"Unlocked template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(true)).build();\n+    }\n+\n+    /**\n+     * Archive a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/archive/{templateInode}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 561}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY2OTExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxMDozMVrOHGhsNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxMDozMVrOHGhsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNTQ5Mg==", "bodyText": "Change to /{templateInode}/_unarchive", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476605492", "createdAt": "2020-08-25T17:10:31Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unpublish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unpublish(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToUnpublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToUnpublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception wax) {\n+\n+                    Logger.error(this, wax.getMessage(), wax);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                        \"unpublishedInodes\", publishedInodes,\n+                        \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Copy a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to copy\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/copy/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response copy(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Copying the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final Response responseRest = Response.ok(new ResponseEntityView(\n+                this.templateHelper.toTemplateView(this.templateAPI.copy(template, user), user))).build();\n+\n+        ActivityLogger.logInfo(this.getClass(), \"Copied Template\", \"User \" +\n+                user.getPrimaryKey() + \" copied template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+\n+        return responseRest;\n+    }\n+\n+    /**\n+     * Unlock a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unlock/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unlock(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Unlocking the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_READ);\n+        this.templateAPI.unlock(template, user);\n+\n+        Logger.debug(this, \"Unlocked template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(true)).build();\n+    }\n+\n+    /**\n+     * Archive a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/archive/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response archive(@Context final HttpServletRequest  request,\n+                                 @Context final HttpServletResponse response,\n+                                 @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Doing archive of the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final boolean result = this.templateAPI.archive(template, user, pageMode.respectAnonPerms);\n+\n+        Logger.debug(this, \"Archive done template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(result)).build();\n+    }\n+\n+    /**\n+     * Unarchive a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/unarchive/{templateInode}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 600}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY5MDMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNTo0N1rOHGh5hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNTo0N1rOHGh5hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwODkwMQ==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476608901", "createdAt": "2020-08-25T17:15:47Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * test {@link TemplatePaginator}\n+ */\n+public class TemplatePaginatorTest {\n+\n+    @Test\n+    public void testGetEmptyTemplateList() throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY5MTAwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNTo1NVrOHGh56Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNTo1NVrOHGh56Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTAwMQ==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476609001", "createdAt": "2020-08-25T17:15:55Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * test {@link TemplatePaginator}\n+ */\n+public class TemplatePaginatorTest {\n+\n+    @Test\n+    public void testGetEmptyTemplateList() throws DotDataException, DotSecurityException {\n+\n+        final int totalRecords = 10;\n+        final User user = mock(User.class);\n+        final String filter = \"filter\";\n+        final Map<String, Object> params = map(\"title\", filter);\n+        final String hostId = \"1\";\n+        final int offset = 5;\n+        final int limit = 10;\n+        final String orderby = \"title\";\n+\n+        final Host host = mock(Host.class);\n+        when(host.getIdentifier()).thenReturn(hostId);\n+\n+        final PaginatedArrayList<Template> templatesExpected = new PaginatedArrayList<>();\n+        templatesExpected.setTotalResults(totalRecords);\n+\n+        final TemplateAPI templateAPI = mock(TemplateAPI.class);\n+\n+        when(templateAPI.findTemplates(user, false, params, hostId,\n+                null, null, null, offset, limit, \"title asc\")).thenReturn(templatesExpected);\n+\n+        final TemplatePaginator templatePaginator = new TemplatePaginator(templateAPI);\n+\n+        final PaginatedArrayList<TemplateView> templateViews = templatePaginator.getItems(user, filter, limit, offset, orderby,\n+                OrderDirection.ASC, map(ContainerPaginator.HOST_PARAMETER_ID, hostId));\n+\n+        assertEquals(templateViews.getTotalResults(), totalRecords);\n+    }\n+\n+    @Test\n+    public void testGetTemplateList() throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY5MzgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNjozN1rOHGh7mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNjozN1rOHGh7mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTQzNQ==", "bodyText": "Add tests to the new methods", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476609435", "createdAt": "2020-08-25T17:16:37Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPIImpl.java", "diffHunk": "@@ -39,11 +48,13 @@\n \n public class TemplateAPIImpl extends BaseWebAssetAPI implements TemplateAPI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb3fe3aaebcd4a527fd20d64912b9827e7116ada"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDM5MDY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDozMTowMFrOHGonhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODowOTowOVrOHHXyjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxODk4Mg==", "bodyText": "Why not extend it from Template and add the missing properties.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r476718982", "createdAt": "2020-08-25T20:31:00Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb23b485edddcc411f4fb5b2e6e083849d99d241"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ5MTg1NA==", "bodyText": "Because the template is a webasset and retrieve so much", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r477491854", "createdAt": "2020-08-26T18:09:09Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcxODk4Mg=="}, "originalCommit": {"oid": "cb23b485edddcc411f4fb5b2e6e083849d99d241"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTg1MjE1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMToyMjoyMlrOHHeN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1OToxM1rOHKA6kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5NzE0Mg==", "bodyText": "Why this method?? doesUserHavePermission should be enough to check permissions, isn't??", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r477597142", "createdAt": "2020-08-26T21:22:22Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateHelper.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.dotcms.util.pagination.TemplateView;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+/**\n+ * Helper for templates\n+ * @author jsanca\n+ */\n+public class TemplateHelper {\n+\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI roleAPI;\n+\n+    public TemplateHelper() {\n+        this(APILocator.getPermissionAPI(),\n+                APILocator.getRoleAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateHelper(final PermissionAPI  permissionAPI,\n+                          final RoleAPI        roleAPI) {\n+\n+        this.permissionAPI  = permissionAPI;\n+        this.roleAPI        = roleAPI;\n+    }\n+\n+    public TemplateView toTemplateView(final Template template, final User user) {\n+\n+        return new TemplateView.Builder()\n+                .name(template.getName())\n+                .friendlyName(template.getFriendlyName())\n+                .title(template.getTitle())\n+                .identifier(template.getIdentifier())\n+                .image(template.getImage())\n+                .selectedimage(template.getSelectedimage())\n+                .inode(template.getInode())\n+\n+                .theme(template.getTheme())\n+                .themeName(template.getThemeName())\n+                .headCode(template.getHeadCode())\n+                .header(template.getHeader())\n+                .body(template.getBody())\n+                .drawed(template.isDrawed())\n+                .drawedBody(template.getDrawedBody())\n+                .footer(template.getFooter())\n+\n+                .isNew(template.isNew())\n+                .hasLiveVersion(Try.of(()->template.hasLiveVersion()).getOrElse(false))\n+                .deleted(Try.of(()->template.isDeleted()).getOrElse(false))\n+                .live(Try.of(()->template.isLive()).getOrElse(false))\n+                .locked(Try.of(()->template.isLocked()).getOrElse(false))\n+                .working(Try.of(()->template.isWorking()).getOrElse(false))\n+\n+                .canRead(Try.of(()-> APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_READ, user)).getOrElse(false))\n+                .canWrite(Try.of(()->APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_EDIT, user)).getOrElse(false))\n+                .canPublish(Try.of(()->APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_PUBLISH, user)).getOrElse(false))\n+\n+                .categoryId(template.getCategoryId())\n+                .countAddContainer(template.getCountAddContainer())\n+                .countContainers(template.getCountContainers())\n+                .modDate(template.getModDate())\n+                .modUser(template.getModUser())\n+                .owner(template.getOwner())\n+                .showOnMenu(template.isShowOnMenu())\n+                .sortOrder(template.getSortOrder())\n+                .build();\n+    }\n+\n+    public void checkPermission(final User user, final Template currentTemplate, final int permissionType) throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb06953a18daa946c8ce2debb1cfd9d06e9a3af"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MjgwMw==", "bodyText": "This method has a bit more logic", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480262803", "createdAt": "2020-08-31T16:59:13Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateHelper.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.dotcms.util.pagination.TemplateView;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+\n+/**\n+ * Helper for templates\n+ * @author jsanca\n+ */\n+public class TemplateHelper {\n+\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI roleAPI;\n+\n+    public TemplateHelper() {\n+        this(APILocator.getPermissionAPI(),\n+                APILocator.getRoleAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateHelper(final PermissionAPI  permissionAPI,\n+                          final RoleAPI        roleAPI) {\n+\n+        this.permissionAPI  = permissionAPI;\n+        this.roleAPI        = roleAPI;\n+    }\n+\n+    public TemplateView toTemplateView(final Template template, final User user) {\n+\n+        return new TemplateView.Builder()\n+                .name(template.getName())\n+                .friendlyName(template.getFriendlyName())\n+                .title(template.getTitle())\n+                .identifier(template.getIdentifier())\n+                .image(template.getImage())\n+                .selectedimage(template.getSelectedimage())\n+                .inode(template.getInode())\n+\n+                .theme(template.getTheme())\n+                .themeName(template.getThemeName())\n+                .headCode(template.getHeadCode())\n+                .header(template.getHeader())\n+                .body(template.getBody())\n+                .drawed(template.isDrawed())\n+                .drawedBody(template.getDrawedBody())\n+                .footer(template.getFooter())\n+\n+                .isNew(template.isNew())\n+                .hasLiveVersion(Try.of(()->template.hasLiveVersion()).getOrElse(false))\n+                .deleted(Try.of(()->template.isDeleted()).getOrElse(false))\n+                .live(Try.of(()->template.isLive()).getOrElse(false))\n+                .locked(Try.of(()->template.isLocked()).getOrElse(false))\n+                .working(Try.of(()->template.isWorking()).getOrElse(false))\n+\n+                .canRead(Try.of(()-> APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_READ, user)).getOrElse(false))\n+                .canWrite(Try.of(()->APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_EDIT, user)).getOrElse(false))\n+                .canPublish(Try.of(()->APILocator.getPermissionAPI().doesUserHavePermission(template, PermissionAPI.PERMISSION_PUBLISH, user)).getOrElse(false))\n+\n+                .categoryId(template.getCategoryId())\n+                .countAddContainer(template.getCountAddContainer())\n+                .countContainers(template.getCountContainers())\n+                .modDate(template.getModDate())\n+                .modUser(template.getModUser())\n+                .owner(template.getOwner())\n+                .showOnMenu(template.isShowOnMenu())\n+                .sortOrder(template.getSortOrder())\n+                .build();\n+    }\n+\n+    public void checkPermission(final User user, final Template currentTemplate, final int permissionType) throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5NzE0Mg=="}, "originalCommit": {"oid": "dbb06953a18daa946c8ce2debb1cfd9d06e9a3af"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NzMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo1MFrOHJO61A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo1MFrOHJO61A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzY2OA==", "bodyText": "Use better the TemplateDataGen", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r479443668", "createdAt": "2020-08-28T17:32:50Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * test {@link TemplatePaginator}\n+ */\n+public class TemplatePaginatorTest {\n+\n+    /**\n+     * Method to test: getItems\n+     * Given Scenario: Just recovery an empty list of elements\n+     * ExpectedResult: Perform ok, just with zero results\n+     *\n+     */\n+    @Test\n+    public void testGetEmptyTemplateList() throws DotDataException, DotSecurityException {\n+\n+        final int totalRecords = 10;\n+        final User user = mock(User.class);\n+        final String filter = \"filter\";\n+        final Map<String, Object> params = map(\"title\", filter);\n+        final String hostId = \"1\";\n+        final int offset = 5;\n+        final int limit = 10;\n+        final String orderby = \"title\";\n+\n+        final Host host = mock(Host.class);\n+        when(host.getIdentifier()).thenReturn(hostId);\n+\n+        final PaginatedArrayList<Template> templatesExpected = new PaginatedArrayList<>();\n+        templatesExpected.setTotalResults(totalRecords);\n+\n+        final TemplateAPI templateAPI     = mock(TemplateAPI.class);\n+        final PermissionAPI permissionAPI = mock(PermissionAPI.class);\n+        final RoleAPI       roleAPI       = mock(RoleAPI.class);\n+\n+        when(templateAPI.findTemplates(user, false, params, hostId,\n+                null, null, null, offset, limit, \"title asc\")).thenReturn(templatesExpected);\n+\n+        final TemplatePaginator templatePaginator = new TemplatePaginator(templateAPI, new TemplateHelper(permissionAPI, roleAPI));\n+\n+        final PaginatedArrayList<TemplateView> templateViews = templatePaginator.getItems(user, filter, limit, offset, orderby,\n+                OrderDirection.ASC, map(ContainerPaginator.HOST_PARAMETER_ID, hostId));\n+\n+        assertEquals(templateViews.getTotalResults(), totalRecords);\n+    }\n+\n+    /**\n+     * Method to test: getItems\n+     * Given Scenario: Just recovery an empty list of elements\n+     * ExpectedResult: Perform ok, just with zero results\n+     *\n+     */\n+    @Test\n+    public void testGetTemplateList() throws DotDataException, DotSecurityException {\n+\n+        final int totalRecords = 10;\n+        final User user = mock(User.class);\n+        final String filter = \"filter\";\n+        final Map<String, Object> params = map(\"title\", filter);\n+        final String hostId = \"1\";\n+        final int offset = 5;\n+        final int limit = 10;\n+        final String orderby = \"title\";\n+\n+        final Host host = mock(Host.class);\n+        when(host.getIdentifier()).thenReturn(hostId);\n+\n+        final PaginatedArrayList<Template> templatesExpected = new PaginatedArrayList<>();\n+        templatesExpected.add(newTemplate(1));\n+        templatesExpected.add(newTemplate(2));\n+        templatesExpected.add(newTemplate(3));\n+        templatesExpected.setTotalResults(totalRecords);\n+\n+        final TemplateAPI templateAPI     = mock(TemplateAPI.class);\n+        final PermissionAPI permissionAPI = mock(PermissionAPI.class);\n+        final RoleAPI       roleAPI       = mock(RoleAPI.class);\n+\n+        when(templateAPI.findTemplates(user, false, params, hostId,\n+                null, null, null, offset, limit, \"title asc\")).thenReturn(templatesExpected);\n+\n+        final TemplatePaginator templatePaginator = new TemplatePaginator(templateAPI, new TemplateHelper(permissionAPI, roleAPI));\n+\n+        final PaginatedArrayList<TemplateView> templateViews = templatePaginator.getItems(user, filter, limit, offset, orderby,\n+                OrderDirection.ASC, map(ContainerPaginator.HOST_PARAMETER_ID, hostId));\n+\n+        assertEquals(templateViews.getTotalResults(), totalRecords);\n+        int i = 0;\n+        for (final TemplateView templateView : templateViews) {\n+\n+            final Template template = templatesExpected.get(i++);\n+            assertEquals(templateView.getIdentifier(), template.getIdentifier());\n+            assertEquals(templateView.getInode(),      template.getInode());\n+            assertEquals(templateView.getBody(),       template.getBody());\n+            assertEquals(templateView.getTitle(),      template.getTitle());\n+        }\n+    }\n+\n+    private Template newTemplate (final int sortOrder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb06953a18daa946c8ce2debb1cfd9d06e9a3af"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE5Mzg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozODo0NlrOHJPFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjo1OTozNFrOHKA7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NjM1Mw==", "bodyText": "Remember to add the new tests to the MainSuite, if not added it will not run.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r479446353", "createdAt": "2020-08-28T17:38:46Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * test {@link TemplatePaginator}\n+ */\n+public class TemplatePaginatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbb06953a18daa946c8ce2debb1cfd9d06e9a3af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2MzAwNw==", "bodyText": "This is not an integration, just unit test", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480263007", "createdAt": "2020-08-31T16:59:34Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/test/java/com/dotcms/util/pagination/TemplatePaginatorTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * test {@link TemplatePaginator}\n+ */\n+public class TemplatePaginatorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0NjM1Mw=="}, "originalCommit": {"oid": "dbb06953a18daa946c8ce2debb1cfd9d06e9a3af"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1NFrOHKFFqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1NFrOHKFFqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTE3Ng==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331176", "createdAt": "2020-08-31T19:07:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/_publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateForm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1NlrOHKFFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1NlrOHKFFtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTE5MQ==", "bodyText": "Codacy found an issue: Field drawed has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331191", "createdAt": "2020-08-31T19:07:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateForm.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Template Input Form\n+ * @author jsanca\n+ */\n+@JsonDeserialize(builder = TemplateForm.Builder.class)\n+public class TemplateForm {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean headerCheck;\n+    private final boolean footerCheck;\n+\n+    private TemplateForm(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.headerCheck = builder.headerCheck;\n+        this.footerCheck = builder.footerCheck;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isHeaderCheck() {\n+        return headerCheck;\n+    }\n+\n+    public boolean isFooterCheck() {\n+        return footerCheck;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty\n+        private  String identifier;\n+        @JsonProperty\n+        private  String inode;\n+        @JsonProperty\n+        private  String body;\n+        @JsonProperty\n+        private  String selectedimage;\n+        @JsonProperty\n+        private  String image;\n+        @JsonProperty\n+        private  boolean drawed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1N1rOHKFFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1N1rOHKFFxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTIwNw==", "bodyText": "Codacy found an issue: Avoid unused private fields such as 'htmlPageAssetAPI'.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331207", "createdAt": "2020-08-31T19:07:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1OFrOHKFFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowNzo1OFrOHKFFzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTIxNQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.business.web.WebAPILocator'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331215", "createdAt": "2020-08-31T19:07:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMFrOHKFF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMFrOHKFF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTIyNA==", "bodyText": "Codacy found an issue: Field title has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331224", "createdAt": "2020-08-31T19:08:00Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;\n+        private  int countContainers;\n+        private  String headCode;\n+        private  String theme;\n+        private  String themeName;\n+        private  String footer;\n+        private  String friendlyName;\n+        private  String header;\n+        private  Date modDate;\n+        private  String modUser;\n+        private  String owner;\n+        private  String name;\n+        private  String title;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMVrOHKFF3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMVrOHKFF3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTIzMA==", "bodyText": "Codacy found an issue: Field identifier has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331230", "createdAt": "2020-08-31T19:08:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMlrOHKFF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowMlrOHKFF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTIzNw==", "bodyText": "Codacy found an issue: Field owner has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331237", "createdAt": "2020-08-31T19:08:02Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;\n+        private  int countContainers;\n+        private  String headCode;\n+        private  String theme;\n+        private  String themeName;\n+        private  String footer;\n+        private  String friendlyName;\n+        private  String header;\n+        private  Date modDate;\n+        private  String modUser;\n+        private  String owner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowM1rOHKFF7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowM1rOHKFF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI0NA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.beans.Permission'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331244", "createdAt": "2020-08-31T19:08:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MDk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNFrOHKFF9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNFrOHKFF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI1Mw==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331253", "createdAt": "2020-08-31T19:08:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+\n+/**\n+ * Handle {@link com.dotmarketing.portlets.templates.model.Template} pagination\n+ * @author jsanca\n+ */\n+public class TemplatePaginator implements PaginatorOrdered<TemplateView> {\n+\n+    public static final String HOST_PARAMETER_ID = \"host\";\n+\n+    private final TemplateAPI templateAPI;\n+    private final TemplateHelper templateHelper;\n+\n+    public TemplatePaginator() {\n+        this(APILocator.getTemplateAPI(),\n+                new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()));\n+    }\n+\n+    @VisibleForTesting\n+    public TemplatePaginator(final TemplateAPI templateAPI, final TemplateHelper templateHelper) {\n+\n+        this.templateAPI    = templateAPI;\n+        this.templateHelper = templateHelper;\n+    }\n+\n+    @Override\n+    public PaginatedArrayList<TemplateView> getItems(final User user, final String filter, final int limit, final int offset,\n+                                                  final String orderby, final OrderDirection direction,\n+                                                  final Map<String, Object> extraParams) {\n+        String hostId = null;\n+\n+        if (extraParams != null) {\n+            hostId = (String) extraParams.get(HOST_PARAMETER_ID);\n+        }\n+\n+        final Map<String, Object> params = map(\"title\", filter);\n+\n+        String orderByDirection = orderby;\n+        if (UtilMethods.isSet(direction) && UtilMethods.isSet(orderby)) {\n+            orderByDirection = new StringBuffer(orderByDirection)\n+                    .append(\" \")\n+                    .append(direction.toString().toLowerCase()).toString();\n+        }\n+\n+        try {\n+            final PaginatedArrayList<Template> allTemplates =\n+                    (PaginatedArrayList<Template>) templateAPI.findTemplates(user, false, params, hostId,\n+                    null, null, null, offset, limit, orderByDirection);\n+\n+            if (UtilMethods.isSet(hostId)) {\n+\n+                allTemplates.stream().sorted(\n+                        direction == OrderDirection.ASC?Comparator.comparing(this::hostname):\n+                                Comparator.comparing(this::hostname).reversed());\n+            }\n+\n+            final PaginatedArrayList<TemplateView> templates =\n+                    new PaginatedArrayList<>();\n+            templates.addAll(allTemplates.stream().map(template -> this.templateHelper.toTemplateView(template, user)).collect(Collectors.toList()));\n+            templates.setQuery(allTemplates.getQuery());\n+            templates.setTotalResults(allTemplates.getTotalResults());\n+\n+            return templates;\n+        } catch (DotSecurityException | DotDataException e) {\n+\n+            Logger.error(this, e.getMessage(), e);\n+            throw new PaginationException(e);\n+        }\n+    }\n+\n+    private String hostname (final Template template) {\n+\n+        try {\n+            return Host.class.cast(template.getParentPermissionable()).getHostname();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTA1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNVrOHKFF_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNVrOHKFF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI2Mw==", "bodyText": "Codacy found an issue: Avoid appending characters as strings in StringBuffer.append.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331263", "createdAt": "2020-08-31T19:08:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+\n+/**\n+ * Handle {@link com.dotmarketing.portlets.templates.model.Template} pagination\n+ * @author jsanca\n+ */\n+public class TemplatePaginator implements PaginatorOrdered<TemplateView> {\n+\n+    public static final String HOST_PARAMETER_ID = \"host\";\n+\n+    private final TemplateAPI templateAPI;\n+    private final TemplateHelper templateHelper;\n+\n+    public TemplatePaginator() {\n+        this(APILocator.getTemplateAPI(),\n+                new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()));\n+    }\n+\n+    @VisibleForTesting\n+    public TemplatePaginator(final TemplateAPI templateAPI, final TemplateHelper templateHelper) {\n+\n+        this.templateAPI    = templateAPI;\n+        this.templateHelper = templateHelper;\n+    }\n+\n+    @Override\n+    public PaginatedArrayList<TemplateView> getItems(final User user, final String filter, final int limit, final int offset,\n+                                                  final String orderby, final OrderDirection direction,\n+                                                  final Map<String, Object> extraParams) {\n+        String hostId = null;\n+\n+        if (extraParams != null) {\n+            hostId = (String) extraParams.get(HOST_PARAMETER_ID);\n+        }\n+\n+        final Map<String, Object> params = map(\"title\", filter);\n+\n+        String orderByDirection = orderby;\n+        if (UtilMethods.isSet(direction) && UtilMethods.isSet(orderby)) {\n+            orderByDirection = new StringBuffer(orderByDirection)\n+                    .append(\" \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNlrOHKFGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowNlrOHKFGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI3NA==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'CollectionsUtils.map' due to existing static import 'com.dotcms.util.CollectionsUtils.map'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331274", "createdAt": "2020-08-31T19:08:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/_publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowN1rOHKFGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowN1rOHKFGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI4NA==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331284", "createdAt": "2020-08-31T19:08:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/_publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 355}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTI2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowOFrOHKFGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowOFrOHKFGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTI5MA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.business.web.HostWebAPI'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331290", "createdAt": "2020-08-31T19:08:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.web.HostWebAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTM2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateForm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowOVrOHKFGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODowOVrOHKFGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTMwMA==", "bodyText": "Codacy found an issue: Field name has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331300", "createdAt": "2020-08-31T19:08:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateForm.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Template Input Form\n+ * @author jsanca\n+ */\n+@JsonDeserialize(builder = TemplateForm.Builder.class)\n+public class TemplateForm {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean headerCheck;\n+    private final boolean footerCheck;\n+\n+    private TemplateForm(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.headerCheck = builder.headerCheck;\n+        this.footerCheck = builder.footerCheck;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isHeaderCheck() {\n+        return headerCheck;\n+    }\n+\n+    public boolean isFooterCheck() {\n+        return footerCheck;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty\n+        private  String identifier;\n+        @JsonProperty\n+        private  String inode;\n+        @JsonProperty\n+        private  String body;\n+        @JsonProperty\n+        private  String selectedimage;\n+        @JsonProperty\n+        private  String image;\n+        @JsonProperty\n+        private  boolean drawed;\n+        @JsonProperty\n+        private  boolean showOnMenu;\n+        @JsonProperty\n+        private  String drawedBody;\n+        @JsonProperty\n+        private  int countAddContainer;\n+        @JsonProperty\n+        private  int countContainers;\n+        @JsonProperty\n+        private  String headCode;\n+        @JsonProperty\n+        private  String theme;\n+        @JsonProperty\n+        private  String themeName;\n+        @JsonProperty\n+        private  String footer;\n+        @JsonProperty\n+        private  String friendlyName;\n+        @JsonProperty\n+        private  String header;\n+        @JsonProperty\n+        private  String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTQxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMFrOHKFGLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMFrOHKFGLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTMxMQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.beans.Inode'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331311", "createdAt": "2020-08-31T19:08:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/templates/business/TemplateAPI.java", "diffHunk": "@@ -1,11 +1,13 @@\n package com.dotmarketing.portlets.templates.business;\n \n import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Inode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTU0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMVrOHKFGQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMVrOHKFGQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTMyOA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331328", "createdAt": "2020-08-31T19:08:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final Template currentTemplate = this.templateAPI.find(templateForm.getInode(), user, pageMode.respectAnonPerms);\n+\n+        if (null == currentTemplate || UtilMethods.isNotSet(currentTemplate.getIdentifier())\n+                || !InodeUtils.isSet(currentTemplate.getInode())) {\n+\n+            throw new DoesNotExistException(\"The working template inode: \" + templateForm.getInode() + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, currentTemplate, PERMISSION_WRITE);\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, currentTemplate), user))).build();\n+    }\n+\n+    /**\n+     * Publish a list of template inodes\n+     * Return the list of a success published and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToPublish {@link List} list of template inodes to publish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/_publish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response publish(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               final List<String> templatesToPublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToPublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToPublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.publishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"Publish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" publishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception e) {\n+\n+                    Logger.error(this, e.getMessage(), e);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                \"publishedInodes\", publishedInodes,\n+                \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Unpublish a list of template inodes\n+     * Return the list of a success unpublished and failed\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templatesToUnpublish {@link List} list of template inodes to unpublish\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/_unpublish\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unpublish(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  final List<String> templatesToUnpublish) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+        final List<String> publishedInodes = new ArrayList<>();\n+        final List<String> failedInodes    = new ArrayList<>();\n+\n+        if (!UtilMethods.isSet(templatesToUnpublish)) {\n+\n+            throw new IllegalArgumentException(\"The body must send a collection of template inodes such as: \" +\n+                    \"[\\\"dd60695c-9e0f-4a2e-9fd8-ce2a4ac5c27d\\\",\\\"cc59390c-9a0f-4e7a-9fd8-ca7e4ec0c77d\\\"]\");\n+        }\n+\n+        for (final String templateInode : templatesToUnpublish) {\n+\n+            final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+            if (null != template && InodeUtils.isSet(template.getInode())) {\n+\n+                try {\n+\n+                    if (this.templateAPI.unpublishTemplate(template, user, pageMode.respectAnonPerms)) {\n+\n+                        ActivityLogger.logInfo(this.getClass(), \"UnPublish Template action\", \"User \" +\n+                                user.getPrimaryKey() + \" unpublishing template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+                        publishedInodes.add(templateInode);\n+                    } else {\n+                        failedInodes.add(templateInode);\n+                    }\n+                } catch(Exception wax) {\n+\n+                    Logger.error(this, wax.getMessage(), wax);\n+                    failedInodes.add(templateInode);\n+                }\n+            } else {\n+\n+                failedInodes.add(templateInode);\n+            }\n+        }\n+\n+        return Response.ok(new ResponseEntityView(\n+                CollectionsUtils.map(\n+                        \"unpublishedInodes\", publishedInodes,\n+                        \"failedInodes\",   failedInodes\n+                ))).build();\n+    }\n+\n+    /**\n+     * Copy a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to copy\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/{templateInode}/_copy\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response copy(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Copying the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final Response responseRest = Response.ok(new ResponseEntityView(\n+                this.templateHelper.toTemplateView(this.templateAPI.copy(template, user), user))).build();\n+\n+        ActivityLogger.logInfo(this.getClass(), \"Copied Template\", \"User \" +\n+                user.getPrimaryKey() + \" copied template\" + template.getTitle(), host.getTitle() != null ? host.getTitle() : \"default\");\n+\n+        return responseRest;\n+    }\n+\n+    /**\n+     * Unlock a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/{templateInode}/_unlock\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unlock(@Context final HttpServletRequest  request,\n+                               @Context final HttpServletResponse response,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Unlocking the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_READ);\n+        this.templateAPI.unlock(template, user);\n+\n+        Logger.debug(this, \"Unlocked template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(true)).build();\n+    }\n+\n+    /**\n+     * Archive a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/{templateInode}/_archive\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response archive(@Context final HttpServletRequest  request,\n+                                 @Context final HttpServletResponse response,\n+                                 @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Doing archive of the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        final boolean result = this.templateAPI.archive(template, user, pageMode.respectAnonPerms);\n+\n+        Logger.debug(this, \"Archive done template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(result)).build();\n+    }\n+\n+    /**\n+     * Unarchive a template\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to unlock\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @Path(\"/{templateInode}/_unarchive\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response unarchive(@Context final HttpServletRequest  request,\n+                                  @Context final HttpServletResponse response,\n+                                  @PathParam(\"templateInode\") final String templateInode) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        Logger.debug(this, ()->\"Doing unarchive of the Template: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, pageMode.respectAnonPerms);\n+\n+        if (null == template || !InodeUtils.isSet(template.getInode())) {\n+\n+            throw new DoesNotExistException(\"The  template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        this.templateHelper.checkPermission(user, template, PERMISSION_WRITE);\n+        this.templateAPI.unarchive(template);\n+\n+        Logger.debug(this, \"Unarchive done template: \" + templateInode);\n+        return Response.ok(new ResponseEntityView(true)).build();\n+    }\n+\n+    /**\n+     * Deletes a template\n+     * Pre: template must not has dependencies\n+     * @param request            {@link HttpServletRequest}\n+     * @param response           {@link HttpServletResponse}\n+     * @param templateInode      {@link String} template inode to look for the template and then, delete it\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @DELETE\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response delete(@Context final HttpServletRequest  request,\n+                                    @Context final HttpServletResponse response,\n+                                    @PathParam(\"templateInode\") final String templateInode) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 646}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTYyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMlrOHKFGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxMlrOHKFGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM0MQ==", "bodyText": "Codacy found an issue: Field theme has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331341", "createdAt": "2020-08-31T19:08:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;\n+        private  int countContainers;\n+        private  String headCode;\n+        private  String theme;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxM1rOHKFGVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxM1rOHKFGVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM0OA==", "bodyText": "Codacy found an issue: Field themeName has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331348", "createdAt": "2020-08-31T19:08:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;\n+        private  int countContainers;\n+        private  String headCode;\n+        private  String theme;\n+        private  String themeName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNFrOHKFGXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNFrOHKFGXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM1Nw==", "bodyText": "Codacy found an issue: Field hasLiveVersion has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331357", "createdAt": "2020-08-31T19:08:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNVrOHKFGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNVrOHKFGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM2NQ==", "bodyText": "Codacy found an issue: Field isNew has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331365", "createdAt": "2020-08-31T19:08:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNlrOHKFGbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxNlrOHKFGbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM3Mw==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331373", "createdAt": "2020-08-31T19:08:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response list(@Context final HttpServletRequest httpRequest,\n+                                        @Context final HttpServletResponse httpResponse,\n+                                        @QueryParam(PaginationUtil.FILTER)   final String filter,\n+                                        @QueryParam(PaginationUtil.PAGE)     final int page,\n+                                        @QueryParam(PaginationUtil.PER_PAGE) final int perPage,\n+                                        @DefaultValue(\"title\") @QueryParam(PaginationUtil.ORDER_BY) final String orderBy,\n+                                        @DefaultValue(\"ASC\") @QueryParam(PaginationUtil.DIRECTION)  final String direction,\n+                                        @QueryParam(ContainerPaginator.HOST_PARAMETER_ID)           final String hostId) {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user = initData.getUser();\n+        final Optional<String> checkedHostId = Optional.ofNullable(Try.of(()-> APILocator.getHostAPI()\n+                .find(hostId, user, false).getIdentifier()).getOrNull());\n+\n+        Logger.debug(this, ()-> \"Getting the List of templates\");\n+\n+        final Map<String, Object> extraParams = Maps.newHashMap();\n+        checkedHostId.ifPresent(checkedHostIdentifier -> extraParams.put(ContainerPaginator.HOST_PARAMETER_ID, checkedHostIdentifier));\n+        return this.paginationUtil.getPage(httpRequest, user, filter, page, perPage, orderBy, OrderDirection.valueOf(direction),\n+                extraParams);\n+    }\n+\n+    /**\n+     * Return a {@link com.dotmarketing.portlets.templates.model.Template} based on the inode\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateInode}\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getByInode(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateInode\") final String templateInode) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the template by inode: \" + templateInode);\n+\n+        final Template template = this.templateAPI.find(templateInode, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The template inode: \" + templateInode + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a live version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/live\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getLiveById(@Context final HttpServletRequest  httpRequest,\n+                               @Context final HttpServletResponse httpResponse,\n+                               @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the live template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findLiveTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The live template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    /**\n+     * Return a working version {@link com.dotmarketing.portlets.templates.model.Template} based on the id\n+     *\n+     * @return Response\n+     */\n+    @GET\n+    @Path(\"/{templateId}/working\")\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response getWorkingById(@Context final HttpServletRequest  httpRequest,\n+                                         @Context final HttpServletResponse httpResponse,\n+                                         @PathParam(\"templateId\") final String templateId) throws DotSecurityException, DotDataException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(httpRequest, httpResponse).rejectWhenNoUser(true).init();\n+        final User user     = initData.getUser();\n+        final PageMode mode = PageMode.get(httpRequest);\n+        Logger.debug(this, ()-> \"Getting the working template by id: \" + templateId);\n+\n+        final Template template = this.templateAPI.findWorkingTemplate(templateId, user, mode.respectAnonPerms);\n+\n+        if (null == template || UtilMethods.isNotSet(template.getIdentifier())) {\n+\n+            throw new DoesNotExistException(\"The working template id: \" + templateId + \" does not exists\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(template, user))).build();\n+    }\n+\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response saveNew(@Context final HttpServletRequest  request,\n+                                @Context final HttpServletResponse response,\n+                                final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);\n+        final PageMode pageMode = PageMode.get(request);\n+\n+        if(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_CAN_ADD_CHILDREN, user, pageMode.respectAnonPerms)) {\n+\n+            Logger.error(this, \"The user: \" + user.getUserId() + \" does not have permission to add a template\");\n+            throw new DotSecurityException(WebKeys.USER_PERMISSIONS_EXCEPTION);\n+        }\n+\n+        return Response.ok(new ResponseEntityView(this.templateHelper.toTemplateView(\n+                this.fillAndSaveTemplate(templateForm, user, host, pageMode, new Template()), user))).build();\n+    }\n+\n+    /**\n+     * Save a single template\n+     * @param request       {@link HttpServletRequest}\n+     * @param response      {@link HttpServletResponse}\n+     * @param templateForm  {@link TemplateForm}\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @PUT\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response save(@Context final HttpServletRequest  request,\n+                            @Context final HttpServletResponse response,\n+                            final TemplateForm templateForm) throws DotDataException, DotSecurityException {\n+\n+        final InitDataObject initData = new WebResource.InitBuilder(webResource)\n+                .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user         = initData.getUser();\n+        final Host host         = this.hostWebAPI.getCurrentHostNoThrow(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxN1rOHKFGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxN1rOHKFGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM3OQ==", "bodyText": "Codacy found an issue: Field countAddContainer has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331379", "createdAt": "2020-08-31T19:08:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MTkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOFrOHKFGfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOFrOHKFGfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTM4OQ==", "bodyText": "Codacy found an issue: Field header has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331389", "createdAt": "2020-08-31T19:08:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplateView.java", "diffHunk": "@@ -0,0 +1,410 @@\n+package com.dotcms.util.pagination;\n+\n+import java.util.Date;\n+\n+public class TemplateView {\n+\n+    private final String  identifier;\n+    private final String  inode;\n+    private final String  categoryId;\n+    private final String  body;\n+    private final String  selectedimage;\n+    private final String  image;\n+    private final boolean drawed;\n+    private final boolean deleted;\n+    private final boolean live;\n+    private final boolean locked;\n+    private final boolean working;\n+    private final boolean isNew;\n+    private final boolean hasLiveVersion;\n+    private final boolean showOnMenu;\n+    private final String  drawedBody;\n+    private final int     countAddContainer;\n+    private final int     countContainers;\n+    private final String  headCode;\n+    private final String  theme;\n+    private final String  themeName;\n+    private final String  footer;\n+    private final String  friendlyName;\n+    private final String  header;\n+    private final Date    modDate;\n+    private final String  modUser;\n+    private final String  owner;\n+    private final String  name;\n+    private final String  title;\n+    private final int     sortOrder;\n+    private final boolean canRead;\n+    private final boolean canWrite;\n+    private final boolean canPublish;\n+\n+    private TemplateView(final Builder builder) {\n+\n+        this.identifier = builder.identifier;\n+        this.inode = builder.inode;\n+        this.categoryId = builder.categoryId;\n+        this.body = builder.body;\n+        this.selectedimage = builder.selectedimage;\n+        this.image = builder.image;\n+        this.drawed = builder.drawed;\n+        this.deleted = builder.deleted;\n+        this.live = builder.live;\n+        this.locked = builder.locked;\n+        this.working = builder.working;\n+        this.isNew = builder.isNew;\n+        this.hasLiveVersion = builder.hasLiveVersion;\n+        this.showOnMenu = builder.showOnMenu;\n+        this.drawedBody = builder.drawedBody;\n+        this.countAddContainer = builder.countAddContainer;\n+        this.countContainers = builder.countContainers;\n+        this.headCode = builder.headCode;\n+        this.theme = builder.theme;\n+        this.themeName = builder.themeName;\n+        this.footer = builder.footer;\n+        this.friendlyName = builder.friendlyName;\n+        this.header = builder.header;\n+        this.modDate = builder.modDate;\n+        this.modUser = builder.modUser;\n+        this.owner = builder.owner;\n+        this.name = builder.name;\n+        this.title = builder.title;\n+        this.sortOrder = builder.sortOrder;\n+        this.canRead = builder.canRead;\n+        this.canWrite = builder.canWrite;\n+        this.canPublish = builder.canPublish;\n+    }\n+\n+    public String getIdentifier() {\n+        return identifier;\n+    }\n+\n+    public String getInode() {\n+        return inode;\n+    }\n+\n+    public String getCategoryId() {\n+        return categoryId;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public String getSelectedimage() {\n+        return selectedimage;\n+    }\n+\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public boolean isDrawed() {\n+        return drawed;\n+    }\n+\n+    public boolean isDeleted() {\n+        return deleted;\n+    }\n+\n+    public boolean isLive() {\n+        return live;\n+    }\n+\n+    public boolean isLocked() {\n+        return locked;\n+    }\n+\n+    public boolean isWorking() {\n+        return working;\n+    }\n+\n+    public boolean isNew() {\n+        return isNew;\n+    }\n+\n+    public boolean isHasLiveVersion() {\n+        return hasLiveVersion;\n+    }\n+\n+    public boolean isShowOnMenu() {\n+        return showOnMenu;\n+    }\n+\n+    public String getDrawedBody() {\n+        return drawedBody;\n+    }\n+\n+    public int getCountAddContainer() {\n+        return countAddContainer;\n+    }\n+\n+    public int getCountContainers() {\n+        return countContainers;\n+    }\n+\n+    public String getHeadCode() {\n+        return headCode;\n+    }\n+\n+    public String getTheme() {\n+        return theme;\n+    }\n+\n+    public String getThemeName() {\n+        return themeName;\n+    }\n+\n+    public String getFooter() {\n+        return footer;\n+    }\n+\n+    public String getFriendlyName() {\n+        return friendlyName;\n+    }\n+\n+    public String getHeader() {\n+        return header;\n+    }\n+\n+    public Date getModDate() {\n+        return modDate;\n+    }\n+\n+    public String getModUser() {\n+        return modUser;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public int getSortOrder() {\n+        return sortOrder;\n+    }\n+\n+    public boolean isCanRead() {\n+        return canRead;\n+    }\n+\n+    public boolean isCanWrite() {\n+        return canWrite;\n+    }\n+\n+    public boolean isCanPublish() {\n+        return canPublish;\n+    }\n+\n+    public static final class Builder {\n+\n+        private  String identifier;\n+        private  String inode;\n+        private  String categoryId;\n+        private  String body;\n+        private  String selectedimage;\n+        private  String image;\n+        private  boolean drawed;\n+        private  boolean deleted;\n+        private  boolean live;\n+        private  boolean locked;\n+        private  boolean working;\n+        private  boolean isNew;\n+        private  boolean hasLiveVersion;\n+        private  boolean showOnMenu;\n+        private  String drawedBody;\n+        private  int countAddContainer;\n+        private  int countContainers;\n+        private  String headCode;\n+        private  String theme;\n+        private  String themeName;\n+        private  String footer;\n+        private  String friendlyName;\n+        private  String header;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MjAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOFrOHKFGjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOFrOHKFGjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTQwNA==", "bodyText": "Codacy found an issue: The String literal \"application/javascript\" appears 4 times in this file; the first occurrence is on line 122", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331404", "createdAt": "2020-08-31T19:08:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/template/TemplateResource.java", "diffHunk": "@@ -0,0 +1,752 @@\n+package com.dotcms.rest.api.v1.template;\n+\n+import com.beust.jcommander.internal.Maps;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.PaginationUtil;\n+import com.dotcms.util.pagination.ContainerPaginator;\n+import com.dotcms.util.pagination.OrderDirection;\n+import com.dotcms.util.pagination.TemplatePaginator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.business.VersionableAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.business.TemplateConstants;\n+import com.dotmarketing.portlets.templates.design.util.DesignTemplateUtil;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.language.LanguageException;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.servlet.SessionDialogMessage;\n+import io.vavr.control.Try;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_WRITE;\n+\n+/**\n+ * CRUD of Templates\n+ * @author jsanca\n+ */\n+@Path(\"/v1/templates\")\n+public class TemplateResource {\n+\n+    private final PaginationUtil paginationUtil;\n+    private final WebResource    webResource;\n+    private final TemplateAPI    templateAPI;\n+    private final VersionableAPI versionableAPI;\n+    private final FolderAPI      folderAPI;\n+    private final HostWebAPI     hostWebAPI;\n+    private final PermissionAPI  permissionAPI;\n+    private final RoleAPI        roleAPI;\n+    private final HTMLPageAssetAPI htmlPageAssetAPI;\n+    private final TemplateHelper templateHelper;\n+\n+\n+    public TemplateResource() {\n+\n+        this(new WebResource(),\n+                new PaginationUtil(new TemplatePaginator(APILocator.getTemplateAPI(),\n+                        new TemplateHelper(APILocator.getPermissionAPI(), APILocator.getRoleAPI()))),\n+                APILocator.getTemplateAPI(),\n+                APILocator.getVersionableAPI(),\n+                APILocator.getFolderAPI(),\n+                APILocator.getPermissionAPI(),\n+                WebAPILocator.getHostWebAPI(),\n+                APILocator.getRoleAPI(),\n+                APILocator.getHTMLPageAssetAPI());\n+    }\n+\n+    @VisibleForTesting\n+    public TemplateResource(final WebResource     webResource,\n+                             final PaginationUtil templatePaginator,\n+                             final TemplateAPI    templateAPI,\n+                             final VersionableAPI versionableAPI,\n+                             final FolderAPI      folderAPI,\n+                             final PermissionAPI  permissionAPI,\n+                             final HostWebAPI     hostWebAPI,\n+                             final RoleAPI        roleAPI,\n+                             final HTMLPageAssetAPI htmlPageAssetAPI) {\n+\n+        this.webResource    = webResource;\n+        this.templateAPI    = templateAPI;\n+        this.versionableAPI = versionableAPI;\n+        this.folderAPI      = folderAPI;\n+        this.permissionAPI  = permissionAPI;\n+        this.hostWebAPI     = hostWebAPI;\n+        this.roleAPI        = roleAPI;\n+        this.htmlPageAssetAPI = htmlPageAssetAPI;\n+        this.templateHelper = new TemplateHelper(permissionAPI, roleAPI);\n+        this.paginationUtil = templatePaginator;\n+    }\n+\n+    /**\n+     * Return a list of {@link com.dotmarketing.portlets.templates.model.Template}, entity\n+     * response syntax:.\n+     *\n+     *\n+     * Url sintax:\n+     * api/v1/templates?filter=filter-string&page=page-number&per_page=per-page&ordeby=order-field-name&direction=order-direction&host=host-id\n+     *\n+     * where:\n+     *\n+     * <ul>\n+     * <li>filter-string: just return Template who content this pattern into its title</li>\n+     * <li>page: page to return</li>\n+     * <li>per_page: limit of items to return</li>\n+     * <li>ordeby: field to order by</li>\n+     * <li>direction: asc for upward order and desc for downward order</li>\n+     * <li>host: filter by host's id</li>\n+     * </ul>\n+     *\n+     * Url example: v1/templates?filter=test&page=2&orderby=title\n+     *\n+     * @param httpRequest\n+     * @return\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQ1MjA3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOVrOHKFGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoxOVrOHKFGkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTQwOQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Collections'", "url": "https://github.com/dotCMS/core/pull/19134#discussion_r480331409", "createdAt": "2020-08-31T19:08:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/pagination/TemplatePaginator.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.util.pagination;\n+\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n+import com.dotcms.rest.api.v1.template.TemplateHelper;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.templates.business.TemplateAPI;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PaginatedArrayList;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab0d7953c8925174569c5bff5d59291efe506f8"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1997, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}