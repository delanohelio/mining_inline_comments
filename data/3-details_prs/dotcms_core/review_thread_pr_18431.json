{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTMwMjI5", "number": 18431, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowODozNVrOD5a5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozNVrOD6AqtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTM2MDkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowODozNVrOGQrMOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDowODozNVrOGQrMOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzODA0MQ==", "bodyText": "should we create a class for this? ResourceLinkView for example", "url": "https://github.com/dotCMS/core/pull/18431#discussion_r420138041", "createdAt": "2020-05-05T14:08:35Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.rest.api.v1.content;\n+\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Exposes a {@link com.dotmarketing.portlets.contentlet.model.ResourceLink} by inode or id\n+ * @author jsanca\n+ */\n+@Path(\"/v1/content/resourcelink\")\n+public class ResourceLinkResource {\n+\n+    private final WebResource    webResource;\n+    private final ContentletAPI contentletAPI;\n+\n+    public ResourceLinkResource() {\n+        this(new WebResource(), APILocator.getContentletAPI());\n+    }\n+\n+    @VisibleForTesting\n+    protected ResourceLinkResource(final WebResource webResource, final ContentletAPI contentletAPI) {\n+\n+        this.webResource   = webResource;\n+        this.contentletAPI = contentletAPI;\n+    }\n+\n+    /**\n+     * Given an inode or identifier this will build get you a Resource Link\n+     * The inode nor identifier, is expected other wise you'll get exception\n+     * @param request    {@link HttpServletRequest} http request\n+     * @param response   {@link HttpServletResponse} http response\n+     * @param inode      {@link String} asset inode\n+     * @param identifier {@link String} identifier\n+     * @param language   {@link String} optional parameter\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotStateException\n+     * @throws DotSecurityException\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_JSON + \";charset=UTF-8\")\n+    public Response findResourceLink(@Context final HttpServletRequest  request,\n+                                     @Context final HttpServletResponse response,\n+                                     @QueryParam(\"inode\")            final String inode,\n+                                     @QueryParam(\"identifier\")       final String identifier,\n+                                     @DefaultValue(\"-1\") @QueryParam(\"language\") final String language) throws DotStateException, DotSecurityException, DotDataException {\n+        if (!UtilMethods.isSet(inode) && !UtilMethods.isSet(identifier)) {\n+\n+            throw new IllegalArgumentException(\"Missing required inode/identifier param\");\n+        }\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource).requiredBackendUser(true).requiredFrontendUser(false)\n+                        .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user       = initData.getUser();\n+        final long languageId = LanguageUtil.getLanguageId(language);\n+        final PageMode mode   = PageMode.get(request);\n+        final Contentlet contentlet = this.getContentlet(inode, identifier, languageId,\n+                ()-> WebAPILocator.getLanguageWebAPI().getLanguage(request).getId(), initData, mode);\n+\n+        Logger.debug(this, ()-> \"Finding the resource link for the contentlet: \" + contentlet.getIdentifier());\n+        final ResourceLink link     = new ResourceLink.ResourceLinkBuilder().build(request, user, contentlet);\n+        if(link.isDownloadRestricted()) {\n+\n+            throw new DotSecurityException(\"The Resource link to the contentlet is restricted.\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(ImmutableMap.of(\"resourceLink\",\n+                ImmutableMap.of(\n+                        \"href\",        link.getResourceLinkAsString(),\n+                        \"text\",        link.getResourceLinkUriAsString(),\n+                        \"mimeType\",    link.getMimeType(),\n+                        \"idPath\",      link.getIdPath(),\n+                        \"versionPath\", link.getVersionPath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808511ab5a8bd08b75a4252e22042e15c929875"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTM3MDY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoxMDozM1rOGQrSQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1Mjo1M1rOGRmyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzOTU4NQ==", "bodyText": "why do it not using the language here?", "url": "https://github.com/dotCMS/core/pull/18431#discussion_r420139585", "createdAt": "2020-05-05T14:10:33Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.rest.api.v1.content;\n+\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Exposes a {@link com.dotmarketing.portlets.contentlet.model.ResourceLink} by inode or id\n+ * @author jsanca\n+ */\n+@Path(\"/v1/content/resourcelink\")\n+public class ResourceLinkResource {\n+\n+    private final WebResource    webResource;\n+    private final ContentletAPI contentletAPI;\n+\n+    public ResourceLinkResource() {\n+        this(new WebResource(), APILocator.getContentletAPI());\n+    }\n+\n+    @VisibleForTesting\n+    protected ResourceLinkResource(final WebResource webResource, final ContentletAPI contentletAPI) {\n+\n+        this.webResource   = webResource;\n+        this.contentletAPI = contentletAPI;\n+    }\n+\n+    /**\n+     * Given an inode or identifier this will build get you a Resource Link\n+     * The inode nor identifier, is expected other wise you'll get exception\n+     * @param request    {@link HttpServletRequest} http request\n+     * @param response   {@link HttpServletResponse} http response\n+     * @param inode      {@link String} asset inode\n+     * @param identifier {@link String} identifier\n+     * @param language   {@link String} optional parameter\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotStateException\n+     * @throws DotSecurityException\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_JSON + \";charset=UTF-8\")\n+    public Response findResourceLink(@Context final HttpServletRequest  request,\n+                                     @Context final HttpServletResponse response,\n+                                     @QueryParam(\"inode\")            final String inode,\n+                                     @QueryParam(\"identifier\")       final String identifier,\n+                                     @DefaultValue(\"-1\") @QueryParam(\"language\") final String language) throws DotStateException, DotSecurityException, DotDataException {\n+        if (!UtilMethods.isSet(inode) && !UtilMethods.isSet(identifier)) {\n+\n+            throw new IllegalArgumentException(\"Missing required inode/identifier param\");\n+        }\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource).requiredBackendUser(true).requiredFrontendUser(false)\n+                        .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user       = initData.getUser();\n+        final long languageId = LanguageUtil.getLanguageId(language);\n+        final PageMode mode   = PageMode.get(request);\n+        final Contentlet contentlet = this.getContentlet(inode, identifier, languageId,\n+                ()-> WebAPILocator.getLanguageWebAPI().getLanguage(request).getId(), initData, mode);\n+\n+        Logger.debug(this, ()-> \"Finding the resource link for the contentlet: \" + contentlet.getIdentifier());\n+        final ResourceLink link     = new ResourceLink.ResourceLinkBuilder().build(request, user, contentlet);\n+        if(link.isDownloadRestricted()) {\n+\n+            throw new DotSecurityException(\"The Resource link to the contentlet is restricted.\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(ImmutableMap.of(\"resourceLink\",\n+                ImmutableMap.of(\n+                        \"href\",        link.getResourceLinkAsString(),\n+                        \"text\",        link.getResourceLinkUriAsString(),\n+                        \"mimeType\",    link.getMimeType(),\n+                        \"idPath\",      link.getIdPath(),\n+                        \"versionPath\", link.getVersionPath()\n+                )\n+        ))).build();\n+\n+    }\n+\n+    private Contentlet getContentlet(final String inode,\n+                                     final String identifier,\n+                                     final long language,\n+                                     final Supplier<Long> sessionLanguage,\n+                                     final InitDataObject initDataObject,\n+                                     final PageMode pageMode) throws DotDataException, DotSecurityException {\n+\n+        Contentlet contentlet = null;\n+        PageMode mode         = pageMode;\n+\n+        if(UtilMethods.isSet(inode)) {\n+\n+            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n+            contentlet = this.contentletAPI.find", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e808511ab5a8bd08b75a4252e22042e15c929875"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNDQ5MQ==", "bodyText": "b/c the inode implicit includes the language, inode = id + lang (in some version)", "url": "https://github.com/dotCMS/core/pull/18431#discussion_r421114491", "createdAt": "2020-05-06T21:52:53Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.rest.api.v1.content;\n+\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DoesNotExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.language.LanguageUtil;\n+import com.liferay.portal.model.User;\n+import org.glassfish.jersey.server.JSONP;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Exposes a {@link com.dotmarketing.portlets.contentlet.model.ResourceLink} by inode or id\n+ * @author jsanca\n+ */\n+@Path(\"/v1/content/resourcelink\")\n+public class ResourceLinkResource {\n+\n+    private final WebResource    webResource;\n+    private final ContentletAPI contentletAPI;\n+\n+    public ResourceLinkResource() {\n+        this(new WebResource(), APILocator.getContentletAPI());\n+    }\n+\n+    @VisibleForTesting\n+    protected ResourceLinkResource(final WebResource webResource, final ContentletAPI contentletAPI) {\n+\n+        this.webResource   = webResource;\n+        this.contentletAPI = contentletAPI;\n+    }\n+\n+    /**\n+     * Given an inode or identifier this will build get you a Resource Link\n+     * The inode nor identifier, is expected other wise you'll get exception\n+     * @param request    {@link HttpServletRequest} http request\n+     * @param response   {@link HttpServletResponse} http response\n+     * @param inode      {@link String} asset inode\n+     * @param identifier {@link String} identifier\n+     * @param language   {@link String} optional parameter\n+     * @return Response\n+     * @throws DotDataException\n+     * @throws DotStateException\n+     * @throws DotSecurityException\n+     */\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_JSON + \";charset=UTF-8\")\n+    public Response findResourceLink(@Context final HttpServletRequest  request,\n+                                     @Context final HttpServletResponse response,\n+                                     @QueryParam(\"inode\")            final String inode,\n+                                     @QueryParam(\"identifier\")       final String identifier,\n+                                     @DefaultValue(\"-1\") @QueryParam(\"language\") final String language) throws DotStateException, DotSecurityException, DotDataException {\n+        if (!UtilMethods.isSet(inode) && !UtilMethods.isSet(identifier)) {\n+\n+            throw new IllegalArgumentException(\"Missing required inode/identifier param\");\n+        }\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource).requiredBackendUser(true).requiredFrontendUser(false)\n+                        .requestAndResponse(request, response).rejectWhenNoUser(true).init();\n+        final User user       = initData.getUser();\n+        final long languageId = LanguageUtil.getLanguageId(language);\n+        final PageMode mode   = PageMode.get(request);\n+        final Contentlet contentlet = this.getContentlet(inode, identifier, languageId,\n+                ()-> WebAPILocator.getLanguageWebAPI().getLanguage(request).getId(), initData, mode);\n+\n+        Logger.debug(this, ()-> \"Finding the resource link for the contentlet: \" + contentlet.getIdentifier());\n+        final ResourceLink link     = new ResourceLink.ResourceLinkBuilder().build(request, user, contentlet);\n+        if(link.isDownloadRestricted()) {\n+\n+            throw new DotSecurityException(\"The Resource link to the contentlet is restricted.\");\n+        }\n+\n+        return Response.ok(new ResponseEntityView(ImmutableMap.of(\"resourceLink\",\n+                ImmutableMap.of(\n+                        \"href\",        link.getResourceLinkAsString(),\n+                        \"text\",        link.getResourceLinkUriAsString(),\n+                        \"mimeType\",    link.getMimeType(),\n+                        \"idPath\",      link.getIdPath(),\n+                        \"versionPath\", link.getVersionPath()\n+                )\n+        ))).build();\n+\n+    }\n+\n+    private Contentlet getContentlet(final String inode,\n+                                     final String identifier,\n+                                     final long language,\n+                                     final Supplier<Long> sessionLanguage,\n+                                     final InitDataObject initDataObject,\n+                                     final PageMode pageMode) throws DotDataException, DotSecurityException {\n+\n+        Contentlet contentlet = null;\n+        PageMode mode         = pageMode;\n+\n+        if(UtilMethods.isSet(inode)) {\n+\n+            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n+            contentlet = this.contentletAPI.find", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEzOTU4NQ=="}, "originalCommit": {"oid": "e808511ab5a8bd08b75a4252e22042e15c929875"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTU0OTMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozNVrOGRm3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozNVrOGRm3DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTY2MQ==", "bodyText": "I might think on replacing this by a stringbuilder to avoid so much mem used", "url": "https://github.com/dotCMS/core/pull/18431#discussion_r421115661", "createdAt": "2020-05-06T21:55:35Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "diffHunk": "@@ -164,12 +174,43 @@ public final ResourceLink build(final HttpServletRequest request, final User use\n             final boolean downloadRestricted    = isDownloadPermissionBasedRestricted(contentlet, user);\n             final String mimeType               = this.getMimiType(binary);\n             final String fileAssetName          = binary.getName();\n-            final Tuple2<String, String> resourceLink = this.createResourceLink(request, user, contentlet, identifier, binary, hostUrlBuilder.toString());\n-            final Tuple2<String, String> versionPathIdPath = this.createVersionPathIdPath(contentlet, velocityVarName, binary);\n+            final Tuple2<String, String> resourceLink      = this.createResourceLink(request, user, contentlet, identifier, binary, hostUrlBuilder.toString());\n+            final Tuple2<String, String> versionPathIdPath = this.createVersionPathIdPath(contentlet, fieldVelocityVarName, binary);\n+            final String configuredImageURL                = this.getConfiguredImageURL (contentlet, binary, host);\n \n             return new ResourceLink(resourceLink._1(), resourceLink._2(), mimeType, contentlet,\n-                    velocityVarName, isEditableAsText(mimeType, fileAssetName), downloadRestricted,\n-                    versionPathIdPath._1(), versionPathIdPath._2());\n+                    fieldVelocityVarName, isEditableAsText(mimeType, fileAssetName), downloadRestricted,\n+                    versionPathIdPath._1(), versionPathIdPath._2(), configuredImageURL);\n+        }\n+\n+        private String getConfiguredImageURL(final Contentlet contentlet, final File binary, final Host host) {\n+\n+            final  String pattern = Config.getStringProperty(\"WYSIWYG_IMAGE_URL_PATTERN\", \"{path}{name}?language_id={languageId}\");\n+            return replaceUrlPattern(pattern, contentlet, binary, host);\n+        }\n+\n+        String replaceUrlPattern(final String pattern, final Contentlet contentlet, final File binary, final Host host) {\n+\n+            final String fileName  = binary.getName();\n+            final String path      = \"/dA/\" + contentlet.getIdentifier() + \"/\";\n+            final String extension = UtilMethods.getFileExtension(fileName);\n+            final String shortyId  = contentlet.getIdentifier().replace(StringPool.DASH, StringPool.BLANK).substring(0, 10);\n+\n+            return pattern", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f115e29b1fe385163c144e5d37ccc5c305256c67"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2286, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}