{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDg1OTE4", "number": 18219, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0Mzo1NlrODtN-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0OVrODvV61w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzQxMzg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0Mzo1NlrOF-hE7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxNTo1M1rOF_INUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Nzk2NA==", "bodyText": "should this change have a postman test or at least a unit/integration test?", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401097964", "createdAt": "2020-03-31T17:43:56Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -403,7 +403,7 @@ private void updateLoginAsSessionInfo(final HttpServletRequest request, final Ho\n \t\tfinal String userToImpersonate = (UtilMethods.isSet(loginAsUserId) ? loginAsUserId : principalUserId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094003cd5b40320c93136470a00d2d9f93bc78fb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczOTA5MQ==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401739091", "createdAt": "2020-04-01T16:15:53Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -403,7 +403,7 @@ private void updateLoginAsSessionInfo(final HttpServletRequest request, final Ho\n \t\tfinal String userToImpersonate = (UtilMethods.isSet(loginAsUserId) ? loginAsUserId : principalUserId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Nzk2NA=="}, "originalCommit": {"oid": "094003cd5b40320c93136470a00d2d9f93bc78fb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzU4OTMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozMDozOFrOF-izcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDowOTowNVrOF-mSKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjI1OQ==", "bodyText": "Move this code to the revertLoginAsSessionInfo method in order to encapsulate the session revert process", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401126259", "createdAt": "2020-03-31T18:30:38Z", "author": {"login": "jcastro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -498,6 +498,7 @@ public final Response logoutAs(@Context final HttpServletRequest httpServletRequ\n \t\t\tfinal Map<String, Object> sessionData = this.helper.doLogoutAs(principalUserId, currentLoginAsUser, serverName);\n \t\t\trevertLoginAsSessionInfo(httpServletRequest, Host.class.cast(sessionData.get(com.dotmarketing.util.WebKeys\n \t\t\t\t\t.CURRENT_HOST)), principalUserId);\n+\t\t\thttpServletRequest.getSession().removeAttribute(WebKeys.PRINCIPAL_USER_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094003cd5b40320c93136470a00d2d9f93bc78fb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MzI3Mw==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r401183273", "createdAt": "2020-03-31T20:09:05Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/user/UserResource.java", "diffHunk": "@@ -498,6 +498,7 @@ public final Response logoutAs(@Context final HttpServletRequest httpServletRequ\n \t\t\tfinal Map<String, Object> sessionData = this.helper.doLogoutAs(principalUserId, currentLoginAsUser, serverName);\n \t\t\trevertLoginAsSessionInfo(httpServletRequest, Host.class.cast(sessionData.get(com.dotmarketing.util.WebKeys\n \t\t\t\t\t.CURRENT_HOST)), principalUserId);\n+\t\t\thttpServletRequest.getSession().removeAttribute(WebKeys.PRINCIPAL_USER_ID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjI1OQ=="}, "originalCommit": {"oid": "094003cd5b40320c93136470a00d2d9f93bc78fb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTY4Nzc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0NlrOGBtpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0NlrOGBtpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU0MQ==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449541", "createdAt": "2020-04-06T23:31:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6c969841233724d36d17b267bbb18e1d888bfcd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTY4NzgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0N1rOGBtpDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0N1rOGBtpDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU1MA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449550", "createdAt": "2020-04-06T23:31:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        resource = new UserResource();\n+        adminUser = TestUserUtils.getAdminUser();\n+        host = new SiteDataGen().nextPersisted();\n+        user = TestUserUtils.getChrisPublisherUser(host);\n+        response = new MockHttpResponse();\n+\n+        //Check if role has any layout, if is empty add one\n+        if(APILocator.getLayoutAPI().loadLayoutsForUser(user).isEmpty()) {\n+            APILocator.getRoleAPI()\n+                    .addLayoutToRole(APILocator.getLayoutAPI().findAllLayouts().get(0),\n+                            APILocator.getRoleAPI().getUserRole(user));\n+        }\n+        //Add permissions to the host\n+        final Permission readPermissionsPermission = new Permission( host.getPermissionId(),\n+                APILocator.getRoleAPI().getUserRole(user).getId(), PermissionAPI.PERMISSION_READ, true );\n+        APILocator.getPermissionAPI().save(readPermissionsPermission,host,adminUser,false);\n+\n+    }\n+\n+    private static HttpServletRequest mockRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CURRENT_HOST,host);\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID,host);\n+\n+        return request;\n+    }\n+\n+    private void loginAs() throws Exception {\n+        final LoginAsForm loginAsForm = new LoginAsForm.Builder().userId(user.getUserId()).build();\n+        request = mockRequest();\n+        final Response resourceResponse = resource.loginAs(request,response,loginAsForm);\n+        assertNotNull(resourceResponse);\n+        assertEquals(Status.OK.getStatusCode(),resourceResponse.getStatus());\n+        assertEquals(user.getUserId(),request.getSession().getAttribute(WebKeys.USER_ID));\n+        assertNull(request.getSession().getAttribute(WebKeys.USER));\n+        assertEquals(adminUser.getUserId(),request.getSession().getAttribute(WebKeys.PRINCIPAL_USER_ID));\n+    }\n+\n+    @Test\n+    public void test_loginAs_success() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6c969841233724d36d17b267bbb18e1d888bfcd"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTY4Nzg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0OFrOGBtpFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0OFrOGBtpFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU1Nw==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449557", "createdAt": "2020-04-06T23:31:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6c969841233724d36d17b267bbb18e1d888bfcd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTY4NzkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0OVrOGBtpHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzozMTo0OVrOGBtpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ0OTU2NQ==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18219#discussion_r404449565", "createdAt": "2020-04-06T23:31:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/user/UserResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.user;\n+\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import static org.junit.Assert.*;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class UserResourceIntegrationTest {\n+\n+    static HttpServletResponse response;\n+    static HttpServletRequest request;\n+    static UserResource resource;\n+    static User user;\n+    static Host host;\n+    static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        resource = new UserResource();\n+        adminUser = TestUserUtils.getAdminUser();\n+        host = new SiteDataGen().nextPersisted();\n+        user = TestUserUtils.getChrisPublisherUser(host);\n+        response = new MockHttpResponse();\n+\n+        //Check if role has any layout, if is empty add one\n+        if(APILocator.getLayoutAPI().loadLayoutsForUser(user).isEmpty()) {\n+            APILocator.getRoleAPI()\n+                    .addLayoutToRole(APILocator.getLayoutAPI().findAllLayouts().get(0),\n+                            APILocator.getRoleAPI().getUserRole(user));\n+        }\n+        //Add permissions to the host\n+        final Permission readPermissionsPermission = new Permission( host.getPermissionId(),\n+                APILocator.getRoleAPI().getUserRole(user).getId(), PermissionAPI.PERMISSION_READ, true );\n+        APILocator.getPermissionAPI().save(readPermissionsPermission,host,adminUser,false);\n+\n+    }\n+\n+    private static HttpServletRequest mockRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CURRENT_HOST,host);\n+        request.getSession().setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID,host);\n+\n+        return request;\n+    }\n+\n+    private void loginAs() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6c969841233724d36d17b267bbb18e1d888bfcd"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}