{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNTM0NDYz", "number": 18398, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozOVrOD4EKXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NlrOD4EK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDM5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozOVrOGOrjUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozOVrOGOrjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgwMA==", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046800", "createdAt": "2020-04-30T14:20:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MFrOGOrjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MFrOGOrjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgxMw==", "bodyText": "Issue found: Local variable 'type' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046813", "createdAt": "2020-04-30T14:20:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgyNw==", "bodyText": "Issue found: Local variable 'constants' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046827", "createdAt": "2020-04-30T14:20:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg0Mw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046843", "createdAt": "2020-04-30T14:20:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NFrOGOrjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NFrOGOrjhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg1NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046854", "createdAt": "2020-04-30T14:20:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NVrOGOrjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NVrOGOrjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg2NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046864", "createdAt": "2020-04-30T14:20:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MDkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NlrOGOrjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NlrOGOrjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg3Mw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046873", "createdAt": "2020-04-30T14:20:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0N1rOGOrjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0N1rOGOrjqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg4OA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046888", "createdAt": "2020-04-30T14:20:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTE5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OFrOGOrjxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OFrOGOrjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkxNg==", "bodyText": "Issue found: Parameter 'type' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046916", "createdAt": "2020-04-30T14:20:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+        // test that Immutables work the same way\n+        oldWayFields = oldWayOfGettingFields(type, ImmutableTextField.class);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+\n+    }\n+\n+\n+\n+    private List<Field> oldWayOfGettingFields(ContentType type, final Class<? extends Field> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OVrOGOrjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OVrOGOrjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkyNg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046926", "createdAt": "2020-04-30T14:20:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MFrOGOrj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MFrOGOrj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk0Mg==", "bodyText": "Issue found: Local variable 'type' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046942", "createdAt": "2020-04-30T14:20:50Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MVrOGOrj6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MVrOGOrj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk1NQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046955", "createdAt": "2020-04-30T14:20:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MlrOGOrkAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MlrOGOrkAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk3Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046977", "createdAt": "2020-04-30T14:20:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1M1rOGOrkCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1M1rOGOrkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk4Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046987", "createdAt": "2020-04-30T14:20:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTcxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NFrOGOrkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NFrOGOrkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk5NA==", "bodyText": "Issue found: Local variable 'immutableConstants' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046994", "createdAt": "2020-04-30T14:20:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NVrOGOrkHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NVrOGOrkHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAwNw==", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047007", "createdAt": "2020-04-30T14:20:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MTg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NlrOGOrkJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NlrOGOrkJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAxNA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047014", "createdAt": "2020-04-30T14:20:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2266, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}