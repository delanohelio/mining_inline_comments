{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODcyNjI2", "number": 18007, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0NDo1NVrODhrFUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1OVrODiZUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM1NDc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeAPIImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0NDo1NVrOFsihoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0NDo1NVrOFsihoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0NzMyOQ==", "bodyText": "Use the un-repackaged version.", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382247329", "createdAt": "2020-02-20T20:44:55Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeAPIImplTest.java", "diffHunk": "@@ -57,6 +51,7 @@\n import com.dotcms.datagen.SiteDataGen;\n import com.dotcms.datagen.TestDataUtils;\n import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.xhtmlrenderer.util.IOUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8159860f79cd635edb30f6b8fa318407308f09f5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM2NDY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0ODozNVrOFsioAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo0ODozNVrOFsioAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI0ODk2Mw==", "bodyText": "Maybe we need a contentlet.getBaseType() method that looks up against the contentType if set or the map if not?", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382248963", "createdAt": "2020-02-20T20:48:35Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -4113,6 +4122,40 @@ private Contentlet checkin(final Contentlet contentletIn, final ContentletRelati\n         }\n     }\n \n+    /*\n+     * If the contentletIn is new, has not any content type assigned and has a base type set into the properties\n+     * will try to figure out a match for the content type\n+     */\n+    private void checkOrSetContentType(final Contentlet contentletIn, final User user) {\n+\n+        if (contentletIn.isNew() && null == contentletIn.getContentType() &&\n+                contentletIn.getMap().containsKey(Contentlet.BASE_TYPE_KEY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8159860f79cd635edb30f6b8fa318407308f09f5"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQwNDY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/MimeTypeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo1OTo0MVrOFsjA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo1OTo0MVrOFsjA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NTMyOQ==", "bodyText": "If this is to be our MimeTypeUtils, please add a convenience method that calls our FileAssetAPI.getMimeType() or move that here and call it from the FileAssetAPIImpl", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382255329", "createdAt": "2020-02-20T20:59:41Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/util/MimeTypeUtils.java", "diffHunk": "@@ -41,4 +44,20 @@ public static String getMimeType (final File binary) {\n \n         return mimeType;\n     }\n+\n+    /**\n+     * See if one mime type1 match into another\n+     * @param mimeType1 String\n+     * @param mimeType2 String\n+     * @return boolean\n+     */\n+    public static boolean match (final String mimeType1, final String mimeType2) {\n+\n+        if (ACCEPT_ALL.equals(mimeType1)) {\n+            return true;\n+        }\n+        final MimeType mimeTypeObj1 = Sneaky.sneak(() -> new MimeType(mimeType1));\n+        final MimeType mimeTypeObj2 = Sneaky.sneak(() -> new MimeType(mimeType2));\n+        return mimeTypeObj1.match(mimeTypeObj2);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8159860f79cd635edb30f6b8fa318407308f09f5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTIxNTA2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1NTo0NVrOFs9x7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1NTo0NVrOFs9x7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5Mzg2OQ==", "bodyText": "Maybe another test with the fail scenario?", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382693869", "createdAt": "2020-02-21T16:55:45Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "diffHunk": "@@ -149,6 +150,45 @@\n @RunWith(DataProviderRunner.class)\n public class ContentletAPITest extends ContentletBaseTest {\n \n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4539cd0cf51ee411fbd3593668f0f0a7de9a8eef"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTIyMjU1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/DotAssetAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1Nzo0MVrOFs92dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1Nzo0MVrOFs92dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5NTAyOQ==", "bodyText": "tests for the API?", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382695029", "createdAt": "2020-02-21T16:57:41Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/DotAssetAPI.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.liferay.portal.model.User;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+/**\n+ * API to handle the @{@link com.dotcms.contenttype.model.type.DotAssetContentType}\n+ * @author jsanca\n+ */\n+public interface DotAssetAPI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4539cd0cf51ee411fbd3593668f0f0a7de9a8eef"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTIyNDg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1ODozMlrOFs94GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1ODozMlrOFs94GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5NTQ0OQ==", "bodyText": "I think you should validate that dotAssetContentlet has an inode and an identifier because you are testing the checkin method", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382695449", "createdAt": "2020-02-21T16:58:32Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "diffHunk": "@@ -149,6 +150,45 @@\n @RunWith(DataProviderRunner.class)\n public class ContentletAPITest extends ContentletBaseTest {\n \n+    @Test\n+    public void testDotAsset_Checkin () throws DotDataException, DotSecurityException, IOException {\n+\n+        // 1) creates a dotasset for test\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        ContentType dotAssetContentType     = contentTypeAPI\n+                .save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(FolderAPI.SYSTEM_FOLDER)\n+                .host(Host.SYSTEM_HOST).name(variable)\n+                .owner(user.getUserId()).build());\n+        final Map<String, com.dotcms.contenttype.model.field.Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(\"application/*, text/*\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        dotAssetContentType = contentTypeAPI.save(dotAssetContentType);\n+        binaryField = fieldAPI.save(binaryField, user);\n+        fieldAPI.save(allowFileTypes, user);\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"fileTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test hi this a test longer than ten characters\");\n+\n+        Contentlet dotAssetContentlet = new Contentlet();\n+        dotAssetContentlet.setLanguageId(languageAPI.getDefaultLanguage().getId());\n+        dotAssetContentlet.setModUser(user.getUserId());\n+        dotAssetContentlet.setHost(APILocator.systemHost().getIdentifier());\n+        dotAssetContentlet.setStringProperty(Contentlet.BASE_TYPE_KEY, BaseContentType.DOTASSET.getAlternateName());\n+        dotAssetContentlet.setBinary(binaryField, tempTestFile);\n+        dotAssetContentlet.setIndexPolicy(IndexPolicy.FORCE);\n+        dotAssetContentlet.setIndexPolicyDependencies(IndexPolicy.FORCE);\n+        dotAssetContentlet = contentletAPI.checkin(dotAssetContentlet, user, false);\n+\n+        assertNotNull(dotAssetContentlet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4539cd0cf51ee411fbd3593668f0f0a7de9a8eef"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTI0MzY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/BaseTypeToContentTypeStrategyResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNDo0M1rOFs-EcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNDo0M1rOFs-EcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODYwOQ==", "bodyText": "I think this return here is redundant as there is a return Optional.empty() at the end of the method. Besides, it might be worth to a log at least of debug level", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r382698609", "createdAt": "2020-02-21T17:04:43Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/BaseTypeToContentTypeStrategyResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Subscribe Strategies to resolve from base types a content type\n+ * and get the strategy for a set of arguments if applies\n+ * @author jsanca\n+ */\n+public class BaseTypeToContentTypeStrategyResolver {\n+\n+    private volatile Map<BaseContentType, BaseTypeToContentTypeStrategy> strategiesMap = this.getDefaultStrategies();\n+\n+    private  Map<BaseContentType, BaseTypeToContentTypeStrategy> getDefaultStrategies() {\n+\n+        final ImmutableMap.Builder<BaseContentType, BaseTypeToContentTypeStrategy> builder =\n+                new ImmutableMap.Builder<>();\n+\n+        builder.put(BaseContentType.DOTASSET, new DotAssetBaseTypeToContentTypeStrategyImpl());\n+\n+        return builder.build();\n+    }\n+\n+\n+    public synchronized void subscribe (final BaseContentType baseContentType, final BaseTypeToContentTypeStrategy strategy) {\n+\n+        if (null != baseContentType && null != strategy) {\n+\n+            final ImmutableMap.Builder<BaseContentType, BaseTypeToContentTypeStrategy> builder =\n+                    new ImmutableMap.Builder<>();\n+\n+            builder.putAll(this.strategiesMap);\n+            builder.put(BaseContentType.DOTASSET, strategy);\n+\n+            this.strategiesMap = builder.build();\n+        }\n+    }\n+\n+\n+    private static class SingletonHolder {\n+        private static final BaseTypeToContentTypeStrategyResolver INSTANCE = new BaseTypeToContentTypeStrategyResolver();\n+    }\n+\n+    /**\n+     * Get the instance.\n+     * @return BaseTypeToContentTypeStrategyResolver\n+     */\n+    public static BaseTypeToContentTypeStrategyResolver getInstance() {\n+\n+        return BaseTypeToContentTypeStrategyResolver.SingletonHolder.INSTANCE;\n+    } // getInstance.\n+\n+\n+    /**\n+     * Get a strategy if applies\n+     * @param baseContentType {@link BaseContentType}\n+     * @return Optional BaseTypeToContentTypeStrategy\n+     */\n+    public Optional<BaseTypeToContentTypeStrategy> get(final BaseContentType baseContentType) {\n+\n+        return this.strategiesMap.containsKey(baseContentType)?\n+                Optional.of(this.strategiesMap.get(baseContentType)):\n+                Optional.empty();\n+    }\n+    /////////////\n+    private class DotAssetBaseTypeToContentTypeStrategyImpl  implements BaseTypeToContentTypeStrategy {\n+\n+        @Override\n+        public Optional<ContentType> apply(final BaseContentType baseContentType, final Map<String, Object> contextMap) {\n+\n+            final User user = (User)contextMap.get(\"user\");\n+            final Host currentHost = (Host)contextMap.get(\"host\");\n+            final List<File> binaryFiles = (List<File>) contextMap.getOrDefault(\"binaryFiles\", Collections.emptyList());\n+            final Map<String, Object> contentletMap = (Map<String, Object>) contextMap.get(\"contentletMap\");\n+\n+            final File file = this.getBinary(binaryFiles, contentletMap);\n+            if (null != file && file.exists() && file.canRead()) {\n+\n+                try {\n+\n+                    return APILocator.getDotAssetAPI().tryMatch(file, currentHost, user);\n+                } catch (DotDataException | DotSecurityException e) {\n+                    return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4539cd0cf51ee411fbd3593668f0f0a7de9a8eef"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkyOTk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0NFrOFtniEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0NFrOFtniEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NzkzNg==", "bodyText": "Issue found: The String literal \"image/png\" appears 6 times in this file; the first occurrence is on line 55", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383377936", "createdAt": "2020-02-24T16:38:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"text/plain\");\n+\n+        Assert.assertTrue(\"* must match with text/plain\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_image() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"image/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"image/* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/webp\");\n+\n+        Assert.assertTrue(\"image/* must match with image/webp\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/png\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0NlrOFtniIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0NlrOFtniIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3Nzk1NA==", "bodyText": "Issue found: The String literal \"/\" appears 4 times in this file; the first occurrence is on line 32", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383377954", "createdAt": "2020-02-24T16:38:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/BaseTypeToContentTypeStrategyResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0N1rOFtniMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0N1rOFtniMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3Nzk2OA==", "bodyText": "Issue found: Use block level rather than method level synchronization", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383377968", "createdAt": "2020-02-24T16:38:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/BaseTypeToContentTypeStrategyResolver.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Subscribe Strategies to resolve from base types a content type\n+ * and get the strategy for a set of arguments if applies\n+ * @author jsanca\n+ */\n+public class BaseTypeToContentTypeStrategyResolver {\n+\n+    private volatile Map<BaseContentType, BaseTypeToContentTypeStrategy> strategiesMap = this.getDefaultStrategies();\n+\n+    private  Map<BaseContentType, BaseTypeToContentTypeStrategy> getDefaultStrategies() {\n+\n+        final ImmutableMap.Builder<BaseContentType, BaseTypeToContentTypeStrategy> builder =\n+                new ImmutableMap.Builder<>();\n+\n+        builder.put(BaseContentType.DOTASSET, new DotAssetBaseTypeToContentTypeStrategyImpl());\n+\n+        return builder.build();\n+    }\n+\n+\n+    public synchronized void subscribe (final BaseContentType baseContentType, final BaseTypeToContentTypeStrategy strategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0OFrOFtniOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0OFrOFtniOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3Nzk3OQ==", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getMimeType': the method is declared in an interface type", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383377979", "createdAt": "2020-02-24T16:38:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -322,8 +322,23 @@\n      */\n     public void cleanThumbnailsFromFileAsset(IFileAsset fileAsset);\n \n+\t/**\n+\t * Tries to determine the mime type from a since file path, @{@link FileAsset#UNKNOWN_MIME_TYPE} if not found\n+\t * For a more powerful but also more expensive version see {@link #getMimeType(File)}\n+\t * @param filename {@link String}\n+\t * @return String mime type\n+\t */\n \tpublic String getMimeType (String filename);\n \n+\t/**\n+\t * Tries to determine the mime type from a binary,  @{@link FileAsset#UNKNOWN_MIME_TYPE} if not found\n+\t * This is a more poweful and also more expensive version of {@link #getMimeType(String)}\n+\t * since it uses more methods to figure out/fallbacks the mime type\n+\t * @param binary {@link File}\n+\t * @return String\n+\t */\n+\tpublic String getMimeType (final File binary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDI4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0OVrOFtniSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo0OVrOFtniSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3Nzk5NA==", "bodyText": "Issue found: The String literal \"application/*\" appears 4 times in this file; the first occurrence is on line 67", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383377994", "createdAt": "2020-02-24T16:38:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"text/plain\");\n+\n+        Assert.assertTrue(\"* must match with text/plain\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_image() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"image/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"image/* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/webp\");\n+\n+        Assert.assertTrue(\"image/* must match with image/webp\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/png\");\n+\n+        Assert.assertTrue(\"image/* must match with image/png\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"application/vnd.hzn-3d-crossword\");\n+\n+        Assert.assertFalse(\"image/* must not match with application/vnd.hzn-3d-crossword\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_application() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"application/*\", \"application/vnd.hzn-3d-crossword\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1MVrOFtniWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1MVrOFtniWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODAwOQ==", "bodyText": "Issue found: The String literal \"text/*\" appears 4 times in this file; the first occurrence is on line 87", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378009", "createdAt": "2020-02-24T16:38:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"text/plain\");\n+\n+        Assert.assertTrue(\"* must match with text/plain\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_image() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"image/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"image/* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/webp\");\n+\n+        Assert.assertTrue(\"image/* must match with image/webp\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/png\");\n+\n+        Assert.assertTrue(\"image/* must match with image/png\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"application/vnd.hzn-3d-crossword\");\n+\n+        Assert.assertFalse(\"image/* must not match with application/vnd.hzn-3d-crossword\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_application() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"application/*\", \"application/vnd.hzn-3d-crossword\");\n+\n+        Assert.assertTrue(\"application/* must match with application/vnd.hzn-3d-crossword\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"application/x-7z-compressed\");\n+\n+        Assert.assertTrue(\"application/* must match with application/x-7z-compressed\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"application/* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"image/png\");\n+\n+        Assert.assertFalse(\"application/* must not match with image/png\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_text() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"text/*\", \"text/x-asm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/workflow/WorkflowResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1MlrOFtniaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1MlrOFtniaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODAyNA==", "bodyText": "Issue found: Avoid using implementation types like 'LinkedHashSet'; use the interface instead", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378024", "createdAt": "2020-02-24T16:38:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/workflow/WorkflowResource.java", "diffHunk": "@@ -1779,11 +1779,17 @@ private void validateMultiPartContent (final Map<String, Object> contentMap,\n         return binaryFields.size() <= binaryFileSize? binaryFields: binaryFields.subList(0, binaryFields.size());\n     }\n \n+    private String getContentTypeInode (final Map<String, Object> contentMap, final User user, final List<File> binaryFiles) {\n+\n+        this.contentHelper.checkOrSetContentType(contentMap, user, binaryFiles);\n+        return MapToContentletPopulator.INSTANCE.getContentTypeInode(contentMap);\n+    }\n+\n     private void processFiles(final Map<String, Object> contentMap, final List<File> binaryFiles,\n-                              final LinkedHashSet<String> argBinaryFields) throws DotDataException, DotSecurityException {\n+                              final LinkedHashSet<String> argBinaryFields, final User user) throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/DotAssetAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NFrOFtnidA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NFrOFtnidA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODAzNg==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'com.dotcms.contenttype.model.field.Field' due to existing import 'com.dotcms.contenttype.model.field.Field'", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378036", "createdAt": "2020-02-24T16:38:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/DotAssetAPITest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.dotcms.contenttype.test;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.ConfigTestHelper;\n+import com.dotcms.util.TestMediaCreator;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class DotAssetAPITest extends ContentTypeBaseTest  {\n+\n+    @Test\n+    public void test_try_match () throws Exception {\n+\n+        final Host host = APILocator.systemHost();\n+        final Tuple2<Field, ContentType> fieldDotVideoAssetContentType = this.createDotAssetContentType(host,\n+                \"video/*\", \"videoDotAsset\" + System.currentTimeMillis());\n+\n+        final Tuple2<Field, ContentType> fieldDotTextAssetContentType = this.createDotAssetContentType(host,\n+                \"text/*\", \"textDotAsset\" + System.currentTimeMillis());\n+\n+        final Tuple2<Field, ContentType> fieldDotimageAssetContentType = this.createDotAssetContentType(host,\n+                \"image/*\", \"imageDotAsset\" + System.currentTimeMillis());\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"fileTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test hi this a test longer than ten characters\");\n+\n+        Optional<ContentType> contentTypeOpt = Optional.empty();\n+\n+        final File tempMovieTestFile = new File(ConfigTestHelper.getPathToTestResource(\"images/testmovie.mov\"));\n+        contentTypeOpt = APILocator.getDotAssetAPI().tryMatch(\n+                tempMovieTestFile, host, APILocator.systemUser());\n+\n+        assertTrue(contentTypeOpt.isPresent());\n+        assertEquals(fieldDotVideoAssetContentType._2().variable(), contentTypeOpt.get().variable());\n+\n+        contentTypeOpt = APILocator.getDotAssetAPI().tryMatch(\n+                tempTestFile, host, APILocator.systemUser());\n+\n+        assertTrue(contentTypeOpt.isPresent());\n+        assertEquals(fieldDotTextAssetContentType._2().variable(), contentTypeOpt.get().variable());\n+\n+        final File tempImageTestFile = TestMediaCreator.createPNG();\n+        contentTypeOpt = APILocator.getDotAssetAPI().tryMatch(\n+                tempImageTestFile, host, APILocator.systemUser());\n+\n+        assertTrue(contentTypeOpt.isPresent());\n+        assertEquals(fieldDotimageAssetContentType._2().variable(), contentTypeOpt.get().variable());\n+\n+        final File tempImageTestFile2 = TestMediaCreator.createJPEG();\n+        contentTypeOpt = APILocator.getDotAssetAPI().tryMatch(\n+                tempImageTestFile2, host, APILocator.systemUser());\n+\n+        assertTrue(contentTypeOpt.isPresent());\n+        assertEquals(fieldDotimageAssetContentType._2().variable(), contentTypeOpt.get().variable());\n+\n+    }\n+\n+    private Tuple2<Field, ContentType> createDotAssetContentType (final Host host, final String accept, final String variable) throws DotSecurityException, DotDataException {\n+\n+        final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        ContentType dotAssetContentType     = contentTypeAPI\n+                .save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(FolderAPI.SYSTEM_FOLDER)\n+                        .host(host.getIdentifier()).name(variable)\n+                        .owner(user.getUserId()).build());\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NVrOFtnigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NVrOFtnigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODA0OA==", "bodyText": "Issue found: The String literal \"text/csv\" appears 4 times in this file; the first occurrence is on line 95", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378048", "createdAt": "2020-02-24T16:38:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"text/plain\");\n+\n+        Assert.assertTrue(\"* must match with text/plain\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_image() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"image/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"image/* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/webp\");\n+\n+        Assert.assertTrue(\"image/* must match with image/webp\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"image/png\");\n+\n+        Assert.assertTrue(\"image/* must match with image/png\", match);\n+\n+        match = MimeTypeUtils.match(\"image/*\", \"application/vnd.hzn-3d-crossword\");\n+\n+        Assert.assertFalse(\"image/* must not match with application/vnd.hzn-3d-crossword\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_application() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"application/*\", \"application/vnd.hzn-3d-crossword\");\n+\n+        Assert.assertTrue(\"application/* must match with application/vnd.hzn-3d-crossword\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"application/x-7z-compressed\");\n+\n+        Assert.assertTrue(\"application/* must match with application/x-7z-compressed\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"application/* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"application/*\", \"image/png\");\n+\n+        Assert.assertFalse(\"application/* must not match with image/png\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_text() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"text/*\", \"text/x-asm\");\n+\n+        Assert.assertTrue(\"text/* must match with text/x-asm\", match);\n+\n+        match = MimeTypeUtils.match(\"text/*\", \"text/css\");\n+\n+        Assert.assertTrue(\"text/* must match with text/css\", match);\n+\n+        match = MimeTypeUtils.match(\"text/*\", \"text/csv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NlrOFtnijQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1NlrOFtnijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODA2MQ==", "bodyText": "Issue found: The String literal \"image/*\" appears 4 times in this file; the first occurrence is on line 47", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378061", "createdAt": "2020-02-24T16:38:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -25,6 +26,122 @@ public static void prepare() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n     }\n \n+    @Test\n+    public void test_match_MimeType_all() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"*/*\", \"image/jpeg\");\n+\n+        Assert.assertTrue(\"* must match with image/jpeg\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"application/pdf\");\n+\n+        Assert.assertTrue(\"* must match with application/pdf\", match);\n+\n+        match = MimeTypeUtils.match(\"*/*\", \"text/plain\");\n+\n+        Assert.assertTrue(\"* must match with text/plain\", match);\n+    }\n+\n+    @Test\n+    public void test_match_MimeType_partial_image() throws IOException {\n+\n+        boolean match = MimeTypeUtils.match(\"image/*\", \"image/jpeg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/DotAssetAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1N1rOFtnimg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1N1rOFtnimg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODA3NA==", "bodyText": "Issue found: The user-supplied array 'mimeTypeFieldVariables' is stored directly.", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378074", "createdAt": "2020-02-24T16:38:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/DotAssetAPIImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.util.MimeTypeUtils;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Default implementation\n+ * @author jsanca\n+ */\n+public class DotAssetAPIImpl implements DotAssetAPI {\n+\n+    @Override\n+    public Optional<ContentType> tryMatch(final File file,final  Host currentHost,final  User user) throws DotDataException, DotSecurityException {\n+\n+        return this.tryMatch(APILocator.getFileAssetAPI().getMimeType(file), currentHost, user);\n+    }\n+\n+    @Override\n+    public Optional<ContentType> tryMatch(final String mimeType, final Host currentHost, final User user) throws DotSecurityException, DotDataException {\n+\n+        final List<ContentType> dotAssetContentTypes = APILocator.getContentTypeAPI(user).findByType(BaseContentType.DOTASSET);\n+\n+        if (UtilMethods.isSet(dotAssetContentTypes)) {\n+\n+            // Stores the content type indexed by mimetypes, on each index stores the subsets\n+            // 0:Exact/on Site, 1:Exact/SYSTEM_HOST, 2:Partial Wildcard/on Site, 3:Partial Wildcard/SYSTEM_HOST,\n+            // 4:Total Wildcard (or null)/on Site, 5:Total Wildcard (or null)/SYSTEM_HOST\n+            final Map<String, ContentType>[] mimeTypeMappingArray = new Map [6];\n+\n+            dotAssetContentTypes.stream()\n+                    .filter(contentType -> isSystemHostOrCurrentHost(contentType, currentHost)) // remove the ones that are not system host or current host\n+                    .map(this::mapToContentTypeMimeType).forEach(contentTypeMimeType -> {\n+\n+                for (final String mimeTypeItem : contentTypeMimeType.mimeTypeFieldVariables) {\n+\n+                    if (ALL_MIME_TYPE.equals(mimeTypeItem)) {\n+\n+                        this.getMap(mimeTypeMappingArray, contentTypeMimeType.systemHost?5:4).put(mimeTypeItem, contentTypeMimeType.contentType);\n+                    } else if (mimeTypeItem.endsWith(PARTIAL_MIME_TYPE)) {\n+\n+                        this.getMap(mimeTypeMappingArray, contentTypeMimeType.systemHost?3:2).put(mimeTypeItem, contentTypeMimeType.contentType);\n+                    } else {\n+\n+                        this.getMap(mimeTypeMappingArray, contentTypeMimeType.systemHost?1:0).put(mimeTypeItem, contentTypeMimeType.contentType);\n+                    }\n+                }\n+            });\n+\n+            return findDotAssetContentType (mimeType, mimeTypeMappingArray);\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    private Optional<ContentType> findDotAssetContentType(final String mimeType,\n+                                                          final Map<String, ContentType>... mimeTypeMappingArray) {\n+\n+        for (final Map<String, ContentType> mimeTypeContentTypeMap : mimeTypeMappingArray) {\n+\n+            if (null != mimeTypeContentTypeMap) {\n+                for (final Map.Entry<String, ContentType> entry : mimeTypeContentTypeMap.entrySet()) {\n+\n+                    if (MimeTypeUtils.match(entry.getKey(), mimeType)) {\n+\n+                        return Optional.ofNullable(entry.getValue());\n+                    }\n+                }\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    private Map<String, ContentType> getMap(final Map<String, ContentType>[] mimeTypeMappingArray, final int index) {\n+\n+        if (null == mimeTypeMappingArray[index]) {\n+\n+            mimeTypeMappingArray[index] = new HashMap<>();\n+        }\n+\n+        return mimeTypeMappingArray[index];\n+    }\n+\n+    private ContentTypeMimeType mapToContentTypeMimeType(final ContentType contentType) {\n+\n+        final String systemHostId          = APILocator.systemHost().getIdentifier();\n+        final String contentTypeHostId     = contentType.host();\n+        final boolean isSystemHost         = null == contentTypeHostId || contentTypeHostId.equals(systemHostId);\n+        final Map<String, Field>  fieldMap = contentType.fieldMap();\n+        String [] mimeTypeFieldVariables   = new String [] { ALL_MIME_TYPE };\n+        final List<FieldVariable> fieldVariables = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR).fieldVariables();\n+        if (UtilMethods.isSet(fieldVariables)) {\n+\n+            final Optional<FieldVariable> fieldVariableOpt = fieldVariables.stream().filter(fieldVariable ->\n+                    BinaryField.ALLOWED_FILE_TYPES.equalsIgnoreCase(fieldVariable.key())).findFirst();\n+\n+            if (fieldVariableOpt.isPresent() && UtilMethods.isSet(fieldVariableOpt.get().value())) {\n+\n+                mimeTypeFieldVariables = fieldVariableOpt.get().value().split(StringPool.COMMA);\n+            }\n+        }\n+\n+        return new ContentTypeMimeType(mimeTypeFieldVariables, contentType, isSystemHost);\n+    }\n+\n+    private boolean isSystemHostOrCurrentHost (final ContentType contentType, final Host currentHost) {\n+\n+        final String contentTypeHostId = contentType.host();\n+        final String systemHostId      = APILocator.systemHost().getIdentifier();\n+        return null == contentTypeHostId ||\n+                contentTypeHostId.equals(currentHost.getIdentifier()) || contentTypeHostId.equals(systemHostId);\n+\n+    }\n+\n+    private class ContentTypeMimeType {\n+\n+        private final boolean systemHost;\n+        private final String [] mimeTypeFieldVariables;\n+        private final ContentType contentType;\n+\n+        public ContentTypeMimeType(final String [] mimeTypeFieldVariables,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzkzMDg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/TestMediaCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1OVrOFtnipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozODo1OVrOFtnipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3ODA4NQ==", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/18007#discussion_r383378085", "createdAt": "2020-02-24T16:38:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/TestMediaCreator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.dotcms.util;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+\n+public class TestMediaCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9760343fd70a1378b279742919f646bc683097bc"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2565, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}