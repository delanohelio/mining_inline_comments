{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTAwNzI4", "number": 19103, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1M1rOEYjo9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NlrOEYjpBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg1MjA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1M1rOHA9Nqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1M1rOHA9Nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk3MA==", "bodyText": "Codacy found an issue: Perhaps 'awsCredentials' could be replaced by a local variable.", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764970", "createdAt": "2020-08-14T17:41:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg1MjA2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NFrOHA9NsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NFrOHA9NsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk3Ng==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'aFile': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764976", "createdAt": "2020-08-14T17:41:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;\n+  private final AmazonRekognition client;\n+\n+  public RekognitionAPI(final String awsKey, final String awsSecret) {\n+\n+    this.awsCredentials = new BasicAWSCredentials(awsKey, awsSecret);\n+    \n+    this.client = AmazonRekognitionClientBuilder\n+                    .standard()\n+                    .withRegion(Regions.US_WEST_2)\n+                    .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))\n+                    .build();\n+\n+  }\n+\n+  public List<String> generateTags(final File file, final int maxLabels, final float minConfidence) throws IOException {\n+\n+    try (final RandomAccessFile aFile = new RandomAccessFile(file.getAbsolutePath(), \"r\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg1MjEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rekognition/actionlet/RekognitionActionlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NVrOHA9Nuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NVrOHA9Nuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk4Nw==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764987", "createdAt": "2020-08-14T17:41:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/actionlet/RekognitionActionlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.dotcms.rekognition.actionlet;\n+\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.CacheLocator;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.TagField;\n+import com.dotcms.rekognition.api.RekognitionAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.db.HibernateUtil;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.image.filter.ResizeImageFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.workflows.actionlet.WorkFlowActionlet;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.tag.business.TagAPI;\n+import com.dotmarketing.tag.model.Tag;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import io.vavr.control.Try;\n+\n+public class RekognitionActionlet extends WorkFlowActionlet {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final static int IMAGE_MAX_LENGTH = 5242879;\n+    private final static String TAGGED_BY_AWS = \"TAGGED_BY_AWS\";\n+    public static final String AMAZON_REKOGNITION_APP_CONFIG_KEY = \"dotAmazonRekognition-config\";\n+    public static final String ACCESS_KEY_VAR = \"accessKey\";\n+    public static final String SECRET_ACCESS_KEY_VAR = \"secretAccessKey\";\n+    public static final String MAX_LABELS_VAR = \"maxLabels\";\n+    public static final String MIN_CONFIDENCE_VAR = \"minConfidence\";\n+\n+    private final TagAPI tagAPI = APILocator.getTagAPI();\n+\n+    @Override\n+    public List<WorkflowActionletParameter> getParameters() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Auto Tag Images - AWS\";\n+    }\n+\n+    @Override\n+    public String getHowTo() {\n+        return \"This Actionlet will automatically tag images using Amazon's Rekognition AI engine. This actionlet needs be after the Save Actionlet\";\n+    }\n+\n+    @Override\n+    public void executeAction(final WorkflowProcessor processor, final Map<String, WorkflowActionClassParameter> params)\n+            throws WorkflowActionFailureException {\n+\n+        final Contentlet contentlet = processor.getContentlet();\n+        Optional<Field> tagFieldOpt = null;\n+        Optional<File> imageOpt     = null;\n+        Optional<AppSecrets> appSecrets = null;\n+        File image;\n+        List<Field> fields;\n+        try {\n+\n+            fields = APILocator.getContentTypeAPI(processor.getUser()).find(contentlet.getContentTypeId()).fields();\n+            tagFieldOpt = fields.stream().filter(TagField.class::isInstance).findFirst();\n+            //Check if there is a Tag Field, if not there is nothing to do here\n+            if (!tagFieldOpt.isPresent()) {\n+                Logger.warn(this,\"There is no Tag Field in the Content Type\");\n+                return;\n+            }\n+\n+            final List<Tag> tags = tagAPI.getTagsByInode(contentlet.getInode());\n+            //Check if there is already a Tag with the name TAGGED_BY_AWS, if there is Tags were already generated and nothing to do here\n+            if (tags.stream().anyMatch(tag -> TAGGED_BY_AWS.equalsIgnoreCase(tag.getTagName()))) {\n+                Logger.warn(this,\"Tags already generated\");\n+                return;\n+            }\n+\n+            imageOpt = fields.stream().filter(BinaryField.class::isInstance)\n+                    .map(field -> Try.of(()->contentlet.getBinary(field.variable())).getOrNull())\n+                    .filter(img -> null != img && UtilMethods.isImage(img.getAbsolutePath()))\n+                    .findFirst();\n+\n+            //Check if there is a Binary Field and if there is an Image set in it, if not there is nothing to do here\n+            if (!imageOpt.isPresent()) {\n+                Logger.warn(this,\"There is no Binary Field or an Image is not set in it\");\n+                return;\n+            }\n+            image = imageOpt.get();\n+\n+            //Get Values from Secrets\n+            final Host host = Try.of(() -> APILocator.getHostAPI().find(contentlet.getHost(), APILocator.systemUser(),false)).getOrElse(APILocator.systemHost());\n+            appSecrets = APILocator.getAppsAPI().getSecrets(AMAZON_REKOGNITION_APP_CONFIG_KEY,true,host,APILocator.systemUser());\n+\n+            if(!appSecrets.isPresent()) {\n+                Logger.warn(RekognitionActionlet.class,\"There is no config set, please set it via Apps Tool\");\n+                return;\n+            }\n+\n+            final String accessKey = appSecrets.get().getSecrets().get(ACCESS_KEY_VAR).getString();\n+            final String secretAccessKey = appSecrets.get().getSecrets().get(SECRET_ACCESS_KEY_VAR).getString();\n+            final int maxLabels = Integer.parseInt(appSecrets.get().getSecrets().get(MAX_LABELS_VAR).getString());\n+            final float minConfidence = Float.parseFloat(appSecrets.get().getSecrets().get(MIN_CONFIDENCE_VAR).getString());\n+            //End Get Values from Secrets\n+\n+            if (image.length() > IMAGE_MAX_LENGTH) {\n+\n+                final Map<String, String[]> args = new HashMap<>();\n+                args.put(\"resize_w\", new String[]{\"1000\"});\n+                image = new ResizeImageFilter().runFilter(image, args);\n+            }\n+\n+            final List<String> awsTags = new RekognitionAPI(accessKey,secretAccessKey).generateTags(image, maxLabels, minConfidence);\n+\n+            Logger.debug(this,\"Tags generated by AWS: \" + awsTags.toString());\n+\n+            awsTags.add(TAGGED_BY_AWS);\n+            for (final String tag : awsTags) {\n+                tagAPI.addContentletTagInode(tag, contentlet.getInode(), contentlet.getHost(), tagFieldOpt.get().variable());\n+            }\n+\n+            HibernateUtil.addCommitListener(contentlet.getInode(),\n+                    ()->this.refresh(contentlet));\n+\n+            CacheLocator.getContentletCache().remove(contentlet);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MTg1MjIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NlrOHA9NyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NlrOHA9NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NTAwMA==", "bodyText": "Codacy found an issue: Ensure that resources like this FileChannel object are closed after use", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470765000", "createdAt": "2020-08-14T17:41:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;\n+  private final AmazonRekognition client;\n+\n+  public RekognitionAPI(final String awsKey, final String awsSecret) {\n+\n+    this.awsCredentials = new BasicAWSCredentials(awsKey, awsSecret);\n+    \n+    this.client = AmazonRekognitionClientBuilder\n+                    .standard()\n+                    .withRegion(Regions.US_WEST_2)\n+                    .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))\n+                    .build();\n+\n+  }\n+\n+  public List<String> generateTags(final File file, final int maxLabels, final float minConfidence) throws IOException {\n+\n+    try (final RandomAccessFile aFile = new RandomAccessFile(file.getAbsolutePath(), \"r\")) {\n+\n+      final FileChannel inChannel = aFile.getChannel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1979, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}