{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNTM0NDYz", "number": 18398, "title": "#18397 fixes ContentletToMapTransformer bottleneck", "bodyText": "Fixes #18397", "createdAt": "2020-04-30T14:03:07Z", "url": "https://github.com/dotCMS/core/pull/18398", "merged": true, "mergeCommit": {"oid": "c7905c985e6d0f821c6c939528216a593498708b"}, "closed": true, "closedAt": "2020-04-30T19:19:30Z", "author": {"login": "wezell"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcctj6dgH2gAyNDExNTM0NDYzOmM0OGM0YmE0OGRhN2Y1YTQxYzA4YzNkMGZiYzQ0YWJhZDE1MGZhYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccy5Y9AFqTQwMzg0NDIyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c48c4ba48da7f5a41c08c3d0fbc44abad150fac2", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/c48c4ba48da7f5a41c08c3d0fbc44abad150fac2", "committedDate": "2020-04-30T14:00:55Z", "message": "#18397 fixes ContentletToMapTransformer bottleneck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/7bf746182fee4f7307f87812036ca17600c23c24", "committedDate": "2020-04-30T14:12:19Z", "message": "#18397 better tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY3OTg4", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403567988", "createdAt": "2020-04-30T14:20:39Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozOVrOGOrjUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDozOVrOGOrjUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgwMA==", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046800", "createdAt": "2020-04-30T14:20:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDAz", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568003", "createdAt": "2020-04-30T14:20:40Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MFrOGOrjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MFrOGOrjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgxMw==", "bodyText": "Issue found: Local variable 'type' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046813", "createdAt": "2020-04-30T14:20:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDIz", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568023", "createdAt": "2020-04-30T14:20:41Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgyNw==", "bodyText": "Issue found: Local variable 'constants' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046827", "createdAt": "2020-04-30T14:20:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDQx", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568041", "createdAt": "2020-04-30T14:20:42Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0MlrOGOrjew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg0Mw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046843", "createdAt": "2020-04-30T14:20:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDU0", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568054", "createdAt": "2020-04-30T14:20:43Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NFrOGOrjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NFrOGOrjhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg1NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046854", "createdAt": "2020-04-30T14:20:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDcw", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568070", "createdAt": "2020-04-30T14:20:45Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NVrOGOrjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NVrOGOrjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg2NA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046864", "createdAt": "2020-04-30T14:20:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MDgz", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568083", "createdAt": "2020-04-30T14:20:46Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NlrOGOrjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0NlrOGOrjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg3Mw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046873", "createdAt": "2020-04-30T14:20:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MTAw", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568100", "createdAt": "2020-04-30T14:20:47Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0N1rOGOrjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0N1rOGOrjqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg4OA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046888", "createdAt": "2020-04-30T14:20:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MTMz", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568133", "createdAt": "2020-04-30T14:20:48Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OFrOGOrjxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OFrOGOrjxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkxNg==", "bodyText": "Issue found: Parameter 'type' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046916", "createdAt": "2020-04-30T14:20:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+        // test that Immutables work the same way\n+        oldWayFields = oldWayOfGettingFields(type, ImmutableTextField.class);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+\n+    }\n+\n+\n+\n+    private List<Field> oldWayOfGettingFields(ContentType type, final Class<? extends Field> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MTQ1", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568145", "createdAt": "2020-04-30T14:20:49Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OVrOGOrjzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo0OVrOGOrjzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkyNg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046926", "createdAt": "2020-04-30T14:20:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MTY2", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568166", "createdAt": "2020-04-30T14:20:50Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MFrOGOrj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MFrOGOrj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk0Mg==", "bodyText": "Issue found: Local variable 'type' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046942", "createdAt": "2020-04-30T14:20:50Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MTc2", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568176", "createdAt": "2020-04-30T14:20:51Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MVrOGOrj6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MVrOGOrj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk1NQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046955", "createdAt": "2020-04-30T14:20:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MjAx", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568201", "createdAt": "2020-04-30T14:20:52Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MlrOGOrkAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1MlrOGOrkAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk3Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046977", "createdAt": "2020-04-30T14:20:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MjEz", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568213", "createdAt": "2020-04-30T14:20:53Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1M1rOGOrkCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1M1rOGOrkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk4Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046987", "createdAt": "2020-04-30T14:20:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MjIy", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568222", "createdAt": "2020-04-30T14:20:54Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NFrOGOrkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NFrOGOrkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk5NA==", "bodyText": "Issue found: Local variable 'immutableConstants' could be declared final", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046994", "createdAt": "2020-04-30T14:20:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MjM1", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568235", "createdAt": "2020-04-30T14:20:55Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NVrOGOrkHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NVrOGOrkHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAwNw==", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047007", "createdAt": "2020-04-30T14:20:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTY4MjQ2", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403568246", "createdAt": "2020-04-30T14:20:56Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NlrOGOrkJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMDo1NlrOGOrkJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAxNA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047014", "createdAt": "2020-04-30T14:20:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTczODM0", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403573834", "createdAt": "2020-04-30T14:26:36Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNjAwMTM2", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403600136", "createdAt": "2020-04-30T14:54:02Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODQ0MjIx", "url": "https://github.com/dotCMS/core/pull/18398#pullrequestreview-403844221", "createdAt": "2020-04-30T20:13:55Z", "commit": {"oid": "7bf746182fee4f7307f87812036ca17600c23c24"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1048, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}