{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODYyNjYx", "number": 18985, "title": "Issue 18962", "bodyText": "Move EMA plugin into core and make it work using apps.\nMost of the code is the EMA plugin code that already existed here https://github.com/dotcms-plugins/com.dotcms.ema just made some changes to make it work using apps, code changed:\n\n\nNew method existsConfigurationto check if there is an app configuration for the given host or for the System_Host https://github.com/dotCMS/core/compare/issue-18962?expand=1#diff-9e9702bfa4cd68884bc8c5a787ec82b7R199\n\n\nRefactor proxyUrl to get the secret value https://github.com/dotCMS/core/compare/issue-18962?expand=1#diff-9e9702bfa4cd68884bc8c5a787ec82b7R133\n\n\nAdded dotema-config.yml.", "createdAt": "2020-07-28T14:50:52Z", "url": "https://github.com/dotCMS/core/pull/18985", "merged": true, "mergeCommit": {"oid": "f1989f65e6f1fbd6639b9c9d4080c90327fa4b04"}, "closed": true, "closedAt": "2020-08-03T15:48:28Z", "author": {"login": "erickgonzalez"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc34uYuAH2gAyNDU3ODYyNjYxOjQzOWUyMTJiMmE2OGMwYmM3NzY0MTdhNTA0MWQxOGJhZjBjY2IzNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6WSO7gFqTQ1OTI4MDQ3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "439e212b2a68c0bc776417a5041d18baf0ccb35c", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/439e212b2a68c0bc776417a5041d18baf0ccb35c", "committedDate": "2020-07-24T00:17:16Z", "message": "#18962 EMA plugin code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d59d3bf735a9fc75b64963f552b14bd70a6ef88", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/4d59d3bf735a9fc75b64963f552b14bd70a6ef88", "committedDate": "2020-07-27T15:51:34Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7295c1f1111e91fc303de5b9cf92819a768e433c", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/7295c1f1111e91fc303de5b9cf92819a768e433c", "committedDate": "2020-07-28T14:41:09Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c741416b451f804a317e3d254b40debe521d904", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/3c741416b451f804a317e3d254b40debe521d904", "committedDate": "2020-07-28T14:43:46Z", "message": "#18962 make EMA works with apps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/19c34d9637447586ecdd20c68065aed03a42800d", "committedDate": "2020-07-28T14:44:32Z", "message": "#18962 IT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzMwNzE4", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-456730718", "createdAt": "2020-07-28T15:05:31Z", "commit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNTozMVrOG4ROvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTowNTozMVrOG4ROvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTc0Mw==", "bodyText": "Can't we just use com.dotmarketing.business.web.HostWebAPI#getCurrentHost(javax.servlet.http.HttpServletRequest, com.liferay.portal.model.User) ?", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r461655743", "createdAt": "2020-07-28T15:05:31Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) throws IOException {\n+\n+        final Host currentHost = getCurrentHost(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = getCurrentHost(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+                \n+                String responseStr = new String();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {\n+                    responseStr = new String(pResponse.getResponse());\n+                }else {\n+                    responseStr+=\"<html><body>\";\n+                    responseStr+=\"<h3>Unable to connect with the rendering engine</h3>\";\n+                    responseStr+=\"<br><div style='display:inline-block;width:80px'>Trying: </div><b>\" + proxyUrl.get()  + \"</b>\";\n+                    responseStr+=\"<br><div style='display:inline-block;width:80px'>Got:</div><b>\" + pResponse.getStatus() + \"</b>\";\n+                    responseStr+=\"<hr>\";\n+                    responseStr+=\"<h4>Headers</h4>\";\n+                    responseStr+=\"<table border=1 style='min-width:500px'>\";\n+\n+                    for(Header header : pResponse.getHeaders()) {\n+                      responseStr+=\"<tr><td style='font-weight:bold;padding:5px;'><pre>\" + header.getName() + \"</pre></td><td><pre>\" + header.getValue() + \"</td></tr>\";\n+                    }\n+                    responseStr+=\"</table>\";\n+                    \n+                    responseStr+=\"<p>The Json Payload, POSTing as Content-Type:'application/x-www-form-urlencoded' with form param <b>dotPageData</b>, has been printed in the logs.</p>\";\n+                    responseStr+=\"</body></html>\";\n+\n+                }\n+\n+                json.getJSONObject(\"entity\").getJSONObject(\"page\").put(\"rendered\", responseStr);\n+                json.getJSONObject(\"entity\").getJSONObject(\"page\").put(\"remoteRendered\", true);\n+                response.setContentType(\"application/json\");\n+\n+                response.getWriter().write(json.toString());\n+            }\n+        } catch (Exception e) {\n+            Logger.error(this, e.getMessage());\n+        }\n+\n+        return true;\n+    }\n+\n+\n+    /**\n+     * Gets the proxyUrl for the given host\n+     * @param currentHost current Host to get the proxyUrl value\n+     * @return Optional String of the proxyUrl, if there is not found or an error is thrown returns an empty\n+     */\n+    private Optional<String> proxyUrl(final Host currentHost) {\n+        AppSecrets appSecrets = null;\n+\n+        try{\n+            appSecrets = APILocator.getAppsAPI().getSecrets(EMA_APP_CONFIG_KEY,\n+                    true, currentHost, APILocator.systemUser()).get();\n+            return appSecrets.getSecrets().containsKey(PROXY_EDIT_MODE_URL_VAR)?\n+                    Optional.ofNullable(appSecrets.getSecrets().get(PROXY_EDIT_MODE_URL_VAR).getString()) : Optional.empty();\n+\n+        } catch (DotSecurityException | DotDataException e) {\n+            Logger.error(this, e.getMessage());\n+            return Optional.empty();\n+        } finally {\n+            if(UtilMethods.isSet(appSecrets)){\n+                appSecrets.destroy();\n+            }\n+        }\n+    }\n+\n+\n+    @CloseDBIfOpened\n+    private Host getCurrentHost(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzYwNDk1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-456760495", "createdAt": "2020-07-28T15:37:36Z", "commit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTozNzozNlrOG4So5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTozNzozNlrOG4So5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY3ODgyMg==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r461678822", "createdAt": "2020-07-28T15:37:36Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+public class EMAWebInterceptor  implements WebInterceptor{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzYyMjYw", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-456762260", "createdAt": "2020-07-28T15:39:31Z", "commit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTozOTozMVrOG4SuKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTozOTozMVrOG4SuKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY4MDE2OA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r461680168", "createdAt": "2020-07-28T15:39:31Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) throws IOException {\n+\n+        final Host currentHost = getCurrentHost(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = getCurrentHost(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+                \n+                String responseStr = new String();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {\n+                    responseStr = new String(pResponse.getResponse());\n+                }else {\n+                    responseStr+=\"<html><body>\";\n+                    responseStr+=\"<h3>Unable to connect with the rendering engine</h3>\";\n+                    responseStr+=\"<br><div style='display:inline-block;width:80px'>Trying: </div><b>\" + proxyUrl.get()  + \"</b>\";\n+                    responseStr+=\"<br><div style='display:inline-block;width:80px'>Got:</div><b>\" + pResponse.getStatus() + \"</b>\";\n+                    responseStr+=\"<hr>\";\n+                    responseStr+=\"<h4>Headers</h4>\";\n+                    responseStr+=\"<table border=1 style='min-width:500px'>\";\n+\n+                    for(Header header : pResponse.getHeaders()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NzY3MzIw", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-456767320", "createdAt": "2020-07-28T15:45:08Z", "commit": {"oid": "19c34d9637447586ecdd20c68065aed03a42800d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2efefd5dd5785fe527f5a7ca169841d5b0462acb", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2efefd5dd5785fe527f5a7ca169841d5b0462acb", "committedDate": "2020-07-28T21:35:10Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18962"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d59011e9a8bbc7e9e94bf2637e9ffaaf52090e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/43d59011e9a8bbc7e9e94bf2637e9ffaaf52090e", "committedDate": "2020-07-28T21:46:45Z", "message": "#18962 feedback changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDU3NjU1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-457057655", "createdAt": "2020-07-28T21:57:14Z", "commit": {"oid": "43d59011e9a8bbc7e9e94bf2637e9ffaaf52090e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539", "committedDate": "2020-07-31T15:42:01Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18962"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMTUw", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280150", "createdAt": "2020-07-31T15:51:04Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNFrOG6NcgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNFrOG6NcgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDg4MQ==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 4 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690881", "createdAt": "2020-07-31T15:51:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+/**\n+ * Intercepts a content managers's request to dotCMS EDIT_MODE in the admin of dotCMS,\n+ * transparently POSTs the dotCMS page API data to the remote site/server (hosted elsewhere) and\n+ * then proxies the remote response back to the dotCMS admin, which allows dotCMS\n+ * to render the EDIT_MODE request in context.\n+ *\n+ * More info on how EMA works https://github.com/dotcms-plugins/com.dotcms.ema#dotcms-edit-mode-anywhere---ema\n+ */\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+\n+                final StringBuilder responseStringBuilder = new StringBuilder();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {\n+                    responseStringBuilder.append(pResponse.getResponse());\n+                }else {\n+                    responseStringBuilder.append(\"<html><body>\")\n+                    .append(\"<h3>Unable to connect with the rendering engine</h3>\")\n+                    .append(\"<br><div style='display:inline-block;width:80px'>Trying: </div><b>\" + proxyUrl.get()  + \"</b>\")\n+                    .append(\"<br><div style='display:inline-block;width:80px'>Got:</div><b>\" + pResponse.getStatus() + \"</b>\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMTY3", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280167", "createdAt": "2020-07-31T15:51:05Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNVrOG6NckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNVrOG6NckA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDg5Ng==", "bodyText": "Codacy found an issue: Avoid variables with short names like os", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690896", "createdAt": "2020-07-31T15:51:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/MockServletOutputStream.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+\n+/**\n+ * A mock Outputstream that will write the output of a servlet to a outputstream\n+ * \n+ * @author will\n+ *\n+ */\n+class MockServletOutputStream extends ServletOutputStream {\n+    final OutputStream os;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMTgw", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280180", "createdAt": "2020-07-31T15:51:06Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNlrOG6Ncmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowNlrOG6Ncmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDkwNw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.io.IOException'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690907", "createdAt": "2020-07-31T15:51:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMTkx", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280191", "createdAt": "2020-07-31T15:51:07Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowN1rOG6NcqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowN1rOG6NcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDkyMA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690920", "createdAt": "2020-07-31T15:51:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 593}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjA2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280206", "createdAt": "2020-07-31T15:51:08Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowOFrOG6Nctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowOFrOG6Nctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDkzNA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690934", "createdAt": "2020-07-31T15:51:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 1076}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjE1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280215", "createdAt": "2020-07-31T15:51:09Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowOVrOG6Ncvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTowOVrOG6Ncvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk0Mg==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690942", "createdAt": "2020-07-31T15:51:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 731}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjI1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280225", "createdAt": "2020-07-31T15:51:10Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxMFrOG6NcxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxMFrOG6NcxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk0OQ==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690949", "createdAt": "2020-07-31T15:51:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, String contentType) {\n+        return send(url, params, METHOD_DELETE, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_DELETE, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, Credentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 1189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjQ2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280246", "createdAt": "2020-07-31T15:51:12Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxMlrOG6Nc1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxMlrOG6Nc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk2NA==", "bodyText": "Codacy found an issue: Avoid variables with short names like m", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690964", "createdAt": "2020-07-31T15:51:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjYy", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280262", "createdAt": "2020-07-31T15:51:13Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxM1rOG6Nc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxM1rOG6Nc4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk3Ng==", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'out'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690976", "createdAt": "2020-07-31T15:51:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/MockHttpCaptureResponse.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import com.dotcms.mock.response.MockResponse;\n+\n+\n+/**\n+ * Proxy for HTTPServletResponse\n+ *\n+ */\n+public class MockHttpCaptureResponse extends HttpServletResponseWrapper implements MockResponse {\n+\n+\n+    ByteArrayOutputStream bout = new ByteArrayOutputStream(4096);\n+    ServletOutputStream out = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjgy", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280282", "createdAt": "2020-07-31T15:51:14Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNFrOG6Nc6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNFrOG6Nc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk4NQ==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690985", "createdAt": "2020-07-31T15:51:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_HEAD, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, String params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendHead(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a head request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendHead(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_HEAD, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, String contentType) {\n+        return send(url, params, METHOD_DELETE, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_DELETE, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, String params) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendDelete(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_DELETE, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a delete request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendDelete(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 1205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMjky", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280292", "createdAt": "2020-07-31T15:51:15Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNVrOG6Nc8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNVrOG6Nc8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MDk5Mg==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463690992", "createdAt": "2020-07-31T15:51:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 577}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzEy", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280312", "createdAt": "2020-07-31T15:51:16Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNlrOG6Nc_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxNlrOG6Nc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTAwNQ==", "bodyText": "Codacy found an issue: Avoid variables with short names like m", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691005", "createdAt": "2020-07-31T15:51:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 264}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzMx", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280331", "createdAt": "2020-07-31T15:51:17Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxN1rOG6NdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxN1rOG6NdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTAxNQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691015", "createdAt": "2020-07-31T15:51:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+/**\n+ * Intercepts a content managers's request to dotCMS EDIT_MODE in the admin of dotCMS,\n+ * transparently POSTs the dotCMS page API data to the remote site/server (hosted elsewhere) and\n+ * then proxies the remote response back to the dotCMS admin, which allows dotCMS\n+ * to render the EDIT_MODE request in context.\n+ *\n+ * More info on how EMA works https://github.com/dotcms-plugins/com.dotcms.ema#dotcms-edit-mode-anywhere---ema\n+ */\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+\n+                final StringBuilder responseStringBuilder = new StringBuilder();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {\n+                    responseStringBuilder.append(pResponse.getResponse());\n+                }else {\n+                    responseStringBuilder.append(\"<html><body>\")\n+                    .append(\"<h3>Unable to connect with the rendering engine</h3>\")\n+                    .append(\"<br><div style='display:inline-block;width:80px'>Trying: </div><b>\" + proxyUrl.get()  + \"</b>\")\n+                    .append(\"<br><div style='display:inline-block;width:80px'>Got:</div><b>\" + pResponse.getStatus() + \"</b>\")\n+                    .append(\"<hr>\")\n+                    .append(\"<h4>Headers</h4>\")\n+                    .append(\"<table border=1 style='min-width:500px'>\");\n+\n+                    for(final Header header : pResponse.getHeaders()) {\n+                        responseStringBuilder.append(\"<tr><td style='font-weight:bold;padding:5px;'><pre>\" + header.getName() + \"</pre></td><td><pre>\" + header.getValue() + \"</td></tr>\");\n+                    }\n+                    responseStringBuilder.append(\"</table>\")\n+                    .append(\"<p>The Json Payload, POSTing as Content-Type:'application/x-www-form-urlencoded' with form param <b>dotPageData</b>, has been printed in the logs.</p>\")\n+                    .append(\"</body></html>\");\n+\n+                }\n+\n+                json.getJSONObject(\"entity\").getJSONObject(\"page\").put(\"rendered\", responseStringBuilder.toString());\n+                json.getJSONObject(\"entity\").getJSONObject(\"page\").put(\"remoteRendered\", true);\n+                response.setContentType(\"application/json\");\n+\n+                response.getWriter().write(json.toString());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzQ2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280346", "createdAt": "2020-07-31T15:51:18Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxOFrOG6NdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxOFrOG6NdDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTAyMg==", "bodyText": "Codacy found an issue: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691022", "createdAt": "2020-07-31T15:51:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.dotcms.ema.proxy;\n+\n+import org.apache.http.Header;\n+import org.apache.http.ProtocolVersion;\n+import org.apache.http.StatusLine;\n+\n+public class ProxyResponse {\n+\n+  /**\n+   * The Response.\n+   */\n+  final private byte[] response;\n+  final private StatusLine status;\n+  final private int responseCode;\n+  final private Header[] headers;\n+\n+  public ProxyResponse(StatusLine status, byte[] out, Header[] headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzUx", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280351", "createdAt": "2020-07-31T15:51:19Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxOVrOG6NdFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToxOVrOG6NdFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTAzMA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691030", "createdAt": "2020-07-31T15:51:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Put a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse putStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_PUT, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_PUT, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, String params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPut(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_PUT, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a put request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPut(String url, Credentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 931}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzY1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280365", "createdAt": "2020-07-31T15:51:20Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyMVrOG6NdHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyMVrOG6NdHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTAzOA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 3 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691038", "createdAt": "2020-07-31T15:51:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+/**\n+ * Intercepts a content managers's request to dotCMS EDIT_MODE in the admin of dotCMS,\n+ * transparently POSTs the dotCMS page API data to the remote site/server (hosted elsewhere) and\n+ * then proxies the remote response back to the dotCMS admin, which allows dotCMS\n+ * to render the EDIT_MODE request in context.\n+ *\n+ * More info on how EMA works https://github.com/dotcms-plugins/com.dotcms.ema#dotcms-edit-mode-anywhere---ema\n+ */\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+\n+                final StringBuilder responseStringBuilder = new StringBuilder();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {\n+                    responseStringBuilder.append(pResponse.getResponse());\n+                }else {\n+                    responseStringBuilder.append(\"<html><body>\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwMzg2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280386", "createdAt": "2020-07-31T15:51:22Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyMlrOG6NdKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyMlrOG6NdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTA0OA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.business.CloseDBIfOpened'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691048", "createdAt": "2020-07-31T15:51:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDAx", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280401", "createdAt": "2020-07-31T15:51:23Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNFrOG6NdNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNFrOG6NdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTA2MA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.WebKeys'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691060", "createdAt": "2020-07-31T15:51:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDEy", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280412", "createdAt": "2020-07-31T15:51:24Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNVrOG6NdQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNVrOG6NdQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTA3Mw==", "bodyText": "Codacy found an issue: Returning 'response' may expose an internal array.", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691073", "createdAt": "2020-07-31T15:51:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.dotcms.ema.proxy;\n+\n+import org.apache.http.Header;\n+import org.apache.http.ProtocolVersion;\n+import org.apache.http.StatusLine;\n+\n+public class ProxyResponse {\n+\n+  /**\n+   * The Response.\n+   */\n+  final private byte[] response;\n+  final private StatusLine status;\n+  final private int responseCode;\n+  final private Header[] headers;\n+\n+  public ProxyResponse(StatusLine status, byte[] out, Header[] headers) {\n+    this.response = out;\n+    this.status = status;\n+    this.responseCode = status.getStatusCode();\n+    this.headers = headers;\n+  }\n+\n+  public ProxyResponse(final int responseCode, byte[] out, Header[] headers) {\n+    this(new StatusLine() {\n+      @Override\n+      public int getStatusCode() {\n+        return responseCode;\n+      }\n+\n+      @Override\n+      public String getReasonPhrase() {\n+        return \"unknown error\";\n+      }\n+\n+      @Override\n+      public ProtocolVersion getProtocolVersion() {\n+        return null;\n+      }\n+    }, out, headers);\n+\n+  }\n+\n+  public byte[] getResponse() {\n+    return this.response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDE2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280416", "createdAt": "2020-07-31T15:51:25Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNVrOG6NdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNVrOG6NdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTA4MQ==", "bodyText": "Codacy found an issue: Avoid variables with short names like m", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691081", "createdAt": "2020-07-31T15:51:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDI1", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280425", "createdAt": "2020-07-31T15:51:26Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNlrOG6NdUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyNlrOG6NdUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTA5MA==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691090", "createdAt": "2020-07-31T15:51:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     * @param contentType - The content type for this request @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_GET, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_GET, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendGet(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendGet(String url) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, String contentType) {\n+        return sendStringData(url, data, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Post a Single String payload to a url. Used to send json or xml data.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse postStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType, Credentials creds) {\n+        return send(url, params, METHOD_POST, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendPost(String url, Map<String, String> params, String contentType) {\n+        return send(url, params, METHOD_POST, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, String params) {\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url, Credentials creds) {\n+        String params = \"\";\n+        if (url.contains(\"?\")) {\n+            int idx = url.indexOf(\"?\");\n+            params = url.substring(idx + 1);\n+            url = url.substring(0, idx);\n+        }\n+        return send(url, params, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a post request to a url.\n+     *\n+     * @param url - The URL\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse sendPost(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 747}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDM4", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280438", "createdAt": "2020-07-31T15:51:27Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyN1rOG6NdXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyN1rOG6NdXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTEwMQ==", "bodyText": "Codacy found an issue: The user-supplied array 'headers' is stored directly.", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691101", "createdAt": "2020-07-31T15:51:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyResponse.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.dotcms.ema.proxy;\n+\n+import org.apache.http.Header;\n+import org.apache.http.ProtocolVersion;\n+import org.apache.http.StatusLine;\n+\n+public class ProxyResponse {\n+\n+  /**\n+   * The Response.\n+   */\n+  final private byte[] response;\n+  final private StatusLine status;\n+  final private int responseCode;\n+  final private Header[] headers;\n+\n+  public ProxyResponse(StatusLine status, byte[] out, Header[] headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDQ5", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280449", "createdAt": "2020-07-31T15:51:28Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyOFrOG6NdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MToyOFrOG6NdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTEwOQ==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'url'", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691109", "createdAt": "2020-07-31T15:51:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");\n+                try {\n+                    queryPairs.put(URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"), URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new DotRuntimeException(e);\n+                }\n+            }\n+        }\n+        return send(url, queryPairs, method, contentType, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object\n+     * @param creds - A credentials object for authenticated requests. @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method, Credentials creds) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, String method) {\n+        return send(url, params, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params, Credentials creds) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, String params) {\n+        return send(url, params, METHOD_GET, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a get request to a url.\n+     *\n+     * @param url - The URL\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from send\n+     */\n+    public ProxyResponse send(String url, Credentials creds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 448}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDY2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280466", "createdAt": "2020-07-31T15:51:29Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTozMFrOG6Nddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTozMFrOG6Nddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTEyNw==", "bodyText": "Codacy found an issue: String.indexOf(char) is faster than String.indexOf(String).", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691127", "createdAt": "2020-07-31T15:51:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/proxy/ProxyTool.java", "diffHunk": "@@ -0,0 +1,1214 @@\n+package com.dotcms.ema.proxy;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.http.Header;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.StatusLine;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.Credentials;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.entity.UrlEncodedFormEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.http.util.EntityUtils;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+\n+/**\n+ * This viewtool provides a method to make a simple post request and get the value.\n+ * \n+ * @author Aquent, LLC. (cfalzone@aquent.com)\n+ */\n+public class ProxyTool {\n+\n+\n+\n+    private static final String DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+\n+    public static final int ERR_CODE_UNKNOWN_ERR = 888;\n+    public static final int ERR_CODE_UNIMPLEMENTED_METHOD = 777;\n+\n+    public static final String METHOD_PUT = \"PUT\";\n+    public static final String METHOD_POST = \"POST\";\n+    public static final String METHOD_GET = \"GET\";\n+    public static final String METHOD_HEAD = \"HEAD\";\n+    public static final String METHOD_DELETE = \"DELETE\";\n+\n+\n+\n+    /**\n+     * Get a credentials object to send to authenticated requests.\n+     *\n+     * @param user - The username\n+     * @param pass - The password\n+     * @return A Credentials object that can be used in authenticated requests.\n+     */\n+    public Credentials createCreds(String user, String pass) {\n+        return new UsernamePasswordCredentials(user, pass);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"sendStringData called with url=\" + url + \", data=\" + data + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        StringEntity entity;\n+        try {\n+            entity = new StringEntity(data, ContentType.create(contentType, \"UTF-8\"));\n+        } catch (Exception e) {\n+            Logger.error(this, \"Exception creating RequestEntity for: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+        CloseableHttpClient client;\n+\n+        // Authentication if passed in\n+        if (creds != null) {\n+            CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+            credsProvider.setCredentials(AuthScope.ANY, creds);\n+            client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+        } else {\n+            client = HttpClients.createDefault();\n+        }\n+\n+        if (method.equalsIgnoreCase(METHOD_POST)) {\n+            HttpPost m = new HttpPost(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+            HttpPut m = new HttpPut(url);\n+            m.setEntity(entity);\n+            try {\n+                CloseableHttpResponse r = client.execute(m);\n+                return new ProxyResponse(r.getStatusLine().getStatusCode(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+            } catch (Exception e) {\n+                Logger.error(this, \"Exception posting to url: \" + url, e);\n+                return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, null);\n+            } finally {\n+                if (method != null) {\n+                    m.releaseConnection();\n+                }\n+            }\n+        } else {\n+            Logger.error(this, \"Unimplemented Method: \" + method);\n+            return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, null);\n+        }\n+\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only Supports POST and PUT methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, String contentType) {\n+        return sendStringData(url, data, method, contentType, null);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method, Credentials creds) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to send a single string payload to a url. Can be used to send JSON or XML to a url.\n+     * Only supports PUT and POST Methods.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param method - The Method (POST/PUT)\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, String method) {\n+        return sendStringData(url, data, method, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data, Credentials creds) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, creds);\n+    }\n+\n+    /**\n+     * This is used to post a single string payload to a url. Can be used to send JSON or XML to a url.\n+     *\n+     * @param url - The URL\n+     * @param data - The String Data\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse sendStringData(String url, String data) {\n+        return sendStringData(url, data, METHOD_POST, DEFAULT_CONTENT_TYPE, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(Map) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+\n+        try {\n+            List<NameValuePair> data = new ArrayList<NameValuePair>();\n+            StringBuilder urlParamsSB = new StringBuilder();\n+            String appender = \"?\";\n+            if (url.contains(\"?\")) {\n+                appender = \"&\";\n+            }\n+            for (Entry<String, String> e : params.entrySet()) {\n+                data.add(new BasicNameValuePair(e.getKey(), e.getValue()));\n+                urlParamsSB.append(appender + e.getKey() + \"=\" + e.getValue());\n+                appender = \"&\";\n+            }\n+            UrlEncodedFormEntity entity = new UrlEncodedFormEntity(data, Charset.forName(\"UTF-8\"));\n+\n+\n+            CloseableHttpClient client = HttpClients.createDefault();\n+            \n+\n+            // Authentication if passed in\n+            if (creds != null) {\n+                CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+                credsProvider.setCredentials(AuthScope.ANY, creds);\n+                client = HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build();\n+            } \n+        \n+            \n+            Logger.debug(this, method  + \" \" + url);\n+            \n+            if (method.equalsIgnoreCase(METHOD_POST)) {\n+                HttpPost m = new HttpPost(url);\n+\n+                \n+\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    StatusLine status =r.getStatusLine();\n+                    return new ProxyResponse(status, EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_PUT)) {\n+                HttpPut m = new HttpPut(url);\n+                m.setEntity(entity);\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_HEAD)) {\n+                HttpHead m = new HttpHead(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_DELETE)) {\n+                HttpDelete m = new HttpDelete(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else if (method.equalsIgnoreCase(METHOD_GET)) {\n+                HttpGet m = new HttpGet(url + urlParamsSB.toString());\n+                try(CloseableHttpResponse r = client.execute(m)){\n+                    return new ProxyResponse(r.getStatusLine(), EntityUtils.toByteArray(r.getEntity()), r.getAllHeaders());\n+                }\n+            } else {\n+                Logger.error(this, \"Unimplemented Method: \" + method);\n+                return new ProxyResponse(ERR_CODE_UNIMPLEMENTED_METHOD, null, new Header[0]);\n+            }\n+\n+        } catch (Exception e) {\n+            Logger.warn(this, \"Exception posting to url: \" + url, e);\n+            return new ProxyResponse(ERR_CODE_UNKNOWN_ERR, null, new Header[0]);\n+        }\n+\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @return A ProxyResponse Object\n+     */\n+    public ProxyResponse send(String url, Map<String, String> params, String method, String contentType) {\n+        return send(url, params, method, contentType, null);\n+    }\n+\n+    /**\n+     * Sends a request to a url.\n+     *\n+     * @param url - The URL\n+     * @param params - The Query String\n+     * @param method - The Method (POST/GET/PUT/HEAD/DELETE)\n+     * @param contentType - The content type for this request\n+     * @param creds - A credentials object for authenticated requests.\n+     * @return A ProxyResponse Object @ from URLDecoder.decode\n+     */\n+    public ProxyResponse send(String url, String params, String method, String contentType, Credentials creds) {\n+        Logger.debug(this, \"send(String) called with url=\" + url + \", params=\" + params + \", and method=\" + method + \", contentType = \"\n+                + contentType + \", creds=\" + UtilMethods.isSet(creds));\n+\n+        Map<String, String> queryPairs = new LinkedHashMap<String, String>();\n+        if (params.length() > 0) {\n+            String[] pairs = params.split(\"&\");\n+            for (String pair : pairs) {\n+                int idx = pair.indexOf(\"=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 321}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgwNDc2", "url": "https://github.com/dotCMS/core/pull/18985#pullrequestreview-459280476", "createdAt": "2020-07-31T15:51:30Z", "commit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTozMVrOG6NdgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1MTozMVrOG6NdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MTEzNw==", "bodyText": "Codacy found an issue: Avoid using Literals in Conditional Statements", "url": "https://github.com/dotCMS/core/pull/18985#discussion_r463691137", "createdAt": "2020-07-31T15:51:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/ema/EMAWebInterceptor.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.dotcms.ema;\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import org.apache.http.Header;\n+\n+import com.dotcms.business.CloseDBIfOpened;\n+import com.dotcms.ema.proxy.MockHttpCaptureResponse;\n+import com.dotcms.ema.proxy.ProxyResponse;\n+import com.dotcms.ema.proxy.ProxyTool;\n+import com.dotcms.filters.interceptor.Result;\n+import com.dotcms.filters.interceptor.WebInterceptor;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.UserWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.dotmarketing.util.json.JSONObject;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+\n+/**\n+ * Intercepts a content managers's request to dotCMS EDIT_MODE in the admin of dotCMS,\n+ * transparently POSTs the dotCMS page API data to the remote site/server (hosted elsewhere) and\n+ * then proxies the remote response back to the dotCMS admin, which allows dotCMS\n+ * to render the EDIT_MODE request in context.\n+ *\n+ * More info on how EMA works https://github.com/dotcms-plugins/com.dotcms.ema#dotcms-edit-mode-anywhere---ema\n+ */\n+public class EMAWebInterceptor  implements WebInterceptor{\n+\n+    public  static final String      PROXY_EDIT_MODE_URL_VAR = \"proxyEditModeURL\";\n+    private static final String      API_CALL                = \"/api/v1/page/render\";\n+    public static final String EMA_APP_CONFIG_KEY = \"dotema-config\";\n+    private static final ProxyTool   proxy                   = new ProxyTool();\n+\n+\n+    @Override\n+    public String[] getFilters() {\n+        return new String[] {\n+                API_CALL + \"*\"\n+        };\n+    }\n+\n+    @Override\n+    public Result intercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+\n+        if (!this.existsConfiguration(currentHost.getIdentifier())) {\n+            return Result.NEXT;\n+        }\n+\n+        final Optional<String> proxyUrl = proxyUrl(currentHost);\n+        final PageMode mode             = PageMode.get(request);\n+\n+        if (!proxyUrl.isPresent() || mode == PageMode.LIVE) {\n+            return Result.NEXT;\n+        }\n+\n+        Logger.info(this.getClass(), \"GOT AN EMA Call --> \" + request.getRequestURI());\n+\n+        return new Result.Builder().wrap(new MockHttpCaptureResponse(response)).next().build();\n+    }\n+\n+\n+    @Override\n+    public boolean afterIntercept(final HttpServletRequest request, final HttpServletResponse response) {\n+\n+        try {\n+\n+            if (response instanceof MockHttpCaptureResponse) {\n+\n+                final Host currentHost = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n+                final Optional<String> proxyUrl            = proxyUrl(currentHost);\n+                final MockHttpCaptureResponse mockResponse = (MockHttpCaptureResponse)response;\n+                final String postJson                      = new String(mockResponse.getBytes());\n+                final JSONObject json                      = new JSONObject(postJson);\n+                final Map<String, String> params           = ImmutableMap.of(\"dotPageData\", postJson);\n+                \n+                Logger.info(this.getClass(), \"Proxying Request --> \" + proxyUrl.get());\n+\n+                final StringBuilder responseStringBuilder = new StringBuilder();\n+                final ProxyResponse pResponse = proxy.sendPost(proxyUrl.get(), params);\n+\n+                if (pResponse.getResponseCode() == 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac87fe4b05a8c4fa8c6a51758b682f9ac79b4539"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 681, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}