{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTQxNDMw", "number": 18559, "title": "#18286", "bodyText": "This is intended to conciliate all the different code used to transform content\nWe expect to replace all usages of transformers by one single class that will provide all the required flexibility in one single class.", "createdAt": "2020-05-27T22:16:29Z", "url": "https://github.com/dotCMS/core/pull/18559", "merged": true, "mergeCommit": {"oid": "3e94b693c609022f77c91cb51a59b00b5ef1beb8"}, "closed": true, "closedAt": "2020-06-11T22:31:35Z", "author": {"login": "fabrizzio-dotCMS"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclgxkVgH2gAyNDI0MTQxNDMwOjEwOGU1YTU2NjVmNDU3M2ExZjNlY2JkZGEzMzdjMThhMjAyM2VhZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqV4VBAH2gAyNDI0MTQxNDMwOjE0OTM0NDlhMWIzYzBkMWY2ZmQ0ODgyZWM1NjQ2YmZhZTVkZTI0OTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "108e5a5665f4573a1f3ecbdda337c18a2023eaf9", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/108e5a5665f4573a1f3ecbdda337c18a2023eaf9", "committedDate": "2020-05-27T22:12:23Z", "message": "#18286"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75a6275ada0402b11737d3ef9b51ba7ed752282", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b75a6275ada0402b11737d3ef9b51ba7ed752282", "committedDate": "2020-05-28T05:17:17Z", "message": "#18286 stabilize tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdeb8208fd7b66c8583fb93fcc116a62f4a9ea67", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/fdeb8208fd7b66c8583fb93fcc116a62f4a9ea67", "committedDate": "2020-05-28T16:15:10Z", "message": "#18286 fixes + builder for content resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e809111e4dbe4eeae2166a67e4f97db80774944a", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/e809111e4dbe4eeae2166a67e4f97db80774944a", "committedDate": "2020-05-30T04:22:13Z", "message": "#18286  code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72131088f919a9b5dde5d09324510a9cc8806a7", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/a72131088f919a9b5dde5d09324510a9cc8806a7", "committedDate": "2020-06-01T05:21:33Z", "message": "#18286  clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1f93b777454f1449c9bca76fa37c5cf1e1f276", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/fd1f93b777454f1449c9bca76fa37c5cf1e1f276", "committedDate": "2020-06-01T16:44:42Z", "message": "#18286 more clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef798818a6a8a48ff2462cb53106d7a50f74cc7", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3ef798818a6a8a48ff2462cb53106d7a50f74cc7", "committedDate": "2020-06-04T16:50:39Z", "message": "#18286 performance boost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0649d6d61eec99c2d5cb7853aaf9ecb0b164290", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d0649d6d61eec99c2d5cb7853aaf9ecb0b164290", "committedDate": "2020-06-07T23:05:00Z", "message": "#18286 performance tuning + adding category support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa642ef1824462f9e5885c1f358be625b4db3ea", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3fa642ef1824462f9e5885c1f358be625b4db3ea", "committedDate": "2020-06-07T23:46:03Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fe38db3c340456adf086700d053eb0ac739cd3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/f3fe38db3c340456adf086700d053eb0ac739cd3", "committedDate": "2020-06-08T00:29:35Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3591966c8b22609dcfcace18504556db233e5a4c", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3591966c8b22609dcfcace18504556db233e5a4c", "committedDate": "2020-06-08T01:43:34Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a09b4478e46f8ee86719f99e234547d6e5c560", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b4a09b4478e46f8ee86719f99e234547d6e5c560", "committedDate": "2020-06-08T17:01:10Z", "message": "#18286  prevent fail when contentlet is reprocessed by the transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b616972ea9d9317f2cdda4084b4eedd2bc9b05", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/46b616972ea9d9317f2cdda4084b4eedd2bc9b05", "committedDate": "2020-06-08T22:59:43Z", "message": "#18286 graphQL dataFetcher requires  binaries to not be removed from the resulting contentlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6894b54d181b814f767b12ec2fff28faed56e9d6", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6894b54d181b814f767b12ec2fff28faed56e9d6", "committedDate": "2020-06-09T00:39:37Z", "message": "#18286 adding back the LanguageViewStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2461d0bb978034785244612e1d4515a1362fd62", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d2461d0bb978034785244612e1d4515a1362fd62", "committedDate": "2020-06-09T03:46:15Z", "message": "#18286 fixing test that used to check the file returned in the response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/7c90daaa8982ce50fc52b581d101a7b5f704c7b5", "committedDate": "2020-06-09T15:03:48Z", "message": "Merge branch 'master' into issue-18286-contentlet-transform-unified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MzQ3NjQ4", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427347648", "createdAt": "2020-06-09T16:39:22Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozOToyMlrOGhTInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNjozOToyMlrOGhTInw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2OTY5NQ==", "bodyText": "add some doc", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437569695", "createdAt": "2020-06-09T16:39:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/DotContentletTransformer.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.dotmarketing.portlets.contentlet.transform;\n+\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import java.util.List;\n+\n+/**\n+ * This interface also introduces the hydration behavior\n+ */\n+public interface DotContentletTransformer extends DotMapViewTransformer {\n+\n+    List<Contentlet> hydrate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mzc0Njkw", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427374690", "createdAt": "2020-06-09T17:13:32Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxMzozMlrOGhUZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxMzozMlrOGhUZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MDMwOQ==", "bodyText": "Not sure how big permissions could be, but it would be worthy to create a method:\nfinal Set<Integer> permissions = permissionAPI.getPermissionIdsSetFromRoles(folder, roles, user);", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437590309", "createdAt": "2020-06-09T17:13:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/DotFolderTransformerImpl.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.portlets.contentlet.transform;\n+\n+import static com.dotmarketing.business.PermissionAPI.PERMISSION_READ;\n+import static com.dotmarketing.util.UtilMethods.isSet;\n+\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.Logger;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Folder Transformers Class\n+ */\n+public class DotFolderTransformerImpl implements DotMapViewTransformer {\n+\n+    @Override\n+    public List<Map<String, Object>> toMaps() {\n+        return transform();\n+    }\n+\n+    private enum TargetView {\n+        BROWSE_VIEW,\n+        GRAPHQL_VIEW\n+    }\n+    private PermissionAPI permissionAPI;\n+\n+    private final User user;\n+    private final Role[] roles;\n+    private final List<Folder> folders;\n+    private final TargetView targetView;\n+\n+    /**\n+     * Test friendly \"private\" constructor\n+     * @param permissionAPI\n+     * @param user\n+     * @param folders\n+     */\n+    @VisibleForTesting\n+    DotFolderTransformerImpl(\n+            final PermissionAPI permissionAPI,\n+            final User user,\n+            final Role[] roles,\n+            final List<Folder> folders,\n+            final TargetView targetView) {\n+        this.permissionAPI = permissionAPI;\n+        this.user = user;\n+        this.roles =   isSet(roles) ? Arrays.copyOf(roles, roles.length) : new Role[]{} ;\n+        this.folders = folders;\n+        this.targetView = targetView;\n+    }\n+\n+    /**\n+     * This builds the view for siteBrowser\n+     * @param user\n+     * @param folders\n+     */\n+    public DotFolderTransformerImpl(final User user, final Role[] roles, final List<Folder> folders) {\n+        this(APILocator.getPermissionAPI(), user, roles, folders , TargetView.BROWSE_VIEW);\n+    }\n+\n+    /**\n+     * this builds a view for folderToMapTransformerView\n+     * @param folders\n+     */\n+    public DotFolderTransformerImpl(final List<Folder> folders) {\n+        this(APILocator.getPermissionAPI(), null, null, folders, TargetView.GRAPHQL_VIEW);\n+    }\n+\n+    List<Map<String,Object>> transform() {\n+        final List<Map<String,Object>> maps = new ArrayList<>();\n+        switch (targetView){\n+            case BROWSE_VIEW:{\n+              for(final Folder folder:folders) {\n+                 try {\n+                     final List<Integer> permissions = permissionAPI.getPermissionIdsFromRoles(folder, roles, user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mzc2MDkw", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427376090", "createdAt": "2020-06-09T17:15:22Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNToyMlrOGhUdVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxNToyMlrOGhUdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MTM4MQ==", "bodyText": "You can use ReflectionUtils", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437591381", "createdAt": "2020-06-09T17:15:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/DotTransformerBuilder.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.contentlet.transform;\n+\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.BINARIES;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.BINARIES_VIEW;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_INFO;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_NAME;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_VIEW;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.IDENTIFIER_VIEW;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.COMMON_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CONSTANTS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.VERSION_INFO;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.LANGUAGE_VIEW;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.LANGUAGE_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.LOAD_META;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.USE_ALIAS;\n+import static com.dotmarketing.util.UtilMethods.isNotSet;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.strategy.StrategyResolver;\n+import com.dotmarketing.portlets.contentlet.transform.strategy.StrategyResolverImpl;\n+import com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.EnumSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * This Class is the entry point to realize any transformation\n+ * it facilitates instantiating the Transformer\n+ */\n+public class DotTransformerBuilder {\n+\n+    private final List<Contentlet> contentlets = new ArrayList<>();\n+\n+    private final Set<TransformOptions> optionsHolder = new HashSet<>();\n+\n+    private User user;\n+\n+    /**\n+     * Use to submit all contentlets\n+     * @param contentlets\n+     * @return\n+     */\n+    public DotTransformerBuilder content(final List<Contentlet> contentlets){\n+        this.contentlets.addAll(contentlets);\n+        return this;\n+    }\n+\n+    /**\n+     * Use to submit all contentlets. One single entry can me set conveniently\n+     * @param contentlets\n+     * @return\n+     */\n+    public DotTransformerBuilder content(final Contentlet... contentlets){\n+        this.contentlets.addAll(Arrays.asList(contentlets));\n+        return this;\n+    }\n+\n+    /***\n+     * If a user is required this must be used to set it\n+     * @param user\n+     * @return\n+     */\n+    public DotTransformerBuilder forUser(final User user) {\n+        this.user = user;\n+        return this;\n+    }\n+\n+    /**\n+     * Use to replace the BinaryToMapTransformer\n+     * @return\n+     */\n+    DotTransformerBuilder binaryToMapTransformer(){\n+       optionsHolder.clear();\n+       optionsHolder.add(BINARIES_VIEW);\n+       return this;\n+    }\n+\n+    /**\n+     * Use to replace the LanguageToMapTransformer\n+     * @return\n+     */\n+    DotTransformerBuilder languageToMapTransformer(){\n+        optionsHolder.clear();\n+        optionsHolder.add(LANGUAGE_VIEW);\n+        return this;\n+    }\n+\n+    /**\n+     * Use it to replace IdentifierToMapTransformer\n+     * @return\n+     */\n+    DotTransformerBuilder identifierToMapTransformer(){\n+        optionsHolder.clear();\n+        optionsHolder.add(IDENTIFIER_VIEW);\n+        return this;\n+    }\n+\n+    /**\n+     * Use to replace CategoryToMapTransformer\n+     * @return\n+     */\n+    public DotTransformerBuilder categoryToMapTransformer(){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(EnumSet.of(CATEGORIES_VIEW));\n+        return this;\n+    }\n+\n+    /**\n+     * Fine tuned to be used for FileAssets on BrowserAPI\n+     * @return\n+     */\n+    public DotTransformerBuilder webAssetOptions(){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(\n+                EnumSet.of(COMMON_PROPS, VERSION_INFO, LOAD_META, USE_ALIAS, LANGUAGE_PROPS));\n+        return this;\n+    }\n+\n+    /**\n+     * Fine tuned to be used for DotAssets on BrowserAPI\n+     * @return\n+     */\n+    public DotTransformerBuilder dotAssetOptions(){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(EnumSet.of(COMMON_PROPS, VERSION_INFO, USE_ALIAS, LANGUAGE_PROPS));\n+        return this;\n+    }\n+\n+    /**\n+     * Fine Tuned to be consumed from ContentResource\n+     * @return\n+     */\n+    public DotTransformerBuilder contentResourceOptions(final boolean allCategoriesInfo){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(EnumSet.of(COMMON_PROPS, CONSTANTS, VERSION_INFO, LOAD_META, BINARIES, CATEGORIES_NAME));\n+        if(allCategoriesInfo){\n+          optionsHolder.remove(CATEGORIES_NAME);\n+          optionsHolder.add(CATEGORIES_INFO);\n+        }\n+        return this;\n+    }\n+\n+\n+    /**\n+     * This one does not transform binaries. But still leaves them for use. Meaning the resulting map will still have binaries\n+     * @return\n+     */\n+    public DotTransformerBuilder graphQLDataFetchOptions(){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(EnumSet.of(COMMON_PROPS, CONSTANTS, VERSION_INFO, CATEGORIES_NAME));\n+        return this;\n+    }\n+\n+    /**\n+     * Dont know where? to go land here.\n+     * @return\n+     */\n+    public DotTransformerBuilder defaultOptions(){\n+        optionsHolder.clear();\n+        optionsHolder.addAll(DotContentletTransformerImpl.defaultOptions);\n+        return this;\n+    }\n+\n+    /**\n+     * Once every option has been selected get the instance here\n+     * @return\n+     */\n+    public DotContentletTransformer build() {\n+        final StrategyResolver resolver;\n+        final String providerClassName = getStrategyResolverProvider();\n+        if (isNotSet(providerClassName)) {\n+            resolver = new StrategyResolverImpl();\n+        } else {\n+            try {\n+                resolver = ((Class<StrategyResolver>) Class.forName(providerClassName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Mzc4MzE0", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427378314", "createdAt": "2020-06-09T17:18:16Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxODoxN1rOGhUjrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoxODoxN1rOGhUjrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5MzAwNQ==", "bodyText": "couldn't be this reduce to findFirst().getOrElse something like that", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437593005", "createdAt": "2020-06-09T17:18:17Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/LanguageToMapTransformer.java", "diffHunk": "@@ -1,60 +1,36 @@\n package com.dotmarketing.portlets.contentlet.transform;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.jetbrains.annotations.NotNull;\n-\n-import com.dotmarketing.business.APILocator;\n import com.dotmarketing.business.DotStateException;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n-import com.dotmarketing.portlets.languagesmanager.model.Language;\n-import com.dotmarketing.util.UtilMethods;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n- * DBTransformer that converts DB objects into Contentlet instances\n+ * FieldsToMapTransformer that adds the language info on the Contentlet instances into a map\n  */\n public class LanguageToMapTransformer implements FieldsToMapTransformer {\n-    final Map<String, Object> mapOfMaps;\n-\n \n+    final Map<String, Object> mapOfMaps;\n \n     public LanguageToMapTransformer(final Contentlet con) {\n         if (con.getInode() == null) {\n             throw new DotStateException(\"Contentlet needs an inode to get fields\");\n         }\n \n-        final Map<String, Object> newMap = new HashMap<>();\n-        newMap.put(\"languageMap\", this.transform(con));\n-        newMap.put(\"language\", con.getLanguageId());\n-        this.mapOfMaps = newMap;\n+        final List<Map<String, Object>> maps =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDExMTM2", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427411136", "createdAt": "2020-06-09T18:01:16Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMToxNlrOGhWGcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMToxNlrOGhWGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxODI4OA==", "bodyText": "please add a todo here, to replace this by metadata in order to get the name", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437618288", "createdAt": "2020-06-09T18:01:16Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/BinaryViewStrategy.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.dotmarketing.portlets.contentlet.transform.strategy;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Class intended to collect binaries and present them as Map with entries like `fieldVariable` followed by `Map`\n+ */\n+public class BinaryViewStrategy extends AbstractTransformStrategy<Contentlet> {\n+\n+    /**\n+     * Regular constructor takes a toolbox\n+     * @param toolBox\n+     */\n+    BinaryViewStrategy(final TransformToolbox toolBox) {\n+        super(toolBox);\n+    }\n+\n+    /**\n+     * Main Transform function\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Override\n+    protected Map<String, Object> transform(final Contentlet contentlet,\n+    final Map<String, Object> map, final Set<TransformOptions> options, final User user) {\n+\n+        final List<Field> binaries = contentlet.getContentType().fields(BinaryField.class);\n+\n+        if (!binaries.isEmpty()) {\n+            for (final Field field : binaries) {\n+                try {\n+                    map.put(field.variable() + \"Map\", transform(field, contentlet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDExNjUw", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427411650", "createdAt": "2020-06-09T18:01:58Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMTo1OFrOGhWICw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMTo1OFrOGhWICw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxODY5OQ==", "bodyText": "todo here too, b/c all info could be taken from the metadata", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437618699", "createdAt": "2020-06-09T18:01:58Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/BinaryViewStrategy.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.dotmarketing.portlets.contentlet.transform.strategy;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.DotStateException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Class intended to collect binaries and present them as Map with entries like `fieldVariable` followed by `Map`\n+ */\n+public class BinaryViewStrategy extends AbstractTransformStrategy<Contentlet> {\n+\n+    /**\n+     * Regular constructor takes a toolbox\n+     * @param toolBox\n+     */\n+    BinaryViewStrategy(final TransformToolbox toolBox) {\n+        super(toolBox);\n+    }\n+\n+    /**\n+     * Main Transform function\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Override\n+    protected Map<String, Object> transform(final Contentlet contentlet,\n+    final Map<String, Object> map, final Set<TransformOptions> options, final User user) {\n+\n+        final List<Field> binaries = contentlet.getContentType().fields(BinaryField.class);\n+\n+        if (!binaries.isEmpty()) {\n+            for (final Field field : binaries) {\n+                try {\n+                    map.put(field.variable() + \"Map\", transform(field, contentlet));\n+                    final File conBinary = contentlet.getBinary(field.variable());\n+                    if (conBinary != null) {\n+                        //This clearly replaces the binary by a string which is the expected output on BinaryToMapTransformer.\n+                        map.put(field.variable(), conBinary.getName());\n+                    }\n+                } catch (IOException e) {\n+                    Logger.warn(this,\n+                            \"Unable to get Binary from field with var \" + field.variable());\n+                }\n+            }\n+        }\n+        return map;\n+    }\n+\n+    /**\n+     * Transform function\n+     */\n+    public static Map<String, Object> transform(final Field field, final Contentlet contentlet) {\n+        File file;\n+        try {\n+            file = contentlet.getBinary(field.variable());\n+        } catch (IOException e) {\n+            throw new DotStateException(e);\n+        }\n+\n+        if (file == null) {\n+            return emptyMap();\n+        }\n+\n+        return transform(file, contentlet, field);\n+    }\n+\n+    /**\n+     * Transform function\n+     */\n+    public static Map<String, Object> transform(final File file, final Contentlet contentlet,\n+            final Field field) {\n+        DotPreconditions.checkNotNull(file, IllegalArgumentException.class, \"File can't be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDEyNTQz", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427412543", "createdAt": "2020-06-09T18:03:06Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMzowNlrOGhWKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMzowNlrOGhWKjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxOTM0Mg==", "bodyText": "to do to replace this by metadata", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437619342", "createdAt": "2020-06-09T18:03:06Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/DefaultTransformStrategy.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package com.dotmarketing.portlets.contentlet.transform.strategy;\n+\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.ARCHIVED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.BASE_TYPE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.CONTENT_TYPE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HAS_TITLE_IMAGE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_NAME;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.IDENTIFIER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.INODE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LANGUAGEID_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LIVE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LOCKED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_NOT_FOUND;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITTLE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.WORKING_KEY;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.LanguageViewStrategy.mapLanguage;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.BINARIES;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_INFO;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_NAME;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.COMMON_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CONSTANTS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.FILTER_BINARIES;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.LANGUAGE_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.USE_ALIAS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.VERSION_INFO;\n+import static com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI.URL_FIELD;\n+\n+import com.dotcms.content.elasticsearch.constants.ESMappingConstants;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.CategoryField;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.categories.model.Category;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.util.Logger;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * If any Options marked as property is found this class gets instantiated since props are most likely to be resolved here\n+ */\n+public class DefaultTransformStrategy extends AbstractTransformStrategy<Contentlet> {\n+\n+    /**\n+     * Main constructor\n+     * @param toolBox\n+     */\n+    public DefaultTransformStrategy(final TransformToolbox toolBox) {\n+        super(toolBox);\n+    }\n+\n+    /**\n+     * Regular transformation handler\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Override\n+    public Map<String, Object> transform(final Contentlet contentlet, final Map<String, Object> map,\n+            final Set<TransformOptions> options, final User user)\n+            throws DotDataException, DotSecurityException {\n+        addCommonProperties(contentlet, map, options);\n+        addLanguage(contentlet, map, options);\n+        addVersionProperties(contentlet, map, options);\n+        addConstants(contentlet, map, options);\n+        addBinaries(contentlet, map, options);\n+        addCategories(contentlet, map, options, user);\n+        return map;\n+    }\n+\n+    /**\n+     * Handle common properties found on all contentlets\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    private void addCommonProperties(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options)\n+            throws DotSecurityException, DotDataException {\n+        if(!options.contains(COMMON_PROPS)){\n+            return;\n+        }\n+        final ContentType type = contentlet.getContentType();\n+\n+        map.put(IDENTIFIER_KEY, contentlet.getIdentifier());\n+        map.put(INODE_KEY, contentlet.getInode());\n+        map.put(TITTLE_KEY, contentlet.getTitle());\n+        map.put(CONTENT_TYPE_KEY, type != null ? type.variable() : NOT_APPLICABLE);\n+        map.put(BASE_TYPE_KEY, type != null ? type.baseType().name() : NOT_APPLICABLE);\n+        map.put(LANGUAGEID_KEY, contentlet.getLanguageId());\n+        final Optional<Field> titleImage = contentlet.getTitleImage();\n+        final boolean hasTitleImage = titleImage.isPresent();\n+        map.put(HAS_TITLE_IMAGE_KEY, hasTitleImage);\n+        if(hasTitleImage) {\n+           map.put(TITLE_IMAGE_KEY, titleImage.get().variable());\n+        } else {\n+           map.put(TITLE_IMAGE_KEY, TITLE_IMAGE_NOT_FOUND);\n+        }\n+        final Host host = toolBox.hostAPI.find(contentlet.getHost(), APILocator.systemUser(), true);\n+        map.put(HOST_NAME, host != null ? host.getHostname() : NOT_APPLICABLE);\n+        map.put(HOST_KEY, host != null ? host.getIdentifier() : NOT_APPLICABLE);\n+\n+        final String urlMap = toolBox.contentletAPI\n+                .getUrlMapForContentlet(contentlet, toolBox.userAPI.getSystemUser(), true);\n+        map.put(ESMappingConstants.URL_MAP, urlMap);\n+\n+        //We only calculate the fields if it is not already set\n+        //However WebAssets (Pages, FileAssets) are forced to calculate it.\n+        //To prevent any miscalculated urls.\n+        if (!map.containsKey(URL_FIELD)) {\n+            final String url = toolBox.contentHelper.getUrl(contentlet);\n+            if (null != url) {\n+                map.put(URL_FIELD, url);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * if TransformOptions.USE_LANGUAGE_AS_MAP is set this will load all the language related properties as a single map entry\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     */\n+    private void addLanguage(final Contentlet contentlet, final Map<String, Object> map,\n+            final Set<TransformOptions> options) {\n+        final Language language = toolBox.languageAPI.getLanguage(contentlet.getLanguageId());\n+        if (!options.contains(LANGUAGE_PROPS)) {\n+             return;\n+        }\n+        map.putAll(mapLanguage(language, false));\n+    }\n+\n+    /**\n+     * Constant fields are added down here\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     */\n+    private void addConstants(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options){\n+          if(!options.contains(CONSTANTS)){\n+             return;\n+          }\n+            contentlet.getContentType().fields(ConstantField.class)\n+                    .stream()\n+                    .filter(Objects::nonNull)\n+                    .forEach(f-> map.put(f.variable(), f.values()));\n+    }\n+\n+\n+    /**\n+     * This method includes binaries in the resulting view if so is indicated\n+     * After the execution of this method if the BINARIES flag is turned on\n+     * all the binary fields will be replaced and transformed by a /dA/.. path.\n+     */\n+    private void addBinaries(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options) {\n+\n+        final List<Field> binaries = contentlet.getContentType().fields(BinaryField.class);\n+\n+        if (binaries.isEmpty()) {\n+            return;\n+        }\n+\n+        //If we dont want any binaries making it into the final map\n+        if(options.contains(FILTER_BINARIES)){\n+            binaries.forEach(field -> {\n+                map.remove(field.variable());\n+            });\n+            Logger.info(DefaultTransformStrategy.class, ()->\"Transformer was instructed to exclude binaries.\");\n+            return;\n+        }\n+\n+        // if we want to include binaries as they are (java.io.File) this is the flag you should turn on.\n+        if (options.contains(BINARIES)) {\n+            for (final Field field : binaries) {\n+                try {\n+                    final String velocityVarName = field.variable();\n+                    //Extra precaution in case we are attempting to process a contentlet that has already been transformed.\n+                    if (map.get(velocityVarName) instanceof File) {\n+                        final File conBinary = contentlet.getBinary(field.variable());\n+                        if (null != conBinary) {\n+                            //If we want to see binaries. The binary-field per se. Must be replaced by file-name. We dont want to disclose any file specifics.\n+\n+                            if (conBinary.exists()) {\n+                                final String dAPath = \"/dA/%s/%s/%s\";\n+                                map.put(field.variable() + \"Version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 208}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDEyODI3", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427412827", "createdAt": "2020-06-09T18:03:28Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMzoyOFrOGhWLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowMzoyOFrOGhWLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxOTU2OA==", "bodyText": "rename to categories", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437619568", "createdAt": "2020-06-09T18:03:28Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/DefaultTransformStrategy.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package com.dotmarketing.portlets.contentlet.transform.strategy;\n+\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.ARCHIVED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.BASE_TYPE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.CONTENT_TYPE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HAS_TITLE_IMAGE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_NAME;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.IDENTIFIER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.INODE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LANGUAGEID_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LIVE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LOCKED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_NOT_FOUND;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITTLE_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.WORKING_KEY;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.LanguageViewStrategy.mapLanguage;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.BINARIES;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_INFO;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CATEGORIES_NAME;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.COMMON_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.CONSTANTS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.FILTER_BINARIES;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.LANGUAGE_PROPS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.USE_ALIAS;\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.VERSION_INFO;\n+import static com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI.URL_FIELD;\n+\n+import com.dotcms.content.elasticsearch.constants.ESMappingConstants;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.CategoryField;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.categories.model.Category;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.util.Logger;\n+import com.google.common.collect.ImmutableMap;\n+import com.liferay.portal.model.User;\n+import io.vavr.control.Try;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * If any Options marked as property is found this class gets instantiated since props are most likely to be resolved here\n+ */\n+public class DefaultTransformStrategy extends AbstractTransformStrategy<Contentlet> {\n+\n+    /**\n+     * Main constructor\n+     * @param toolBox\n+     */\n+    public DefaultTransformStrategy(final TransformToolbox toolBox) {\n+        super(toolBox);\n+    }\n+\n+    /**\n+     * Regular transformation handler\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Override\n+    public Map<String, Object> transform(final Contentlet contentlet, final Map<String, Object> map,\n+            final Set<TransformOptions> options, final User user)\n+            throws DotDataException, DotSecurityException {\n+        addCommonProperties(contentlet, map, options);\n+        addLanguage(contentlet, map, options);\n+        addVersionProperties(contentlet, map, options);\n+        addConstants(contentlet, map, options);\n+        addBinaries(contentlet, map, options);\n+        addCategories(contentlet, map, options, user);\n+        return map;\n+    }\n+\n+    /**\n+     * Handle common properties found on all contentlets\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    private void addCommonProperties(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options)\n+            throws DotSecurityException, DotDataException {\n+        if(!options.contains(COMMON_PROPS)){\n+            return;\n+        }\n+        final ContentType type = contentlet.getContentType();\n+\n+        map.put(IDENTIFIER_KEY, contentlet.getIdentifier());\n+        map.put(INODE_KEY, contentlet.getInode());\n+        map.put(TITTLE_KEY, contentlet.getTitle());\n+        map.put(CONTENT_TYPE_KEY, type != null ? type.variable() : NOT_APPLICABLE);\n+        map.put(BASE_TYPE_KEY, type != null ? type.baseType().name() : NOT_APPLICABLE);\n+        map.put(LANGUAGEID_KEY, contentlet.getLanguageId());\n+        final Optional<Field> titleImage = contentlet.getTitleImage();\n+        final boolean hasTitleImage = titleImage.isPresent();\n+        map.put(HAS_TITLE_IMAGE_KEY, hasTitleImage);\n+        if(hasTitleImage) {\n+           map.put(TITLE_IMAGE_KEY, titleImage.get().variable());\n+        } else {\n+           map.put(TITLE_IMAGE_KEY, TITLE_IMAGE_NOT_FOUND);\n+        }\n+        final Host host = toolBox.hostAPI.find(contentlet.getHost(), APILocator.systemUser(), true);\n+        map.put(HOST_NAME, host != null ? host.getHostname() : NOT_APPLICABLE);\n+        map.put(HOST_KEY, host != null ? host.getIdentifier() : NOT_APPLICABLE);\n+\n+        final String urlMap = toolBox.contentletAPI\n+                .getUrlMapForContentlet(contentlet, toolBox.userAPI.getSystemUser(), true);\n+        map.put(ESMappingConstants.URL_MAP, urlMap);\n+\n+        //We only calculate the fields if it is not already set\n+        //However WebAssets (Pages, FileAssets) are forced to calculate it.\n+        //To prevent any miscalculated urls.\n+        if (!map.containsKey(URL_FIELD)) {\n+            final String url = toolBox.contentHelper.getUrl(contentlet);\n+            if (null != url) {\n+                map.put(URL_FIELD, url);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * if TransformOptions.USE_LANGUAGE_AS_MAP is set this will load all the language related properties as a single map entry\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     */\n+    private void addLanguage(final Contentlet contentlet, final Map<String, Object> map,\n+            final Set<TransformOptions> options) {\n+        final Language language = toolBox.languageAPI.getLanguage(contentlet.getLanguageId());\n+        if (!options.contains(LANGUAGE_PROPS)) {\n+             return;\n+        }\n+        map.putAll(mapLanguage(language, false));\n+    }\n+\n+    /**\n+     * Constant fields are added down here\n+     * @param contentlet\n+     * @param map\n+     * @param options\n+     */\n+    private void addConstants(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options){\n+          if(!options.contains(CONSTANTS)){\n+             return;\n+          }\n+            contentlet.getContentType().fields(ConstantField.class)\n+                    .stream()\n+                    .filter(Objects::nonNull)\n+                    .forEach(f-> map.put(f.variable(), f.values()));\n+    }\n+\n+\n+    /**\n+     * This method includes binaries in the resulting view if so is indicated\n+     * After the execution of this method if the BINARIES flag is turned on\n+     * all the binary fields will be replaced and transformed by a /dA/.. path.\n+     */\n+    private void addBinaries(final Contentlet contentlet, final Map<String, Object> map, final Set<TransformOptions> options) {\n+\n+        final List<Field> binaries = contentlet.getContentType().fields(BinaryField.class);\n+\n+        if (binaries.isEmpty()) {\n+            return;\n+        }\n+\n+        //If we dont want any binaries making it into the final map\n+        if(options.contains(FILTER_BINARIES)){\n+            binaries.forEach(field -> {\n+                map.remove(field.variable());\n+            });\n+            Logger.info(DefaultTransformStrategy.class, ()->\"Transformer was instructed to exclude binaries.\");\n+            return;\n+        }\n+\n+        // if we want to include binaries as they are (java.io.File) this is the flag you should turn on.\n+        if (options.contains(BINARIES)) {\n+            for (final Field field : binaries) {\n+                try {\n+                    final String velocityVarName = field.variable();\n+                    //Extra precaution in case we are attempting to process a contentlet that has already been transformed.\n+                    if (map.get(velocityVarName) instanceof File) {\n+                        final File conBinary = contentlet.getBinary(field.variable());\n+                        if (null != conBinary) {\n+                            //If we want to see binaries. The binary-field per se. Must be replaced by file-name. We dont want to disclose any file specifics.\n+\n+                            if (conBinary.exists()) {\n+                                final String dAPath = \"/dA/%s/%s/%s\";\n+                                map.put(field.variable() + \"Version\",\n+                                        String.format(dAPath, contentlet.getInode(),\n+                                                field.variable(), conBinary.getName()));\n+                                map.put(field.variable(),\n+                                        String.format(dAPath, contentlet.getIdentifier(),\n+                                                field.variable(), conBinary.getName()));\n+                                map.put(field.variable() + \"ContentAsset\",\n+                                        contentlet.getIdentifier() + \"/\" + field.variable());\n+                            }\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    Logger.warn(this,\n+                            \"Unable to get Binary from field with var \" + field.variable());\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * return categories as a list of key/values where the key is the categoryKey and the value is\n+     * the categoryName\n+     */\n+    private void addCategories(final Contentlet contentlet, final Map<String, Object> map,\n+            final Set<TransformOptions> options, final User user) {\n+        final boolean allCategoriesInfo = options.contains(CATEGORIES_INFO);\n+        final boolean includeCategoryName = options.contains(CATEGORIES_NAME);\n+        if (includeCategoryName || allCategoriesInfo) {\n+            try {\n+                final List<Category> cats = toolBox.categoryAPI.getParents(contentlet, user, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDEzMzI5", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427413329", "createdAt": "2020-06-09T18:04:12Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowNDoxMlrOGhWM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowNDoxMlrOGhWM6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxOTk0Nw==", "bodyText": "Same todo here to replace by metadata", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437619947", "createdAt": "2020-06-09T18:04:12Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/DotAssetViewStrategy.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.dotmarketing.portlets.contentlet.transform.strategy;\n+\n+import static com.dotmarketing.portlets.contentlet.transform.strategy.TransformOptions.USE_ALIAS;\n+import static com.dotmarketing.portlets.fileassets.business.FileAssetAPI.FILE_NAME_FIELD;\n+import static com.dotmarketing.portlets.fileassets.business.FileAssetAPI.MIMETYPE_FIELD;\n+import static com.dotmarketing.portlets.fileassets.business.FileAssetAPI.TITLE_FIELD;\n+import static com.dotmarketing.util.UtilHTML.getIconClass;\n+import static com.dotmarketing.util.UtilHTML.getStatusIcons;\n+import static com.dotmarketing.util.UtilMethods.getFileExtension;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import java.io.File;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * This class should take care of the transformation of asset of type dotAsset\n+ */\n+public class DotAssetViewStrategy extends WebAssetStrategy<Contentlet> {\n+\n+    private static final String ASSET = \"asset\";\n+\n+    /**\n+     * Main constructor\n+     * @param toolBox\n+     */\n+    DotAssetViewStrategy(final TransformToolbox toolBox) {\n+        super(toolBox);\n+    }\n+\n+    /**\n+     * Concrete type transform method\n+     * @param dotAsset\n+     * @param map\n+     * @param options\n+     * @param user\n+     * @return\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Override\n+    protected Map<String, Object> transform(final Contentlet dotAsset,\n+            final Map<String, Object> map,\n+            final Set<TransformOptions> options, final User user)\n+            throws DotDataException, DotSecurityException {\n+\n+        String fileName = \"unknown\";\n+        long fileSize = 0L;\n+        try {\n+            final File asset = dotAsset.getBinary(ASSET);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NDE0MDUw", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427414050", "createdAt": "2020-06-09T18:05:11Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTc5MzQy", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427579342", "createdAt": "2020-06-09T22:07:31Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjAwODg4", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427600888", "createdAt": "2020-06-09T22:57:29Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjo1NzoyOVrOGhfL2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjo1NzoyOVrOGhfL2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2NzEyOQ==", "bodyText": "are these comparison correct?\nAssert.assertEquals(folderMap.get(\"title\"), folder.getName());\nAssert.assertEquals(folderMap.get(\"description\"), folder.getTitle());", "url": "https://github.com/dotCMS/core/pull/18559#discussion_r437767129", "createdAt": "2020-06-09T22:57:29Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/DotFolderTransformerTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.dotmarketing.portlets.contentlet.transform;\n+\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.IconType;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class DotFolderTransformerTest {\n+\n+    static Host site;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        final SiteDataGen siteDataGen = new SiteDataGen();\n+        site = siteDataGen.nextPersisted();\n+    }\n+\n+    /**\n+     * Given scenario: This is a simple test that expects Folder\n+     * Expected results:  A simple view must be returned.\n+     */\n+    @Test\n+    public void Test_GraphQL_View(){\n+\n+        final FolderDataGen folderDataGen = new FolderDataGen().site(site);\n+        final Folder folder = folderDataGen.nextPersisted();\n+\n+        final DotMapViewTransformer transformer = new DotFolderTransformerBuilder().withFolders(folder).build();\n+        final List<Map<String, Object>> maps = transformer.toMaps();\n+        Assert.assertEquals(\"Expecting 1 folder transformed\",1, maps.size());\n+        final Map<String, Object> map = maps.get(0);\n+\n+        final Map<String,Object> folderMap = (Map<String,Object>)map.get(\"folderMap\");\n+        Assert.assertEquals(folderMap.get(\"folderId\"), folder.getIdentifier());\n+        Assert.assertEquals(folderMap.get(\"folderFileMask\"), folder.getFilesMasks());\n+        Assert.assertEquals(folderMap.get(\"folderSortOrder\"), folder.getSortOrder());\n+        Assert.assertEquals(folderMap.get(\"folderName\"), folder.getName());\n+        Assert.assertEquals(folderMap.get(\"folderPath\"), folder.getPath());\n+        Assert.assertEquals(folderMap.get(\"folderTitle\"), folder.getTitle());\n+        Assert.assertEquals(folderMap.get(\"folderDefaultFileType\"), folder.getDefaultFileType());\n+     }\n+\n+    /**\n+     * Given scenario: This is a simple test that expects a user and set of given roles\n+     * Expected results: If the User has read permissions over a folder then you'll get a view.\n+     */\n+    @Test\n+    public void Test_SiteBrowse_View() throws Exception{\n+\n+        final FolderDataGen folderDataGen = new FolderDataGen().site(site);\n+        final Folder folder = folderDataGen.nextPersisted();\n+\n+        final User admin = TestUserUtils.getAdminUser();\n+        final Role adminRole = APILocator.getRoleAPI().loadCMSAdminRole();\n+\n+        final DotMapViewTransformer transformer = new DotFolderTransformerBuilder().withFolders(folder).withUserAndRoles(admin, adminRole).build();\n+        final List<Map<String, Object>> maps = transformer.toMaps();\n+        Assert.assertEquals(\"Expecting 1 folder transformed\",1, maps.size());\n+        final Map<String, Object> folderMap = maps.get(0);\n+\n+        Assert.assertEquals(folderMap.get(\"parent\"), folder.getInode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjA2MTk2", "url": "https://github.com/dotCMS/core/pull/18559#pullrequestreview-427606196", "createdAt": "2020-06-09T23:10:29Z", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fdc6461dc51e9b06a797a8a2c102be9a16d2ec5", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3fdc6461dc51e9b06a797a8a2c102be9a16d2ec5", "committedDate": "2020-06-10T16:30:35Z", "message": "#18286 fedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dddb8259e8cb65f2e78561f24188cad4e4afc4df", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/dddb8259e8cb65f2e78561f24188cad4e4afc4df", "committedDate": "2020-06-11T12:33:14Z", "message": "#18286"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea687a083d5f13c6f01ddd0c5c34bca4ecf752b", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0ea687a083d5f13c6f01ddd0c5c34bca4ecf752b", "committedDate": "2020-06-11T22:14:35Z", "message": "##18286 - adding memoization to some getters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1493449a1b3c0d1f6fd4882ec5646bfae5de2494", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/1493449a1b3c0d1f6fd4882ec5646bfae5de2494", "committedDate": "2020-06-11T22:20:26Z", "message": "#18286   bump up fileassets cache just a bit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 872, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}