{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5Mjc4MDU0", "number": 19495, "title": "Fixing IT", "bodyText": "The old way to populate columns did not consider multiple inodes for the same identifier", "createdAt": "2020-10-23T23:17:41Z", "url": "https://github.com/dotCMS/core/pull/19495", "merged": true, "mergeCommit": {"oid": "45b0f0ec8a1f5cf4bc1d91741d6da679033b4d1f"}, "closed": true, "closedAt": "2020-10-26T20:20:23Z", "author": {"login": "nollymar"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVfAExgH2gAyNTA5Mjc4MDU0OjA4MDZlZmVkNmE0NjE3OTNlZmVhZDhhNzljMDgzZjYwN2I4ZDM1N2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWWx3kgFqTUxNjk0NTQwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/0806efed6a461793efead8a79c083f607b8d357d", "committedDate": "2020-10-23T23:16:47Z", "message": "Fixing IT. The old way to populate columns did not consider multiple inodes for the same identifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTMz", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077133", "createdAt": "2020-10-23T23:24:15Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxNlrOHng4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxNlrOHng4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTI5Ng==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195296", "createdAt": "2020-10-23T23:24:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 165}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTM2", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077136", "createdAt": "2020-10-23T23:24:16Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxNlrOHng4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxNlrOHng4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTI5Nw==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195297", "createdAt": "2020-10-23T23:24:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\")\n+                .append(\"WHEN MATCHED THEN\\n\")\n+                .append(\"    UPDATE SET ident.owner = st.iowner,\\n\")\n+                .append(\"               ident.create_date = st.idate;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsPostgres(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier set owner=iowner, create_date=idate from\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from \")\n+                .append(tableName).append(\", inode \\n\")\n+                .append(\"where inode.inode=\").append(tableName).append(\".inode group by identifier) custom_select  \\n\")\n+                .append(\" where temp.identifier=custom_select.identifier\\n\")\n+                .append(\" and inode.inode=temp.inode and inode.idate=custom_select.idate) my_query\\n\")\n+                .append(\" where  id=myID;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsMySQL(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier ident,\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 236}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTQw", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077140", "createdAt": "2020-10-23T23:24:18Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOFrOHng4pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOFrOHng4pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMwMg==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195302", "createdAt": "2020-10-23T23:24:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTQz", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077143", "createdAt": "2020-10-23T23:24:18Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOVrOHng4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOVrOHng4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMwNA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195304", "createdAt": "2020-10-23T23:24:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTQ3", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077147", "createdAt": "2020-10-23T23:24:19Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOVrOHng4qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoxOVrOHng4qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMwNg==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195306", "createdAt": "2020-10-23T23:24:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTQ5", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077149", "createdAt": "2020-10-23T23:24:20Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMFrOHng4qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMFrOHng4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMwNw==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195307", "createdAt": "2020-10-23T23:24:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 209}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTUw", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077150", "createdAt": "2020-10-23T23:24:21Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMVrOHng4rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMVrOHng4rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMwOA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 4 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195308", "createdAt": "2020-10-23T23:24:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\")\n+                .append(\"WHEN MATCHED THEN\\n\")\n+                .append(\"    UPDATE SET ident.owner = st.iowner,\\n\")\n+                .append(\"               ident.create_date = st.idate;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsPostgres(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier set owner=iowner, create_date=idate from\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from \")\n+                .append(tableName).append(\", inode \\n\")\n+                .append(\"where inode.inode=\").append(tableName).append(\".inode group by identifier) custom_select  \\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 228}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTU0", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077154", "createdAt": "2020-10-23T23:24:22Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMlrOHng4rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyMlrOHng4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMxMA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 3 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195310", "createdAt": "2020-10-23T23:24:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTU4", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077158", "createdAt": "2020-10-23T23:24:23Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyM1rOHng4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyM1rOHng4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMxNA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195314", "createdAt": "2020-10-23T23:24:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\")\n+                .append(\"WHEN MATCHED THEN\\n\")\n+                .append(\"    UPDATE SET ident.owner = st.iowner,\\n\")\n+                .append(\"               ident.create_date = st.idate;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsPostgres(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier set owner=iowner, create_date=idate from\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from \")\n+                .append(tableName).append(\", inode \\n\")\n+                .append(\"where inode.inode=\").append(tableName).append(\".inode group by identifier) custom_select  \\n\")\n+                .append(\" where temp.identifier=custom_select.identifier\\n\")\n+                .append(\" and inode.inode=temp.inode and inode.idate=custom_select.idate) my_query\\n\")\n+                .append(\" where  id=myID;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsMySQL(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate  from \")\n+                .append(tableName).append(\" temp, inode,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from \").append(tableName)\n+                .append(\", inode \\n\").append(\"where inode.inode=\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 240}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTYx", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077161", "createdAt": "2020-10-23T23:24:23Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyM1rOHng4tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyM1rOHng4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMxNw==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195317", "createdAt": "2020-10-23T23:24:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTY1", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077165", "createdAt": "2020-10-23T23:24:24Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNFrOHng4uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNFrOHng4uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMyMQ==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195321", "createdAt": "2020-10-23T23:24:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTY5", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077169", "createdAt": "2020-10-23T23:24:25Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNVrOHng4vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNVrOHng4vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMyNQ==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195325", "createdAt": "2020-10-23T23:24:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTcy", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077172", "createdAt": "2020-10-23T23:24:26Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNlrOHng4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyNlrOHng4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMyOA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195328", "createdAt": "2020-10-23T23:24:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MTc0", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077174", "createdAt": "2020-10-23T23:24:27Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyN1rOHng4wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyN1rOHng4wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMzMA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195330", "createdAt": "2020-10-23T23:24:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MjAw", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077200", "createdAt": "2020-10-23T23:24:27Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOFrOHng4yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOFrOHng4yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTMzNw==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 8 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195337", "createdAt": "2020-10-23T23:24:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MjI5", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077229", "createdAt": "2020-10-23T23:24:28Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOFrOHng4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOFrOHng4zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM0Mw==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 7 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195343", "createdAt": "2020-10-23T23:24:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MjUz", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077253", "createdAt": "2020-10-23T23:24:29Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOVrOHng40w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDoyOVrOHng40w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM0Nw==", "bodyText": "Codacy found an issue: The String literal \"where temp.identifier=custom_select.identifier\\n\" appears 5 times in this file; the first occurrence is on line 38", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195347", "createdAt": "2020-10-23T23:24:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3Mjg1", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077285", "createdAt": "2020-10-23T23:24:30Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMFrOHng41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMFrOHng41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM1MQ==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195351", "createdAt": "2020-10-23T23:24:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\")\n+                .append(\"WHEN MATCHED THEN\\n\")\n+                .append(\"    UPDATE SET ident.owner = st.iowner,\\n\")\n+                .append(\"               ident.create_date = st.idate;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsPostgres(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier set owner=iowner, create_date=idate from\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from \")\n+                .append(tableName).append(\", inode \\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 227}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3Mjk2", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077296", "createdAt": "2020-10-23T23:24:31Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMVrOHng42g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMVrOHng42g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM1NA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195354", "createdAt": "2020-10-23T23:24:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3Mjk4", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077298", "createdAt": "2020-10-23T23:24:32Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMlrOHng43A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozMlrOHng43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM1Ng==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 8 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195356", "createdAt": "2020-10-23T23:24:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3Mjk5", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077299", "createdAt": "2020-10-23T23:24:33Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozM1rOHng43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozM1rOHng43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM1OA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195358", "createdAt": "2020-10-23T23:24:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MzAz", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077303", "createdAt": "2020-10-23T23:24:34Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNFrOHng44A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNFrOHng44A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM2MA==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 2 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195360", "createdAt": "2020-10-23T23:24:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return getPostgresScript();\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    private String getQueryToUpdateNonContentletsOracle(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"MERGE INTO identifier ident\\n\")\n+                .append(\"    USING\\n\")\n+                .append(\"(select distinct temp.identifier myID, owner iowner, inode.idate idate from \")\n+                .append(tableName).append(\" temp, inode, \\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from \")\n+                .append(tableName).append(\", inode where inode.inode=\")\n+                .append(tableName).append(\".inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate)\\n\")\n+                .append(\"st ON (ident.id = st.myID) \\n\")\n+                .append(\"WHEN MATCHED THEN\\n\")\n+                .append(\"    UPDATE SET ident.owner = st.iowner,\\n\")\n+                .append(\"               ident.create_date = st.idate;\\n\").toString();\n+    }\n+\n+    private String getQueryToUpdateNonContentletsPostgres(final String tableName){\n+        final StringBuilder query = new StringBuilder();\n+        return query.append(\"update identifier set owner=iowner, create_date=idate from\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 223}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MzA0", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077304", "createdAt": "2020-10-23T23:24:35Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNVrOHng44g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNVrOHng44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM2Mg==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called 10 consecutive times with literals. Use a single append with a single combined String.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195362", "createdAt": "2020-10-23T23:24:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDc3MzA3", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516077307", "createdAt": "2020-10-23T23:24:35Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNVrOHng45Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QyMzoyNDozNVrOHng45Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE5NTM2NQ==", "bodyText": "Codacy found an issue: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/19495#discussion_r511195365", "createdAt": "2020-10-23T23:24:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task201014UpdateColumnsValuesInIdentifierTable.java", "diffHunk": "@@ -1,102 +1,166 @@\n package com.dotmarketing.startup.runonce;\n \n-import com.dotmarketing.common.db.DotConnect;\n-import com.dotmarketing.db.DbConnectionFactory;\n-import com.dotmarketing.exception.DotDataException;\n-import com.dotmarketing.exception.DotRuntimeException;\n-import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n \n /**\n  * Task used to populate fields: owner, create_date, asset_subtype of the identifier table\n  */\n-public class Task201014UpdateColumnsValuesInIdentifierTable implements StartupTask {\n-\n-    protected static final String UPDATE_CONTENTLETS =\n-            \"update identifier as ident, \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, struc.velocity_var_name asset_subtype \"\n-                    + \"from contentlet cont, inode inode, structure struc where inode.inode=cont.inode and cont.structure_inode = struc.inode) \"\n-                    + \"as q set ident.owner=q.i_owner, ident.create_date=q.create_date, ident.asset_subtype=q.asset_subtype  where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_CONTENTLETS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date, asset_subtype=q.asset_subtype from \"\n-                    + \"(select cont.identifier, cont.mod_user i_owner, inode.idate create_date, \"\n-                    + \"struc.velocity_var_name asset_subtype from contentlet cont, \"\n-                    + \"inode inode, structure struc \"\n-                    + \"where inode.inode=cont.inode \"\n-                    + \"and cont.structure_inode = struc.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from folder, inode where inode.inode=folder.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_FOLDER_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from folder, inode \"\n-                    + \"where inode.inode=folder.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode where inode.inode=dot_containers.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    private static final String UPDATE_CONTAINERS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from dot_containers, inode \"\n-                    + \"where inode.inode=dot_containers.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_TEMPLATES = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from template, inode where inode.inode=template.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected static final String UPDATE_TEMPLATES_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from template, inode \"\n-                    + \"where inode.inode=template.inode) q where id=q.identifier\";\n-\n-    private static final String UPDATE_LINKS = \"update identifier as ident, \"\n-            + \"(select identifier, owner i_owner, idate create_date from links, inode where inode.inode=links.inode) as q \"\n-            + \"set ident.owner=q.i_owner, ident.create_date=q.create_date \"\n-            + \"where ident.id=q.identifier\";\n-\n-    protected final static String UPDATE_LINKS_POSTGRESQL =\n-            \"update identifier set owner=q.i_owner, create_date=q.create_date from \"\n-                    + \"(select identifier, owner i_owner, idate create_date from links, inode \"\n-                    + \"where inode.inode=links.inode) q where id=q.identifier\";\n+public class Task201014UpdateColumnsValuesInIdentifierTable extends AbstractJDBCStartupTask {\n \n     @Override\n     public boolean forceRun() {\n         return true;\n     }\n \n     @Override\n-    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+    public String getPostgresScript() {\n \n-        final DotConnect dotConnect = new DotConnect()\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTENTLETS_POSTGRESQL\n-                        : UPDATE_CONTENTLETS);\n-        dotConnect.loadResult();\n+        final StringBuilder query = new StringBuilder();\n \n-        // update owner, create_date and asset_subtype for folders\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_FOLDER_POSTGRESQL\n-                : UPDATE_FOLDER);\n-        dotConnect.loadResult();\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"template\"));\n \n-        // update owner, create_date and asset_subtype for containers\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_CONTAINERS_POSTGRESQL\n-                : UPDATE_CONTAINERS);\n-        dotConnect.loadResult();\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"dot_containers\"));\n \n-        // update owner, create_date and asset_subtype for templates\n-        dotConnect.setSQL(DbConnectionFactory.isPostgres() ? UPDATE_TEMPLATES_POSTGRESQL\n-                : UPDATE_TEMPLATES);\n-        dotConnect.loadResult();\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"links\"));\n \n-        // update owner, create_date and asset_subtype for links\n-        dotConnect\n-                .setSQL(DbConnectionFactory.isPostgres() ? UPDATE_LINKS_POSTGRESQL : UPDATE_LINKS);\n-        dotConnect.loadResult();\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsPostgres(\"folder\"));\n \n+        //update contentlets\n+        query.append(\"update identifier set owner=mod_user, create_date=idate, asset_subtype=velocity_var_name from\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) idate from contentlet, inode \\n\")\n+                .append(\"where inode.inode=contentlet.inode group by identifier) custom_select  \\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\" where  id=myID;\\n\");\n+\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsMySQL(\"folder\"));\n+\n+        //update contentlets\n+        query.append(\"update identifier ident,\\n\")\n+                .append(\"(select distinct temp.identifier myID, temp.mod_user, inode.idate, \")\n+                .append(\"struc.velocity_var_name  from contentlet temp, inode, structure struc,\\n\")\n+                .append(\"(select identifier, MIN(idate) as idate from contentlet, inode where \")\n+                .append(\"inode.inode=contentlet.inode group by identifier) custom_select\\n\")\n+                .append(\"where temp.identifier=custom_select.identifier\\n\")\n+                .append(\"and inode.inode=temp.inode and inode.idate=custom_select.idate \\n\")\n+                .append(\"and temp.structure_inode = struc.inode) my_query\\n\")\n+                .append(\"set ident.owner=my_query.mod_user, ident.create_date=my_query.idate\\n\")\n+                .append(\"where ident.id=my_query.myID;\");\n+\n+        return query.toString();\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+\n+        final StringBuilder query = new StringBuilder();\n+\n+        //update templates\n+        query.append(getQueryToUpdateNonContentletsOracle(\"template\"));\n+\n+        //update containers\n+        query.append(getQueryToUpdateNonContentletsOracle(\"dot_containers\"));\n+\n+        //update links\n+        query.append(getQueryToUpdateNonContentletsOracle(\"links\"));\n+\n+        //update folders\n+        query.append(getQueryToUpdateNonContentletsOracle(\"folder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "originalPosition": 174}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODk4OTcz", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516898973", "createdAt": "2020-10-26T15:30:07Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTQ1NDA2", "url": "https://github.com/dotCMS/core/pull/19495#pullrequestreview-516945406", "createdAt": "2020-10-26T16:15:57Z", "commit": {"oid": "0806efed6a461793efead8a79c083f607b8d357d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1787, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}