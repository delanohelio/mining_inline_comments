{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDgwNDg4", "number": 19462, "title": "#19424 A regex pattern is used to extract the task id to support calver notation", "bodyText": "The substring to extract the task id was replaced by a regex expression to support several lengths.", "createdAt": "2020-10-16T20:13:31Z", "url": "https://github.com/dotCMS/core/pull/19462", "merged": true, "mergeCommit": {"oid": "66291ab76d2c3864849b6cc6320ba3375263af45"}, "closed": true, "closedAt": "2020-10-19T16:12:55Z", "author": {"login": "nollymar"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTMKUuAH2gAyNTA1MDgwNDg4OjFkNTg1ZjQzNDU0ZTk2MjMyM2UyZmNkZjY2YmQ4NDgwYTNmNWM3ZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUFigQAFqTUxMTg2Mjg3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/1d585f43454e962323e2fcdf66bd8480a3f5c7d3", "committedDate": "2020-10-16T20:11:56Z", "message": "#19424 A regex pattern is used to extract the task id to support calver notation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzc2NDEx", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-510776411", "createdAt": "2020-10-16T20:23:37Z", "commit": {"oid": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoyMzozN1rOHjOv0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoyMzozN1rOHjOv0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMzgyNw==", "bodyText": "it is usually a good idea to have the pattern Compile declared static as it is immutable. and therefore thread-safe.\nThe matcher has to be recreated every time.  So I would  move final Pattern pattern = Pattern.compile(\"[0-9]+\"); to a static constant.", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r506703827", "createdAt": "2020-10-16T20:23:37Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java", "diffHunk": "@@ -149,9 +152,22 @@ public void executeStartUpTasks() throws DotDataException {\n \n         \n     }\n-    \n-    \n-    \n+\n+    /**\n+     * Returns the id part of a task name\n+     * @param taskName\n+     * @return\n+     */\n+    @VisibleForTesting\n+    String getTaskId(final String taskName){\n+        final Pattern pattern = Pattern.compile(\"[0-9]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzc2NzEy", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-510776712", "createdAt": "2020-10-16T20:24:11Z", "commit": {"oid": "1d585f43454e962323e2fcdf66bd8480a3f5c7d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80deb82826439dad9c6573b3fbceda4c1f874c58", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/80deb82826439dad9c6573b3fbceda4c1f874c58", "committedDate": "2020-10-16T21:47:14Z", "message": "#19424 Applying code review suggestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4036ad7a45795becd6675a319bb0f841c3da127", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/f4036ad7a45795becd6675a319bb0f841c3da127", "committedDate": "2020-10-16T22:11:06Z", "message": "#19424 Including new IT in MainSuite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODI4OTEy", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-510828912", "createdAt": "2020-10-16T22:23:27Z", "commit": {"oid": "f4036ad7a45795becd6675a319bb0f841c3da127"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/8c26d320769d376686fe73a79ef43a66769098f5", "committedDate": "2020-10-19T14:52:15Z", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-19424-update-logic-in-StartupTasksExecutor-to-support-calver"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODYyODE5", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-511862819", "createdAt": "2020-10-19T15:02:52Z", "commit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1MlrOHkTQYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1MlrOHkTQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjI3Mg==", "bodyText": "Codacy found an issue: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826272", "createdAt": "2020-10-19T15:02:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/StartupTasksExecutor.java", "diffHunk": "@@ -169,7 +184,7 @@ public void executeUpgrades() throws DotDataException {\n         for (Class<?> c : TaskLocatorUtil.getStartupRunOnceTaskClasses()) {\n             name = c.getCanonicalName();\n             name = name.substring(name.lastIndexOf(\".\") + 1);\n-            String id = name.substring(4, 9);\n+            String id = getTaskId(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODYyODI5", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-511862829", "createdAt": "2020-10-19T15:02:53Z", "commit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1M1rOHkTQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1M1rOHkTQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjI4Nw==", "bodyText": "Codacy found an issue: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826287", "createdAt": "2020-10-19T15:02:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODYyODQ3", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-511862847", "createdAt": "2020-10-19T15:02:54Z", "commit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1NFrOHkTQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1NFrOHkTQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjMwMg==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826302", "createdAt": "2020-10-19T15:02:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider\n+    public static Object [] testCases() {\n+        return new TestCase []{\n+                new TestCase(\"201009\", \"Task201009TestMethod\"),\n+                new TestCase(\"2010091\", \"Task2010091TestMethod\"),\n+                new TestCase(\"05030\", \"Task05030TestMethod\")\n+        };\n+    }\n+\n+    private static class TestCase{\n+        String taskId;\n+        String taskName;\n+\n+        public TestCase(final String taskId, final String taskName){\n+            this.taskId = taskId;\n+            this.taskName = taskName;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODYyODcw", "url": "https://github.com/dotCMS/core/pull/19462#pullrequestreview-511862870", "createdAt": "2020-10-19T15:02:55Z", "commit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1NVrOHkTQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNTowMjo1NVrOHkTQlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNjMyNA==", "bodyText": "Codacy found an issue: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/19462#discussion_r507826324", "createdAt": "2020-10-19T15:02:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/StartupTasksExecutorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.dotmarketing.startup;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class StartupTasksExecutorTest {\n+\n+    @DataProvider\n+    public static Object [] testCases() {\n+        return new TestCase []{\n+                new TestCase(\"201009\", \"Task201009TestMethod\"),\n+                new TestCase(\"2010091\", \"Task2010091TestMethod\"),\n+                new TestCase(\"05030\", \"Task05030TestMethod\")\n+        };\n+    }\n+\n+    private static class TestCase{\n+        String taskId;\n+        String taskName;\n+\n+        public TestCase(final String taskId, final String taskName){\n+            this.taskId = taskId;\n+            this.taskName = taskName;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link StartupTasksExecutor#getTaskId(String)}\n+     * Test case: A task name whose id has a specific length\n+     * Expected result: It should extract the length correctly\n+     * @param testCase\n+     */\n+    @Test\n+    @UseDataProvider(\"testCases\")\n+    public void testGetTaskId(TestCase testCase){\n+        final String id = StartupTasksExecutor.getInstance().getTaskId(testCase.taskName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c26d320769d376686fe73a79ef43a66769098f5"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1746, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}