{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjQ2MzMx", "number": 18608, "title": "#18427 fixing bugs", "bodyText": "After QA adding a fixes.", "createdAt": "2020-06-05T06:19:10Z", "url": "https://github.com/dotCMS/core/pull/18608", "merged": true, "mergeCommit": {"oid": "b590161e5c49148a85257602a41fdb58f652034a"}, "closed": true, "closedAt": "2020-06-08T17:05:42Z", "author": {"login": "jdotcms"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoMhqegH2gAyNDI4MjQ2MzMxOmU4ZTNiNzc4NjBlMjdlMzg3YzczOWQ3YjFiYjdhNTQzMmVjZTU1ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpTYungFqTQyNjQyOTY0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8e3b77860e27e387c739d7b1bb7a5432ece55eb", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/e8e3b77860e27e387c739d7b1bb7a5432ece55eb", "committedDate": "2020-06-05T06:18:41Z", "message": "#18427 fixing bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzMwMTM1", "url": "https://github.com/dotCMS/core/pull/18608#pullrequestreview-425330135", "createdAt": "2020-06-05T14:02:34Z", "commit": {"oid": "e8e3b77860e27e387c739d7b1bb7a5432ece55eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowMjozNVrOGfv4cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDowMjozNVrOGfv4cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MzUzOQ==", "bodyText": "I think is weird a Precondition in a catch block", "url": "https://github.com/dotCMS/core/pull/18608#discussion_r435943539", "createdAt": "2020-06-05T14:02:35Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -120,28 +121,38 @@ private Contentlet getContentlet(final String inode,\n                                      final PageMode pageMode) throws DotDataException, DotSecurityException {\n \n         Contentlet contentlet = null;\n-        PageMode mode         = pageMode;\n+        try {\n+            PageMode mode = pageMode;\n \n-        if(UtilMethods.isSet(inode)) {\n+            if (UtilMethods.isSet(inode)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n-            contentlet = this.contentletAPI.find\n-                    (inode, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by inode: \" + inode);\n+                contentlet = this.contentletAPI.find\n+                        (inode, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.notNull(contentlet, ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-        } else if (UtilMethods.isSet(identifier)) {\n+                DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+            } else if (UtilMethods.isSet(identifier)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by identifier: \" + identifier);\n-            mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n-            final Optional<Contentlet> currentContentlet =  language <= 0?\n-                    Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n-                            sessionLanguage.get(), initDataObject.getUser() , mode.respectAnonPerms)):\n-                    this.contentletAPI.findContentletByIdentifierOrFallback\n-                            (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by identifier: \" + identifier);\n+                mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n+                final Optional<Contentlet> currentContentlet = language <= 0 ?\n+                        Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n+                                sessionLanguage.get(), initDataObject.getUser(), mode.respectAnonPerms)) :\n+                        this.contentletAPI.findContentletByIdentifierOrFallback\n+                                (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.isTrue(currentContentlet.isPresent(), ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-            contentlet = currentContentlet.get();\n+                DotPreconditions.isTrue(currentContentlet.isPresent(), () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+                contentlet = currentContentlet.get();\n \n+            }\n+        } catch (DoesNotExistException e) {\n+\n+            throw e;\n+        } catch(DotRuntimeException e) {\n+\n+            Logger.error(this, e.getMessage(), e);\n+            DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8e3b77860e27e387c739d7b1bb7a5432ece55eb"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3059fbbee41dce94e203ff783bfa81f0c6cf78a1", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/3059fbbee41dce94e203ff783bfa81f0c6cf78a1", "committedDate": "2020-06-05T16:31:43Z", "message": "#18427 404 postman test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da4ed5597f15a2c9d550f6775ef46c039dafe7d", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/7da4ed5597f15a2c9d550f6775ef46c039dafe7d", "committedDate": "2020-06-05T19:26:31Z", "message": "#18427 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/fef850e59cf48beedf7aee708e62a0ff534a3ef9", "committedDate": "2020-06-08T16:16:03Z", "message": "#18427 fixing issues on resource link"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDA1OTM5", "url": "https://github.com/dotCMS/core/pull/18608#pullrequestreview-426405939", "createdAt": "2020-06-08T16:22:09Z", "commit": {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMjowOVrOGgmK0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMjowOVrOGgmK0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMjk3OA==", "bodyText": "Issue found: A catch statement that catches an exception only to rethrow it should be avoided.", "url": "https://github.com/dotCMS/core/pull/18608#discussion_r436832978", "createdAt": "2020-06-08T16:22:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -120,28 +134,38 @@ private Contentlet getContentlet(final String inode,\n                                      final PageMode pageMode) throws DotDataException, DotSecurityException {\n \n         Contentlet contentlet = null;\n-        PageMode mode         = pageMode;\n+        try {\n+            PageMode mode = pageMode;\n \n-        if(UtilMethods.isSet(inode)) {\n+            if (UtilMethods.isSet(inode)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n-            contentlet = this.contentletAPI.find\n-                    (inode, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by inode: \" + inode);\n+                contentlet = this.contentletAPI.find\n+                        (inode, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.notNull(contentlet, ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-        } else if (UtilMethods.isSet(identifier)) {\n+                DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+            } else if (UtilMethods.isSet(identifier)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by identifier: \" + identifier);\n-            mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n-            final Optional<Contentlet> currentContentlet =  language <= 0?\n-                    Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n-                            sessionLanguage.get(), initDataObject.getUser() , mode.respectAnonPerms)):\n-                    this.contentletAPI.findContentletByIdentifierOrFallback\n-                            (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by identifier: \" + identifier);\n+                mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n+                final Optional<Contentlet> currentContentlet = language <= 0 ?\n+                        Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n+                                sessionLanguage.get(), initDataObject.getUser(), mode.respectAnonPerms)) :\n+                        this.contentletAPI.findContentletByIdentifierOrFallback\n+                                (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.isTrue(currentContentlet.isPresent(), ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-            contentlet = currentContentlet.get();\n+                DotPreconditions.isTrue(currentContentlet.isPresent(), () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+                contentlet = currentContentlet.get();\n \n+            }\n+        } catch (DoesNotExistException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDE1ODM2", "url": "https://github.com/dotCMS/core/pull/18608#pullrequestreview-426415836", "createdAt": "2020-06-08T16:34:19Z", "commit": {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDI5NjQz", "url": "https://github.com/dotCMS/core/pull/18608#pullrequestreview-426429643", "createdAt": "2020-06-08T16:52:11Z", "commit": {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 906, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}