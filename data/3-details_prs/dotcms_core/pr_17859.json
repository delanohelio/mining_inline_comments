{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MjQzNjY1", "number": 17859, "title": "Issue 16684 vanity url forward to url map pattern results in 404", "bodyText": "The fix was use the HTMLPageAssetRenderedAPI into the VelocityServlet this API has the URL Mapper logic:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-649328ff21d8eacd69736b13e6d0208eR69\nAlso the VelocityHandlerMode was refactoring to add a modeHandler method who receive the htmlPage directly:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-8aaa91d048a2b9c6c8fac2ca7dc1c044R110\nsometime having the htmlPage we pass just the uri to the modeHandler method and then into the method, the htmlPage has been searched with the uri.\nAlso this change force another change like change the VelocityModeHandler constructor:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-7bc57b682cdfb11d83645cc67f7bf169R17\nand how we are getting the Identifier into the VelocityModeHandler classes:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-b418f48462e78c28b7053d80f7bc6ed5R64\nand how we are getting the uri too:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-b418f48462e78c28b7053d80f7bc6ed5R88\nAlso we had a error in the VelocityNavigateEditMode because here\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-577f6bb5941993d16e20a43aa60f35e2R79\nwe was writing directly into the response and we was not using the OutputStream pass as parameters instead.\nAlso the URLMapFilter was removed to avoid duplicated code, also this filter is not need anymore because the VelocityServlet is using the API now, also with this change we are avoiding execute a this filter with every request.\nfinally I did a refactoring in HTMLPageAssetRenderedAPIImpl:\nhttps://github.com/dotCMS/core/compare/issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404?expand=1#diff-051d49b06feb0c7462b349b6b61988a8R60", "createdAt": "2020-01-17T17:25:12Z", "url": "https://github.com/dotCMS/core/pull/17859", "merged": true, "mergeCommit": {"oid": "197c338287f5b7cbc9728fd280a337dd59e7e8e8"}, "closed": true, "closedAt": "2020-01-22T16:57:08Z", "author": {"login": "freddyucv"}, "timelineItems": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb1gq1kAH2gAyMzY0MjQzNjY1OmVjNjFiMDE2ZjM3MzBhZWM3OTExM2Y2MWI5Zjk4ZjgzYjc2MDc4M2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8mv-pgFqTM0NjE1MjQ3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec61b016f3730aec79113f61b9f98f83b760783f", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/ec61b016f3730aec79113f61b9f98f83b760783f", "committedDate": "2019-12-30T18:56:40Z", "message": "using HTMLPageAssetRenderedAPI into VelocityServlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0f22e9f54ad25e484f40b61ddbf48cc53a8a9b4", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/e0f22e9f54ad25e484f40b61ddbf48cc53a8a9b4", "committedDate": "2019-12-30T20:31:11Z", "message": "Fixing error when navigate between page into edit page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f414b9974908ab816e654cce9617a1d18d30da6", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/5f414b9974908ab816e654cce9617a1d18d30da6", "committedDate": "2020-01-02T18:23:53Z", "message": "Fixing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97637cf4847fa9368ed67f4258a71bf93d282b0f", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/97637cf4847fa9368ed67f4258a71bf93d282b0f", "committedDate": "2020-01-09T20:07:00Z", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e414190c50192ae769852e9825b3359c97bc84a2", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/e414190c50192ae769852e9825b3359c97bc84a2", "committedDate": "2020-01-15T12:45:11Z", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e2c42eb51b8649bf8c3a778e592d57bad6e9fc1", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/4e2c42eb51b8649bf8c3a778e592d57bad6e9fc1", "committedDate": "2020-01-15T14:00:18Z", "message": "pass the right PageMode through"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac725309e39a8c8d8a41251b2a472c26b469e32", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/3ac725309e39a8c8d8a41251b2a472c26b469e32", "committedDate": "2020-01-15T14:01:33Z", "message": "removing URLMapFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd7c1b49c8434be20e092c66ec6aa90e0c2ded6", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/2bd7c1b49c8434be20e092c66ec6aa90e0c2ded6", "committedDate": "2020-01-15T18:01:15Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a81083956f5439b2f706c798d4ca8e7af35f70", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/d0a81083956f5439b2f706c798d4ca8e7af35f70", "committedDate": "2020-01-15T18:09:01Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37af6ebf8c993360f29789139e28f9ab9bb356e2", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/37af6ebf8c993360f29789139e28f9ab9bb356e2", "committedDate": "2020-01-16T18:27:35Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c1563cc02192977dd725e61d28c52254f6abde", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a3c1563cc02192977dd725e61d28c52254f6abde", "committedDate": "2020-01-17T17:05:29Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/b94e4277fac4d115ca9b3bad653f778f2af92507", "committedDate": "2020-01-17T17:07:29Z", "message": "uncommenting code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQwNDY0", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344740464", "createdAt": "2020-01-17T17:47:36Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0NzozN1rOFfAhHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0NzozN1rOFfAhHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1ODY1Mw==", "bodyText": "Shouldn't we keep the former constructor for backward compatibility and deprecate it if necessary?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368058653", "createdAt": "2020-01-17T17:47:37Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityAdminMode.java", "diffHunk": "@@ -13,9 +14,9 @@\n  */\n public class VelocityAdminMode extends VelocityLiveMode {\n \n-    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final String uri,\n+    public VelocityAdminMode(final HttpServletRequest request, final HttpServletResponse response, final IHTMLPage htmlPage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQxMTM3", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344741137", "createdAt": "2020-01-17T17:48:58Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0ODo1OFrOFfAjKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0ODo1OFrOFfAjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTE3Nw==", "bodyText": "same here", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368059177", "createdAt": "2020-01-17T17:48:58Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityEditMode.java", "diffHunk": "@@ -23,46 +23,28 @@\n \n public class VelocityEditMode extends VelocityModeHandler {\n \n-    protected final HttpServletRequest request;\n-    protected final HttpServletResponse response;\n-    private static final PageMode mode = PageMode.EDIT_MODE;\n-    protected final String uri;\n-    private final Host host;\n     private final User user;\n     private final static String REORDER_MENU_URL=\"/c/portal/layout?p_l_id={0}&p_p_id=site-browser&p_p_action=1&p_p_state=maximized&_site_browser_struts_action=%2Fext%2Ffolders%2Forder_menu\";\n-    \n-    public VelocityEditMode(HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        this.request = request;\n-        this.response = response;\n-        this.uri = uri;\n-        this.host = host;\n-        this.user = WebAPILocator.getUserWebAPI().getUser(request);\n-    }\n \n-    public VelocityEditMode(HttpServletRequest request, HttpServletResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQxMzQ2", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344741346", "createdAt": "2020-01-17T17:49:24Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0OToyNFrOFfAjvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo0OToyNFrOFfAjvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1OTMyNg==", "bodyText": "same here", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368059326", "createdAt": "2020-01-17T17:49:24Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -35,29 +35,16 @@\n import java.util.Optional;\n \n public class VelocityLiveMode extends VelocityModeHandler {\n-\n-\n-\n-    private final HttpServletRequest request;\n-    private final HttpServletResponse response;\n-    private static final PageMode mode = PageMode.LIVE;\n-    private final String uri;\n-    private final Host host;\n-\n-\n-\n-    public VelocityLiveMode(HttpServletRequest request, HttpServletResponse response, String uri, Host host) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ3Mzg4", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344747388", "createdAt": "2020-01-17T18:01:11Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMToxMVrOFfA13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMToxMVrOFfA13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2Mzk2Ng==", "bodyText": "is it worth to add a Log.debug here? warning?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368063966", "createdAt": "2020-01-17T18:01:11Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java", "diffHunk": "@@ -67,13 +88,35 @@ public final String eval() {\n             throw new DotRuntimeException(e);\n         }\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, uri, host);\n+\n+    public static final VelocityModeHandler modeHandler(final PageMode mode, final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        // Find the current language\n+        final long langId = WebAPILocator.getLanguageWebAPI().getLanguage(request).getId();\n+\n+        try {\n+            // now we check identifier cache first (which DOES NOT have a 404 cache )\n+            final Identifier id = APILocator.getIdentifierAPI().find(host, uri);\n+\n+            final IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n+                    APILocator.systemUser(), mode.respectAnonPerms);\n+\n+            return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n+        } catch (DotDataException | DotSecurityException e) {\n+            throw new DotRuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ3NzU1", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344747755", "createdAt": "2020-01-17T18:01:52Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMTo1MlrOFfA3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMTo1MlrOFfA3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDI1Nw==", "bodyText": "The constructor signature changed here too", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368064257", "createdAt": "2020-01-17T18:01:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityNavigateEditMode.java", "diffHunk": "@@ -42,20 +40,17 @@\n                 \"window.top.document.dispatchEvent(customEvent);\" +\n             \"</script>\";\n \n-    public VelocityNavigateEditMode(final HttpServletRequest request,\n-                                    final HttpServletResponse response,\n-                                    final String uri,\n-                                    final Host host) {\n-        super();\n-        this.request = request;\n-        this.response = response;\n-        this.uri = uri;\n-        this.host = host;\n-        this.user = WebAPILocator.getUserWebAPI().getUser(request);\n-    }\n \n-    public VelocityNavigateEditMode(HttpServletRequest request, HttpServletResponse response) {\n-        this(request, response, request.getRequestURI(), hostWebAPI.getCurrentHostNoThrow(request));\n+    public VelocityNavigateEditMode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ4NTcy", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344748572", "createdAt": "2020-01-17T18:03:23Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMzoyNFrOFfA5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMzoyNFrOFfA5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NDg4Ng==", "bodyText": "is it worth to add a Log.debug ? or warning?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368064886", "createdAt": "2020-01-17T18:03:24Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "diffHunk": "@@ -530,4 +532,14 @@ public String getQueryStringFromUri(final String uri) {\n \t\t\t\turi.substring(indexOf+1):\n \t\t\t\tnull;\n \t}\n+\n+\tpublic static String getCurrentURI(final HttpServletRequest request)  {\n+\t\ttry {\n+\t\t\treturn URLDecoder.decode((request.getAttribute(Constants.CMS_FILTER_URI_OVERRIDE) != null)\n+\t\t\t\t\t? (String) request.getAttribute(Constants.CMS_FILTER_URI_OVERRIDE)\n+\t\t\t\t\t: request.getRequestURI(), \"UTF-8\");\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tthrow new DotRuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ4ODQy", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344748842", "createdAt": "2020-01-17T18:03:54Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMzo1NFrOFfA6Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowMzo1NFrOFfA6Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTA5NA==", "bodyText": "Log.debug or warning?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368065094", "createdAt": "2020-01-17T18:03:54Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -232,35 +245,43 @@ public String getPageHtml(\n                 throws DotSecurityException, DotDataException {\n \n         final Host host = this.hostWebAPI.getCurrentHost(request, context.getUser());\n-        final IHTMLPage page = getHtmlPageAsset(context, host, request).getHTMLPage();\n+        final HTMLPageUrl htmlPageUrl = getHtmlPageAsset(context, host, request);\n+        final IHTMLPage page = htmlPageUrl.getHTMLPage();\n \n         return new HTMLPageAssetRenderedBuilder()\n                 .setHtmlPageAsset(page)\n                 .setUser(context.getUser())\n                 .setRequest(request)\n                 .setResponse(response)\n                 .setSite(host)\n-                .getPageHTML();\n+                .setURLMapper(htmlPageUrl.pageUrlMapper)\n+                .setLive(htmlPageUrl.hasLive())\n+                .getPageHTML(context.getPageMode());\n     }\n \n-    private HTMLPageUrl getHtmlPageAsset(\n-            final PageContext context,\n-            final Host host,\n-            final HttpServletRequest request)\n-                throws DotDataException, DotSecurityException {\n+    private HTMLPageUrl getHtmlPageAsset(final PageContext context, final Host host, final HttpServletRequest request)\n+            throws DotDataException, DotSecurityException {\n \n         HTMLPageUrl htmlPageUrl = null;\n-        IHTMLPage htmlPageAsset = findPageByContext(host, context);\n+        for (final SearchPageFunction pageSearcher : pageSearchers) {\n+            final Optional<HTMLPageUrl> optional = pageSearcher.search(context, host, request);\n \n-        if (htmlPageAsset == null){\n-            htmlPageUrl   = findByURLMap(context, host, request);\n-            htmlPageAsset = getPageByUri(context.getPageMode(), host, htmlPageUrl.getPageUrl());\n-        } else {\n-            htmlPageUrl   = new HTMLPageUrl(htmlPageAsset);\n+            if (optional.isPresent()) {\n+                htmlPageUrl = optional.get();\n+                break;\n+            }\n+        }\n+\n+        if(htmlPageUrl == null ){\n+            throw new HTMLPageAssetNotFoundException(context.getPageUri());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzQ5NDQz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344749443", "createdAt": "2020-01-17T18:05:10Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNToxMFrOFfA8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNToxMFrOFfA8Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTU1MQ==", "bodyText": "The constructor signature was modified here too", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368065551", "createdAt": "2020-01-17T18:05:10Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +367,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final Host host, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n+        final Language language = this.getCurrentLanguage(request);\n+\n+        return APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+                mode.respectAnonPerms);\n+    }\n+\n     private Language getCurrentLanguage(final HttpServletRequest request) {\n         return request != null ? this.languageWebAPI.getLanguage(request) : this.languageAPI.getDefaultLanguage();\n     }\n \n     public class HTMLPageUrl {\n-        private String pageUrl;\n         private String pageUrlMapper;\n         private HTMLPageAsset htmlPage;\n         private Boolean hasLive = null;\n \n-        public HTMLPageUrl(final String pageUrl, final String pageUrlMapper, final Boolean hasLive) {\n-            this.pageUrl = pageUrl;\n+        public HTMLPageUrl(final HTMLPageAsset htmlPage, final String pageUrlMapper, final Boolean hasLive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 210}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a32aa20439c5d3d69ed96b02e7da57654c6e0094", "committedDate": "2020-01-17T18:05:10Z", "message": "removing URLMapFilter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzUwNTg0", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344750584", "createdAt": "2020-01-17T18:07:26Z", "commit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNzoyN1rOFfA_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODowNzoyN1rOFfA_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NjQyNA==", "bodyText": "As these changes are made for a minor release, shouldn't this class be deprecated instead of deleted ?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368066424", "createdAt": "2020-01-17T18:07:27Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/filters/URLMapFilter.java", "diffHunk": "@@ -1,156 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94e4277fac4d115ca9b3bad653f778f2af92507"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzY0MzQ2", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344764346", "createdAt": "2020-01-17T18:33:42Z", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODozMzo0MlrOFfBo2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODozMzo0MlrOFfBo2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NzAxNw==", "bodyText": "this is not bad, but if you have the request you can use more straight-forward solution", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368077017", "createdAt": "2020-01-17T18:33:42Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityServlet.java", "diffHunk": "@@ -62,10 +64,19 @@ protected final void service(HttpServletRequest req, HttpServletResponse respons\n                 return;\n             }\n \n-            request.setRequestUri(uri);\n             final PageMode mode = PageMode.getWithNavigateMode(request);\n             try {\n-                VelocityModeHandler.modeHandler(mode, request, response).serve();\n+                final String pageHtml = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                        PageContextBuilder.builder()\n+                                .setPageUri(uri)\n+                                .setPageMode(mode)\n+                                .setUser(APILocator.getLoginServiceAPI().getLoggedInUser())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzY2Nzg2", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344766786", "createdAt": "2020-01-17T18:38:18Z", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODozODoxOVrOFfBwPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODozODoxOVrOFfBwPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3ODkxMQ==", "bodyText": "Add doc", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368078911", "createdAt": "2020-01-17T18:38:19Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -48,6 +50,18 @@\n     private final URLMapAPIImpl urlMapAPIImpl;\n     private final LanguageWebAPI languageWebAPI;\n \n+    @FunctionalInterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzY4NDUy", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344768452", "createdAt": "2020-01-17T18:41:33Z", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo0MTozM1rOFfB1Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo0MTozM1rOFfB1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MDEzNA==", "bodyText": "if you are not planning to expose this, you can set to private and static to get init just once", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368080134", "createdAt": "2020-01-17T18:41:33Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -48,6 +50,18 @@\n     private final URLMapAPIImpl urlMapAPIImpl;\n     private final LanguageWebAPI languageWebAPI;\n \n+    @FunctionalInterface\n+    private interface SearchPageFunction {\n+        Optional<HTMLPageUrl> search(final PageContext context,\n+                             final Host host,\n+                             final HttpServletRequest request) throws DotDataException, DotSecurityException;\n+    }\n+\n+    final List<SearchPageFunction> pageSearchers = list(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzcxNjM1", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344771635", "createdAt": "2020-01-17T18:47:37Z", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo0NzozN1rOFfB-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo0NzozN1rOFfB-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MjUxNw==", "bodyText": "what happen if the request is null?", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368082517", "createdAt": "2020-01-17T18:47:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +367,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final Host host, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzcyOTg3", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344772987", "createdAt": "2020-01-17T18:50:07Z", "commit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo1MDowN1rOFfCCYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo1MDowN1rOFfCCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4MzU1Mw==", "bodyText": "In general this Builder IMO looks such as API or Service, it very smart to be just a builder to create a bean. It is always confusing", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r368083553", "createdAt": "2020-01-17T18:50:07Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/HTMLPageAssetRenderedBuilder.java", "diffHunk": "@@ -186,16 +186,21 @@ public PageView build(final boolean rendered, final PageMode mode) throws DotDat\n         return Optional.ofNullable(contentlet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a32aa20439c5d3d69ed96b02e7da57654c6e0094"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cfbce90c8410568432e15d2f7a4052e5177972a", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/6cfbce90c8410568432e15d2f7a4052e5177972a", "committedDate": "2020-01-17T20:09:24Z", "message": "testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec404552260c00230d3cce3ac019d69c6a6cea57", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/ec404552260c00230d3cce3ac019d69c6a6cea57", "committedDate": "2020-01-17T20:28:41Z", "message": "#16684 keepping the former constructor VelocityHandlerMode for backward compatibility and deprecate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c99f44a7598559801ecaf90b4041c07a374915e6", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/c99f44a7598559801ecaf90b4041c07a374915e6", "committedDate": "2020-01-17T20:32:57Z", "message": "adding logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e79300b85c7d196f00505d35066c610a415f580", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/2e79300b85c7d196f00505d35066c610a415f580", "committedDate": "2020-01-17T20:36:44Z", "message": "Using UserWebAPI instead UserAPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/d8d0ac8874bfdf61503d97d02689d958d2fa12d4", "committedDate": "2020-01-17T20:50:43Z", "message": "doc and refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3aa905d0bae96a4291565839567b2df14b5f28", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/6c3aa905d0bae96a4291565839567b2df14b5f28", "committedDate": "2020-01-17T20:59:16Z", "message": "codacy refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODQ4OTE1", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344848915", "createdAt": "2020-01-17T21:23:42Z", "commit": {"oid": "6c3aa905d0bae96a4291565839567b2df14b5f28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODU0NDcz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-344854473", "createdAt": "2020-01-17T21:36:15Z", "commit": {"oid": "6c3aa905d0bae96a4291565839567b2df14b5f28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d9e271aacc9a348eca1ca4789f00ab35ea68c8e", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/5d9e271aacc9a348eca1ca4789f00ab35ea68c8e", "committedDate": "2020-01-21T14:16:21Z", "message": "Merge remote-tracking branch 'origin/master' into issue-16684-Vanity-URL-Forward-to-URL-Map-Pattern-results-in-404"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/2ae94ad84aa7b886e7c8522711f8555b4f6f0d10", "committedDate": "2020-01-21T14:38:29Z", "message": "refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1OTM4Njgx", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-345938681", "createdAt": "2020-01-21T14:55:05Z", "commit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDo1NTowNVrOFf86gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNToxMDowNFrOFf9eFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0ODE5Mw==", "bodyText": "I would always use boolean here", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369048193", "createdAt": "2020-01-21T14:55:05Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -98,15 +96,9 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             User user = getUser();\n-\n+            final String uri = CMSUrlUtil.getCurrentURI(request);\n             Logger.debug(this.getClass(), \"Page Permissions for URI=\" + uri);\n \n-\n-\n-            IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n-                    APILocator.systemUser(), mode.respectAnonPerms);\n-\n-\n             // Verify and handle the case for unauthorized access of this contentlet\n             Boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MjkyNA==", "bodyText": "use boolean  primitive", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369052924", "createdAt": "2020-01-21T15:02:34Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,25 +373,33 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final String id)\n+            throws DotDataException, DotSecurityException {\n+\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n+        final Language language = request != null ? this.getCurrentLanguage(request) : this.languageAPI.getDefaultLanguage();\n+\n+        return this.htmlPageAssetAPI.findByIdLanguageFallback(id, language.getId(), mode.showLive, userAPI.getSystemUser(),\n+                mode.respectAnonPerms);\n+    }\n+\n     private Language getCurrentLanguage(final HttpServletRequest request) {\n         return request != null ? this.languageWebAPI.getLanguage(request) : this.languageAPI.getDefaultLanguage();\n     }\n \n-    public class HTMLPageUrl {\n-        private String pageUrl;\n+    public static class HTMLPageUrl {\n         private String pageUrlMapper;\n         private HTMLPageAsset htmlPage;\n         private Boolean hasLive = null;\n \n-        public HTMLPageUrl(final String pageUrl, final String pageUrlMapper, final Boolean hasLive) {\n-            this.pageUrl = pageUrl;\n+        private HTMLPageUrl(final HTMLPageAsset htmlPage, final String pageUrlMapper, final Boolean hasLive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NzMwMg==", "bodyText": "Would a ternary-like operator be cleaner here?  Something like:\nfinal HTMLPageUrl htmlPageUrl = findPageByContext(host, context)\n   .orElse(findByURLMap(context, host, request))\n   .orElse(null);", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369057302", "createdAt": "2020-01-21T15:10:04Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -232,34 +249,44 @@ public String getPageHtml(\n                 throws DotSecurityException, DotDataException {\n \n         final Host host = this.hostWebAPI.getCurrentHost(request, context.getUser());\n-        final IHTMLPage page = getHtmlPageAsset(context, host, request).getHTMLPage();\n+        final HTMLPageUrl htmlPageUrl = getHtmlPageAsset(context, host, request);\n+        final IHTMLPage page = htmlPageUrl.getHTMLPage();\n \n         return new HTMLPageAssetRenderedBuilder()\n                 .setHtmlPageAsset(page)\n                 .setUser(context.getUser())\n                 .setRequest(request)\n                 .setResponse(response)\n                 .setSite(host)\n-                .getPageHTML();\n+                .setURLMapper(htmlPageUrl.pageUrlMapper)\n+                .setLive(htmlPageUrl.hasLive())\n+                .getPageHTML(context.getPageMode());\n     }\n \n-    private HTMLPageUrl getHtmlPageAsset(\n-            final PageContext context,\n-            final Host host,\n-            final HttpServletRequest request)\n-                throws DotDataException, DotSecurityException {\n+    private HTMLPageUrl getHtmlPageAsset(final PageContext context, final Host host, final HttpServletRequest request)\n+            throws DotDataException, DotSecurityException {\n \n         HTMLPageUrl htmlPageUrl = null;\n-        IHTMLPage htmlPageAsset = findPageByContext(host, context);\n+        for (final SearchPageFunction pageSearcher : pageSearchers) {\n+            final Optional<HTMLPageUrl> optional = pageSearcher.search(context, host, request);\n \n-        if (htmlPageAsset == null){\n-            htmlPageUrl   = findByURLMap(context, host, request);\n-            htmlPageAsset = getPageByUri(context.getPageMode(), host, htmlPageUrl.getPageUrl());\n-        } else {\n-            htmlPageUrl   = new HTMLPageUrl(htmlPageAsset);\n+            if (optional.isPresent()) {\n+                htmlPageUrl = optional.get();\n+                break;\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1OTg5NDA1", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-345989405", "createdAt": "2020-01-21T15:57:01Z", "commit": {"oid": "2ae94ad84aa7b886e7c8522711f8555b4f6f0d10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f3d1a924414cb79755fde511a0f7c60660d0bb9", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/0f3d1a924414cb79755fde511a0f7c60660d0bb9", "committedDate": "2020-01-21T16:47:13Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/2e073515120a35fb459d5df3b2a212340faab59d", "committedDate": "2020-01-21T19:46:44Z", "message": "testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMjc3", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152277", "createdAt": "2020-01-21T19:58:51Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1MVrOFgG-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1MVrOFgG-tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzEwOA==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213108", "createdAt": "2020-01-21T19:58:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Before\n+    public void init() {\n+        host = new SiteDataGen().nextPersisted();\n+\n+        final Map<String, Object> attributes = new HashMap<>();\n+\n+        request = mock(HttpServletRequest.class);\n+        // Mock setAttribute\n+        doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                final Object value = invocation.getArgumentAt(1, Object.class);\n+                attributes.put(key, value);\n+                return null;\n+            }\n+        }).when(request).setAttribute(anyString(), anyObject());\n+\n+        // Mock getAttribute\n+        doAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                return attributes.get(key);\n+            }\n+        }).when(request).getAttribute(anyString());\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(request);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.LIVE);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        final Clickstream clickstream = mock(Clickstream.class);\n+        when(session.getAttribute(\"clickstream\")).thenReturn(clickstream);\n+\n+        response = mock(HttpServletResponse.class);\n+        servletOutputStream = mock(ServletOutputStream.class);\n+        try {\n+            when(response.getOutputStream()).thenReturn(servletOutputStream);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMjky", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152292", "createdAt": "2020-01-21T19:58:53Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1M1rOFgG-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1M1rOFgG-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzEzMA==", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213130", "createdAt": "2020-01-21T19:58:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMzA5", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152309", "createdAt": "2020-01-21T19:58:55Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1NVrOFgG-3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1NVrOFgG-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE0OA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213148", "createdAt": "2020-01-21T19:58:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMzMw", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152330", "createdAt": "2020-01-21T19:58:56Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1NlrOFgG-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1NlrOFgG-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE2Mw==", "bodyText": "Issue found: Local variable 'unauthorized' could be declared final", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213163", "createdAt": "2020-01-21T19:58:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -98,17 +96,11 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             User user = getUser();\n-\n+            final String uri = CMSUrlUtil.getCurrentURI(request);\n             Logger.debug(this.getClass(), \"Page Permissions for URI=\" + uri);\n \n-\n-\n-            IHTMLPage htmlPage = APILocator.getHTMLPageAssetAPI().findByIdLanguageFallback(id, langId, mode.showLive,\n-                    APILocator.systemUser(), mode.respectAnonPerms);\n-\n-\n             // Verify and handle the case for unauthorized access of this contentlet\n-            Boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);\n+            boolean unauthorized = CMSUrlUtil.getInstance().isUnauthorizedAndHandleError(htmlPage, uri, user, request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMzQz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152343", "createdAt": "2020-01-21T19:58:58Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1OFrOFgG-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1OFrOFgG-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE3Mw==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213173", "createdAt": "2020-01-21T19:58:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityLiveMode.java", "diffHunk": "@@ -74,7 +72,7 @@ public final void serve(final OutputStream out) throws DotDataException, IOExcep\n \n \n             // now we check identifier cache first (which DOES NOT have a 404 cache )\n-            Identifier id = APILocator.getIdentifierAPI().find(host, uri);\n+            final Identifier id = APILocator.getIdentifierAPI().find(this.htmlPage.getIdentifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMzYz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152363", "createdAt": "2020-01-21T19:58:59Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1OVrOFgG_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1ODo1OVrOFgG_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzE4NQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213185", "createdAt": "2020-01-21T19:58:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyMzcz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152373", "createdAt": "2020-01-21T19:59:00Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowMVrOFgG_EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowMVrOFgG_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzIwMA==", "bodyText": "Issue found: Avoid appending characters as strings in StringBuffer.append.", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213200", "createdAt": "2020-01-21T19:59:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -280,6 +279,7 @@ private String buildContentQuery(\n             query.append(this.getHostFilter(context.getHost()));\n         }\n \n+        query.append(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyNDIz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152423", "createdAt": "2020-01-21T19:59:06Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowNlrOFgG_RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowNlrOFgG_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI1Mg==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Mockito.mock' due to existing static import 'org.mockito.Mockito.*'", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213252", "createdAt": "2020-01-21T19:59:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/servlet/VelocityServletIntegrationTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+package com.dotcms.rendering.velocity.servlet;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.FiltersUtil;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Clickstream;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.filters.VanityURLFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.languagesmanager.model.Language;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.WebKeys;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static com.dotcms.datagen.TestDataUtils.getNewsLikeContentType;\n+\n+import static org.mockito.Mockito.*;\n+\n+public class VelocityServletIntegrationTest {\n+\n+    public static final String TEST_PATTERN = \"/testpattern\";\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private Host host;\n+    private ServletOutputStream servletOutputStream;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Before\n+    public void init() {\n+        host = new SiteDataGen().nextPersisted();\n+\n+        final Map<String, Object> attributes = new HashMap<>();\n+\n+        request = mock(HttpServletRequest.class);\n+        // Mock setAttribute\n+        doAnswer(new Answer<Void>() {\n+            @Override\n+            public Void answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                final Object value = invocation.getArgumentAt(1, Object.class);\n+                attributes.put(key, value);\n+                return null;\n+            }\n+        }).when(request).setAttribute(anyString(), anyObject());\n+\n+        // Mock getAttribute\n+        doAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(final InvocationOnMock invocation) throws Throwable {\n+                final String key = invocation.getArgumentAt(0, String.class);\n+                return attributes.get(key);\n+            }\n+        }).when(request).getAttribute(anyString());\n+\n+        HttpServletRequestThreadLocal.INSTANCE.setRequest(request);\n+        when(request.getParameter(\"host_id\")).thenReturn(host.getIdentifier());\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        when(session.getAttribute(WebKeys.PAGE_MODE_SESSION)).thenReturn(PageMode.LIVE);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getSession(true)).thenReturn(session);\n+        final Clickstream clickstream = mock(Clickstream.class);\n+        when(session.getAttribute(\"clickstream\")).thenReturn(clickstream);\n+\n+        response = mock(HttpServletResponse.class);\n+        servletOutputStream = mock(ServletOutputStream.class);\n+        try {\n+            when(response.getOutputStream()).thenReturn(servletOutputStream);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a Content Type Url Map and is request\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestURLMap() throws ServletException, IOException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final String newsPatternPrefix =\n+                TEST_PATTERN + System.currentTimeMillis() + \"/\";\n+        final Contentlet contentlet = createURLMapperContentType(newsPatternPrefix, host);\n+        ContentletDataGen.publish(contentlet);\n+\n+        final String contentletURLMap = newsPatternPrefix + contentlet.getStringProperty(\"urlTitle\");\n+\n+        when(request.getRequestURI()).thenReturn(contentletURLMap);\n+\n+        velocityServlet.service(request, response);\n+\n+        verify(servletOutputStream).write(\"\".getBytes());\n+        verify(response, never()).sendError(HttpServletResponse.SC_NOT_FOUND);\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a Content Type Url Map and is request\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestVanityURL() throws ServletException, IOException, DotDataException, DotSecurityException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        ContentletDataGen.publish(htmlPageAsset);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL\");\n+\n+        final String VANITY_URI = \"/vanityURL\";\n+        createAndPublishVanityURL(htmlPageAsset.getPageUrl(), VANITY_URI);\n+\n+        when(request.getRequestURI()).thenReturn(VANITY_URI);\n+        final FilterChain chain = mock(FilterChain.class);\n+\n+        final VanityURLFilter vanityURLFilter = new VanityURLFilter();\n+        vanityURLFilter.doFilter(request, response, chain);\n+\n+        velocityServlet.service(request, response);\n+\n+        verify(servletOutputStream).write(\"\".getBytes());\n+        verify(response, never()).sendError(HttpServletResponse.SC_NOT_FOUND);\n+    }\n+\n+    private void createAndPublishVanityURL(final String forwardURL, final String VANITY_URI)\n+            throws DotDataException, DotSecurityException {\n+        final Language defaultLanguage = APILocator.getLanguageAPI().getDefaultLanguage();\n+        final Contentlet vanityUrl = FiltersUtil.getInstance().createVanityUrl(\"test\", host.getIdentifier(), VANITY_URI,\n+                forwardURL, 200, 0, defaultLanguage.getId());\n+\n+        FiltersUtil.getInstance().publishVanityUrl(vanityUrl);\n+    }\n+\n+    /**\n+     * Method to test: {@link VelocityServlet#service(HttpServletRequest, HttpServletResponse)}\n+     * when: There is exists a VanityURL that forward to a URL Map\n+     * Should: return 200 Http code\n+     *\n+     * @throws ServletException\n+     * @throws IOException\n+     */\n+    @Test\n+    public void whenRequestURLMapAndVanityURLTogether() throws ServletException, IOException, DotSecurityException, DotDataException {\n+\n+        final VelocityServlet velocityServlet = new VelocityServlet();\n+\n+        final String newsPatternPrefix =\n+                TEST_PATTERN + System.currentTimeMillis() + \"/\";\n+        final Contentlet contentlet = createURLMapperContentType(newsPatternPrefix, host);\n+        ContentletDataGen.publish(contentlet);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL/\" + contentlet.getStringProperty(\"urlTitle\"));\n+\n+        final String VANITY_URI = \"/vanityURL/([a-zA-Z0-9-_]+)\";\n+        final String FORWARD_URL = newsPatternPrefix + \"$1\";\n+\n+        createAndPublishVanityURL(FORWARD_URL, VANITY_URI);\n+\n+        when(request.getRequestURI()).thenReturn(\"/vanityURL/\" + contentlet.getStringProperty(\"urlTitle\"));\n+        final FilterChain chain = Mockito.mock(FilterChain.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyNDQz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152443", "createdAt": "2020-01-21T19:59:07Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowN1rOFgG_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowN1rOFgG_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI2OA==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213268", "createdAt": "2020-01-21T19:59:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPIImpl.java", "diffHunk": "@@ -342,50 +351,53 @@ private IHTMLPage getPageByUri(final PageMode mode, final Host host, final Strin\n         return htmlPage;\n     }\n \n+    private IHTMLPage getPageById(final PageMode mode, final String id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyNDUw", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152450", "createdAt": "2020-01-21T19:59:08Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowOFrOFgG_XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowOFrOFgG_XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI3Nw==", "bodyText": "Issue found: Parameter 'urlMapped' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213277", "createdAt": "2020-01-21T19:59:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapInfo.java", "diffHunk": "@@ -9,10 +9,12 @@\n public class URLMapInfo {\n     final Contentlet contentlet;\n     final Identifier identifier;\n+    final String urlMapped;\n \n-    URLMapInfo(final Contentlet contentlet, final Identifier identifier) {\n+    URLMapInfo(final Contentlet contentlet, final Identifier identifier, String urlMapped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyNDYz", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152463", "createdAt": "2020-01-21T19:59:09Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowOVrOFgG_Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OTowOVrOFgG_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI4Ng==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213286", "createdAt": "2020-01-21T19:59:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/servlet/VelocityModeHandler.java", "diffHunk": "@@ -64,16 +102,42 @@ public final String eval() {\n             serve(out);\n             return new String(out.toByteArray());\n         } catch (DotDataException | IOException | DotSecurityException e) {\n+            Logger.debug(VelocityModeHandler.class, e.getMessage(), e);\n             throw new DotRuntimeException(e);\n         }\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response, String uri, Host host) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, uri, host);\n+\n+    public static final VelocityModeHandler modeHandler(final PageMode mode, final HttpServletRequest request, final HttpServletResponse response, final String uri, final Host host) {\n+        // Find the current language\n+        final IHTMLPage htmlPage= getHtmlPageFromURI(mode, request, uri, host);\n+        return pageModeVelocityMap.get(mode).apply(request, response, htmlPage, host);\n     }\n-    \n-    public static final VelocityModeHandler modeHandler(PageMode mode, HttpServletRequest request, HttpServletResponse response) {\n-        return pageModeVelocityMap.get(mode).apply(request, response, request.getRequestURI(), hostWebAPI.getCurrentHostNoThrow(request));\n+\n+    protected static IHTMLPage getHtmlPageFromURI(final PageMode mode, final HttpServletRequest request, final  String uri, final Host host) {\n+        final long langId = WebAPILocator.getLanguageWebAPI().getLanguage(request).getId();\n+\n+        try {\n+            // now we check identifier cache first (which DOES NOT have a 404 cache )\n+            final Identifier id = APILocator.getIdentifierAPI().find(host, uri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTUyNDc2", "url": "https://github.com/dotCMS/core/pull/17859#pullrequestreview-346152476", "createdAt": "2020-01-21T19:59:11Z", "commit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OToxMVrOFgG_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTo1OToxMVrOFgG_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxMzI5Nw==", "bodyText": "Issue found: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.", "url": "https://github.com/dotCMS/core/pull/17859#discussion_r369213297", "createdAt": "2020-01-21T19:59:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -280,6 +279,7 @@ private String buildContentQuery(\n             query.append(this.getHostFilter(context.getHost()));\n         }\n \n+        query.append(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e073515120a35fb459d5df3b2a212340faab59d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1315, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}