{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjA4Nzgx", "number": 17821, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDozMTo1MlrODXQ7JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMDozMVrODXoNRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzIxMTI1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDozMTo1MlrOFcfYsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDozMTo1MlrOFcfYsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxODY3NA==", "bodyText": "I didn;t change this. double check what is in master", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r365418674", "createdAt": "2020-01-10T20:31:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "diffHunk": "@@ -178,7 +178,7 @@ private BulkActionView buildBulkActionView (final SearchResponse response,\n         for (final Aggregation aggregation : aggregations.asList()) {\n \n             if (aggregation instanceof StringTerms) {\n-                StringTerms.class.cast(aggregation)\n+                ((StringTerms) aggregation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c535b5694e519ae4f59b130b720e20cc14d188b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzIxMTQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDozMTo1N1rOFcfYzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMDozMTo1N1rOFcfYzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQxODcwMw==", "bodyText": "I didn;t change this. double check what is in master", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r365418703", "createdAt": "2020-01-10T20:31:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "diffHunk": "@@ -1289,7 +1331,7 @@ private Role resolveRole(final String id) throws DotDataException {\n \n         Role role = null;\n         final String newid = id.substring\n-                (id.indexOf(\"-\") + 1, id.length());\n+                (id.indexOf(\"-\") + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c535b5694e519ae4f59b130b720e20cc14d188b3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAxNjAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxNzozMFrOFdBpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMToxMjoxMVrOFdl7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MDAxOQ==", "bodyText": "maybe this method should return a Optional", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r365980019", "createdAt": "2020-01-13T19:17:30Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "diffHunk": "@@ -307,17 +321,45 @@ public String getActionIdByName(final String actionName,\n                                     final Contentlet contentlet,\n                                     final User user) throws DotSecurityException, DotDataException {\n \n-        final List<WorkflowAction> availableActionsOnListing =\n-                APILocator.getWorkflowAPI().findAvailableActionsListing(contentlet, user);\n+        final WorkflowAPI workflowAPI                = APILocator.getWorkflowAPI();\n+        final Optional<WorkflowStep> workflowStepOpt = workflowAPI.findCurrentStep(contentlet);\n+        Optional<WorkflowScheme> schemeOpt           = Optional.empty();\n+        Optional<WorkflowAction> foundAction         = Optional.empty();\n+        if (workflowStepOpt.isPresent()) {\n+            // 1) look for the actions on the same step\n+            final WorkflowStep workflowStep = workflowStepOpt.get();\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(workflowStep, user));\n+            if (foundAction.isPresent()) {\n+\n+                return foundAction.get().getId();\n+            }\n \n-        final List<WorkflowAction> availableActionsOnEditing =\n-                APILocator.getWorkflowAPI().findAvailableActionsEditing(contentlet, user);\n+            // 2) look for the actions on the current scheme\n+            final WorkflowScheme workflowScheme = workflowAPI.findScheme(workflowStep.getSchemeId());\n+            schemeOpt   = Optional.ofNullable(workflowScheme);\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(workflowScheme, user));\n+            if (foundAction.isPresent()) {\n \n-        final Optional<WorkflowAction> foundAction =\n-                Stream.concat(availableActionsOnListing.stream(), availableActionsOnEditing.stream())\n-                        .filter(action -> action.getName().equalsIgnoreCase(actionName)).findFirst();\n+                return foundAction.get().getId();\n+            }\n+        }\n \n-        return foundAction.isPresent()?foundAction.get().getId():null;\n+        // 3) look for the actions on all schemes.\n+        final List<WorkflowScheme>  workflowSchemes = workflowAPI.findSchemesForContentType(contentlet.getContentType());\n+        for (final WorkflowScheme scheme : workflowSchemes) {\n+\n+            if (schemeOpt.isPresent() && schemeOpt.get().getId().equals(scheme.getId()))  {\n+                continue; // we already analized this scheme\n+            }\n+\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(scheme, user));\n+            if (foundAction.isPresent()) {\n+\n+                return foundAction.get().getId();\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cbed8c225c092bcea5ba41176dc50568a93496"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NDUwOQ==", "bodyText": "yes, but not than bad", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r366574509", "createdAt": "2020-01-14T21:12:11Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/workflow/helper/WorkflowHelper.java", "diffHunk": "@@ -307,17 +321,45 @@ public String getActionIdByName(final String actionName,\n                                     final Contentlet contentlet,\n                                     final User user) throws DotSecurityException, DotDataException {\n \n-        final List<WorkflowAction> availableActionsOnListing =\n-                APILocator.getWorkflowAPI().findAvailableActionsListing(contentlet, user);\n+        final WorkflowAPI workflowAPI                = APILocator.getWorkflowAPI();\n+        final Optional<WorkflowStep> workflowStepOpt = workflowAPI.findCurrentStep(contentlet);\n+        Optional<WorkflowScheme> schemeOpt           = Optional.empty();\n+        Optional<WorkflowAction> foundAction         = Optional.empty();\n+        if (workflowStepOpt.isPresent()) {\n+            // 1) look for the actions on the same step\n+            final WorkflowStep workflowStep = workflowStepOpt.get();\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(workflowStep, user));\n+            if (foundAction.isPresent()) {\n+\n+                return foundAction.get().getId();\n+            }\n \n-        final List<WorkflowAction> availableActionsOnEditing =\n-                APILocator.getWorkflowAPI().findAvailableActionsEditing(contentlet, user);\n+            // 2) look for the actions on the current scheme\n+            final WorkflowScheme workflowScheme = workflowAPI.findScheme(workflowStep.getSchemeId());\n+            schemeOpt   = Optional.ofNullable(workflowScheme);\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(workflowScheme, user));\n+            if (foundAction.isPresent()) {\n \n-        final Optional<WorkflowAction> foundAction =\n-                Stream.concat(availableActionsOnListing.stream(), availableActionsOnEditing.stream())\n-                        .filter(action -> action.getName().equalsIgnoreCase(actionName)).findFirst();\n+                return foundAction.get().getId();\n+            }\n+        }\n \n-        return foundAction.isPresent()?foundAction.get().getId():null;\n+        // 3) look for the actions on all schemes.\n+        final List<WorkflowScheme>  workflowSchemes = workflowAPI.findSchemesForContentType(contentlet.getContentType());\n+        for (final WorkflowScheme scheme : workflowSchemes) {\n+\n+            if (schemeOpt.isPresent() && schemeOpt.get().getId().equals(scheme.getId()))  {\n+                continue; // we already analized this scheme\n+            }\n+\n+            foundAction = this.findActionsOn(actionName, workflowAPI.findActions(scheme, user));\n+            if (foundAction.isPresent()) {\n+\n+                return foundAction.get().getId();\n+            }\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MDAxOQ=="}, "originalCommit": {"oid": "66cbed8c225c092bcea5ba41176dc50568a93496"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAyMzYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/workflow/helper/TestWorkflowHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToxOTo1NlrOFdBuDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowOToxMFrOFdl22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MTE5Nw==", "bodyText": "improved doc in this test", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r365981197", "createdAt": "2020-01-13T19:19:56Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/workflow/helper/TestWorkflowHelper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.dotcms.workflow.helper;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContentTypeDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FieldDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test {@link WorkflowHelper}\n+ * @author jsanca\n+ */\n+public class TestWorkflowHelper extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        user = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    /**\n+     * Test the getActionIdByName\n+     */\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cbed8c225c092bcea5ba41176dc50568a93496"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MzI3NA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r366573274", "createdAt": "2020-01-14T21:09:10Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/workflow/helper/TestWorkflowHelper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.dotcms.workflow.helper;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContentTypeDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FieldDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test {@link WorkflowHelper}\n+ * @author jsanca\n+ */\n+public class TestWorkflowHelper extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        user = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    /**\n+     * Test the getActionIdByName\n+     */\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MTE5Nw=="}, "originalCommit": {"oid": "66cbed8c225c092bcea5ba41176dc50568a93496"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTAyNTk3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/workflow/helper/TestWorkflowHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMDozMVrOFdBvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOToyMDozMVrOFdBvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4MTU0MA==", "bodyText": "maybe this test could be split in several test", "url": "https://github.com/dotCMS/core/pull/17821#discussion_r365981540", "createdAt": "2020-01-13T19:20:31Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/workflow/helper/TestWorkflowHelper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.dotcms.workflow.helper;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContentTypeDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FieldDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.workflows.business.SystemWorkflowConstants;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Test {@link WorkflowHelper}\n+ * @author jsanca\n+ */\n+public class TestWorkflowHelper extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        user = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    /**\n+     * Test the getActionIdByName\n+     */\n+    @Test\n+    public void test_getActionIdByName () throws Exception {\n+\n+        //1 create a content type and associated to system workflow\n+        final ContentType contentGenericType = new ContentTypeDataGen().workflowId(SystemWorkflowConstants.SYSTEM_WORKFLOW_ID)\n+                .baseContentType(BaseContentType.CONTENT)\n+                .field(new FieldDataGen().name(\"title\").velocityVarName(\"title\").next())\n+                .field(new FieldDataGen().name(\"body\").velocityVarName(\"body\").next()).nextPersisted();\n+\n+        final String unicodeText = \"Num\u00e9ro de t\u00e9l\u00e9phone\";\n+        final ContentletDataGen contentletDataGen = new ContentletDataGen(contentGenericType.id());\n+        Contentlet contentlet    = contentletDataGen.setProperty(\"title\", \"TestContent\")\n+                .setProperty(\"body\", unicodeText ).languageId(APILocator.getLanguageAPI().getDefaultLanguage().getId()).nextPersisted();\n+\n+        //2 get an action on the first step for a new contentlet\n+        final WorkflowHelper workflowHelper = WorkflowHelper.getInstance();\n+        final String saveActionId = workflowHelper.getActionIdByName(\"Save\", contentlet, user);\n+        Assert.assertEquals(\"The action returned should be Save\", SystemWorkflowConstants.WORKFLOW_SAVE_ACTION_ID, saveActionId);\n+\n+        //3 get an action on the thrid step for a new contentlet\n+        String archiveActionId = workflowHelper.getActionIdByName(\"Archive\", contentlet, user);\n+        Assert.assertEquals(\"The action returned should be Archive\", SystemWorkflowConstants.WORKFLOW_ARCHIVE_ACTION_ID, archiveActionId);\n+\n+        final Contentlet contentletCheckin = APILocator.getWorkflowAPI().fireContentWorkflow(contentlet,\n+                new ContentletDependencies.Builder().workflowActionId(saveActionId).modUser(user).indexPolicy(IndexPolicy.FORCE).build());\n+\n+        //4 get archive in a unpublish step\n+        archiveActionId = workflowHelper.getActionIdByName(\"Archive\", contentletCheckin, user);\n+        Assert.assertEquals(\"The action returned should be Archive\", SystemWorkflowConstants.WORKFLOW_ARCHIVE_ACTION_ID, archiveActionId);\n+\n+        //5 looking for non-existing Action\n+        archiveActionId = workflowHelper.getActionIdByName(\"Non Existing Action\", contentletCheckin, user);\n+        Assert.assertNull(\"The action returned should be Archive\", archiveActionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66cbed8c225c092bcea5ba41176dc50568a93496"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2470, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}