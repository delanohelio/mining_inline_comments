{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NDg5NDEz", "number": 18225, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0OTowOFrODtOF7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyM1rODwIYAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzQzNDA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0OTowOFrOF-hRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1Mjo0OFrOF-haNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMTE3Mg==", "bodyText": "I think you should implement a new method signature for this constructor and keep the old one. Internally the old constructor could call this new implementation", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401101172", "createdAt": "2020-03-31T17:49:08Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -69,17 +73,35 @@\n \tfinal ContentletAPI contAPI;\n \tfinal PermissionAPI perAPI;\n \tprivate final IdentifierAPI identifierAPI;\n+\tprivate final FileAssetFactory fileAssetFactory;\n+\tprivate final ContentletCache contentletCache;\n \n \tpublic FileAssetAPIImpl() {\n-\t    this(APILocator.getContentletAPI(),APILocator.getPermissionAPI(),APILocator.getSystemEventsAPI(),APILocator.getIdentifierAPI());\n+\t    this(\n+\t    \t\tAPILocator.getContentletAPI(),\n+\t\t\t\tAPILocator.getPermissionAPI(),\n+\t\t\t\tAPILocator.getSystemEventsAPI(),\n+\t\t\t\tAPILocator.getIdentifierAPI(),\n+\t\t\t\tnew FileAssetFactoryImpl(),\n+\t\t\t\tCacheLocator.getContentletCache()\n+\t\t);\n \t}\n \n-   public FileAssetAPIImpl(ContentletAPI contAPI,PermissionAPI perAPI, SystemEventsAPI systemEventsAPI, IdentifierAPI identifierAPI ) {\n+\t@VisibleForTesting\n+    public FileAssetAPIImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMzQxNQ==", "bodyText": "I usually agree with backward compatibility, but I think people do not call the constructors, people use APILocator to delegate the construction, so I would say it is ok", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401103415", "createdAt": "2020-03-31T17:52:48Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -69,17 +73,35 @@\n \tfinal ContentletAPI contAPI;\n \tfinal PermissionAPI perAPI;\n \tprivate final IdentifierAPI identifierAPI;\n+\tprivate final FileAssetFactory fileAssetFactory;\n+\tprivate final ContentletCache contentletCache;\n \n \tpublic FileAssetAPIImpl() {\n-\t    this(APILocator.getContentletAPI(),APILocator.getPermissionAPI(),APILocator.getSystemEventsAPI(),APILocator.getIdentifierAPI());\n+\t    this(\n+\t    \t\tAPILocator.getContentletAPI(),\n+\t\t\t\tAPILocator.getPermissionAPI(),\n+\t\t\t\tAPILocator.getSystemEventsAPI(),\n+\t\t\t\tAPILocator.getIdentifierAPI(),\n+\t\t\t\tnew FileAssetFactoryImpl(),\n+\t\t\t\tCacheLocator.getContentletCache()\n+\t\t);\n \t}\n \n-   public FileAssetAPIImpl(ContentletAPI contAPI,PermissionAPI perAPI, SystemEventsAPI systemEventsAPI, IdentifierAPI identifierAPI ) {\n+\t@VisibleForTesting\n+    public FileAssetAPIImpl(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMTE3Mg=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzQzOTg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1MDo0M1rOF-hVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo1OTozMFrOF-pykQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMjEwOA==", "bodyText": "Cool, I would put this in another more reusable place", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401102108", "createdAt": "2020-03-31T17:50:43Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetAPIImplIntegrationTest  extends IntegrationTestBase {\n+\n+    private static FileAssetAPIImpl fileAssetAPIImpl;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetAPIImpl = new FileAssetAPIImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetAPIImpl#findFileAssetsByFolder(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, grant permission over folders and files\n+     * and try to get the files from the first folder\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder1, \"text2\", \".txt\");\n+\n+        final Folder folder2 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset3 = createFileAsset(folder2, \"text1\", \".txt\");\n+        final Contentlet fileAsset4 = createFileAsset(folder2, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder1, folder2, fileAsset1, fileAsset2, fileAsset3, fileAsset4);\n+        final List<FileAsset> files = fileAssetAPIImpl.findFileAssetsByFolder(folder1, user, false);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetAPIImpl#findFileAssetsByFolder(Folder, User, boolean)}\n+     * When: Create one Folder with one files, and try to get the files from the first folder with a user without permission\n+     * Should: return a empty List\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void userWithoutPermission() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        createFileAsset(folder1, \"text1\", \".txt\");\n+\n+        final List<FileAsset> fileAssetsByFolder = fileAssetAPIImpl.findFileAssetsByFolder(folder1, user, false);\n+\n+        assertTrue(fileAssetsByFolder.isEmpty());\n+    }\n+\n+    private Contentlet createFileAsset(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDcyMQ==", "bodyText": "done b3221ca#diff-a44b1746f41918b71f5f2d06d7cbc482R39", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401240721", "createdAt": "2020-03-31T21:59:30Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetAPIImplIntegrationTest  extends IntegrationTestBase {\n+\n+    private static FileAssetAPIImpl fileAssetAPIImpl;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetAPIImpl = new FileAssetAPIImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetAPIImpl#findFileAssetsByFolder(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, grant permission over folders and files\n+     * and try to get the files from the first folder\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder1, \"text2\", \".txt\");\n+\n+        final Folder folder2 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset3 = createFileAsset(folder2, \"text1\", \".txt\");\n+        final Contentlet fileAsset4 = createFileAsset(folder2, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder1, folder2, fileAsset1, fileAsset2, fileAsset3, fileAsset4);\n+        final List<FileAsset> files = fileAssetAPIImpl.findFileAssetsByFolder(folder1, user, false);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetAPIImpl#findFileAssetsByFolder(Folder, User, boolean)}\n+     * When: Create one Folder with one files, and try to get the files from the first folder with a user without permission\n+     * Should: return a empty List\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void userWithoutPermission() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        createFileAsset(folder1, \"text1\", \".txt\");\n+\n+        final List<FileAsset> fileAssetsByFolder = fileAssetAPIImpl.findFileAssetsByFolder(folder1, user, false);\n+\n+        assertTrue(fileAssetsByFolder.isEmpty());\n+    }\n+\n+    private Contentlet createFileAsset(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwMjEwOA=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzQ2MjM1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo1NjozMlrOF-hjbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo1OTo0OFrOF-pzLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNTc3NA==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401105774", "createdAt": "2020-03-31T17:56:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactory.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+\n+public interface FileAssetFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDg3OA==", "bodyText": "done b3221ca#diff-00aa81b1e15540631fbfdcad81a97fe8R11", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401240878", "createdAt": "2020-03-31T21:59:48Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactory.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+\n+public interface FileAssetFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwNTc3NA=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzUxNzM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxMToxNVrOF-iF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjowMDowNFrOF-pzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNDYxNw==", "bodyText": "this should be the first line, well before the dotConnect", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401114617", "createdAt": "2020-03-31T18:11:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.util.ContentletUtil;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FileAssetFactoryImpl implements FileAssetFactory {\n+    private final PermissionAPI permissionAPI;\n+\n+    private final String FIND_FILE_ASSETS_BY_FOLDER_QUERY =\n+            \"SELECT contentlet.inode \" +\n+            \"FROM identifier, contentlet_version_info, contentlet, structure \" +\n+            \"WHERE identifier.parent_path = ? and \" +\n+                \"identifier.host_inode = ? and \" +\n+                \"contentlet_version_info.identifier = identifier.id and \" +\n+                \"contentlet_version_info.%s_inode = contentlet.inode and \" +\n+                \"contentlet.structure_inode = structure.inode and \" +\n+                \"structure.structuretype =4;\";\n+\n+    public FileAssetFactoryImpl() {\n+        permissionAPI = APILocator.getPermissionAPI();\n+    }\n+\n+    @Override\n+    public List<Contentlet> findFileAssetsByFolderInDB(\n+            final Folder parentFolder,\n+            final  User user,\n+            final boolean live) throws DotDataException, DotSecurityException {\n+\n+        final boolean respectFrontendRoles = live;\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(String.format(FIND_FILE_ASSETS_BY_FOLDER_QUERY, live ? \"live\" : \"working\"));\n+        dotConnect.addParam(parentFolder.getPath());\n+        dotConnect.addParam(parentFolder.getHostId());\n+\n+        if(!permissionAPI.doesUserHavePermission(parentFolder, PermissionAPI.PERMISSION_READ, user, respectFrontendRoles)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MDk4Nw==", "bodyText": "done b3221ca#diff-159930580f03a629fdc4eb9506576d39R50", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401240987", "createdAt": "2020-03-31T22:00:04Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.util.ContentletUtil;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FileAssetFactoryImpl implements FileAssetFactory {\n+    private final PermissionAPI permissionAPI;\n+\n+    private final String FIND_FILE_ASSETS_BY_FOLDER_QUERY =\n+            \"SELECT contentlet.inode \" +\n+            \"FROM identifier, contentlet_version_info, contentlet, structure \" +\n+            \"WHERE identifier.parent_path = ? and \" +\n+                \"identifier.host_inode = ? and \" +\n+                \"contentlet_version_info.identifier = identifier.id and \" +\n+                \"contentlet_version_info.%s_inode = contentlet.inode and \" +\n+                \"contentlet.structure_inode = structure.inode and \" +\n+                \"structure.structuretype =4;\";\n+\n+    public FileAssetFactoryImpl() {\n+        permissionAPI = APILocator.getPermissionAPI();\n+    }\n+\n+    @Override\n+    public List<Contentlet> findFileAssetsByFolderInDB(\n+            final Folder parentFolder,\n+            final  User user,\n+            final boolean live) throws DotDataException, DotSecurityException {\n+\n+        final boolean respectFrontendRoles = live;\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(String.format(FIND_FILE_ASSETS_BY_FOLDER_QUERY, live ? \"live\" : \"working\"));\n+        dotConnect.addParam(parentFolder.getPath());\n+        dotConnect.addParam(parentFolder.getHostId());\n+\n+        if(!permissionAPI.doesUserHavePermission(parentFolder, PermissionAPI.PERMISSION_READ, user, respectFrontendRoles)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNDYxNw=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzUxOTEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxMTo0NFrOF-iHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjowMDoyMFrOF-p0GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNDkwOQ==", "bodyText": "Immutable?", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401114909", "createdAt": "2020-03-31T18:11:44Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.util.ContentletUtil;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FileAssetFactoryImpl implements FileAssetFactory {\n+    private final PermissionAPI permissionAPI;\n+\n+    private final String FIND_FILE_ASSETS_BY_FOLDER_QUERY =\n+            \"SELECT contentlet.inode \" +\n+            \"FROM identifier, contentlet_version_info, contentlet, structure \" +\n+            \"WHERE identifier.parent_path = ? and \" +\n+                \"identifier.host_inode = ? and \" +\n+                \"contentlet_version_info.identifier = identifier.id and \" +\n+                \"contentlet_version_info.%s_inode = contentlet.inode and \" +\n+                \"contentlet.structure_inode = structure.inode and \" +\n+                \"structure.structuretype =4;\";\n+\n+    public FileAssetFactoryImpl() {\n+        permissionAPI = APILocator.getPermissionAPI();\n+    }\n+\n+    @Override\n+    public List<Contentlet> findFileAssetsByFolderInDB(\n+            final Folder parentFolder,\n+            final  User user,\n+            final boolean live) throws DotDataException, DotSecurityException {\n+\n+        final boolean respectFrontendRoles = live;\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(String.format(FIND_FILE_ASSETS_BY_FOLDER_QUERY, live ? \"live\" : \"working\"));\n+        dotConnect.addParam(parentFolder.getPath());\n+        dotConnect.addParam(parentFolder.getHostId());\n+\n+        if(!permissionAPI.doesUserHavePermission(parentFolder, PermissionAPI.PERMISSION_READ, user, respectFrontendRoles)){\n+            throw new DotSecurityException(\"User:\" + user.getUserId() + \" does not have permissions on Folder \" + parentFolder);\n+        }\n+\n+        final List<Map<String, Object>> queryResults = dotConnect.loadObjectResults();\n+        return convertToFileAssets(user, respectFrontendRoles, queryResults);\n+    }\n+\n+    @NotNull\n+    private List<Contentlet> convertToFileAssets(\n+            final User user,\n+            final boolean respectFrontendRoles,\n+            final List<Map<String, Object>> queryResults) throws DotDataException {\n+\n+        final List<Contentlet> files = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MTExMw==", "bodyText": "done b3221ca#diff-159930580f03a629fdc4eb9506576d39R69", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401241113", "createdAt": "2020-03-31T22:00:20Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.util.ContentletUtil;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FileAssetFactoryImpl implements FileAssetFactory {\n+    private final PermissionAPI permissionAPI;\n+\n+    private final String FIND_FILE_ASSETS_BY_FOLDER_QUERY =\n+            \"SELECT contentlet.inode \" +\n+            \"FROM identifier, contentlet_version_info, contentlet, structure \" +\n+            \"WHERE identifier.parent_path = ? and \" +\n+                \"identifier.host_inode = ? and \" +\n+                \"contentlet_version_info.identifier = identifier.id and \" +\n+                \"contentlet_version_info.%s_inode = contentlet.inode and \" +\n+                \"contentlet.structure_inode = structure.inode and \" +\n+                \"structure.structuretype =4;\";\n+\n+    public FileAssetFactoryImpl() {\n+        permissionAPI = APILocator.getPermissionAPI();\n+    }\n+\n+    @Override\n+    public List<Contentlet> findFileAssetsByFolderInDB(\n+            final Folder parentFolder,\n+            final  User user,\n+            final boolean live) throws DotDataException, DotSecurityException {\n+\n+        final boolean respectFrontendRoles = live;\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(String.format(FIND_FILE_ASSETS_BY_FOLDER_QUERY, live ? \"live\" : \"working\"));\n+        dotConnect.addParam(parentFolder.getPath());\n+        dotConnect.addParam(parentFolder.getHostId());\n+\n+        if(!permissionAPI.doesUserHavePermission(parentFolder, PermissionAPI.PERMISSION_READ, user, respectFrontendRoles)){\n+            throw new DotSecurityException(\"User:\" + user.getUserId() + \" does not have permissions on Folder \" + parentFolder);\n+        }\n+\n+        final List<Map<String, Object>> queryResults = dotConnect.loadObjectResults();\n+        return convertToFileAssets(user, respectFrontendRoles, queryResults);\n+    }\n+\n+    @NotNull\n+    private List<Contentlet> convertToFileAssets(\n+            final User user,\n+            final boolean respectFrontendRoles,\n+            final List<Map<String, Object>> queryResults) throws DotDataException {\n+\n+        final List<Contentlet> files = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNDkwOQ=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzUyODY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoxNDoxNlrOF-iM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjowMDozN1rOF-p0kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjM5NQ==", "bodyText": "this could be better to handle by ExceptionUtil.causedBy\nThe immediate cause could be a wrapper of the real one, should go in deep", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401116395", "createdAt": "2020-03-31T18:14:16Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjkzMQ==", "bodyText": "Should log too", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401116931", "createdAt": "2020-03-31T18:15:09Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjM5NQ=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwODgwMQ==", "bodyText": "If you log, then we should use the Logger.warnEveryAndDebug(final Class cl, final String message, final Throwable ex, final int warnEveryMillis) \nand write every 5000ms", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401208801", "createdAt": "2020-03-31T20:54:04Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjM5NQ=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0MTIzMw==", "bodyText": "done b3221ca#diff-3e213b868e011e1477445a17721c1926R141", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401241233", "createdAt": "2020-03-31T22:00:37Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNjM5NQ=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODEyOTU1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMDo1OToyNVrOF-oBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToxNTo0NlrOF_wOiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMTc2OA==", "bodyText": "add a sync block here", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401211768", "createdAt": "2020-03-31T20:59:25Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {\n+\t\t\t\tcontentlets = this.fileAssetFactory.findFileAssetsByFolderInDB(parentFolder, user, respectFrontendRoles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5NDc2MQ==", "bodyText": "done https://github.com/dotCMS/core/pull/18225/files#diff-3e213b868e011e1477445a17721c1926R154", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r402394761", "createdAt": "2020-04-02T15:15:46Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -104,17 +126,30 @@ public FileAsset checkinFile(Contentlet fileCon, User user,boolean respectFronte\n \t}\n \t */\n \t@CloseDBIfOpened\n-\tpublic List<FileAsset> findFileAssetsByFolder(Folder parentFolder, User user, boolean respectFrontendRoles) throws DotDataException,\n-\t\t\tDotSecurityException {\n-\t\tList<FileAsset> assets = null;\n+\tpublic List<FileAsset> findFileAssetsByFolder(\n+\t\t\tfinal Folder parentFolder,\n+\t\t\tfinal User user,\n+\t\t\tfinal boolean respectFrontendRoles) throws DotDataException, DotSecurityException {\n+\t\tList<Contentlet> contentlets = null;\n+\n \t\ttry{\n-\t\t\tassets = fromContentlets(perAPI.filterCollection(contAPI.search(\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET+\" +conFolder:\" + parentFolder.getInode(), -1, 0, null , user, respectFrontendRoles),\n-\t\t\t\t\tPermissionAPI.PERMISSION_READ, respectFrontendRoles, user));\n+\t\t\tcontentlets = contAPI.search(\n+\t\t\t\t\t\"+structureType:\" + Structure.STRUCTURE_TYPE_FILEASSET + \" +conFolder:\" + parentFolder.getInode(),\n+\t\t\t\t\t-1, 0, null, user, respectFrontendRoles);\n+\t\t} catch (DotRuntimeException e) {\n+\t\t\tif (e.getCause() instanceof ConnectException) {\n+\t\t\t\tcontentlets = this.fileAssetFactory.findFileAssetsByFolderInDB(parentFolder, user, respectFrontendRoles);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMTc2OA=="}, "originalCommit": {"oid": "b10075ddfb89bba51fc2b9fe6838654ad7d8bc24"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTYzNjI1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1Njo0MlrOF_J3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTowMDo1MVrOF_vhYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NjI3Ng==", "bodyText": "I would rename this method. Even when there are comments that explain the test, the name itself doesn't say something really helpful as the annotation @Test(expected = DotSecurityException.class)  says exactly that", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r401766276", "createdAt": "2020-04-01T16:56:42Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetFactoryIntegrationTest extends IntegrationTestBase {\n+\n+    private static FileAssetFactoryImpl fileAssetFactory;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetFactory = new FileAssetFactoryImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, and try to get the files from the first folder\n+     *       and the user jave permission over all the files\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder1, \"text2\", \".txt\");\n+\n+        final Folder folder2 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset3 = createFileAsset(folder2, \"text1\", \".txt\");\n+        final Contentlet fileAsset4 = createFileAsset(folder2, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder1, folder2, fileAsset1, fileAsset2, fileAsset3, fileAsset4);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder1, user, false);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder with two files each one, grant permission iver one file and  try to get the files from the\n+     *       folder\n+     * Should: return only one file\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnOneFile() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder, \"text1\", \".txt\");\n+        createFileAsset(folder, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder, fileAsset1);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, false);\n+\n+        assertEquals(1, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder with two files each one, grant permission to anonymous role\n+     * Should: return two files\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldWorkWithAnonymous() throws IOException, DotDataException, DotSecurityException {\n+        final Role anonymousRole = APILocator.getRoleAPI().loadCMSAnonymousRole();\n+        final User user = new UserDataGen().nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder, \"text2\", \".txt\");\n+\n+        ContentletDataGen.publish(fileAsset1);\n+        ContentletDataGen.publish(fileAsset2);\n+\n+        this.addPermission(anonymousRole, folder, fileAsset1, fileAsset2);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, true);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder without files\n+     * Should: return a empty list\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnEmptyList() throws DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+\n+        this.addPermission(role, folder);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, false);\n+\n+        assertTrue(files.isEmpty());\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create a Folder and not add permission\n+     * Should: throw a {@link DotSecurityException}\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldThorDotSecurityException() throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d948be47b518adc87e74e09f496300e8e48a7418"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MzIwMA==", "bodyText": "done a14571c#diff-b1dc6015d0a0a590385cffd31ab8418eR175", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r402383200", "createdAt": "2020-04-02T15:00:51Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetFactoryIntegrationTest extends IntegrationTestBase {\n+\n+    private static FileAssetFactoryImpl fileAssetFactory;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetFactory = new FileAssetFactoryImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, and try to get the files from the first folder\n+     *       and the user jave permission over all the files\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder1, \"text2\", \".txt\");\n+\n+        final Folder folder2 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset3 = createFileAsset(folder2, \"text1\", \".txt\");\n+        final Contentlet fileAsset4 = createFileAsset(folder2, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder1, folder2, fileAsset1, fileAsset2, fileAsset3, fileAsset4);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder1, user, false);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder with two files each one, grant permission iver one file and  try to get the files from the\n+     *       folder\n+     * Should: return only one file\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnOneFile() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder, \"text1\", \".txt\");\n+        createFileAsset(folder, \"text2\", \".txt\");\n+\n+        this.addPermission(role, folder, fileAsset1);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, false);\n+\n+        assertEquals(1, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder with two files each one, grant permission to anonymous role\n+     * Should: return two files\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldWorkWithAnonymous() throws IOException, DotDataException, DotSecurityException {\n+        final Role anonymousRole = APILocator.getRoleAPI().loadCMSAnonymousRole();\n+        final User user = new UserDataGen().nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder, \"text2\", \".txt\");\n+\n+        ContentletDataGen.publish(fileAsset1);\n+        ContentletDataGen.publish(fileAsset2);\n+\n+        this.addPermission(anonymousRole, folder, fileAsset1, fileAsset2);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, true);\n+\n+        assertEquals(2, files.size());\n+\n+        final List<String> filesInodes = files.stream().map((file) -> file.getInode()).collect(Collectors.toList());\n+        assertTrue(filesInodes.contains(fileAsset1.getInode()));\n+        assertTrue(filesInodes.contains(fileAsset2.getInode()));\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create one Folder without files\n+     * Should: return a empty list\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnEmptyList() throws DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Folder folder = new FolderDataGen().site(host).nextPersisted();\n+\n+        this.addPermission(role, folder);\n+        final List<Contentlet> files = fileAssetFactory.findFileAssetsByFolderInDB(folder, user, false);\n+\n+        assertTrue(files.isEmpty());\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create a Folder and not add permission\n+     * Should: throw a {@link DotSecurityException}\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldThorDotSecurityException() throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2NjI3Ng=="}, "originalCommit": {"oid": "d948be47b518adc87e74e09f496300e8e48a7418"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1Mzk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxMlrOGC9caQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxMlrOGC9caQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzAzMw==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757033", "createdAt": "2020-04-08T19:19:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -5,13 +5,18 @@\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.ConnectException;\n import java.nio.file.Files;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.zip.GZIPInputStream;\n \n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n import com.dotcms.util.MimeTypeUtils;\n+import com.dotmarketing.business.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxM1rOGC9ccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxM1rOGC9ccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA0MA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757040", "createdAt": "2020-04-08T19:19:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetAPIImplIntegrationTest  extends IntegrationTestBase {\n+\n+    private static FileAssetAPIImpl fileAssetAPIImpl;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDA2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNFrOGC9cew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNFrOGC9cew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA1MQ==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert.assertTrue'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757051", "createdAt": "2020-04-08T19:19:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotmarketing.business.IdentifierAPI;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.ContentletCache;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.structure.model.Structure;\n+import com.liferay.portal.model.User;\n+import org.apache.velocity.exception.ResourceNotFoundException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNVrOGC9chg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNVrOGC9chg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA2Mg==", "bodyText": "Issue found: Avoid unused imports such as 'org.apache.velocity.exception.ResourceNotFoundException'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757062", "createdAt": "2020-04-08T19:19:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImpl.java", "diffHunk": "@@ -53,6 +53,7 @@\n import com.liferay.util.FileUtil;\n import com.liferay.util.StringPool;\n import io.vavr.control.Try;\n+import org.apache.velocity.exception.ResourceNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDE5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNlrOGC9cjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxNlrOGC9cjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA3MQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757071", "createdAt": "2020-04-08T19:19:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDIyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxN1rOGC9cmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxN1rOGC9cmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA4Mg==", "bodyText": "Issue found: The String literal \"text2\" appears 4 times in this file; the first occurrence is on line 60", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757082", "createdAt": "2020-04-08T19:19:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetFactoryIntegrationTest extends IntegrationTestBase {\n+\n+    private static FileAssetFactoryImpl fileAssetFactory;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetFactory = new FileAssetFactoryImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, and try to get the files from the first folder\n+     *       and the user jave permission over all the files\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");\n+        final Contentlet fileAsset2 = createFileAsset(folder1, \"text2\", \".txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDI1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxOFrOGC9cnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxOFrOGC9cnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzA4Nw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757087", "createdAt": "2020-04-08T19:19:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetFactoryIntegrationTest extends IntegrationTestBase {\n+\n+    private static FileAssetFactoryImpl fileAssetFactory;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxOVrOGC9crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToxOVrOGC9crw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzEwMw==", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757103", "createdAt": "2020-04-08T19:19:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotmarketing.business.IdentifierAPI;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.ContentletCache;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.structure.model.Structure;\n+import com.liferay.portal.model.User;\n+import org.apache.velocity.exception.ResourceNotFoundException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.net.ConnectException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/FileAssetDataGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMFrOGC9ctg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMFrOGC9ctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzExMA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'java.io.File.createTempFile' due to existing import 'java.io.File'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757110", "createdAt": "2020-04-08T19:19:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/FileAssetDataGen.java", "diffHunk": "@@ -32,4 +36,24 @@ private FileAssetDataGen(final File file) throws DotDataException, DotSecurityEx\n         setProperty(FileAssetAPI.BINARY_FIELD, file);\n     }\n \n+    public static Contentlet createFileAsset(\n+            final Folder folder,\n+            final String fileName,\n+            final String suffix)\n+            throws IOException, DotSecurityException, DotDataException {\n+\n+        return  createFileAsset(folder, fileName, suffix, \"helloworld\");\n+    }\n+\n+    private static Contentlet createFileAsset(\n+            final Folder folder,\n+            final String fileName,\n+            final String suffix,\n+            final String content)\n+            throws IOException, DotSecurityException, DotDataException {\n+        final java.io.File file = java.io.File.createTempFile(fileName, suffix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMVrOGC9cvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMVrOGC9cvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzExNw==", "bodyText": "Issue found: Avoid unused imports such as 'org.apache.velocity.exception.ResourceNotFoundException'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757117", "createdAt": "2020-04-08T19:19:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotmarketing.business.IdentifierAPI;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.ContentletCache;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.structure.model.Structure;\n+import com.liferay.portal.model.User;\n+import org.apache.velocity.exception.ResourceNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMlrOGC9cxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyMlrOGC9cxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzEyNw==", "bodyText": "Issue found: The String literal \"text1\" appears 4 times in this file; the first occurrence is on line 59", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757127", "createdAt": "2020-04-08T19:19:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetFactoryIntegrationTest extends IntegrationTestBase {\n+\n+    private static FileAssetFactoryImpl fileAssetFactory;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetFactory = new FileAssetFactoryImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetFactory#findFileAssetsByFolderInDB(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, and try to get the files from the first folder\n+     *       and the user jave permission over all the files\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = createFileAsset(folder1, \"text1\", \".txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyM1rOGC9czg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyM1rOGC9czg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzEzNA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757134", "createdAt": "2020-04-08T19:19:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetFactoryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzk1NDU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyNFrOGC9c2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToxOToyNFrOGC9c2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc1NzE0NQ==", "bodyText": "Issue found: The String literal \".txt\" appears 5 times in this file; the first occurrence is on line 58", "url": "https://github.com/dotCMS/core/pull/18225#discussion_r405757145", "createdAt": "2020-04-08T19:19:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package com.dotmarketing.portlets.fileassets.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.datagen.*;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FileAssetAPIImplIntegrationTest  extends IntegrationTestBase {\n+\n+    private static FileAssetAPIImpl fileAssetAPIImpl;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment o\n+        IntegrationTestInitService.getInstance().init();\n+\n+        fileAssetAPIImpl = new FileAssetAPIImpl();\n+    }\n+\n+    /**\n+     * Method to test: {@link FileAssetAPIImpl#findFileAssetsByFolder(Folder, User, boolean)}\n+     * When: Create two Folder with two files each one, grant permission over folders and files\n+     * and try to get the files from the first folder\n+     * Should: return only the two files into the first folder\n+     *\n+     * @throws IOException\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    @Test\n+    public void shouldReturnTwoFiles() throws IOException, DotDataException, DotSecurityException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+\n+        final Host host = new SiteDataGen().nextPersisted();\n+\n+        final Folder folder1 = new FolderDataGen().site(host).nextPersisted();\n+        final Contentlet fileAsset1 = FileAssetDataGen.createFileAsset(folder1, \"text1\", \".txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058bf63a98483d2f4a805a74d63c5e5f6a7cf6d8"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}