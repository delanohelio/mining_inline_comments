{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Nzc1OTY0", "number": 18001, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MToxOFrODg3OXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxN1rODi4A8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg1ODIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MToxOFrOFrTcmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjo0ODo1MlrOFsbGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcwNQ==", "bodyText": "does it has unit test?\nit should check diff scenarios", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380951705", "createdAt": "2020-02-18T21:41:18Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public class DockerSecretsUtil {\n+\n+    private static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyNTU3NA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382125574", "createdAt": "2020-02-20T16:48:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public class DockerSecretsUtil {\n+\n+    private static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcwNQ=="}, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg1OTYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MTo0N1rOFrTdag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MTo0N1rOFrTdag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTkxNA==", "bodyText": "I used to do also secretsDir.canRead()", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380951914", "createdAt": "2020-02-18T21:41:47Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public class DockerSecretsUtil {\n+\n+    private static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());\n+            for (String line : lines) {\n+                final int index = line.indexOf(\"=\");\n+                if (index < 0) {\n+                    throw new DotRuntimeException(\n+                            \"Invalid secrets in file at [\" + secretsFile.toPath() + \"]\");\n+                }\n+                final String key = line.substring(0, index);\n+                final String value = line.substring(index + 1);\n+                secrets.put(key, value);\n+            }\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+        return secrets;\n+\n+    }\n+\n+\n+    public static Map<String, String> load(final File secretsDir) throws DotRuntimeException {\n+\n+        if (!secretsDir.exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg2MzcxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DotDatasourceStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MzoxN1rOFrTgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MzoxN1rOFrTgHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjYwNQ==", "bodyText": "this could be FunctionalInterface since it is just want method, also add some doc", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r380952605", "createdAt": "2020-02-18T21:43:17Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DotDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.dotmarketing.db;\n+\n+import javax.sql.DataSource;\n+\n+public interface DotDatasourceStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDUxNTA3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1NzoyMFrOFrsx9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNTo1NzoyMFrOFrsx9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2Njc3Mw==", "bodyText": "Use DB_PROPERTIES_FILE_NAME", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r381366773", "createdAt": "2020-02-19T15:57:20Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariConfig;\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(\"db.properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDY0NjM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNTo0MFrOFruCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNTo0MFrOFruCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzQyMQ==", "bodyText": "Please remove this stack", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r381387421", "createdAt": "2020-02-19T16:25:40Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariConfig;\n+import com.dotcms.repackage.com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(\"db.properties\");\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adc9a627ed69e3d8655ea998d2b7f08afc953699"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTQzMDk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjowNzozMVrOFsZf3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoxNToyN1rOFshs0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTQyMg==", "bodyText": "I think it should be a private method: addJNDIIfNeeded,  and remove the comment", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382099422", "createdAt": "2020-02-20T16:07:31Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }\n \n                     try {\n-                        final InitialContext ctx = new InitialContext();\n-                        defaultDataSource = (DataSource) JNDIUtil.lookup(ctx, Constants.DATABASE_DEFAULT_DATASOURCE);\n-                    } catch (Throwable e) {\n-                        Logger.error(DbConnectionFactory.class,\n-                                \"---------- DBConnectionFactory: error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE,\n-                                e);\n-                        if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n-                          e.printStackTrace();\n-                          System.exit(1);\n+                        //Adds datasource to JNDI if needed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzMzgxMQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382233811", "createdAt": "2020-02-20T20:15:27Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }\n \n                     try {\n-                        final InitialContext ctx = new InitialContext();\n-                        defaultDataSource = (DataSource) JNDIUtil.lookup(ctx, Constants.DATABASE_DEFAULT_DATASOURCE);\n-                    } catch (Throwable e) {\n-                        Logger.error(DbConnectionFactory.class,\n-                                \"---------- DBConnectionFactory: error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE,\n-                                e);\n-                        if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n-                          e.printStackTrace();\n-                          System.exit(1);\n+                        //Adds datasource to JNDI if needed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5OTQyMg=="}, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTQzNTY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjowODo1NFrOFsZi7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDoxMzozMVrOFshpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDIwNg==", "bodyText": "I think this logci should be done here\nhttps://github.com/dotCMS/core/pull/18001/files#diff-af00bd78368cad4f517e1e6efb230d80R124\nand not in each Strategy", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382100206", "createdAt": "2020-02-20T16:08:54Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIzMjkyNQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382232925", "createdAt": "2020-02-20T20:13:31Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDIwNg=="}, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTQ0NDQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoxMToyM1rOFsZoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyMDoxM1rOFtx-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTY3NQ==", "bodyText": "I think each strategy should have test", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382101675", "createdAt": "2020-02-20T16:11:23Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);\n+            }\n+\n+            throw new DotRuntimeException(e.toString());\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0OTAyOQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r383549029", "createdAt": "2020-02-24T22:20:13Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDatasourceStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDatasourceStrategy implements DotDatasourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private DBPropertiesDatasourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDatasourceStrategy INSTANCE = new DBPropertiesDatasourceStrategy();\n+    }\n+\n+    public static DBPropertiesDatasourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        return resourceURL!=null && new File(resourceURL.getPath()).exists();\n+    }\n+\n+    @Override\n+    public DataSource getDatasource() {\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME);\n+\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+            properties.load(loader.getResourceAsStream(DB_PROPERTIES_FILE_NAME));\n+\n+            final HikariConfig config = new HikariConfig();\n+\n+            config.setPoolName(Constants.DATABASE_DEFAULT_DATASOURCE);\n+            config.setDriverClassName(properties.getString(\"connection_db_driver\"));\n+            config.setJdbcUrl(properties.getString(\"connection_db_base_url\"));\n+            config.setUsername(properties.getString(\"connection_db_username\"));\n+            config.setPassword(properties.getString(\"connection_db_password\"));\n+            config.setMaximumPoolSize(properties.getInt(\"connection_db_max_total\", 60));\n+            config.setIdleTimeout(properties.getInt(\"connection_db_max_idle\", 10) * 1000);\n+            config.setMaxLifetime(properties.getInt(\"connection_db_max_wait\", 60000));\n+            config.setConnectionTestQuery(properties.getString(\"connection_db_validation_query\"));\n+\n+            // This property controls the amount of time that a connection can be out of the pool before a message\n+            // is logged indicating a possible connection leak. A value of 0 means leak detection is disabled.\n+            // Lowest acceptable value for enabling leak detection is 2000 (2 seconds). Default: 0\n+            config.setLeakDetectionThreshold(properties.getInt(\"connection_db_leak_detection_threshold\", 60000));\n+\n+            config.setTransactionIsolation(properties.getString(\"connection_db_default_transaction_isolation\"));\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException e) {\n+            Logger.error(DBPropertiesDatasourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+            if(Config.getBooleanProperty(\"SYSTEM_EXIT_ON_STARTUP_FAILURE\", true)){\n+                System.exit(1);\n+            }\n+\n+            throw new DotRuntimeException(e.toString());\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTY3NQ=="}, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTQ0NTExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoxMTozMlrOFsZpEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyMTowMlrOFtx_7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTc3OQ==", "bodyText": "test?", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r382101779", "createdAt": "2020-02-20T16:11:32Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0OTQyMA==", "bodyText": "It's difficult to add a test to this method without using PowerMockito", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r383549420", "createdAt": "2020-02-24T22:21:02Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -100,20 +112,34 @@ public static DataSource getDataSource() {\n             synchronized (DbConnectionFactory.class) {\n \n                 if (null == defaultDataSource) {\n+                    if (DBPropertiesDatasourceStrategy.getInstance().existsDBPropertiesFile()) {\n+                        defaultDataSource = DBPropertiesDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from db.properties file\");\n+                    } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                        defaultDataSource = SystemEnvDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from system environment\");\n+                    } else {\n+                        defaultDataSource = DockerSecretDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from Docker Secret\");\n+                    }\n+\n+                    if (null == defaultDataSource){\n+                        defaultDataSource = TomcatDatasourceStrategy.getInstance().getDatasource();\n+                        Logger.info(DbConnectionFactory.class, \"Datasource loaded from context.xml\");\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTc3OQ=="}, "originalCommit": {"oid": "73de78567051455eb88b97b28c3ca4fc25e1e0f1"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5MDQ2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxNjo0MlrOFuOQAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxODozMVrOFuXUVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjI5MQ==", "bodyText": "what is the expected result of this test?", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384012291", "createdAt": "2020-02-25T17:16:42Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDg1Mw==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160853", "createdAt": "2020-02-25T22:18:31Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMjI5MQ=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3Nzk5ODg4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxODo0MlrOFuOVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxODoyNVrOFuXUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzU5OA==", "bodyText": "should these properties be constants? I see them repeated a few times", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384013598", "createdAt": "2020-02-25T17:18:42Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    @Test\n+    public void testGetHikariConfig(){\n+        final Map<String, String> dockerSecretsMap = new HashMap<>();\n+\n+        dockerSecretsMap.put(\"connection_db_driver\", \"org.postgresql.Driver\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDgwNA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160804", "createdAt": "2020-02-25T22:18:25Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    @Test\n+    public void testGetHikariConfig(){\n+        final Map<String, String> dockerSecretsMap = new HashMap<>();\n+\n+        dockerSecretsMap.put(\"connection_db_driver\", \"org.postgresql.Driver\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxMzU5OA=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAwMzYyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoxOTo1NlrOFuOX9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxODoyMFrOFuXUAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNDMyNw==", "bodyText": "given scenario and expected result?", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384014327", "createdAt": "2020-02-25T17:19:56Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDc2OQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160769", "createdAt": "2020-02-25T22:18:20Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNDMyNw=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODAxMTIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzoyMTozN1rOFuOcVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxODoxNlrOFuXT5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNTQ0Ng==", "bodyText": "given scenario and expected result?", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384015446", "createdAt": "2020-02-25T17:21:37Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDc0Mw==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160743", "createdAt": "2020-02-25T22:18:16Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testApply() throws SQLException, NamingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAxNTQ0Ng=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODA3MDUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzozNjozMVrOFuO_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoxODowOFrOFuXTog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw==", "bodyText": "if Docker secrets can't be applied, do we log this anyways? might be deceiving", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384024453", "createdAt": "2020-02-25T17:36:31Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -123,6 +133,79 @@ public static DataSource getDataSource() {\n         return defaultDataSource;\n     }\n \n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    private static void loadDatasource()\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        final String providerClassName = Config\n+                .getStringProperty(\"DATASOURCE_PROVIDER_STRATEGY_CLASS\", null);\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (DBPropertiesDataSourceStrategy.getInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = DBPropertiesDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                defaultDataSource = SystemEnvDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else {\n+                defaultDataSource = DockerSecretDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNTMyMA==", "bodyText": "shouldn't this else check for something like systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")!=null like in the Docker strategy, or something else? or if not at least not logging  Datasource loaded from Docker Secret in case defaultDataSource is null.", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384025320", "createdAt": "2020-02-25T17:38:07Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -123,6 +133,79 @@ public static DataSource getDataSource() {\n         return defaultDataSource;\n     }\n \n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    private static void loadDatasource()\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        final String providerClassName = Config\n+                .getStringProperty(\"DATASOURCE_PROVIDER_STRATEGY_CLASS\", null);\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (DBPropertiesDataSourceStrategy.getInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = DBPropertiesDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                defaultDataSource = SystemEnvDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else {\n+                defaultDataSource = DockerSecretDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2MDY3NA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384160674", "createdAt": "2020-02-25T22:18:08Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DbConnectionFactory.java", "diffHunk": "@@ -123,6 +133,79 @@ public static DataSource getDataSource() {\n         return defaultDataSource;\n     }\n \n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    private static void loadDatasource()\n+            throws InstantiationException, IllegalAccessException, ClassNotFoundException {\n+        final String providerClassName = Config\n+                .getStringProperty(\"DATASOURCE_PROVIDER_STRATEGY_CLASS\", null);\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (DBPropertiesDataSourceStrategy.getInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = DBPropertiesDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (System.getenv(\"connection_db_base_url\") != null) {\n+                defaultDataSource = SystemEnvDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else {\n+                defaultDataSource = DockerSecretDataSourceStrategy.getInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDQ1Mw=="}, "originalCommit": {"oid": "1c4aaa49e57bf9086399a1504d8316eee337008c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo0OFrOFuXkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo0OFrOFuXkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDkyMA==", "bodyText": "Issue found: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164920", "createdAt": "2020-02-25T22:27:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.db;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private static File propertiesFile;\n+\n+    @VisibleForTesting\n+    DBPropertiesDataSourceStrategy(final File file){\n+        propertiesFile = file;\n+    }\n+\n+    private DBPropertiesDataSourceStrategy(){\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        if (resourceURL!=null){\n+            propertiesFile = new File(resourceURL.getPath());\n+        }\n+\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDataSourceStrategy INSTANCE = new DBPropertiesDataSourceStrategy();\n+    }\n+\n+    public static DBPropertiesDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        return propertiesFile!=null && propertiesFile.exists();\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+\n+            if (!(existsDBPropertiesFile())){\n+                throw new FileNotFoundException(\"DB properties file not found\");\n+            }\n+\n+            properties.load(new FileInputStream(propertiesFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretDataSourceStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo0OVrOFuXkSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo0OVrOFuXkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDkzNg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164936", "createdAt": "2020-02-25T22:27:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotmarketing.db;\n+\n+import static com.dotmarketing.db.DataSourceStrategyProvider.CONNECTION_DB_MAX_WAIT;\n+import static com.dotmarketing.db.DataSourceStrategyProvider.CONNECTION_DB_PASSWORD;\n+\n+import com.dotmarketing.util.Constants;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.util.Map;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Singleton class that provides a datasource using docker secret configuration\n+ * If <b>DOCKER_SECRET_FILE_PATH</b> environment variable is set, secrets credential will be taken from this file.\n+ * Otherwise, they will be read from <b>/run/secrets/</b> path\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static SystemEnvironmentProperties systemEnvironmentProperties;\n+\n+    public static final String DOCKER_SECRET_FILE_PATH_PROPERTY = \"DOCKER_SECRET_FILE_PATH\";\n+\n+    private DockerSecretDataSourceStrategy(){\n+        systemEnvironmentProperties = new SystemEnvironmentProperties();\n+    }\n+\n+    @VisibleForTesting\n+    DockerSecretDataSourceStrategy(final SystemEnvironmentProperties systemEnvironmentProperties){\n+        this.systemEnvironmentProperties = systemEnvironmentProperties;\n+    }\n+\n+\n+    private static class SingletonHelper{\n+        private static final DockerSecretDataSourceStrategy INSTANCE = new DockerSecretDataSourceStrategy();\n+    }\n+\n+    public static DockerSecretDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    public boolean dockerSecretPathExists(){\n+\n+        final File secretsDir = new File(DockerSecretsUtil.SECRETS_DIR);\n+        return systemEnvironmentProperties.getVariable(DOCKER_SECRET_FILE_PATH_PROPERTY) != null\n+                || (secretsDir.exists() && secretsDir.canRead());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1MVrOFuXkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1MVrOFuXkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk0NA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164944", "createdAt": "2020-02-25T22:27:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link DBPropertiesDataSourceStrategy} class\n+ *\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1MlrOFuXkWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1MlrOFuXkWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk1Mg==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164952", "createdAt": "2020-02-25T22:27:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1Nzc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1M1rOFuXkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1M1rOFuXkYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk2MA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164960", "createdAt": "2020-02-25T22:27:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NFrOFuXkaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NFrOFuXkaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk2OQ==", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164969", "createdAt": "2020-02-25T22:27:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.dotmarketing.db;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+\n+/**\n+ * Singleton class that provides a datasource using a <b>db.properties</b> file configuration\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private static final String DB_PROPERTIES_FILE_NAME = \"db.properties\";\n+\n+    private static File propertiesFile;\n+\n+    @VisibleForTesting\n+    DBPropertiesDataSourceStrategy(final File file){\n+        propertiesFile = file;\n+    }\n+\n+    private DBPropertiesDataSourceStrategy(){\n+        final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        final URL resourceURL = loader.getResource(DB_PROPERTIES_FILE_NAME);\n+        if (resourceURL!=null){\n+            propertiesFile = new File(resourceURL.getPath());\n+        }\n+\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DBPropertiesDataSourceStrategy INSTANCE = new DBPropertiesDataSourceStrategy();\n+    }\n+\n+    public static DBPropertiesDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     *\n+     * @return True if a <b>db.properties</b> file exists in WEB-INF/classes directory\n+     */\n+    public boolean existsDBPropertiesFile() {\n+        return propertiesFile!=null && propertiesFile.exists();\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        final PropertiesConfiguration properties = new PropertiesConfiguration();\n+        try {\n+\n+            if (!(existsDBPropertiesFile())){\n+                throw new FileNotFoundException(\"DB properties file not found\");\n+            }\n+\n+            properties.load(new FileInputStream(propertiesFile));\n+\n+            final HikariConfig config = getHikariConfig(properties);\n+\n+            properties.clear();\n+            return new HikariDataSource(config);\n+        } catch (ConfigurationException | FileNotFoundException e) {\n+            Logger.error(DBPropertiesDataSourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE\n+                            + \" from db.properties file\",\n+                    e);\n+\n+            throw new DotRuntimeException(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1NzkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NVrOFuXkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NVrOFuXkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk4Mw==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164983", "createdAt": "2020-02-25T22:27:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1Nzk5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DataSourceStrategyProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NlrOFuXkfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1NlrOFuXkfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NDk5MA==", "bodyText": "Issue found: Local variable 'customStrategy' could be declared final", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384164990", "createdAt": "2020-02-25T22:27:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DataSourceStrategyProvider.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Class used to obtain a valid DataSource strategy provider\n+ * @author nollymar\n+ */\n+public class DataSourceStrategyProvider {\n+\n+    static final String CONNECTION_DB_DRIVER = \"connection_db_driver\";\n+    static final String CONNECTION_DB_BASE_URL = \"connection_db_base_url\";\n+    static final String CONNECTION_DB_USERNAME = \"connection_db_username\";\n+    static final String CONNECTION_DB_PASSWORD = \"connection_db_password\";\n+    static final String CONNECTION_DB_MAX_WAIT = \"connection_db_max_wait\";\n+    static final String CONNECTION_DB_MAX_TOTAL = \"connection_db_max_total\";\n+    static final String CONNECTION_DB_MAX_IDLE = \"connection_db_max_idle\";\n+    static final String CONNECTION_DB_VALIDATION_QUERY = \"connection_db_validation_query\";\n+    static final String CONNECTION_DB_LEAK_DETECTION_THRESHOLD = \"connection_db_leak_detection_threshold\";\n+    static final String CONNECTION_DB_DEFAULT_TRANSACTION_ISOLATION = \"connection_db_default_transaction_isolation\";\n+    private static SystemEnvironmentProperties systemEnvironmentProperties;\n+\n+    @VisibleForTesting\n+    DataSourceStrategyProvider(){\n+        systemEnvironmentProperties = new SystemEnvironmentProperties();\n+    }\n+\n+    private static class SingletonHelper{\n+        private static final DataSourceStrategyProvider INSTANCE = new DataSourceStrategyProvider();\n+    }\n+\n+    public static DataSourceStrategyProvider getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    /**\n+     * Method that loads a datasource from a custom implementation if <b>DATASOURCE_PROVIDER_STRATEGY_CLASS</b>\n+     * property is defined. Otherwise, the datasource is initialized using any of these implementations (respecting order):<br>\n+     * 1. A db.properties file in WEB-INF/classes implemented by {@link DBPropertiesDataSourceStrategy}<br>\n+     * 2. Configuration is taken from environment variables implemented by {@link SystemEnvDataSourceStrategy}<br>\n+     * 3. Getting Docker Secrets if set. Implementation: {@link DockerSecretDataSourceStrategy}<br>\n+     * 4. A context.xml file in META-INF. Implementation: {@link TomcatDataSourceStrategy}\n+     *\n+     * @throws InstantiationException\n+     * @throws IllegalAccessException\n+     * @throws ClassNotFoundException\n+     */\n+    public DataSource get()\n+            throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n+\n+        DataSource defaultDataSource = null;\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = getSystemEnvironmentProperties();\n+\n+        final String providerClassName = getCustomDataSourceProvider();\n+\n+        if (!UtilMethods.isSet(providerClassName)) {\n+            if (getDBPropertiesInstance()\n+                    .existsDBPropertiesFile()) {\n+                defaultDataSource = getDBPropertiesInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from db.properties file\");\n+            } else if (systemEnvironmentProperties.getVariable(\"connection_db_base_url\") != null) {\n+                defaultDataSource = getSystemEnvDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from system environment\");\n+            } else if (getDockerSecretDataSourceInstance().dockerSecretPathExists()){\n+                defaultDataSource = getDockerSecretDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from Docker Secret\");\n+            }\n+\n+            if (null == defaultDataSource) {\n+                defaultDataSource = getTomcatDataSourceInstance()\n+                        .apply();\n+                Logger.info(DbConnectionFactory.class,\n+                        \"Datasource loaded from context.xml\");\n+            }\n+        } else {\n+            DotDataSourceStrategy customStrategy = ((Class<DotDataSourceStrategy>) Class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1N1rOFuXkiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1N1rOFuXkiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAwMQ==", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165001", "createdAt": "2020-02-25T22:27:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/DockerSecretsUtil.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotmarketing.db;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\n+/**\n+ * Original code was taken from https://github.com/carsdotcom/docker-secrets-java/blob/master/src/main/java/com/cars/framework/secrets/DockerSecrets.java\n+ * and modified to our needs (License type: Apache 2.0)\n+ * @author github.com/carsdotcom\n+ */\n+public final class DockerSecretsUtil {\n+\n+    public static final String SECRETS_DIR = \"/run/secrets/\";\n+\n+    private DockerSecretsUtil(){\n+\n+    }\n+\n+    public static Map<String, String> load() throws DotRuntimeException {\n+        final File secretsDir = new File(SECRETS_DIR);\n+        return load(secretsDir);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final String fileName) throws DotRuntimeException {\n+        File secretsFile;\n+        if (Paths.get(fileName).isAbsolute()){\n+            secretsFile = new File(fileName);\n+        }else{\n+            secretsFile = new File(SECRETS_DIR + fileName);\n+        }\n+\n+        return loadFromFile(secretsFile);\n+    }\n+\n+    public static Map<String, String> loadFromFile(final File secretsFile)\n+            throws DotRuntimeException {\n+\n+        if (!secretsFile.exists() || !secretsFile.canRead()) {\n+            throw new DotRuntimeException(\n+                    \"Unable to read secrets from file at [\" + secretsFile.toPath() + \"]\");\n+        }\n+\n+        final Map<String, String> secrets = new HashMap<>();\n+\n+        try {\n+            final List<String> lines = Files.readAllLines(secretsFile.toPath(), Charset.defaultCharset());\n+            for (final String line : lines) {\n+                final int index = line.indexOf('=');\n+                if (index < 0) {\n+                    throw new DotRuntimeException(\n+                            \"Invalid secrets in file at [\" + secretsFile.toPath() + \"]\");\n+                }\n+                final String key = line.substring(0, index);\n+                final String value = line.substring(index + 1);\n+                secrets.put(key, value);\n+            }\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1OFrOFuXklA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1OFrOFuXklA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAxMg==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165012", "createdAt": "2020-02-25T22:27:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n+        Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();\n+        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(testCase.equals(\"Tomcat\")? 1: 0)).apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1OVrOFuXkng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyNzo1OVrOFuXkng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAyMg==", "bodyText": "Issue found: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165022", "createdAt": "2020-02-25T22:27:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/db/TomcatDataSourceStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowMVrOFuXkpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowMVrOFuXkpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTAzMA==", "bodyText": "Issue found: New exception is thrown in catch block, original stack trace may be lost", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165030", "createdAt": "2020-02-25T22:28:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/db/TomcatDataSourceStrategy.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.dotmarketing.db;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.JNDIUtil;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+\n+/**\n+ * Singleton class that obtains a datasource from a <b>context.xml</b> file\n+ * @author nollymar\n+ */\n+public class TomcatDataSourceStrategy implements DotDataSourceStrategy {\n+\n+    private TomcatDataSourceStrategy(){}\n+\n+    private static class SingletonHelper{\n+        private static TomcatDataSourceStrategy INSTANCE = new TomcatDataSourceStrategy();\n+    }\n+\n+    public static TomcatDataSourceStrategy getInstance(){\n+        return SingletonHelper.INSTANCE;\n+    }\n+\n+    @Override\n+    public DataSource apply() {\n+        try {\n+            final InitialContext ctx = new InitialContext();\n+            final HikariConfig config = new HikariConfig();\n+            config.setDataSource((DataSource) JNDIUtil.lookup(ctx, Constants.DATABASE_DEFAULT_DATASOURCE));\n+            return new HikariDataSource(config);\n+        } catch (NamingException e) {\n+            Logger.error(TomcatDataSourceStrategy.class,\n+                    \"---------- Error getting dbconnection \" + Constants.DATABASE_DEFAULT_DATASOURCE + \" from context.xml\",\n+                    e);\n+\n+            throw new DotRuntimeException(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODM5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowM1rOFuXktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowM1rOFuXktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA0NQ==", "bodyText": "Issue found: Parameter 'properties' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165045", "createdAt": "2020-02-25T22:28:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link SystemEnvDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using system environment variables\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, NamingException {\n+        final Map<String, String> properties = new HashMap<>();\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+        properties.put(\"connection_db_driver\", testDatasource.getDriverClassName());\n+        properties.put(\"connection_db_base_url\", testDatasource.getJdbcUrl());\n+        properties.put(\"connection_db_username\", testDatasource.getUsername());\n+        properties.put(\"connection_db_password\", testDatasource.getPassword());\n+        properties.put(\"connection_db_max_total\", \"60\");\n+        properties.put(\"connection_db_max_idle\", \"10\");\n+        properties.put(\"connection_db_max_wait\", \"60000\");\n+        properties.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        properties.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        properties.forEach((k,v) -> Mockito.when(systemEnvironmentProperties.getVariable(k)).thenReturn(v));\n+\n+        SystemEnvDataSourceStrategy strategy = new SystemEnvDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final HikariDataSource dataSource = (HikariDataSource)\n+                strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertNotNull(dataSource.getConnection());\n+        validateConfiguration(dataSource, properties);\n+    }\n+\n+    /**\n+     * Verifies all values in the dataSource object are set correctly\n+     * @param dataSource {@link HikariDataSource} to be validated\n+     * @param properties {@link Map} contains the expected values to be compared\n+     */\n+    private void validateConfiguration(final HikariDataSource dataSource, Map<String, String> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowNVrOFuXkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowNVrOFuXkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA2MA==", "bodyText": "Issue found: Local variable 'result' could be declared final", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165060", "createdAt": "2020-02-25T22:28:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowNlrOFuXk0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowNlrOFuXk0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA3Mw==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165073", "createdAt": "2020-02-25T22:28:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowN1rOFuXk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowN1rOFuXk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTA5MQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165091", "createdAt": "2020-02-25T22:28:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DBPropertiesDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Constants;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link DBPropertiesDataSourceStrategy} class\n+ *\n+ * @author nollymar\n+ */\n+public class DBPropertiesDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testExistsDBPropertiesFileShouldReturnFalse() {\n+        final DBPropertiesDataSourceStrategy strategy = new DBPropertiesDataSourceStrategy(\n+                new File(\"fake_file.properties\"));\n+        assertFalse(strategy.existsDBPropertiesFile());\n+    }\n+\n+    @Test\n+    public void testExistsDBPropertiesFileShouldReturnTrue() throws IOException {\n+        final Path path = Files.createTempFile(\"test\", String.valueOf(System.currentTimeMillis()));\n+        final DBPropertiesDataSourceStrategy strategy = new DBPropertiesDataSourceStrategy(\n+                path.toFile());\n+        assertTrue(strategy.existsDBPropertiesFile());\n+    }\n+\n+    @Test(expected = DotRuntimeException.class)\n+    public void testApplyWithANonExistingFileShouldFail() {\n+        new DBPropertiesDataSourceStrategy(new File(\"fake_file.properties\")).apply();\n+    }\n+\n+    @Test(expected = DotRuntimeException.class)\n+    public void testApplyWithANullFileShouldFail() {\n+        new DBPropertiesDataSourceStrategy(null).apply();\n+    }\n+\n+    @Test\n+    public void testApplyWithValidFileShouldPass()\n+            throws IOException, SQLException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final DataSource dataSource = new DBPropertiesDataSourceStrategy(tempFile).apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    @Test\n+    public void testGetHikariConfigWithValidFileShouldPass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODc1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowOVrOFuXk7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODowOVrOFuXk7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEwMg==", "bodyText": "Issue found: Parameter 'dockerSecretsMap' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165102", "createdAt": "2020-02-25T22:28:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using a docker secrets file\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws IOException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#getHikariConfig(Map)}\n+     * Test case: Tests that all values in the config object are set correctly\n+     * Expected result: Success\n+     */\n+    @Test\n+    public void testGetHikariConfig(){\n+        final Map<String, String> dockerSecretsMap = new HashMap<>();\n+\n+        dockerSecretsMap.put(\"connection_db_driver\", \"org.postgresql.Driver\");\n+        dockerSecretsMap.put(\"connection_db_base_url\", \"jdbc:postgresql://localhost/dotcms\");\n+        dockerSecretsMap.put(\"connection_db_username\", \"username\");\n+        dockerSecretsMap.put(\"connection_db_password\", \"password\");\n+        dockerSecretsMap.put(\"connection_db_max_total\", \"60\");\n+        dockerSecretsMap.put(\"connection_db_max_idle\", \"10\");\n+        dockerSecretsMap.put(\"connection_db_max_wait\", \"60000\");\n+        dockerSecretsMap.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        dockerSecretsMap.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final HikariConfig config = DockerSecretDataSourceStrategy.getInstance()\n+                .getHikariConfig(dockerSecretsMap);\n+\n+        validateConfiguration(config, dockerSecretsMap);\n+    }\n+\n+    /**\n+     * Verifies all values in the config object are set correctly\n+     * @param config {@link HikariConfig} to be validated\n+     * @param dockerSecretsMap {@link Map} contains the expected values to be compared\n+     */\n+    private void validateConfiguration(final HikariConfig config, Map<String, String> dockerSecretsMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMFrOFuXk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMFrOFuXk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTExNQ==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165115", "createdAt": "2020-02-25T22:28:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMVrOFuXlAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMVrOFuXlAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEyMw==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165123", "createdAt": "2020-02-25T22:28:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMlrOFuXlDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxMlrOFuXlDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEzMw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165133", "createdAt": "2020-02-25T22:28:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1ODk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxM1rOFuXlEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxM1rOFuXlEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTEzOQ==", "bodyText": "Issue found: Position literals first in String comparisons", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165139", "createdAt": "2020-02-25T22:28:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import com.zaxxer.hikari.HikariDataSource;\n+import javax.sql.DataSource;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DataSourceStrategyProvider}\n+ * @author nollymar\n+ */\n+@RunWith(DataProviderRunner.class)\n+public class DataSourceStrategyProviderTest {\n+\n+    @DataProvider\n+    public static Object[] testCases() {\n+\n+        return new String[]{\n+                \"DBProperties\",\n+                \"SystemEnv\",\n+                \"DockerSecret\",\n+                \"Tomcat\"\n+        };\n+    }\n+\n+    /**\n+     * Method to test: {@link DataSourceStrategyProvider#get()}\n+     * Test case: Verify this order is respected when DataSource credentials are obtained when a custom\n+     * provider is not set:\n+     *            2. db.properties file\n+     *            3. System environment variables\n+     *            4. Docker secrets\n+     *            5. context.xml\n+     *\n+     * Expected result: A DataSource is returned using the right provider\n+     * @param testCase\n+     * @throws IllegalAccessException\n+     * @throws InstantiationException\n+     * @throws ClassNotFoundException\n+     */\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGet(final String testCase)\n+            throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n+\n+        final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.mock(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.mock(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.mock(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.mock(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n+\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        Mockito.when(dbStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(systemEnvStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(dockerSecretStrategy.apply()).thenReturn(dummyDatasource);\n+        Mockito.when(tomcatDataSourceStrategy.apply()).thenReturn(dummyDatasource);\n+\n+\n+        //Gets the provider strategy\n+        DataSource result = provider.get();\n+\n+        assertNotNull(result);\n+        assertEquals(dummyDatasource, result);\n+\n+        Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n+        Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n+        Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1OTA2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxNVrOFuXlHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxNVrOFuXlHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE1MA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165150", "createdAt": "2020-02-25T22:28:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/DockerSecretDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.io.File;\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link DockerSecretDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class DockerSecretDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using a docker secrets file\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws IOException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, IOException, NamingException {\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+\n+        final File tempFile = createTempFile(\n+                \"connection_db_driver=\" + testDatasource.getDriverClassName() + \"\\n\"\n+                        + \"connection_db_base_url=\" + testDatasource.getJdbcUrl() + \"\\n\"\n+                        + \"connection_db_username=\" + testDatasource.getUsername() + \"\\n\"\n+                        + \"connection_db_password=\" + testDatasource.getPassword() + \"\\n\"\n+                        + \"connection_db_validation_query=SELECT 1\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        Mockito.when(systemEnvironmentProperties.getVariable(\"DOCKER_SECRET_FILE_PATH\")).thenReturn(tempFile.getPath());\n+\n+        final DockerSecretDataSourceStrategy strategy = new DockerSecretDataSourceStrategy(systemEnvironmentProperties);\n+\n+        final DataSource dataSource = strategy.apply();\n+\n+        assertNotNull(dataSource);\n+        assertTrue(dataSource instanceof HikariDataSource);\n+        assertNotNull(dataSource.getConnection());\n+    }\n+\n+    /**\n+     * Method to test: {@link DockerSecretDataSourceStrategy#getHikariConfig(Map)}\n+     * Test case: Tests that all values in the config object are set correctly\n+     * Expected result: Success\n+     */\n+    @Test\n+    public void testGetHikariConfig(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1OTEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/TomcatDatasourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxNlrOFuXlJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxNlrOFuXlJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE1OA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165158", "createdAt": "2020-02-25T22:28:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/TomcatDatasourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import javax.sql.DataSource;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for {@link TomcatDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class TomcatDatasourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODk1OTIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxN1rOFuXlMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjoyODoxN1rOFuXlMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NTE2OQ==", "bodyText": "Issue found: Local variable 'strategy' could be declared final", "url": "https://github.com/dotCMS/core/pull/18001#discussion_r384165169", "createdAt": "2020-02-25T22:28:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/db/SystemEnvDataSourceStrategyTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.dotmarketing.db;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.TestInitialContext;\n+import com.dotmarketing.util.Constants;\n+import com.liferay.util.SystemEnvironmentProperties;\n+import com.zaxxer.hikari.HikariDataSource;\n+import java.sql.SQLException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.naming.NamingException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+/**\n+ * Tests for {@link SystemEnvDataSourceStrategy}\n+ * @author nollymar\n+ */\n+public class SystemEnvDataSourceStrategyTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to test: {@link SystemEnvDataSourceStrategy#apply()}\n+     * Test case: Happy path to get a DataSource using system environment variables\n+     * Expected result: A valid HikariDataSource should be returned\n+     * @throws SQLException\n+     * @throws NamingException\n+     */\n+    @Test\n+    public void testApply() throws SQLException, NamingException {\n+        final Map<String, String> properties = new HashMap<>();\n+        final HikariDataSource testDatasource = (HikariDataSource) TestInitialContext.getInstance()\n+                .getDataSource();\n+        properties.put(\"connection_db_driver\", testDatasource.getDriverClassName());\n+        properties.put(\"connection_db_base_url\", testDatasource.getJdbcUrl());\n+        properties.put(\"connection_db_username\", testDatasource.getUsername());\n+        properties.put(\"connection_db_password\", testDatasource.getPassword());\n+        properties.put(\"connection_db_max_total\", \"60\");\n+        properties.put(\"connection_db_max_idle\", \"10\");\n+        properties.put(\"connection_db_max_wait\", \"60000\");\n+        properties.put(\"connection_db_validation_query\", \"SELECT 1\");\n+        properties.put(\"connection_db_leak_detection_threshold\", \"60000\");\n+\n+        final SystemEnvironmentProperties systemEnvironmentProperties = Mockito.mock(SystemEnvironmentProperties.class);\n+\n+        properties.forEach((k,v) -> Mockito.when(systemEnvironmentProperties.getVariable(k)).thenReturn(v));\n+\n+        SystemEnvDataSourceStrategy strategy = new SystemEnvDataSourceStrategy(systemEnvironmentProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e471264c8b61c5473139b9299774ba75d9e15a8b"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2561, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}