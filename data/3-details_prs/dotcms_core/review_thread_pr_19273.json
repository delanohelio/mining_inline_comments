{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDk0MTMx", "number": 19273, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMzo0OVrOEkIrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0OVrOEnpERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzI2MzIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/integritycheckers/ContentFileAssetIntegrityChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMzo0OVrOHS5Gsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozMzo0OVrOHS5Gsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MjAxOA==", "bodyText": "In all these cases, I think we should use the JWT fingerprint as the key for the fixes, not the remote IP - or we should use the clusterId of the two environments.  The remoteIp can be changeable and does not really represent a dotCMS installation.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489572018", "createdAt": "2020-09-16T16:33:49Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/integritycheckers/ContentFileAssetIntegrityChecker.java", "diffHunk": "@@ -72,7 +72,7 @@ public boolean generateIntegrityResults(final String endpointId) throws Exceptio\n     }\n \n     @Override\n-    public void executeFix(final String endpointId) throws DotDataException, DotSecurityException {\n+    public void executeFix(final String remoteIP) throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzI5MTg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0MTozMlrOHS5Y_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0MTozMlrOHS5Y_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NjcwMw==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489576703", "createdAt": "2020-09-16T16:41:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "diffHunk": "@@ -12,45 +12,47 @@\n  */\n public class PublishAuditStatus implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzI5MjA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0MTozN1rOHS5ZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo0MTozN1rOHS5ZHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NjczMw==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489576733", "createdAt": "2020-09-16T16:41:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "diffHunk": "@@ -12,45 +12,47 @@\n  */\n public class PublishAuditStatus implements Serializable {\n \tprivate static final long serialVersionUID = 1L;\n-\t\n+\n \tpublic static enum Status {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzMzNTIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublisherQueueJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1Mzo1NVrOHS51Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1Mzo1NVrOHS51Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4MzkyNg==", "bodyText": "set finals and rename p to publisher", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489583926", "createdAt": "2020-09-16T16:53:55Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublisherQueueJob.java", "diffHunk": "@@ -548,48 +554,48 @@ private PublishAuditHistory getRemoteHistoryFromEndpoint(final  PublishAuditStat\n \t *            - The Id of the generated bundle.\n \t * @return The {@link Publisher} classes for the specified bundle.\n \t */\n-    private Set<Class<?>> getPublishersForBundle(String bundleId){\n+\tprivate Set<Class<?>> getPublishersForBundle(String bundleId){\n \n-        Set<Class<?>> publishersClasses = new HashSet<>();\n+\t\tSet<Class<?>> publishersClasses = new HashSet<>();\n \n-\t    try{\n-            Map<String, Class<? extends IPublisher>> protocolPublisherMap = Maps.newConcurrentMap();\n-            //TODO: for OSGI we need to get this list from implementations of IPublisher or something else.\n-            final Set<Class<?>> publishers = Sets.newHashSet(\n-                    PushPublisher.class,\n-                    AWSS3Publisher.class,\n+\t\ttry{\n+\t\t\tMap<String, Class<? extends IPublisher>> protocolPublisherMap = Maps.newConcurrentMap();\n+\t\t\t//TODO: for OSGI we need to get this list from implementations of IPublisher or something else.\n+\t\t\tfinal Set<Class<?>> publishers = Sets.newHashSet(\n+\t\t\t\t\tPushPublisher.class,\n+\t\t\t\t\tAWSS3Publisher.class,\n \t\t\t\t\tStaticPublisher.class);\n \n-            //Fill protocolPublisherMap with protocol -> publisher.\n-            for (Class publisher : publishers) {\n-                Publisher p = (Publisher)publisher.newInstance();\n-                for (String protocol : p.getProtocols()) {\n-                    protocolPublisherMap.put(protocol, publisher);\n-                }\n-            }\n-\n-            //For each environment in the bundle we need to get the end-points.\n-            List<Environment> environments = this.environmentAPI.findEnvironmentsByBundleId(bundleId);\n-\n-            for (Environment environment : environments) {\n-                //For each end-point we choose if run static or dynamic process (Static = AWSS3Publisher, Dynamic = PushPublisher)\n-                List<PublishingEndPoint> endpoints = this.publisherEndPointAPI.findSendingEndPointsByEnvironment(environment.getId());\n-\n-                //For each end-point we need include the Publisher depending on the type.\n-                for (PublishingEndPoint endpoint : endpoints) {\n-                    //Only if the end-point is enabled.\n-                    if (endpoint.isEnabled() && protocolPublisherMap.containsKey(endpoint.getProtocol())){\n-                        publishersClasses.add(protocolPublisherMap.get(endpoint.getProtocol()));\n-\n-                    }\n-                }\n-            }\n-        } catch (Exception e){\n-\t        Logger.error(this, \"Error trying to get publishers from bundle id: \" + bundleId, e);\n-        }\n-\n-\t    return publishersClasses;\n-    }\n+\t\t\t//Fill protocolPublisherMap with protocol -> publisher.\n+\t\t\tfor (Class publisher : publishers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 323}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzM0OTQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/endpoint/bean/PublishingEndPoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1Nzo1MFrOHS5-gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1Nzo1MFrOHS5-gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4NjMwNQ==", "bodyText": "any toString is creating a new String everything it is being used, it would be better to save it into a value to avoid new creations", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489586305", "createdAt": "2020-09-16T16:57:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/endpoint/bean/PublishingEndPoint.java", "diffHunk": "@@ -145,4 +153,36 @@ public StringBuilder toURL() {\n      * translated in upper layer.\n      */\n     public abstract void validatePublishingEndPoint() throws PublishingEndPointValidationException;\n+\n+    public boolean hasAuthKey() {\n+        final StringBuilder authKey = getAuthKey();\n+\n+        if (UtilMethods.isEmpty(authKey.toString())) {\n+            return false;\n+        }\n+\n+        return !isTokenExpired() && !isTokenInvalid();\n+    }\n+\n+    public boolean isTokenExpired() {\n+        final StringBuilder authKey = getAuthKey();\n+\n+        if (UtilMethods.isEmpty(authKey.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzM1MDcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1ODoxNFrOHS5_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjo1ODoxNFrOHS5_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU4NjUyMA==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489586520", "createdAt": "2020-09-16T16:58:14Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQwNDI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxMzowM1rOHS6g6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxMzo1NFrOHS6ivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTExNA==", "bodyText": "user has a method isAdmin if want to use short way", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489595114", "createdAt": "2020-09-16T17:13:03Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";\n+\n+    public static String EXPIRED_TOKEN_ERROR_KEY = \"__expired_token__\";\n+    public static String INVALID_TOKEN_ERROR_KEY = \"__invalid_token__\";\n+\n+    public Optional<String> getRequestToken(final PublishingEndPoint endpoint)  {\n+        try {\n+            final boolean useJWTToken = isJWTAvailable();\n+            final Optional<String> tokenOptional = useJWTToken ?\n+                    getJWTToken(endpoint) :\n+                    PushPublisher.retriveEndpointKeyDigest(endpoint);\n+\n+            if (!tokenOptional.isPresent()) {\n+                return tokenOptional;\n+            }\n+\n+            final String token = tokenOptional.get();\n+\n+            return Optional.of(JsonWebTokenAuthCredentialProcessor.BEARER + token);\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    public static boolean isJWTAvailable() {\n+        return Config.getBooleanProperty(\"USE_JWT_TOKEN_IN_PUSH_PUBLISH\", true);\n+    }\n+\n+    public boolean processAuthHeader(final HttpServletRequest request) throws DotSecurityException{\n+        final boolean useJWTToken = isJWTAvailable();\n+\n+        try {\n+            if (useJWTToken) {\n+                final User user = JsonWebTokenAuthCredentialProcessorImpl.getInstance().processAuthHeaderFromJWT(request);\n+\n+                if (!APILocator.getUserAPI().isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTU4MA==", "bodyText": "Log this \"\"Operation jus allow o admin user\"\" and return false, shouldn't use exception to handle this kind of flow", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489595580", "createdAt": "2020-09-16T17:13:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";\n+\n+    public static String EXPIRED_TOKEN_ERROR_KEY = \"__expired_token__\";\n+    public static String INVALID_TOKEN_ERROR_KEY = \"__invalid_token__\";\n+\n+    public Optional<String> getRequestToken(final PublishingEndPoint endpoint)  {\n+        try {\n+            final boolean useJWTToken = isJWTAvailable();\n+            final Optional<String> tokenOptional = useJWTToken ?\n+                    getJWTToken(endpoint) :\n+                    PushPublisher.retriveEndpointKeyDigest(endpoint);\n+\n+            if (!tokenOptional.isPresent()) {\n+                return tokenOptional;\n+            }\n+\n+            final String token = tokenOptional.get();\n+\n+            return Optional.of(JsonWebTokenAuthCredentialProcessor.BEARER + token);\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    public static boolean isJWTAvailable() {\n+        return Config.getBooleanProperty(\"USE_JWT_TOKEN_IN_PUSH_PUBLISH\", true);\n+    }\n+\n+    public boolean processAuthHeader(final HttpServletRequest request) throws DotSecurityException{\n+        final boolean useJWTToken = isJWTAvailable();\n+\n+        try {\n+            if (useJWTToken) {\n+                final User user = JsonWebTokenAuthCredentialProcessorImpl.getInstance().processAuthHeaderFromJWT(request);\n+\n+                if (!APILocator.getUserAPI().isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTExNA=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQwODg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNDoyMFrOHS6jwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNDoyMFrOHS6jwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NTg0MA==", "bodyText": "remove this", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489595840", "createdAt": "2020-09-16T17:14:20Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";\n+\n+    public static String EXPIRED_TOKEN_ERROR_KEY = \"__expired_token__\";\n+    public static String INVALID_TOKEN_ERROR_KEY = \"__invalid_token__\";\n+\n+    public Optional<String> getRequestToken(final PublishingEndPoint endpoint)  {\n+        try {\n+            final boolean useJWTToken = isJWTAvailable();\n+            final Optional<String> tokenOptional = useJWTToken ?\n+                    getJWTToken(endpoint) :\n+                    PushPublisher.retriveEndpointKeyDigest(endpoint);\n+\n+            if (!tokenOptional.isPresent()) {\n+                return tokenOptional;\n+            }\n+\n+            final String token = tokenOptional.get();\n+\n+            return Optional.of(JsonWebTokenAuthCredentialProcessor.BEARER + token);\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    public static boolean isJWTAvailable() {\n+        return Config.getBooleanProperty(\"USE_JWT_TOKEN_IN_PUSH_PUBLISH\", true);\n+    }\n+\n+    public boolean processAuthHeader(final HttpServletRequest request) throws DotSecurityException{\n+        final boolean useJWTToken = isJWTAvailable();\n+\n+        try {\n+            if (useJWTToken) {\n+                final User user = JsonWebTokenAuthCredentialProcessorImpl.getInstance().processAuthHeaderFromJWT(request);\n+\n+                if (!APILocator.getUserAPI().isCMSAdmin(user)){\n+                    throw new DotSecurityException(\"Operation jus allow o admin user\");\n+                }\n+\n+                return true;\n+            } else {\n+                return isValidDotCMSToken(request);\n+            }\n+        }catch (DotDataException | IOException | DotSecurityException exception) {\n+            return false;\n+        }\n+    }\n+\n+    private boolean isValidDotCMSToken(final HttpServletRequest request) throws DotDataException, IOException {\n+        final String remoteIP = request.getRemoteHost();\n+        final PublishingEndPoint publishingEndPoint =\n+                APILocator.getPublisherEndPointAPI().findEnabledSendingEndPointByAddress(remoteIP);\n+\n+        Optional<String> key = PushPublisher.retriveEndpointKeyDigest(publishingEndPoint);\n+        if(!key.isPresent()) {\n+            return false;\n+        }\n+\n+        final String token = getTokenFromRequest(request);\n+\n+        return token.equals( key.get() );\n+    }\n+\n+    private String getTokenFromRequest(final HttpServletRequest request) {\n+        final String authorizationHeader = request.getHeader(ContainerRequest.AUTHORIZATION);\n+\n+        if (StringUtils.isNotEmpty(authorizationHeader) && authorizationHeader.trim()\n+                .startsWith(BEARER)) {\n+\n+            return authorizationHeader.substring(BEARER.length());\n+        } else {\n+            throw new IllegalArgumentException(\"Bearer Authorization header expected\");\n+        }\n+    }\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQxMzE0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNToxNlrOHS6mGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNToxNlrOHS6mGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NjQ0MQ==", "bodyText": "rename to bundle", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489596441", "createdAt": "2020-09-16T17:15:16Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisher.java", "diffHunk": "@@ -218,71 +219,77 @@ public PublisherConfig process ( final PublishStatus status ) throws DotPublishi\n \n \t\t\t\t\tInputStream bundleStream = new BufferedInputStream(Files.newInputStream(bundle.toPath()));\n \n-\n-\n-\t        \t\ttry {\n-\t        \t\t\tBundle b=APILocator.getBundleAPI().getBundleById(this.config.getId());\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tBundle b = APILocator.getBundleAPI().getBundleById(this.config.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQyMTI4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNzo0MFrOHS6rQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxNzo0MFrOHS6rQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5Nzc2MA==", "bodyText": "I am wondering if this process should be Admin only @wezell", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489597760", "createdAt": "2020-09-16T17:17:40Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "diffHunk": "@@ -37,148 +43,160 @@\n public class BundlePublisherResource {\n \n \tpublic static String MY_TEMP = \"\";\n-\tprivate PublishingEndPointAPI endpointAPI = APILocator.getPublisherEndPointAPI();\n-\n-    /**\n-     * Method that receives from a server a bundle with the intention of publish it.<br/>\n-     * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n-     * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n-     * to the {@link PublishThread Publish Thread}.\n-     *\n-     * @param fileName       File name to be published\n-     * @param auth_token_enc Authentication token\n-     * @param groupId        Group who sent the Bundle\n-     * @param endpointId     End-point who sent the Bundle\n-\t * @param type\t\t\t response type\n-\t * @param callback \t\t response callback\n-\t * @param bundleName\t The name for the Bundle to publish\n-\t * @param forcePush \t true/false to Force the push\n-     * @param req            HttpRequest\n-     * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n-     * @see PublishThread\n-     */\n-    @POST\n-    @Path (\"/publish\")\n-    @Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\n+\t/**\n+\t * Method that receives from a server a bundle with the intention of publish it.<br/>\n+\t * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n+\t * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n+\t * to the {@link PublishThread Publish Thread}.\n+\t *\n+\t * @param type\t\t\t  response type\n+\t * @param callback \t\t  response callback\n+\t * @param forcePush \t  true/false to Force the push\n+\t * @param request         {@link HttpServletRequest}\n+\t * @param response        {@link HttpServletResponse}\n+\t * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n+\t * @see PublishThread\n+\t */\n+\t@POST\n+\t@Path (\"/publish\")\n+\t@Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\t@Produces(MediaType.APPLICATION_JSON)\n \tpublic Response publish(\n-\t\t\t@QueryParam(\"FILE_NAME\") String fileName,\n-\t\t\t@QueryParam(\"AUTH_TOKEN\") String auth_token_digest,\n-\t\t\t@QueryParam(\"GROUP_ID\") String groupId,\n-\t\t\t@QueryParam(\"ENDPOINT_ID\") String endpointId,\n-\t\t\t@QueryParam(\"type\") String type,\n-\t\t\t@QueryParam(\"callback\") String callback,\n-\t\t\t@QueryParam(\"BUNDLE_NAME\") String bundleName,\n-\t\t\t@QueryParam(\"FORCE_PUSH\") final boolean forcePush,\n-\t\t\t@Context HttpServletRequest req\n-\t) {\n-    \ttry {\n-    \t\ttry (InputStream bundleStream = req.getInputStream()) {\n-\t\t        //Creating an utility response object\n-\t\t        Map<String, String> paramsMap = new HashMap<String, String>();\n-\t\t        paramsMap.put( \"type\", type );\n-\t\t        paramsMap.put( \"callback\", callback );\n-\t\t        ResourceResponse responseResource = new ResourceResponse( paramsMap );\n-\n-\t\t\t\tString remoteIP = \"\";\n-\t\t\t\ttry {\n-\n-\t\t\t\t\tremoteIP = req.getRemoteHost();\n-\t\t\t\t\tif(!UtilMethods.isSet(remoteIP))\n-\t\t\t\t\t\tremoteIP = req.getRemoteAddr();\n-\n-\t\t\t\t\tHibernateUtil.startTransaction();\n-\n-\t\t\t\t\tPublishingEndPoint mySelf = endpointAPI.findEnabledSendingEndPointByAddress(remoteIP);\n-\n-\t\t\t\t\tif(mySelf==null || !isValidToken(auth_token_digest, remoteIP, mySelf)) {\n-\t\t\t\t\t\tbundleStream.close();\n-\t\t\t\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" invalid endpoint or token\");\n-\t\t\t\t\t\t\n-\t\t        return responseResource.responseError( HttpStatus.SC_UNAUTHORIZED );\n-\t\t       }\n-\n-\t\t\t\t\tString bundlePath = ConfigUtils.getBundlePath()+File.separator+MY_TEMP;\n-\t\t\t\t\tString bundleFolder = fileName.substring(0, fileName.indexOf(\".tar.gz\"));\n-\n-\t\t            PublishAuditStatus status = PublishAuditAPI.getInstance().updateAuditTable( mySelf.getId(), mySelf.getId(), bundleFolder, true );\n-\n-\t\t            if(bundleName.trim().length()>0) {\n-\t\t\t\t\t    // save bundle if it doesn't exists\n-\t\t                Bundle foundBundle = APILocator.getBundleAPI().getBundleById( bundleFolder );\n-\t\t                if ( foundBundle == null || foundBundle.getId() == null ) {\n-\t\t                    Bundle bundle = new Bundle();\n-\t\t\t\t\t\t\tbundle.setId(bundleFolder);\n-\t\t\t\t\t\t\tbundle.setName(bundleName);\n-\t\t\t\t\t\t\tbundle.setPublishDate(Calendar.getInstance().getTime());\n-\t\t\t\t\t\t\tbundle.setOwner(APILocator.getUserAPI().getSystemUser().getUserId());\n-\t\t\t\t\t\t\tbundle.setForcePush(forcePush);\n-\t\t                    APILocator.getBundleAPI().saveBundle(bundle);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//Write file on FS\n-\t\t\t\t\tFileUtil.writeToFile(bundleStream, bundlePath+fileName);\n-\n-\t\t\t\t\t//Start thread\n-\t\t\t\t\tif(!status.getStatus().equals(Status.PUBLISHING_BUNDLE)) {\n-\t\t\t\t\t\tnew Thread(new PublishThread(fileName, groupId, endpointId, status)).start();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tHibernateUtil.commitTransaction();\n-\n-\t\t\t\t\treturn Response.status(HttpStatus.SC_OK).build();\n-\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class, \"Error caused by remote call of: \"+remoteIP);\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t}\n-\t\t\t\tfinally {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.closeSession();\n-\t\t            } catch (DotHibernateException e) {\n-\t\t                Logger.error(this, \"error close session\",e);\n-\t\t            }\n-\t\t\t\t}\n-    \t\t}\n-    \t} catch (IOException e) {\n-    \t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-    \t}\n-\n-\t\treturn Response.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).build();\n+\t\t\t@QueryParam(\"type\")        final String type,\n+\t\t\t@QueryParam(\"callback\")    final String callback,\n+\t\t\t@QueryParam(\"FORCE_PUSH\")  final boolean forcePush,\n+\t\t\t@Context final HttpServletRequest  request,\n+\t\t\t@Context final HttpServletResponse response\n+\t) throws Exception {\n+\t\tfinal ResourceResponse responseResource = new ResourceResponse(\n+\t\t\t\tCollectionsUtils.map(\"type\", type, \"callback\", callback));\n+\t\tfinal String remoteIP = UtilMethods.isSet(request.getRemoteHost())?\n+\t\t\t\trequest.getRemoteHost() : request.getRemoteAddr();\n+\n+\n+\t\tif (request.getInputStream().isFinished()) {\n+\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" bundle expected\");\n+\t\t\treturn responseResource.responseError(HttpStatus.SC_BAD_REQUEST);\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tfinal boolean isTokenValid = AuthCredentialPushPublishUtil.INSTANCE.processAuthHeader(request);\n+\n+\t\t\tif (!isTokenValid) {\n+\t\t\t\tLogger.error(this.getClass(), \"Invalid token from \" + remoteIP + \" not permission\");\n+\t\t\t\treturn responseResource.responseAuthenticateError(\"invalid_token\",\n+\t\t\t\t\t\tAuthCredentialPushPublishUtil.INVALID_TOKEN_ERROR_KEY);\n+\t\t\t}\n+\n+\t\t\tfinal Bundle bundle = this.publishBundle(forcePush, request, remoteIP);\n+\n+\t\t\treturn Response.ok(bundle).build();\n+\t\t} catch (DotSecurityException e) {\n+\t\t\tLogger.error(this.getClass(), \"Not Admin user \" + remoteIP + \" not permission\");\n+\t\t\treturn responseResource.responseUnauthorizedError(\"admin_scope\");\n+\t\t} catch(IncorrectClaimException e){\n+\t\t\tfinal String claimName = e.getClaimName();\n+\n+\t\t\tif (Claims.EXPIRATION.equals(claimName)) {\n+\t\t\t\treturn responseResource.responseAuthenticateError(\"invalid_token\",\n+\t\t\t\t\t\tAuthCredentialPushPublishUtil.EXPIRED_TOKEN_ERROR_KEY);\n+\t\t\t} else {\n+\t\t\t\treturn responseResource.responseAuthenticateError(\"invalid_token\",\n+\t\t\t\t\t\tAuthCredentialPushPublishUtil.INVALID_TOKEN_ERROR_KEY);\n+\t\t\t}\n+\t\t}\n \t}\n \n-    /**\n-     * Validates a received token\n-     *\n-     * @param token    Token to validate\n-     * @param remoteIP Sender IP\n-     * @param mySelf   Current end point\n-     * @return True if valid\n-     * @throws IOException If fails reading the security token\n-     */\n-    public static boolean isValidToken ( String token, String remoteIP, PublishingEndPoint mySelf ) throws IOException {\n+\t@WrapInTransaction\n+\tprivate Bundle publishBundle(final boolean forcePush,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ5MzYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNzo1N1rOHS7X-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozNzo1N1rOHS7X-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwOTIwOQ==", "bodyText": "remove this", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489609209", "createdAt": "2020-09-16T17:37:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -662,43 +549,48 @@ public Response cancelIntegrityProcess ( @Context HttpServletRequest httpServlet\n                 throw new ForbiddenException(e);\n             }\n             return response( \"Error checking the integrity process status for End Point server: [\" + endpointId + \"]\", true );\n+        } catch (NotEndPointTokenFoundException e) {\n+            return Response.status( HttpStatus.SC_BAD_REQUEST )\n+                        .entity( responseMessage.append( \"Error: endpoint requires an authorization key\" ) ).build();\n         }\n \n         return response( responseMessage.toString(), false );\n     }\n \n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 597}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzQ5NDI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozODowNVrOHS7YWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzozODowNVrOHS7YWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwOTMwNg==", "bodyText": "set final", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489609306", "createdAt": "2020-09-16T17:38:05Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -662,43 +549,48 @@ public Response cancelIntegrityProcess ( @Context HttpServletRequest httpServlet\n                 throw new ForbiddenException(e);\n             }\n             return response( \"Error checking the integrity process status for End Point server: [\" + endpointId + \"]\", true );\n+        } catch (NotEndPointTokenFoundException e) {\n+            return Response.status( HttpStatus.SC_BAD_REQUEST )\n+                        .entity( responseMessage.append( \"Error: endpoint requires an authorization key\" ) ).build();\n         }\n \n         return response( responseMessage.toString(), false );\n     }\n \n+    @NotNull\n+    private Response cancelIntegrityRequest(String integrityDataRequestId, PublishingEndPoint endpoint)\n+            throws NotEndPointTokenFoundException {\n+        //Prepare the connection\n+        String url = String.format(\"%s/api/integrity/%s/\", endpoint.toURL(), integrityDataRequestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 601}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzUwMjI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MDoyOVrOHS7dYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxMzoyMVrOHUY8ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDU5Mw==", "bodyText": "I think this should be handle by annotations", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489610593", "createdAt": "2020-09-16T17:40:29Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1046,43 +933,82 @@ public Response fixConflictsFromRemote ( @Context final HttpServletRequest reque\n             Logger.error( this.getClass(), \"Error fixing \"+type+\" conflicts from remote\", e );\n             return response( \"Error fixing \"+type+\" conflicts from remote\" , true );\n         } finally {\n-\t\t\ttry {\n-\t\t\t\tif (requesterEndPoint != null) {\n-\t\t\t\t\t// Discard conflicts if successful or failed\n-\t\t\t\t\tintegrityUtil.discardConflicts(requesterEndPoint.getId(),\n-\t\t\t\t\t\t\tIntegrityType.valueOf(type.toUpperCase()));\n-\t\t\t\t}\n-\t\t\t} catch (DotDataException e) {\n-\t\t\t\tLogger.error(this.getClass(), \"ERROR: Table \"\n-\t\t\t\t\t\t+ IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n-\t\t\t\t\t\t+ \" could not be cleared on end-point [\" + requesterEndPoint.getId()\n-\t\t\t\t\t\t+ \"]. Please truncate the table data manually.\", e);\n-\t\t\t}\n-\n-\t\t\tHibernateUtil.closeSessionSilently();\n-\t\t}\n+            try {\n+                if (remoteIP != null) {\n+                    // Discard conflicts if successful or failed\n+                    integrityUtil.discardConflicts(remoteIP,\n+                            IntegrityType.valueOf(type.toUpperCase()));\n+                }\n+            } catch (DotDataException e) {\n+                Logger.error(this.getClass(), \"ERROR: Table \"\n+                        + IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n+                        + \" could not be cleared on request id [\" + remoteIP\n+                        + \"]. Please truncate the table data manually.\", e);\n+            }\n+\n+            HibernateUtil.closeSessionSilently();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 771}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MjMzOQ==", "bodyText": "done 303cd0b#diff-1c1ba904ed03287c1c0b48a6f3971449L949", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491142339", "createdAt": "2020-09-18T19:13:21Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1046,43 +933,82 @@ public Response fixConflictsFromRemote ( @Context final HttpServletRequest reque\n             Logger.error( this.getClass(), \"Error fixing \"+type+\" conflicts from remote\", e );\n             return response( \"Error fixing \"+type+\" conflicts from remote\" , true );\n         } finally {\n-\t\t\ttry {\n-\t\t\t\tif (requesterEndPoint != null) {\n-\t\t\t\t\t// Discard conflicts if successful or failed\n-\t\t\t\t\tintegrityUtil.discardConflicts(requesterEndPoint.getId(),\n-\t\t\t\t\t\t\tIntegrityType.valueOf(type.toUpperCase()));\n-\t\t\t\t}\n-\t\t\t} catch (DotDataException e) {\n-\t\t\t\tLogger.error(this.getClass(), \"ERROR: Table \"\n-\t\t\t\t\t\t+ IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n-\t\t\t\t\t\t+ \" could not be cleared on end-point [\" + requesterEndPoint.getId()\n-\t\t\t\t\t\t+ \"]. Please truncate the table data manually.\", e);\n-\t\t\t}\n-\n-\t\t\tHibernateUtil.closeSessionSilently();\n-\t\t}\n+            try {\n+                if (remoteIP != null) {\n+                    // Discard conflicts if successful or failed\n+                    integrityUtil.discardConflicts(remoteIP,\n+                            IntegrityType.valueOf(type.toUpperCase()));\n+                }\n+            } catch (DotDataException e) {\n+                Logger.error(this.getClass(), \"ERROR: Table \"\n+                        + IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n+                        + \" could not be cleared on request id [\" + remoteIP\n+                        + \"]. Please truncate the table data manually.\", e);\n+            }\n+\n+            HibernateUtil.closeSessionSilently();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMDU5Mw=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 771}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MzUwODAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzo0MTo1OVrOHS7g8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxMzozOVrOHUY9lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMTUwNQ==", "bodyText": "remove this", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r489611505", "createdAt": "2020-09-16T17:41:59Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1188,29 +1098,47 @@ public Response fixConflicts ( @Context final HttpServletRequest httpServletRequ\n         } catch (DotSecurityException e) {\n             throw new ForbiddenException(e);\n         } catch ( Exception e ) {\n-        \ttry {\n+            try {\n                 HibernateUtil.rollbackTransaction();\n             } catch (DotHibernateException e1) {\n                 Logger.error(IntegrityResource.class, \"Error while rolling back transaction\", e);\n             }\n \n             Logger.error( this.getClass(), \"Error fixing \"+type+\" conflicts for End Point server: [\" + endpointId + \"]\", e );\n             return response( \"Error fixing conflicts for endpoint: \" + endpointId , true );\n-\t\t} finally {\n-\t\t\ttry {\n-\t\t\t\t// Discard conflicts if successful or failed\n-\t\t\t\tintegrityUtil.discardConflicts(endpointId, integrityTypeToFix);\n-\t\t\t} catch (DotDataException e) {\n-\t\t\t\tLogger.error(this.getClass(), \"ERROR: Table \" + integrityTypeToFix.getResultsTableName()\n-\t\t\t\t\t\t+ \" could not be cleared on end-point [\" + endpointId\n-\t\t\t\t\t\t+ \"]. Please truncate the table data manually.\", e);\n-\t\t\t}\n-\t\t\tHibernateUtil.closeSessionSilently();\n-\t\t}\n+        } catch (NotEndPointTokenFoundException e) {\n+            return Response.status( HttpStatus.SC_BAD_REQUEST ).entity( \"Error: 'auth key' is a required param.\" ).build();\n+        } finally {\n+            try {\n+                // Discard conflicts if successful or failed\n+                integrityUtil.discardConflicts(endpointId, integrityTypeToFix);\n+            } catch (DotDataException e) {\n+                Logger.error(this.getClass(), \"ERROR: Table \" + integrityTypeToFix.getResultsTableName()\n+                        + \" could not be cleared on end-point [\" + endpointId\n+                        + \"]. Please truncate the table data manually.\", e);\n+            }\n+            HibernateUtil.closeSessionSilently();\n+        }\n \n         return response( jsonResponse.toString(), false );\n     }\n \n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 934}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MjU0OQ==", "bodyText": "done 303cd0b#diff-1c1ba904ed03287c1c0b48a6f3971449L458", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491142549", "createdAt": "2020-09-18T19:13:39Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1188,29 +1098,47 @@ public Response fixConflicts ( @Context final HttpServletRequest httpServletRequ\n         } catch (DotSecurityException e) {\n             throw new ForbiddenException(e);\n         } catch ( Exception e ) {\n-        \ttry {\n+            try {\n                 HibernateUtil.rollbackTransaction();\n             } catch (DotHibernateException e1) {\n                 Logger.error(IntegrityResource.class, \"Error while rolling back transaction\", e);\n             }\n \n             Logger.error( this.getClass(), \"Error fixing \"+type+\" conflicts for End Point server: [\" + endpointId + \"]\", e );\n             return response( \"Error fixing conflicts for endpoint: \" + endpointId , true );\n-\t\t} finally {\n-\t\t\ttry {\n-\t\t\t\t// Discard conflicts if successful or failed\n-\t\t\t\tintegrityUtil.discardConflicts(endpointId, integrityTypeToFix);\n-\t\t\t} catch (DotDataException e) {\n-\t\t\t\tLogger.error(this.getClass(), \"ERROR: Table \" + integrityTypeToFix.getResultsTableName()\n-\t\t\t\t\t\t+ \" could not be cleared on end-point [\" + endpointId\n-\t\t\t\t\t\t+ \"]. Please truncate the table data manually.\", e);\n-\t\t\t}\n-\t\t\tHibernateUtil.closeSessionSilently();\n-\t\t}\n+        } catch (NotEndPointTokenFoundException e) {\n+            return Response.status( HttpStatus.SC_BAD_REQUEST ).entity( \"Error: 'auth key' is a required param.\" ).build();\n+        } finally {\n+            try {\n+                // Discard conflicts if successful or failed\n+                integrityUtil.discardConflicts(endpointId, integrityTypeToFix);\n+            } catch (DotDataException e) {\n+                Logger.error(this.getClass(), \"ERROR: Table \" + integrityTypeToFix.getResultsTableName()\n+                        + \" could not be cleared on end-point [\" + endpointId\n+                        + \"]. Please truncate the table data manually.\", e);\n+            }\n+            HibernateUtil.closeSessionSilently();\n+        }\n \n         return response( jsonResponse.toString(), false );\n     }\n \n+    @NotNull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYxMTUwNQ=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 934}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODM1MzQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoxOToyNlrOHTqz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxNDoxNFrOHUY-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4NjQyNg==", "bodyText": "rename to doesAnyEndpointHaveInvalidTokenStatus", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r490386426", "createdAt": "2020-09-17T16:19:26Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "diffHunk": "@@ -75,56 +77,71 @@ public PublishAuditStatus(PublishAuditStatus origin, Status status) {\n \t\tthis.createDate = origin.createDate;\n \t\tthis.statusPojo = origin.getStatusPojo(); //TODO manage status POJO\n \t}\n-\t\n+\n+\t/**\n+\t * Return true if  any of the endpoint has the {@link Status#INVALID_TOKEN}\n+\t * @return\n+\t */\n+\tpublic boolean isAnyEndPointInvalidTokenStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0Mjc3Ng==", "bodyText": "really this method is not used\n303cd0b#diff-470260e643cc175a1a0c76a8e25eb171L85", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491142776", "createdAt": "2020-09-18T19:14:14Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublishAuditStatus.java", "diffHunk": "@@ -75,56 +77,71 @@ public PublishAuditStatus(PublishAuditStatus origin, Status status) {\n \t\tthis.createDate = origin.createDate;\n \t\tthis.statusPojo = origin.getStatusPojo(); //TODO manage status POJO\n \t}\n-\t\n+\n+\t/**\n+\t * Return true if  any of the endpoint has the {@link Status#INVALID_TOKEN}\n+\t * @return\n+\t */\n+\tpublic boolean isAnyEndPointInvalidTokenStatus() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4NjQyNg=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODM4ODAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoyMzowM1rOHTrIgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxNDo0MFrOHUY_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MTY4MA==", "bodyText": "javadoc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r490391680", "createdAt": "2020-09-17T16:23:03Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";\n+\n+    public static String EXPIRED_TOKEN_ERROR_KEY = \"__expired_token__\";\n+    public static String INVALID_TOKEN_ERROR_KEY = \"__invalid_token__\";\n+\n+    public Optional<String> getRequestToken(final PublishingEndPoint endpoint)  {\n+        try {\n+            final boolean useJWTToken = isJWTAvailable();\n+            final Optional<String> tokenOptional = useJWTToken ?\n+                    getJWTToken(endpoint) :\n+                    PushPublisher.retriveEndpointKeyDigest(endpoint);\n+\n+            if (!tokenOptional.isPresent()) {\n+                return tokenOptional;\n+            }\n+\n+            final String token = tokenOptional.get();\n+\n+            return Optional.of(JsonWebTokenAuthCredentialProcessor.BEARER + token);\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    public static boolean isJWTAvailable() {\n+        return Config.getBooleanProperty(\"USE_JWT_TOKEN_IN_PUSH_PUBLISH\", true);\n+    }\n+\n+    public boolean processAuthHeader(final HttpServletRequest request) throws DotSecurityException{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0Mjk3NA==", "bodyText": "done 303cd0b#diff-9ed7c6f6002209611b614ed1bafc1b91R58", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491142974", "createdAt": "2020-09-18T19:14:40Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.parameter.display.DropdownInput;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.Claims;\n+import io.jsonwebtoken.IncorrectClaimException;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";\n+\n+    public static String EXPIRED_TOKEN_ERROR_KEY = \"__expired_token__\";\n+    public static String INVALID_TOKEN_ERROR_KEY = \"__invalid_token__\";\n+\n+    public Optional<String> getRequestToken(final PublishingEndPoint endpoint)  {\n+        try {\n+            final boolean useJWTToken = isJWTAvailable();\n+            final Optional<String> tokenOptional = useJWTToken ?\n+                    getJWTToken(endpoint) :\n+                    PushPublisher.retriveEndpointKeyDigest(endpoint);\n+\n+            if (!tokenOptional.isPresent()) {\n+                return tokenOptional;\n+            }\n+\n+            final String token = tokenOptional.get();\n+\n+            return Optional.of(JsonWebTokenAuthCredentialProcessor.BEARER + token);\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    public static boolean isJWTAvailable() {\n+        return Config.getBooleanProperty(\"USE_JWT_TOKEN_IN_PUSH_PUBLISH\", true);\n+    }\n+\n+    public boolean processAuthHeader(final HttpServletRequest request) throws DotSecurityException{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5MTY4MA=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ2MTA1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjozNzowNVrOHTr1pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxNToxM1rOHUZApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMzIzOQ==", "bodyText": "Let's be explicit here: _generateintegritydata", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r490403239", "createdAt": "2020-09-17T16:37:05Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -162,48 +185,35 @@ private Response postWithEndpointState(String endpointId, String url, MediaType\n      */\n \n     @POST\n-    @Path(\"/generateintegritydata/{params:.*}\")\n-    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    @Path(\"/_generate\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MzMzNA==", "bodyText": "303cd0b#diff-1c1ba904ed03287c1c0b48a6f3971449R182", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491143334", "createdAt": "2020-09-18T19:15:13Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -162,48 +185,35 @@ private Response postWithEndpointState(String endpointId, String url, MediaType\n      */\n \n     @POST\n-    @Path(\"/generateintegritydata/{params:.*}\")\n-    @Consumes(MediaType.MULTIPART_FORM_DATA)\n+    @Path(\"/_generate\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMzIzOQ=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ4MzU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/resources/dotmarketing-config.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0MjoyOFrOHTsDeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOToxNTozMlrOHUZBbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjc3Ng==", "bodyText": "Remove this. We will only document the property but won't include it here", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r490406776", "createdAt": "2020-09-17T16:42:28Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/resources/dotmarketing-config.properties", "diffHunk": "@@ -902,3 +902,5 @@ api.cors.default.Access-Control-Expose-Headers=*\n \n # IGNORE_REFERER_FOR_PATHS=/html/common/css.jsp,/html/my-plugin/*\n \n+#if it is tru JWT is use in Push Publish\n+#USE_JWT_TOKEN_IN_PUSH_PUBLISH = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE0MzUzMg==", "bodyText": "done 303cd0b#diff-9eef290d7e7caa46fa38e7f59dfe65cdL905", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r491143532", "createdAt": "2020-09-18T19:15:32Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/resources/dotmarketing-config.properties", "diffHunk": "@@ -902,3 +902,5 @@ api.cors.default.Access-Control-Expose-Headers=*\n \n # IGNORE_REFERER_FOR_PATHS=/html/common/css.jsp,/html/my-plugin/*\n \n+#if it is tru JWT is use in Push Publish\n+#USE_JWT_TOKEN_IN_PUSH_PUBLISH = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjc3Ng=="}, "originalCommit": {"oid": "9b59f9f38c9b9a0c4b50e8f09b81ce9f1d298fe8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTk1MjU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/RestEndPointIPUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjozMDo0OFrOHYVwiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjozMDo0OFrOHYVwiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4NDM2MA==", "bodyText": "javadoc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495284360", "createdAt": "2020-09-25T22:30:48Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/RestEndPointIPUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.util.HttpRequestDataUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.Context;\n+import java.util.Optional;\n+\n+public class RestEndPointIPUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ab51de7096695202eb916d59c8d5674c5e3c4a9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjA5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyMlrOHYWgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyMlrOHYWgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjYwMA==", "bodyText": "Codacy found an issue: Ensure that resources like this ResultSet object are closed after use", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296600", "createdAt": "2020-09-25T22:52:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables#executeUpgrade()}\n+     * When: Run the Upgrade Task\n+     * Should: Should remove the foreign key to all the Integrity Resolver tables and rename the column endpoint_id\n+     * The Integrity Resolver tables are:\n+     * - cms_roles_ir\n+     * - folders_ir\n+     * - structures_ir\n+     * - htmlpages_ir\n+     * - fileassets_ir\n+     *\n+     * After remove the constraint you should be allow to insert register in this table without has any register in publishing_end_point\n+     */\n+    @Test\n+    public void constraintShouldNotExists() throws DotDataException, SQLException {\n+\n+        final String endpointId = insertPublishingEndPoint();\n+        insertFolderIntegrityResolver(endpointId);\n+        insertPageIntegrityResolver(endpointId);\n+        insertFileAssetIntegrityResolver(endpointId);\n+        insertRolesIntegrityResolver(endpointId);\n+        insertStructuresIntegrityResolver(endpointId);\n+\n+        final Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables =\n+                new Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables();\n+\n+        task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.executeUpgrade();\n+\n+        insertFolderIntegrityResolver(\"anyIP\");\n+        insertPageIntegrityResolver(\"anyIP\");\n+        insertFileAssetIntegrityResolver(\"anyIP\");\n+        insertRolesIntegrityResolver(\"anyIP\");\n+        insertStructuresIntegrityResolver(\"anyIP\");\n+\n+        checkColumnsSize();\n+    }\n+\n+    private void checkColumnsSize() throws SQLException {\n+        final List<String> tables = list(\n+                \"folders_ir\",\n+                \"structures_ir\",\n+                \"htmlpages_ir\",\n+                \"fileassets_ir\",\n+                \"cms_roles_ir\"\n+        );\n+\n+        for (String table : tables) {\n+            checkColumnSize(table);\n+        }\n+    }\n+\n+    private void checkColumnSize(final String tableName) throws SQLException {\n+        final Connection connection = DbConnectionFactory.getConnection();\n+        final ResultSet resultSet = DotDatabaseMetaData.getColumnsMetaData(connection, tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyM1rOHYWgYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyM1rOHYWgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjYxMA==", "bodyText": "Codacy found an issue: Avoid variables with short names like dc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296610", "createdAt": "2020-09-25T22:52:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.startup.StartupTask;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+\n+/**\n+ * Remove the foreign key with the publishing_end_point table to all the Integrity Resolver tables and rename the column\n+ * endpoint_id to remote IP, Also change the endpoint_id column size.\n+ *\n+ * The Integrity Resolver tables are:\n+ *\n+ * - cms_roles_ir\n+ * - folder_ir\n+ * - structures_ir\n+ * - htmlpages_ir\n+ * - fileassets_ir\n+ */\n+public class Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables implements StartupTask {\n+    @Override\n+    public boolean forceRun() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void executeUpgrade() throws DotDataException, DotRuntimeException {\n+\n+        final Map<String, String> tables = map(\n+                \"folders_ir\", \"fk_folder_ir_ep\",\n+                \"structures_ir\", \"fk_structure_ir_ep\",\n+                \"htmlpages_ir\", \"fk_page_ir_ep\",\n+                \"fileassets_ir\", \"fk_file_ir_ep\",\n+                \"cms_roles_ir\", \"fk_cms_roles_ir_ep\"\n+        );\n+\n+        for (Map.Entry<String, String> entry : tables.entrySet()) {\n+            try {\n+                dropConstraint(entry.getKey(), entry.getValue());\n+                alterColumn(entry.getKey());\n+            }catch (DotDataException e) {\n+                continue;\n+            }\n+        }\n+\n+    }\n+\n+    private void dropConstraint(final String tableName, final String constraintName) throws DotDataException {\n+        DotConnect dc = new DotConnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjIyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyNFrOHYWgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyNFrOHYWgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjYyNg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'javax.ws.rs'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296626", "createdAt": "2020-09-25T22:52:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "diffHunk": "@@ -1,34 +1,33 @@\n package com.dotcms.rest;\n \n+\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotcms.concurrent.DotConcurrentFactory;\n+\n import com.dotcms.publisher.bundle.bean.Bundle;\n import com.dotcms.publisher.business.PublishAuditAPI;\n import com.dotcms.publisher.business.PublishAuditStatus;\n import com.dotcms.publisher.business.PublishAuditStatus.Status;\n import com.dotcms.publisher.business.PublisherQueueJob;\n-import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n-import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;\n-import com.dotcms.publisher.pusher.PushPublisher;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.QueryParam;\n+import com.dotcms.publisher.pusher.AuthCredentialPushPublishUtil;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyNlrOHYWgew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyNlrOHYWgew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjYzNQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Set'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296635", "createdAt": "2020-09-25T22:52:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjM2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyN1rOHYWgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyN1rOHYWgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjY1Mg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.util.CollectionsUtils.map'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296652", "createdAt": "2020-09-25T22:52:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjQxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/integritycheckers/IntegrityChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyOFrOHYWglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyOFrOHYWglg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjY2Mg==", "bodyText": "Codacy found an issue: Unnecessary modifier 'public' on method 'executeFix': the method is declared in an interface type", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296662", "createdAt": "2020-09-25T22:52:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/integritycheckers/IntegrityChecker.java", "diffHunk": "@@ -68,12 +68,13 @@\n      * When there is conflicts, this method will fix them depending of the\n      * implementation of every checker\n      * \n-     * @param endpointId\n-     *            Server identifier were we need to fix conflicts\n+     * @param key\n+     *            JWT Token key when using JWT token in Push Publish or\n+     *            Server identifier were we need to fix conflicts when not using JWT token\n      * @throws DotDataException\n      * @throws DotSecurityException\n      */\n-    public void executeFix(final String endpointId) throws DotDataException, DotSecurityException;\n+    public void executeFix(final String key) throws DotDataException, DotSecurityException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjQ1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyOVrOHYWgoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjoyOVrOHYWgoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjY3Mg==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'isAdmin(User)'.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296672", "createdAt": "2020-09-25T22:52:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "diffHunk": "@@ -37,148 +36,128 @@\n public class BundlePublisherResource {\n \n \tpublic static String MY_TEMP = \"\";\n-\tprivate PublishingEndPointAPI endpointAPI = APILocator.getPublisherEndPointAPI();\n-\n-    /**\n-     * Method that receives from a server a bundle with the intention of publish it.<br/>\n-     * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n-     * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n-     * to the {@link PublishThread Publish Thread}.\n-     *\n-     * @param fileName       File name to be published\n-     * @param auth_token_enc Authentication token\n-     * @param groupId        Group who sent the Bundle\n-     * @param endpointId     End-point who sent the Bundle\n-\t * @param type\t\t\t response type\n-\t * @param callback \t\t response callback\n-\t * @param bundleName\t The name for the Bundle to publish\n-\t * @param forcePush \t true/false to Force the push\n-     * @param req            HttpRequest\n-     * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n-     * @see PublishThread\n-     */\n-    @POST\n-    @Path (\"/publish\")\n-    @Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\n+\t/**\n+\t * Method that receives from a server a bundle with the intention of publish it.<br/>\n+\t * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n+\t * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n+\t * to the {@link PublishThread Publish Thread}.\n+\t *\n+\t * @param type\t\t\t  response type\n+\t * @param callback \t\t  response callback\n+\t * @param forcePush \t  true/false to Force the push\n+\t * @param request         {@link HttpServletRequest}\n+\t * @param response        {@link HttpServletResponse}\n+\t * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n+\t * @see PublishThread\n+\t */\n+\t@POST\n+\t@Path(\"/publish\")\n+\t@Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\t@Produces(MediaType.APPLICATION_JSON)\n \tpublic Response publish(\n-\t\t\t@QueryParam(\"FILE_NAME\") String fileName,\n-\t\t\t@QueryParam(\"AUTH_TOKEN\") String auth_token_digest,\n-\t\t\t@QueryParam(\"GROUP_ID\") String groupId,\n-\t\t\t@QueryParam(\"ENDPOINT_ID\") String endpointId,\n-\t\t\t@QueryParam(\"type\") String type,\n-\t\t\t@QueryParam(\"callback\") String callback,\n-\t\t\t@QueryParam(\"BUNDLE_NAME\") String bundleName,\n-\t\t\t@QueryParam(\"FORCE_PUSH\") final boolean forcePush,\n-\t\t\t@Context HttpServletRequest req\n-\t) {\n-    \ttry {\n-    \t\ttry (InputStream bundleStream = req.getInputStream()) {\n-\t\t        //Creating an utility response object\n-\t\t        Map<String, String> paramsMap = new HashMap<String, String>();\n-\t\t        paramsMap.put( \"type\", type );\n-\t\t        paramsMap.put( \"callback\", callback );\n-\t\t        ResourceResponse responseResource = new ResourceResponse( paramsMap );\n-\n-\t\t\t\tString remoteIP = \"\";\n-\t\t\t\ttry {\n-\n-\t\t\t\t\tremoteIP = req.getRemoteHost();\n-\t\t\t\t\tif(!UtilMethods.isSet(remoteIP))\n-\t\t\t\t\t\tremoteIP = req.getRemoteAddr();\n-\n-\t\t\t\t\tHibernateUtil.startTransaction();\n-\n-\t\t\t\t\tPublishingEndPoint mySelf = endpointAPI.findEnabledSendingEndPointByAddress(remoteIP);\n-\n-\t\t\t\t\tif(mySelf==null || !isValidToken(auth_token_digest, remoteIP, mySelf)) {\n-\t\t\t\t\t\tbundleStream.close();\n-\t\t\t\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" invalid endpoint or token\");\n-\t\t\t\t\t\t\n-\t\t        return responseResource.responseError( HttpStatus.SC_UNAUTHORIZED );\n-\t\t       }\n-\n-\t\t\t\t\tString bundlePath = ConfigUtils.getBundlePath()+File.separator+MY_TEMP;\n-\t\t\t\t\tString bundleFolder = fileName.substring(0, fileName.indexOf(\".tar.gz\"));\n-\n-\t\t            PublishAuditStatus status = PublishAuditAPI.getInstance().updateAuditTable( mySelf.getId(), mySelf.getId(), bundleFolder, true );\n-\n-\t\t            if(bundleName.trim().length()>0) {\n-\t\t\t\t\t    // save bundle if it doesn't exists\n-\t\t                Bundle foundBundle = APILocator.getBundleAPI().getBundleById( bundleFolder );\n-\t\t                if ( foundBundle == null || foundBundle.getId() == null ) {\n-\t\t                    Bundle bundle = new Bundle();\n-\t\t\t\t\t\t\tbundle.setId(bundleFolder);\n-\t\t\t\t\t\t\tbundle.setName(bundleName);\n-\t\t\t\t\t\t\tbundle.setPublishDate(Calendar.getInstance().getTime());\n-\t\t\t\t\t\t\tbundle.setOwner(APILocator.getUserAPI().getSystemUser().getUserId());\n-\t\t\t\t\t\t\tbundle.setForcePush(forcePush);\n-\t\t                    APILocator.getBundleAPI().saveBundle(bundle);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//Write file on FS\n-\t\t\t\t\tFileUtil.writeToFile(bundleStream, bundlePath+fileName);\n-\n-\t\t\t\t\t//Start thread\n-\t\t\t\t\tif(!status.getStatus().equals(Status.PUBLISHING_BUNDLE)) {\n-\t\t\t\t\t\tnew Thread(new PublishThread(fileName, groupId, endpointId, status)).start();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tHibernateUtil.commitTransaction();\n-\n-\t\t\t\t\treturn Response.status(HttpStatus.SC_OK).build();\n-\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class, \"Error caused by remote call of: \"+remoteIP);\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t}\n-\t\t\t\tfinally {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.closeSession();\n-\t\t            } catch (DotHibernateException e) {\n-\t\t                Logger.error(this, \"error close session\",e);\n-\t\t            }\n-\t\t\t\t}\n-    \t\t}\n-    \t} catch (IOException e) {\n-    \t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-    \t}\n-\n-\t\treturn Response.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).build();\n+\t\t\t@QueryParam(\"type\")        final String type,\n+\t\t\t@QueryParam(\"callback\")    final String callback,\n+\t\t\t@QueryParam(\"FORCE_PUSH\")  final boolean forcePush,\n+\t\t\t@Context final HttpServletRequest  request,\n+\t\t\t@Context final HttpServletResponse response\n+\t) throws Exception {\n+\t\tfinal ResourceResponse responseResource = new ResourceResponse(\n+\t\t\t\tCollectionsUtils.map(\"type\", type, \"callback\", callback));\n+\t\tfinal String remoteIP = UtilMethods.isSet(request.getRemoteHost())?\n+\t\t\t\trequest.getRemoteHost() : request.getRemoteAddr();\n+\n+\t\tif (request.getInputStream().isFinished()) {\n+\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" bundle expected\");\n+\t\t\treturn responseResource.responseError(HttpStatus.SC_BAD_REQUEST);\n+\t\t}\n+\n+\t\tfinal AuthCredentialPushPublishUtil.PushPublishAuthenticationToken pushPublishAuthenticationToken\n+\t\t\t\t= AuthCredentialPushPublishUtil.INSTANCE.processAuthHeader(request);\n+\n+\t\tfinal Optional<Response> failResponse = PushPublishResourceUtil.getFailResponse(request, pushPublishAuthenticationToken);\n+\n+\t\tif (failResponse.isPresent()) {\n+\t\t\treturn failResponse.get();\n+\t\t}\n+\n+\t\tfinal Bundle bundle = this.publishBundle(forcePush, request, remoteIP);\n+\n+\t\treturn Response.ok(bundle).build();\n \t}\n \n-    /**\n-     * Validates a received token\n-     *\n-     * @param token    Token to validate\n-     * @param remoteIP Sender IP\n-     * @param mySelf   Current end point\n-     * @return True if valid\n-     * @throws IOException If fails reading the security token\n-     */\n-    public static boolean isValidToken ( String token, String remoteIP, PublishingEndPoint mySelf ) throws IOException {\n+\t@WrapInTransaction\n+\tprivate Bundle publishBundle(final boolean forcePush,\n+\t\t\t\t\t\t\t\t final HttpServletRequest request,\n+\t\t\t\t\t\t\t\t final String remoteIP) throws Exception {\n+\n+\t\tfinal String fileNameSent = getFileNameFromRequest(request);\n+\t\tfinal String fileName = UtilMethods.isSet(fileNameSent) ? fileNameSent : generatedBundleFileName();\n+\n+\t\tBundle bundle = null;\n+\n+\t\ttry (InputStream bundleStream = request.getInputStream()) {\n+\n+\t\t\tfinal String bundlePath         = ConfigUtils.getBundlePath()+ File.separator + MY_TEMP;\n+\t\t\tfinal String bundleFolder       = fileName.substring(0, fileName.indexOf(\".tar.gz\"));\n+\t\t\tfinal PublishAuditStatus status = PublishAuditAPI.getInstance().updateAuditTable(\n+\t\t\t\t\tremoteIP, remoteIP, bundleFolder, true);\n+\n+\t\t\t// save bundle if it doesn't exists\n+\t\t\tbundle = APILocator.getBundleAPI().getBundleById(bundleFolder);\n+\t\t\tif (bundle == null || bundle.getId() == null) {\n \n-        //My key\n-        Optional<String> myKey=PushPublisher.retriveEndpointKeyDigest(mySelf);\n-        if(!myKey.isPresent()) {\n-          return false;\n-        }\n+\t\t\t\tbundle = new Bundle();\n+\t\t\t\tbundle.setId(bundleFolder);\n+\t\t\t\tbundle.setName(fileName.replace(\".tar.gz\", \"\"));\n+\t\t\t\tbundle.setPublishDate(Calendar.getInstance().getTime());\n+\t\t\t\tbundle.setOwner(APILocator.getUserAPI().getSystemUser().getUserId());\n+\t\t\t\tbundle.setForcePush(forcePush);\n+\t\t\t\tAPILocator.getBundleAPI().saveBundle(bundle);\n+\t\t\t}\n \n+\t\t\t//Write file on FS\n+\t\t\tFileUtil.writeToFile(bundleStream, bundlePath + fileName);\n \n-        return token.equals( myKey.get() );\n-    }\n+\t\t\t//Start thread\n \n+\t\t\tif(!status.getStatus().equals(Status.PUBLISHING_BUNDLE)) {\n \n+\t\t\t\tDotConcurrentFactory.getInstance()\n+\t\t\t\t\t\t.getSubmitter()\n+\t\t\t\t\t\t.submit(new PublishThread(fileName, null, null, status));\n+\t\t\t}\n \n+\t\t\treturn bundle;\n+\t\t} catch (Exception e) {\n+\n+\t\t\tLogger.error(\n+\t\t\t\t\tPublisherQueueJob.class,\n+\t\t\t\t\tString.format(\"Error caused by remote call of: Remote IP - %s, bundle file name - %s, end point- %s\",\n+\t\t\t\t\t\t\tremoteIP, fileName,  remoteIP));\n+\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\tprivate String getFileNameFromRequest(HttpServletRequest request) {\n+\t\ttry {\n+\t\t\tfinal String fileNameValue = request.getHeader(\"Content-Disposition\")\n+\t\t\t\t\t.split(\";\")[1]\n+\t\t\t\t\t.trim()\n+\t\t\t\t\t.split(\"=\")[1];\n+\t\t\treturn fileNameValue.substring(1, fileNameValue.length() - 1);\n+\t\t} catch (Exception e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tprivate String generatedBundleFileName() {\n+\t\treturn String.format(\"bundle_%d.tar.gz\", System.currentTimeMillis());\n+\t}\n+\n+\tprivate boolean isAdmin(final User user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozMVrOHYWgrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozMVrOHYWgrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjY4NA==", "bodyText": "Codacy found an issue: Ensure that resources like this InputStream object are closed after use", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296684", "createdAt": "2020-09-25T22:52:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1305,10 +1285,139 @@ private Response response ( String response, Boolean error ) {\n      */\n     private Response response ( String response, Boolean error, String contentType ) {\n         if ( error ) {\n-            return Response.status( HttpStatus.SC_INTERNAL_SERVER_ERROR ).entity( response ).build();\n+            return response(response, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n         } else {\n             return Response.ok( response, contentType ).build();\n         }\n     }\n \n+    private Response response ( String response, int status ) {\n+        return Response.status( status ).entity( response ).build();\n+    }\n+\n+    private class IntegrityDataRequestChecker implements Runnable{\n+\n+        private final User loggedUser;\n+        private final HttpSession session;\n+        private final PublishingEndPoint endpoint;\n+        private final String integrityDataRequestID;\n+\n+        public IntegrityDataRequestChecker(\n+                final User loggedUser,\n+                final HttpSession session,\n+                final PublishingEndPoint endpoint,\n+                final String integrityDataRequestID) {\n+\n+            this.loggedUser = loggedUser;\n+            this.session = session;\n+            this.endpoint = endpoint;\n+            this.integrityDataRequestID = integrityDataRequestID;\n+        }\n+\n+        @CloseDBIfOpened\n+        public void run(){\n+\n+            boolean processing = true;\n+\n+            while(processing) {\n+\n+                Response response = null;\n+\n+                response = statusIntegrityCheckerRequest();\n+\n+                if (response.getStatus() == HttpStatus.SC_OK) {\n+\n+                    processing = false;\n+\n+                    InputStream zipFile = response.readEntity(InputStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 1015}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozMlrOHYWgvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozMlrOHYWgvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjcwMQ==", "bodyText": "Codacy found an issue: Avoid unused private methods such as 'getRemoteIP(HttpServletRequest)'.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296701", "createdAt": "2020-09-25T22:52:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -985,83 +969,87 @@ public Response discardConflicts ( @Context final HttpServletRequest request, @C\n      *\n      * @param request\n      * @param dataToFix\n-     * @param auth_token_digest\n      * @param type\n      * @return\n      * @throws JSONException\n      */\n     @POST\n-    @Path(\"/fixconflictsfromremote/{params:.*}\")\n+    @Path(\"/_fixconflictsfromremote\")\n     @Consumes(MediaType.MULTIPART_FORM_DATA)\n     @Produces(\"text/plain\")\n-    public Response fixConflictsFromRemote (@Context final HttpServletRequest request,\n-                                            @FormDataParam(\"DATA_TO_FIX\") final InputStream dataToFix,\n-                                            @FormDataParam(\"AUTH_TOKEN\") final String auth_token_digest,\n-                                            @FormDataParam(\"TYPE\") final String type ) throws JSONException {\n-        final String remoteIp = resolveRemoteIp(request);\n+    public Response fixConflictsFromRemote ( @Context final HttpServletRequest request,\n+                                             @FormDataParam(\"DATA_TO_FIX\") InputStream dataToFix,\n+                                             @FormDataParam(\"TYPE\") String type ) throws JSONException {\n+\n+        final AuthCredentialPushPublishUtil.PushPublishAuthenticationToken pushPublishAuthenticationToken\n+                = AuthCredentialPushPublishUtil.INSTANCE.processAuthHeader(request);\n+\n+        final Optional<Response> failResponse = PushPublishResourceUtil.getFailResponse(request, pushPublishAuthenticationToken);\n+\n+        if (failResponse.isPresent()) {\n+            return failResponse.get();\n+        }\n+\n         JSONObject jsonResponse = new JSONObject();\n         IntegrityUtil integrityUtil = new IntegrityUtil();\n-        PublishingEndPointAPI endpointAPI = APILocator.getPublisherEndPointAPI();\n-        PublishingEndPoint requesterEndPoint = null;\n-        try {\n-            requesterEndPoint = endpointAPI.findEnabledSendingEndPointByAddress(remoteIp);\n \n-            if (!BundlePublisherResource.isValidToken(auth_token_digest, remoteIp, requesterEndPoint)) {\n-                return Response.status(HttpStatus.SC_UNAUTHORIZED).build();\n-            }\n-\n-            HibernateUtil.startTransaction();\n-            integrityUtil.fixConflicts(dataToFix, requesterEndPoint.getId(),\n+        try {\n+            final String key = pushPublishAuthenticationToken.isJWTTokenWay() ?\n+                    pushPublishAuthenticationToken.getToken().getId() :\n+                    pushPublishAuthenticationToken.getPublishingEndPoint().getId();\n+            integrityUtil.fixConflicts(dataToFix, key,\n                     IntegrityType.valueOf(type.toUpperCase()));\n-            HibernateUtil.commitTransaction();\n         } catch (DotSecurityException e) {\n             throw new ForbiddenException(e);\n         } catch ( Exception e ) {\n-            try {\n-                HibernateUtil.rollbackTransaction();\n-            } catch (DotHibernateException e1) {\n-                Logger.error(IntegrityResource.class, \"Error while rolling back transaction\", e);\n-            }\n             Logger.error( this.getClass(), \"Error fixing \"+type+\" conflicts from remote\", e );\n             return response( \"Error fixing \"+type+\" conflicts from remote\" , true );\n         } finally {\n-\t\t\ttry {\n-\t\t\t\tif (requesterEndPoint != null) {\n-\t\t\t\t\t// Discard conflicts if successful or failed\n-\t\t\t\t\tintegrityUtil.discardConflicts(requesterEndPoint.getId(),\n-\t\t\t\t\t\t\tIntegrityType.valueOf(type.toUpperCase()));\n-\t\t\t\t}\n-\t\t\t} catch (DotDataException e) {\n-\t\t\t\tLogger.error(this.getClass(), \"ERROR: Table \"\n-\t\t\t\t\t\t+ IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n-\t\t\t\t\t\t+ \" could not be cleared on end-point [\" + requesterEndPoint.getId()\n-\t\t\t\t\t\t+ \"]. Please truncate the table data manually.\", e);\n-\t\t\t}\n-\n-\t\t\tHibernateUtil.closeSessionSilently();\n-\t\t}\n+            final String remoteIp = RestEndPointIPUtil.resolveRemoteIp(request);\n+\n+            try {\n+                if (remoteIp != null) {\n+                    // Discard conflicts if successful or failed\n+                    integrityUtil.discardConflicts(remoteIp,\n+                            IntegrityType.valueOf(type.toUpperCase()));\n+                }\n+            } catch (DotDataException e) {\n+                Logger.error(this.getClass(), \"ERROR: Table \"\n+                        + IntegrityType.valueOf(type.toUpperCase()).getResultsTableName()\n+                        + \" could not be cleared on request id [\" + remoteIp\n+                        + \"]. Please truncate the table data manually.\", e);\n+            }\n+        }\n \n         jsonResponse.put( \"success\", true );\n         jsonResponse.put( \"message\", \"Conflicts fixed in Remote Endpoint\" );\n         return response( jsonResponse.toString(), false );\n     }\n \n-\t/**\n-\t * Fixes the data conflicts between the local and remote servers. If the\n-\t * request parameter called <code>whereToFix</code> equals\n-\t * <code>\"local\"</code>, the data correction will take place in local\n-\t * server. If the parameter equals <code>\"remote\"</code>, the fix will take\n-\t * place in remote server.\n-\t *\n-\t * @param httpServletRequest\n-\t *            - The {@link HttpServletRequest} that started the process.\n-\t * @param params\n-\t *            - The execution parameters for running the process: The\n-\t *            end-point ID.\n-\t * @return The REST {@link Response} with the status of the operation.\n-\t * @throws JSONException\n-\t *             An error occurred when generating the JSON response.\n-\t */\n+    private String getRemoteIP(@Context HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 840}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/factories/ApiTokenAPI.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozM1rOHYWgyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozM1rOHYWgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjcxNQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.publisher.pusher.PushPublisher'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296715", "createdAt": "2020-09-25T22:52:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/factories/ApiTokenAPI.java", "diffHunk": "@@ -5,6 +5,7 @@\n import com.dotcms.business.CloseDBIfOpened;\n import com.dotcms.business.WrapInTransaction;\n import com.dotcms.enterprise.cluster.ClusterFactory;\n+import com.dotcms.publisher.pusher.PushPublisher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjc2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozNFrOHYWg0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozNFrOHYWg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjcyMg==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296722", "createdAt": "2020-09-25T22:52:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1305,10 +1285,139 @@ private Response response ( String response, Boolean error ) {\n      */\n     private Response response ( String response, Boolean error, String contentType ) {\n         if ( error ) {\n-            return Response.status( HttpStatus.SC_INTERNAL_SERVER_ERROR ).entity( response ).build();\n+            return response(response, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n         } else {\n             return Response.ok( response, contentType ).build();\n         }\n     }\n \n+    private Response response ( String response, int status ) {\n+        return Response.status( status ).entity( response ).build();\n+    }\n+\n+    private class IntegrityDataRequestChecker implements Runnable{\n+\n+        private final User loggedUser;\n+        private final HttpSession session;\n+        private final PublishingEndPoint endpoint;\n+        private final String integrityDataRequestID;\n+\n+        public IntegrityDataRequestChecker(\n+                final User loggedUser,\n+                final HttpSession session,\n+                final PublishingEndPoint endpoint,\n+                final String integrityDataRequestID) {\n+\n+            this.loggedUser = loggedUser;\n+            this.session = session;\n+            this.endpoint = endpoint;\n+            this.integrityDataRequestID = integrityDataRequestID;\n+        }\n+\n+        @CloseDBIfOpened\n+        public void run(){\n+\n+            boolean processing = true;\n+\n+            while(processing) {\n+\n+                Response response = null;\n+\n+                response = statusIntegrityCheckerRequest();\n+\n+                if (response.getStatus() == HttpStatus.SC_OK) {\n+\n+                    processing = false;\n+\n+                    InputStream zipFile = response.readEntity(InputStream.class);\n+                    String outputDir = ConfigUtils.getIntegrityPath() + File.separator + endpoint.getId();\n+\n+                    try {\n+\n+                        IntegrityUtil.unzipFile(zipFile, outputDir);\n+\n+                    } catch (Exception e) {\n+\n+                        //Special handling if the thread was interrupted\n+                        if (e instanceof InterruptedException) {\n+                            //Setting the process status\n+                            setStatus(session, endpoint.getId(), ProcessStatus.CANCELLED, null);\n+                            Logger.debug(IntegrityResource.class, \"Requested interruption of the integrity checking process [unzipping Integrity Data] by the user.\", e);\n+                            throw new RuntimeException(\"Requested interruption of the integrity checking process [unzipping Integrity Data] by the user.\", e);\n+                        }\n+\n+                        //Setting the process status\n+                        setStatus(session, endpoint.getId(), ProcessStatus.ERROR, null);\n+                        Logger.error(IntegrityResource.class, \"Error while unzipping Integrity Data\", e);\n+                        throw new RuntimeException(\"Error while unzipping Integrity Data\", e);\n+                    }\n+\n+                    // set session variable\n+                    // call IntegrityChecker\n+                    boolean conflictPresent = false;\n+\n+                    IntegrityUtil integrityUtil = new IntegrityUtil();\n+                    try {\n+                        integrityUtil.completeDiscardConflicts(endpoint.getId());\n+                        conflictPresent = integrityUtil.completeCheckIntegrity(endpoint.getId());\n+                    } catch (Exception e) {\n+                        //Special handling if the thread was interrupted\n+                        if (e instanceof InterruptedException) {\n+                            //Setting the process status\n+                            setStatus(session, endpoint.getId(), ProcessStatus.CANCELLED, null);\n+                            Logger.debug(IntegrityResource.class, \"Requested interruption of the integrity checking process by the user.\", e);\n+                            throw new RuntimeException(\"Requested interruption of the integrity checking process by the user.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 1052}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjgwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozNlrOHYWg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozNlrOHYWg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjcyNg==", "bodyText": "Codacy found an issue: An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296726", "createdAt": "2020-09-25T22:52:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -1305,10 +1285,139 @@ private Response response ( String response, Boolean error ) {\n      */\n     private Response response ( String response, Boolean error, String contentType ) {\n         if ( error ) {\n-            return Response.status( HttpStatus.SC_INTERNAL_SERVER_ERROR ).entity( response ).build();\n+            return response(response, HttpStatus.SC_INTERNAL_SERVER_ERROR);\n         } else {\n             return Response.ok( response, contentType ).build();\n         }\n     }\n \n+    private Response response ( String response, int status ) {\n+        return Response.status( status ).entity( response ).build();\n+    }\n+\n+    private class IntegrityDataRequestChecker implements Runnable{\n+\n+        private final User loggedUser;\n+        private final HttpSession session;\n+        private final PublishingEndPoint endpoint;\n+        private final String integrityDataRequestID;\n+\n+        public IntegrityDataRequestChecker(\n+                final User loggedUser,\n+                final HttpSession session,\n+                final PublishingEndPoint endpoint,\n+                final String integrityDataRequestID) {\n+\n+            this.loggedUser = loggedUser;\n+            this.session = session;\n+            this.endpoint = endpoint;\n+            this.integrityDataRequestID = integrityDataRequestID;\n+        }\n+\n+        @CloseDBIfOpened\n+        public void run(){\n+\n+            boolean processing = true;\n+\n+            while(processing) {\n+\n+                Response response = null;\n+\n+                response = statusIntegrityCheckerRequest();\n+\n+                if (response.getStatus() == HttpStatus.SC_OK) {\n+\n+                    processing = false;\n+\n+                    InputStream zipFile = response.readEntity(InputStream.class);\n+                    String outputDir = ConfigUtils.getIntegrityPath() + File.separator + endpoint.getId();\n+\n+                    try {\n+\n+                        IntegrityUtil.unzipFile(zipFile, outputDir);\n+\n+                    } catch (Exception e) {\n+\n+                        //Special handling if the thread was interrupted\n+                        if (e instanceof InterruptedException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 1025}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozN1rOHYWg4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozN1rOHYWg4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjczNw==", "bodyText": "Codacy found an issue: Avoid instantiating Long objects.Call Long.valueOf() instead", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296737", "createdAt": "2020-09-25T22:52:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables#executeUpgrade()}\n+     * When: Run the Upgrade Task\n+     * Should: Should remove the foreign key to all the Integrity Resolver tables and rename the column endpoint_id\n+     * The Integrity Resolver tables are:\n+     * - cms_roles_ir\n+     * - folders_ir\n+     * - structures_ir\n+     * - htmlpages_ir\n+     * - fileassets_ir\n+     *\n+     * After remove the constraint you should be allow to insert register in this table without has any register in publishing_end_point\n+     */\n+    @Test\n+    public void constraintShouldNotExists() throws DotDataException, SQLException {\n+\n+        final String endpointId = insertPublishingEndPoint();\n+        insertFolderIntegrityResolver(endpointId);\n+        insertPageIntegrityResolver(endpointId);\n+        insertFileAssetIntegrityResolver(endpointId);\n+        insertRolesIntegrityResolver(endpointId);\n+        insertStructuresIntegrityResolver(endpointId);\n+\n+        final Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables =\n+                new Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables();\n+\n+        task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.executeUpgrade();\n+\n+        insertFolderIntegrityResolver(\"anyIP\");\n+        insertPageIntegrityResolver(\"anyIP\");\n+        insertFileAssetIntegrityResolver(\"anyIP\");\n+        insertRolesIntegrityResolver(\"anyIP\");\n+        insertStructuresIntegrityResolver(\"anyIP\");\n+\n+        checkColumnsSize();\n+    }\n+\n+    private void checkColumnsSize() throws SQLException {\n+        final List<String> tables = list(\n+                \"folders_ir\",\n+                \"structures_ir\",\n+                \"htmlpages_ir\",\n+                \"fileassets_ir\",\n+                \"cms_roles_ir\"\n+        );\n+\n+        for (String table : tables) {\n+            checkColumnSize(table);\n+        }\n+    }\n+\n+    private void checkColumnSize(final String tableName) throws SQLException {\n+        final Connection connection = DbConnectionFactory.getConnection();\n+        final ResultSet resultSet = DotDatabaseMetaData.getColumnsMetaData(connection, tableName);\n+\n+        while (resultSet.next()) {\n+\n+            final String columnName = resultSet.getString(\"COLUMN_NAME\");\n+\n+            if (columnName.equals(\"endpoint_Id\")) {\n+                final int columnSize = resultSet.getInt(\"COLUMN_SIZE\");\n+                assertEquals(columnSize, 40);\n+            }\n+\n+        }\n+    }\n+\n+    private String insertPublishingEndPoint() throws DotDataException {\n+\n+        DotConnect dc = new DotConnect();\n+        dc.setSQL(\"INSERT INTO publishing_end_point \" +\n+                \"(id, group_id, server_name, address, port, protocol, enabled, auth_key, sending) \" +\n+                \"values(?,?,?,?,?,?,?,?,?)\"\n+        );\n+\n+        final String id = String.valueOf(System.currentTimeMillis());\n+\n+        dc.addParam(id);\n+        dc.addParam(\"group_id\");\n+        dc.addParam(\"server_name\");\n+        dc.addParam(\"address\");\n+        dc.addParam(\"port\");\n+        dc.addParam(\"protocol\");\n+        dc.addParam(true);\n+        dc.addParam(\"auth_key\");\n+        dc.addParam(true);\n+\n+        dc.loadResult();\n+\n+        return id;\n+    }\n+\n+    private void insertFolderIntegrityResolver(final String remoteIP) throws DotDataException {\n+\n+        DotConnect dc = new DotConnect();\n+        dc.setSQL(\n+                \"INSERT INTO folders_ir (local_inode, remote_inode, local_identifier, remote_identifier, endpoint_id) values(?,?,?,?,?)\"\n+        );\n+\n+        dc.addParam(\"localInode\" + System.currentTimeMillis());\n+        dc.addParam(\"remoteInode\" + System.currentTimeMillis());\n+        dc.addParam(\"localIdentifier\" + System.currentTimeMillis());\n+        dc.addParam(\"remoteIdentifier\" + System.currentTimeMillis());\n+        dc.addParam(remoteIP);\n+\n+        dc.loadResult();\n+    }\n+\n+    private void insertPageIntegrityResolver(final String remoteIP) throws DotDataException {\n+\n+        DotConnect dc = new DotConnect();\n+        dc.setSQL(\"INSERT INTO htmlpages_ir \" +\n+                \"(local_working_inode, remote_working_inode, local_live_inode, remote_live_inode, local_identifier, remote_identifier, html_page, endpoint_id, language_id) \" +\n+                \"values(?,?,?,?,?,?,?,?,?)\");\n+\n+        dc.addParam(\"local_working_inode\" + System.currentTimeMillis());\n+        dc.addParam(\"remote_working_inode\" + System.currentTimeMillis());\n+        dc.addParam(\"local_live_inode\" + System.currentTimeMillis());\n+        dc.addParam(\"remote_live_inode\" + System.currentTimeMillis());\n+        dc.addParam(\"local_identifier\" + System.currentTimeMillis());\n+        dc.addParam(\"remote_identifier\" + System.currentTimeMillis());\n+        dc.addParam(\"html_page\" + System.currentTimeMillis());\n+        dc.addParam(remoteIP);\n+        dc.addParam(new Long(\"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozOFrOHYWg9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozOFrOHYWg9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc1Ng==", "bodyText": "Codacy found an issue: Avoid variables with short names like dc", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296756", "createdAt": "2020-09-25T22:52:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables#executeUpgrade()}\n+     * When: Run the Upgrade Task\n+     * Should: Should remove the foreign key to all the Integrity Resolver tables and rename the column endpoint_id\n+     * The Integrity Resolver tables are:\n+     * - cms_roles_ir\n+     * - folders_ir\n+     * - structures_ir\n+     * - htmlpages_ir\n+     * - fileassets_ir\n+     *\n+     * After remove the constraint you should be allow to insert register in this table without has any register in publishing_end_point\n+     */\n+    @Test\n+    public void constraintShouldNotExists() throws DotDataException, SQLException {\n+\n+        final String endpointId = insertPublishingEndPoint();\n+        insertFolderIntegrityResolver(endpointId);\n+        insertPageIntegrityResolver(endpointId);\n+        insertFileAssetIntegrityResolver(endpointId);\n+        insertRolesIntegrityResolver(endpointId);\n+        insertStructuresIntegrityResolver(endpointId);\n+\n+        final Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables =\n+                new Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables();\n+\n+        task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.executeUpgrade();\n+\n+        insertFolderIntegrityResolver(\"anyIP\");\n+        insertPageIntegrityResolver(\"anyIP\");\n+        insertFileAssetIntegrityResolver(\"anyIP\");\n+        insertRolesIntegrityResolver(\"anyIP\");\n+        insertStructuresIntegrityResolver(\"anyIP\");\n+\n+        checkColumnsSize();\n+    }\n+\n+    private void checkColumnsSize() throws SQLException {\n+        final List<String> tables = list(\n+                \"folders_ir\",\n+                \"structures_ir\",\n+                \"htmlpages_ir\",\n+                \"fileassets_ir\",\n+                \"cms_roles_ir\"\n+        );\n+\n+        for (String table : tables) {\n+            checkColumnSize(table);\n+        }\n+    }\n+\n+    private void checkColumnSize(final String tableName) throws SQLException {\n+        final Connection connection = DbConnectionFactory.getConnection();\n+        final ResultSet resultSet = DotDatabaseMetaData.getColumnsMetaData(connection, tableName);\n+\n+        while (resultSet.next()) {\n+\n+            final String columnName = resultSet.getString(\"COLUMN_NAME\");\n+\n+            if (columnName.equals(\"endpoint_Id\")) {\n+                final int columnSize = resultSet.getInt(\"COLUMN_SIZE\");\n+                assertEquals(columnSize, 40);\n+            }\n+\n+        }\n+    }\n+\n+    private String insertPublishingEndPoint() throws DotDataException {\n+\n+        DotConnect dc = new DotConnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNjk3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozOVrOHYWg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1MjozOVrOHYWg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc2Mg==", "bodyText": "Codacy found an issue: This final field could be made static", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296762", "createdAt": "2020-09-25T22:52:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/AuthCredentialPushPublishUtil.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotcms.publisher.pusher;\n+\n+import com.dotcms.auth.providers.jwt.JsonWebTokenAuthCredentialProcessor;\n+import com.dotcms.auth.providers.jwt.beans.JWToken;\n+import com.dotcms.auth.providers.jwt.services.JsonWebTokenAuthCredentialProcessorImpl;\n+import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.cms.factories.PublicEncryptionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Config;\n+import com.liferay.portal.model.User;\n+import io.jsonwebtoken.*;\n+import org.apache.commons.lang.StringUtils;\n+import org.glassfish.jersey.server.ContainerRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+/**\n+ * Singleton class to provide util method to Push Publish authentication, it support two authentication methods:\n+ * JWToken and Auth key set in the {@link com.dotcms.publisher.endpoint.bean.impl.PushPublishingEndPoint},\n+ * if the config property 'USE_JWT_TOKEN_IN_PUSH_PUBLISH' is set to true (default value)\n+ * it is going to use JWT token, but if the config property is set to false or the JWT token fails then auth key is going to use\n+ * */\n+public enum AuthCredentialPushPublishUtil {\n+    INSTANCE;\n+\n+    private final String BEARER = \"Bearer \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MFrOHYWhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MFrOHYWhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc3NA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'javax.servlet.http.HttpServletResponse'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296774", "createdAt": "2020-09-25T22:52:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.AuthCredentialPushPublishUtil;\n+import com.dotcms.repackage.org.apache.http.HttpStatus;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.HttpRequestDataUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/RestEndPointIPUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MVrOHYWhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MVrOHYWhDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc4MA==", "bodyText": "Codacy found an issue: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296780", "createdAt": "2020-09-25T22:52:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/RestEndPointIPUtil.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.util.HttpRequestDataUtil;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.ws.rs.core.Context;\n+import java.util.Optional;\n+\n+/**\n+ * Provide util methods to get remote or local IP from {@link HttpServletRequest}\n+ */\n+public class RestEndPointIPUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzE2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MVrOHYWhEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MVrOHYWhEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc4Ng==", "bodyText": "Codacy found an issue: The String literal \"anyIP\" appears 5 times in this file; the first occurrence is on line 54", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296786", "createdAt": "2020-09-25T22:52:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.assertEquals;\n+\n+\n+public class Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables#executeUpgrade()}\n+     * When: Run the Upgrade Task\n+     * Should: Should remove the foreign key to all the Integrity Resolver tables and rename the column endpoint_id\n+     * The Integrity Resolver tables are:\n+     * - cms_roles_ir\n+     * - folders_ir\n+     * - structures_ir\n+     * - htmlpages_ir\n+     * - fileassets_ir\n+     *\n+     * After remove the constraint you should be allow to insert register in this table without has any register in publishing_end_point\n+     */\n+    @Test\n+    public void constraintShouldNotExists() throws DotDataException, SQLException {\n+\n+        final String endpointId = insertPublishingEndPoint();\n+        insertFolderIntegrityResolver(endpointId);\n+        insertPageIntegrityResolver(endpointId);\n+        insertFileAssetIntegrityResolver(endpointId);\n+        insertRolesIntegrityResolver(endpointId);\n+        insertStructuresIntegrityResolver(endpointId);\n+\n+        final Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables =\n+                new Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables();\n+\n+        task05390RemoveEndpointIdForeignKeyInIntegrityResolverTables.executeUpgrade();\n+\n+        insertFolderIntegrityResolver(\"anyIP\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/ConfigurationResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MlrOHYWhGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0MlrOHYWhGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njc5NA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'javax.ws.rs'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296794", "createdAt": "2020-09-25T22:52:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/ConfigurationResource.java", "diffHunk": "@@ -6,12 +6,15 @@\n \n import javax.servlet.http.HttpServletRequest;\n \n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0M1rOHYWhIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0M1rOHYWhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjgwMA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.UtilMethods'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296800", "createdAt": "2020-09-25T22:52:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.AuthCredentialPushPublishUtil;\n+import com.dotcms.repackage.org.apache.http.HttpStatus;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.HttpRequestDataUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0NVrOHYWhIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0NVrOHYWhIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjgwMg==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296802", "createdAt": "2020-09-25T22:52:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "diffHunk": "@@ -37,148 +36,128 @@\n public class BundlePublisherResource {\n \n \tpublic static String MY_TEMP = \"\";\n-\tprivate PublishingEndPointAPI endpointAPI = APILocator.getPublisherEndPointAPI();\n-\n-    /**\n-     * Method that receives from a server a bundle with the intention of publish it.<br/>\n-     * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n-     * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n-     * to the {@link PublishThread Publish Thread}.\n-     *\n-     * @param fileName       File name to be published\n-     * @param auth_token_enc Authentication token\n-     * @param groupId        Group who sent the Bundle\n-     * @param endpointId     End-point who sent the Bundle\n-\t * @param type\t\t\t response type\n-\t * @param callback \t\t response callback\n-\t * @param bundleName\t The name for the Bundle to publish\n-\t * @param forcePush \t true/false to Force the push\n-     * @param req            HttpRequest\n-     * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n-     * @see PublishThread\n-     */\n-    @POST\n-    @Path (\"/publish\")\n-    @Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\n+\t/**\n+\t * Method that receives from a server a bundle with the intention of publish it.<br/>\n+\t * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n+\t * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n+\t * to the {@link PublishThread Publish Thread}.\n+\t *\n+\t * @param type\t\t\t  response type\n+\t * @param callback \t\t  response callback\n+\t * @param forcePush \t  true/false to Force the push\n+\t * @param request         {@link HttpServletRequest}\n+\t * @param response        {@link HttpServletResponse}\n+\t * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n+\t * @see PublishThread\n+\t */\n+\t@POST\n+\t@Path(\"/publish\")\n+\t@Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\t@Produces(MediaType.APPLICATION_JSON)\n \tpublic Response publish(\n-\t\t\t@QueryParam(\"FILE_NAME\") String fileName,\n-\t\t\t@QueryParam(\"AUTH_TOKEN\") String auth_token_digest,\n-\t\t\t@QueryParam(\"GROUP_ID\") String groupId,\n-\t\t\t@QueryParam(\"ENDPOINT_ID\") String endpointId,\n-\t\t\t@QueryParam(\"type\") String type,\n-\t\t\t@QueryParam(\"callback\") String callback,\n-\t\t\t@QueryParam(\"BUNDLE_NAME\") String bundleName,\n-\t\t\t@QueryParam(\"FORCE_PUSH\") final boolean forcePush,\n-\t\t\t@Context HttpServletRequest req\n-\t) {\n-    \ttry {\n-    \t\ttry (InputStream bundleStream = req.getInputStream()) {\n-\t\t        //Creating an utility response object\n-\t\t        Map<String, String> paramsMap = new HashMap<String, String>();\n-\t\t        paramsMap.put( \"type\", type );\n-\t\t        paramsMap.put( \"callback\", callback );\n-\t\t        ResourceResponse responseResource = new ResourceResponse( paramsMap );\n-\n-\t\t\t\tString remoteIP = \"\";\n-\t\t\t\ttry {\n-\n-\t\t\t\t\tremoteIP = req.getRemoteHost();\n-\t\t\t\t\tif(!UtilMethods.isSet(remoteIP))\n-\t\t\t\t\t\tremoteIP = req.getRemoteAddr();\n-\n-\t\t\t\t\tHibernateUtil.startTransaction();\n-\n-\t\t\t\t\tPublishingEndPoint mySelf = endpointAPI.findEnabledSendingEndPointByAddress(remoteIP);\n-\n-\t\t\t\t\tif(mySelf==null || !isValidToken(auth_token_digest, remoteIP, mySelf)) {\n-\t\t\t\t\t\tbundleStream.close();\n-\t\t\t\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" invalid endpoint or token\");\n-\t\t\t\t\t\t\n-\t\t        return responseResource.responseError( HttpStatus.SC_UNAUTHORIZED );\n-\t\t       }\n-\n-\t\t\t\t\tString bundlePath = ConfigUtils.getBundlePath()+File.separator+MY_TEMP;\n-\t\t\t\t\tString bundleFolder = fileName.substring(0, fileName.indexOf(\".tar.gz\"));\n-\n-\t\t            PublishAuditStatus status = PublishAuditAPI.getInstance().updateAuditTable( mySelf.getId(), mySelf.getId(), bundleFolder, true );\n-\n-\t\t            if(bundleName.trim().length()>0) {\n-\t\t\t\t\t    // save bundle if it doesn't exists\n-\t\t                Bundle foundBundle = APILocator.getBundleAPI().getBundleById( bundleFolder );\n-\t\t                if ( foundBundle == null || foundBundle.getId() == null ) {\n-\t\t                    Bundle bundle = new Bundle();\n-\t\t\t\t\t\t\tbundle.setId(bundleFolder);\n-\t\t\t\t\t\t\tbundle.setName(bundleName);\n-\t\t\t\t\t\t\tbundle.setPublishDate(Calendar.getInstance().getTime());\n-\t\t\t\t\t\t\tbundle.setOwner(APILocator.getUserAPI().getSystemUser().getUserId());\n-\t\t\t\t\t\t\tbundle.setForcePush(forcePush);\n-\t\t                    APILocator.getBundleAPI().saveBundle(bundle);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//Write file on FS\n-\t\t\t\t\tFileUtil.writeToFile(bundleStream, bundlePath+fileName);\n-\n-\t\t\t\t\t//Start thread\n-\t\t\t\t\tif(!status.getStatus().equals(Status.PUBLISHING_BUNDLE)) {\n-\t\t\t\t\t\tnew Thread(new PublishThread(fileName, groupId, endpointId, status)).start();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tHibernateUtil.commitTransaction();\n-\n-\t\t\t\t\treturn Response.status(HttpStatus.SC_OK).build();\n-\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class, \"Error caused by remote call of: \"+remoteIP);\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t}\n-\t\t\t\tfinally {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.closeSession();\n-\t\t            } catch (DotHibernateException e) {\n-\t\t                Logger.error(this, \"error close session\",e);\n-\t\t            }\n-\t\t\t\t}\n-    \t\t}\n-    \t} catch (IOException e) {\n-    \t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-    \t}\n-\n-\t\treturn Response.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).build();\n+\t\t\t@QueryParam(\"type\")        final String type,\n+\t\t\t@QueryParam(\"callback\")    final String callback,\n+\t\t\t@QueryParam(\"FORCE_PUSH\")  final boolean forcePush,\n+\t\t\t@Context final HttpServletRequest  request,\n+\t\t\t@Context final HttpServletResponse response\n+\t) throws Exception {\n+\t\tfinal ResourceResponse responseResource = new ResourceResponse(\n+\t\t\t\tCollectionsUtils.map(\"type\", type, \"callback\", callback));\n+\t\tfinal String remoteIP = UtilMethods.isSet(request.getRemoteHost())?\n+\t\t\t\trequest.getRemoteHost() : request.getRemoteAddr();\n+\n+\t\tif (request.getInputStream().isFinished()) {\n+\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" bundle expected\");\n+\t\t\treturn responseResource.responseError(HttpStatus.SC_BAD_REQUEST);\n+\t\t}\n+\n+\t\tfinal AuthCredentialPushPublishUtil.PushPublishAuthenticationToken pushPublishAuthenticationToken\n+\t\t\t\t= AuthCredentialPushPublishUtil.INSTANCE.processAuthHeader(request);\n+\n+\t\tfinal Optional<Response> failResponse = PushPublishResourceUtil.getFailResponse(request, pushPublishAuthenticationToken);\n+\n+\t\tif (failResponse.isPresent()) {\n+\t\t\treturn failResponse.get();\n+\t\t}\n+\n+\t\tfinal Bundle bundle = this.publishBundle(forcePush, request, remoteIP);\n+\n+\t\treturn Response.ok(bundle).build();\n \t}\n \n-    /**\n-     * Validates a received token\n-     *\n-     * @param token    Token to validate\n-     * @param remoteIP Sender IP\n-     * @param mySelf   Current end point\n-     * @return True if valid\n-     * @throws IOException If fails reading the security token\n-     */\n-    public static boolean isValidToken ( String token, String remoteIP, PublishingEndPoint mySelf ) throws IOException {\n+\t@WrapInTransaction\n+\tprivate Bundle publishBundle(final boolean forcePush,\n+\t\t\t\t\t\t\t\t final HttpServletRequest request,\n+\t\t\t\t\t\t\t\t final String remoteIP) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0NlrOHYWhKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0NlrOHYWhKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjgwOA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296808", "createdAt": "2020-09-25T22:52:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundlePublisherResource.java", "diffHunk": "@@ -37,148 +36,128 @@\n public class BundlePublisherResource {\n \n \tpublic static String MY_TEMP = \"\";\n-\tprivate PublishingEndPointAPI endpointAPI = APILocator.getPublisherEndPointAPI();\n-\n-    /**\n-     * Method that receives from a server a bundle with the intention of publish it.<br/>\n-     * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n-     * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n-     * to the {@link PublishThread Publish Thread}.\n-     *\n-     * @param fileName       File name to be published\n-     * @param auth_token_enc Authentication token\n-     * @param groupId        Group who sent the Bundle\n-     * @param endpointId     End-point who sent the Bundle\n-\t * @param type\t\t\t response type\n-\t * @param callback \t\t response callback\n-\t * @param bundleName\t The name for the Bundle to publish\n-\t * @param forcePush \t true/false to Force the push\n-     * @param req            HttpRequest\n-     * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n-     * @see PublishThread\n-     */\n-    @POST\n-    @Path (\"/publish\")\n-    @Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\n+\t/**\n+\t * Method that receives from a server a bundle with the intention of publish it.<br/>\n+\t * When a Bundle file is received on this end point is required to validate if the sending server is an allowed<br/>\n+\t * server on this end point and if the security tokens match. If all the validations are correct the bundle will be add it<br/>\n+\t * to the {@link PublishThread Publish Thread}.\n+\t *\n+\t * @param type\t\t\t  response type\n+\t * @param callback \t\t  response callback\n+\t * @param forcePush \t  true/false to Force the push\n+\t * @param request         {@link HttpServletRequest}\n+\t * @param response        {@link HttpServletResponse}\n+\t * @return Returns a {@link Response} object with a 200 status code if success or a 500 error code if anything fails on the Publish process\n+\t * @see PublishThread\n+\t */\n+\t@POST\n+\t@Path(\"/publish\")\n+\t@Consumes(MediaType.APPLICATION_OCTET_STREAM)\n+\t@Produces(MediaType.APPLICATION_JSON)\n \tpublic Response publish(\n-\t\t\t@QueryParam(\"FILE_NAME\") String fileName,\n-\t\t\t@QueryParam(\"AUTH_TOKEN\") String auth_token_digest,\n-\t\t\t@QueryParam(\"GROUP_ID\") String groupId,\n-\t\t\t@QueryParam(\"ENDPOINT_ID\") String endpointId,\n-\t\t\t@QueryParam(\"type\") String type,\n-\t\t\t@QueryParam(\"callback\") String callback,\n-\t\t\t@QueryParam(\"BUNDLE_NAME\") String bundleName,\n-\t\t\t@QueryParam(\"FORCE_PUSH\") final boolean forcePush,\n-\t\t\t@Context HttpServletRequest req\n-\t) {\n-    \ttry {\n-    \t\ttry (InputStream bundleStream = req.getInputStream()) {\n-\t\t        //Creating an utility response object\n-\t\t        Map<String, String> paramsMap = new HashMap<String, String>();\n-\t\t        paramsMap.put( \"type\", type );\n-\t\t        paramsMap.put( \"callback\", callback );\n-\t\t        ResourceResponse responseResource = new ResourceResponse( paramsMap );\n-\n-\t\t\t\tString remoteIP = \"\";\n-\t\t\t\ttry {\n-\n-\t\t\t\t\tremoteIP = req.getRemoteHost();\n-\t\t\t\t\tif(!UtilMethods.isSet(remoteIP))\n-\t\t\t\t\t\tremoteIP = req.getRemoteAddr();\n-\n-\t\t\t\t\tHibernateUtil.startTransaction();\n-\n-\t\t\t\t\tPublishingEndPoint mySelf = endpointAPI.findEnabledSendingEndPointByAddress(remoteIP);\n-\n-\t\t\t\t\tif(mySelf==null || !isValidToken(auth_token_digest, remoteIP, mySelf)) {\n-\t\t\t\t\t\tbundleStream.close();\n-\t\t\t\t\t\tLogger.error(this.getClass(), \"Push Publishing failed from \" + remoteIP + \" invalid endpoint or token\");\n-\t\t\t\t\t\t\n-\t\t        return responseResource.responseError( HttpStatus.SC_UNAUTHORIZED );\n-\t\t       }\n-\n-\t\t\t\t\tString bundlePath = ConfigUtils.getBundlePath()+File.separator+MY_TEMP;\n-\t\t\t\t\tString bundleFolder = fileName.substring(0, fileName.indexOf(\".tar.gz\"));\n-\n-\t\t            PublishAuditStatus status = PublishAuditAPI.getInstance().updateAuditTable( mySelf.getId(), mySelf.getId(), bundleFolder, true );\n-\n-\t\t            if(bundleName.trim().length()>0) {\n-\t\t\t\t\t    // save bundle if it doesn't exists\n-\t\t                Bundle foundBundle = APILocator.getBundleAPI().getBundleById( bundleFolder );\n-\t\t                if ( foundBundle == null || foundBundle.getId() == null ) {\n-\t\t                    Bundle bundle = new Bundle();\n-\t\t\t\t\t\t\tbundle.setId(bundleFolder);\n-\t\t\t\t\t\t\tbundle.setName(bundleName);\n-\t\t\t\t\t\t\tbundle.setPublishDate(Calendar.getInstance().getTime());\n-\t\t\t\t\t\t\tbundle.setOwner(APILocator.getUserAPI().getSystemUser().getUserId());\n-\t\t\t\t\t\t\tbundle.setForcePush(forcePush);\n-\t\t                    APILocator.getBundleAPI().saveBundle(bundle);\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t//Write file on FS\n-\t\t\t\t\tFileUtil.writeToFile(bundleStream, bundlePath+fileName);\n-\n-\t\t\t\t\t//Start thread\n-\t\t\t\t\tif(!status.getStatus().equals(Status.PUBLISHING_BUNDLE)) {\n-\t\t\t\t\t\tnew Thread(new PublishThread(fileName, groupId, endpointId, status)).start();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tHibernateUtil.commitTransaction();\n-\n-\t\t\t\t\treturn Response.status(HttpStatus.SC_OK).build();\n-\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.rollbackTransaction();\n-\t\t            } catch (DotHibernateException e1) {\n-\t\t                Logger.error(this, \"error rollback\",e1);\n-\t\t            }\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class, \"Error caused by remote call of: \"+remoteIP);\n-\t\t\t\t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-\t\t\t\t}\n-\t\t\t\tfinally {\n-\t\t\t\t    try {\n-\t\t                HibernateUtil.closeSession();\n-\t\t            } catch (DotHibernateException e) {\n-\t\t                Logger.error(this, \"error close session\",e);\n-\t\t            }\n-\t\t\t\t}\n-    \t\t}\n-    \t} catch (IOException e) {\n-    \t\tLogger.error(PublisherQueueJob.class,e.getMessage(),e);\n-    \t}\n-\n-\t\treturn Response.status(HttpStatus.SC_INTERNAL_SERVER_ERROR).build();\n+\t\t\t@QueryParam(\"type\")        final String type,\n+\t\t\t@QueryParam(\"callback\")    final String callback,\n+\t\t\t@QueryParam(\"FORCE_PUSH\")  final boolean forcePush,\n+\t\t\t@Context final HttpServletRequest  request,\n+\t\t\t@Context final HttpServletResponse response\n+\t) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzQxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0N1rOHYWhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0N1rOHYWhMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjgxOA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'javax.ws.rs'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296818", "createdAt": "2020-09-25T22:52:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/IntegrityResource.java", "diffHunk": "@@ -38,28 +39,20 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n-import javax.ws.rs.Consumes;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.POST;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.client.Client;\n+import javax.ws.rs.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0OFrOHYWhPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0OFrOHYWhPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5NjgzMQ==", "bodyText": "Codacy found an issue: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296831", "createdAt": "2020-09-25T22:52:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/PushPublishResourceUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.AuthCredentialPushPublishUtil;\n+import com.dotcms.repackage.org.apache.http.HttpStatus;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.HttpRequestDataUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.Response;\n+import java.util.Optional;\n+\n+/**\n+ * Provide util method for {@link IntegrityResource} and {@link BundleResource} classes\n+ */\n+public class PushPublishResourceUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDAyNzU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0OVrOHYWhSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo1Mjo0OVrOHYWhSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI5Njg0Mg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Map'", "url": "https://github.com/dotCMS/core/pull/19273#discussion_r495296842", "createdAt": "2020-09-25T22:52:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05390RemoveEndpointIdForeignKeyInIntegrityResolverTablesIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.common.db.DotDatabaseMetaData;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31011524a73fdfdaf924361ea51973388817610c"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1875, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}