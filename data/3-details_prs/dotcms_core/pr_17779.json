{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MDIwNDQw", "number": 17779, "title": "Issue 17740 focal point2", "bodyText": "This pull request adds the ability to set a focal point (parameter = fp) as percentages of the image width and height when cropping an image.  It also does away with the requirement to specify the filters when using the image rest tooling, and instead you can just pass the filter parameters and the image tooling will figure it out.\nAs an example, take this image on our demo site:\nhttp://localhost:8080/contentAsset/image/5fd1bc65-9c54-4b51-8d03-feccab014d50\n\nhttp://localhost:8080/contentAsset/image/5fd1bc65-9c54-4b51-8d03-feccab014d50/image/crop_w/200/crop_h/300/fp/.34,.4/\n\nhttp://localhost:8080/contentAsset/image/5fd1bc65-9c54-4b51-8d03-feccab014d50/image/crop_w/400/crop_h/200/fp/.34,.4/", "createdAt": "2020-01-03T15:11:54Z", "url": "https://github.com/dotCMS/core/pull/17779", "merged": true, "mergeCommit": {"oid": "8852f4ee814e132955b82d1472a6d4a723a2aea5"}, "closed": true, "closedAt": "2020-01-24T18:24:50Z", "author": {"login": "wezell"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2lfPZgH2gAyMzU5MDIwNDQwOmJkNThiMTYxZDM0Y2U3Zjk2MDI1MjA2NDc1MDE2ODJiZjMzMmQ4Mjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9jBJDAFqTM0ODEzMjMwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd58b161d34ce7f9602520647501682bf332d827", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/bd58b161d34ce7f9602520647501682bf332d827", "committedDate": "2020-01-03T03:07:27Z", "message": "#17740 smaller focal point change is better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a65630d900b4ed97a7e9c335c2b4c9b6ec84f3", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/18a65630d900b4ed97a7e9c335c2b4c9b6ec84f3", "committedDate": "2020-01-03T14:38:15Z", "message": "#17740 not persisting focal point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc2165d0853f5f34a8a11c5292cff460d67d3e68", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/cc2165d0853f5f34a8a11c5292cff460d67d3e68", "committedDate": "2020-01-03T14:46:51Z", "message": "#17740 filter order matters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c3c9c155d25fe8e0969052e187e9e5c98d583c", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/f3c3c9c155d25fe8e0969052e187e9e5c98d583c", "committedDate": "2020-01-03T15:04:47Z", "message": "#17740 better param parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "663a8a548699b4a30ee748bccf3cf490aa6e3d6f", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/663a8a548699b4a30ee748bccf3cf490aa6e3d6f", "committedDate": "2020-01-03T15:10:51Z", "message": "#17740 adding a flush to free mem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "285bca4533233c2e9a031094148b34d8cad63e8d", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/285bca4533233c2e9a031094148b34d8cad63e8d", "committedDate": "2020-01-03T15:34:35Z", "message": "#17740 getting tests going"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74723cb92126f811eef1f20134a586d0222b26f9", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/74723cb92126f811eef1f20134a586d0222b26f9", "committedDate": "2020-01-03T19:45:12Z", "message": "#17740 shortyservlet support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9287e1cbcbc67fc7abc20c99ea4c8e9e0208773e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/9287e1cbcbc67fc7abc20c99ea4c8e9e0208773e", "committedDate": "2020-01-21T16:36:55Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17740-focal-point2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e7ac93fcc85af5f08d9e138e6da6ef3f89430f", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/41e7ac93fcc85af5f08d9e138e6da6ef3f89430f", "committedDate": "2020-01-21T18:44:21Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17740-focal-point2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd84addbc721e472132b3f751485f55f3c03ac29", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/dd84addbc721e472132b3f751485f55f3c03ac29", "committedDate": "2020-01-21T19:02:03Z", "message": "#17740 code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8176d706a62ae7cca761171bb339ad7d6069014", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/a8176d706a62ae7cca761171bb339ad7d6069014", "committedDate": "2020-01-21T21:49:25Z", "message": "#17740 code review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzAzMzUx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346703351", "createdAt": "2020-01-22T16:01:00Z", "commit": {"oid": "a8176d706a62ae7cca761171bb339ad7d6069014"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NzA1OTM1", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346705935", "createdAt": "2020-01-22T16:04:10Z", "commit": {"oid": "a8176d706a62ae7cca761171bb339ad7d6069014"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowNDoxMFrOFghsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNjowNDoxMFrOFghsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY1MDc3NQ==", "bodyText": "are you sure that it not missing any test here?, we have 30 files modified and just a few test", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369650775", "createdAt": "2020-01-22T16:04:10Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8176d706a62ae7cca761171bb339ad7d6069014"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6", "committedDate": "2020-01-22T20:07:39Z", "message": "Merge branch 'master' into issue-17740-focal-point2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjA1", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872605", "createdAt": "2020-01-22T20:15:01Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowMVrOFgpk_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowMVrOFgpk_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTk2NA==", "bodyText": "Issue found: assertTrue(!expr) can be replaced by assertFalse(expr)", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369779964", "createdAt": "2020-01-22T20:15:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));\n+\n+\n+\n+        }\n+\n+    }\n+\n+    \n+    /**\n+     * we should return an empty Optional if there is no focal point\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_when_no_focal_point() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"There is no focal point\", !writtenFp.isPresent());\n+\n+\n+\n+\n+        }\n+\n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * parses a focal point from a String\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_parsing_a_focal_point_from_string() throws Exception {\n+\n+        String fp1 = \".555,.666\";\n+\n+        \n+        Optional<FocalPoint> test = fpAPI.parseFocalPoint(fp1);\n+        assertTrue(\"we have focal point\", test.isPresent());\n+        assertTrue(\"we have focal point1\", test.get().x == .555f);\n+        assertTrue(\"we have focal point1\", test.get().y == .666f);\n+        \n+        \n+        fp1 = \".dasdas,.asdas\";\n+        test = fpAPI.parseFocalPoint(fp1);\n+        assertTrue(\"we have no  focal point\", !test.isPresent());\n+\n+    }\n+    \n+    \n+    /**\n+     * Reads a focal point from a parameter map\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_a_focal_point_from_params() throws Exception {\n+        String fp1 = \".555,.666\";\n+        Map<String,String[]> params = ImmutableMap.of(\"fp\", new String[] {fp1});\n+\n+        \n+        Optional<FocalPoint> test = fpAPI.parseFocalPointFromParams(params);\n+        assertTrue(\"we have focal point\", test.isPresent());\n+        assertTrue(\"we have focal point1\", test.get().x == .555f);\n+        assertTrue(\"we have focal point1\", test.get().y == .666f);\n+        \n+        \n+        fp1 = \".dasdas,.asdas\";\n+        params = ImmutableMap.of(\"fp\", new String[] {fp1});\n+        test= fpAPI.parseFocalPointFromParams(params);\n+        assertTrue(\"we have no  focal point\", !test.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjIy", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872622", "createdAt": "2020-01-22T20:15:03Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowM1rOFgplDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowM1rOFgplDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTk4Mg==", "bodyText": "Issue found: Private field 'cache' could be made final; it is only initialized in the declaration or constructor.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369779982", "createdAt": "2020-01-22T20:15:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/focalpoint/FocalPointCache.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotmarketing.image.focalpoint;\r\n+\r\n+import java.util.Optional;\r\n+import com.dotmarketing.business.Cachable;\r\n+import com.dotmarketing.business.CacheLocator;\r\n+import com.dotmarketing.business.DotCacheAdministrator;\r\n+import com.dotmarketing.business.DotCacheException;\r\n+import com.dotmarketing.util.Logger;\r\n+import com.dotmarketing.util.UtilMethods;\r\n+\r\n+/**\r\n+ * FocalPoint cache\r\n+ */\r\n+public class FocalPointCache implements Cachable {\r\n+\r\n+    private DotCacheAdministrator cache;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjMz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872633", "createdAt": "2020-01-22T20:15:04Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowNFrOFgplGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowNFrOFgplGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc3OTk5Mg==", "bodyText": "Issue found: Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369779992", "createdAt": "2020-01-22T20:15:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/servlets/ShortyServlet.java", "diffHunk": "@@ -244,6 +335,16 @@ private void addImagePath(final int weight,\n           }\n           pathBuilder.append(weight > 0? \"/resize_w/\" + weight : StringPool.BLANK);\n           pathBuilder.append(height > 0? \"/resize_h/\" + height : StringPool.BLANK);\n+          if(focalPoint.isPresent()) {\n+              pathBuilder.append(\"/fp/\" + focalPoint.get());\n+          }\n+          if(cropWidth>0) {\n+              pathBuilder.append(\"/crop_w/\" + cropWidth);\n+          }\n+          if(cropHeight>0) {\n+              pathBuilder.append(\"/crop_h/\" + cropHeight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 190}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjUx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872651", "createdAt": "2020-01-22T20:15:06Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowNlrOFgplKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowNlrOFgplKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDAwOQ==", "bodyText": "Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780009", "createdAt": "2020-01-22T20:15:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));\n+\n+\n+\n+        }\n+\n+    }\n+\n+    \n+    /**\n+     * we should return an empty Optional if there is no focal point\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_when_no_focal_point() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"There is no focal point\", !writtenFp.isPresent());\n+\n+\n+\n+\n+        }\n+\n+    }\n+    \n+    \n+    \n+    \n+    /**\n+     * parses a focal point from a String\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_parsing_a_focal_point_from_string() throws Exception {\n+\n+        String fp1 = \".555,.666\";\n+\n+        \n+        Optional<FocalPoint> test = fpAPI.parseFocalPoint(fp1);\n+        assertTrue(\"we have focal point\", test.isPresent());\n+        assertTrue(\"we have focal point1\", test.get().x == .555f);\n+        assertTrue(\"we have focal point1\", test.get().y == .666f);\n+        \n+        \n+        fp1 = \".dasdas,.asdas\";\n+        test = fpAPI.parseFocalPoint(fp1);\n+        assertTrue(\"we have no  focal point\", !test.isPresent());\n+\n+    }\n+    \n+    \n+    /**\n+     * Reads a focal point from a parameter map\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_a_focal_point_from_params() throws Exception {\n+        String fp1 = \".555,.666\";\n+        Map<String,String[]> params = ImmutableMap.of(\"fp\", new String[] {fp1});\n+\n+        \n+        Optional<FocalPoint> test = fpAPI.parseFocalPointFromParams(params);\n+        assertTrue(\"we have focal point\", test.isPresent());\n+        assertTrue(\"we have focal point1\", test.get().x == .555f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjYx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872661", "createdAt": "2020-01-22T20:15:08Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowOFrOFgplMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowOFrOFgplMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDAxNw==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780017", "createdAt": "2020-01-22T20:15:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;\n+\t\tfinal float widthInput  = parameters.get(getPrefix() + WIDTH_PARAM_KEY)  != null ? Float.parseFloat(parameters.get(getPrefix()  + WIDTH_PARAM_KEY)[0]) : 0f;\n+\t\tfinal float heightInput = parameters.get(getPrefix() + HEIGHT_PARAM_KEY) != null ? Float.parseFloat(parameters.get(getPrefix() + HEIGHT_PARAM_KEY)[0]) : 0f;\n+\t\tint width  = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjcz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872673", "createdAt": "2020-01-22T20:15:09Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowOVrOFgplNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTowOVrOFgplNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDAyMw==", "bodyText": "Issue found: Assigning an Object to null is a code smell.  Consider refactoring.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780023", "createdAt": "2020-01-22T20:15:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/servlets/ShortyServlet.java", "diffHunk": "@@ -74,6 +80,20 @@ protected void service(final HttpServletRequest request, final HttpServletRespon\n     }\n   }\n \n+  \n+    private Optional<String> getParameter(final String uri, final String paramName) {\n+\n+        int start  = uri.indexOf(\"/\" + paramName + \"/\") + paramName.length() + 2;\n+        int end  = uri.indexOf(\"/\", start) >-1 ? uri.indexOf(\"/\", start) : uri.length();\n+        \n+        \n+        return Optional.ofNullable(uri.indexOf(\"/\" + paramName + \"/\") > 0 \n+                        ? uri.substring(start,end) \n+                                        : null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNjkz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872693", "createdAt": "2020-01-22T20:15:10Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxMFrOFgplRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxMFrOFgplRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDAzOQ==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780039", "createdAt": "2020-01-22T20:15:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/focalpoint/FocalPointAPIImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+import com.liferay.util.StringPool;\n+import org.apache.commons.io.IOUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.util.Logger;\n+import io.vavr.control.Try;\n+\n+public class FocalPointAPIImpl implements FocalPointAPI {\n+\n+    private final static String FOCALPOINT_EXTENSION = \".dotfp\";\n+\n+    private final FocalPointCache cache;\n+    private final FileAssetAPI    fileAssetAPI;\n+    private final Pattern         fpPattern = Pattern.compile(StringPool.COMMA);\n+\n+    public FocalPointAPIImpl() {\n+        this(APILocator.getFileAssetAPI(), new FocalPointCache());\n+\n+    }\n+\n+    public FocalPointAPIImpl(final FileAssetAPI fileAssetAPI, final FocalPointCache cache) {\n+        this.fileAssetAPI = fileAssetAPI;\n+        this.cache = cache;\n+    }\n+\n+\n+    private File getFPFile(final String inode, final String fieldVar) {\n+        File assetOpt = fileAssetAPI.getContentMetadataFile(inode);\n+        return new File(assetOpt.getParent(), fieldVar + FOCALPOINT_EXTENSION);\n+    }\n+\n+    @Override\n+    public void writeFocalPoint(final String inode, final String fieldVar, final FocalPoint focalPoint) {\n+\n+        final File dotFP = getFPFile(inode, fieldVar);\n+        dotFP.getParentFile().mkdirs();\n+\n+        if (focalPoint.x == 0 && focalPoint.y == 0) {\n+            Logger.info(this.getClass(), \"Deleteing focalpoint:\" + focalPoint);\n+            dotFP.delete();\n+            if (cache != null) {\n+                cache.remove(inode, fieldVar);\n+            }\n+            return;\n+        }\n+\n+        try (OutputStream out = Files.newOutputStream(dotFP.toPath())) {\n+            Logger.info(this.getClass(), \"Writing focalpoint:\" + focalPoint + \" to \" + dotFP);\n+            IOUtils.write(focalPoint.x + \",\" + focalPoint.y, out, Charset.defaultCharset());\n+        } catch (IOException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+\n+        if (cache != null) {\n+            cache.add(inode, fieldVar, focalPoint);\n+        }\n+\n+    }\n+\n+    private Optional<FocalPoint> readFocalPoint(final File dotFP) {\n+\n+        try (InputStream input = Files.newInputStream(dotFP.toPath())) {\n+\n+            final String value = IOUtils.toString(input, Charset.defaultCharset());\n+            return parseFocalPoint(value);\n+        } catch (Exception e) {\n+            Logger.debug(this.getClass(), e.getMessage(), e);\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<FocalPoint> parseFocalPoint(final String forcalPoint) {\n+\n+        try {\n+\n+            final String[] value = this.fpPattern.split(forcalPoint);\n+            return Optional.of(new FocalPoint(Float.valueOf(value[0]), Float.valueOf(value[1])));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzA5", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872709", "createdAt": "2020-01-22T20:15:12Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxMlrOFgplUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxMlrOFgplUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA1MQ==", "bodyText": "Issue found: Local variable 'val' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780051", "createdAt": "2020-01-22T20:15:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/ImageFilter.java", "diffHunk": "@@ -55,19 +59,32 @@ private String getUniqueFileName(File file, Map<String, String[]> parameters, St\n \t\t\t}\n \n \t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry pairs = (Map.Entry) it.next();\n-\t\t\t\tString key = (String) pairs.getKey();\n-\t\t\t\tString val = ((String[]) pairs.getValue())[0];\n+\t\t\t\tMap.Entry<String, String[]> pairs = it.next();\n+\t\t\t\tString key = pairs.getKey();\n+\t\t\t\tString val = pairs.getValue()[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzIx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872721", "createdAt": "2020-01-22T20:15:13Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxM1rOFgplWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxM1rOFgplWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA1OA==", "bodyText": "Issue found: Avoid variables with short names like y", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780058", "createdAt": "2020-01-22T20:15:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/focalpoint/FocalPoint.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import java.io.Serializable;\n+\n+import com.liferay.util.StringPool;\n+import io.vavr.control.Try;\n+\n+public class FocalPoint implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+    public final float x, y;\n+\n+    public FocalPoint(float x, float y) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzM1", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872735", "createdAt": "2020-01-22T20:15:15Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxNVrOFgplZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxNVrOFgplZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA2OQ==", "bodyText": "Issue found: Local variable 'incomingFile' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780069", "createdAt": "2020-01-22T20:15:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));\n+\n+\n+\n+        }\n+\n+    }\n+\n+    \n+    /**\n+     * we should return an empty Optional if there is no focal point\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_when_no_focal_point() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzUz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872753", "createdAt": "2020-01-22T20:15:16Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxNlrOFgplbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxNlrOFgplbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA3OQ==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780079", "createdAt": "2020-01-22T20:15:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;\n+\t\tfinal float widthInput  = parameters.get(getPrefix() + WIDTH_PARAM_KEY)  != null ? Float.parseFloat(parameters.get(getPrefix()  + WIDTH_PARAM_KEY)[0]) : 0f;\n+\t\tfinal float heightInput = parameters.get(getPrefix() + HEIGHT_PARAM_KEY) != null ? Float.parseFloat(parameters.get(getPrefix() + HEIGHT_PARAM_KEY)[0]) : 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzY5", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872769", "createdAt": "2020-01-22T20:15:18Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxOFrOFgpleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxOFrOFgpleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA4OQ==", "bodyText": "Issue found: Avoid variables with short names like p", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780089", "createdAt": "2020-01-22T20:15:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;\n+\t\tfinal float widthInput  = parameters.get(getPrefix() + WIDTH_PARAM_KEY)  != null ? Float.parseFloat(parameters.get(getPrefix()  + WIDTH_PARAM_KEY)[0]) : 0f;\n+\t\tfinal float heightInput = parameters.get(getPrefix() + HEIGHT_PARAM_KEY) != null ? Float.parseFloat(parameters.get(getPrefix() + HEIGHT_PARAM_KEY)[0]) : 0f;\n+\t\tint width  = 0;\n+\t\tint height = 0;\n+\n+\t\tfinal File resultFile = getResultsFile(file, parameters);\n \t\t\n \t\tif (!overwrite(resultFile, parameters)) {\n \t\t\treturn resultFile;\n \t\t}\n \t\t\n-\t\tBufferedImage src;\n \t\ttry {\n-\t\t\tsrc = ImageIO.read(file);\n-\t\t\tif(x > src.getWidth() || y > src.getHeight()){\n-\t\t\t\treturn file;\n-\t\t\t\t\n-\t\t\t}\n+\n+\t\t\tfinal BufferedImage src = ImageIO.read(file);\n+\t\t\tfinal Dimension current = new Dimension(src.getWidth(), src.getHeight());\n+\n+\t        if(widthInput ==0 && heightInput >0){\n+\t            height = Math.round(heightInput <=1  ? current.height * heightInput : heightInput);\n+\t            width = Math.round(height * current.width / current.height);\n+\t        }\n+\t        else if(widthInput >0 && heightInput ==0){\n+\t            width = Math.round(widthInput <= 1 ? current.width * widthInput : widthInput);\n+\t            height = Math.round(width * current.height / current.width);\n+\t        }\n+            else if(widthInput >0 && heightInput >0){\n+                width = Math.round(widthInput <= 1 ? current.width * widthInput : widthInput);\n+                height = Math.round(heightInput <= 1 ? current.height * heightInput : heightInput);\n+            }\n+\t        else{\n+\t            width = current.width;\n+\t            height = current.height;\n+\t        }\n+\t        \n+\t        if(x > current.getWidth() || y > current.getHeight()){\n+\t            return file;   \n+\t        }\n+\t        \n+\t\t    final Optional<Point> centerOpt = (x==0 && y==0) ? calcFocalPoint(src, parameters)  : Optional.empty();\n+\n+            if (centerOpt.isPresent()) {\n+\n+                final int halfWidth = Math.floorDiv(width, 2);\n+                final int halfHeight = Math.floorDiv(height, 2);\n+                final Point p = centerOpt.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzg0", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872784", "createdAt": "2020-01-22T20:15:19Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxOVrOFgplgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToxOVrOFgplgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDA5OA==", "bodyText": "Issue found: Local variable 'end' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780098", "createdAt": "2020-01-22T20:15:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/servlets/ShortyServlet.java", "diffHunk": "@@ -74,6 +80,20 @@ protected void service(final HttpServletRequest request, final HttpServletRespon\n     }\n   }\n \n+  \n+    private Optional<String> getParameter(final String uri, final String paramName) {\n+\n+        int start  = uri.indexOf(\"/\" + paramName + \"/\") + paramName.length() + 2;\n+        int end  = uri.indexOf(\"/\", start) >-1 ? uri.indexOf(\"/\", start) : uri.length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyNzk5", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872799", "createdAt": "2020-01-22T20:15:20Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyMFrOFgplkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyMFrOFgplkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDExMw==", "bodyText": "Issue found: Local variable 'start' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780113", "createdAt": "2020-01-22T20:15:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/servlets/ShortyServlet.java", "diffHunk": "@@ -74,6 +80,20 @@ protected void service(final HttpServletRequest request, final HttpServletRespon\n     }\n   }\n \n+  \n+    private Optional<String> getParameter(final String uri, final String paramName) {\n+\n+        int start  = uri.indexOf(\"/\" + paramName + \"/\") + paramName.length() + 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODEz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872813", "createdAt": "2020-01-22T20:15:22Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyMlrOFgplmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyMlrOFgplmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDEyMQ==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780121", "createdAt": "2020-01-22T20:15:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;\n+\t\tfinal float widthInput  = parameters.get(getPrefix() + WIDTH_PARAM_KEY)  != null ? Float.parseFloat(parameters.get(getPrefix()  + WIDTH_PARAM_KEY)[0]) : 0f;\n+\t\tfinal float heightInput = parameters.get(getPrefix() + HEIGHT_PARAM_KEY) != null ? Float.parseFloat(parameters.get(getPrefix() + HEIGHT_PARAM_KEY)[0]) : 0f;\n+\t\tint width  = 0;\n+\t\tint height = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODI4", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872828", "createdAt": "2020-01-22T20:15:23Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyM1rOFgplpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyM1rOFgplpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDEzMg==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780132", "createdAt": "2020-01-22T20:15:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODQx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872841", "createdAt": "2020-01-22T20:15:24Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyNFrOFgplsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyNFrOFgplsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE0NQ==", "bodyText": "Issue found: Local variable 'focalPoint' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780145", "createdAt": "2020-01-22T20:15:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODU2", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872856", "createdAt": "2020-01-22T20:15:26Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyNlrOFgplvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyNlrOFgplvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE1Nw==", "bodyText": "Issue found: Use assertEquals(x, y) instead of assertTrue(x.equals(y))", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780157", "createdAt": "2020-01-22T20:15:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODcw", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872870", "createdAt": "2020-01-22T20:15:27Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyN1rOFgplyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyN1rOFgplyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE2OA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780168", "createdAt": "2020-01-22T20:15:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));\n+\n+\n+\n+        }\n+\n+    }\n+\n+    \n+    /**\n+     * we should return an empty Optional if there is no focal point\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_when_no_focal_point() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyODg1", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872885", "createdAt": "2020-01-22T20:15:28Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyOFrOFgpl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNToyOFrOFgpl0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE3Nw==", "bodyText": "Issue found: Returning 'groupNames' may expose an internal array.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780177", "createdAt": "2020-01-22T20:15:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/focalpoint/FocalPointCache.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotmarketing.image.focalpoint;\r\n+\r\n+import java.util.Optional;\r\n+import com.dotmarketing.business.Cachable;\r\n+import com.dotmarketing.business.CacheLocator;\r\n+import com.dotmarketing.business.DotCacheAdministrator;\r\n+import com.dotmarketing.business.DotCacheException;\r\n+import com.dotmarketing.util.Logger;\r\n+import com.dotmarketing.util.UtilMethods;\r\n+\r\n+/**\r\n+ * FocalPoint cache\r\n+ */\r\n+public class FocalPointCache implements Cachable {\r\n+\r\n+    private DotCacheAdministrator cache;\r\n+\r\n+    private static String primaryGroup = \"FocalPointCache\";\r\n+\r\n+\r\n+    // region's name for the cache\r\n+    private static String[] groupNames = { primaryGroup };\r\n+\r\n+    public FocalPointCache() {\r\n+\r\n+        cache = CacheLocator.getCacheAdministrator();\r\n+    }\r\n+\r\n+    private String key(final String inode, final String fieldVar) {\r\n+\r\n+        return primaryGroup + inode + fieldVar;\r\n+    }\r\n+\r\n+\r\n+\r\n+    public FocalPoint add(final String inode, final String fieldVar, final FocalPoint focalPoint) {\r\n+\r\n+        if (UtilMethods.isSet(inode) && UtilMethods.isSet(fieldVar)) {\r\n+            cache.put(key(inode, fieldVar), focalPoint, primaryGroup);\r\n+        }\r\n+\r\n+        return focalPoint;\r\n+    }\r\n+\r\n+\r\n+    public void clearCache() {\r\n+        cache.flushGroup(primaryGroup);\r\n+    }\r\n+\r\n+\r\n+    public void remove(final String inode, final String fieldVar) {\r\n+\r\n+        cache.remove(key(inode, fieldVar), primaryGroup);\r\n+    }\r\n+\r\n+\r\n+\r\n+    public String[] getGroups() {\r\n+        return groupNames;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyOTEw", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872910", "createdAt": "2020-01-22T20:15:29Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMFrOFgpl4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMFrOFgpl4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDE5NA==", "bodyText": "Issue found: Local variable 'key' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780194", "createdAt": "2020-01-22T20:15:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/ImageFilter.java", "diffHunk": "@@ -55,19 +59,32 @@ private String getUniqueFileName(File file, Map<String, String[]> parameters, St\n \t\t\t}\n \n \t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry pairs = (Map.Entry) it.next();\n-\t\t\t\tString key = (String) pairs.getKey();\n-\t\t\t\tString val = ((String[]) pairs.getValue())[0];\n+\t\t\t\tMap.Entry<String, String[]> pairs = it.next();\n+\t\t\t\tString key = pairs.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyOTMw", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872930", "createdAt": "2020-01-22T20:15:31Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMVrOFgpl8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMVrOFgpl8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDIwOA==", "bodyText": "Issue found: Local variable 'fieldVar' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780208", "createdAt": "2020-01-22T20:15:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/ImageFilter.java", "diffHunk": "@@ -55,19 +59,32 @@ private String getUniqueFileName(File file, Map<String, String[]> parameters, St\n \t\t\t}\n \n \t\t\twhile (it.hasNext()) {\n-\t\t\t\tMap.Entry pairs = (Map.Entry) it.next();\n-\t\t\t\tString key = (String) pairs.getKey();\n-\t\t\t\tString val = ((String[]) pairs.getValue())[0];\n+\t\t\t\tMap.Entry<String, String[]> pairs = it.next();\n+\t\t\t\tString key = pairs.getKey();\n+\t\t\t\tString val = pairs.getValue()[0];\n \n-\t\t\t\tfor (String x : acceptFilter) {\n-\t\t\t\t\tif (key.startsWith(x)) {\n+\t\t\t\tfor (String filterName : acceptFilter) {\n+\t\t\t\t\tif (key.startsWith(filterName)) {\n \t\t\t\t\t\tsb.append(key + \":\" + val);\n \t\t\t\t\t}\n \t\t\t\t\tif (key.equalsIgnoreCase(\"fieldVarName\")) {//DOTMCS-5674\n \t\t\t\t\t\tsb.append(key + \":\" + val);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n+\t\t\t\n+            if (CROP.equals(thisFilter)) {\n+                Optional<FocalPoint> optPoint = new FocalPointAPIImpl().parseFocalPointFromParams(parameters);\n+                if(!optPoint.isPresent()) {\n+                    String fieldVar = parameters.get(\"fieldVarName\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyOTUx", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872951", "createdAt": "2020-01-22T20:15:32Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMlrOFgpl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozMlrOFgpl-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDIxOQ==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780219", "createdAt": "2020-01-22T20:15:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyOTYy", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872962", "createdAt": "2020-01-22T20:15:33Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozNFrOFgpmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozNFrOFgpmBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDIyOQ==", "bodyText": "Issue found: Avoid variables with short names like y", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780229", "createdAt": "2020-01-22T20:15:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/image/filter/CropImageFilter.java", "diffHunk": "@@ -1,61 +1,103 @@\n package com.dotmarketing.image.filter;\n \n+import java.awt.Dimension;\n+import java.awt.Point;\n import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.util.Map;\n-\n+import java.util.Optional;\n import javax.imageio.ImageIO;\n-\n+import com.dotmarketing.image.focalpoint.FocalPoint;\n+import com.dotmarketing.image.focalpoint.FocalPointAPIImpl;\n import com.dotmarketing.util.Logger;\n \n+/**\n+ * Crop a image focusing in a point\n+ */\n public class CropImageFilter extends ImageFilter {\n \n+\tpublic static final String X_PARAM_KEY = \"x\";\n+\tpublic static final String Y_PARAM_KEY = \"y\";\n+\tpublic static final String WIDTH_PARAM_KEY  = \"w\";\n+\tpublic static final String HEIGHT_PARAM_KEY = \"h\";\n+\n \tpublic String[] getAcceptedParameters(){\n \t\treturn  new String[] {\n \t\t\t\t\"x (int) for left of crop\",\n \t\t\t\t\"y (int) for top of crop\",\n \t\t\t\t\"w (int) for width of crop\",\n-\t\t\t\t\"h (int) for height of crop\"\n+\t\t\t\t\"h (int) for height of crop\",\n+\t\t\t\t\"fp (int,int) the focal point of the crop\"\n \t\t};\n \t}\n \t\n \t\n \t\n-\tpublic File runFilter(File file,  Map<String, String[]> parameters) {\n-\t\tint x = parameters.get(getPrefix() + \"x\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"x\")[0]) : 0;\n-\t\tint y = parameters.get(getPrefix() + \"y\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"y\")[0]) : 0;\n-\t\tint w = parameters.get(getPrefix() + \"w\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"w\")[0]) : 0;\n-\t\tint h = parameters.get(getPrefix() + \"h\") != null ? Integer.parseInt(parameters.get(getPrefix() + \"h\")[0]) : 0;\n-\t\tif (w == 0 || h == 0) {\n-\t\t\treturn file;\n-\t\t}\n-\t\t\n-\t\tFile resultFile = getResultsFile(file, parameters);\n+\tpublic File runFilter(final File file,  final Map<String, String[]> parameters) {\n+\t\tint x = parameters.get(getPrefix() + X_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + X_PARAM_KEY)[0]) : 0;\n+\t\tint y = parameters.get(getPrefix() + Y_PARAM_KEY) != null ? Integer.parseInt(parameters.get(getPrefix() + Y_PARAM_KEY)[0]) : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODcyOTc4", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-346872978", "createdAt": "2020-01-22T20:15:35Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozNVrOFgpmEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMDoxNTozNVrOFgpmEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc4MDI0Mw==", "bodyText": "Issue found: Local variable 'url' could be declared final", "url": "https://github.com/dotCMS/core/pull/17779#discussion_r369780243", "createdAt": "2020-01-22T20:15:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+package com.dotmarketing.image.focalpoint;\n+\n+import static org.junit.Assert.assertTrue;\n+import java.io.File;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class FocalPointAPITest {\n+\n+\n+    final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n+    static List<File> testFiles = new ArrayList<>();\n+\n+\n+    static FocalPointAPIImpl fpAPI;\n+\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null), null);\n+    }\n+\n+    /**\n+     * we should read and write the same values when a focal point is set\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_reading_and_writing_from_focalpoint_file() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);\n+\n+            File incomingFile = new File(url.getFile());\n+\n+            String inode = UUIDGenerator.generateUuid();\n+            String fieldVarToTest = \"fileAsset\";\n+\n+\n+            File testFile = new File(\"/tmp/testing/assets/\" + inode + \"/\" + inode.charAt(0) + \"/\" + inode.charAt(1) + \"/\"\n+                            + fieldVarToTest + \"/\" + incomingFile.getName());\n+            testFile.getParentFile().mkdirs();\n+            FileUtils.copyFile(incomingFile, testFile);\n+\n+            assert (testFile.exists());\n+\n+\n+            FocalPoint focalPoint = new FocalPoint(.2f, .3f);\n+\n+\n+            fpAPI.writeFocalPoint(inode, fieldVarToTest, focalPoint);\n+\n+            Optional<FocalPoint> writtenFp = fpAPI.readFocalPoint(inode, fieldVarToTest);\n+            assertTrue(\"Focal points read\", writtenFp.isPresent());\n+            assertTrue(\"Focal points do not match\", focalPoint.equals(writtenFp.get()));\n+\n+\n+\n+        }\n+\n+    }\n+\n+    \n+    /**\n+     * we should return an empty Optional if there is no focal point\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_when_no_focal_point() throws Exception {\n+\n+        for (String ext : extensions) {\n+            URL url = FocalPointAPITest.class.getResource(\"/images/test.\" + ext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjcwMzYy", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-347670362", "createdAt": "2020-01-23T23:13:41Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTMyMzAz", "url": "https://github.com/dotCMS/core/pull/17779#pullrequestreview-348132303", "createdAt": "2020-01-24T18:12:14Z", "commit": {"oid": "2effc38fa1ebcbb16fe2a6d3418d49ad581e36b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1437, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}