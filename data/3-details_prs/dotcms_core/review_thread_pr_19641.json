{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjU5OTUy", "number": 19641, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo1NDoyOFrOFF2HMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNjoxMToxOVrOFetokw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjczNzc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/curl-test/ContentTypeResourceTests.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo1NDoyOFrOIGjqLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDozOTo1NlrOIHkYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0NjYwNQ==", "bodyText": "please add a description for each test case to know what scenarios are being testing in case of failure", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r543746605", "createdAt": "2020-12-15T22:54:28Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/curl-test/ContentTypeResourceTests.json", "diffHunk": "@@ -0,0 +1,306 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNzA3NQ==", "bodyText": "Description added in json description fields.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544807075", "createdAt": "2020-12-17T04:39:56Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/curl-test/ContentTypeResourceTests.json", "diffHunk": "@@ -0,0 +1,306 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0NjYwNQ=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc0NjczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo1Njo0M1rOIGjvCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDozOTozNVrOIHkYMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0Nzg0OA==", "bodyText": "is it worth to log the exception here?", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r543747848", "createdAt": "2020-12-15T22:56:43Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -395,31 +397,67 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     \tretType = new ImplClassContentTypeTransformer(retType).from();\n     }\n \n-    // set up default fields\n-    if (oldContentType == null) {\n-    \tList<Field> fields = new ArrayList<Field>(saveType.fields());\n-\n-        for (Field ff : retType.requiredFields()) {\n-          Optional<Field> optional = fields.stream().filter(x -> ff.variable().equalsIgnoreCase(x.variable())).findFirst();\n-          if (!optional.isPresent()) {\n-            fields.add(ff);\n-          }\n+    final List<Field> fields = new ArrayList<>(saveType.fields());\n+    for (final Field requiredField : retType.requiredFields()) {\n+        Optional<Field> foundField = fields\n+                .stream()\n+                .filter(x -> requiredField.variable().equalsIgnoreCase(x.variable()))\n+                .findFirst();\n+        if (!foundField.isPresent()) {\n+            fields.add(requiredField);\n         }\n+    }\n \n-        FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n-        for (Field f : fields) {\n-          f = FieldBuilder.builder(f).contentTypeId(retType.id()).build();\n-          try {\n-            fapi.save(f, APILocator.systemUser());\n-          } catch (DotSecurityException e) {\n-            throw new DotStateException(e);\n-          }\n+    final FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n+    // set up default fields\n+    for (Field field : fields) {\n+        final List<FieldVariable> fieldVariables = field.fieldVariables();\n+\n+        if (oldContentType == null) {\n+            field = FieldBuilder.builder(field).contentTypeId(retType.id()).build();\n+            try {\n+                field = fapi.save(field, APILocator.systemUser());\n+            } catch (DotSecurityException e) {\n+                throw new DotStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjk2Mg==", "bodyText": "Exception logged.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544806962", "createdAt": "2020-12-17T04:39:35Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -395,31 +397,67 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     \tretType = new ImplClassContentTypeTransformer(retType).from();\n     }\n \n-    // set up default fields\n-    if (oldContentType == null) {\n-    \tList<Field> fields = new ArrayList<Field>(saveType.fields());\n-\n-        for (Field ff : retType.requiredFields()) {\n-          Optional<Field> optional = fields.stream().filter(x -> ff.variable().equalsIgnoreCase(x.variable())).findFirst();\n-          if (!optional.isPresent()) {\n-            fields.add(ff);\n-          }\n+    final List<Field> fields = new ArrayList<>(saveType.fields());\n+    for (final Field requiredField : retType.requiredFields()) {\n+        Optional<Field> foundField = fields\n+                .stream()\n+                .filter(x -> requiredField.variable().equalsIgnoreCase(x.variable()))\n+                .findFirst();\n+        if (!foundField.isPresent()) {\n+            fields.add(requiredField);\n         }\n+    }\n \n-        FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n-        for (Field f : fields) {\n-          f = FieldBuilder.builder(f).contentTypeId(retType.id()).build();\n-          try {\n-            fapi.save(f, APILocator.systemUser());\n-          } catch (DotSecurityException e) {\n-            throw new DotStateException(e);\n-          }\n+    final FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n+    // set up default fields\n+    for (Field field : fields) {\n+        final List<FieldVariable> fieldVariables = field.fieldVariables();\n+\n+        if (oldContentType == null) {\n+            field = FieldBuilder.builder(field).contentTypeId(retType.id()).build();\n+            try {\n+                field = fapi.save(field, APILocator.systemUser());\n+            } catch (DotSecurityException e) {\n+                throw new DotStateException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0Nzg0OA=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjc1MzY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjo1ODo1MVrOIGjzCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDozOToxN1rOIHkX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODg3NA==", "bodyText": "I would add some ITs to this logic, it can be at factory or api level", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r543748874", "createdAt": "2020-12-15T22:58:51Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -323,10 +325,9 @@ private ContentType dbByVar(String var) throws DotDataException {\n   }\n \n   private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataException {\n-\n-\n-    ContentTypeBuilder builder =\n-        ContentTypeBuilder.builder(saveType).modDate(DateUtils.round(new Date(), Calendar.SECOND));\n+    final ContentTypeBuilder builder = ContentTypeBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDUxNDk0Nw==", "bodyText": "@nollymar This is already tested in the postman ContentTypeResourceTests.json test.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544514947", "createdAt": "2020-12-16T18:10:47Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -323,10 +325,9 @@ private ContentType dbByVar(String var) throws DotDataException {\n   }\n \n   private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataException {\n-\n-\n-    ContentTypeBuilder builder =\n-        ContentTypeBuilder.builder(saveType).modDate(DateUtils.round(new Date(), Calendar.SECOND));\n+    final ContentTypeBuilder builder = ContentTypeBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODg3NA=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYzMTMzMQ==", "bodyText": "It is ok to have the curl test, but they aren't meant to replace integration tests, especially when we have heavy logic in the API or Factory class", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544631331", "createdAt": "2020-12-16T21:21:10Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -323,10 +325,9 @@ private ContentType dbByVar(String var) throws DotDataException {\n   }\n \n   private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataException {\n-\n-\n-    ContentTypeBuilder builder =\n-        ContentTypeBuilder.builder(saveType).modDate(DateUtils.round(new Date(), Calendar.SECOND));\n+    final ContentTypeBuilder builder = ContentTypeBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODg3NA=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNjg4NQ==", "bodyText": "IT created.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544806885", "createdAt": "2020-12-17T04:39:17Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -323,10 +325,9 @@ private ContentType dbByVar(String var) throws DotDataException {\n   }\n \n   private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataException {\n-\n-\n-    ContentTypeBuilder builder =\n-        ContentTypeBuilder.builder(saveType).modDate(DateUtils.round(new Date(), Calendar.SECOND));\n+    final ContentTypeBuilder builder = ContentTypeBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODg3NA=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDgxMzMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDo1NToxMFrOIHJVkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0MDoxMVrOIHkY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MzkyMw==", "bodyText": "It is worth a test over here", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544363923", "createdAt": "2020-12-16T14:55:10Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "diffHunk": "@@ -639,6 +638,18 @@ public void delete(final Field field, final User user) throws DotDataException,\n \n   }\n \n+    /**\n+     * Given a field load and return its variables.\n+     *\n+     * @param field field variables belong to\n+     * @return list of variables\n+     * @throws DotDataException when SQL error happens\n+     */\n+    @Override\n+    public List<FieldVariable> loadVariables(final Field field) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNzEyOQ==", "bodyText": "Unit test added.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r544807129", "createdAt": "2020-12-17T04:40:11Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "diffHunk": "@@ -639,6 +638,18 @@ public void delete(final Field field, final User user) throws DotDataException,\n \n   }\n \n+    /**\n+     * Given a field load and return its variables.\n+     *\n+     * @param field field variables belong to\n+     * @return list of variables\n+     * @throws DotDataException when SQL error happens\n+     */\n+    @Override\n+    public List<FieldVariable> loadVariables(final Field field) throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM2MzkyMw=="}, "originalCommit": {"oid": "97bb6375a414586697ea93da98477b96f6bfd79c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTk0MzE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeFactoryImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDowNDowOVrOIH3GFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDoyMTo1MFrOIIHTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExMzYyMw==", "bodyText": "Doc Test\n/**\n* Method to test: include this in case the method to test does not belong to the class this test-class is testing \n* Given Scenario: Scenario under test\n* ExpectedResult: Expected result that the assertion is checking against\n*\n*/", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r545113623", "createdAt": "2020-12-17T14:04:09Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeFactoryImplTest.java", "diffHunk": "@@ -189,6 +196,31 @@ public void testAddingContentTypes() throws Exception {\n \t\tassertThat(\"contenttypes are added\", count == count2 - runs);\n \t}\n \n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4cf7ab65f2197fb48fc2be0876a4c4d9c1662a2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM3OTI0MQ==", "bodyText": "Added.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r545379241", "createdAt": "2020-12-17T20:21:50Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeFactoryImplTest.java", "diffHunk": "@@ -189,6 +196,31 @@ public void testAddingContentTypes() throws Exception {\n \t\tassertThat(\"contenttypes are added\", count == count2 - runs);\n \t}\n \n+\t@Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExMzYyMw=="}, "originalCommit": {"oid": "d4cf7ab65f2197fb48fc2be0876a4c4d9c1662a2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3NzQ4NDg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNjowOTo0NVrOIr9Pww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQyMTozMTo1NVrOIs4QWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjk2MzEzOQ==", "bodyText": "I am wondering if this code can not be move to the ContentTypeAPI after dbSaveUpdate, it woud be desire to avoid API call into a Factory objects.\nIf there is not possible, would be ok", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r582963139", "createdAt": "2021-02-25T16:09:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -397,31 +398,68 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     \tretType = new ImplClassContentTypeTransformer(retType).from();\n     }\n \n-    // set up default fields\n-    if (oldContentType == null) {\n-    \tList<Field> fields = new ArrayList<Field>(saveType.fields());\n-\n-        for (Field ff : retType.requiredFields()) {\n-          Optional<Field> optional = fields.stream().filter(x -> ff.variable().equalsIgnoreCase(x.variable())).findFirst();\n-          if (!optional.isPresent()) {\n-            fields.add(ff);\n-          }\n+    final List<Field> fields = new ArrayList<>(saveType.fields());\n+    for (final Field requiredField : retType.requiredFields()) {\n+        Optional<Field> foundField = fields\n+                .stream()\n+                .filter(x -> requiredField.variable().equalsIgnoreCase(x.variable()))\n+                .findFirst();\n+        if (!foundField.isPresent()) {\n+            fields.add(requiredField);\n         }\n+    }\n \n-        FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n-        for (Field f : fields) {\n-          f = FieldBuilder.builder(f).contentTypeId(retType.id()).build();\n-          try {\n-            fapi.save(f, APILocator.systemUser());\n-          } catch (DotSecurityException e) {\n-            throw new DotStateException(e);\n-          }\n+    final FieldAPI fapi = APILocator.getContentTypeFieldAPI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a0dac0757b0a413f1a424700a0ce896d41c67f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzkyOTk0Nw==", "bodyText": "@jdotcms that call to FieldAPI was already there. Probably I formatted the code and that's why it looks like I added it.\nThe main change I've introduced is the saveFieldVariables() method.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r583929947", "createdAt": "2021-02-26T21:31:55Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeFactoryImpl.java", "diffHunk": "@@ -397,31 +398,68 @@ private ContentType dbSaveUpdate(final ContentType saveType) throws DotDataExcep\n     \tretType = new ImplClassContentTypeTransformer(retType).from();\n     }\n \n-    // set up default fields\n-    if (oldContentType == null) {\n-    \tList<Field> fields = new ArrayList<Field>(saveType.fields());\n-\n-        for (Field ff : retType.requiredFields()) {\n-          Optional<Field> optional = fields.stream().filter(x -> ff.variable().equalsIgnoreCase(x.variable())).findFirst();\n-          if (!optional.isPresent()) {\n-            fields.add(ff);\n-          }\n+    final List<Field> fields = new ArrayList<>(saveType.fields());\n+    for (final Field requiredField : retType.requiredFields()) {\n+        Optional<Field> foundField = fields\n+                .stream()\n+                .filter(x -> requiredField.variable().equalsIgnoreCase(x.variable()))\n+                .findFirst();\n+        if (!foundField.isPresent()) {\n+            fields.add(requiredField);\n         }\n+    }\n \n-        FieldAPI fapi = APILocator.getContentTypeFieldAPI();\n-        for (Field f : fields) {\n-          f = FieldBuilder.builder(f).contentTypeId(retType.id()).build();\n-          try {\n-            fapi.save(f, APILocator.systemUser());\n-          } catch (DotSecurityException e) {\n-            throw new DotStateException(e);\n-          }\n+    final FieldAPI fapi = APILocator.getContentTypeFieldAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjk2MzEzOQ=="}, "originalCommit": {"oid": "e0a0dac0757b0a413f1a424700a0ce896d41c67f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3NzQ5MjY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNjoxMToxOVrOIr9Usg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQyMTo0Mjo1N1rOIs4ioQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjk2NDQwMg==", "bodyText": "add CloseDbIfOpened please", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r582964402", "createdAt": "2021-02-25T16:11:19Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "diffHunk": "@@ -639,6 +641,18 @@ public void delete(final Field field, final User user) throws DotDataException,\n \n   }\n \n+    /**\n+     * Given a field load and return its variables.\n+     *\n+     * @param field field variables belong to\n+     * @return list of variables\n+     * @throws DotDataException when SQL error happens\n+     */\n+    @Override\n+    public List<FieldVariable> loadVariables(final Field field) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0a0dac0757b0a413f1a424700a0ce896d41c67f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzkzNDYyNQ==", "bodyText": "Done.", "url": "https://github.com/dotCMS/core/pull/19641#discussion_r583934625", "createdAt": "2021-02-26T21:42:57Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldAPIImpl.java", "diffHunk": "@@ -639,6 +641,18 @@ public void delete(final Field field, final User user) throws DotDataException,\n \n   }\n \n+    /**\n+     * Given a field load and return its variables.\n+     *\n+     * @param field field variables belong to\n+     * @return list of variables\n+     * @throws DotDataException when SQL error happens\n+     */\n+    @Override\n+    public List<FieldVariable> loadVariables(final Field field) throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjk2NDQwMg=="}, "originalCommit": {"oid": "e0a0dac0757b0a413f1a424700a0ce896d41c67f"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1718, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}