{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzA1MzEx", "number": 19144, "title": "#19143 Implement render field at page level. Postman test", "bodyText": "", "createdAt": "2020-08-24T18:58:49Z", "url": "https://github.com/dotCMS/core/pull/19144", "merged": true, "mergeCommit": {"oid": "32fc65c87aad974f8c5e527301ea71c444b02326"}, "closed": true, "closedAt": "2020-08-25T19:11:49Z", "author": {"login": "dsilvam"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCHVzXAH2gAyNDcyNzA1MzExOjM3NTk1NDYyN2I3MjQ3OGE5YWE2ZmY2OWM3NGQ3MGQ1ZjUwYTZlNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCcGehAFqTQ3NDc3NDA3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "375954627b72478a9aa6ff69c74d70d5f50a6e5c", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/375954627b72478a9aa6ff69c74d70d5f50a6e5c", "committedDate": "2020-08-24T18:58:14Z", "message": "#19143 Implement render field at page level. Postman test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95620bdb0f5836ea5188ceb5bc93604e70d19f97", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/95620bdb0f5836ea5188ceb5bc93604e70d19f97", "committedDate": "2020-08-25T15:17:15Z", "message": "#19143 fix postman test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTkyNDY2", "url": "https://github.com/dotCMS/core/pull/19144#pullrequestreview-474592466", "createdAt": "2020-08-25T15:22:59Z", "commit": {"oid": "95620bdb0f5836ea5188ceb5bc93604e70d19f97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTk4NDM4", "url": "https://github.com/dotCMS/core/pull/19144#pullrequestreview-474598438", "createdAt": "2020-08-25T15:28:56Z", "commit": {"oid": "95620bdb0f5836ea5188ceb5bc93604e70d19f97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToyODo1N1rOHGdoCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNToyODo1N1rOHGdoCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzODg5MQ==", "bodyText": "here you can use this better\n\n  \n    \n      core/dotCMS/src/main/java/com/dotcms/rest/api/v1/page/PageResource.java\n    \n    \n         Line 464\n      in\n      bca720b\n    \n    \n    \n    \n\n        \n          \n           final String html = this.htmlPageAssetRenderedAPI.getPageHtml(", "url": "https://github.com/dotCMS/core/pull/19144#discussion_r476538891", "createdAt": "2020-08-25T15:28:57Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageRenderDataFetcher.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotcms.rendering.velocity.servlet.VelocityModeHandler;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.ContainerRaw;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.ContainerRenderedBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.page.JsonMapper;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.VelocityUtil;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import java.io.CharArrayReader;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.velocity.context.Context;\n+\n+/**\n+ * This DataFetcher returns a {@link String} containing the rendered HTML code of the requested page\n+ * requested {@link HTMLPageAsset}.\n+ */\n+public class PageRenderDataFetcher implements DataFetcher<String> {\n+    @Override\n+    public String get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+            final HttpServletResponse response = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletResponse();\n+\n+            final Contentlet contentlet = environment.getSource();\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            final HTMLPageAsset pageAsset = APILocator.getHTMLPageAssetAPI()\n+                    .fromContentlet(contentlet);\n+\n+            final Host host = WebAPILocator.getHostWebAPI().getCurrentHost(request, user);\n+\n+            return VelocityModeHandler.modeHandler(pageAsset, mode, request, response, host).eval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95620bdb0f5836ea5188ceb5bc93604e70d19f97"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107512b993f430ddea316b543b3bedc66f7d5bd3", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/107512b993f430ddea316b543b3bedc66f7d5bd3", "committedDate": "2020-08-25T16:41:21Z", "message": "#19143 apply code-review. Store args in context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NjY4NDU5", "url": "https://github.com/dotCMS/core/pull/19144#pullrequestreview-474668459", "createdAt": "2020-08-25T16:48:57Z", "commit": {"oid": "107512b993f430ddea316b543b3bedc66f7d5bd3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo0ODo1N1rOHGg5Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo0ODo1N1rOHGg5Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MjQ3NA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19144#discussion_r476592474", "createdAt": "2020-08-25T16:48:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageRenderDataFetcher.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This DataFetcher returns a {@link String} containing the rendered HTML code of the requested page\n+ * requested {@link HTMLPageAsset}.\n+ */\n+public class PageRenderDataFetcher implements DataFetcher<String> {\n+    @Override\n+    public String get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final DotGraphQLContext context = environment.getContext();\n+            final User user = context.getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+            final HttpServletResponse response = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletResponse();\n+\n+            final String pageModeAsString = (String) context.getParam(\"pageMode\");\n+            final String url = (String) context.getParam(\"url\");\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            return APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(pageContext, request,\n+                    response);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107512b993f430ddea316b543b3bedc66f7d5bd3"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0Nzc0MDcy", "url": "https://github.com/dotCMS/core/pull/19144#pullrequestreview-474774072", "createdAt": "2020-08-25T19:09:30Z", "commit": {"oid": "107512b993f430ddea316b543b3bedc66f7d5bd3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 767, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}