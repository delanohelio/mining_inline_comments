{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTUyMzQ3", "number": 17906, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoxMToyOFrODakXBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoyMVrODal2ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTg1Mjg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoxMToyOFrOFhmAwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjowMjo1MlrOFiIGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDExMw==", "bodyText": "I think we should use the contentlet.isHost() method here rather than recreating it", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370770113", "createdAt": "2020-01-24T18:11:28Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1406,6 +1406,7 @@ private boolean isFolder(final Permissionable permissionable) {\n \tprivate boolean isHost(final Permissionable permissionable) {\r\n \r\n \t\treturn permissionable instanceof Host ||\r\n+\t\t\t\t(permissionable instanceof Contentlet && Host.class.getSimpleName().equals(((Contentlet) permissionable).getContentType().name())) ||\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7bff616de46bb60b222be89e66941d0a83f1218"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyODY2MQ==", "bodyText": "done 0eabafd", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r371328661", "createdAt": "2020-01-27T16:02:52Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -1406,6 +1406,7 @@ private boolean isFolder(final Permissionable permissionable) {\n \tprivate boolean isHost(final Permissionable permissionable) {\r\n \r\n \t\treturn permissionable instanceof Host ||\r\n+\t\t\t\t(permissionable instanceof Contentlet && Host.class.getSimpleName().equals(((Contentlet) permissionable).getContentType().name())) ||\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MDExMw=="}, "originalCommit": {"oid": "d7bff616de46bb60b222be89e66941d0a83f1218"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA5NzAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoxOFrOFhoZfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoxOFrOFhoZfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIxNQ==", "bodyText": "Issue found: Avoid empty catch blocks", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809215", "createdAt": "2020-01-24T19:40:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.dotcms.enterprise.rules;\n+\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.RuleDataGen;\n+import com.dotmarketing.portlets.rules.model.Rule;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Integration test of {@link RulesAPIImpl}\n+ */\n+public class RulesAPIImplIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user with right permission try to save a new rule\n+     * Should: Save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveNewRule() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).next();\n+\n+        this.addPermission(role, host, true);\n+        APILocator.getRulesAPI().saveRule(rule, user, false);\n+\n+        final List<Rule> rules = APILocator.getRulesAPI().getAllRulesByParent(host, APILocator.systemUser(), true);\n+        assertEquals(1, rules.size());\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user without permission try to save a new rule\n+     * Should: Not save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldNotSaveNewRule() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).next();\n+\n+        this.addPermission(role, host, false);\n+\n+        try {\n+            APILocator.getRulesAPI().saveRule(rule, user, false);\n+            throw new AssertionError(\"DotSecurityException expected\");\n+        } catch(DotSecurityException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eabafde4729f91ac99fece796c7d50cbaba5f40"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA5NzE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoyMFrOFhoZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoyMFrOFhoZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTIzMA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809230", "createdAt": "2020-01-24T19:40:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package com.dotcms.enterprise.rules;\n+\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.rules.RuleDataGen;\n+import com.dotmarketing.portlets.rules.model.Rule;\n+import com.liferay.portal.model.User;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Integration test of {@link RulesAPIImpl}\n+ */\n+public class RulesAPIImplIntegrationTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eabafde4729f91ac99fece796c7d50cbaba5f40"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA5NzIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/rules/RuleDataGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoyMVrOFhoZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTo0MDoyMVrOFhoZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwOTI0MQ==", "bodyText": "Issue found: Field host has the same name as a method", "url": "https://github.com/dotCMS/core/pull/17906#discussion_r370809241", "createdAt": "2020-01-24T19:40:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/rules/RuleDataGen.java", "diffHunk": "@@ -30,6 +30,7 @@\n \n     private Rule.FireOn fireOn = Rule.FireOn.EVERY_PAGE;\n     private String name = \"defaultName\";\n+    private Host host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eabafde4729f91ac99fece796c7d50cbaba5f40"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2512, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}