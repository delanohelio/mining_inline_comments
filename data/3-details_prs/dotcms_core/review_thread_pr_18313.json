{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDI0NTA0", "number": 18313, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTowNVrODyRUTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMlrODz9D-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM5MTE2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTowNVrOGGONfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTowNVrOGGONfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NzQ3MQ==", "bodyText": "We can add an assert checking that the content is actually locked", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409177471", "createdAt": "2020-04-15T22:45:05Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +333,94 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM5MjUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTo0MVrOGGOOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTo0MVrOGGOOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NzY4Mg==", "bodyText": "same as previous comment", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409177682", "createdAt": "2020-04-15T22:45:41Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +333,94 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: The contentlet's owner without permission to EDIT try to lock the contebtlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test()\n+    public void whenOwnerTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n+                 .next();\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, user, false);\n+        esContentletAPI.lock(contentletSaved, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQwNjEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1NlrOGGOWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1NlrOGGOWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3OTY5OQ==", "bodyText": "does this apply only for WRITE level or any other also?", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409179699", "createdAt": "2020-04-15T22:50:56Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -310,6 +310,13 @@ public boolean doesUserHavePermission(final Permissionable permissionable, int p\n \r\n \t\tfinal List<Permission> perms =  getPermissions(permissionable, true);\r\n \t\tfinal boolean isContentlet = permissionable instanceof Contentlet;\r\n+\r\n+\t\tif (isContentlet &&\r\n+\t\t\t\tPermissionLevel.WRITE.getType() == permissionType &&\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0Mzc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNFrOGIqk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNFrOGIqk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM1MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739350", "createdAt": "2020-04-20T22:40:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -20,19 +20,18 @@\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n-import com.dotcms.datagen.ContentletDataGen;\n-import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0MzgzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNVrOGIqk3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNVrOGIqk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM1Ng==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739356", "createdAt": "2020-04-20T22:40:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(DataProviderRunner.class)\n+public class CheckinContentActionletTest {\n+\n+    private static class TestCase {\n+        Contentlet contentlet;\n+        User user;\n+\n+        boolean hasWritePermission;\n+\n+        public TestCase(Contentlet contentlet, User user, boolean hasWritePermission) {\n+            this.contentlet = contentlet;\n+            this.user = user;\n+            this.hasWritePermission = hasWritePermission;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] dataProviderSaveLanguage() throws DotSecurityException, DotDataException {\n+        final ContentType contentType = new ContentTypeDataGen()\n+                .fields(ImmutableList.of(ImmutableTextField.builder().name(\"Name\").variable(\"name\").build()))\n+                .nextPersisted();\n+\n+        final Contentlet notLockContentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(\"name\", \"testName\")\n+                .nextPersisted();\n+        final User limitedUser = new UserDataGen().next();\n+\n+        final Contentlet lockContentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(\"name\", \"testName\")\n+                .nextPersisted();\n+\n+        final User userWithPermission = createUserWithPermission(lockContentlet);\n+        APILocator.getContentletAPI().lock(lockContentlet, userWithPermission, false);\n+\n+        return new TestCase[]{\n+                new TestCase(notLockContentlet, limitedUser, false),\n+                new TestCase(lockContentlet, limitedUser, false),\n+                new TestCase(notLockContentlet, userWithPermission, true)\n+        };\n+    }\n+\n+    private static User createUserWithPermission(final Contentlet lockContentlet) throws DotDataException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User userWithPermission = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+        addWritePermissionToContentlet(role, lockContentlet);\n+        return userWithPermission;\n+    }\n+\n+    private static void addWritePermissionToContentlet(final Role role, final Contentlet contentlet) throws DotDataException {\n+        final Permission permission = getPermission(role, contentlet, PermissionLevel.EDIT.getType());\n+\n+        try {\n+            APILocator.getPermissionAPI().save(permission, contentlet, APILocator.systemUser(), false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0Mzg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNlrOGIqk4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNlrOGIqk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM2MA==", "bodyText": "Issue found: Parameter 'user' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739360", "createdAt": "2020-04-20T22:40:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(DataProviderRunner.class)\n+public class CheckinContentActionletTest {\n+\n+    private static class TestCase {\n+        Contentlet contentlet;\n+        User user;\n+\n+        boolean hasWritePermission;\n+\n+        public TestCase(Contentlet contentlet, User user, boolean hasWritePermission) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0Mzg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxN1rOGIqk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxN1rOGIqk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM2NA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739364", "createdAt": "2020-04-20T22:40:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +332,115 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0MzkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOFrOGIqk6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOFrOGIqk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM3MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739370", "createdAt": "2020-04-20T22:40:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -20,19 +20,18 @@\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n-import com.dotcms.datagen.ContentletDataGen;\n-import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.*;\n import com.dotcms.util.CollectionsUtils;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n-import com.dotmarketing.business.CacheLocator;\n-import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0Mzk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOVrOGIqk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOVrOGIqk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM4MQ==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739381", "createdAt": "2020-04-20T22:40:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0NDAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMFrOGIqk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMFrOGIqk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM4Nw==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739387", "createdAt": "2020-04-20T22:40:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +332,115 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);\n+\n+        checkLock(user, contentletSaved);\n+    }\n+\n+    private void checkLock(final User user, final Contentlet contentletSaved) throws DotDataException {\n+        final ContentletVersionInfo info = APILocator.getVersionableAPI().\n+                getContentletVersionInfo(contentletSaved.getIdentifier(), contentletSaved.getLanguageId());\n+\n+        assertNotNull(info.getLockedBy());\n+        assertNotNull(info.getLockedOn());\n+        assertEquals(user.getUserId(), info.getLockedBy());\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: The contentlet's owner without permission to EDIT try to lock the contebtlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test()\n+    public void whenOwnerTryToLockShouldWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0NDA1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMVrOGIqk_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMVrOGIqk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM5MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.contenttype.model.field'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739390", "createdAt": "2020-04-20T22:40:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA0NDEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMlrOGIqlBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMlrOGIqlBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM5Nw==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739397", "createdAt": "2020-04-20T22:40:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}