{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDEyNjIy", "number": 18287, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNDowMlrODwKwRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNlrODyJADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM0NDM3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNDowMlrOGDBNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzowMTo0NlrOGDH9zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODc1OQ==", "bodyText": "Annotate with @VisibleForTesting and add the correct javadoc with @param and @throws", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405818759", "createdAt": "2020-04-08T21:14:02Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {\n         try {\n-            return jsonMapper.writeValueAsString(object);\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return jsonMapper.readValue(bytes, AppSecrets.class);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return\n+     */\n+    char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyOTQyMg==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405929422", "createdAt": "2020-04-09T03:01:46Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {\n         try {\n-            return jsonMapper.writeValueAsString(object);\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return jsonMapper.readValue(bytes, AppSecrets.class);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return\n+     */\n+    char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODc1OQ=="}, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM1NjUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNzo0M1rOGDBVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxNzo0M1rOGDBVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMDY5Mw==", "bodyText": "all the tests here can be implemented as tests cases in a data provider to make the code cleaner", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405820693", "createdAt": "2020-04-08T21:17:43Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +334,79 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @Test\n+    public void Test_BytesToChars_No_Middle_String_Conversion() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM3MjM1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMjo0NlrOGDBerQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzowMTozNlrOGDH9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzE0OQ==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405823149", "createdAt": "2020-04-08T21:22:46Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyOTM1Mg==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405929352", "createdAt": "2020-04-09T03:01:36Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+    AppSecrets readJson(final char[] chars) throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzE0OQ=="}, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM3MzM3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMzowNlrOGDBfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMzowMToyN1rOGDH9Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzMxNA==", "bodyText": "Annotate with @VisibleForTesting", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405823314", "createdAt": "2020-04-08T21:23:06Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkyOTMxNA==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r405929314", "createdAt": "2020-04-09T03:01:27Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -69,22 +77,55 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private AppSecrets readJson(final char[] chars) throws DotDataException {\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMzMxNA=="}, "originalCommit": {"oid": "161372d05e8ddf860586be6089cb63c1ea843076"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTAxMjIyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMTozM1rOGDahEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyNjoxNVrOGDgJkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzM2MQ==", "bodyText": "I am not sure if the methods 'bytesToCharArrayUTF' and 'charsToBytesUTF' should be test directly", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406233361", "createdAt": "2020-04-09T14:11:33Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTI0Mg==", "bodyText": "and what do you suggest then @freddyucv ?", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406251242", "createdAt": "2020-04-09T14:36:26Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzM2MQ=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODcxNQ==", "bodyText": "test just the public methods", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406318715", "createdAt": "2020-04-09T16:15:00Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzM2MQ=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNTY1MQ==", "bodyText": "I prefer to keep these tests, having more tests in our suite is not a bad thing", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406325651", "createdAt": "2020-04-09T16:26:15Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzM2MQ=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTAxNDQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMjowM1rOGDaijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo1OTo1MFrOGGAsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzc0Mg==", "bodyText": "doc?", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406233742", "createdAt": "2020-04-09T14:12:03Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1Nzk2NQ==", "bodyText": "The name is pretty self-explanatory.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406257965", "createdAt": "2020-04-09T14:45:40Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzc0Mg=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMDE2NA==", "bodyText": "we usually java doc tests like this\n/* \nGiven scenario:\nExpected result: \n*/\n\nIn this case I don't understand what is the expected result from the name", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406320164", "createdAt": "2020-04-09T16:17:27Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzc0Mg=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NTkwOA==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408955908", "createdAt": "2020-04-15T15:59:50Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +339,84 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    \n+\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase) throws IOException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for(int i=  testCase.fromCode; i<= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class,()->  String.format(\" UTF Charset code from `%d` to `%d`  %s `%s` \",testCase.fromCode, testCase.toCode, testCase.description,input));\n+        final char [] chars = impl.bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMzc0Mg=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA3NTczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppSecrets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyNjowMFrOGDbJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNTo1MlrOGDdwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MzY3MQ==", "bodyText": "Maybe a test for the destroy, to check that is actually being destroyed?", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406243671", "createdAt": "2020-04-09T14:26:00Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppSecrets.java", "diffHunk": "@@ -30,6 +30,13 @@ public String getKey() {\n         return secrets;\n     }\n \n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NjUwMQ==", "bodyText": "done.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r406286501", "createdAt": "2020-04-09T15:25:52Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppSecrets.java", "diffHunk": "@@ -30,6 +30,13 @@ public String getKey() {\n         return secrets;\n     }\n \n+    public void destroy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MzY3MQ=="}, "originalCommit": {"oid": "b9c38d86cb6d0da2889653ae9fafc4b3a0a65d80"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowM1rOGGA3JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowM1rOGGA3JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc1Nw==", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'reader': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958757", "createdAt": "2020-04-15T16:04:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNFrOGGA3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNFrOGGA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc3Nw==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958777", "createdAt": "2020-04-15T16:04:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNlrOGGA3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowNlrOGGA3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODc5MQ==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958791", "createdAt": "2020-04-15T16:04:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    /**\n+     * Tests the two internal methods used to transform a text stored as a array of chars in UTF-8\n+     * convert those into a byte array and back.\n+     * Given Scenario: a set of char codes representing a UTF-8 range then the set is turned into bytes and back\n+     * Expected Result: The original set of chars is restored after the byte array\n+     * @param testCase\n+     * @throws IOException\n+     */\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase)\n+            throws IOException {\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = testCase.fromCode; i <= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class, () -> String\n+                .format(\" UTF Charset code from `%d` to `%d`  %s `%s` \", testCase.fromCode,\n+                        testCase.toCode, testCase.description, input));\n+        final char[] chars = bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte[] bytes = charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     *\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    static class UTFCharsRangeTestCase {\n+\n+        final int fromCode;\n+        final int toCode;\n+        final String description;\n+\n+        UTFCharsRangeTestCase(final int fromCode, final int toCode, final String description) {\n+            this.fromCode = fromCode;\n+            this.toCode = toCode;\n+            this.description = description;\n+        }\n+    }\n+\n+    /**\n+     * This tests the two methods used to serialize a secret converting it into a json stored as chars\n+     * then and putting it back together as an object.\n+     * Given Scenario: A Random Secret object is constructed with a random alphanumeric string then serialize to bytes and back.\n+     * Expected Result: The resulting object must match the original one passed in.\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {\n+        final AppSecrets secretsIn = new AppSecrets.Builder()\n+                .withKey(\"TheKey\")\n+                .withHiddenSecret(\"hidden1\", \"I'm hidden\")\n+                .withSecret(\"non-hidden1\", \"I'm not hidden\")\n+                .withSecret(\"non-hidden5\", RandomStringUtils.randomAlphanumeric(2337))\n+                .withSecret(\"bool1\", true)\n+                .build();\n+        final char[] toJsonAsChars = toJsonAsChars(secretsIn);\n+        final AppSecrets secretsOut = readJson(toJsonAsChars);\n+        assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+\n+        assertEquals(secretsIn.getSecrets().size(), secretsOut.getSecrets().size());\n+\n+        final Set<Entry<String, Secret>> secretsInEntries = secretsIn.getSecrets().entrySet();\n+        for (final Entry<String, Secret> entryIn : secretsInEntries) {\n+            assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+            final Secret out = secretsOut.getSecrets().get(entryIn.getKey());\n+            assertNotNull(out);\n+            assertTrue(out.equals(entryIn.getValue()));//This does a deepEquals.\n+        }\n+    }\n+\n+    /**\n+     * This basically test the encryption decryption round trip that a text could take.\n+     * Given Scenario:\n+     * Expected Result:\n+     * @throws EncryptorException\n+     */\n+    @Test\n+    public void Test_Encrypt_Decrypt_Text_No_Middle_String() throws EncryptorException {\n+        final Key key = Encryptor.generateKey();\n+        final String input = RandomStringUtils.randomAlphanumeric(1000);\n+        final char[] chars = AppsUtil.encrypt(key, input.toCharArray());\n+        final char[] decrypted = AppsUtil.decrypt(key, new String(chars));\n+        Assert.assertEquals(input, new String(decrypted));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowN1rOGGA3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowN1rOGGA3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgwNw==", "bodyText": "Issue found: Avoid assignments in operands", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958807", "createdAt": "2020-04-15T16:04:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyNzk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowOFrOGGA3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDowOFrOGGA3YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgxNw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958817", "createdAt": "2020-04-15T16:04:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMFrOGGA3bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMFrOGGA3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODgzMQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958831", "createdAt": "2020-04-15T16:04:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {\n+        final CharSequence sequence = java.nio.CharBuffer.wrap(chars);\n+        return ByteStreams\n+                .toByteArray(new CharSequenceInputStream(sequence, StandardCharsets.UTF_8));\n+    }\n+\n+\n+    /**\n+     * Encrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle. It directly takes a char array.\n+     * And doesn't use a string internally.\n+     * @see Encryptor#encrypt(Key, String)\n+     * @param key security Key\n+     * @param chars\n+     * @return encrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] encrypt(final Key key, final char[] chars)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODIwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMVrOGGA3gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMVrOGGA3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg0OA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958848", "createdAt": "2020-04-15T16:04:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMlrOGGA3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxMlrOGGA3lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg2OQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958869", "createdAt": "2020-04-15T16:04:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxM1rOGGA3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxM1rOGGA3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg4Mw==", "bodyText": "Issue found: Use assertEquals(x, y) instead of assertTrue(x.equals(y))", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958883", "createdAt": "2020-04-15T16:04:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsUtilTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.dotcms.security.apps;\n+\n+import static com.dotcms.security.apps.AppsUtil.bytesToCharArrayUTF;\n+import static com.dotcms.security.apps.AppsUtil.charsToBytesUTF;\n+import static com.dotcms.security.apps.AppsUtil.readJson;\n+import static com.dotcms.security.apps.AppsUtil.toJsonAsChars;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import org.apache.commons.lang.RandomStringUtils;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class AppsUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        IntegrationTestInitService.getInstance().init();\n+        SecretsStore.INSTANCE.get().deleteAll();\n+    }\n+\n+    /**\n+     * Data provider to feed byte conversion test.\n+     * @return\n+     * @throws Exception\n+     */\n+    @DataProvider\n+    public static Object[] getTestCases() throws Exception {\n+        return new Object[]{\n+                new UTFCharsRangeTestCase(0, 127, \"C0 Controls and Basic Latin\"),\n+                new UTFCharsRangeTestCase(128, 255, \"C1 Controls and Latin-1 Supplement\"),\n+                new UTFCharsRangeTestCase(256, 383, \"Latin Extended-A\"),\n+                new UTFCharsRangeTestCase(384, 591, \"Latin Extended-B\"),\n+                new UTFCharsRangeTestCase(688, 767, \"Spacing Modifiers\"),\n+                new UTFCharsRangeTestCase(768, 879, \"Diacritical Marks\"),\n+                new UTFCharsRangeTestCase(880, 1023, \"Greek and Coptic\"),\n+                new UTFCharsRangeTestCase(1024, 1279, \"Cyrillic Basic\"),\n+                new UTFCharsRangeTestCase(1280, 1327, \"Cyrillic Supplement\"),\n+                new UTFCharsRangeTestCase(8192, 8303, \"General Punctuation\"),\n+                new UTFCharsRangeTestCase(8352, 8399, \"Currency Symbols\"),\n+                new UTFCharsRangeTestCase(8448, 8527, \"Letterlike Symbols\"),\n+                new UTFCharsRangeTestCase(8592, 8703, \"Arrows\"),\n+                new UTFCharsRangeTestCase(8704, 8959, \"Mathematical Operators\"),\n+                new UTFCharsRangeTestCase(9472, 9599, \"Box Drawings\"),\n+                new UTFCharsRangeTestCase(9600, 9631, \"Block Elements\"),\n+                new UTFCharsRangeTestCase(9632, 9727, \"Geometric Shapes\"),\n+                new UTFCharsRangeTestCase(9728, 9983, \"Miscellaneous Symbols\"),\n+                new UTFCharsRangeTestCase(9984, 10175, \"Dingbats\")\n+        };\n+    }\n+\n+    /**\n+     * Tests the two internal methods used to transform a text stored as a array of chars in UTF-8\n+     * convert those into a byte array and back.\n+     * Given Scenario: a set of char codes representing a UTF-8 range then the set is turned into bytes and back\n+     * Expected Result: The original set of chars is restored after the byte array\n+     * @param testCase\n+     * @throws IOException\n+     */\n+    @Test\n+    @UseDataProvider(\"getTestCases\")\n+    public void Test_BytesToChars_No_Middle_String_Conversion(final UTFCharsRangeTestCase testCase)\n+            throws IOException {\n+        final StringBuilder stringBuilder = new StringBuilder();\n+        for (int i = testCase.fromCode; i <= testCase.toCode; i++) {\n+            final String string = fromCharCode(i);\n+            stringBuilder.append(string);\n+        }\n+        final String input = stringBuilder.toString();\n+        Logger.info(AppsAPIImplTest.class, () -> String\n+                .format(\" UTF Charset code from `%d` to `%d`  %s `%s` \", testCase.fromCode,\n+                        testCase.toCode, testCase.description, input));\n+        final char[] chars = bytesToCharArrayUTF(input.getBytes(StandardCharsets.UTF_8));\n+        final byte[] bytes = charsToBytesUTF(chars);\n+        final String output = new String(bytes, StandardCharsets.UTF_8);\n+        assertEquals(input, output);\n+    }\n+\n+    /**\n+     * https://www.w3schools.com/charsets/ref_html_utf8.asp\n+     *\n+     * @param codePoints char code see utf char codes.\n+     * @return the utf string representation.\n+     */\n+    private static String fromCharCode(final int... codePoints) {\n+        return new String(codePoints, 0, codePoints.length);\n+    }\n+\n+    static class UTFCharsRangeTestCase {\n+\n+        final int fromCode;\n+        final int toCode;\n+        final String description;\n+\n+        UTFCharsRangeTestCase(final int fromCode, final int toCode, final String description) {\n+            this.fromCode = fromCode;\n+            this.toCode = toCode;\n+            this.description = description;\n+        }\n+    }\n+\n+    /**\n+     * This tests the two methods used to serialize a secret converting it into a json stored as chars\n+     * then and putting it back together as an object.\n+     * Given Scenario: A Random Secret object is constructed with a random alphanumeric string then serialize to bytes and back.\n+     * Expected Result: The resulting object must match the original one passed in.\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {\n+        final AppSecrets secretsIn = new AppSecrets.Builder()\n+                .withKey(\"TheKey\")\n+                .withHiddenSecret(\"hidden1\", \"I'm hidden\")\n+                .withSecret(\"non-hidden1\", \"I'm not hidden\")\n+                .withSecret(\"non-hidden5\", RandomStringUtils.randomAlphanumeric(2337))\n+                .withSecret(\"bool1\", true)\n+                .build();\n+        final char[] toJsonAsChars = toJsonAsChars(secretsIn);\n+        final AppSecrets secretsOut = readJson(toJsonAsChars);\n+        assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+\n+        assertEquals(secretsIn.getSecrets().size(), secretsOut.getSecrets().size());\n+\n+        final Set<Entry<String, Secret>> secretsInEntries = secretsIn.getSecrets().entrySet();\n+        for (final Entry<String, Secret> entryIn : secretsInEntries) {\n+            assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+            final Secret out = secretsOut.getSecrets().get(entryIn.getKey());\n+            assertNotNull(out);\n+            assertTrue(out.equals(entryIn.getValue()));//This does a deepEquals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNFrOGGA3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNFrOGGA3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODg5Ng==", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958896", "createdAt": "2020-04-15T16:04:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/SecretsStoreKeyStoreImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNVrOGGA3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNVrOGGA3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODkxMQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958911", "createdAt": "2020-04-15T16:04:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/SecretsStoreKeyStoreImpl.java", "diffHunk": "@@ -286,26 +285,21 @@ private Key key() {\n     }\n \n     @VisibleForTesting\n-    protected String encrypt(final char[] val) {\n-        return encrypt(new String(val));\n-    }\n-\n-    @VisibleForTesting\n-    protected String encrypt(final String val) {\n-        return Sneaky.sneak(() -> Encryptor.encrypt(key(), val));\n+    protected char[] encrypt(final char[] val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTAyODYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNlrOGGA3xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNDoxNlrOGGA3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1ODkxOQ==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18287#discussion_r408958919", "createdAt": "2020-04-15T16:04:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotcms.security.apps;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotmarketing.exception.DotDataException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.io.ByteStreams;\n+import com.liferay.util.Base64;\n+import com.liferay.util.Encryptor;\n+import com.liferay.util.EncryptorException;\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.security.Key;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.crypto.Cipher;\n+import org.apache.commons.io.input.CharSequenceInputStream;\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+public class AppsUtil {\n+\n+    private static final ObjectMapper mapper = DotObjectMapperProvider.getInstance().getDefaultObjectMapper();\n+\n+    /**\n+     * Given the AppSecrets this will return a char array representing the deserialized json object.\n+     * No strings are created in the transformation process.\n+     * @param object\n+     * @return\n+     * @throws DotDataException\n+     */\n+    static char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n+        try {\n+            final byte [] bytes = mapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * Takes a char array representation of a json secret and generates the domain object.\n+     * No strings are created in the transformation process.\n+     * @param chars\n+     * @return The Secrets domain model.\n+     * @throws DotDataException\n+     */\n+    static AppSecrets readJson(final char[] chars) throws DotDataException {\n+        try {\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return mapper.readValue(bytes, AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    /**\n+     * This method takes a byte array and converts its contents into a char array\n+     * No String middle man is created.\n+     * https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param bytes\n+     * @return char array\n+     */\n+    static char[] bytesToCharArrayUTF(final byte[] bytes) throws IOException {\n+        final List<Integer> integers = new ArrayList<>(bytes.length);\n+        try (final BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new ByteArrayInputStream(bytes), StandardCharsets.UTF_8))) {\n+\n+            int chr;\n+            while ((chr = reader.read()) != -1) {\n+                integers.add(chr);\n+            }\n+        }\n+        return ArrayUtils.toPrimitive(\n+                integers.stream().map(value -> (char) value.intValue()).toArray(Character[]::new));\n+    }\n+\n+    /**\n+     * This method takes a char array and converts its contents into a byte array No String middle\n+     * man is created. https://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n+     * @param chars input\n+     * @return byte array\n+     */\n+    static byte[] charsToBytesUTF(final char[] chars) throws IOException {\n+        final CharSequence sequence = java.nio.CharBuffer.wrap(chars);\n+        return ByteStreams\n+                .toByteArray(new CharSequenceInputStream(sequence, StandardCharsets.UTF_8));\n+    }\n+\n+\n+    /**\n+     * Encrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle. It directly takes a char array.\n+     * And doesn't use a string internally.\n+     * @see Encryptor#encrypt(Key, String)\n+     * @param key security Key\n+     * @param chars\n+     * @return encrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] encrypt(final Key key, final char[] chars)\n+            throws EncryptorException {\n+\n+        try {\n+            final Cipher cipher = Cipher.getInstance(key.getAlgorithm());\n+            cipher.init(Cipher.ENCRYPT_MODE, key);\n+            final byte[] decryptedBytes = charsToBytesUTF(chars);\n+            final byte[] encryptedBytes = cipher.doFinal(decryptedBytes);\n+            final String encryptedString = Base64.encode(encryptedBytes);\n+            return encryptedString.toCharArray();\n+        } catch (Exception e) {\n+            throw new EncryptorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Decrypt variant of the function of the same name located in The Encryptor util class.\n+     * The main difference is that this ones does not use a string in the middle to extract the resulting bytes.\n+     * @see Encryptor#decrypt(Key, String)\n+     * @param key security Key\n+     * @param encryptedString\n+     * @return decrypted text as a char array\n+     * @throws EncryptorException\n+     */\n+    static char[] decrypt(final Key key, final String encryptedString)\n+            throws EncryptorException {\n+\n+        try {\n+            final Cipher cipher = Cipher.getInstance(key.getAlgorithm());\n+            cipher.init(Cipher.DECRYPT_MODE, key);\n+            final byte[] encryptedBytes = Base64.decode(encryptedString);\n+            final byte[] decryptedBytes = cipher.doFinal(encryptedBytes);\n+            return bytesToCharArrayUTF(decryptedBytes);\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454ccd109cfed0d931a28b42ab4caaacb107081e"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2454, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}