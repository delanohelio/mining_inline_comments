{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTQ5MjM1", "number": 17905, "title": "Issue 17899 string interning", "bodyText": "I added the sync/double null check on the singleton as I saw multiple threads getting creating new  INSTANCEs when debugging\n\n\nUsing reflection to instantiate the JsonFactory and then modify the config value.\n\n\nHow I tested\nIn my debugging, I saw (I think) the value change.  I had a copy of the JsonXContent class in my branch and added breakpoints when it was called.  This is the value from the jsonFactory before I set INTERN_FIELD_NAMES\nBefore being set:\n\nAfter being set, when running\nThis is the jsonFactory when running  INTERN_FIELD_NAMES\n\nAdditionally I added a breakpoint on java's String.intern() method and did not see it get hit during elasticsearch use.   Thumbs up I think.", "createdAt": "2020-01-24T17:55:00Z", "url": "https://github.com/dotCMS/core/pull/17905", "merged": true, "mergeCommit": {"oid": "51f8483af45ce491c3406549d56df7c3596b5d2d"}, "closed": true, "closedAt": "2020-04-01T14:34:05Z", "author": {"login": "wezell"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb82XL3gH2gAyMzY2OTQ5MjM1OjQwNGM5OTYwNDQzMGE3Y2VkOWVmNGUzNTRhZDY1ZWViYmY1YjA0MmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTR97IAFqTM4NTMwNDE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "404c99604430a7ced9ef4e354ad65eebbf5b042f", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/404c99604430a7ced9ef4e354ad65eebbf5b042f", "committedDate": "2020-01-22T14:10:35Z", "message": "#17879 allows protocol to be configured"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96952eb7a4304392e0599503f17a8146c628a3b6", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/96952eb7a4304392e0599503f17a8146c628a3b6", "committedDate": "2020-01-22T17:07:01Z", "message": "Merge branch 'master' of https://github.com/dotcms/core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac24ebd6c37a1a9b5602bd77c668e3d393eb3839", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/ac24ebd6c37a1a9b5602bd77c668e3d393eb3839", "committedDate": "2020-01-23T18:11:01Z", "message": "Merge branch 'master' of https://github.com/dotcms/core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbd5d2df06efeff7e6b768ce970a05b39662eebf", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/cbd5d2df06efeff7e6b768ce970a05b39662eebf", "committedDate": "2020-01-23T18:57:21Z", "message": "Merge branch 'master' of https://github.com/dotcms/core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "319963b8b476acffc38f975949559383cd531f9f", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/319963b8b476acffc38f975949559383cd531f9f", "committedDate": "2020-01-23T21:23:03Z", "message": "#17899 elastic performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/656602da53ead103e1cea592f35b9854f4093b0d", "committedDate": "2020-01-24T17:46:30Z", "message": "#17899 prevent string interning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NDgw", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126480", "createdAt": "2020-01-24T18:01:21Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyMVrOFhlwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyMVrOFhlwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAwOQ==", "bodyText": "Issue found: Local variable 'jsonFactoryField' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766009", "createdAt": "2020-01-24T18:01:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NDk3", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126497", "createdAt": "2020-01-24T18:01:23Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyM1rOFhlwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyM1rOFhlwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAxNQ==", "bodyText": "Issue found: Local variable 'x' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766015", "createdAt": "2020-01-24T18:01:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NTA0", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126504", "createdAt": "2020-01-24T18:01:25Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNVrOFhlwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNVrOFhlwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAyNQ==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766025", "createdAt": "2020-01-24T18:01:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);\n+\n+            // set the value\n+            Logger.info(RestHighLevelClientProvider.class, \"disabling String.intern() in Jackson\");\n+            jsonFactory.configure(JsonFactory.Feature.INTERN_FIELD_NAMES, false);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NTEz", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126513", "createdAt": "2020-01-24T18:01:26Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNlrOFhlw1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNlrOFhlw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAzNw==", "bodyText": "Issue found: Avoid variables with short names like x", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766037", "createdAt": "2020-01-24T18:01:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NTI2", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126526", "createdAt": "2020-01-24T18:01:27Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyN1rOFhlw2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyN1rOFhlw2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA0Mg==", "bodyText": "Issue found: Local variable 'jsonFactory' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766042", "createdAt": "2020-01-24T18:01:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTI2NTM1", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-348126535", "createdAt": "2020-01-24T18:01:28Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyOFrOFhlw4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyOFrOFhlw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA1MA==", "bodyText": "Issue found: Avoid unused local variables such as 'x'.", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766050", "createdAt": "2020-01-24T18:01:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjMwOTUy", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-361630952", "createdAt": "2020-02-20T04:49:43Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDg1MzEw", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-385085310", "createdAt": "2020-03-31T20:37:13Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzA0MTg1", "url": "https://github.com/dotCMS/core/pull/17905#pullrequestreview-385304185", "createdAt": "2020-04-01T06:46:40Z", "commit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1331, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}