{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NjcwMDkx", "number": 18317, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozODo1M1rODy7WzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozOFrODzRmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI3ODg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozODo1M1rOGHQu0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozODo1M1rOGHQu0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NzM0NQ==", "bodyText": "are there any tests for these new validations ?", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410267345", "createdAt": "2020-04-17T14:38:53Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "diffHunk": "@@ -96,47 +108,52 @@ public String toString() {\n \n         public final ResourceLink build(final HttpServletRequest request, final User user, final Contentlet contentlet) throws DotDataException, DotSecurityException {\n \n-            if(!(contentlet.getContentType() instanceof FileAssetContentType)){\n+            if(!(contentlet.isFileAsset() || contentlet.isDotAsset())) {\n+\n                 throw new DotStateException(getLocalizedMessageOrDefault(user,\"File-asset-contentlet-type-expected\",\n-                        \"Can only build Resource Links out of content with type `File Asset`.\",getClass())\n+                        \"Can only build Resource Links out of content with type `File Asset` or `DotAsset`.\",getClass())\n                 );\n             }\n \n+            return build(request, user, contentlet, FileAssetAPI.BINARY_FIELD);\n+        }\n+\n+        public final ResourceLink build(final HttpServletRequest request, final User user, final Contentlet contentlet, final String velocityVarName) throws DotDataException, DotSecurityException {\n+\n+            final File binary           = Try.of(()->contentlet.getBinary(velocityVarName)).getOrNull();\n             final Identifier identifier = getIdentifier(contentlet);\n-            if (identifier != null && InodeUtils.isSet(identifier.getInode())){\n+            if (binary==null || identifier == null && UtilMethods.isEmpty(identifier.getInode())){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a0a2850344aa30e310621a233f4657108690a4"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ0NTk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyMjoxM1rOGHSZ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyMjoxM1rOGHSZ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NDc0Ng==", "bodyText": "this code should go to a private method to reuse it, o maybe to a util class", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410294746", "createdAt": "2020-04-17T15:22:13Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -133,56 +145,76 @@ public void test_Html_ResourceLink_Expect_Downloadable_No_Port_Number() throws E\n         final ResourceLinkBuilder resourceLinkBuilder = getResourceLinkBuilder(hostName, path, mimeType, htmlFileName);\n         final ResourceLink link = resourceLinkBuilder.build(request, adminUser, contentlet);\n         assertFalse(link.isDownloadRestricted());\n-        assertEquals(\"http://demo.dotcms.com/application/comments/angular/comments-list.html?language_id=1\",link.getResourceLinkAsString());\n+        assertEquals(\"http://demo.dotcms.com/application/comments/angular/\"+htmlFileName+\"?language_id=1\",link.getResourceLinkAsString());\n \n     }\n \n     @Test\n     public void test_html_ResourceLink_Expect_Downloadable_Secure_Site_Port_Number() throws Exception{\n \n         final String mimeType = \"text/html\";\n-        final String htmlFileName = \"comments-list.html\";\n         final String path = \"/application/comments/angular/\";\n         final String hostName = \"localhost\";\n         final long languageId = 1L;\n         final boolean isSecure = false;\n \n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \"html\");\n+        final String content = \"This is a test temporal file\";\n+        try (final FileWriter fileWriter = new FileWriter(file)) {\n+\n+            fileWriter.write(content);\n+        }\n+\n+        final String htmlFileName = file.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a0a2850344aa30e310621a233f4657108690a4"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzQ1NzgzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyNToxNVrOGHSheA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToyNToxNVrOGHSheA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NjY5Ng==", "bodyText": "I think we are mising a test here, when contentlet.isDotAsset() is true", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410296696", "createdAt": "2020-04-17T15:25:15Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/model/ResourceLink.java", "diffHunk": "@@ -96,47 +108,52 @@ public String toString() {\n \n         public final ResourceLink build(final HttpServletRequest request, final User user, final Contentlet contentlet) throws DotDataException, DotSecurityException {\n \n-            if(!(contentlet.getContentType() instanceof FileAssetContentType)){\n+            if(!(contentlet.isFileAsset() || contentlet.isDotAsset())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a0a2850344aa30e310621a233f4657108690a4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzgzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyN1rOGHvF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyN1rOGHvF5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc3NQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.RelationshipAPI'", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764775", "createdAt": "2020-04-18T22:52:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package com.dotmarketing.portlets.contentlet.model;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.RelationshipAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyOFrOGHvF6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyOFrOGHvF6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc3OA==", "bodyText": "Issue found: The String literal \"/dA/\" appears 4 times in this file; the first occurrence is on line 114", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764778", "createdAt": "2020-04-18T22:52:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package com.dotmarketing.portlets.contentlet.model;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Integration test for the ResourceLink\n+ * @author jsanca\n+ */\n+public class IntegrationResourceLinkTest extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        user      = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    private Tuple2<Field, ContentType> createDotAssetContentType (final Host host, final String accept, final String variable) throws DotSecurityException, DotDataException {\n+\n+        final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        ContentType dotAssetContentType     = contentTypeAPI\n+                .save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(FolderAPI.SYSTEM_FOLDER)\n+                        .host(host.getIdentifier()).name(variable)\n+                        .owner(user.getUserId()).build());\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(accept).fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        dotAssetContentType = contentTypeAPI.save(dotAssetContentType);\n+        binaryField = fieldAPI.save(binaryField, user);\n+        fieldAPI.save(allowFileTypes, user);\n+\n+        return Tuple.of(binaryField, dotAssetContentType);\n+    }\n+\n+    /**\n+     * Method to test:  build\n+     * Given Scenario: Creates a dotAsset with a binary field as a txt and figured out the version path and id path, the user is an admin\n+     * ExpectedResult: paths should have some tokens such as dA, shorty id or inode and the file name, download must be allowed\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_Text_ResourceLink_Expect_Downloadable_No_Port_Number_Dot_Asset() throws Exception{\n+\n+        final Host host = APILocator.systemHost();\n+        final String mimeType = \"text/plain\";\n+        final boolean isSecure = false;\n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \"txt\", \"This is a test temporal file\");\n+        final String htmlFileName = file.getName();\n+        final User adminUser = TestUserUtils.getAdminUser();\n+\n+        final Tuple2<Field, ContentType> fieldDotTextAssetContentType = this.createDotAssetContentType(host,\n+                \"text/*\", \"textDotAsset\" + System.currentTimeMillis());\n+\n+        final Contentlet contentlet = new ContentletDataGen(fieldDotTextAssetContentType._2().variable())\n+                .setProperty(DotAssetContentType.ASSET_FIELD_VAR, file).nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getAttribute(ResourceLink.HOST_REQUEST_ATTRIBUTE)).thenReturn(host.getIdentifier());\n+        when(request.isSecure()).thenReturn(isSecure);\n+        when(request.getServerPort()).thenReturn(80);\n+\n+\n+        final ResourceLinkBuilder resourceLinkBuilder = new ResourceLinkBuilder();\n+        final ResourceLink link = resourceLinkBuilder.build(request, adminUser, contentlet);\n+\n+        assertEquals(mimeType, link.getMimeType());\n+        assertFalse(link.isDownloadRestricted());\n+\n+        assertTrue(link.getIdPath().contains(\"/dA/\") && link.getIdPath().contains(\"/\"+htmlFileName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzg4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyOVrOGHvF7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjoyOVrOGHvF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4MA==", "bodyText": "Issue found: Avoid unused imports such as 'java.io.FileWriter'", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764780", "createdAt": "2020-04-18T22:52:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -10,15 +10,26 @@\n import com.dotcms.contenttype.model.type.FileAssetContentType;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n import com.dotmarketing.portlets.fileassets.business.FileAsset;\n import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n import com.liferay.portal.model.User;\n import com.liferay.util.StringPool;\n import javax.servlet.http.HttpServletRequest;\n+\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n import org.junit.Test;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.FileWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/FileUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMFrOGHvF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMFrOGHvF7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4MQ==", "bodyText": "Issue found: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764781", "createdAt": "2020-04-18T22:52:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/FileUtil.java", "diffHunk": "@@ -47,6 +48,27 @@ public static File createTemporalFile (final String prefix, final String extensi\n \t\treturn File.createTempFile(prefix + System.currentTimeMillis(), UtilMethods.isSet(extension)?extension:\"tmp\");\n \t}\n \n+\t/**\n+\t * Creates a temporal file with unique name, in case you have a small initial content to write, you can include as a third parameter\n+\t * In case you need to write a long string, use another strategy\n+\t * @param prefix String name\n+\t * @param extension String optional extension, if null \"tmp\" will be use\n+\t * @param initialContent String small content to add to the file.\n+\t *\n+\t * @return File\n+\t * @throws IOException\n+\t */\n+\tpublic static File createTemporalFile (final String prefix, final String extension, final String initialContent) throws IOException {\n+\n+\t\tfinal File file = createTemporalFile(prefix, extension);\n+\t\ttry (final FileWriter fileWriter = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMVrOGHvF7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMVrOGHvF7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4Mg==", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Mockito'", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764782", "createdAt": "2020-04-18T22:52:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -10,15 +10,26 @@\n import com.dotcms.contenttype.model.type.FileAssetContentType;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n import com.dotmarketing.portlets.fileassets.business.FileAsset;\n import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n import com.liferay.portal.model.User;\n import com.liferay.util.StringPool;\n import javax.servlet.http.HttpServletRequest;\n+\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n import org.junit.Test;\n+import org.mockito.Mockito;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMlrOGHvF7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozMlrOGHvF7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4Mw==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util.Config'", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764783", "createdAt": "2020-04-18T22:52:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -10,15 +10,26 @@\n import com.dotcms.contenttype.model.type.FileAssetContentType;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Identifier;\n+import com.dotmarketing.business.APILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n import com.dotmarketing.portlets.fileassets.business.FileAsset;\n import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.util.Config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozM1rOGHvF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozM1rOGHvF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4NA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764784", "createdAt": "2020-04-18T22:52:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package com.dotmarketing.portlets.contentlet.model;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Integration test for the ResourceLink\n+ * @author jsanca\n+ */\n+public class IntegrationResourceLinkTest extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNFrOGHvF8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNFrOGHvF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4NQ==", "bodyText": "Issue found: Avoid unused local variables such as 'file'.", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764785", "createdAt": "2020-04-18T22:52:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package com.dotmarketing.portlets.contentlet.model;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Integration test for the ResourceLink\n+ * @author jsanca\n+ */\n+public class IntegrationResourceLinkTest extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        user      = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    private Tuple2<Field, ContentType> createDotAssetContentType (final Host host, final String accept, final String variable) throws DotSecurityException, DotDataException {\n+\n+        final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        ContentType dotAssetContentType     = contentTypeAPI\n+                .save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(FolderAPI.SYSTEM_FOLDER)\n+                        .host(host.getIdentifier()).name(variable)\n+                        .owner(user.getUserId()).build());\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(accept).fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        dotAssetContentType = contentTypeAPI.save(dotAssetContentType);\n+        binaryField = fieldAPI.save(binaryField, user);\n+        fieldAPI.save(allowFileTypes, user);\n+\n+        return Tuple.of(binaryField, dotAssetContentType);\n+    }\n+\n+    /**\n+     * Method to test:  build\n+     * Given Scenario: Creates a dotAsset with a binary field as a txt and figured out the version path and id path, the user is an admin\n+     * ExpectedResult: paths should have some tokens such as dA, shorty id or inode and the file name, download must be allowed\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_Text_ResourceLink_Expect_Downloadable_No_Port_Number_Dot_Asset() throws Exception{\n+\n+        final Host host = APILocator.systemHost();\n+        final String mimeType = \"text/plain\";\n+        final boolean isSecure = false;\n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \"txt\", \"This is a test temporal file\");\n+        final String htmlFileName = file.getName();\n+        final User adminUser = TestUserUtils.getAdminUser();\n+\n+        final Tuple2<Field, ContentType> fieldDotTextAssetContentType = this.createDotAssetContentType(host,\n+                \"text/*\", \"textDotAsset\" + System.currentTimeMillis());\n+\n+        final Contentlet contentlet = new ContentletDataGen(fieldDotTextAssetContentType._2().variable())\n+                .setProperty(DotAssetContentType.ASSET_FIELD_VAR, file).nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getAttribute(ResourceLink.HOST_REQUEST_ATTRIBUTE)).thenReturn(host.getIdentifier());\n+        when(request.isSecure()).thenReturn(isSecure);\n+        when(request.getServerPort()).thenReturn(80);\n+\n+\n+        final ResourceLinkBuilder resourceLinkBuilder = new ResourceLinkBuilder();\n+        final ResourceLink link = resourceLinkBuilder.build(request, adminUser, contentlet);\n+\n+        assertEquals(mimeType, link.getMimeType());\n+        assertFalse(link.isDownloadRestricted());\n+\n+        assertTrue(link.getIdPath().contains(\"/dA/\") && link.getIdPath().contains(\"/\"+htmlFileName)\n+                && link.getIdPath().contains(APILocator.getShortyAPI().shortify(contentlet.getIdentifier())));\n+        assertTrue(link.getVersionPath().contains(\"/dA/\") && link.getVersionPath().contains(\"/\"+htmlFileName)\n+                && link.getVersionPath().contains(APILocator.getShortyAPI().shortify(contentlet.getInode())));\n+    }\n+\n+    private User mockLimitedUser(){\n+        final User adminUser = mock(User.class);\n+        when(adminUser.getUserId()).thenReturn(\"anonymous\");\n+        when(adminUser.getEmailAddress()).thenReturn(\"anonymous@dotcmsfakeemail.org\");\n+        when(adminUser.getFirstName()).thenReturn(\"anonymous user\");\n+        when(adminUser.getLastName()).thenReturn(\"anonymous\");\n+        return adminUser;\n+    }\n+\n+    /**\n+     * Method to test:  build\n+     * Given Scenario: Creates a dotAsset with a binary field as a txt and figured out the version path and id path, the user is an limited\n+     * ExpectedResult: paths should have some tokens such as dA, shorty id or inode and the file name, download must be restricted\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_vtl_ResourceLink_WithLimitedUser_Expect_Downloadable_No_Port_Number() throws Exception{\n+\n+        final Host host = APILocator.systemHost();\n+        final boolean isSecure = false;\n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \".vtl\", \"This is a test temporal file\");\n+        final String htmlFileName = file.getName();\n+\n+        final User limitedUser = mockLimitedUser();\n+\n+        final Tuple2<Field, ContentType> fieldDotTextAssetContentType = this.createDotAssetContentType(host,\n+                \"text/*\", \"textDotAsset\" + System.currentTimeMillis());\n+\n+        final Contentlet contentlet = new ContentletDataGen(fieldDotTextAssetContentType._2().variable())\n+                .setProperty(DotAssetContentType.ASSET_FIELD_VAR, file).nextPersisted();\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getAttribute(ResourceLink.HOST_REQUEST_ATTRIBUTE)).thenReturn(host.getIdentifier());\n+        when(request.isSecure()).thenReturn(isSecure);\n+        when(request.getServerPort()).thenReturn(80);\n+\n+        final ResourceLinkBuilder resourceLinkBuilder = new ResourceLinkBuilder();\n+        final ResourceLink link = resourceLinkBuilder.build(request, limitedUser, contentlet);\n+        assertTrue(link.isDownloadRestricted());\n+        assertTrue(link.getIdPath().contains(\"/dA/\") && link.getIdPath().contains(\"/\"+htmlFileName)\n+                && link.getIdPath().contains(APILocator.getShortyAPI().shortify(contentlet.getIdentifier())));\n+        assertTrue(link.getVersionPath().contains(\"/dA/\") && link.getVersionPath().contains(\"/\"+htmlFileName)\n+                && link.getVersionPath().contains(APILocator.getShortyAPI().shortify(contentlet.getInode())));\n+\n+    }\n+\n+\n+    /**\n+     * Method to test:  build\n+     * Given Scenario: this contentlet does not have any binary and the user is limited\n+     * ExpectedResult: download shoud be restricted and links should be blank\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_newContentlet_withoutBinary_expectEmptyLink() throws Exception{\n+\n+        final Host host = APILocator.systemHost();\n+        final boolean isSecure = false;\n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \"txt\", \"This is a test temporal file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNVrOGHvF9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNVrOGHvF9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4OA==", "bodyText": "Issue found: The String literal \"?language_id=2\" appears 4 times in this file; the first occurrence is on line 229", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764788", "createdAt": "2020-04-18T22:52:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -194,25 +226,31 @@ public void test_vtl_ResourceLink_WithAdminUser_Expect_Downloadable_No_Port_Numb\n         final ResourceLinkBuilder resourceLinkBuilder = getResourceLinkBuilder(hostName, path, mimeType, htmlFileName);\n         final ResourceLink link = resourceLinkBuilder.build(request, adminUser, contentlet);\n         assertFalse(link.isDownloadRestricted());\n-        assertEquals(\"http://demo.dotcms.com/application/comments/angular/widget-code.vtl?language_id=2\",link.getResourceLinkAsString());\n+        assertEquals(\"http://demo.dotcms.com/application/comments/angular/\"+htmlFileName+\"?language_id=2\",link.getResourceLinkAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNlrOGHvF9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozNlrOGHvF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc4OQ==", "bodyText": "Issue found: The String literal \"This is a test temporal file\" appears 6 times in this file; the first occurrence is on line 135", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764789", "createdAt": "2020-04-18T22:52:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -111,17 +127,21 @@ private User mockLimitedUser(){\n     public void test_Html_ResourceLink_Expect_Downloadable_No_Port_Number() throws Exception{\n \n         final String mimeType = \"text/html\";\n-        final String htmlFileName = \"comments-list.html\";\n         final String path = \"/application/comments/angular/\";\n         final String hostName = \"demo.dotcms.com\";\n         final long languageId = 1L;\n         final boolean isSecure = false;\n \n+        final File file = FileUtil.createTemporalFile(\"comments-list\", \"html\", \"This is a test temporal file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzk3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozN1rOGHvF9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozN1rOGHvF9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc5MA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'com.dotcms.contenttype.model.field.Field' due to existing import 'com.dotcms.contenttype.model.field.Field'", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764790", "createdAt": "2020-04-18T22:52:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/model/IntegrationResourceLinkTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+package com.dotmarketing.portlets.contentlet.model;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.business.FieldAPI;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.ResourceLink.ResourceLinkBuilder;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.StringPool;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Integration test for the ResourceLink\n+ * @author jsanca\n+ */\n+public class IntegrationResourceLinkTest extends IntegrationTestBase {\n+\n+    private static User user;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        user      = APILocator.getUserAPI().getSystemUser();\n+    }\n+\n+    private Tuple2<Field, ContentType> createDotAssetContentType (final Host host, final String accept, final String variable) throws DotSecurityException, DotDataException {\n+\n+        final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        ContentType dotAssetContentType     = contentTypeAPI\n+                .save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(FolderAPI.SYSTEM_FOLDER)\n+                        .host(host.getIdentifier()).name(variable)\n+                        .owner(user.getUserId()).build());\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDkyMzk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/FileUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozOFrOGHvF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMjo1MjozOFrOGHvF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc2NDc5MQ==", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'fileWriter': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/18317#discussion_r410764791", "createdAt": "2020-04-18T22:52:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/FileUtil.java", "diffHunk": "@@ -47,6 +48,27 @@ public static File createTemporalFile (final String prefix, final String extensi\n \t\treturn File.createTempFile(prefix + System.currentTimeMillis(), UtilMethods.isSet(extension)?extension:\"tmp\");\n \t}\n \n+\t/**\n+\t * Creates a temporal file with unique name, in case you have a small initial content to write, you can include as a third parameter\n+\t * In case you need to write a long string, use another strategy\n+\t * @param prefix String name\n+\t * @param extension String optional extension, if null \"tmp\" will be use\n+\t * @param initialContent String small content to add to the file.\n+\t *\n+\t * @return File\n+\t * @throws IOException\n+\t */\n+\tpublic static File createTemporalFile (final String prefix, final String extension, final String initialContent) throws IOException {\n+\n+\t\tfinal File file = createTemporalFile(prefix, extension);\n+\t\ttry (final FileWriter fileWriter = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32e70c0411bdf62426996b4488b83f4c78dc829d"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2216, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}