{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTcyNzg5", "number": 18067, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MFrODyRExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0OFrODyRE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MFrOGGN2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MFrOGGN2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUwMA==", "bodyText": "Issue found: Avoid unused imports such as 'com.liferay.portal.model.User'", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171500", "createdAt": "2020-04-15T22:29:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MVrOGGN2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MVrOGGN2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUwNQ==", "bodyText": "Issue found: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171505", "createdAt": "2020-04-15T22:29:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(\"text/plain\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        APILocator.getContentTypeAPI(APILocator.systemUser()).save(dotAssetContentType);\n+        APILocator.getContentTypeFieldAPI().save(binaryField, APILocator.systemUser());\n+        APILocator.getContentTypeFieldAPI().save(allowFileTypes, APILocator.systemUser());\n+\n+        final Optional<BaseTypeToContentTypeStrategy> baseTypeToContentTypeStrategy =\n+                BaseTypeToContentTypeStrategyResolver.getInstance().get(BaseContentType.DOTASSET);\n+\n+        Assert.assertTrue(baseTypeToContentTypeStrategy.isPresent());\n+        MockHeaderRequest request = new MockHeaderRequest(\n+                (\n+                        new MockSessionRequest(new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request()).request())\n+                ).request()\n+        );\n+\n+        request.setHeader(\"Authorization\", \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+        request.setHeader(\"User-Agent\", \"Fake-Agent\");\n+        request.setHeader(\"Host\", \"localhost\");\n+        request.setHeader(\"Origin\", \"localhost\");\n+        request.setAttribute(WebKeys.USER, APILocator.systemUser());\n+\n+        final File file = FileUtil.createTemporalFile(\"test\", \"txt\");\n+        final String content = \"This is a test temporal file\";\n+        try (final FileWriter fileWriter = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MlrOGGN2OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0MlrOGGN2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUxMg==", "bodyText": "Issue found: Avoid unused imports such as 'com.liferay.portal.util.PortalUtil'", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171512", "createdAt": "2020-04-15T22:29:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0M1rOGGN2Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0M1rOGGN2Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUxNQ==", "bodyText": "Issue found: Local variable 'request' could be declared final", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171515", "createdAt": "2020-04-15T22:29:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(\"text/plain\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        APILocator.getContentTypeAPI(APILocator.systemUser()).save(dotAssetContentType);\n+        APILocator.getContentTypeFieldAPI().save(binaryField, APILocator.systemUser());\n+        APILocator.getContentTypeFieldAPI().save(allowFileTypes, APILocator.systemUser());\n+\n+        final Optional<BaseTypeToContentTypeStrategy> baseTypeToContentTypeStrategy =\n+                BaseTypeToContentTypeStrategyResolver.getInstance().get(BaseContentType.DOTASSET);\n+\n+        Assert.assertTrue(baseTypeToContentTypeStrategy.isPresent());\n+        MockHeaderRequest request = new MockHeaderRequest(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTU0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NFrOGGN2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NFrOGGN2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUyNg==", "bodyText": "Issue found: Local variable 'binaryField' could be declared final", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171526", "createdAt": "2020-04-15T22:29:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NVrOGGN2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NVrOGGN2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUzMA==", "bodyText": "Issue found: Unnecessary modifier 'final' on resource specification 'fileWriter': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171530", "createdAt": "2020-04-15T22:29:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(\"text/plain\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        APILocator.getContentTypeAPI(APILocator.systemUser()).save(dotAssetContentType);\n+        APILocator.getContentTypeFieldAPI().save(binaryField, APILocator.systemUser());\n+        APILocator.getContentTypeFieldAPI().save(allowFileTypes, APILocator.systemUser());\n+\n+        final Optional<BaseTypeToContentTypeStrategy> baseTypeToContentTypeStrategy =\n+                BaseTypeToContentTypeStrategyResolver.getInstance().get(BaseContentType.DOTASSET);\n+\n+        Assert.assertTrue(baseTypeToContentTypeStrategy.isPresent());\n+        MockHeaderRequest request = new MockHeaderRequest(\n+                (\n+                        new MockSessionRequest(new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request()).request())\n+                ).request()\n+        );\n+\n+        request.setHeader(\"Authorization\", \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+        request.setHeader(\"User-Agent\", \"Fake-Agent\");\n+        request.setHeader(\"Host\", \"localhost\");\n+        request.setHeader(\"Origin\", \"localhost\");\n+        request.setAttribute(WebKeys.USER, APILocator.systemUser());\n+\n+        final File file = FileUtil.createTemporalFile(\"test\", \"txt\");\n+        final String content = \"This is a test temporal file\";\n+        try (final FileWriter fileWriter = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NVrOGGN2TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NVrOGGN2TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTUzMw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171533", "createdAt": "2020-04-15T22:29:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);\n+        final FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES)\n+                .value(\"text/plain\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(allowFileTypes));\n+\n+        APILocator.getContentTypeAPI(APILocator.systemUser()).save(dotAssetContentType);\n+        APILocator.getContentTypeFieldAPI().save(binaryField, APILocator.systemUser());\n+        APILocator.getContentTypeFieldAPI().save(allowFileTypes, APILocator.systemUser());\n+\n+        final Optional<BaseTypeToContentTypeStrategy> baseTypeToContentTypeStrategy =\n+                BaseTypeToContentTypeStrategyResolver.getInstance().get(BaseContentType.DOTASSET);\n+\n+        Assert.assertTrue(baseTypeToContentTypeStrategy.isPresent());\n+        MockHeaderRequest request = new MockHeaderRequest(\n+                (\n+                        new MockSessionRequest(new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request()).request())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NlrOGGN2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0NlrOGGN2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTU0MA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171540", "createdAt": "2020-04-15T22:29:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0N1rOGGN2Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0N1rOGGN2Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTU0Mw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'com.dotcms.contenttype.model.field.Field' due to existing import 'com.dotcms.contenttype.model.field.Field'", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171543", "createdAt": "2020-04-15T22:29:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/DotAssetBaseTypeToContentTypeStrategyImplTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.dotcms.contenttype.business;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldVariable;\n+import com.dotcms.contenttype.model.field.ImmutableFieldVariable;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.DotAssetContentType;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.rest.api.v1.temp.DotTempFile;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.util.FileUtil;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.PortalUtil;\n+import com.liferay.portal.util.WebKeys;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class DotAssetBaseTypeToContentTypeStrategyImplTest  extends IntegrationTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    /**\n+     * 1) creates a dotAsset content type for text plain\n+     * 2) creates a temporal file asset and gets the id\n+     * 3) creates a map with the contentlet properties (including as a file asset the temporal file id)\n+     * 4) runs the BaseTypeToContentTypeStrategy in order to get the new content type using the temporal file\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_apply_with_temporal_file() throws Exception {\n+\n+        // creates a dotAsset for text files\n+        final String variable = \"testDotAsset\" + System.currentTimeMillis();\n+        final ContentType dotAssetContentType = APILocator.getContentTypeAPI(APILocator.systemUser()).\n+                save(ContentTypeBuilder.builder(DotAssetContentType.class).folder(\n+                FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST).name(variable)\n+                .owner(APILocator.systemUser().getUserId()).build());\n+\n+        final Map<String, Field> fieldMap = dotAssetContentType.fieldMap();\n+        com.dotcms.contenttype.model.field.Field binaryField           = fieldMap.get(DotAssetContentType.ASSET_FIELD_VAR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDM1MTc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/ContentHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0OFrOGGN2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjoyOTo0OFrOGGN2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTU0OQ==", "bodyText": "Issue found: Avoid unused imports such as 'java.util.ArrayList'", "url": "https://github.com/dotCMS/core/pull/18067#discussion_r409171549", "createdAt": "2020-04-15T22:29:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/ContentHelper.java", "diffHunk": "@@ -23,6 +23,8 @@\n \n import javax.servlet.http.HttpServletRequest;\n import java.io.File;\n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b41fe0ecaa20ace60e24b92aa1a5deab45167c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2347, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}