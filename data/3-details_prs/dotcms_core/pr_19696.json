{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MzcxMDE5", "number": 19696, "title": "#19527 - This comes to solve the 10K items count limitation on ES.", "bodyText": "Our index count methods are executed via  ES's SearchRequest which is pretty much limited by the 10K items hard limit restriction. I am replacing the uses of SearchRequest with CountRequest which operates without the  10K items restriction.", "createdAt": "2020-12-11T20:30:32Z", "url": "https://github.com/dotCMS/core/pull/19696", "merged": true, "mergeCommit": {"oid": "a6c65067d3cda3b2f71ee35c284a09b4ebfd43ae"}, "closed": true, "closedAt": "2020-12-17T14:38:05Z", "author": {"login": "fabrizzio-dotCMS"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlN58EgH2gAyNTM3MzcxMDE5OmFlNzQwMjhmZTE2YmU5MDcyMTM0NmQ3MmUxNmY2YTBiNDFjM2ZhODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnEJBCgFqTU1NDYzNjk5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae74028fe16be90721346d72e16f6a0b41c3fa84", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/ae74028fe16be90721346d72e16f6a0b41c3fa84", "committedDate": "2020-12-11T20:24:29Z", "message": "#19527 - This comes to solve the 10K items count limitation on ES."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2032da5fb6063d0439ed48e0cf7d1357bce0efdb", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/2032da5fb6063d0439ed48e0cf7d1357bce0efdb", "committedDate": "2020-12-12T04:24:56Z", "message": "#19527  making track_total_hits a param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3", "committedDate": "2020-12-14T15:29:53Z", "message": "#19527 cleanup code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTEzMTI1", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-551513125", "createdAt": "2020-12-14T16:00:55Z", "commit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjcyMjE0", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-551672214", "createdAt": "2020-12-14T17:26:53Z", "commit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyNjo1NFrOIFbrrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzoyNjo1NFrOIFbrrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2NzM0MQ==", "bodyText": "I would change this to\nreturn query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")? info.getLive(): info.getWorking()", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542567341", "createdAt": "2020-12-14T17:26:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1489,55 +1454,60 @@ protected void indexCount(final String query,\n         final String queryStringQuery =\n                 LuceneQueryDateTimeFormatter.findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n \n-        // we check the query to figure out wich indexes to hit\n-        IndiciesInfo info;\n-\n         try {\n+            final CountRequest countRequest = getCountRequest(queryStringQuery);\n \n-            info=APILocator.getIndiciesAPI().loadIndicies();\n-        } catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            if (null != indexCountFailure) {\n+            RestHighLevelClientProvider.getInstance().getClient().countAsync(countRequest,\n+                    RequestOptions.DEFAULT, new ActionListener<CountResponse>() {\n+                        @Override\n+                        public void onResponse(CountResponse countResponse) {\n+                            indexCountSuccess.accept(countResponse.getCount());\n+                        }\n \n+                        @Override\n+                        public void onFailure(Exception e) {\n+                            if (null != indexCountFailure) {\n+                                indexCountFailure.accept(e);\n+                            }\n+                        }\n+                    });\n+        }catch (Exception ee){\n+            Logger.fatal(this, \"Can't get indices information\",ee);\n+            if (null != indexCountFailure) {\n                 indexCountFailure.accept(ee);\n             }\n-            return;\n         }\n \n-        SearchRequest searchRequest = getCountSearchRequest(queryStringQuery);\n-        searchRequest.indices(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")?\n-                info.getLive(): info.getWorking());\n-\n-        RestHighLevelClientProvider.getInstance().getClient().searchAsync(searchRequest, RequestOptions.DEFAULT,\n-                        new ActionListener<SearchResponse>() {\n-            @Override\n-            public void onResponse(SearchResponse searchResponse) {\n-\n-                indexCountSuccess.accept(searchResponse.getHits().getTotalHits().value);\n-            }\n-\n-            @Override\n-            public void onFailure(Exception e) {\n-\n-                if (null != indexCountFailure) {\n-\n-                    indexCountFailure.accept(e);\n-                }\n-            }\n-        });\n     }\n \n     @NotNull\n-    private SearchRequest getCountSearchRequest(final String queryString) {\n-        SearchRequest searchRequest = new SearchRequest();\n-        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n-        searchSourceBuilder.query(QueryBuilders.queryStringQuery(queryString));\n-        searchSourceBuilder.size(0);\n-        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n-        searchRequest.source(searchSourceBuilder);\n-        return searchRequest;\n+    private CountRequest getCountRequest(final String queryString) {\n+        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n+        sourceBuilder.query(QueryBuilders.queryStringQuery(queryString));\n+        final CountRequest countRequest = new CountRequest(inferIndexToHit(queryString));\n+        countRequest.source(sourceBuilder);\n+        return countRequest;\n     }\n \n+   private String inferIndexToHit(final String query)  {\n+       // we check the query to figure out which indexes to hit\n+\n+       final IndiciesInfo info;\n+       try {\n+           info = APILocator.getIndiciesAPI().loadIndicies();\n+       } catch (DotDataException e) {\n+           throw new DotRuntimeException(e);\n+       }\n+\n+       final String indexToHit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNjczNzE1", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-551673715", "createdAt": "2020-12-14T17:27:38Z", "commit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTE3ODMw", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-551517830", "createdAt": "2020-12-14T16:05:37Z", "commit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNjowNTozN1rOIFX08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNzozMjoyMVrOIFb8BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNDE3Ng==", "bodyText": "I don't think we need the new cache region or the new methods here.", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542504176", "createdAt": "2020-12-14T16:05:37Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/ESQueryCache.java", "diffHunk": "@@ -36,7 +38,7 @@ public ESQueryCache() {\n     }\n \n \n-    final static String[] groups = new String[] {\"esquerycache\"};\n+    final static String[] groups = new String[] {\"esQueryCache\",\"esQueryCountCache\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUwNjQ1Nw==", "bodyText": "Are we adding a new unneeded ES query here?  The SearchHits here should have the proper count and a majority of the time, that will return from cache.  I don't know why we need to do a separate query here.", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542506457", "createdAt": "2020-12-14T16:08:32Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1430,56 +1433,18 @@ protected Identifier getRelatedIdentifier(Contentlet contentlet, String relation\n \tprotected long indexCount(final String query) {\n \t    final String qq = LuceneQueryDateTimeFormatter\n                 .findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n+        final CountRequest countRequest = getCountRequest(qq);\n+        return cachedIndexCount(countRequest);\n+    }\n \n-\t    // we check the query to figure out wich indexes to hit\n-        String indexToHit;\n-        IndiciesInfo info;\n-        try {\n-            info = APILocator.getIndiciesAPI().loadIndicies();\n-        }\n-        catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            return 0;\n-        }\n-        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n-            indexToHit = info.getLive();\n-        } else {\n-            indexToHit = info.getWorking();\n-        }\n-\n-        SearchRequest searchRequest = getCountSearchRequest(qq);\n-        searchRequest.indices(indexToHit);\n-\n-        final SearchHits hits = cachedIndexSearch(searchRequest);\n-       return hits.getTotalHits().value;\n-\t}\n-\n+    //TODO: This method was no longer using the time-out. We should probably remove it.\n     @Override\n     protected long indexCount(final String query,\n                         final long timeoutMillis) {\n-\n-        final String queryStringQuery =\n-                LuceneQueryDateTimeFormatter.findAndReplaceQueryDates(translateQuery(query, null).getQuery());\n-\n-        // we check the query to figure out which indexes to hit\n-        IndiciesInfo info;\n-\n-        try {\n-\n-            info = this.indiciesAPI.loadIndicies();\n-        } catch(DotDataException ee) {\n-            Logger.fatal(this, \"Can't get indicies information\",ee);\n-            return 0;\n-        }\n-\n-        SearchRequest searchRequest = getCountSearchRequest(queryStringQuery);\n-        searchRequest.indices(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")?\n-                info.getLive(): info.getWorking());\n-\n-        final SearchHits hits = cachedIndexSearch(searchRequest);\n-        return hits.getTotalHits().value;\n+       return indexCount(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU0Mjc2MA==", "bodyText": "We should always provide the default when calling Config.getStringProperty();\nAlso, we have a Config.getBooleanProperty(); that might be better to use here", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542542760", "createdAt": "2020-12-14T16:54:32Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1598,8 +1568,36 @@ private boolean shouldQueryCache() {\n         }\n         return useQueryCache;\n     }\n-    \n \n+    /**\n+     * The track_total_hits parameter allows you to control how the total number of hits should be tracked.\n+     * The default is set to 10K. This means that requests will count the total hit accurately up to 10,000 hits.\n+     * If the param is absent from the properties it still default to 10K. The param can also be set to a true|false\n+     * if set to true it'll track as many items as there are. if set to false no tracking will be performed at all.\n+     * So it's better if it isn't set to false ever.\n+     * @param searchSourceBuilder\n+     */\n+    private void setTrackHits(final SearchSourceBuilder searchSourceBuilder){\n+        final String trackTotalHitsRaw = Config.getStringProperty(\"ES_TRACK_TOTAL_HITS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU2OTMzNA==", "bodyText": "Do we need this if we are getting the correct total back from the SearchHits?", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542569334", "createdAt": "2020-12-14T17:29:26Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1631,7 +1629,40 @@ SearchHits cachedIndexSearch(final SearchRequest searchRequest) {\n         \n         \n     }\n-    \n+\n+    /**\n+     * if enabled CountRequest are executed and then cached\n+     * @param countRequest\n+     * @return\n+     */\n+    Long cachedIndexCount(final CountRequest countRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU3MTUyNQ==", "bodyText": "Our default should be 1,000,000 and this should not be set by default - we should not need to add this property to the dotmarketing-config.properties file.", "url": "https://github.com/dotCMS/core/pull/19696#discussion_r542571525", "createdAt": "2020-12-14T17:32:21Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/resources/dotmarketing-config.properties", "diffHunk": "@@ -522,6 +522,14 @@ CACHE_INVALIDATION_TRANSPORT_CLASS=com.dotcms.cache.transport.HazelcastCacheTran\n ## Cache elasticsearch query results\n ES_CACHE_SEARCH_QUERIES=true\n \n+# This Property can be set to a positive numeric value or a boolean value\n+# if set to false ES will stop retrieving the hits Count. DO NOT SET IT TO FALSE.\n+# IF set to true  ES will track all hits beyond the 10K items limit. This might imply an impact performance wise.\n+# By default we're providing a max number.\n+# If commented out ES will default to 10K again.\n+# https://www.elastic.co/guide/en/elasticsearch/reference/7.10/search-your-data.html#track-total-hits\n+ES_TRACK_TOTAL_HITS=1000000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a536e9a54cf69a515213da5cf6e9a6d3bcf23fe3"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ba25776ebc80e1722af05b59a5ff8fde73d0569", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/2ba25776ebc80e1722af05b59a5ff8fde73d0569", "committedDate": "2020-12-14T23:31:13Z", "message": "#19527 unused code removed + test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d255b5c95ac9db8b23a89bf004439e2f9f0b29", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/02d255b5c95ac9db8b23a89bf004439e2f9f0b29", "committedDate": "2020-12-15T03:43:37Z", "message": "#19527  fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e42ead7ed3c3d114a2b4376d2323eac78f9ddc9", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/7e42ead7ed3c3d114a2b4376d2323eac78f9ddc9", "committedDate": "2020-12-15T14:43:40Z", "message": "#19527 testing indexCount logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c5b37a2b8e46f6eb349604343d6256c55fe94fb", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3c5b37a2b8e46f6eb349604343d6256c55fe94fb", "committedDate": "2020-12-16T17:08:52Z", "message": "#19527 feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTUyNzU4", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-553952758", "createdAt": "2020-12-16T18:07:54Z", "commit": {"oid": "3c5b37a2b8e46f6eb349604343d6256c55fe94fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d8185b61d913c0342825db73e2391d2691918c3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/8d8185b61d913c0342825db73e2391d2691918c3", "committedDate": "2020-12-16T19:08:45Z", "message": "#19527 fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjM2OTk5", "url": "https://github.com/dotCMS/core/pull/19696#pullrequestreview-554636999", "createdAt": "2020-12-17T14:09:45Z", "commit": {"oid": "8d8185b61d913c0342825db73e2391d2691918c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1693, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}