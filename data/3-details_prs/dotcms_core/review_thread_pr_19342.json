{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzY4NDY0", "number": 19342, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMjowMFrOEq03hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozM1rOErzuGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQxODMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMjowMFrOHdQR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozMjowMFrOHdQR0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQzNzQ1OQ==", "bodyText": "Log here", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500437459", "createdAt": "2020-10-06T16:32:00Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "diffHunk": "@@ -391,4 +395,42 @@ public void deleteAssetFromBundle(String assetId, String bundleId)\n \n \t}\n \n+\t/**\n+\t * This takes a Bundle, generates the folder/file structure and returns the resulting directory\n+\t * as a File handle. It will not delete the bundle directory if it already existed.\n+\t * @param bundle - Bundle to generate\n+\t * @return\n+\t */\n+    @CloseDBIfOpened\n+    private File generateBundleDirectory(final Bundle bundle) {\n+\n+        final PushPublisherConfig pushPublisherConfig = new PushPublisherConfig(bundle);\n+        pushPublisherConfig.setPublishers(Arrays.asList(GenerateBundlePublisher.class));\n+        try {\n+            APILocator.getPublisherAPI().publish(pushPublisherConfig);\n+        }\n+        catch(Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ0NTAwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozODo0NVrOHdQi5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozODo0NVrOHdQi5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MTgyOA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500441828", "createdAt": "2020-10-06T16:38:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ0NTc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozODo1N1rOHdQjVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozODo1N1rOHdQjVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MTk0MQ==", "bodyText": "set to final rename to file", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500441941", "createdAt": "2020-10-06T16:38:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        TarArchiveOutputStream taos = new TarArchiveOutputStream(\n+                                        new GZIPOutputStream(new BufferedOutputStream(fos)))) {\n+\n+            taos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n+            // TAR originally didn't support long file names, so enable the support for it\n+            taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+\n+            // Get to putting all the files in the compressed output file\n+            for (File f : files) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ0ODMyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozOTozNFrOHdQk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozOTozNFrOHdQk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MjM0NA==", "bodyText": "rename to fileOutputStream", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442344", "createdAt": "2020-10-06T16:39:34Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ0OTQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozOTo0OFrOHdQlng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjozOTo0OFrOHdQlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0MjUyNg==", "bodyText": "Rename to tarArchiveOutputStream", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442526", "createdAt": "2020-10-06T16:39:48Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,44 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+\n+\n+        List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (OutputStream fos = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        TarArchiveOutputStream taos = new TarArchiveOutputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ1MDk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0MDowOFrOHdQmiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0MDowOFrOHdQmiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Mjc2MQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500442761", "createdAt": "2020-10-06T16:40:08Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/GenerateBundlePublisher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.publishing;\n+\n+import java.io.File;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotmarketing.util.Logger;\n+\n+/**\n+ * This GenerateBundlePublisher uses the same config/bundlers as the PushPublisher - the only\n+ * difference is that once this publisher has built the bundle it does not do anything with it. The\n+ * GenerateBundlePublisher is meant to be used to build the bundle when a user selects to download a\n+ * bundle\n+ * \n+ * @author will\n+ *\n+ */\n+public class GenerateBundlePublisher extends PushPublisher {\n+\n+    @Override\n+    public PublisherConfig process(PublishStatus status) throws DotPublishingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ2NjIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0Mzo1OFrOHdQwDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0Mzo1OFrOHdQwDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTE5OQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500445199", "createdAt": "2020-10-06T16:43:58Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +638,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");\n+            if (!bundleFile.exists()) {\n+                throw new DoesNotExistException(\n+                        \"The bundle has not been generated for the provided bundle ID: \"\n+                                + bundleId);\n+            }\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" +bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+            return Response.ok(bundleFile, \"application/x-tgz\").build();\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND);\n+        }catch (Exception e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+    }\n+    \n+    @Path(\"/_generate\")\n+    @POST\n+    @JSONP\n+    @NoCache\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final void generateBundle(@Context final HttpServletRequest request,\n+                                       @Context final HttpServletResponse response,\n+                                        @Suspended final AsyncResponse asyncResponse,\n+                                       final GenerateBundleForm form) {\n+\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        final User user = initData.getUser();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(form.bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + form.bundleId + \" not found\");\n+            }\n+            \n+            //set Filter to the bundle\n+            final FilterDescriptor filter = APILocator.getPublisherAPI().getFilterDescriptorByKey(form.filterKey);\n+            bundle.setFilterKey(filter.getKey());\n+            bundle.setOwner(user.getUserId());\n+            //set ForcePush value of the filter to the bundle\n+            bundle.setForcePush(\n+                    (boolean) filter.getFilters().getOrDefault(FilterDescriptor.FORCE_PUSH_KEY,false));\n+            bundle.setOperation(form.operation.ordinal());\n+            //Update Bundle\n+            APILocator.getBundleAPI().updateBundle(bundle);\n+\n+            //Generate the bundle file for this given operation\n+\n+            final BundleGenerator generator = new BundleGenerator(bundle, user,asyncResponse);\n+\n+            final DotSubmitter submitter =\n+                    DotConcurrentFactory.getInstance().getSubmitter(\"generateBundle\",\n+                            new DotConcurrentFactory.SubmitterConfigBuilder().poolSize(2)\n+                                    .maxPoolSize(4).queueCapacity(500).build()\n+                    );\n+            submitter.submit(generator);\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setContentType( \"application/x-tgz\" );\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" + bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            asyncResponse.resume(ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND));\n+        }catch (Exception e){\n+            Logger.error(this,e.getMessage());\n+            asyncResponse.resume(ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.INTERNAL_SERVER_ERROR));\n+        }\n+        \n+\n+    } // uploadBundleSync.\n+    \n+    \n+    class BundleGenerator implements Runnable {\n+\n+\n+        public BundleGenerator(final Bundle bundle,  final User user, final AsyncResponse asyncResponse) {\n+            super();\n+            this.bundle = bundle;\n+            this.user = user;\n+            this.asyncResponse = asyncResponse;\n+            \n+        }\n+\n+        File bundleFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086545d55e6acdd8b1a50f396781eddcf14e519c"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDU1NTg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTo1Mjo1MFrOHdbQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1MjowOFrOHd3WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNzQ1NQ==", "bodyText": "This comment needs to be updated because the response code is 200", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500617455", "createdAt": "2020-10-06T21:52:50Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13481e2fcc6855e661eb20765214fada149b382"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NzU5Mg==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r501077592", "createdAt": "2020-10-07T14:52:08Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxNzQ1NQ=="}, "originalCommit": {"oid": "c13481e2fcc6855e661eb20765214fada149b382"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDU3OTY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjowMToxMVrOHdbe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo0OTo1MFrOHd3PNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTA0NQ==", "bodyText": "what would happen if this response is sent considering that the endpoint is tagged with @Produces(MediaType.APPLICATION_OCTET_STREAM) ?", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r500621045", "createdAt": "2020-10-06T22:01:11Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +636,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");\n+            if (!bundleFile.exists()) {\n+                throw new DoesNotExistException(\n+                        \"The bundle has not been generated for the provided bundle ID: \"\n+                                + bundleId);\n+            }\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" +bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+            return Response.ok(bundleFile, \"application/x-tgz\").build();\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13481e2fcc6855e661eb20765214fada149b382"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3NTc2NQ==", "bodyText": "It response the error like this:\n{\n    \"message\": \"Bundle with ID: bundle-id-not-exist not found\"\n}", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r501075765", "createdAt": "2020-10-07T14:49:50Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +636,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");\n+            if (!bundleFile.exists()) {\n+                throw new DoesNotExistException(\n+                        \"The bundle has not been generated for the provided bundle ID: \"\n+                                + bundleId);\n+            }\n+            final String bundleName = bundle.getName().replaceAll(\"[^\\\\w.-]\", \"_\");\n+            response.setHeader( \"Content-Disposition\", \"attachment; filename=\" +bundleName  +\"-\"+ bundle.getId() + \".tar.gz\" );\n+            return Response.ok(bundleFile, \"application/x-tgz\").build();\n+        }catch (DoesNotExistException e){\n+            Logger.error(this,e.getMessage());\n+            return ExceptionMapperUtil.createResponse(\"\",e.getMessage(),Response.Status.NOT_FOUND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyMTA0NQ=="}, "originalCommit": {"oid": "c13481e2fcc6855e661eb20765214fada149b382"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoxOFrOHeyIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoxOFrOHeyIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYxMw==", "bodyText": "Codacy found an issue: Avoid reassigning parameters such as 'config'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040613", "createdAt": "2020-10-08T22:10:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -34,14 +33,14 @@\n \n \n     @Override\n-    public PublishStatus publish ( PublisherConfig config ) throws DotPublishingException {\n+    final public PublishStatus publish ( PublisherConfig config ) throws DotPublishingException {\n \n         return publish( config, new PublishStatus() );\n     }\n \n     @CloseDBIfOpened\n     @Override\n-    public PublishStatus publish ( PublisherConfig config, PublishStatus status ) throws DotPublishingException {\n+    final public PublishStatus publish ( PublisherConfig config, PublishStatus status ) throws DotPublishingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoxOVrOHeyIKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoxOVrOHeyIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYxOQ==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'initData'.", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040619", "createdAt": "2020-10-08T22:10:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMFrOHeyIMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMFrOHeyIMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYyNQ==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040625", "createdAt": "2020-10-08T22:10:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMVrOHeyIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMVrOHeyIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDYzNw==", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'filterKey'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040637", "createdAt": "2020-10-08T22:10:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMlrOHeyIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyMlrOHeyIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY0NQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040645", "createdAt": "2020-10-08T22:10:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPIImpl.java", "diffHunk": "@@ -391,4 +395,44 @@ public void deleteAssetFromBundle(String assetId, String bundleId)\n \n \t}\n \n+\t/**\n+\t * This takes a Bundle, generates the folder/file structure and returns the resulting directory\n+\t * as a File handle. It will not delete the bundle directory if it already existed.\n+\t * @param bundle - Bundle to generate\n+\t * @return\n+\t */\n+    @CloseDBIfOpened\n+    private File generateBundleDirectory(final Bundle bundle) {\n+\n+        final PushPublisherConfig pushPublisherConfig = new PushPublisherConfig(bundle);\n+        pushPublisherConfig.setPublishers(Arrays.asList(GenerateBundlePublisher.class));\n+        try {\n+            APILocator.getPublisherAPI().publish(pushPublisherConfig);\n+        }\n+        catch(final Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyM1rOHeyITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyM1rOHeyITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY1Mw==", "bodyText": "Codacy found an issue: Field operation has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040653", "createdAt": "2020-10-08T22:10:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;\n+        private @JsonProperty int operation = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTc1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNFrOHeyIVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNFrOHeyIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2MA==", "bodyText": "Codacy found an issue: Unnecessary modifier 'public' on method 'generateTarGzipBundleFile': the method is declared in an interface type", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040660", "createdAt": "2020-10-08T22:10:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/business/BundleAPI.java", "diffHunk": "@@ -168,4 +168,10 @@\n \t */\n \tpublic void deleteAssetFromBundle(String assetId, String bundleId) throws DotDataException;\n \n+    /**\n+     * This takes a bundle and generates the tar.gzipped output file.  The resulting file will be placed under\n+     * the ConfigUtils.getBundlePath() + \"/\" + bundleId + \".tar.gz\"\n+     */\n+    public File generateTarGzipBundleFile(Bundle bundle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTc2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNVrOHeyIVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNVrOHeyIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2Mg==", "bodyText": "Codacy found an issue: The String literal \".tar.gz\" appears 5 times in this file; the first occurrence is on line 664", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040662", "createdAt": "2020-10-08T22:10:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/BundleResource.java", "diffHunk": "@@ -625,6 +629,144 @@ public Response deleteAllSuccess(@Context final HttpServletRequest request,\n                 \"Removing bundles in a separated process, the result of the operation will be notified\")).build();\n     } // deleteAllSuccess.\n \n+\n+    @Path(\"/_download/{bundleId}\")\n+    @GET\n+    @JSONP\n+    @NoCache\n+    @Produces(MediaType.APPLICATION_OCTET_STREAM)\n+    public final Response downloadBundle(@Context final HttpServletRequest request,\n+            @Context final HttpServletResponse response,\n+            @PathParam(\"bundleId\") final String bundleId) {\n+\n+        final InitDataObject initData =\n+                new WebResource.InitBuilder(webResource)\n+                        .requiredBackendUser(true)\n+                        .requestAndResponse(request, response)\n+                        .rejectWhenNoUser(true)\n+                        .requiredPortlet(\"publishing-queue\")\n+                        .init();\n+        try {\n+            final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+            if (!UtilMethods.isSet(bundle)) {\n+                throw new DoesNotExistException(\"Bundle with ID: \" + bundleId + \" not found\");\n+            }\n+            final File bundleFile = new File(\n+                    ConfigUtils.getBundlePath() + File.separator + bundle.getId() + \".tar.gz\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNlrOHeyIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyNlrOHeyIWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY2Ng==", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'bundleId'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040666", "createdAt": "2020-10-08T22:10:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyN1rOHeyIYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyN1rOHeyIYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY3Mg==", "bodyText": "Codacy found an issue: Field bundleId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040672", "createdAt": "2020-10-08T22:10:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyOFrOHeyIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyOFrOHeyIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY4Mg==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'tarArchiveOutputStream': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040682", "createdAt": "2020-10-08T22:10:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,42 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());\n+                        // Wrap the output file stream in streams that will tar and gzip everything\n+                        final TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyOVrOHeyIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDoyOVrOHeyIcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5MA==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'fileOutputStream': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040690", "createdAt": "2020-10-08T22:10:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushUtils.java", "diffHunk": "@@ -50,7 +55,42 @@ public static File compressFiles(Collection<File> files, File output, String bun\n \t\treturn output;\n \t}\n \t\n-\t\n+\n+\t/**\n+\t * Tar and GZIPs a directory on the asset path\n+\t * @param directory\n+\t * @return\n+\t * @throws IOException\n+\t */\n+    public static File tarGzipDirectory(final File directory) throws IOException {\n+        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n+            throw new DotRuntimeException(\"Unable to compress directory:\" + directory);\n+        }\n+        final String tempFileId = directory.getName() + UUIDGenerator.shorty();\n+        final File tempFile = new File(APILocator.getFileAssetAPI().getRealAssetPathTmpBinary() +File.separator + tempFileId + \".tar.gz\");\n+        final List<File> files = FileUtil.listFilesRecursively(directory);\n+\n+        Logger.info(PushUtils.class, \"Compressing \" + files.size() + \" to \" + tempFile.getAbsoluteFile());\n+        // Create the output stream for the output file\n+\n+        // try-with-resources handles close of streams\n+        try (final OutputStream fileOutputStream = Files.newOutputStream(tempFile.toPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNTk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisherConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMFrOHeyIdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMFrOHeyIdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5NA==", "bodyText": "Codacy found an issue: Overridable method 'setDownloading' called during object construction", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040694", "createdAt": "2020-10-08T22:10:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisherConfig.java", "diffHunk": "@@ -42,6 +50,44 @@ public PushPublisherConfig() {\n \t\tsuper();\n \t}\n \n+    /**\n+     * Convenience constructor for generating a PP config from a bundle\n+     * \n+     * @param bundle\n+     */\n+    public PushPublisherConfig(final Bundle bundle) {\n+        super();\n+\n+        final PublisherAPI publisherAPI = PublisherAPI.getInstance();\n+\n+        final List<PublishQueueElement> tempBundleContents =\n+                        Try.of(() -> publisherAPI.getQueueElementsByBundleId(bundle.getId()))\n+                                        .onFailure(e -> Logger.warnAndDebug(PushPublisherConfig.class, e))\n+                                        .getOrElse(ImmutableList.of());\n+        final List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>();\n+        assetsToPublish.addAll(tempBundleContents);\n+\n+\n+        this.setDownloading(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNjAwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMVrOHeyIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMVrOHeyIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDY5OA==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040698", "createdAt": "2020-10-08T22:10:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNjA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMlrOHeyIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozMlrOHeyIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDcwMg==", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'operation'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040702", "createdAt": "2020-10-08T22:10:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/GenerateBundleForm.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.rest;\n+\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+/**\n+ * Stolen from @author jsanca\n+ */\n+@JsonDeserialize(builder = GenerateBundleForm.Builder.class)\n+public class GenerateBundleForm {\n+\n+    public final String bundleId;\n+    public PushPublisherConfig.Operation operation;\n+    public final String filterKey;\n+\n+    private GenerateBundleForm(final Builder builder) {\n+\n+        this.bundleId = builder.bundleId;\n+        this.operation = builder.operation == PushPublisherConfig.Operation.PUBLISH.ordinal() ? PushPublisherConfig.Operation.PUBLISH : PushPublisherConfig.Operation.UNPUBLISH;\n+        this.filterKey = builder.filterKey;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+        return \"{bundleId=\" + bundleId + \", operation=\" + operation + \", filter=\" + filterKey + \"}\";\n+    }\n+\n+\n+    public static final class Builder {\n+\n+        private @JsonProperty String bundleId = null;\n+        private @JsonProperty String filterKey = null;\n+        private @JsonProperty int operation = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzcxNjA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozM1rOHeyIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMjoxMDozM1rOHeyIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA0MDcwNw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "url": "https://github.com/dotCMS/core/pull/19342#discussion_r502040707", "createdAt": "2020-10-08T22:10:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/BundleResourceTest.java", "diffHunk": "@@ -88,7 +109,118 @@ private void publish(FileInputStream createCOntentFileInputStream) throws DotPub\n         final FormDataMultiPart multipart = mock(FormDataMultiPart.class);\n         when(multipart.getBodyParts()).thenReturn(list(bodyPart));\n \n-        final BundleResource bundleResource = new BundleResource();\n         bundleResource.uploadBundleSync(request, response, multipart);\n     }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true);\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private String insertPublishingBundle(final String userId, final Date publishDate)\n+            throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(userId);\n+        bundle.setPublishDate(publishDate);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        return uuid;\n+    }\n+\n+    /**\n+     * BasicAuth\n+     */\n+    private HttpServletRequest getHttpRequest() {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        request.setHeader(\"Authorization\",\n+                \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#generateBundle(HttpServletRequest, HttpServletResponse, AsyncResponse, GenerateBundleForm)}\n+     * When: Create a bundle and generate the tar.gz file of the given bundle.\n+     * Should: Generate the bundle without issues, 200.\n+     */\n+    @Test\n+    public void test_generateBundle_success() throws DotDataException, IOException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Create GenerateBundleForm\n+        final GenerateBundleForm bundleForm = new GenerateBundleForm.Builder().bundleId(bundleId).build();\n+\n+        //Call generate endpoint\n+        final AsyncResponse asyncResponse = new MockAsyncResponse((arg) -> {\n+\n+            final Response generateBundleResponse = (Response)arg;\n+            assertEquals(Status.OK.getStatusCode(), generateBundleResponse.getStatus());\n+            return true;\n+        }, arg -> {\n+            fail(\"Error generating bundle\");\n+            return true;\n+        });\n+\n+        bundleResource.generateBundle(getHttpRequest(),response,asyncResponse,bundleForm);\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, but since the tar.gz has not been generated should fail.\n+     * Should: return 404 since the file has not been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_fileNotGenerated_return404() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.NOT_FOUND.getStatusCode(),responseResource.getStatus());\n+    }\n+\n+    /**\n+     * Method to Test: {@link BundleResource#downloadBundle(HttpServletRequest, HttpServletResponse, String)}\n+     * When: Create a bundle and try to download it, since the tar.gz has been generated should succeed.\n+     * Should: return 200 since the file has been generated\n+     */\n+    @Test\n+    public void test_downloadBundle_success() throws DotDataException {\n+        //Create new bundle\n+        final String bundleId = insertPublishingBundle(adminUser.getUserId(),new Date());\n+\n+        //Create a Filter since it's needed to generate the bundle\n+        createFilter();\n+\n+        //Generate bundle file\n+        final Bundle bundle = APILocator.getBundleAPI().getBundleById(bundleId);\n+        bundle.setOperation(PushPublisherConfig.Operation.PUBLISH.ordinal());\n+        APILocator.getBundleAPI().generateTarGzipBundleFile(bundle);\n+\n+        PublisherAPIImpl.class.cast(APILocator.getPublisherAPI()).getFilterDescriptorMap().clear();\n+\n+        //Call download endpoint\n+        final Response responseResource = bundleResource.downloadBundle(getHttpRequest(),response,bundleId);\n+\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ff995509dbfe43fcf05ead2cd8aec339c4e9ce1"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1907, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}