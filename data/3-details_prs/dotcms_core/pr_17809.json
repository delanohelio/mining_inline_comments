{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDY2MjI4", "number": 17809, "title": "Created new Filter to intercept and normalizate URIs", "bodyText": "Fix for ticket #17796\nA filter was created to wrap all the incoming requests to override the HttpServletRequest.getRequestURI() method in order to normalize all the requested URIs.", "createdAt": "2020-01-10T14:07:47Z", "url": "https://github.com/dotCMS/core/pull/17809", "merged": true, "mergeCommit": {"oid": "c498997035154d7e110781f41a519ea45baa59ac"}, "closed": true, "closedAt": "2020-01-10T17:49:49Z", "author": {"login": "jgambarios"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4322vgH2gAyMzYxNDY2MjI4OmQzNGYzYmI0MTFjYmI1MzNmZmYzYTQwOTdlNmY3MzgwOGRkNDljYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5AwpigFqTM0MTI1OTM2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/d34f3bb411cbb533fff3a4097e6f73808dd49ca6", "committedDate": "2020-01-10T05:39:23Z", "message": "Created new Filter to intercept and normalizate URIs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMTg0MTUy", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341184152", "createdAt": "2020-01-10T14:10:02Z", "commit": {"oid": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMTk5MjQz", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341199243", "createdAt": "2020-01-10T14:33:45Z", "commit": {"oid": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDozMzo0NlrOFcVyPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDozMzo0NlrOFcVyPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2MTM3Mg==", "bodyText": "Is the third param really needed? Seems like should be enough with comparing equality between the first two  (originalURI,  expectedNormalizedURI)", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365261372", "createdAt": "2020-01-10T14:33:46Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI, Boolean.FALSE);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {\n+\n+        String originalURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        originalURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        originalURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"../folder/folder1/file.dat\";\n+        compare(originalURI, originalURI, Boolean.TRUE);\n+    }\n+\n+    private void compare(final String originalURI, final String expectedNormalizedURI,\n+            boolean equals)\n+            throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d34f3bb411cbb533fff3a4097e6f73808dd49ca6"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/1011011bec5224a85ccbf0ae4ff9b43cd7371978", "committedDate": "2020-01-10T15:30:22Z", "message": "Applied feedback #17796"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyODk2", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242896", "createdAt": "2020-01-10T15:37:44Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0NFrOFcXvBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0NFrOFcXvBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzMxNg==", "bodyText": "Issue found: Parameter 'servletResponse' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293316", "createdAt": "2020-01-10T15:37:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTE3", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242917", "createdAt": "2020-01-10T15:37:45Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0NVrOFcXvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0NVrOFcXvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzMyOA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293328", "createdAt": "2020-01-10T15:37:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTMz", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242933", "createdAt": "2020-01-10T15:37:46Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0N1rOFcXvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0N1rOFcXvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM0MA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293340", "createdAt": "2020-01-10T15:37:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTQ3", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242947", "createdAt": "2020-01-10T15:37:47Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0OFrOFcXvIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0OFrOFcXvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM0Ng==", "bodyText": "Issue found: Local variable 'request' could be declared final", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293346", "createdAt": "2020-01-10T15:37:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.dotcms.filters;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.mock;\n+\n+import com.dotcms.UnitTestBase;\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mockito;\n+\n+public class NormalizationFilterTest extends UnitTestBase {\n+\n+    private final static NormalizationFilter normalizationFilter = new NormalizationFilter();\n+    private static HttpServletResponse response;\n+    private static FilterChain chain;\n+    private static ArgumentCaptor<HttpServletRequest> capturedRequest;\n+\n+    @BeforeClass\n+    public static void prepare() throws IOException, ServletException {\n+\n+        //Response\n+        response = mock(HttpServletResponse.class);\n+\n+        //Chain\n+        chain = mock(FilterChain.class);\n+        capturedRequest = ArgumentCaptor\n+                .forClass(HttpServletRequest.class);\n+        //Capturing the request when is passed down to the chain\n+        doNothing().when(chain).doFilter(capturedRequest.capture(), any(HttpServletResponse.class));\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_invalid_URI() throws IOException, ServletException {\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        String originalURI = \"/test/../folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"/test/../folder/important/../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"/folder/./folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+\n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * valid URIs\n+     */\n+    @Test\n+    public void test_uri_normalization_valid_URI() throws IOException, ServletException {\n+\n+        String originalURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, originalURI);\n+\n+        originalURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        compare(originalURI, originalURI);\n+\n+        originalURI = \"folder/folder1/file.dat\";\n+        compare(originalURI, originalURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"../folder/folder1/file.dat\";\n+        compare(originalURI, originalURI);\n+    }\n+\n+    private void compare(final String originalURI, final String expectedNormalizedURI)\n+            throws IOException, ServletException {\n+\n+        HttpServletRequest request = mock(HttpServletRequest.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTU3", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242957", "createdAt": "2020-01-10T15:37:49Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0OVrOFcXvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo0OVrOFcXvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM1NQ==", "bodyText": "Issue found: Document empty method body", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293355", "createdAt": "2020-01-10T15:37:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {\n+\n+        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(\n+                (HttpServletRequest) servletRequest) {\n+\n+            @Override\n+            public String getRequestURI() {\n+\n+                /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n+                 1. Each \".\" segment is simply removed.\n+                 2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n+                 3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n+                 */\n+                return URI.create(super.getRequestURI()).normalize().toString();\n+            }\n+\n+        };\n+\n+        filterChain.doFilter(requestWrapper, servletResponse);\n+    }\n+\n+    @Override\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTY5", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242969", "createdAt": "2020-01-10T15:37:50Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MFrOFcXvOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MFrOFcXvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM2OA==", "bodyText": "Issue found: Document empty method body", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293368", "createdAt": "2020-01-10T15:37:50Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQyOTg4", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341242988", "createdAt": "2020-01-10T15:37:51Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MVrOFcXvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MVrOFcXvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzM4Ng==", "bodyText": "Issue found: Parameter 'filterConfig' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293386", "createdAt": "2020-01-10T15:37:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQzMDEy", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341243012", "createdAt": "2020-01-10T15:37:52Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MlrOFcXvWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1MlrOFcXvWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzQwMw==", "bodyText": "Issue found: Parameter 'filterChain' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293403", "createdAt": "2020-01-10T15:37:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjQzMDI4", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341243028", "createdAt": "2020-01-10T15:37:53Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1M1rOFcXvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTozNzo1M1rOFcXvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5MzQxMg==", "bodyText": "Issue found: Local variable 'requestWrapper' could be declared final", "url": "https://github.com/dotCMS/core/pull/17809#discussion_r365293412", "createdAt": "2020-01-10T15:37:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotcms.filters;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+/**\n+ * Filter created to wrap all the incoming requests to override the {@link\n+ * HttpServletRequest#getRequestURI()} method in order to normalize the requested URIs.\n+ */\n+public class NormalizationFilter implements Filter {\n+\n+    @Override\n+    public void init(FilterConfig filterConfig) throws ServletException {\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n+            FilterChain filterChain) throws IOException, ServletException {\n+\n+        HttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjU5MzYy", "url": "https://github.com/dotCMS/core/pull/17809#pullrequestreview-341259362", "createdAt": "2020-01-10T16:01:45Z", "commit": {"oid": "1011011bec5224a85ccbf0ae4ff9b43cd7371978"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1283, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}