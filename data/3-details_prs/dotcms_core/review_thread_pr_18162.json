{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzY0MzU1", "number": 18162, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0ODoxOFrODp3-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1OVrODp91wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjM1MjQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0ODoxOFrOF5UZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0ODoxOFrOF5UZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0NzM3Mw==", "bodyText": "Maybe type.value.equalsIgnoreCase vs. just lowercasing ?", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395647373", "createdAt": "2020-03-20T13:48:18Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/DataTypes.java", "diffHunk": "@@ -32,7 +32,7 @@ public static DataTypes getDataType (String value) {\n \t\tvalue = value.replaceAll(\"[0-9]\", \"\");\n \t\tDataTypes[] types = DataTypes.values();\n \t\tfor (DataTypes type : types) {\n-\t\t\tif (type.value.equals(value))\n+\t\t\tif (type.value.equals(value.toLowerCase()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7591036775f6234c14df1c5ae93135c736bd9e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjM1NjMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/Contentlet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzo0OToxM1rOF5UcFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjowMjoyMFrOF5Z0EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODAyMw==", "bodyText": "Why include these changes?  I would rather have it called contentTypeId in our pojo", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395648023", "createdAt": "2020-03-20T13:49:13Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/Contentlet.java", "diffHunk": "@@ -46,7 +46,7 @@\n \r\n     private FieldAPI fAPI = APILocator.getFieldAPI();\r\n \r\n-    private String contentTypeId;\r\n+    private String structureInode;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7591036775f6234c14df1c5ae93135c736bd9e1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczNjA4MQ==", "bodyText": "in a previous commit the structureInode was rename to contentTypeId, them we realized it is breaking the starter (importer), so doing the fix", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395736081", "createdAt": "2020-03-20T16:02:20Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/Contentlet.java", "diffHunk": "@@ -46,7 +46,7 @@\n \r\n     private FieldAPI fAPI = APILocator.getFieldAPI();\r\n \r\n-    private String contentTypeId;\r\n+    private String structureInode;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY0ODAyMw=="}, "originalCommit": {"oid": "c7591036775f6234c14df1c5ae93135c736bd9e1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzAxNDM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjozNDozMlrOF5bCpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjozNDozMlrOF5bCpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1NjE5OA==", "bodyText": "If this is not going to be used anymore, remove the code completely.", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395756198", "createdAt": "2020-03-20T16:34:32Z", "author": {"login": "jcastro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v3/contenttype/MoveFieldsForm.java", "diffHunk": "@@ -47,7 +47,7 @@ private void fixFields(final List<Map<String, Object>> fields, final String cont\n \n             fieldMap.put(\"sortOrder\", i);\n             fieldMap.put(\"contentTypeId\", contentTypeId);\n-            fieldMap.remove(\"dataType\");\n+            //fieldMap.remove(\"dataType\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzA5Nzk3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjo1Nzo1NVrOF5b4sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzowNTo1NFrOF5cKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDAzMg==", "bodyText": "A few things here:\n\nSince we are testing the MoveFieldsForm this test should live in a new test class class MoveFieldFormsTest\nTest method naming convention usually includes the method we are testing. In this case getRows. Suggested method name: testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes\nJavadoc should also say that we are testing that the proper datatypes are kept after de-serialization", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395770032", "createdAt": "2020-03-20T16:57:55Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "diffHunk": "@@ -458,6 +459,137 @@ public void shouldMoveFields () throws DotSecurityException, DotDataException {\n         checkAllFieldsIds(listExpected, contentTypeFromDB.fields());\n     }\n \n+\n+    /**\n+     * When try to move fields in a Content Type with a right layout\n+     * Should update the field with the new sortOrder\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testSerializerMoveFields () throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NDUxOQ==", "bodyText": "Not sure if should live in a diff class.\nOk the rest of the points", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395774519", "createdAt": "2020-03-20T17:05:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "diffHunk": "@@ -458,6 +459,137 @@ public void shouldMoveFields () throws DotSecurityException, DotDataException {\n         checkAllFieldsIds(listExpected, contentTypeFromDB.fields());\n     }\n \n+\n+    /**\n+     * When try to move fields in a Content Type with a right layout\n+     * Should update the field with the new sortOrder\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testSerializerMoveFields () throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3MDAzMg=="}, "originalCommit": {"oid": "67b76e364a4db2d07c1435d7a2a21fff8169f6b1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzE5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0N1rOF5eGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0N1rOF5eGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM0NA==", "bodyText": "Issue found: The String literal \"unique\" appears 5 times in this file; the first occurrence is on line 99", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806344", "createdAt": "2020-03-20T18:02:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzIyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0OFrOF5eGjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0OFrOF5eGjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM1MA==", "bodyText": "Issue found: Avoid instantiating Long objects.Call Long.valueOf() instead", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806350", "createdAt": "2020-03-20T18:02:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0OVrOF5eGmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo0OVrOF5eGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM2MA==", "bodyText": "Issue found: The String literal \"clazz\" appears 5 times in this file; the first occurrence is on line 81", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806360", "createdAt": "2020-03-20T18:02:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MFrOF5eGnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MFrOF5eGnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM2Nw==", "bodyText": "Issue found: The String literal \"name\" appears 5 times in this file; the first occurrence is on line 94", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806367", "createdAt": "2020-03-20T18:02:50Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzM5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MVrOF5eGrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MVrOF5eGrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM4Mg==", "bodyText": "Issue found: The String literal \"required\" appears 5 times in this file; the first occurrence is on line 96", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806382", "createdAt": "2020-03-20T18:02:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MlrOF5eGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1MlrOF5eGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjM5Nw==", "bodyText": "Issue found: Avoid instantiating Long objects.Call Long.valueOf() instead", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806397", "createdAt": "2020-03-20T18:02:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NFrOF5eGyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NFrOF5eGyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQwOA==", "bodyText": "Issue found: Avoid instantiating Integer objects. Call Integer.valueOf() instead.", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806408", "createdAt": "2020-03-20T18:02:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),\n+                \"unique\", Boolean.FALSE,\n+                \"variable\", \"fields0\");\n+\n+        final Map<String, Object> columnField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Column\",\n+                \"fieldTypeLabel\", \"Column\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-1\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,\n+                \"sortOrder\", new Integer(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NVrOF5eG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NVrOF5eG1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQyMA==", "bodyText": "Issue found: The String literal \"listed\" appears 5 times in this file; the first occurrence is on line 92", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806420", "createdAt": "2020-03-20T18:02:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NlrOF5eG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1NlrOF5eG4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQzNA==", "bodyText": "Issue found: The String literal \"indexed\" appears 5 times in this file; the first occurrence is on line 91", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806434", "createdAt": "2020-03-20T18:02:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1N1rOF5eG7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1N1rOF5eG7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ0NA==", "bodyText": "Issue found: The String literal \"searchable\" appears 5 times in this file; the first occurrence is on line 97", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806444", "createdAt": "2020-03-20T18:02:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",\n+                \"fieldContentTypeProperties\", Collections.emptyList(),\n+                \"fieldType\", \"Row\",\n+                \"fieldTypeLabel\", \"Row\",\n+                \"fieldVariables\", Collections.emptyList(),\n+                \"fixed\", Boolean.FALSE,\n+                \"iDate\", new Long(1584647620000l),\n+                \"id\",\"a2d05a0b-5f4d-449d-9ca2-1117ab1ab086\",\n+                \"indexed\",  Boolean.FALSE,\n+                \"listed\", Boolean.FALSE,\n+                \"modDate\", new Long(1584647620000l),\n+                \"name\", \"fields-0\",\n+                \"readOnly\",Boolean.FALSE,\n+                \"required\", Boolean.FALSE,\n+                \"searchable\", Boolean.FALSE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1OFrOF5eG-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1OFrOF5eG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ1Nw==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.util.CollectionsUtils'", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806457", "createdAt": "2020-03-20T18:02:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/FieldResourceTest.java", "diffHunk": "@@ -14,6 +14,7 @@\n import javax.ws.rs.core.Response;\n \n import com.dotcms.rest.exception.NotFoundException;\n+import com.dotcms.util.CollectionsUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzMxMzk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1OVrOF5eHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODowMjo1OVrOF5eHAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwNjQ2NQ==", "bodyText": "Issue found: The String literal \"dataType\" appears 5 times in this file; the first occurrence is on line 83", "url": "https://github.com/dotCMS/core/pull/18162#discussion_r395806465", "createdAt": "2020-03-20T18:02:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v3/contenttype/MoveFieldFormTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+package com.dotcms.rest.api.v3.contenttype;\n+\n+import com.dotcms.contenttype.model.field.ColumnField;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.RowField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.field.layout.FieldLayout;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.model.type.SimpleContentType;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDUtil;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class MoveFieldFormTest {\n+\n+    private ContentType createContentType() throws DotDataException, DotSecurityException {\n+        final String typeName = \"fieldResourceTest\" + UUIDUtil.uuid();\n+\n+        ContentType type = ContentTypeBuilder.builder(SimpleContentType.class).name(typeName).build();\n+        type = APILocator.getContentTypeAPI(APILocator.systemUser()).save(type);\n+        return type;\n+    }\n+\n+    /**\n+     * This test creates a collection of fields, 2 system ones and 3 text fields: one text data type, one float and one integer\n+     * The idea is to make sure the data type is deserialized in the right way\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void testGetRows_givenFieldsinJSON_ShouldDeserializeRespectingOrderAndDatatypes() throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = createContentType();\n+        final List<Map<String, Object>> fieldList = createTestFields (type.id());\n+        final MoveFieldsForm form     = new MoveFieldsForm(fieldList);\n+\n+        final FieldLayout fieldLayout = form.getRows(type);\n+\n+        assertNotNull(\"Field layour must be not null\", fieldLayout);\n+        assertNotNull(\"Get field must be not null\", fieldLayout.getFields());\n+        assertEquals(\"Field Layout must retrieve 5 fieldds\",5, fieldLayout.getFields().size());\n+        assertTrue(\"The first field on the list must be a RowField\", fieldLayout.getFields().get(0) instanceof RowField);\n+        assertEquals(\"The first field data type must be a DataTypes.SYSTEM\", RowField.class.cast(fieldLayout.getFields().get(0)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The first field name must be fields-0\", \"fields-0\", RowField.class.cast(fieldLayout.getFields().get(0)).name());\n+\n+        assertTrue(\"The second field on the list must be a ColumnField\", fieldLayout.getFields().get(1) instanceof ColumnField);\n+        assertEquals(\"The second field data type must be a DataTypes.SYSTEM\", ColumnField.class.cast(fieldLayout.getFields().get(1)).dataType(), DataTypes.SYSTEM);\n+        assertEquals(\"The second field name must be fields-1\", \"fields-1\", ColumnField.class.cast(fieldLayout.getFields().get(1)).name());\n+\n+        assertTrue(\"The third field on the list must be a TextField\", fieldLayout.getFields().get(2) instanceof TextField);\n+        assertEquals(\"The third field data type must be a DataTypes.TEXT\", TextField.class.cast(fieldLayout.getFields().get(2)).dataType(), DataTypes.TEXT);\n+        assertEquals(\"The third field name must be text\",\"text\", TextField.class.cast(fieldLayout.getFields().get(2)).name());\n+\n+        assertTrue(\"The four field on the list must be a TextField\", fieldLayout.getFields().get(3) instanceof TextField);\n+        assertEquals(\"The four field data type must be a DataTypes.FLOAT\", TextField.class.cast(fieldLayout.getFields().get(3)).dataType(), DataTypes.FLOAT);\n+        assertEquals(\"The four field name must be text\", \"decimal\", TextField.class.cast(fieldLayout.getFields().get(3)).name());\n+\n+        assertTrue(\"The five field on the list must be a TextField\", fieldLayout.getFields().get(4) instanceof TextField);\n+        assertEquals(\"The five field data type must be a DataTypes.INTEGER\",TextField.class.cast(fieldLayout.getFields().get(4)).dataType(), DataTypes.INTEGER);\n+        assertEquals(\"The four field name must be number\", \"number\", TextField.class.cast(fieldLayout.getFields().get(4)).name());\n+\n+    }\n+\n+    final List<Map<String, Object>> createTestFields (final String contentTypeId) {\n+\n+        final List<Map<String, Object>> fieldList = new ArrayList<>();\n+        final Map<String, Object> rowField = CollectionsUtils.map(\"clazz\" , \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n+                \"contentTypeId\", contentTypeId,\n+                \"dataType\" , \"SYSTEM\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dde7da0e8becf1065643ce4350e51a3dd29a956"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2393, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}