{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjU0NTYz", "number": 18568, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozM1rOEBDqBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0OFrOEBDqUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozM1rOGcuCNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozM1rOGcuCNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU0Mg==", "bodyText": "Issue found: Parameter 'response' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767542", "createdAt": "2020-05-29T22:30:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozNVrOGcuCPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozNVrOGcuCPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU1MA==", "bodyText": "Issue found: Local variable 'request' could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767550", "createdAt": "2020-05-29T22:30:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+\n+public class DotGraphQLHttpServletTest {\n+\n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testing_cors_headers() {\n+        \n+        HashMap<String,String> headers = new DotGraphQLHttpServlet().corsHeaders.apply();\n+        \n+        assertEquals(headers.get(\"access-control-allow-origin\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-credentials\"), \"true\");\n+        assertEquals(headers.get(\"access-control-allow-headers\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-methods\"), \"GET,PUT,POST,DELETE,HEAD,OPTIONS,PATCH\");\n+        \n+        // this property is specifically overriden for graphql\n+        assertEquals(headers.get(\"access-control-expose-headers\"), \"Content-Type,Cache-Control\");\n+    }\n+\n+    @Test\n+    public void testing_GETRequestToGraphQLServer_returnResponseWithExpectedHeaders()\n+            throws ServletException, IOException {\n+\n+        MockHttpRequest request = new MockHttpRequest(\"localhost\", \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozNlrOGcuCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozNlrOGcuCRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU1Nw==", "bodyText": "Issue found: Parameter 'name' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767557", "createdAt": "2020-05-29T22:30:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();\n+      oldHeaders.forEach(header->{\n+        this.headers.put(header, response.getHeader(header));\n+      });\n+    }\n+  }\n+\n+  public MockHeaderResponse(HttpServletResponse response, final String key, final String value) {\n+    this(response);\n+    headers.put(key, value);\n+  }\n+\n+  public HttpServletResponse response() {\n+    return this;\n+  }\n+\n+  @Override\n+  public String getHeader(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozN1rOGcuCSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozN1rOGcuCSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU2Mw==", "bodyText": "Issue found: Parameter 'response' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767563", "createdAt": "2020-05-29T22:30:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();\n+      oldHeaders.forEach(header->{\n+        this.headers.put(header, response.getHeader(header));\n+      });\n+    }\n+  }\n+\n+  public MockHeaderResponse(HttpServletResponse response, final String key, final String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozOFrOGcuCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozOFrOGcuCUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU2OA==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767568", "createdAt": "2020-05-29T22:30:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozOVrOGcuCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDozOVrOGcuCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU3NQ==", "bodyText": "Issue found: Avoid variables with short names like o", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767575", "createdAt": "2020-05-29T22:30:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();\n+      oldHeaders.forEach(header->{\n+        this.headers.put(header, response.getHeader(header));\n+      });\n+    }\n+  }\n+\n+  public MockHeaderResponse(HttpServletResponse response, final String key, final String value) {\n+    this(response);\n+    headers.put(key, value);\n+  }\n+\n+  public HttpServletResponse response() {\n+    return this;\n+  }\n+\n+  @Override\n+  public String getHeader(String name) {\n+    return headers.get(name);\n+  }\n+\n+  @Override\n+  public Collection<String> getHeaderNames() {\n+    return headers.keySet();\n+  }\n+\n+  public void setHeader(final String name, final String o) {\n+    headers.put(name, o);\n+  }\n+\n+  public void addHeader(final String name, final String o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MFrOGcuCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MFrOGcuCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU4Mg==", "bodyText": "Issue found: Local variable 'headers' could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767582", "createdAt": "2020-05-29T22:30:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+\n+public class DotGraphQLHttpServletTest {\n+\n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testing_cors_headers() {\n+        \n+        HashMap<String,String> headers = new DotGraphQLHttpServlet().corsHeaders.apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MlrOGcuCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MlrOGcuCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU5MQ==", "bodyText": "Issue found: Local variable 'graphQLHttpServlet' could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767591", "createdAt": "2020-05-29T22:30:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+\n+public class DotGraphQLHttpServletTest {\n+\n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testing_cors_headers() {\n+        \n+        HashMap<String,String> headers = new DotGraphQLHttpServlet().corsHeaders.apply();\n+        \n+        assertEquals(headers.get(\"access-control-allow-origin\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-credentials\"), \"true\");\n+        assertEquals(headers.get(\"access-control-allow-headers\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-methods\"), \"GET,PUT,POST,DELETE,HEAD,OPTIONS,PATCH\");\n+        \n+        // this property is specifically overriden for graphql\n+        assertEquals(headers.get(\"access-control-expose-headers\"), \"Content-Type,Cache-Control\");\n+    }\n+\n+    @Test\n+    public void testing_GETRequestToGraphQLServer_returnResponseWithExpectedHeaders()\n+            throws ServletException, IOException {\n+\n+        MockHttpRequest request = new MockHttpRequest(\"localhost\", \"/\");\n+        MockHeaderResponse response = new MockHeaderResponse(new MockHttpResponse());\n+        DotGraphQLHttpServlet graphQLHttpServlet = new DotGraphQLHttpServlet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTgwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MlrOGcuCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0MlrOGcuCbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzU5Nw==", "bodyText": "Issue found: Local variable 'response' could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767597", "createdAt": "2020-05-29T22:30:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+\n+public class DotGraphQLHttpServletTest {\n+\n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testing_cors_headers() {\n+        \n+        HashMap<String,String> headers = new DotGraphQLHttpServlet().corsHeaders.apply();\n+        \n+        assertEquals(headers.get(\"access-control-allow-origin\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-credentials\"), \"true\");\n+        assertEquals(headers.get(\"access-control-allow-headers\"), \"*\");\n+        assertEquals(headers.get(\"access-control-allow-methods\"), \"GET,PUT,POST,DELETE,HEAD,OPTIONS,PATCH\");\n+        \n+        // this property is specifically overriden for graphql\n+        assertEquals(headers.get(\"access-control-expose-headers\"), \"Content-Type,Cache-Control\");\n+    }\n+\n+    @Test\n+    public void testing_GETRequestToGraphQLServer_returnResponseWithExpectedHeaders()\n+            throws ServletException, IOException {\n+\n+        MockHttpRequest request = new MockHttpRequest(\"localhost\", \"/\");\n+        MockHeaderResponse response = new MockHeaderResponse(new MockHttpResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTg2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NFrOGcuCdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NFrOGcuCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYwNA==", "bodyText": "Issue found: Avoid unused imports such as 'javax.servlet.http.HttpServletResponse'", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767604", "createdAt": "2020-05-29T22:30:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQzOTk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NVrOGcuCfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NVrOGcuCfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYxMg==", "bodyText": "Issue found: Local variable 'oldHeaders' could be declared final", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767612", "createdAt": "2020-05-29T22:30:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQ0MDAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NlrOGcuChQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0NlrOGcuChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYyMQ==", "bodyText": "Issue found: Overriding method merely calls super", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767621", "createdAt": "2020-05-29T22:30:46Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();\n+      oldHeaders.forEach(header->{\n+        this.headers.put(header, response.getHeader(header));\n+      });\n+    }\n+  }\n+\n+  public MockHeaderResponse(HttpServletResponse response, final String key, final String value) {\n+    this(response);\n+    headers.put(key, value);\n+  }\n+\n+  public HttpServletResponse response() {\n+    return this;\n+  }\n+\n+  @Override\n+  public String getHeader(String name) {\n+    return headers.get(name);\n+  }\n+\n+  @Override\n+  public Collection<String> getHeaderNames() {\n+    return headers.keySet();\n+  }\n+\n+  public void setHeader(final String name, final String o) {\n+    headers.put(name, o);\n+  }\n+\n+  public void addHeader(final String name, final String o) {\n+    headers.put(name, o);\n+  }\n+\n+  @Override\n+  public Collection<String> getHeaders(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQ0MDEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0N1rOGcuCjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0N1rOGcuCjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYyOQ==", "bodyText": "Issue found: Avoid unused imports such as 'javax.servlet.http.HttpServletRequest'", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767629", "createdAt": "2020-05-29T22:30:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQ0MDE0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0N1rOGcuCkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0N1rOGcuCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYzMw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767633", "createdAt": "2020-05-29T22:30:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/DotGraphQLHttpServletTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.dotcms.graphql;\n+\n+import static org.junit.Assert.*;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.response.MockHeaderResponse;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.util.IntegrationTestInitService;\n+\n+public class DotGraphQLHttpServletTest {\n+\n+    \n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTQ0MDE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0OFrOGcuClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjozMDo0OFrOGcuClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc2NzYzNg==", "bodyText": "Issue found: Avoid variables with short names like o", "url": "https://github.com/dotCMS/core/pull/18568#discussion_r432767636", "createdAt": "2020-05-29T22:30:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/response/MockHeaderResponse.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.mock.response;\n+\n+import com.dotcms.mock.request.MockHttpRequest;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+/**\n+ * Mock {@link HttpServletRequest} with a {@link Map} as part of the class that will contain the\n+ * Headers.\n+ *\n+ * See an example here: {@link MockHttpRequest#MockHttpRequest(String, String)}\n+ */\n+public class MockHeaderResponse extends HttpServletResponseWrapper implements MockResponse {\n+  final Map<String, String> headers = new HashMap<String, String>();\n+\n+  public MockHeaderResponse(HttpServletResponse response) {\n+    super(response);\n+    if (response.getHeaderNames() != null) {\n+      Collection<String> oldHeaders = response.getHeaderNames();\n+      oldHeaders.forEach(header->{\n+        this.headers.put(header, response.getHeader(header));\n+      });\n+    }\n+  }\n+\n+  public MockHeaderResponse(HttpServletResponse response, final String key, final String value) {\n+    this(response);\n+    headers.put(key, value);\n+  }\n+\n+  public HttpServletResponse response() {\n+    return this;\n+  }\n+\n+  @Override\n+  public String getHeader(String name) {\n+    return headers.get(name);\n+  }\n+\n+  @Override\n+  public Collection<String> getHeaderNames() {\n+    return headers.keySet();\n+  }\n+\n+  public void setHeader(final String name, final String o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1953a9f7be0d2f85dd7d49147bad519dc73f7e7"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2112, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}