{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTA2NDAz", "number": 18679, "title": "#18641 Introduce Elasticsearch scroll + more improvements for content export", "bodyText": "Edited by @dsilvam. This PR includes the following:\n\n\nIntroduce Elasticsearch Scrolling\n when exporting content. This avoids having to increase the ES result-window above the default limit of 10k, which is not recommended.  This also removes the limit of 100k that we had in the past for exported content.\n\n\nRefactor code that was taking considerable time (shown by Glowroot) when exporting content. This includes:\n\nRemoved unnecesary converstion between Legacy Structures and new Content Types\nAvoid doing processing meant to be for the Content Search screen and not for exporting content (including permissions and workflow info in the exported data).\nAvoid the expensive path of calling ESContentFactoryImpl#findContentlets which for a large set executes a lot of queries with SQL IN which is expensive. Instead we now return a List of ContentSearch objects straight from from the index search and load each contentlet one by one. Not the best but better than before.\nAdded DBTransformers for both WorkflowTask and WorkflowScheme instead of relying on BeanUtils.copyProperties , which was taking a performance hit, reported by Glowroot also\n\n\n\nAnother unrelated changed included, which was found while doing an ab testing :\n\nAdded a 404 Cache for Language, to be used (for now) specifically for the getFallbackLanguage. This was making a DB call for every page requested\n\nThe following comment is left as historical. Originally by @jcastro-dotcms\n\n\u2026 discussed with Will, the real code fix is a complete refactoring of this code in order to:\n\nEliminate the EditContentletAction class, as we've done with several other DWR classes.\nCome up with a more efficient way of exporting high amounts of Contentlets as a CSV file.\n\nThe R&S Team needs to look into this and perform the final code changes. This PR contains the code changes that will be deployed to the customer environment in order to bring old functionality back.\nFor this specific \"temporary fix\", once you have a valid functional ES Index, you need to run this curl command:\n(THIS CURL COMMAND IS NOT NECESSARY ANYMORE AS THE CHANGES IN THE es-content-mapping.json FILE TAKES CARE OF IT)\ncurl -H 'Content-Type: application/json' -XPUT 'http://localhost:9200/_all/_settings' -d '{\n  \"index.max_result_window\" : \"100000\"\n}'\n\nThe code changes involved:\n\nBringing back the max result limit we had in 4.x versions. That is, 100,000 results.\nUsing the Notification API for users to know (1) when the generation of the CSV file has begun, and (2) the total amount of exported content and the name of the CSV file.\nAdditional logging in the dotcms.log file that reports the progress every 2,000 contents being added to the file.", "createdAt": "2020-06-16T22:47:45Z", "url": "https://github.com/dotCMS/core/pull/18679", "merged": true, "mergeCommit": {"oid": "941d2fa041dd9058e28ee9b6478d7c5db63072dd"}, "closed": true, "closedAt": "2020-07-13T23:16:53Z", "author": {"login": "jcastro-dotcms"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr9P6egH2gAyNDM1NTA2NDAzOjQ0ZmI0YTc5OTA3Y2ZhNTZiNWYxZGE2NzAwMDBjYWQyODcwYmY5OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0muceAFqTQ0NzU0Mzc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44fb4a79907cfa56b5f1da670000cad2870bf98b", "author": {"user": {"login": "jcastro-dotcms", "name": "Jose Castro"}}, "url": "https://github.com/dotCMS/core/commit/44fb4a79907cfa56b5f1da670000cad2870bf98b", "committedDate": "2020-06-16T22:46:25Z", "message": "#18641 : IMPORTANT! This is NOT the final code fix for this issue. As discussed with Will, the real code fix is a complete refactoring of this code in order to:\n\n1. Eliminate the `EditContentletAction` class, as we've done with several other DWR classes.\n2. Come up with a more efficient way of exporting high amounts of Contentlets as a CSV file.\n\nThe R&S Team needs to look into this and perform the final code changes. This PR contains the code changes that will be deployed to the customer environment in order to bring old functionality back. For this specific \"temporary fix\", once you have a valid functional ES Index, you need to run this curl command:\n```\ncurl -H 'Content-Type: application/json' -XPUT 'http://localhost:9200/_all/_settings' -d '{\n  \"index.max_result_window\" : \"100000\"\n}'\n```\nThe code changes involved:\n\n- Bringing back the max result limit we had in 4.x versions. That is, 100,000 results.\n- Using the Notification API for users to know (1) when the generation of the CSV file has begun, and (2) the total amount of exported content and the name of the CSV file.\n- Additional logging in the `dotcms.log` file that reports the progress every 2,000 contents being added to the file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1646f9148733e48aa4263662156ae9a632c97df2", "author": {"user": {"login": "jcastro-dotcms", "name": "Jose Castro"}}, "url": "https://github.com/dotCMS/core/commit/1646f9148733e48aa4263662156ae9a632c97df2", "committedDate": "2020-06-17T20:22:13Z", "message": "#18641 : Updating ES configuration values to allow dotCMS to return up to 100,000 results, and set the field limit up to 10,000 as required by several customers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fde4845a719cccb662b9bd56caae6dc5cc66e11a", "author": {"user": {"login": "jcastro-dotcms", "name": "Jose Castro"}}, "url": "https://github.com/dotCMS/core/commit/fde4845a719cccb662b9bd56caae6dc5cc66e11a", "committedDate": "2020-06-17T23:26:44Z", "message": "#18641 : Read the correct properties from the es-content-settings.json file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e", "author": {"user": {"login": "jcastro-dotcms", "name": "Jose Castro"}}, "url": "https://github.com/dotCMS/core/commit/e4e22c1deb5bf13abbab9496c59680da1aeafe6e", "committedDate": "2020-06-18T17:41:17Z", "message": "#18641 : Changing notifications from the old Notification bar to the new Toast Notifications."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTE3NzEw", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-433517710", "createdAt": "2020-06-18T17:53:56Z", "commit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTMyMTA2", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-433532106", "createdAt": "2020-06-18T18:14:18Z", "commit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjQ1NTEy", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-439245512", "createdAt": "2020-06-29T15:13:30Z", "commit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozMFrOGqVoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozMFrOGqVoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA==", "bodyText": "We need to remove our non-standard way of configuring elasticsearch and instead rely on these changes:\n\n  \n    \n      core/dotCMS/src/main/resources/es-content-settings.json\n    \n    \n        Lines 29 to 33\n      in\n      e4e22c1\n    \n    \n    \n    \n\n        \n          \n           \"index.max_result_window\" : \"100000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.total_fields.limit\" : \"10000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.nested_fields.limit\" : \"10000\"", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447047740", "createdAt": "2020-06-29T15:13:30Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "diffHunk": "@@ -612,10 +612,12 @@ public synchronized CreateIndexResponse createIndex(final String indexName, Stri\n \n \t\tmap.put(\"number_of_shards\", shards);\n \t\tmap.put(\"index.auto_expand_replicas\", \"0-all\");\n-\t\tmap.put(\"index.mapping.total_fields.limit\",\n-\t\t\tConfig.getIntProperty(\"ES_INDEX_MAPPING_TOTAL_FIELD_LIMITS\", 5000));\n-        map.put(\"index.mapping.nested_fields.limit\",\n-                Config.getIntProperty(\"ES_INDEX_MAPPING_NESTED_FIELDS_LIMITS\", 5000));\n+\t\tif (!map.containsKey(\"index.mapping.total_fields.limit\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e383af8abb752237d120c5bbf77d0b9cf0d19b46", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/e383af8abb752237d120c5bbf77d0b9cf0d19b46", "committedDate": "2020-07-06T22:44:36Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18641-remove-content-export-limit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98867fcf391134dc8cade5df57015918b83c1db8", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/98867fcf391134dc8cade5df57015918b83c1db8", "committedDate": "2020-07-09T00:10:27Z", "message": "#18641 performance improvements for export process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6b7c7b27b1e543933bbdac5f315c206f48ec03", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/7f6b7c7b27b1e543933bbdac5f315c206f48ec03", "committedDate": "2020-07-09T19:20:05Z", "message": "#18641 more perf changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6baafc2c3f64e5195b5d5b229391c48203263ef", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/a6baafc2c3f64e5195b5d5b229391c48203263ef", "committedDate": "2020-07-09T20:35:29Z", "message": "#18641 interface to exclude non-importable fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f2925af61b304b7911efb749ccf9b84736ffb3", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/04f2925af61b304b7911efb749ccf9b84736ffb3", "committedDate": "2020-07-09T22:24:57Z", "message": "#18641 leave 10k window"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9d71210b2c611583c4919b6f4501a2c2615d1f", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/2d9d71210b2c611583c4919b6f4501a2c2615d1f", "committedDate": "2020-07-09T22:34:27Z", "message": "#18641 fixing bug found by integration-test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDI1Mzk4", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-446025398", "createdAt": "2020-07-09T23:06:53Z", "commit": {"oid": "2d9d71210b2c611583c4919b6f4501a2c2615d1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNjo1NFrOGvkqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNjo1NFrOGvkqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjk1NA==", "bodyText": "will remove this", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452536954", "createdAt": "2020-07-09T23:06:54Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -963,31 +963,37 @@ public void addPermissionsToQuery(StringBuffer buffy, User user, List<Role> role\n         if(UtilMethods.isSet(sortBy) && sortBy.trim().equalsIgnoreCase(\"random\")){\n             sortBy=\"random\";\n         }\n-        if(limit>MAX_LIMIT || limit <=0){\n-            limit = MAX_LIMIT;\n-        }\n-        SearchHits lc = contentFactory.indexSearch(buffy.toString(), limit, offset, sortBy);\n-        PaginatedArrayList <ContentletSearch> list=new PaginatedArrayList<>();\n-        list.setTotalResults(lc.getTotalHits().value);\n+//        if(limit>MAX_LIMIT || limit <=0){\n+//            limit = MAX_LIMIT;\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9d71210b2c611583c4919b6f4501a2c2615d1f"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b74ef6b9d02f10bf28a1d46b84b1884ae67f15c3", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/b74ef6b9d02f10bf28a1d46b84b1884ae67f15c3", "committedDate": "2020-07-09T23:07:52Z", "message": "#18641 cleaning up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/4fc93c67146e09f0021c3ad2c47dbce88703e772", "committedDate": "2020-07-09T23:12:16Z", "message": "#18641 cleaning up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDY0MDcz", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-446464073", "createdAt": "2020-07-10T14:48:52Z", "commit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo0ODo1M1rOGv6TIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1NzoyN1rOGv6ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTQyNw==", "bodyText": "should this throw?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891427", "createdAt": "2020-07-10T14:48:53Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){\n+                Logger.error(this,e.getMessage(),e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTg4OQ==", "bodyText": "#CloseDBIfOpened?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891889", "createdAt": "2020-07-10T14:49:35Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ==", "bodyText": "I likes!", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452892569", "createdAt": "2020-07-10T14:50:37Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.dotcms.contenttype.model.field;\n+\n+/**\n+ * a {@link Field} which can't be exported when exporting content needs to implement this marker interface.\n+ *\n+ *\n+ */\n+public interface Unexportable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzcyOA==", "bodyText": "Hate to say it but this needs to be moved to a resource - even as is with a bunch of ugly parameters. We should not invest any more time in Struts actions and should take the opportunity to remove them when possible.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452893728", "createdAt": "2020-07-10T14:52:25Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/action/EditContentletAction.java", "diffHunk": "@@ -628,12 +643,20 @@ else if ((cmd != null) && cmd.equals(com.dotmarketing.util.Constants.UNLOCK)) {\n \t\t\t_sendToReferral(req, res, referer);\r\n \t\t}else if(cmd != null && cmd.equals(\"export\")){\r\n \t\t\ttry {\r\n-\t\t\t\tString structureInode = req.getParameter(\"expStructureInode\");\r\n-\r\n-\t\t\t\tActionResponseImpl resImpl = (ActionResponseImpl) res;\r\n-\t\t\t\tHttpServletResponse response = resImpl.getHttpServletResponse();\r\n-\r\n-\t\t\t\tdownloadToExcel(response, user,searchContentlets(req,res,config,form,user,\"Excel\"), structureInode);\r\n+\t\t\t\tfinal String contentTypeId = req.getParameter(\"expStructureInode\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NTg2MQ==", "bodyText": "How did the 404 cache for a language get into this PR?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452895861", "createdAt": "2020-07-10T14:55:54Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCache.java", "diffHunk": "@@ -13,7 +13,9 @@\n public abstract class LanguageCache implements Cachable{\n \n     protected abstract void addLanguage(Language l);\n-    \n+\n+    protected abstract void add404Language(String languageCode, String countryCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NjcyNw==", "bodyText": "This is good but I do not see the invalidation when a new language is added?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896727", "createdAt": "2020-07-10T14:57:11Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;\n+\t\t}\n+\n \t\ttry {\n \n-\t\t\treturn fromDbMap(new DotConnect()\n+\t\t\tlang = fromDbMap(new DotConnect()\n \t\t\t\t\t.setSQL(SELECT_LANGUAGE_BY_LANG_CODE_ONLY)\n \t\t\t\t\t.addParam(languageCode.toLowerCase())\n \t\t\t\t\t.loadObjectResults().stream().findFirst().orElse(null));\n \n+\t\t\tif(lang == null){\n+\t\t\t\tCacheLocator.getLanguageCache().add404Language(languageCode, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw==", "bodyText": "Again, why in this PR?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896883", "createdAt": "2020-07-10T14:57:27Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "diffHunk": "@@ -204,11 +206,11 @@ private Object convertMaptoObject(Map<String, Object> map, Class clazz) throws I\n \t\t} else if (obj instanceof WorkflowActionClassParameter) {\n \t\t\treturn this.convertActionClassParameter(map);\n \t\t} else if (obj instanceof WorkflowScheme) {\n-\t\t\treturn this.convertScheme(map);\n+\t\t\treturn WorkflowSchemeTransformer.transform(map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b76989899cf170417eea94b0a54cc35f5e15e5c", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/4b76989899cf170417eea94b0a54cc35f5e15e5c", "committedDate": "2020-07-10T15:51:23Z", "message": "#18641 code-review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTcxMzE5", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-446571319", "createdAt": "2020-07-10T17:23:04Z", "commit": {"oid": "4b76989899cf170417eea94b0a54cc35f5e15e5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c30b2136de780ab7b4b5be637448dcd8ec2d79", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/66c30b2136de780ab7b4b5be637448dcd8ec2d79", "committedDate": "2020-07-13T16:31:18Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18641-remove-content-export-limit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a975fd2b24830f489ee8ed7110a2f3624a859f", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/22a975fd2b24830f489ee8ed7110a2f3624a859f", "committedDate": "2020-07-13T17:11:37Z", "message": "#18641 set proper limit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDY2NzA4", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-447466708", "createdAt": "2020-07-13T17:45:16Z", "commit": {"oid": "22a975fd2b24830f489ee8ed7110a2f3624a859f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/8249a7f8345054e6f59a96d16053da13c91fb798", "committedDate": "2020-07-13T19:22:08Z", "message": "#18641 make Unexportable an annotation instead of a flag Interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTM4MzQz", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-447538343", "createdAt": "2020-07-13T19:29:06Z", "commit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowNlrOGw2uLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowNlrOGw2uLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTM4OQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881389", "createdAt": "2020-07-13T19:29:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTM4MzYw", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-447538360", "createdAt": "2020-07-13T19:29:07Z", "commit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowN1rOGw2uOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowN1rOGw2uOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTQwMA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881400", "createdAt": "2020-07-13T19:29:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+    PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTQzNzc2", "url": "https://github.com/dotCMS/core/pull/18679#pullrequestreview-447543776", "createdAt": "2020-07-13T19:37:16Z", "commit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}