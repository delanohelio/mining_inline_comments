{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTA2NDAz", "number": 18679, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozMFrOEJtLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowN1rOEN9ZAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjEyODQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToxMzozMFrOGqVoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyOTozMVrOGqdEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA==", "bodyText": "We need to remove our non-standard way of configuring elasticsearch and instead rely on these changes:\n\n  \n    \n      core/dotCMS/src/main/resources/es-content-settings.json\n    \n    \n        Lines 29 to 33\n      in\n      e4e22c1\n    \n    \n    \n    \n\n        \n          \n           \"index.max_result_window\" : \"100000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.total_fields.limit\" : \"10000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.nested_fields.limit\" : \"10000\"", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447047740", "createdAt": "2020-06-29T15:13:30Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "diffHunk": "@@ -612,10 +612,12 @@ public synchronized CreateIndexResponse createIndex(final String indexName, Stri\n \n \t\tmap.put(\"number_of_shards\", shards);\n \t\tmap.put(\"index.auto_expand_replicas\", \"0-all\");\n-\t\tmap.put(\"index.mapping.total_fields.limit\",\n-\t\t\tConfig.getIntProperty(\"ES_INDEX_MAPPING_TOTAL_FIELD_LIMITS\", 5000));\n-        map.put(\"index.mapping.nested_fields.limit\",\n-                Config.getIntProperty(\"ES_INDEX_MAPPING_NESTED_FIELDS_LIMITS\", 5000));\n+\t\tif (!map.containsKey(\"index.mapping.total_fields.limit\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2Nzg1Ng==", "bodyText": "Per my conversation with Jose, this looks good. I just want to be sure that our es-content-settings.json is correct and should be the place where we make these changes in the future.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447167856", "createdAt": "2020-06-29T18:26:38Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "diffHunk": "@@ -612,10 +612,12 @@ public synchronized CreateIndexResponse createIndex(final String indexName, Stri\n \n \t\tmap.put(\"number_of_shards\", shards);\n \t\tmap.put(\"index.auto_expand_replicas\", \"0-all\");\n-\t\tmap.put(\"index.mapping.total_fields.limit\",\n-\t\t\tConfig.getIntProperty(\"ES_INDEX_MAPPING_TOTAL_FIELD_LIMITS\", 5000));\n-        map.put(\"index.mapping.nested_fields.limit\",\n-                Config.getIntProperty(\"ES_INDEX_MAPPING_NESTED_FIELDS_LIMITS\", 5000));\n+\t\tif (!map.containsKey(\"index.mapping.total_fields.limit\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA=="}, "originalCommit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2OTYzMg==", "bodyText": "Discussed this comment with @wezell , and confirmed that we're reading config files from the es-content-settings.json file only, and not using the dotcms-config-cluster.properties file anymore. The IF in there is just meant to set default values in case the JSON file is not specifying them.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447169632", "createdAt": "2020-06-29T18:29:31Z", "author": {"login": "jcastro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "diffHunk": "@@ -612,10 +612,12 @@ public synchronized CreateIndexResponse createIndex(final String indexName, Stri\n \n \t\tmap.put(\"number_of_shards\", shards);\n \t\tmap.put(\"index.auto_expand_replicas\", \"0-all\");\n-\t\tmap.put(\"index.mapping.total_fields.limit\",\n-\t\t\tConfig.getIntProperty(\"ES_INDEX_MAPPING_TOTAL_FIELD_LIMITS\", 5000));\n-        map.put(\"index.mapping.nested_fields.limit\",\n-                Config.getIntProperty(\"ES_INDEX_MAPPING_NESTED_FIELDS_LIMITS\", 5000));\n+\t\tif (!map.containsKey(\"index.mapping.total_fields.limit\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA=="}, "originalCommit": {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTU2Mzc2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNjo1NFrOGvkqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNjo1NFrOGvkqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjk1NA==", "bodyText": "will remove this", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452536954", "createdAt": "2020-07-09T23:06:54Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -963,31 +963,37 @@ public void addPermissionsToQuery(StringBuffer buffy, User user, List<Role> role\n         if(UtilMethods.isSet(sortBy) && sortBy.trim().equalsIgnoreCase(\"random\")){\n             sortBy=\"random\";\n         }\n-        if(limit>MAX_LIMIT || limit <=0){\n-            limit = MAX_LIMIT;\n-        }\n-        SearchHits lc = contentFactory.indexSearch(buffy.toString(), limit, offset, sortBy);\n-        PaginatedArrayList <ContentletSearch> list=new PaginatedArrayList<>();\n-        list.setTotalResults(lc.getTotalHits().value);\n+//        if(limit>MAX_LIMIT || limit <=0){\n+//            limit = MAX_LIMIT;\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d9d71210b2c611583c4919b6f4501a2c2615d1f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg2MTExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo0ODo1M1rOGv6TIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyNzowNlrOGv7tYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTQyNw==", "bodyText": "should this throw?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891427", "createdAt": "2020-07-10T14:48:53Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){\n+                Logger.error(this,e.getMessage(),e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDUzMA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452914530", "createdAt": "2020-07-10T15:27:06Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){\n+                Logger.error(this,e.getMessage(),e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTQyNw=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg2MzkxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo0OTozNVrOGv6U8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozODo0OFrOGv8HNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTg4OQ==", "bodyText": "#CloseDBIfOpened?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891889", "createdAt": "2020-07-10T14:49:35Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTE0Mw==", "bodyText": "Original indexSearch (not scroll) method doesn't have it. The only db operation it does is a call to get the indices info=APILocator.getIndiciesAPI().loadIndicies(); which already has the annotation", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452921143", "createdAt": "2020-07-10T15:38:48Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTg4OQ=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg2ODMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1MDozN1rOGv6XmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyMjo0NlrOGw2gYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ==", "bodyText": "I likes!", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452892569", "createdAt": "2020-07-10T14:50:37Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.dotcms.contenttype.model.field;\n+\n+/**\n+ * a {@link Field} which can't be exported when exporting content needs to implement this marker interface.\n+ *\n+ *\n+ */\n+public interface Unexportable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMTU5Mw==", "bodyText": "cool, but flag interfaces are so so, I would prefer an annotation", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453811593", "createdAt": "2020-07-13T17:27:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.dotcms.contenttype.model.field;\n+\n+/**\n+ * a {@link Field} which can't be exported when exporting content needs to implement this marker interface.\n+ *\n+ *\n+ */\n+public interface Unexportable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3Nzg1OQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453877859", "createdAt": "2020-07-13T19:22:46Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.dotcms.contenttype.model.field;\n+\n+/**\n+ * a {@link Field} which can't be exported when exporting content needs to implement this marker interface.\n+ *\n+ *\n+ */\n+public interface Unexportable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg3NTc2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/action/EditContentletAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1MjoyNVrOGv6cIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNzoyOToyMVrOGwyhhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzcyOA==", "bodyText": "Hate to say it but this needs to be moved to a resource - even as is with a bunch of ugly parameters. We should not invest any more time in Struts actions and should take the opportunity to remove them when possible.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452893728", "createdAt": "2020-07-10T14:52:25Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/action/EditContentletAction.java", "diffHunk": "@@ -628,12 +643,20 @@ else if ((cmd != null) && cmd.equals(com.dotmarketing.util.Constants.UNLOCK)) {\n \t\t\t_sendToReferral(req, res, referer);\r\n \t\t}else if(cmd != null && cmd.equals(\"export\")){\r\n \t\t\ttry {\r\n-\t\t\t\tString structureInode = req.getParameter(\"expStructureInode\");\r\n-\r\n-\t\t\t\tActionResponseImpl resImpl = (ActionResponseImpl) res;\r\n-\t\t\t\tHttpServletResponse response = resImpl.getHttpServletResponse();\r\n-\r\n-\t\t\t\tdownloadToExcel(response, user,searchContentlets(req,res,config,form,user,\"Excel\"), structureInode);\r\n+\t\t\t\tfinal String contentTypeId = req.getParameter(\"expStructureInode\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMjYxMw==", "bodyText": "Totally agree.\nThe effort is important so do it right", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453812613", "createdAt": "2020-07-13T17:29:21Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/action/EditContentletAction.java", "diffHunk": "@@ -628,12 +643,20 @@ else if ((cmd != null) && cmd.equals(com.dotmarketing.util.Constants.UNLOCK)) {\n \t\t\t_sendToReferral(req, res, referer);\r\n \t\t}else if(cmd != null && cmd.equals(\"export\")){\r\n \t\t\ttry {\r\n-\t\t\t\tString structureInode = req.getParameter(\"expStructureInode\");\r\n-\r\n-\t\t\t\tActionResponseImpl resImpl = (ActionResponseImpl) res;\r\n-\t\t\t\tHttpServletResponse response = resImpl.getHttpServletResponse();\r\n-\r\n-\t\t\t\tdownloadToExcel(response, user,searchContentlets(req,res,config,form,user,\"Excel\"), structureInode);\r\n+\t\t\t\tfinal String contentTypeId = req.getParameter(\"expStructureInode\");\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzcyOA=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg4OTExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1NTo1NFrOGv6kdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyNDo0OVrOGv7oGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NTg2MQ==", "bodyText": "How did the 404 cache for a language get into this PR?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452895861", "createdAt": "2020-07-10T14:55:54Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCache.java", "diffHunk": "@@ -13,7 +13,9 @@\n public abstract class LanguageCache implements Cachable{\n \n     protected abstract void addLanguage(Language l);\n-    \n+\n+    protected abstract void add404Language(String languageCode, String countryCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzE3OQ==", "bodyText": "This is explained in the description - I was because I was doing an ab testing to help @freddyucv reproduce an error and I saw a db hit for every page rendered", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452913179", "createdAt": "2020-07-10T15:24:49Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCache.java", "diffHunk": "@@ -13,7 +13,9 @@\n public abstract class LanguageCache implements Cachable{\n \n     protected abstract void addLanguage(Language l);\n-    \n+\n+    protected abstract void add404Language(String languageCode, String countryCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NTg2MQ=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg5NDY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1NzoxMVrOGv6n1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo0Nzo1OVrOGv8asA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NjcyNw==", "bodyText": "This is good but I do not see the invalidation when a new language is added?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896727", "createdAt": "2020-07-10T14:57:11Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;\n+\t\t}\n+\n \t\ttry {\n \n-\t\t\treturn fromDbMap(new DotConnect()\n+\t\t\tlang = fromDbMap(new DotConnect()\n \t\t\t\t\t.setSQL(SELECT_LANGUAGE_BY_LANG_CODE_ONLY)\n \t\t\t\t\t.addParam(languageCode.toLowerCase())\n \t\t\t\t\t.loadObjectResults().stream().findFirst().orElse(null));\n \n+\t\t\tif(lang == null){\n+\t\t\t\tCacheLocator.getLanguageCache().add404Language(languageCode, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjEyOA==", "bodyText": "Already happens here: \n  \n    \n      core/dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCacheImpl.java\n    \n    \n         Line 145\n      in\n      4fc93c6\n    \n    \n    \n    \n\n        \n          \n           cache.remove(getPrimaryGroup() + languageKey,getPrimaryGroup());", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452926128", "createdAt": "2020-07-10T15:47:59Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;\n+\t\t}\n+\n \t\ttry {\n \n-\t\t\treturn fromDbMap(new DotConnect()\n+\t\t\tlang = fromDbMap(new DotConnect()\n \t\t\t\t\t.setSQL(SELECT_LANGUAGE_BY_LANG_CODE_ONLY)\n \t\t\t\t\t.addParam(languageCode.toLowerCase())\n \t\t\t\t\t.loadObjectResults().stream().findFirst().orElse(null));\n \n+\t\t\tif(lang == null){\n+\t\t\t\tCacheLocator.getLanguageCache().add404Language(languageCode, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NjcyNw=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzg5NTcxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNDo1NzoyN1rOGv6ocw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTo1MzoxOVrOGv8mpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw==", "bodyText": "Again, why in this PR?", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896883", "createdAt": "2020-07-10T14:57:27Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "diffHunk": "@@ -204,11 +206,11 @@ private Object convertMaptoObject(Map<String, Object> map, Class clazz) throws I\n \t\t} else if (obj instanceof WorkflowActionClassParameter) {\n \t\t\treturn this.convertActionClassParameter(map);\n \t\t} else if (obj instanceof WorkflowScheme) {\n-\t\t\treturn this.convertScheme(map);\n+\t\t\treturn WorkflowSchemeTransformer.transform(map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzM2MA==", "bodyText": "Explained in the description also", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452913360", "createdAt": "2020-07-10T15:25:07Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "diffHunk": "@@ -204,11 +206,11 @@ private Object convertMaptoObject(Map<String, Object> map, Class clazz) throws I\n \t\t} else if (obj instanceof WorkflowActionClassParameter) {\n \t\t\treturn this.convertActionClassParameter(map);\n \t\t} else if (obj instanceof WorkflowScheme) {\n-\t\t\treturn this.convertScheme(map);\n+\t\t\treturn WorkflowSchemeTransformer.transform(map);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyOTE5MQ==", "bodyText": "Added DBTransformers for both WorkflowTask and WorkflowScheme instead of relying on BeanUtils.copyProperties , which was taking a performance hit, reported by Glowroot also", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452929191", "createdAt": "2020-07-10T15:53:19Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "diffHunk": "@@ -204,11 +206,11 @@ private Object convertMaptoObject(Map<String, Object> map, Class clazz) throws I\n \t\t} else if (obj instanceof WorkflowActionClassParameter) {\n \t\t\treturn this.convertActionClassParameter(map);\n \t\t} else if (obj instanceof WorkflowScheme) {\n-\t\t\treturn this.convertScheme(map);\n+\t\t\treturn WorkflowSchemeTransformer.transform(map);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw=="}, "originalCommit": {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDcyNzYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowNlrOGw2uLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowNlrOGw2uLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTM4OQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881389", "createdAt": "2020-07-13T19:29:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDcyNzcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowN1rOGw2uOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxOToyOTowN1rOGw2uOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTQwMA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881400", "createdAt": "2020-07-13T19:29:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+    PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}