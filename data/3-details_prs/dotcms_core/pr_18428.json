{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzgwMTM2", "number": 18428, "title": "Issue 17806 ppfilters", "bodyText": "This PR adds the ability to select a filter when doing PP.\nThese filters will be used to exclude types of content to be PP as a dependency or PP manually.\nThe filters will live under the assets/server/publishing-filters/ directory and will be YAML files, to add a new filter there a restart of the server is needed since the filters load with an initializer.\nIf a filter is not passed the DefaultFilter will be used.\nA new column to store the filter selected for each bundle has been created and an upgrade task for it.\nThe force push option has been added to the YAML file.\nThe bundle Detail dialog is showing the filter used for the bundle.\nTests for every method has been created.", "createdAt": "2020-05-02T01:23:00Z", "url": "https://github.com/dotCMS/core/pull/18428", "merged": true, "mergeCommit": {"oid": "a82e35f0fd0340aea8311ed2c9ac4575cb8ab356"}, "closed": true, "closedAt": "2020-06-03T17:32:34Z", "author": {"login": "erickgonzalez"}, "timelineItems": {"totalCount": 200, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg8T4sgFqTQxMTE0NDcwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcns8LegFqTQyMzc3ODE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ0NzAx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411144701", "createdAt": "2020-05-13T17:27:41Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo0MVrOGU8Ejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo0MVrOGU8Ejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxMA==", "bodyText": "rename to\nfinal Structure contentType or final Structure structure", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424608910", "createdAt": "2020-05-13T17:27:41Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 622}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ0ODY3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411144867", "createdAt": "2020-05-13T17:27:54Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo1NFrOGU8FIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo1NFrOGU8FIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTA1OA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609058", "createdAt": "2020-05-13T17:27:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t\t\t.getStructureByInode(containerStructure.getStructureId());\n+\t\t\t\t\t\t\tcontentTypes.addOrClean(containerStructure.getStructureId(),\n+\t\t\t\t\t\t\t\t\tst.getModDate());\n+\t\t\t\t\t\t\tcontentTypesSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI().getMultiTrees(workingPage,container);\n-\n-\t\t\t\t\tfor (MultiTree mt : treeList) {\n-\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n-\t\t\t\t\t\t// Contents dependencies\n-\n-\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search( \"+identifier:\" + contentIdentifier, 0, 0, \"moddate\", user, false );\n-\t\t\t\t\t\tfor ( Contentlet contentletI : contentList ) {\n-\t\t\t\t\t\t\tcontents.addOrClean( contentletI.getIdentifier(), contentletI.getModDate() );\n-\t\t\t\t\t\t\tcontentsSet.add( contentletI.getIdentifier() );\n+\t\t\t\t\t// Contents dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 642}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ1MDQ5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411145049", "createdAt": "2020-05-13T17:28:07Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODowN1rOGU8Frg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODowN1rOGU8Frg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTE5OA==", "bodyText": "set to final and rename to multitree", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609198", "createdAt": "2020-05-13T17:28:07Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t\t\t.getStructureByInode(containerStructure.getStructureId());\n+\t\t\t\t\t\t\tcontentTypes.addOrClean(containerStructure.getStructureId(),\n+\t\t\t\t\t\t\t\t\tst.getModDate());\n+\t\t\t\t\t\t\tcontentTypesSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI().getMultiTrees(workingPage,container);\n-\n-\t\t\t\t\tfor (MultiTree mt : treeList) {\n-\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n-\t\t\t\t\t\t// Contents dependencies\n-\n-\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search( \"+identifier:\" + contentIdentifier, 0, 0, \"moddate\", user, false );\n-\t\t\t\t\t\tfor ( Contentlet contentletI : contentList ) {\n-\t\t\t\t\t\t\tcontents.addOrClean( contentletI.getIdentifier(), contentletI.getModDate() );\n-\t\t\t\t\t\t\tcontentsSet.add( contentletI.getIdentifier() );\n+\t\t\t\t\t// Contents dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI()\n+\t\t\t\t\t\t\t\t.getMultiTrees(workingPage, container);\n+\n+\t\t\t\t\t\tfor (MultiTree mt : treeList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 645}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ1MjA2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411145206", "createdAt": "2020-05-13T17:28:18Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODoxOFrOGU8GIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODoxOFrOGU8GIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTMxNQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609315", "createdAt": "2020-05-13T17:28:18Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t\t\t.getStructureByInode(containerStructure.getStructureId());\n+\t\t\t\t\t\t\tcontentTypes.addOrClean(containerStructure.getStructureId(),\n+\t\t\t\t\t\t\t\t\tst.getModDate());\n+\t\t\t\t\t\t\tcontentTypesSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI().getMultiTrees(workingPage,container);\n-\n-\t\t\t\t\tfor (MultiTree mt : treeList) {\n-\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n-\t\t\t\t\t\t// Contents dependencies\n-\n-\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search( \"+identifier:\" + contentIdentifier, 0, 0, \"moddate\", user, false );\n-\t\t\t\t\t\tfor ( Contentlet contentletI : contentList ) {\n-\t\t\t\t\t\t\tcontents.addOrClean( contentletI.getIdentifier(), contentletI.getModDate() );\n-\t\t\t\t\t\t\tcontentsSet.add( contentletI.getIdentifier() );\n+\t\t\t\t\t// Contents dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI()\n+\t\t\t\t\t\t\t\t.getMultiTrees(workingPage, container);\n+\n+\t\t\t\t\t\tfor (MultiTree mt : treeList) {\n+\t\t\t\t\t\t\tString contentIdentifier = mt.getChild();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 646}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ1MzAx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411145301", "createdAt": "2020-05-13T17:28:25Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODoyNlrOGU8GbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODoyNlrOGU8GbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTM4OQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609389", "createdAt": "2020-05-13T17:28:26Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t\t\t.getStructureByInode(containerStructure.getStructureId());\n+\t\t\t\t\t\t\tcontentTypes.addOrClean(containerStructure.getStructureId(),\n+\t\t\t\t\t\t\t\t\tst.getModDate());\n+\t\t\t\t\t\t\tcontentTypesSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI().getMultiTrees(workingPage,container);\n-\n-\t\t\t\t\tfor (MultiTree mt : treeList) {\n-\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n-\t\t\t\t\t\t// Contents dependencies\n-\n-\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search( \"+identifier:\" + contentIdentifier, 0, 0, \"moddate\", user, false );\n-\t\t\t\t\t\tfor ( Contentlet contentletI : contentList ) {\n-\t\t\t\t\t\t\tcontents.addOrClean( contentletI.getIdentifier(), contentletI.getModDate() );\n-\t\t\t\t\t\t\tcontentsSet.add( contentletI.getIdentifier() );\n+\t\t\t\t\t// Contents dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI()\n+\t\t\t\t\t\t\t\t.getMultiTrees(workingPage, container);\n+\n+\t\t\t\t\t\tfor (MultiTree mt : treeList) {\n+\t\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n+\t\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 647}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ1NDQ4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411145448", "createdAt": "2020-05-13T17:28:37Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODozN1rOGU8G3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyODozN1rOGU8G3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTUwMQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609501", "createdAt": "2020-05-13T17:28:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n+\t\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t\t\t.getStructureByInode(containerStructure.getStructureId());\n+\t\t\t\t\t\t\tcontentTypes.addOrClean(containerStructure.getStructureId(),\n+\t\t\t\t\t\t\t\t\tst.getModDate());\n+\t\t\t\t\t\t\tcontentTypesSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n-\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI().getMultiTrees(workingPage,container);\n-\n-\t\t\t\t\tfor (MultiTree mt : treeList) {\n-\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n-\t\t\t\t\t\t// Contents dependencies\n-\n-\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search( \"+identifier:\" + contentIdentifier, 0, 0, \"moddate\", user, false );\n-\t\t\t\t\t\tfor ( Contentlet contentletI : contentList ) {\n-\t\t\t\t\t\t\tcontents.addOrClean( contentletI.getIdentifier(), contentletI.getModDate() );\n-\t\t\t\t\t\t\tcontentsSet.add( contentletI.getIdentifier() );\n+\t\t\t\t\t// Contents dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\t\tList<MultiTree> treeList = APILocator.getMultiTreeAPI()\n+\t\t\t\t\t\t\t\t.getMultiTrees(workingPage, container);\n+\n+\t\t\t\t\t\tfor (MultiTree mt : treeList) {\n+\t\t\t\t\t\t\tString contentIdentifier = mt.getChild();\n+\t\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t\t\t.search(\"+identifier:\" + contentIdentifier, 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\t\t\tuser, false);\n+\t\t\t\t\t\t\tfor (Contentlet contentletI : contentList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 650}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ1NzQ4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411145748", "createdAt": "2020-05-13T17:29:00Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTowMFrOGU8Htw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTowMFrOGU8Htw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTcxOQ==", "bodyText": "rename to\nfinal Host host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424609719", "createdAt": "2020-05-13T17:29:00Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(), user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getTemplateAPI().getTemplateHost( wkT ).getIdentifier(), h.getModDate());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 692}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ2MjAy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411146202", "createdAt": "2020-05-13T17:29:36Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTozNlrOGU8JGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTozNlrOGU8JGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDA3Mw==", "bodyText": "rename to template", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424610073", "createdAt": "2020-05-13T17:29:36Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 686}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ2NDM0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411146434", "createdAt": "2020-05-13T17:29:54Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTo1NFrOGU8JxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTo1NFrOGU8JxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDI0NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424610244", "createdAt": "2020-05-13T17:29:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(), user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getTemplateAPI().getTemplateHost( wkT ).getIdentifier(), h.getModDate());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI()\n+\t\t\t\t\t\t\t.find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\t\t\tuser, false);\n+\t\t\t\t\thosts.addOrClean(\n+\t\t\t\t\t\t\tAPILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\th.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n-\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(wkT, user, false));\n+\t\t\t\t// Container dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(wkT, user, false));\n \n-\t\t\t\tif(lvT!=null && InodeUtils.isSet(lvT.getInode())) {\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(lvT, user, false));\n-\t\t\t\t}\n+\t\t\t\t\tif (lvT != null && InodeUtils.isSet(lvT.getInode())) {\n+\t\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t\t.getContainersInTemplate(lvT, user, false));\n+\t\t\t\t\t}\n \n-\t\t\t\tfor (Container container : containerList) {\n+\t\t\t\t\tfor (Container container : containerList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 716}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ2ODI4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411146828", "createdAt": "2020-05-13T17:30:24Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDoyNFrOGU8K_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDoyNFrOGU8K_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDU1Ng==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424610556", "createdAt": "2020-05-13T17:30:24Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(), user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getTemplateAPI().getTemplateHost( wkT ).getIdentifier(), h.getModDate());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI()\n+\t\t\t\t\t\t\t.find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\t\t\tuser, false);\n+\t\t\t\t\thosts.addOrClean(\n+\t\t\t\t\t\t\tAPILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\th.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n-\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(wkT, user, false));\n+\t\t\t\t// Container dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(wkT, user, false));\n \n-\t\t\t\tif(lvT!=null && InodeUtils.isSet(lvT.getInode())) {\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(lvT, user, false));\n-\t\t\t\t}\n+\t\t\t\t\tif (lvT != null && InodeUtils.isSet(lvT.getInode())) {\n+\t\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t\t.getContainersInTemplate(lvT, user, false));\n+\t\t\t\t\t}\n \n-\t\t\t\tfor (Container container : containerList) {\n+\t\t\t\t\tfor (Container container : containerList) {\n \n-\t\t\t\t\tif(container instanceof FileAssetContainer){\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\t// Container dependencies\n-\t\t\t\t\tcontainers.addOrClean( container.getIdentifier(), container.getModDate());\n-\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t//Adding theme\n-\t\t\t\tif(UtilMethods.isSet(wkT.getTheme())){\n-\t\t\t\t\ttry{\n-\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);\n-\t\t\t\t\t\tif(themeFolder != null &&  InodeUtils.isSet(themeFolder.getInode())){\n-\t\t\t\t\t\t\tFolder parent = APILocator.getFolderAPI().findParentFolder(themeFolder, user, false);\n-\t\t\t\t\t\t\tif(UtilMethods.isSet(parent)) {\n-\t\t\t\t\t\t\t\tfolders.addOrClean( parent.getInode(), parent.getModDate());\n-\t\t\t\t\t\t\t\tfoldersSet.add(parent.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tif (UtilMethods.isSet(wkT.getTheme())) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 747}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ2OTY2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411146966", "createdAt": "2020-05-13T17:30:33Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDozM1rOGU8Lbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDozM1rOGU8Lbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDY3MQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424610671", "createdAt": "2020-05-13T17:30:33Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(), user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getTemplateAPI().getTemplateHost( wkT ).getIdentifier(), h.getModDate());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI()\n+\t\t\t\t\t\t\t.find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\t\t\tuser, false);\n+\t\t\t\t\thosts.addOrClean(\n+\t\t\t\t\t\t\tAPILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\th.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n-\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(wkT, user, false));\n+\t\t\t\t// Container dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(wkT, user, false));\n \n-\t\t\t\tif(lvT!=null && InodeUtils.isSet(lvT.getInode())) {\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(lvT, user, false));\n-\t\t\t\t}\n+\t\t\t\t\tif (lvT != null && InodeUtils.isSet(lvT.getInode())) {\n+\t\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t\t.getContainersInTemplate(lvT, user, false));\n+\t\t\t\t\t}\n \n-\t\t\t\tfor (Container container : containerList) {\n+\t\t\t\t\tfor (Container container : containerList) {\n \n-\t\t\t\t\tif(container instanceof FileAssetContainer){\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\t// Container dependencies\n-\t\t\t\t\tcontainers.addOrClean( container.getIdentifier(), container.getModDate());\n-\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t//Adding theme\n-\t\t\t\tif(UtilMethods.isSet(wkT.getTheme())){\n-\t\t\t\t\ttry{\n-\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);\n-\t\t\t\t\t\tif(themeFolder != null &&  InodeUtils.isSet(themeFolder.getInode())){\n-\t\t\t\t\t\t\tFolder parent = APILocator.getFolderAPI().findParentFolder(themeFolder, user, false);\n-\t\t\t\t\t\t\tif(UtilMethods.isSet(parent)) {\n-\t\t\t\t\t\t\t\tfolders.addOrClean( parent.getInode(), parent.getModDate());\n-\t\t\t\t\t\t\t\tfoldersSet.add(parent.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tif (UtilMethods.isSet(wkT.getTheme())) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);\n+\t\t\t\t\t\t\tif (themeFolder != null && InodeUtils.isSet(themeFolder.getInode())) {\n+\t\t\t\t\t\t\t\tFolder parent = APILocator.getFolderAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 749}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ3MTU5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411147159", "createdAt": "2020-05-13T17:30:48Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDo0OVrOGU8MDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMDo0OVrOGU8MDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDgzMQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424610831", "createdAt": "2020-05-13T17:30:49Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -760,46 +863,62 @@ private void setTemplateDependencies() {\n \t\t\t\tTemplate lvT = APILocator.getTemplateAPI().findLiveTemplate(id, user, false);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(), user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getTemplateAPI().getTemplateHost( wkT ).getIdentifier(), h.getModDate());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI()\n+\t\t\t\t\t\t\t.find(APILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\t\t\tuser, false);\n+\t\t\t\t\thosts.addOrClean(\n+\t\t\t\t\t\t\tAPILocator.getTemplateAPI().getTemplateHost(wkT).getIdentifier(),\n+\t\t\t\t\t\t\th.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n-\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(wkT, user, false));\n+\t\t\t\t// Container dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(wkT, user, false));\n \n-\t\t\t\tif(lvT!=null && InodeUtils.isSet(lvT.getInode())) {\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(lvT, user, false));\n-\t\t\t\t}\n+\t\t\t\t\tif (lvT != null && InodeUtils.isSet(lvT.getInode())) {\n+\t\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t\t.getContainersInTemplate(lvT, user, false));\n+\t\t\t\t\t}\n \n-\t\t\t\tfor (Container container : containerList) {\n+\t\t\t\t\tfor (Container container : containerList) {\n \n-\t\t\t\t\tif(container instanceof FileAssetContainer){\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n \n-\t\t\t\t\t// Container dependencies\n-\t\t\t\t\tcontainers.addOrClean( container.getIdentifier(), container.getModDate());\n-\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t//Adding theme\n-\t\t\t\tif(UtilMethods.isSet(wkT.getTheme())){\n-\t\t\t\t\ttry{\n-\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);\n-\t\t\t\t\t\tif(themeFolder != null &&  InodeUtils.isSet(themeFolder.getInode())){\n-\t\t\t\t\t\t\tFolder parent = APILocator.getFolderAPI().findParentFolder(themeFolder, user, false);\n-\t\t\t\t\t\t\tif(UtilMethods.isSet(parent)) {\n-\t\t\t\t\t\t\t\tfolders.addOrClean( parent.getInode(), parent.getModDate());\n-\t\t\t\t\t\t\t\tfoldersSet.add(parent.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tif (UtilMethods.isSet(wkT.getTheme())) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tFolder themeFolder = folderAPI.find(wkT.getTheme(), user, false);\n+\t\t\t\t\t\t\tif (themeFolder != null && InodeUtils.isSet(themeFolder.getInode())) {\n+\t\t\t\t\t\t\t\tFolder parent = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t\t\t\t.findParentFolder(themeFolder, user, false);\n+\t\t\t\t\t\t\t\tif (UtilMethods.isSet(parent)) {\n+\t\t\t\t\t\t\t\t\tfolders.addOrClean(parent.getInode(), parent.getModDate());\n+\t\t\t\t\t\t\t\t\tfoldersSet.add(parent.getInode());\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tList<Folder> folderList = new ArrayList<Folder>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 755}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ3NjU0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411147654", "createdAt": "2020-05-13T17:31:24Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMToyNVrOGU8Nog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMToyNVrOGU8Nog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTIzNA==", "bodyText": "rename to\nfinal Container container", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424611234", "createdAt": "2020-05-13T17:31:25Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -829,43 +948,51 @@ private void setContainerDependencies() {\n \t\t\t\tContainer c = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 786}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ3ODcw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411147870", "createdAt": "2020-05-13T17:31:42Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMTo0MlrOGU8OQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMTo0MlrOGU8OQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTM5NA==", "bodyText": "rename to\nfinal Host host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424611394", "createdAt": "2020-05-13T17:31:42Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -829,43 +948,51 @@ private void setContainerDependencies() {\n \t\t\t\tContainer c = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n \n \t\t\t\t// Host Dependency\n-\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getContainerAPI().getParentHost( c, user, false ).getIdentifier(), h.getModDate());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 792}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ4MDU2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411148056", "createdAt": "2020-05-13T17:31:57Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMTo1N1rOGU8O2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMTo1N1rOGU8O2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTU0Ng==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424611546", "createdAt": "2020-05-13T17:31:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -829,43 +948,51 @@ private void setContainerDependencies() {\n \t\t\t\tContainer c = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n \n \t\t\t\t// Host Dependency\n-\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getContainerAPI().getParentHost( c, user, false ).getIdentifier(), h.getModDate());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n+\t\t\t\t\thosts.addOrClean(APILocator.getContainerAPI().getParentHost(c, user, false)\n+\t\t\t\t\t\t\t.getIdentifier(), h.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tContainer workingContainer = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n-\t\t\t\tif ( workingContainer != null ) {\n-\t\t\t\t\tcontainerList.add( workingContainer );\n-\t\t\t\t}\n+\t\t\t\t// Content Type Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tContainer workingContainer = APILocator.getContainerAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 805}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ4MjE3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411148217", "createdAt": "2020-05-13T17:32:11Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjoxMlrOGU8PZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjoxMlrOGU8PZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTY4NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424611684", "createdAt": "2020-05-13T17:32:12Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -829,43 +948,51 @@ private void setContainerDependencies() {\n \t\t\t\tContainer c = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n \n \t\t\t\t// Host Dependency\n-\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getContainerAPI().getParentHost( c, user, false ).getIdentifier(), h.getModDate());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n+\t\t\t\t\thosts.addOrClean(APILocator.getContainerAPI().getParentHost(c, user, false)\n+\t\t\t\t\t\t\t.getIdentifier(), h.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tContainer workingContainer = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n-\t\t\t\tif ( workingContainer != null ) {\n-\t\t\t\t\tcontainerList.add( workingContainer );\n-\t\t\t\t}\n+\t\t\t\t// Content Type Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tContainer workingContainer = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.getWorkingContainerById(id, user, false);\n+\t\t\t\t\tif (workingContainer != null) {\n+\t\t\t\t\t\tcontainerList.add(workingContainer);\n+\t\t\t\t\t}\n \n-\t\t\t\tContainer liveContainer = APILocator.getContainerAPI().getLiveContainerById(id, user, false);\n-\t\t\t\tif ( liveContainer != null ) {\n-\t\t\t\t\tcontainerList.add( liveContainer );\n-\t\t\t\t}\n+\t\t\t\t\tContainer liveContainer = APILocator.getContainerAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 815}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ4Mzcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411148373", "createdAt": "2020-05-13T17:32:25Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjoyNVrOGU8P-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjoyNVrOGU8P-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMTgzMw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424611833", "createdAt": "2020-05-13T17:32:25Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -829,43 +948,51 @@ private void setContainerDependencies() {\n \t\t\t\tContainer c = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n \n \t\t\t\t// Host Dependency\n-\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n-\t\t\t\thosts.addOrClean( APILocator.getContainerAPI().getParentHost( c, user, false ).getIdentifier(), h.getModDate());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getContainerAPI().getParentHost(c, user, false);\n+\t\t\t\t\thosts.addOrClean(APILocator.getContainerAPI().getParentHost(c, user, false)\n+\t\t\t\t\t\t\t.getIdentifier(), h.getModDate());\n+\t\t\t\t}\n \n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tContainer workingContainer = APILocator.getContainerAPI().getWorkingContainerById(id, user, false);\n-\t\t\t\tif ( workingContainer != null ) {\n-\t\t\t\t\tcontainerList.add( workingContainer );\n-\t\t\t\t}\n+\t\t\t\t// Content Type Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tContainer workingContainer = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.getWorkingContainerById(id, user, false);\n+\t\t\t\t\tif (workingContainer != null) {\n+\t\t\t\t\t\tcontainerList.add(workingContainer);\n+\t\t\t\t\t}\n \n-\t\t\t\tContainer liveContainer = APILocator.getContainerAPI().getLiveContainerById(id, user, false);\n-\t\t\t\tif ( liveContainer != null ) {\n-\t\t\t\t\tcontainerList.add( liveContainer );\n-\t\t\t\t}\n+\t\t\t\t\tContainer liveContainer = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.getLiveContainerById(id, user, false);\n+\t\t\t\t\tif (liveContainer != null) {\n+\t\t\t\t\t\tcontainerList.add(liveContainer);\n+\t\t\t\t\t}\n \n-\t\t\t\tfor (Container container : containerList) {\n+\t\t\t\t\tfor (Container container : containerList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 822}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ4NjM3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411148637", "createdAt": "2020-05-13T17:32:45Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjo0NlrOGU8QzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozMjo0NlrOGU8QzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMjA0NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424612044", "createdAt": "2020-05-13T17:32:46Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -932,13 +1059,11 @@ private void setContainerDependencies() {\n \t * <li>Relationships</li>\n \t * </ul>\n \t */\n-\tprivate void setStructureDependencies() throws DotDataException, DotSecurityException {\n+\tprivate void setStructureDependencies(final PublisherFilter publisherFilter)  throws DotDataException, DotSecurityException {\n \t\ttry {\n \n-\t\t\tSet<String> s = new HashSet<String>();\n-\t\t\ts.addAll(structuresSet);\n-\t\t\tfor (String inode : s) {\n-\t\t\t\tstructureDependencyHelper(inode);\n+\t\t\tfor (String inode : contentTypesSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 865}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc2MDUy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411176052", "createdAt": "2020-05-13T18:09:08Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTowOFrOGU9lmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTowOFrOGU9lmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzc1Mg==", "bodyText": "rename to structure and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424633752", "createdAt": "2020-05-13T18:09:08Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,48 +1077,79 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 959}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc2MzA5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411176309", "createdAt": "2020-05-13T18:09:29Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTozMFrOGU9mWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTozMFrOGU9mWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzk0Nw==", "bodyText": "use curly brackets", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424633947", "createdAt": "2020-05-13T18:09:30Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,48 +1077,79 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getChildStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes\n+\t\t\t\t\t\t\t.addOrClean(relationship.getChildStructureInode(), struct.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getChildStructureInode()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 965}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc2NjI4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411176628", "createdAt": "2020-05-13T18:09:54Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTo1NFrOGU9nXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowOTo1NFrOGU9nXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDIwNQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424634205", "createdAt": "2020-05-13T18:09:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 990}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc2ODcx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411176871", "createdAt": "2020-05-13T18:10:12Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDoxMlrOGU9oIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDoxMlrOGU9oIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDQwMA==", "bodyText": "rename to contentlet and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424634400", "createdAt": "2020-05-13T18:10:12Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 995}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc3MDQy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411177042", "createdAt": "2020-05-13T18:10:24Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDoyNFrOGU9olw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDoyNFrOGU9olw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDUxOQ==", "bodyText": "rename to contentletSet", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424634519", "createdAt": "2020-05-13T18:10:24Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 989}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc3MjQw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411177240", "createdAt": "2020-05-13T18:10:38Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDozOVrOGU9pPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDozOVrOGU9pPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDY4NA==", "bodyText": "rename to host and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424634684", "createdAt": "2020-05-13T18:10:39Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1000}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc3NDc1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411177475", "createdAt": "2020-05-13T18:10:56Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDo1NlrOGU9qCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMDo1NlrOGU9qCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNDg5MQ==", "bodyText": "rename to contentRelatedMap", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424634891", "createdAt": "2020-05-13T18:10:56Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(con.getHost(), h.getModDate());\n+\t\t\t}\n+\n \t\t\tcontentsToProcess.add(con);\n \n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tMap<Relationship, List<Contentlet>> contentRel =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1021}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc3NjYx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411177661", "createdAt": "2020-05-13T18:11:10Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMToxMFrOGU9qqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMToxMFrOGU9qqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTA0OQ==", "bodyText": "rename to relationship and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424635049", "createdAt": "2020-05-13T18:11:10Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(con.getHost(), h.getModDate());\n+\t\t\t}\n+\n \t\t\tcontentsToProcess.add(con);\n \n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n+\t\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n+\n+\t\t\t\tfor (Relationship rel : contentRel.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1024}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc3OTUw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411177950", "createdAt": "2020-05-13T18:11:34Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMTozNFrOGU9rjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMTozNFrOGU9rjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTI3OA==", "bodyText": "rename to contenletToProcess and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424635278", "createdAt": "2020-05-13T18:11:34Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(con.getHost(), h.getModDate());\n+\t\t\t}\n+\n \t\t\tcontentsToProcess.add(con);\n \n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n+\t\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n+\n+\t\t\t\tfor (Relationship rel : contentRel.keySet()) {\n+\t\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n+\t\t\t\t\t/**\n+\t\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n+\t\t\t\t\t *\n+\t\t\t\t\t * We need the relationships in which the single related content is involved.\n+\t\t\t\t\t *\n+\t\t\t\t\t */\n+\t\t\t\t\tif (contentRel.get(rel).size() > 0)\n+\t\t\t\t\t\trelationships.addOrClean(rel.getInode(), rel.getModDate());\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\t// end relationships false\n \n \t\tfor (Contentlet con : contentsToProcess) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1039}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc4MTcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411178173", "createdAt": "2020-05-13T18:11:52Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMTo1MlrOGU9sNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMTo1MlrOGU9sNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTQ0Ng==", "bodyText": "rename to host and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424635446", "createdAt": "2020-05-13T18:11:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1004,36 +1160,45 @@ private void structureDependencyHelper(String stInode) throws DotDataException,\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n+\tprivate void processList(final Set<Contentlet> cons, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n \t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n \t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n \n-\t\t//Getting all related content\n-\n \t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(con.getHost(), h.getModDate());\n+\t\t\t}\n+\n \t\t\tcontentsToProcess.add(con);\n \n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n+\t\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n+\n+\t\t\t\tfor (Relationship rel : contentRel.keySet()) {\n+\t\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n+\t\t\t\t\t/**\n+\t\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n+\t\t\t\t\t *\n+\t\t\t\t\t * We need the relationships in which the single related content is involved.\n+\t\t\t\t\t *\n+\t\t\t\t\t */\n+\t\t\t\t\tif (contentRel.get(rel).size() > 0)\n+\t\t\t\t\t\trelationships.addOrClean(rel.getInode(), rel.getModDate());\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\t// end relationships false\n \n \t\tfor (Contentlet con : contentsToProcess) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1044}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc4NDE0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411178414", "createdAt": "2020-05-13T18:12:13Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMjoxM1rOGU9tAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMjoxM1rOGU9tAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTY0OQ==", "bodyText": "rename to host and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424635649", "createdAt": "2020-05-13T18:12:13Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1064,13 +1229,26 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t// Adding the Contents (including related) and adding filesAsContent\n \t\tfor (Contentlet con : contentsWithDependenciesToProcess) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n-\t\t\tcontents.addOrClean( con.getIdentifier(), con.getModDate()); // adding the content (including related)\n-\t\t\tFolder f = APILocator.getFolderAPI().find(con.getFolder(), user, false);\n-\t\t\tfolders.addOrClean( con.getFolder(), f.getModDate()); // adding content folder\n-\n-\t\t\tlanguages.addOrClean(Long.toString(con.getLanguageId()), new Date()); // will be included only when hasn't been sent ever\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1063}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc4NzA0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411178704", "createdAt": "2020-05-13T18:12:36Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMjozNlrOGU9t7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMjozNlrOGU9t7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNTg4NQ==", "bodyText": "rename to folder and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424635885", "createdAt": "2020-05-13T18:12:36Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1064,13 +1229,26 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t// Adding the Contents (including related) and adding filesAsContent\n \t\tfor (Contentlet con : contentsWithDependenciesToProcess) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n-\t\t\tcontents.addOrClean( con.getIdentifier(), con.getModDate()); // adding the content (including related)\n-\t\t\tFolder f = APILocator.getFolderAPI().find(con.getFolder(), user, false);\n-\t\t\tfolders.addOrClean( con.getFolder(), f.getModDate()); // adding content folder\n-\n-\t\t\tlanguages.addOrClean(Long.toString(con.getLanguageId()), new Date()); // will be included only when hasn't been sent ever\n+\t\t\t// Host Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(con.getHost(), h.getModDate());\n+\t\t\t}\n+\t\t\t// Content Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType()) && publisherFilter.acceptExcludeDependencyQuery(con.getIdentifier())) {\n+\t\t\t\tcontents.addOrClean(con.getIdentifier(),\n+\t\t\t\t\t\tcon.getModDate());\n+\t\t\t}\n+\t\t\t// Folder Dependency\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tFolder f = APILocator.getFolderAPI().find(con.getFolder(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1073}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5MDU3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411179057", "createdAt": "2020-05-13T18:13:04Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzowNVrOGU9vJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzowNVrOGU9vJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjE5Ng==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424636196", "createdAt": "2020-05-13T18:13:05Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1095,40 +1273,47 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t\t\t\t}\n \t\t\t\t\t//Process the pages we found\n-\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess);\n+\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess,publisherFilter);\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tLogger.debug(this, e.toString());\n \t\t\t}\n \n-\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true)) {\n+\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true) && publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n \t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(con.getStructureInode());\n-\t\t\t\tstructures.addOrClean( con.getStructureInode(), struct.getModDate());\n-\t\t\t\tstructureDependencyHelper(con.getStructureInode());\n+\t\t\t\tcontentTypes.addOrClean( con.getStructureInode(), struct.getModDate());\n+\t\t\t\tstructureDependencyHelper(con.getStructureInode(),publisherFilter);\n \t\t\t}\n \n \t\t\t// Evaluate all the categories from this contentlet to include as dependency.\n-            final List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n-                    .getParents(con, APILocator.systemUser(), false);\n-            for (Category category : categoriesFromContentlet) {\n-                categories.addOrClean(category.getCategoryId(), category.getModDate());\n-            }\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\t\tfinal List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n+\t\t\t\t\t\t.getParents(con, APILocator.systemUser(), false);\n+\t\t\t\tfor (Category category : categoriesFromContentlet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5MjU4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411179258", "createdAt": "2020-05-13T18:13:20Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzoyMFrOGU9vuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzoyMFrOGU9vuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjM0Nw==", "bodyText": "set to final and rename to language", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424636347", "createdAt": "2020-05-13T18:13:20Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1095,40 +1273,47 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t\t\t\t}\n \t\t\t\t\t//Process the pages we found\n-\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess);\n+\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess,publisherFilter);\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tLogger.debug(this, e.toString());\n \t\t\t}\n \n-\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true)) {\n+\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true) && publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n \t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(con.getStructureInode());\n-\t\t\t\tstructures.addOrClean( con.getStructureInode(), struct.getModDate());\n-\t\t\t\tstructureDependencyHelper(con.getStructureInode());\n+\t\t\t\tcontentTypes.addOrClean( con.getStructureInode(), struct.getModDate());\n+\t\t\t\tstructureDependencyHelper(con.getStructureInode(),publisherFilter);\n \t\t\t}\n \n \t\t\t// Evaluate all the categories from this contentlet to include as dependency.\n-            final List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n-                    .getParents(con, APILocator.systemUser(), false);\n-            for (Category category : categoriesFromContentlet) {\n-                categories.addOrClean(category.getCategoryId(), category.getModDate());\n-            }\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\t\tfinal List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n+\t\t\t\t\t\t.getParents(con, APILocator.systemUser(), false);\n+\t\t\t\tfor (Category category : categoriesFromContentlet) {\n+\t\t\t\t\tcategories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t}\n+\t\t\t}\n         }\n \t\t\n \t\t//This is for adding the new language variables (as content)\n         for (String lang : languages) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5MzQz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411179343", "createdAt": "2020-05-13T18:13:27Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzoyOFrOGU9v9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzoyOFrOGU9v9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjQwNw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424636407", "createdAt": "2020-05-13T18:13:28Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1095,40 +1273,47 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t\t\t\t}\n \t\t\t\t\t//Process the pages we found\n-\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess);\n+\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess,publisherFilter);\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tLogger.debug(this, e.toString());\n \t\t\t}\n \n-\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true)) {\n+\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true) && publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n \t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(con.getStructureInode());\n-\t\t\t\tstructures.addOrClean( con.getStructureInode(), struct.getModDate());\n-\t\t\t\tstructureDependencyHelper(con.getStructureInode());\n+\t\t\t\tcontentTypes.addOrClean( con.getStructureInode(), struct.getModDate());\n+\t\t\t\tstructureDependencyHelper(con.getStructureInode(),publisherFilter);\n \t\t\t}\n \n \t\t\t// Evaluate all the categories from this contentlet to include as dependency.\n-            final List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n-                    .getParents(con, APILocator.systemUser(), false);\n-            for (Category category : categoriesFromContentlet) {\n-                categories.addOrClean(category.getCategoryId(), category.getModDate());\n-            }\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\t\tfinal List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n+\t\t\t\t\t\t.getParents(con, APILocator.systemUser(), false);\n+\t\t\t\tfor (Category category : categoriesFromContentlet) {\n+\t\t\t\t\tcategories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t}\n+\t\t\t}\n         }\n \t\t\n \t\t//This is for adding the new language variables (as content)\n         for (String lang : languages) {\n             String keyValueQuery = \"+contentType:\" + LanguageVariableAPI.LANGUAGEVARIABLE + \" +languageId:\" + lang;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTc5Njk2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411179696", "createdAt": "2020-05-13T18:13:56Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzo1NlrOGU9w7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxMzo1NlrOGU9w7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNjY1NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424636654", "createdAt": "2020-05-13T18:13:56Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -1095,40 +1273,47 @@ private void processList(Set<Contentlet> cons) throws DotDataException, DotSecur\n \n \t\t\t\t\t}\n \t\t\t\t\t//Process the pages we found\n-\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess);\n+\t\t\t\t\tsetHTMLPagesDependencies(pagesToProcess,publisherFilter);\n \t\t\t\t}\n \t\t\t} catch (Exception e) {\n \t\t\t\tLogger.debug(this, e.toString());\n \t\t\t}\n \n-\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true)) {\n+\t\t\tif(Config.getBooleanProperty(\"PUSH_PUBLISHING_PUSH_STRUCTURES\", true) && publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n \t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(con.getStructureInode());\n-\t\t\t\tstructures.addOrClean( con.getStructureInode(), struct.getModDate());\n-\t\t\t\tstructureDependencyHelper(con.getStructureInode());\n+\t\t\t\tcontentTypes.addOrClean( con.getStructureInode(), struct.getModDate());\n+\t\t\t\tstructureDependencyHelper(con.getStructureInode(),publisherFilter);\n \t\t\t}\n \n \t\t\t// Evaluate all the categories from this contentlet to include as dependency.\n-            final List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n-                    .getParents(con, APILocator.systemUser(), false);\n-            for (Category category : categoriesFromContentlet) {\n-                categories.addOrClean(category.getCategoryId(), category.getModDate());\n-            }\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CATEGORY.getType())) {\n+\t\t\t\tfinal List<Category> categoriesFromContentlet = APILocator.getCategoryAPI()\n+\t\t\t\t\t\t.getParents(con, APILocator.systemUser(), false);\n+\t\t\t\tfor (Category category : categoriesFromContentlet) {\n+\t\t\t\t\tcategories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t}\n+\t\t\t}\n         }\n \t\t\n \t\t//This is for adding the new language variables (as content)\n         for (String lang : languages) {\n             String keyValueQuery = \"+contentType:\" + LanguageVariableAPI.LANGUAGEVARIABLE + \" +languageId:\" + lang;\n             List<Contentlet> listKeyValueLang = APILocator.getContentletAPI()\n                             .search(keyValueQuery,0, -1, StringPool.BLANK, user, false);// search for language variables\n-            if (!listKeyValueLang.isEmpty()) {// if there is any language variable add the content type\n+\t\t\t// if there is any language variable and we accept to push content type, add the content type\n+            if (!listKeyValueLang.isEmpty() && publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n                 Structure struct = CacheLocator.getContentTypeCache()\n                                 .getStructureByInode(listKeyValueLang.get(0).getContentTypeId());\n-                structures.addOrClean(struct.getIdentifier(), struct.getModDate());\n-                structureDependencyHelper(struct.getIdentifier());\n-            }\n-            for (Contentlet keyValue : listKeyValueLang) {// add the language variable\n-                contents.addOrClean(keyValue.getIdentifier(), keyValue.getModDate());\n+                contentTypes.addOrClean(struct.getIdentifier(), struct.getModDate());\n+                structureDependencyHelper(struct.getIdentifier(),publisherFilter);\n             }\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tfor (Contentlet keyValue : listKeyValueLang) {// add the language variable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 1138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTgwNDQ2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411180446", "createdAt": "2020-05-13T18:14:58Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDo1OFrOGU9zMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoxNDo1OFrOGU9zMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzNzIzNA==", "bodyText": "rename to bundle", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424637234", "createdAt": "2020-05-13T18:14:58Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/PublisherUtil.java", "diffHunk": "@@ -101,6 +101,7 @@ public static Bundle getBundleByMap(Map<String, Object> row){\n \t\tb.setOwner(UtilMethods.isSet(row.get(\"owner\"))?row.get(\"owner\").toString():\"\");\n \t\tb.setForcePush(UtilMethods.isSet(row.get(\"force_push\")) && DbConnectionFactory\n \t\t\t\t.isDBTrue(row.get(\"force_push\").toString()));\n+\t\tb.setFilterKey(UtilMethods.isSet(row.get(\"filter_key\")) ? row.get(\"filter_key\").toString() : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTg2NzAx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411186701", "createdAt": "2020-05-13T18:23:18Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyMzoxOVrOGU-HDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODoyMzoxOVrOGU-HDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MjMxOQ==", "bodyText": "you might replace this for user.isAdmin", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424642319", "createdAt": "2020-05-13T18:23:19Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,76 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(APILocator.getUserAPI().isCMSAdmin(user)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTk2ODQ4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411196848", "createdAt": "2020-05-13T18:37:01Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozNzowMVrOGU-nEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODozNzowMVrOGU-nEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDUxMg==", "bodyText": "This could be refactored by\nreturn !UtilMethods.isSet(filterKey)?\n     this.loadedFilters.values().stream().filter(FilterDescriptor::isDefaultFilter()).findFirst().get():\n    this.loadedFilters.containsKey(filterKey)? this.loadedFilters.get(filterKey) :  this.loadedFilters.values().stream().filter(FilterDescriptor::isDefaultFilter()).findFirst().get();\n        \n\nIn addition you can create a method called getDefaultFilter, that basically returns this\n this.loadedFilters.values().stream().filter(FilterDescriptor::isDefaultFilter()).findFirst().get()\n\nAnd call such as this:\nreturn !UtilMethods.isSet(filterKey)?\n     this.getDefaultFilter():\n     this.loadedFilters.containsKey(filterKey)?\n         this.loadedFilters.get(filterKey) :  this.getDefaultFilter();", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424650512", "createdAt": "2020-05-13T18:37:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,76 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(APILocator.getUserAPI().isCMSAdmin(user)){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = this.loadedFilters.values().stream().filter(filterDescriptor -> filterDescriptor.isDefaultFilter()).findAny().get();\n+        if(!UtilMethods.isSet(filterKey)){\n+            return defaultFilter;\n+        }\n+        return this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjAwMzQz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411200343", "createdAt": "2020-05-13T18:41:53Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0MTo1NFrOGU-yeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0MTo1NFrOGU-yeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzQzNA==", "bodyText": "I prefer to do this such as\nList.class.cast(filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424653434", "createdAt": "2020-05-13T18:41:54Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,76 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(APILocator.getUserAPI().isCMSAdmin(user)){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = this.loadedFilters.values().stream().filter(filterDescriptor -> filterDescriptor.isDefaultFilter()).findAny().get();\n+        if(!UtilMethods.isSet(filterKey)){\n+            return defaultFilter;\n+        }\n+        return this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }\n+\n+    @Override\n+    public PublisherFilter createPublisherFilter(final String bundleId)\n+            throws DotDataException, DotSecurityException {\n+\n+        final String filterKey = APILocator.getBundleAPI().getBundleById(bundleId).getFilterKey();\n+        final FilterDescriptor filterDescriptor = this.getFilterDescriptorByKey(filterKey);\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl((Boolean)filterDescriptor.getFilters().getOrDefault(\"dependencies\",true),\n+                (Boolean)filterDescriptor.getFilters().getOrDefault(\"relationships\",true));\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeClasses\")){\n+            ((ArrayList)filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjAwNTE4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411200518", "createdAt": "2020-05-13T18:42:07Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0MjowN1rOGU-zAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0MjowN1rOGU-zAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MzU2OA==", "bodyText": "same thing here", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424653568", "createdAt": "2020-05-13T18:42:07Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,76 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(APILocator.getUserAPI().isCMSAdmin(user)){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = this.loadedFilters.values().stream().filter(filterDescriptor -> filterDescriptor.isDefaultFilter()).findAny().get();\n+        if(!UtilMethods.isSet(filterKey)){\n+            return defaultFilter;\n+        }\n+        return this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }\n+\n+    @Override\n+    public PublisherFilter createPublisherFilter(final String bundleId)\n+            throws DotDataException, DotSecurityException {\n+\n+        final String filterKey = APILocator.getBundleAPI().getBundleById(bundleId).getFilterKey();\n+        final FilterDescriptor filterDescriptor = this.getFilterDescriptorByKey(filterKey);\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl((Boolean)filterDescriptor.getFilters().getOrDefault(\"dependencies\",true),\n+                (Boolean)filterDescriptor.getFilters().getOrDefault(\"relationships\",true));\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeClasses\")){\n+            ((ArrayList)filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){\n+            ((ArrayList)filterDescriptor.getFilters().get(\"excludeDependencyClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeDependencyClassesSet(type.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjAzMTA0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411203104", "createdAt": "2020-05-13T18:45:32Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0NTozMlrOGU-7Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0NTozMlrOGU-7Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NTYzMQ==", "bodyText": "use the supplier version\nLogger.debug(PushPublishFiltersInitializer.class, ()-> \" dotcms filters files copied\");", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424655631", "createdAt": "2020-05-13T18:45:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PushPublishFiltersInitializer.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.dotcms.publishing;\n+\n+import com.dotcms.config.DotInitializer;\n+import com.dotcms.util.YamlUtil;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.util.Logger;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Path of the yaml files: /assets/server/publishing-filters/\n+ */\n+public class PushPublishFiltersInitializer implements DotInitializer {\n+\n+    @Override\n+    public void init() {\n+\n+        try {\n+            //Path where the YAML files are stored\n+            final String filtersDirectoryString =\n+                    APILocator.getFileAssetAPI().getRealAssetsRootPath() + File.separator + \"server\"\n+                            + File.separator + \"publishing-filters\" + File.separator;\n+            final File basePath = new File(filtersDirectoryString);\n+            if (!basePath.exists()) {\n+                basePath.mkdir();\n+                //If the directory does not exists, copy the YAML files that are ship with\n+                //dotcms to the created directory\n+                final String systemFiltersDirectory = \"com\" + File.separator + \"dotcms\" +\n+                        File.separator + \"publishing-filters\" + File.separator;\n+                final String systemFiltersPathString = Thread.currentThread()\n+                        .getContextClassLoader().getResource(systemFiltersDirectory).getPath();\n+                final File systemFilters = new File(systemFiltersPathString);\n+                Files.list(systemFilters.toPath()).forEach(filter -> {\n+                    try {\n+                        Files.copy(filter,\n+                                Paths.get(filtersDirectoryString + filter.getFileName()));\n+                    } catch (IOException e) {\n+                        Logger.error(this, e.getMessage(), e);\n+                    }\n+                });\n+                Logger.debug(PushPublishFiltersInitializer.class, \" dotcms filters files copied\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA0MDkx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411204091", "createdAt": "2020-05-13T18:46:52Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0Njo1MlrOGU--BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0Njo1MlrOGU--BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NjM4OQ==", "bodyText": "Add doc", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424656389", "createdAt": "2020-05-13T18:46:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/pushpublish/PushPublishFilterResource.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.dotcms.rest.api.v1.pushpublish;\n+\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.model.User;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.glassfish.jersey.server.JSONP;\n+\n+@Path(\"/v1/pushpublish/filter\")\n+public class PushPublishFilterResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA1NjY5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411205669", "createdAt": "2020-05-13T18:49:03Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OTowNFrOGU_DBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OTowNFrOGU_DBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1NzY2OA==", "bodyText": "Log here", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424657668", "createdAt": "2020-05-13T18:49:04Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/YamlUtil.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Yaml Utils to parse and save yaml files\n+ * @author jsanca\n+ */\n+public class YamlUtil {\n+\n+    private final static ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)\n+            .findAndRegisterModules();\n+\n+    /**\n+     * Parse the file in order to convert to T object\n+     * @param file {@link File}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final File file, final Class<T> tClass) {\n+\n+        return parse(Paths.get(file.getPath()), tClass);\n+    }\n+\n+    /**\n+     * Parse the path in order to convert to T object\n+     * @param path {@link Path}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final Path path, final Class<T> tClass) {\n+\n+        try(final InputStream inputStream = Files.newInputStream(path)) {\n+\n+            return parse(inputStream, tClass);\n+        }catch (Exception e){\n+            throw new DotRuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA1Nzk2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411205796", "createdAt": "2020-05-13T18:49:15Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OToxNVrOGU_DZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OToxNVrOGU_DZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1Nzc2NQ==", "bodyText": "Buffered it", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424657765", "createdAt": "2020-05-13T18:49:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/YamlUtil.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Yaml Utils to parse and save yaml files\n+ * @author jsanca\n+ */\n+public class YamlUtil {\n+\n+    private final static ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)\n+            .findAndRegisterModules();\n+\n+    /**\n+     * Parse the file in order to convert to T object\n+     * @param file {@link File}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final File file, final Class<T> tClass) {\n+\n+        return parse(Paths.get(file.getPath()), tClass);\n+    }\n+\n+    /**\n+     * Parse the path in order to convert to T object\n+     * @param path {@link Path}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final Path path, final Class<T> tClass) {\n+\n+        try(final InputStream inputStream = Files.newInputStream(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA2Mjkw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411206290", "createdAt": "2020-05-13T18:49:55Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OTo1NVrOGU_FCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo0OTo1NVrOGU_FCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1ODE4Ng==", "bodyText": "Log here", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424658186", "createdAt": "2020-05-13T18:49:55Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/YamlUtil.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Yaml Utils to parse and save yaml files\n+ * @author jsanca\n+ */\n+public class YamlUtil {\n+\n+    private final static ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)\n+            .findAndRegisterModules();\n+\n+    /**\n+     * Parse the file in order to convert to T object\n+     * @param file {@link File}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final File file, final Class<T> tClass) {\n+\n+        return parse(Paths.get(file.getPath()), tClass);\n+    }\n+\n+    /**\n+     * Parse the path in order to convert to T object\n+     * @param path {@link Path}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final Path path, final Class<T> tClass) {\n+\n+        try(final InputStream inputStream = Files.newInputStream(path)) {\n+\n+            return parse(inputStream, tClass);\n+        }catch (Exception e){\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Parse the input stream in order to convert to T object\n+     * @param inputStream {@link InputStream}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final InputStream inputStream, final Class<T> tClass) {\n+\n+        try {\n+            return ymlMapper\n+                    .readValue(inputStream, tClass);\n+        } catch (Exception e) {\n+            throw new DotRuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA2Mzg2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411206386", "createdAt": "2020-05-13T18:50:01Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MDowMVrOGU_FXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MDowMVrOGU_FXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1ODI3MQ==", "bodyText": "Log here", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424658271", "createdAt": "2020-05-13T18:50:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/YamlUtil.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Yaml Utils to parse and save yaml files\n+ * @author jsanca\n+ */\n+public class YamlUtil {\n+\n+    private final static ObjectMapper ymlMapper = new ObjectMapper(new YAMLFactory())\n+            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)\n+            .findAndRegisterModules();\n+\n+    /**\n+     * Parse the file in order to convert to T object\n+     * @param file {@link File}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final File file, final Class<T> tClass) {\n+\n+        return parse(Paths.get(file.getPath()), tClass);\n+    }\n+\n+    /**\n+     * Parse the path in order to convert to T object\n+     * @param path {@link Path}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final Path path, final Class<T> tClass) {\n+\n+        try(final InputStream inputStream = Files.newInputStream(path)) {\n+\n+            return parse(inputStream, tClass);\n+        }catch (Exception e){\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Parse the input stream in order to convert to T object\n+     * @param inputStream {@link InputStream}\n+     * @param tClass T class to convert\n+     * @param <T>\n+     * @return Object Yaml converted\n+     */\n+    public static <T> T parse(final InputStream inputStream, final Class<T> tClass) {\n+\n+        try {\n+            return ymlMapper\n+                    .readValue(inputStream, tClass);\n+        } catch (Exception e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n+\n+    /**\n+     * Write into a file a Yaml\n+     * @param file {@link File} destiny file to save the yaml\n+     * @param yaml T yaml file\n+     * @param <T>\n+     */\n+    public static <T> void write (final File file, final T yaml) {\n+\n+        try {\n+            ymlMapper.writeValue(file, yaml);\n+        } catch (Exception e) {\n+            throw new DotRuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA3MDI5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411207029", "createdAt": "2020-05-13T18:50:52Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MDo1MlrOGU_Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MDo1MlrOGU_Hfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1ODgxNA==", "bodyText": "use StringPool.BLANK and i18n \"Filter\"", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424658814", "createdAt": "2020-05-13T18:50:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionlet.java", "diffHunk": "@@ -63,6 +64,7 @@\n         final List<WorkflowActionletParameter> params = new ArrayList<>();\n         params.add(new WorkflowActionletParameter(PARAM_ENVIRONMENT, \"Name of the Environment\", \"\", true));\n         params.add(new WorkflowActionletParameter(PARAM_FORCE_PUSH, \"Force the Push? true or false\", \"false\", true));\n+        params.add(new WorkflowActionletParameter(PARAM_FILTER_KEY, \"Filter\", \"\", true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjA3Njk4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411207698", "createdAt": "2020-05-13T18:51:46Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MTo0N1rOGU_JeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1MTo0N1rOGU_JeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1OTMyMQ==", "bodyText": "I would ask to the catalog if the filter_key does not exists on publishing_bundle to proceed", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424659321", "createdAt": "2020-05-13T18:51:47Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05305AddPushPublishFilterColumn.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n+\n+public class Task05305AddPushPublishFilterColumn extends AbstractJDBCStartupTask {\n+\n+    @Override\n+    public String getPostgresScript() {\n+        return \"ALTER TABLE publishing_bundle ADD filter_key VARCHAR(100)\";\n+    }\n+\n+    @Override\n+    public String getMySQLScript() {\n+        return \"ALTER TABLE publishing_bundle ADD filter_key VARCHAR(100)\";\n+    }\n+\n+    @Override\n+    public String getOracleScript() {\n+        return \"ALTER TABLE publishing_bundle ADD filter_key VARCHAR2(100)\";\n+    }\n+\n+    @Override\n+    public String getMSSQLScript() {\n+        return \"ALTER TABLE publishing_bundle ADD filter_key NVARCHAR(100)\";\n+    }\n+\n+    @Override\n+    public String getH2Script() {\n+        return null;\n+    }\n+\n+    @Override\n+    protected List<String> getTablesToDropConstraints() {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean forceRun() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0568a65affc3aa93fde2d9692d52d4ae1944d28", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/e0568a65affc3aa93fde2d9692d52d4ae1944d28", "committedDate": "2020-05-13T22:57:50Z", "message": "#17806 #17985 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84206cac21f76993b27f794da8e08b4398c7652", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/a84206cac21f76993b27f794da8e08b4398c7652", "committedDate": "2020-05-14T15:38:52Z", "message": "Issue 17987 (#18487)\n\n* #17806 adding the ability to render a select box instead of a single text area for the actionlets on wf\r\n\r\n* #17806 adding the ability to render a select box instead of a single text area for the actionlets on wf 2\r\n\r\n* #17987 add filter key param and remove force push\r\n\r\n* #17987 fix java doc\r\n\r\n* #17987 dropdown for filter\r\n\r\n* #17987 dojoType and style to select\r\n\r\n* #17987 tests\r\n\r\n* #17987 test for getParameters\r\n\r\n* #17987 dropdown env and test\r\n\r\n* fix test\r\n\r\n* #17987 rollback to env selector, since it should allow multiple env\r\n\r\n* #17987 feedback changes\r\n\r\nCo-authored-by: jdotcms <jonathan.sanchez@dotcms.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e2a96762647ff6927fe66d0848ce0b8ee7a93c", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/a2e2a96762647ff6927fe66d0848ce0b8ee7a93c", "committedDate": "2020-05-14T18:00:39Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf576a198511562cb24aa36e0f151f02153c900", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/cdf576a198511562cb24aa36e0f151f02153c900", "committedDate": "2020-05-14T18:06:10Z", "message": "feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Mzc0ODAw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419374800", "createdAt": "2020-05-27T15:57:59Z", "commit": {"oid": "cdf576a198511562cb24aa36e0f151f02153c900"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo1Nzo1OVrOGbRtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo1Nzo1OVrOGbRtFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1NDgwNA==", "bodyText": "is there a way to fix this test without using a sleep?", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431254804", "createdAt": "2020-05-27T15:57:59Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ContentletIndexAPIImplTest.java", "diffHunk": "@@ -557,7 +557,7 @@ public void removeContentFromIndexByStructureInode () throws Exception {\n \n             int x=0;\n             do {\n-                Thread.sleep(200);\n+                Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdf576a198511562cb24aa36e0f151f02153c900"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8", "committedDate": "2020-05-27T16:11:25Z", "message": "merge master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDg5NzQw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419489740", "createdAt": "2020-05-27T18:15:36Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxNTozNlrOGbXaUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxNTozNlrOGbXaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0ODMwNQ==", "bodyText": "Avoid methods with more than 4/5 parameters. It gets too confusing. Create an object instead, probably using the Builder pattern to build it, which give you named methods) and then pass it to this method.", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431348305", "createdAt": "2020-05-27T18:15:36Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/publishing/remote/DependencyBundlerTest.java", "diffHunk": "@@ -0,0 +1,572 @@\n+package com.dotcms.enterprise.publishing.remote;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.bundle.business.BundleAPI;\n+import com.dotcms.publisher.business.DotPublisherException;\n+import com.dotcms.publisher.business.PublishQueueElement;\n+import com.dotcms.publisher.business.PublisherAPI;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.dotcms.publisher.util.PublisherUtil;\n+import com.dotcms.publishing.BundlerStatus;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotBundleException;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.IBundler;\n+import com.dotcms.publishing.Publisher;\n+import com.dotcms.publishing.PublisherConfig.Operation;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.structure.model.Relationship;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys.Relationship.RELATIONSHIP_CARDINALITY;\n+import com.liferay.portal.model.User;\n+import io.vavr.API;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class DependencyBundlerTest extends IntegrationTestBase {\n+\n+    private static User systemUser;\n+    private static String defaultFilterKey = \"Intelligent.yml\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.getUserAPI().getSystemUser();\n+        createFilterDescriptor(defaultFilterKey,true,true,false,null,null,null,null,true);\n+    }\n+\n+    /**\n+     * Creates and saves bundle\n+     * @param bundleName\n+     * @return a bundle\n+     * @throws DotDataException\n+     */\n+    private static Bundle createBundle (final String bundleName, final boolean forcePush,final String filterKey)\n+            throws DotDataException {\n+\n+        final BundleAPI bundleAPI         = APILocator.getBundleAPI();\n+        final Bundle     bundle1           = new Bundle(bundleName, null, null, systemUser.getUserId(),forcePush,filterKey);\n+\n+        bundleAPI.saveBundle(bundle1);\n+        return bundle1;\n+    }\n+\n+    /**\n+     * Creates a Filter and adds it to map of filters\n+     *\n+     * @param key\n+     * @param dependencies\n+     * @param relationships\n+     * @param forcePush\n+     * @param excludeClasses\n+     * @param excludeDependencyClasses\n+     * @param excludeQuery\n+     * @param excludeDependencyQuery\n+     * @param defaultFilter\n+     */\n+    private static void createFilterDescriptor(final String key, final boolean dependencies,\n+            final boolean relationships, final boolean forcePush,\n+            final List<Object> excludeClasses, final List<Object> excludeDependencyClasses,\n+            final String excludeQuery, final String excludeDependencyQuery, final boolean defaultFilter){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjMxMDk1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419631095", "createdAt": "2020-05-27T21:44:26Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0NDoyNlrOGbePWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0NDoyNlrOGbePWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MDE4Ng==", "bodyText": "the excludeClassesList seems unnecessary here", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431460186", "createdAt": "2020-05-27T21:44:26Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/publishing/remote/DependencyBundlerTest.java", "diffHunk": "@@ -0,0 +1,572 @@\n+package com.dotcms.enterprise.publishing.remote;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.bundle.business.BundleAPI;\n+import com.dotcms.publisher.business.DotPublisherException;\n+import com.dotcms.publisher.business.PublishQueueElement;\n+import com.dotcms.publisher.business.PublisherAPI;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.dotcms.publisher.util.PublisherUtil;\n+import com.dotcms.publishing.BundlerStatus;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotBundleException;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.IBundler;\n+import com.dotcms.publishing.Publisher;\n+import com.dotcms.publishing.PublisherConfig.Operation;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.structure.model.Relationship;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys.Relationship.RELATIONSHIP_CARDINALITY;\n+import com.liferay.portal.model.User;\n+import io.vavr.API;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class DependencyBundlerTest extends IntegrationTestBase {\n+\n+    private static User systemUser;\n+    private static String defaultFilterKey = \"Intelligent.yml\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.getUserAPI().getSystemUser();\n+        createFilterDescriptor(defaultFilterKey,true,true,false,null,null,null,null,true);\n+    }\n+\n+    /**\n+     * Creates and saves bundle\n+     * @param bundleName\n+     * @return a bundle\n+     * @throws DotDataException\n+     */\n+    private static Bundle createBundle (final String bundleName, final boolean forcePush,final String filterKey)\n+            throws DotDataException {\n+\n+        final BundleAPI bundleAPI         = APILocator.getBundleAPI();\n+        final Bundle     bundle1           = new Bundle(bundleName, null, null, systemUser.getUserId(),forcePush,filterKey);\n+\n+        bundleAPI.saveBundle(bundle1);\n+        return bundle1;\n+    }\n+\n+    /**\n+     * Creates a Filter and adds it to map of filters\n+     *\n+     * @param key\n+     * @param dependencies\n+     * @param relationships\n+     * @param forcePush\n+     * @param excludeClasses\n+     * @param excludeDependencyClasses\n+     * @param excludeQuery\n+     * @param excludeDependencyQuery\n+     * @param defaultFilter\n+     */\n+    private static void createFilterDescriptor(final String key, final boolean dependencies,\n+            final boolean relationships, final boolean forcePush,\n+            final List<Object> excludeClasses, final List<Object> excludeDependencyClasses,\n+            final String excludeQuery, final String excludeDependencyQuery, final boolean defaultFilter){\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        if(UtilMethods.isSet(dependencies)) {\n+            filtersMap.put(\"dependencies\", dependencies);\n+        }\n+        if(UtilMethods.isSet(relationships)) {\n+            filtersMap.put(\"relationships\", relationships);\n+        }\n+        if(UtilMethods.isSet(forcePush)) {\n+            filtersMap.put(\"forcePush\", forcePush);\n+        }\n+        if(UtilMethods.isSet(excludeClasses)) {\n+            filtersMap.put(\"excludeClasses\", excludeClasses);\n+        }\n+        if(UtilMethods.isSet(excludeDependencyClasses)) {\n+            filtersMap.put(\"excludeDependencyClasses\", excludeDependencyClasses);\n+        }\n+        if(UtilMethods.isSet(excludeQuery)) {\n+            filtersMap.put(\"excludeQuery\", excludeQuery);\n+        }\n+        if(UtilMethods.isSet(excludeDependencyQuery)) {\n+            filtersMap.put(\"excludeDependencyQuery\", excludeDependencyQuery);\n+        }\n+        APILocator.getPublisherAPI().addFilterDescriptor(new FilterDescriptor(key,key,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * Generate a bundle and returns a PushPublisherConfig to retrieve the list of objects that make up\n+     * the bundle, organized by their types.\n+     */\n+    private static PushPublisherConfig generateBundle ( final String bundleId, final PushPublisherConfig.Operation operation )\n+            throws DotPublisherException, DotDataException, DotPublishingException, IllegalAccessException, InstantiationException, DotBundleException, IOException {\n+\n+        final PushPublisherConfig pconf = new PushPublisherConfig();\n+        final PublisherAPI pubAPI = PublisherAPI.getInstance();\n+\n+        final List<PublishQueueElement> tempBundleContents = pubAPI\n+                .getQueueElementsByBundleId(bundleId);\n+        final List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>();\n+\n+        for (final PublishQueueElement queueElement : tempBundleContents) {\n+            assetsToPublish.add(queueElement);\n+        }\n+\n+        pconf.setDownloading(true);\n+        pconf.setOperation(operation);\n+\n+        pconf.setAssets(assetsToPublish);\n+        //Queries creation\n+        pconf.setLuceneQueries(PublisherUtil.prepareQueries(tempBundleContents));\n+        pconf.setId(bundleId);\n+        pconf.setUser(APILocator.getUserAPI().getSystemUser());\n+\n+        //BUNDLERS\n+\n+        final List<Class<IBundler>> bundlers = new ArrayList<>();\n+        final List<IBundler> confBundlers = new ArrayList<IBundler>();\n+\n+        final Publisher publisher = new PushPublisher();\n+        publisher.init(pconf);\n+        //Add the bundles for this publisher\n+        for (final Class<IBundler> clazz : publisher.getBundlers()) {\n+            if (!bundlers.contains(clazz)) {\n+                bundlers.add(clazz);\n+            }\n+        }\n+\n+        final File bundleRoot = BundlerUtil.getBundleRoot(pconf);\n+\n+        // Run bundlers\n+        BundlerUtil.writeBundleXML(pconf);\n+        for (final Class<IBundler> aClass : bundlers) {\n+\n+            final IBundler bundler = aClass.newInstance();\n+            confBundlers.add(bundler);\n+            bundler.setConfig(pconf);\n+            bundler.setPublisher(publisher);\n+            final BundlerStatus bundlerStatus = new BundlerStatus(bundler.getClass().getName());\n+            //Generate the bundler\n+            Logger.info(DependencyBundlerTest.class, \"Start of Bundler: \" + aClass.getSimpleName());\n+            bundler.generate(bundleRoot, bundlerStatus);\n+            Logger.info(DependencyBundlerTest.class, \"End of Bundler: \" + aClass.getSimpleName());\n+        }\n+\n+        pconf.setBundlers(confBundlers);\n+\n+        return pconf;\n+    }\n+\n+    /**\n+     * This test is for the filter excludeDependencyClasses.\n+     *\n+     * This test creates a Content Type and a content, and generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * so the content and the content type (as a dependency) will be added.\n+     * After this using the same Content Type and content generates another bundle but using a new created filter that exclude ContentTypes to be pushed\n+     * as a dependency, so in the bundle the content will be added but the content type will not.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_ExcludeDependencyClasses_ContentTypeWorkflow_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException {\n+        //Create ContentType\n+        final ContentType contentType = TestDataUtils.getWikiLikeContentType();\n+        //Create Content\n+        final Contentlet content = TestDataUtils.getWikiContent(true,APILocator.getLanguageAPI().getDefaultLanguage().getId(),contentType.id());\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(content.getIdentifier()),bundleWithDefaultFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithDefaultFilter = generateBundle(bundleWithDefaultFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithDefaultFilter);\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(contentType.id()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(content.getIdentifier()));\n+\n+        //Create filter\n+        final String filterKey = \"TestFilterWithExcludeDependencyClasses.yml\";\n+        final List<Object> excludeDependencyClassesList = new ArrayList<>();\n+        excludeDependencyClassesList.add(\"ContentType\");\n+        excludeDependencyClassesList.add(\"Workflow\");\n+        createFilterDescriptor(filterKey,true,true,false,\n+                null,excludeDependencyClassesList,null,null,false);\n+        //Create bundle with New filter\n+        final Bundle bundleWithNewFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,filterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(content.getIdentifier()),bundleWithNewFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithNewFilter = generateBundle(bundleWithNewFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithNewFilter);\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getContentlets().contains(content.getIdentifier()));\n+    }\n+\n+    /**\n+     * This test is for the filter excludeClasses.\n+     *\n+     * This test creates a Template and a Container, and generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * so the Template and the Container will be added (both assets added manually).\n+     * After this using the same Template and Container generates another bundle but using a new created filter that exclude Template and Container to be pushed,\n+     * so in the bundle neither the Template nor the Container will be added.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_ExcludeClasses_TemplateContainer_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException {\n+        //Create Container\n+        final Container container = new ContainerDataGen().nextPersisted();\n+        //Create Template\n+        final Template template = new TemplateDataGen().nextPersisted();\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(template.getIdentifier(),container.getIdentifier()),bundleWithDefaultFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithDefaultFilter = generateBundle(bundleWithDefaultFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithDefaultFilter);\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getTemplates().isEmpty());\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getContainers().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getTemplates().contains(template.getIdentifier()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContainers().contains(container.getIdentifier()));\n+\n+        //Create filter\n+        final String filterKey = \"TestFilterWithExcludeClasses.yml\";\n+        final List<Object> excludeClassesList = new ArrayList<>();\n+        excludeClassesList.add(\"Template\");\n+        excludeClassesList.add(\"Containers\");\n+        createFilterDescriptor(filterKey,true,true,false,\n+                excludeClassesList,null,null,null,false);\n+        //Create bundle with New filter\n+        final Bundle bundleWithNewFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,filterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(template.getIdentifier(),container.getIdentifier()),bundleWithNewFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithNewFilter = generateBundle(bundleWithNewFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithNewFilter);\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getTemplates().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getContainers().isEmpty());\n+    }\n+\n+    /**\n+     * This test is for the filter excludeDependencyQuery\n+     *\n+     * This test creates 2 Content Types with a Relationship field, creates 2 content one of each Content Type and Relates them,\n+     * generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * so the both ContentTypes and content will be added (Content Types and child content as a dependency since only pushing the parent content).\n+     * After this using the same assets generates another bundle but using a new created filter that exclude content from the child Content Type to be pushed,\n+     * so in the bundle will be the parent and child Content Type and the parent content.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_ExcludeDependencyQuery_ContentFromChildContentType_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException, DotSecurityException {\n+        //Create child Content Type\n+        final ContentType childContentType = TestDataUtils.getNewsLikeContentType();\n+        //Create parent Content Type\n+        final ContentType parentContentType = TestDataUtils.getWikiLikeContentType();\n+        //Relate Content Types\n+        Field newField = FieldBuilder.builder(RelationshipField.class).name(\"chilCT_parentCT\" + System.currentTimeMillis())\n+                .contentTypeId(parentContentType.id()).values(String.valueOf(\n+                        RELATIONSHIP_CARDINALITY.MANY_TO_MANY.ordinal()))\n+                .relationType(childContentType.variable()).build();\n+        newField = APILocator.getContentTypeFieldAPI().save(newField, systemUser);\n+        //Create child content\n+        final Contentlet childContentlet = TestDataUtils.getNewsContent(true,APILocator.getLanguageAPI().getDefaultLanguage().getId(),childContentType.id());\n+        //Create parent content\n+        Contentlet parentContentlet = TestDataUtils.getWikiContent(false,APILocator.getLanguageAPI().getDefaultLanguage().getId(),parentContentType.id());\n+        //Relate contents\n+        final Relationship relationship = APILocator.getRelationshipAPI().getRelationshipFromField(newField,systemUser);\n+        parentContentlet = APILocator.getContentletAPI().checkin(parentContentlet,\n+                CollectionsUtils.map(relationship, CollectionsUtils.list(childContentlet)), systemUser,\n+                false);\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(parentContentlet.getIdentifier()),bundleWithDefaultFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithDefaultFilter = generateBundle(bundleWithDefaultFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithDefaultFilter);\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(parentContentType.id()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(childContentType.id()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getContentlets().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(parentContentlet.getIdentifier()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(childContentlet.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getRelationships().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getRelationships().contains(relationship.getInode()));\n+\n+        //Create filter\n+        final String filterKey = \"TestFilterWithExcludeDependencyQuery.yml\";\n+        final String excludeDependencyQuery = \"+contentType:\"+childContentType.variable();\n+        createFilterDescriptor(filterKey,true,true,false,\n+                null,null,null,excludeDependencyQuery,false);\n+        //Create bundle with New filter\n+        final Bundle bundleWithNewFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,filterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(parentContentlet.getIdentifier()),bundleWithNewFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithNewFilter = generateBundle(bundleWithNewFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithNewFilter);\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getStructures().contains(parentContentType.id()));\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getStructures().contains(childContentType.id()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getContentlets().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getContentlets().contains(parentContentlet.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getContentlets().contains(childContentlet.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getRelationships().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getRelationships().contains(relationship.getInode()));\n+    }\n+\n+    /**\n+     * This test is for the filter excludeQuery\n+     *\n+     * This test creates 2 Content Types (one Widget and one Content), creates one content of each one,\n+     * generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * and tries to push each content, so the both ContentTypes and content will be added.\n+     * After this using the same assets generates another bundle but using a new created filter that exclude content from the baseType Widget to be pushed,\n+     * so in the bundle will be only the content and the ContentType of the baseType Content.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_ExcludeQuery_BaseTypeWidget_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException, DotSecurityException {\n+        //Create Widget ContentType\n+        final ContentType widgetContentType = TestDataUtils.getWidgetLikeContentType();\n+        //Create Content ContentType\n+        final ContentType contentContentType = TestDataUtils.getWikiLikeContentType();\n+        //Create Widget contentlet\n+        final Contentlet widgetContentlet = TestDataUtils.getWidgetContent(true,APILocator.getLanguageAPI().getDefaultLanguage().getId(),widgetContentType.id());\n+        //Create Content contentlet\n+        final Contentlet contentContentlet = TestDataUtils.getWikiContent(true, APILocator.getLanguageAPI().getDefaultLanguage().getId(),contentContentType.id());\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(contentContentlet.getIdentifier(),widgetContentlet.getIdentifier()),bundleWithDefaultFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithDefaultFilter = generateBundle(bundleWithDefaultFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithDefaultFilter);\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(contentContentType.id()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(widgetContentType.id()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getContentlets().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(contentContentlet.getIdentifier()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(widgetContentlet.getIdentifier()));\n+\n+        //Create filter\n+        final String filterKey = \"TestFilterWithExcludeQuery.yml\";\n+        final String excludeQuery = \"+baseType:\"+ BaseContentType.WIDGET.getType();\n+        createFilterDescriptor(filterKey,true,true,false,\n+                null,null,excludeQuery,null,false);\n+        //Create bundle with New filter\n+        final Bundle bundleWithNewFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,filterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(contentContentlet.getIdentifier(),widgetContentlet.getIdentifier()),bundleWithNewFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithNewFilter = generateBundle(bundleWithNewFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithNewFilter);\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getStructures().contains(contentContentType.id()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getStructures().contains(widgetContentType.id()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getContentlets().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithNewFilter.getContentlets().contains(contentContentlet.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithNewFilter.getContentlets().contains(widgetContentlet.getIdentifier()));\n+    }\n+\n+    /**\n+     * This test is for the filter dependencies.\n+     *\n+     * This test creates a Template, a Container, a Folder, a Page, a ContentType and a contentlet\n+     * and generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * by pushing the Page (by dependency it will pull everything else Contentlet, ContentType, Container, Template, Folder).\n+     * After this using the same assets generates another bundle but using a new created filter that exclude any dependency to be pushed,\n+     * so in the bundle there is nothing else but the Page.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_DependenciesFalse_TemplateContainerFolderContenttypeContentlet_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException {\n+        //Create Content Type\n+        final ContentType contentType = TestDataUtils.getWikiLikeContentType();\n+        //Create Container\n+        final Container container = new ContainerDataGen().withContentType(contentType,\"!{title}\").nextPersisted();\n+        //Create Template\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final Template template = new TemplateDataGen().withContainer(container.getIdentifier(),uuid).nextPersisted();\n+        //Create contentlet\n+        final Contentlet contentlet = TestDataUtils.getWikiContent(true,APILocator.getLanguageAPI().getDefaultLanguage().getId(),contentType.id());\n+        //Create Folder\n+        final Folder folder = new FolderDataGen().nextPersisted();\n+        //Create Page\n+        final HTMLPageAsset page = new HTMLPageDataGen(folder,template).languageId(APILocator.getLanguageAPI().getDefaultLanguage().getId())\n+                .nextPersisted();\n+        HTMLPageDataGen.publish(page);\n+        //Add Contentlet to Page\n+        final MultiTree multiTree = new MultiTree(page.getIdentifier(),\n+                container.getIdentifier(),\n+                contentlet.getIdentifier(), getDotParserContainerUUID(uuid), 0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);\n+        //Add assets to the bundle\n+        PublisherAPI.getInstance().saveBundleAssets(Arrays.asList(page.getIdentifier()),bundleWithDefaultFilter.getId(),\n+                systemUser);\n+        //Generate Bundle, will return several dependencySet with the assets that will be added to the bundle\n+        final PushPublisherConfig listOfAssetsWithDefaultFilter = generateBundle(bundleWithDefaultFilter.getId(), Operation.PUBLISH);\n+        Assert.assertNotNull(listOfAssetsWithDefaultFilter);\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getStructures().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(contentType.id()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getStructures().contains(page.getContentType().id()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getTemplates().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getTemplates().contains(template.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getContainers().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContainers().contains(container.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getContentlets().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(contentlet.getIdentifier()));\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getContentlets().contains(page.getIdentifier()));\n+        Assert.assertFalse(listOfAssetsWithDefaultFilter.getFolders().isEmpty());\n+        Assert.assertTrue(listOfAssetsWithDefaultFilter.getFolders().contains(folder.getInode()));\n+\n+\n+        //Create filter\n+        final String filterKey = \"TestFilterWithDependenciesFalse.yml\";\n+        final List<Object> excludeClassesList = new ArrayList<>();\n+        excludeClassesList.add(\"Template\");\n+        excludeClassesList.add(\"Containers\");\n+        createFilterDescriptor(filterKey,false,true,false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 483}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjMyNTIw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419632520", "createdAt": "2020-05-27T21:46:47Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0Njo0OFrOGbeUHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0Njo0OFrOGbeUHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MTQwNg==", "bodyText": "expected result?", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431461406", "createdAt": "2020-05-27T21:46:48Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publisher/bundle/business/BundleFactoryTest.java", "diffHunk": "@@ -212,4 +214,36 @@ public void test_deleteAllAssetsFromBundle() throws DotDataException, DotPublish\n \n         bundleFactory.deleteBundle(bundleid);\n     }\n+\n+    @Test\n+    public void test_insertBundleWithFilterKey() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjMzMDg4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419633088", "createdAt": "2020-05-27T21:47:52Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0Nzo1MlrOGbeWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0Nzo1MlrOGbeWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MTkyMA==", "bodyText": "expected result missing in name", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431461920", "createdAt": "2020-05-27T21:47:52Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publisher/bundle/business/BundleFactoryTest.java", "diffHunk": "@@ -212,4 +214,36 @@ public void test_deleteAllAssetsFromBundle() throws DotDataException, DotPublish\n \n         bundleFactory.deleteBundle(bundleid);\n     }\n+\n+    @Test\n+    public void test_insertBundleWithFilterKey() throws DotDataException {\n+        final String uuid = UUIDGenerator.generateUuid();\n+        Bundle bundle = new Bundle();\n+        bundle.setId(uuid);\n+        bundle.setName(\"testBundle\"+System.currentTimeMillis());\n+        bundle.setForcePush(false);\n+        bundle.setOwner(adminUser.getUserId());\n+        bundle.setPublishDate(new Date());\n+        bundle.setFilterKey(\"testFilter\");\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+\n+        bundle = APILocator.getBundleAPI().getBundleById(uuid);\n+        assertEquals(\"testFilter\",bundle.getFilterKey());\n+    }\n+\n+    @Test\n+    public void test_insertBundleWithoutFilterKey() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjM0MjQ5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419634249", "createdAt": "2020-05-27T21:49:53Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0OTo1M1rOGbeZ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0OTo1M1rOGbeZ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2Mjg3OQ==", "bodyText": "expected result missing in test method name", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431462879", "createdAt": "2020-05-27T21:49:53Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +326,293 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    @Test\n+    public void test_addFilter(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjU1MzM5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419655339", "createdAt": "2020-05-27T22:32:02Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMjowMlrOGbfcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozMjowMlrOGbfcmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3OTk2Mw==", "bodyText": "not needed?", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431479963", "createdAt": "2020-05-27T22:32:02Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +326,293 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    @Test\n+    public void test_addFilter(){\n+        publisherAPI.getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final Map<String,FilterDescriptor> filterDescriptorMap = APILocator.getPublisherAPI().getFilterDescriptorMap();\n+        Logger.info(this,filterDescriptorMap.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjU3NjYw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419657660", "createdAt": "2020-05-27T22:37:21Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozNzoyMVrOGbfj7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjozNzoyMVrOGbfj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ4MTgzNg==", "bodyText": "expected result or javadoc", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431481836", "createdAt": "2020-05-27T22:37:21Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +326,293 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    @Test\n+    public void test_addFilter(){\n+        publisherAPI.getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final Map<String,FilterDescriptor> filterDescriptorMap = APILocator.getPublisherAPI().getFilterDescriptorMap();\n+        Logger.info(this,filterDescriptorMap.toString());\n+        Assert.assertFalse(filterDescriptorMap.isEmpty());\n+        Assert.assertTrue(filterDescriptorMap.containsKey(filterDescriptor.getKey()));\n+    }\n+\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Njc3NzY5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419677769", "createdAt": "2020-05-27T23:27:06Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyNzowNlrOGbgl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzoyNzowNlrOGbgl2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ5ODcxMg==", "bodyText": "This test is identical to the previous one. Turn on code-duplication detection on your IDE to spot this. Either fix or remove the duplicate", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431498712", "createdAt": "2020-05-27T23:27:06Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherFilterImplTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.publishing;\n+\n+import com.dotcms.publisher.util.PusheableAsset;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.util.UUIDGenerator;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PublisherFilterImplTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void Test_acceptExcludeDependencyClasses(){\n+        // Using diff case because user can use diff case\n+        final ArrayList<String> listOfTypes = new ArrayList<String>(Arrays.asList(\"Containers\", \"TEMPLATE\",\"host\",\"ContentType\"));\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl(true,true);\n+\n+        // Should return true since the types have not been add to the Set, using the PusheableAsset since this is the value passed in core\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType()));\n+        // Adding the types to the Set\n+        listOfTypes.stream().forEach(type -> publisherFilter.addTypeToExcludeDependencyClassesSet(type));\n+        // Should return false since types are in the Set\n+        Assert.assertFalse(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType()));\n+        Assert.assertFalse(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType()));\n+        Assert.assertFalse(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType()));\n+        Assert.assertFalse(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType()));\n+        // Should return true since the type is not in the Set\n+        Assert.assertTrue(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType()));\n+\n+    }\n+\n+    @Test\n+    public void Test_acceptExcludeClasses(){\n+        // Using diff case because user can use diff case\n+        final ArrayList<String> listOfTypes = new ArrayList<String>(Arrays.asList(\"Containers\", \"TEMPLATE\",\"host\"));\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl(true,true);\n+\n+        // Should return true since the types have not been add to the Set, using the PusheableAsset since this is the value passed in core\n+        Assert.assertTrue(publisherFilter.acceptExcludeClasses(PusheableAsset.CONTAINER.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeClasses(PusheableAsset.TEMPLATE.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeClasses(PusheableAsset.SITE.getType()));\n+        Assert.assertTrue(publisherFilter.acceptExcludeClasses(PusheableAsset.CONTENTLET.getType()));\n+        // Adding the types to the Set\n+        listOfTypes.stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type));\n+        // Should return false since types are in the Set\n+        Assert.assertFalse(publisherFilter.acceptExcludeClasses(PusheableAsset.CONTAINER.getType()));\n+        Assert.assertFalse(publisherFilter.acceptExcludeClasses(PusheableAsset.TEMPLATE.getType()));\n+        Assert.assertFalse(publisherFilter.acceptExcludeClasses(PusheableAsset.SITE.getType()));\n+        // Should return true since the type is not in the Set\n+        Assert.assertTrue(publisherFilter.acceptExcludeClasses(PusheableAsset.CONTENTLET.getType()));\n+\n+    }\n+\n+    @Test\n+    public void Test_acceptExcludeQuery(){\n+        // Generate a couple of uuid\n+        final String id1 = UUIDGenerator.generateUuid();\n+        final String id2 = UUIDGenerator.generateUuid();\n+        final String id3 = UUIDGenerator.generateUuid();\n+        final ArrayList<String> listOfIds = new ArrayList<String>(Arrays.asList(id1,id2,id3));\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl(true,true);\n+\n+        // Should return true since the ids have not been add to the Set\n+        Assert.assertTrue(publisherFilter.acceptExcludeQuery(id1));\n+        Assert.assertTrue(publisherFilter.acceptExcludeQuery(id2));\n+        Assert.assertTrue(publisherFilter.acceptExcludeQuery(id3));\n+        Assert.assertTrue(publisherFilter.acceptExcludeQuery(UUIDGenerator.generateUuid()));\n+        // Adding the types to the Set\n+        listOfIds.stream().forEach(id -> publisherFilter.addContentletIdToExcludeQueryAssetIdSet(id));\n+        // Should return false since ids are in the Set\n+        Assert.assertFalse(publisherFilter.acceptExcludeQuery(id1));\n+        Assert.assertFalse(publisherFilter.acceptExcludeQuery(id2));\n+        Assert.assertFalse(publisherFilter.acceptExcludeQuery(id3));\n+        // Should return true since the id is not in the Set\n+        Assert.assertTrue(publisherFilter.acceptExcludeQuery(UUIDGenerator.generateUuid()));\n+\n+    }\n+\n+    @Test\n+    public void Test_acceptExcludeDependencyQuery(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjgyMTk3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-419682197", "createdAt": "2020-05-27T23:38:32Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozODozMlrOGbg0Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzo1ODoyM1rOGbhL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjM4Ng==", "bodyText": "this needs to be in plural /v1/pushpublish/filters as dictated by the convention.\nE.g. GET /employees, gets all employees, GET /employees/1 gets a particular employee out of all of them", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431502386", "createdAt": "2020-05-27T23:38:32Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/pushpublish/PushPublishFilterResource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.rest.api.v1.pushpublish;\n+\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.rest.annotation.NoCache;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.liferay.portal.model.User;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.glassfish.jersey.server.JSONP;\n+\n+/**\n+ * This Resource is for the push publishing filters\n+ */\n+@Path(\"/v1/pushpublish/filter\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNDY5MA==", "bodyText": "I think the name of this method is not clear. It should be doesExcludeClassesContaintType", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431504690", "createdAt": "2020-05-27T23:45:44Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherFilterImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotcms.publishing;\n+\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This class is use to load the values of the filters of a FilterDescriptor that is going to be use\n+ * to create a bundle.\n+ * Each method check for each filter and check that the asset that is going to be added to the bundle\n+ * is accepted.\n+ */\n+public class PublisherFilterImpl implements PublisherFilter{\n+\n+    private final Set<String> excludeClassesSet = new HashSet<>();\n+    private final Set<String>excludeDependencyClassesSet = new HashSet<>();\n+    private final Set<String>excludeQueryAssetIdSet = new HashSet<>();\n+    private final Set<String>excludeDependencyQueryAssetIdSet = new HashSet<>();\n+    private final boolean dependencies;\n+    private final boolean relationships;\n+\n+    public PublisherFilterImpl(final boolean dependencies, final boolean relationships) {\n+        this.dependencies = dependencies;\n+        this.relationships = relationships;\n+    }\n+\n+    @Override\n+    public boolean isDependencies() {\n+        return dependencies;\n+    }\n+\n+    @Override\n+    public boolean isRelationships() {\n+        return relationships;\n+    }\n+\n+    public void addTypeToExcludeDependencyClassesSet(final String type) {\n+        this.excludeDependencyClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addTypeToExcludeClassesSet(final String type) {\n+        this.excludeClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addContentletIdToExcludeQueryAssetIdSet(final String contentletId) {\n+        this.excludeQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    public void addContentletIdToExcludeDependencyQueryAssetIdSet(final String contentletId) {\n+        this.excludeDependencyQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeClasses(final String assetType) {\n+        return !this.excludeClassesSet.contains(assetType.toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNDg2MQ==", "bodyText": "I think the name of this method is not clear. It should be doesExcludeQueryContaintContentlet", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431504861", "createdAt": "2020-05-27T23:46:20Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherFilterImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotcms.publishing;\n+\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This class is use to load the values of the filters of a FilterDescriptor that is going to be use\n+ * to create a bundle.\n+ * Each method check for each filter and check that the asset that is going to be added to the bundle\n+ * is accepted.\n+ */\n+public class PublisherFilterImpl implements PublisherFilter{\n+\n+    private final Set<String> excludeClassesSet = new HashSet<>();\n+    private final Set<String>excludeDependencyClassesSet = new HashSet<>();\n+    private final Set<String>excludeQueryAssetIdSet = new HashSet<>();\n+    private final Set<String>excludeDependencyQueryAssetIdSet = new HashSet<>();\n+    private final boolean dependencies;\n+    private final boolean relationships;\n+\n+    public PublisherFilterImpl(final boolean dependencies, final boolean relationships) {\n+        this.dependencies = dependencies;\n+        this.relationships = relationships;\n+    }\n+\n+    @Override\n+    public boolean isDependencies() {\n+        return dependencies;\n+    }\n+\n+    @Override\n+    public boolean isRelationships() {\n+        return relationships;\n+    }\n+\n+    public void addTypeToExcludeDependencyClassesSet(final String type) {\n+        this.excludeDependencyClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addTypeToExcludeClassesSet(final String type) {\n+        this.excludeClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addContentletIdToExcludeQueryAssetIdSet(final String contentletId) {\n+        this.excludeQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    public void addContentletIdToExcludeDependencyQueryAssetIdSet(final String contentletId) {\n+        this.excludeDependencyQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeClasses(final String assetType) {\n+        return !this.excludeClassesSet.contains(assetType.toLowerCase());\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeQuery(final String contentletId) {\n+        return !this.excludeQueryAssetIdSet.contains(contentletId);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNDk0Mw==", "bodyText": "I think the name of this method is not clear. It should be doesExcludeDependencyQueryContaintContentlet", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431504943", "createdAt": "2020-05-27T23:46:40Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherFilterImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotcms.publishing;\n+\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This class is use to load the values of the filters of a FilterDescriptor that is going to be use\n+ * to create a bundle.\n+ * Each method check for each filter and check that the asset that is going to be added to the bundle\n+ * is accepted.\n+ */\n+public class PublisherFilterImpl implements PublisherFilter{\n+\n+    private final Set<String> excludeClassesSet = new HashSet<>();\n+    private final Set<String>excludeDependencyClassesSet = new HashSet<>();\n+    private final Set<String>excludeQueryAssetIdSet = new HashSet<>();\n+    private final Set<String>excludeDependencyQueryAssetIdSet = new HashSet<>();\n+    private final boolean dependencies;\n+    private final boolean relationships;\n+\n+    public PublisherFilterImpl(final boolean dependencies, final boolean relationships) {\n+        this.dependencies = dependencies;\n+        this.relationships = relationships;\n+    }\n+\n+    @Override\n+    public boolean isDependencies() {\n+        return dependencies;\n+    }\n+\n+    @Override\n+    public boolean isRelationships() {\n+        return relationships;\n+    }\n+\n+    public void addTypeToExcludeDependencyClassesSet(final String type) {\n+        this.excludeDependencyClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addTypeToExcludeClassesSet(final String type) {\n+        this.excludeClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addContentletIdToExcludeQueryAssetIdSet(final String contentletId) {\n+        this.excludeQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    public void addContentletIdToExcludeDependencyQueryAssetIdSet(final String contentletId) {\n+        this.excludeDependencyQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeClasses(final String assetType) {\n+        return !this.excludeClassesSet.contains(assetType.toLowerCase());\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeQuery(final String contentletId) {\n+        return !this.excludeQueryAssetIdSet.contains(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeDependencyQuery(final String contentletId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwNTE0Ng==", "bodyText": "I think the name of this method is not clear. It should be doesExcludeDependencyClassesContaintType", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431505146", "createdAt": "2020-05-27T23:47:22Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherFilterImpl.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.dotcms.publishing;\n+\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * This class is use to load the values of the filters of a FilterDescriptor that is going to be use\n+ * to create a bundle.\n+ * Each method check for each filter and check that the asset that is going to be added to the bundle\n+ * is accepted.\n+ */\n+public class PublisherFilterImpl implements PublisherFilter{\n+\n+    private final Set<String> excludeClassesSet = new HashSet<>();\n+    private final Set<String>excludeDependencyClassesSet = new HashSet<>();\n+    private final Set<String>excludeQueryAssetIdSet = new HashSet<>();\n+    private final Set<String>excludeDependencyQueryAssetIdSet = new HashSet<>();\n+    private final boolean dependencies;\n+    private final boolean relationships;\n+\n+    public PublisherFilterImpl(final boolean dependencies, final boolean relationships) {\n+        this.dependencies = dependencies;\n+        this.relationships = relationships;\n+    }\n+\n+    @Override\n+    public boolean isDependencies() {\n+        return dependencies;\n+    }\n+\n+    @Override\n+    public boolean isRelationships() {\n+        return relationships;\n+    }\n+\n+    public void addTypeToExcludeDependencyClassesSet(final String type) {\n+        this.excludeDependencyClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addTypeToExcludeClassesSet(final String type) {\n+        this.excludeClassesSet.add(type.toLowerCase());\n+    }\n+\n+    public void addContentletIdToExcludeQueryAssetIdSet(final String contentletId) {\n+        this.excludeQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    public void addContentletIdToExcludeDependencyQueryAssetIdSet(final String contentletId) {\n+        this.excludeDependencyQueryAssetIdSet.add(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeClasses(final String assetType) {\n+        return !this.excludeClassesSet.contains(assetType.toLowerCase());\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeQuery(final String contentletId) {\n+        return !this.excludeQueryAssetIdSet.contains(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeDependencyQuery(final String contentletId) {\n+        return !this.excludeDependencyQueryAssetIdSet.contains(contentletId);\n+    }\n+\n+    @Override\n+    public boolean acceptExcludeDependencyClasses(final String pusheableAssetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwODQ1Nw==", "bodyText": "I think here an alternative could be:\n\nMap the List<Contentlet> contentlets to a List<String> contentletsIdentifiers using stream().map\nAdd a method to the publisherFilter to addAll that takes a list of strings and pass list in 1.\n@freddyucv @jdotcms thoughts about this?\nIf the guys thinks this can be better, please apply in the if above also", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431508457", "createdAt": "2020-05-27T23:58:23Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,78 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(user.isAdmin()){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = getDefaultFilter();\n+        return !UtilMethods.isSet(filterKey) ? defaultFilter : this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }\n+\n+    @Override\n+    public PublisherFilter createPublisherFilter(final String bundleId)\n+            throws DotDataException, DotSecurityException {\n+\n+        final String filterKey = APILocator.getBundleAPI().getBundleById(bundleId).getFilterKey();\n+        final FilterDescriptor filterDescriptor = this.getFilterDescriptorByKey(filterKey);\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl((Boolean)filterDescriptor.getFilters().getOrDefault(\"dependencies\",true),\n+                (Boolean)filterDescriptor.getFilters().getOrDefault(\"relationships\",true));\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeClasses\")){\n+            List.class.cast(filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));\n+\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){\n+            List.class.cast(filterDescriptor.getFilters().get(\"excludeDependencyClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeDependencyClassesSet(type.toString()));\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeQuery\")){\n+            final String query = filterDescriptor.getFilters().get(\"excludeQuery\").toString();\n+            final List<Contentlet> contentlets = APILocator.getContentletAPI().search(query, 0, 0, \"moddate\", APILocator.systemUser(), false);\n+            contentlets.stream().forEach(contentlet -> publisherFilter.addContentletIdToExcludeQueryAssetIdSet(contentlet.getIdentifier()));\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyQuery\")){\n+            final String query = filterDescriptor.getFilters().get(\"excludeDependencyQuery\").toString();\n+            final List<Contentlet> contentlets = APILocator.getContentletAPI().search(query, 0, 0, \"moddate\", APILocator.systemUser(), false);\n+            contentlets.stream().forEach(contentlet -> publisherFilter.addContentletIdToExcludeDependencyQueryAssetIdSet(contentlet.getIdentifier()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTc3MzM2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-420177336", "createdAt": "2020-05-28T14:35:44Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozNTo0NFrOGb4MzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozODo1MVrOGb4ZHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NTUxNg==", "bodyText": "maybe here we can use some of Polymorphism to get this code better, something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){\n          \n          \n            \n                    public interface PPFilter {\n          \n          \n            \n                        public boolean shouldApply( final FilterDescriptor filterDescriptor);\n          \n          \n            \n                        public void. apply(final FilterDescriptor filterDescriptor, PublisherFilterImpl publisherFilter))\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nEach ifs could be a implementation of the before interface, something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){\n          \n          \n            \n                    public ExcludeClassPPFilter implements PPFilter {\n          \n          \n            \n                                public boolean shouldApply( final FilterDescriptor filterDescriptor) {\n          \n          \n            \n                                    return filterDescriptor.getFilters().containsKey(\"excludeClasses\");\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                               public void. apply(final FilterDescriptor filterDescriptor, PublisherFilterImpl publisherFilter)){\n          \n          \n            \n                                   List.class.cast(filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));\n          \n          \n            \n                               }\n          \n          \n            \n                    }", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431885516", "createdAt": "2020-05-28T14:35:44Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,78 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(user.isAdmin()){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = getDefaultFilter();\n+        return !UtilMethods.isSet(filterKey) ? defaultFilter : this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }\n+\n+    @Override\n+    public PublisherFilter createPublisherFilter(final String bundleId)\n+            throws DotDataException, DotSecurityException {\n+\n+        final String filterKey = APILocator.getBundleAPI().getBundleById(bundleId).getFilterKey();\n+        final FilterDescriptor filterDescriptor = this.getFilterDescriptorByKey(filterKey);\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl((Boolean)filterDescriptor.getFilters().getOrDefault(\"dependencies\",true),\n+                (Boolean)filterDescriptor.getFilters().getOrDefault(\"relationships\",true));\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeClasses\")){\n+            List.class.cast(filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));\n+\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4ODY3MA==", "bodyText": "Why do not add all the contentlet to publisherFilter and then it take what it need from the contentlet later?", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r431888670", "createdAt": "2020-05-28T14:38:51Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/PublisherAPIImpl.java", "diffHunk": "@@ -142,4 +152,78 @@ public PublishStatus publish ( PublisherConfig config, PublishStatus status ) th\n         return status;\n     }\n \n+    @Override\n+    public void addFilterDescriptor(final FilterDescriptor filterDescriptor) {\n+        this.loadedFilters.put(filterDescriptor.getKey(),filterDescriptor);\n+    }\n+\n+    @Override\n+    public List<FilterDescriptor> getFiltersDescriptorsByRole(final User user) throws DotDataException {\n+        if(user.isAdmin()){\n+            return new ArrayList<>(this.loadedFilters.values());\n+        }\n+        final List<Role> roles = APILocator.getRoleAPI().loadRolesForUser(user.getUserId(), true);\n+        Logger.info(this,\"User Roles: \" + roles.toString());\n+        final List<FilterDescriptor> filters = new ArrayList<>();\n+        for(final Map.Entry<String,FilterDescriptor> filterDescriptorMap : this.loadedFilters.entrySet()){\n+            final String filterRoles = filterDescriptorMap.getValue().getRoles();\n+            Logger.info(PublisherAPI.class,\"File: \" +filterDescriptorMap.getKey() + \" Roles: \" + filterRoles );\n+            for(final Role role : roles){\n+                if(UtilMethods.isSet(role.getRoleKey()) && filterRoles.contains(role.getRoleKey())){\n+                    filters.add(filterDescriptorMap.getValue());\n+                }\n+            }\n+        }\n+\n+        return filters;\n+    }\n+\n+    @Override\n+    public Map<String, FilterDescriptor> getFilterDescriptorMap() {\n+        return this.loadedFilters;\n+    }\n+\n+    @Override\n+    public FilterDescriptor getFilterDescriptorByKey(final String filterKey) {\n+        final FilterDescriptor defaultFilter = getDefaultFilter();\n+        return !UtilMethods.isSet(filterKey) ? defaultFilter : this.loadedFilters.getOrDefault(filterKey,defaultFilter);\n+    }\n+\n+    @Override\n+    public PublisherFilter createPublisherFilter(final String bundleId)\n+            throws DotDataException, DotSecurityException {\n+\n+        final String filterKey = APILocator.getBundleAPI().getBundleById(bundleId).getFilterKey();\n+        final FilterDescriptor filterDescriptor = this.getFilterDescriptorByKey(filterKey);\n+\n+        final PublisherFilterImpl publisherFilter = new PublisherFilterImpl((Boolean)filterDescriptor.getFilters().getOrDefault(\"dependencies\",true),\n+                (Boolean)filterDescriptor.getFilters().getOrDefault(\"relationships\",true));\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeClasses\")){\n+            List.class.cast(filterDescriptor.getFilters().get(\"excludeClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeClassesSet(type.toString()));\n+\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyClasses\")){\n+            List.class.cast(filterDescriptor.getFilters().get(\"excludeDependencyClasses\")).stream().forEach(type -> publisherFilter.addTypeToExcludeDependencyClassesSet(type.toString()));\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeQuery\")){\n+            final String query = filterDescriptor.getFilters().get(\"excludeQuery\").toString();\n+            final List<Contentlet> contentlets = APILocator.getContentletAPI().search(query, 0, 0, \"moddate\", APILocator.systemUser(), false);\n+            contentlets.stream().forEach(contentlet -> publisherFilter.addContentletIdToExcludeQueryAssetIdSet(contentlet.getIdentifier()));\n+        }\n+\n+        if(filterDescriptor.getFilters().containsKey(\"excludeDependencyQuery\")){\n+            final String query = filterDescriptor.getFilters().get(\"excludeDependencyQuery\").toString();\n+            final List<Contentlet> contentlets = APILocator.getContentletAPI().search(query, 0, 0, \"moddate\", APILocator.systemUser(), false);\n+            contentlets.stream().forEach(contentlet -> publisherFilter.addContentletIdToExcludeDependencyQueryAssetIdSet(contentlet.getIdentifier()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwODQ1Nw=="}, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTUxNDU3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-420551457", "createdAt": "2020-05-28T23:07:53Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowNzo1M1rOGcJsBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowNzo1M1rOGcJsBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MjAzNw==", "bodyText": "expected result missing in name or javadoc", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r432172037", "createdAt": "2020-05-28T23:07:53Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PushPublishFiltersInitializerTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.dotcms.publishing;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.YamlUtil;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.util.Logger;\n+import com.google.common.collect.ImmutableMap;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PushPublishFiltersInitializerTest {\n+\n+    private static PushPublishFiltersInitializer pushPublishFiltersInitializer;\n+    private static File path;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        final String tmpdirPath = System.getProperty(\"java.io.tmpdir\");\n+        path = new File(tmpdirPath + File.separator + \"filters\");\n+        if (!path.exists()) {\n+            path.mkdir();\n+        }\n+        pushPublishFiltersInitializer = new PushPublishFiltersInitializer();\n+    }\n+\n+    private void createFilterFile(final FilterDescriptor filterDescriptor){\n+        Logger.info(this,\"PATH\" + path.toString());\n+        final File file = new File(path.toString(),filterDescriptor.getKey());\n+        YamlUtil.write(file,filterDescriptor);\n+    }\n+\n+    @Test\n+    public void test_loadFilter() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTUxODk2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-420551896", "createdAt": "2020-05-28T23:09:03Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowOTowNFrOGcJtbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowOTowNFrOGcJtbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MjM5Nw==", "bodyText": "expected result in name or javadoc", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r432172397", "createdAt": "2020-05-28T23:09:04Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/pushpublish/PushPublishFilterResourceTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.dotcms.rest.api.v1.pushpublish;\n+\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.rest.exception.SecurityException;\n+\n+public class PushPublishFilterResourceTest {\n+\n+    static HttpServletResponse response;\n+    static PushPublishFilterResource resource;\n+    static String filterKey;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        resource = new PushPublishFilterResource();\n+        response = new MockHttpResponse();\n+\n+        APILocator.getPublisherAPI().getFilterDescriptorMap().clear();\n+        filterKey = \"filterTestAPI.yml\";\n+\n+        createFilter();\n+    }\n+\n+    private static void createFilter(){\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(filterKey,\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+\n+        APILocator.getPublisherAPI().addFilterDescriptor(filterDescriptor);\n+    }\n+\n+    private HttpServletRequest getHttpRequest(final boolean authorization) {\n+        final MockHeaderRequest request = new MockHeaderRequest(\n+                new MockSessionRequest(\n+                        new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request())\n+                                .request())\n+                        .request());\n+\n+        if(authorization) {\n+            request.setHeader(\"Authorization\",\n+                    \"Basic \" + new String(Base64.encode(\"admin@dotcms.com:admin\".getBytes())));\n+\n+        }\n+\n+        return request;\n+    }\n+\n+    @Test\n+    public void test_getFilter_withUser() throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDUxMDI5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-421051029", "createdAt": "2020-05-29T15:18:32Z", "commit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToxODozM1rOGchMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToxODozM1rOGchMPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NzExOQ==", "bodyText": "I suggest that the internal map is not exposed but offer the methods you need via API (e.g. clearFileDescriptors())", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r432557119", "createdAt": "2020-05-29T15:18:33Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/pushpublish/PushPublishFilterResourceTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.dotcms.rest.api.v1.pushpublish;\n+\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHeaderRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.MockHttpResponse;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.rest.ResponseEntityView;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.Status;\n+import org.glassfish.jersey.internal.util.Base64;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.rest.exception.SecurityException;\n+\n+public class PushPublishFilterResourceTest {\n+\n+    static HttpServletResponse response;\n+    static PushPublishFilterResource resource;\n+    static String filterKey;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        resource = new PushPublishFilterResource();\n+        response = new MockHttpResponse();\n+\n+        APILocator.getPublisherAPI().getFilterDescriptorMap().clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f5f5d1d5629f7c1b8c19b50e3941cd2181adf8"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e8593d93789282fcc82356e8540e7e86c447b6f", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/9e8593d93789282fcc82356e8540e7e86c447b6f", "committedDate": "2020-06-01T16:12:06Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1dc6fd2913086a5131bbd8c0f0c7712863f3f97", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/e1dc6fd2913086a5131bbd8c0f0c7712863f3f97", "committedDate": "2020-06-01T16:12:57Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6487fe139932b9740065dd125e56be3a12c6905b", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6487fe139932b9740065dd125e56be3a12c6905b", "committedDate": "2020-06-01T17:47:08Z", "message": "#17806 feedback over tests files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caca0f3c155c27d2407bfa8640fe05c1e3bff5e0", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/caca0f3c155c27d2407bfa8640fe05c1e3bff5e0", "committedDate": "2020-06-01T17:54:38Z", "message": "#17806 change endpoint name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a062025f2e8da405f1effe33a37cf7086b672a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/b6a062025f2e8da405f1effe33a37cf7086b672a", "committedDate": "2020-06-01T18:53:14Z", "message": "#17806 rename PublisherFilter methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb94d44ae34c86d2a6932ee27a6252a83b55018a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/eb94d44ae34c86d2a6932ee27a6252a83b55018a", "committedDate": "2020-06-01T20:30:29Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb6f01e43fd12a32798c2d74fdcdb1851d9fae9", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/3bb6f01e43fd12a32798c2d74fdcdb1851d9fae9", "committedDate": "2020-06-01T21:40:28Z", "message": "#17806 feedback remove visibility filterMap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/d303d8ce23e694dae36c96f07e87151f2bef3f36", "committedDate": "2020-06-01T21:57:46Z", "message": "remove util test class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mjg1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214285", "createdAt": "2020-06-01T22:05:15Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxNVrOGdbq1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxNVrOGdbq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTIyMw==", "bodyText": "Issue found: Local variable 'contentlet1' could be declared final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515223", "createdAt": "2020-06-01T22:05:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionletTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.environment.business.EnvironmentAPI;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.PublisherAPIImpl;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.FactoryLocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.AlreadyExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.MultiKeyValue;\n+import com.dotmarketing.portlets.workflows.model.MultiSelectionWorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClass;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.validation.constraints.AssertTrue;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PushNowActionletTest extends BaseWorkflowIntegrationTest {\n+\n+    private static CreateSchemeStepActionResult schemeStepActionResult = null;\n+    private static WorkflowAPI workflowAPI = null;\n+    private static ContentletAPI contentletAPI = null;\n+    private static ContentTypeAPI contentTypeAPI = null;\n+    private static ContentType type = null;\n+    private static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+\n+        IntegrationTestInitService.getInstance().init();\n+        workflowAPI = APILocator.getWorkflowAPI();\n+        contentTypeAPI = APILocator.getContentTypeAPI(APILocator.systemUser());\n+        contentletAPI = APILocator.getContentletAPI();\n+        final long currentTime = System.currentTimeMillis();\n+        adminUser = TestUserUtils.getUser(TestUserUtils.getOrCreateAdminRole(),\"testPushNow@test.com\"+currentTime,\"testPushNowActionlet\"+currentTime,\"testPushNowActionlet\"+currentTime,\"testPushNowActionlet\"+currentTime);\n+\n+    }\n+\n+    private void createWorkflowWithPushNowActionlet(final String environmentNameParam, final String filterKeyParam)\n+            throws DotSecurityException, AlreadyExistException, DotDataException, InstantiationException, IllegalAccessException {\n+        // Create the scheme and actions. This method allows you to add just one sub-action\n+        final long sysTime = System.currentTimeMillis();\n+        schemeStepActionResult = createSchemeStepActionActionlet\n+                (\"itPushNowScheme_\" + sysTime, \"step1\", \"action1\",\n+                        CheckinContentActionlet.class);\n+        // Add the Push Now sub-action for this test\n+        addActionletToAction(schemeStepActionResult.getAction().getId(),\n+                PushNowActionlet.class, 1);\n+        // Add the required parameters of the sub-action\n+        final List<WorkflowActionClass> actionletClasses = getActionletsFromAction(\n+                schemeStepActionResult.getAction());\n+        WorkflowActionClass workflowActionClass = actionletClasses.get(1);\n+        addParameterValuesToActionlet(workflowActionClass,\n+                Arrays.asList(environmentNameParam,filterKeyParam));\n+        // Set the role ID of the people who can use the action\n+        addWhoCanUseToAction(schemeStepActionResult.getAction(),\n+                Collections.singletonList(TestUserUtils.getOrCreateAdminRole().getId()));\n+        // Associate the scheme to the content type\n+        workflowAPI.saveSchemesForStruct(new StructureTransformer(type).asStructure(),\n+                Collections.singletonList(schemeStepActionResult.getScheme()));\n+    }\n+\n+    private static void createTestContentType()\n+            throws DotDataException, DotSecurityException {\n+        type = contentTypeAPI.save(\n+                ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                        .folder(FolderAPI.SYSTEM_FOLDER).host(Host.SYSTEM_HOST)\n+                        .description(\"Content Type for testing the Push Now actionlet.\")\n+                        .name(\"PushNowActionletTest\"+System.currentTimeMillis())\n+                        .variable(\"PushNowActionletTest\"+System.currentTimeMillis()).build());\n+        final List<Field> fields = new ArrayList<>(type.fields());\n+        fields.add(FieldBuilder.builder(TextField.class).name(\"title\").variable(\"title\")\n+                .contentTypeId(type.id()).dataType(DataTypes.TEXT).indexed(true).build());\n+        fields.add(FieldBuilder.builder(TextField.class).name(\"txt\").variable(\"txt\")\n+                .contentTypeId(type.id()).dataType(DataTypes.TEXT).indexed(true).build());\n+        type = contentTypeAPI.save(type, fields);\n+\n+        //Give Permissions to the Content Type\n+        final Permission permission = new Permission(type.id(),TestUserUtils.getOrCreateAdminRole().getId(),PermissionAPI.PERMISSION_WRITE);\n+        APILocator.getPermissionAPI().save(permission,type,APILocator.systemUser(),false);\n+    }\n+\n+    private static void createFilterDescriptor(final String key, final boolean defaultFilter){\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        APILocator.getPublisherAPI().addFilterDescriptor(new FilterDescriptor(key,key,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    private static Environment createEnvironment (final String name) throws DotDataException, DotSecurityException {\n+\n+        final EnvironmentAPI environmentAPI = APILocator.getEnvironmentAPI();\n+        final Environment environment = new Environment();\n+        final List<Permission> permissions = new ArrayList<>();\n+        permissions.add(new Permission(environment.getId(),\n+                APILocator.getRoleAPI().loadRoleByKey(adminUser.getUserId()).getId(),\n+                PermissionAPI.PERMISSION_USE));\n+\n+        environment.setName(name);\n+        environment.setPushToAll(false);\n+        environmentAPI.saveEnvironment(environment, permissions);\n+\n+        return environment;\n+    }\n+\n+    /**\n+     * This test is for checking if the Push Now Actionlet creates the Bundle with the filter selected.\n+     * When the Workflow with the sub-action is invoked it creates a Bundle to PP the contentlet,\n+     * that Bundle that is created must have the selected filter as filter Key.\n+     */\n+    @Test\n+    public void test_PushNowActionlet_BundleUsesFilterKeySet()\n+            throws DotSecurityException, DotDataException, IllegalAccessException, AlreadyExistException, InstantiationException {\n+        //Create Content Type\n+        createTestContentType();\n+        //Create Filter\n+        final String defaultFilterKey = \"testDefaultFilterKey.yml\"+System.currentTimeMillis();\n+        createFilterDescriptor(defaultFilterKey,true);\n+        final String filterKey = \"testFilterKey.yml\"+System.currentTimeMillis();\n+        createFilterDescriptor(filterKey,false);\n+        //Create Environment\n+        final Environment environment = createEnvironment(\"TestEnvironment_\" + System.currentTimeMillis());\n+        //Create Workflow and pass the env and the filterKey\n+        createWorkflowWithPushNowActionlet(environment.getName(),filterKey);\n+        //Create Contentlet\n+        final Contentlet cont = new Contentlet();\n+        cont.setContentTypeId(type.id());\n+        cont.setOwner(APILocator.systemUser().toString());\n+        cont.setModDate(new Date());\n+        cont.setLanguageId(1);\n+        cont.setStringProperty(\"title\", \"Test Save\");\n+        cont.setStringProperty(\"txt\", \"Test Save Text\");\n+        cont.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        cont.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        Contentlet contentlet1 = contentletAPI.checkin(cont, adminUser, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 168}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mjk0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214294", "createdAt": "2020-06-01T22:05:16Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxNlrOGdbq4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxNlrOGdbq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTIzNA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515234", "createdAt": "2020-06-01T22:05:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key is not passed,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_emptyKey_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyEmptyKeyDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyEmptyKeyDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyEmptyKeyNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyEmptyKeyDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key passed does not belong to any FilterDescriptor,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_filterKeyDoesNotExist_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyDoesNotExistDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyDoesNotExistDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyDoesNotExistNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyDoesNotExistNonDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"thisKeyNotExists\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates a FilterDescriptor and a Bundle (with the created FilterDescriptor) and\n+     * returns a PublisherFilter with the filters of the FilterDescriptor.\n+     *\n+     * In this case the FilterDescriptor has all the possible filters.\n+     */\n+    @Test\n+    public void test_createPublisherFilter_withAllFilters()\n+            throws DotDataException, DotSecurityException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String filterKey = \"TestCreatePublisherFilterAllFilters.yml\";\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        filtersMap.put(\"excludeQuery\",\"+baseType:5\");\n+        final List<Object> listExcludeClasses = new ArrayList();\n+        listExcludeClasses.add(\"User\");\n+        listExcludeClasses.add(\"Host\");\n+        listExcludeClasses.add(\"ContentType\");\n+        filtersMap.put(\"excludeClasses\", listExcludeClasses);\n+        filtersMap.put(\"dependencies\",true);\n+        filtersMap.put(\"excludeDependencyQuery\",\"+baseType:7\");\n+        filtersMap.put(\"excludeDependencyClasses\", listExcludeClasses);\n+        filtersMap.put(\"forcePush\",false);\n+        filtersMap.put(\"relationships\",true);\n+        createFilterDescriptor(filterKey,\"TestCreatePublisherFilter\",true,filtersMap);\n+\n+        final String bundleName = \"testCreatePublisherFilterAllFilters\";\n+        Bundle bundle = new Bundle(bundleName, new Date(), null, adminUser.getUserId(),\n+                (Boolean) filtersMap.get(\"forcePush\"),filterKey);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+        bundle = APILocator.getBundleAPI().getBundleByName(bundleName);\n+        Assert.assertNotNull(bundle);\n+        Assert.assertEquals(filterKey,bundle.getFilterKey());\n+\n+        final PublisherFilter publisherFilter = publisherAPI.createPublisherFilter(bundle.getId());\n+        Assert.assertNotNull(publisherFilter);\n+        Assert.assertEquals(filtersMap.get(\"dependencies\"),publisherFilter.isDependencies());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 307}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzA1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214305", "createdAt": "2020-06-01T22:05:17Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxN1rOGdbq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxN1rOGdbq6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI0Mw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515243", "createdAt": "2020-06-01T22:05:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key is not passed,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_emptyKey_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyEmptyKeyDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyEmptyKeyDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyEmptyKeyNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyEmptyKeyDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzEw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214310", "createdAt": "2020-06-01T22:05:18Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxOFrOGdbq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxOFrOGdbq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI0Ng==", "bodyText": "Issue found: Avoid using redundant field initializer for 'schemeStepActionResult'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515246", "createdAt": "2020-06-01T22:05:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionletTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.environment.business.EnvironmentAPI;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.PublisherAPIImpl;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.FactoryLocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.AlreadyExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.MultiKeyValue;\n+import com.dotmarketing.portlets.workflows.model.MultiSelectionWorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClass;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.validation.constraints.AssertTrue;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PushNowActionletTest extends BaseWorkflowIntegrationTest {\n+\n+    private static CreateSchemeStepActionResult schemeStepActionResult = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzIw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214320", "createdAt": "2020-06-01T22:05:19Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxOVrOGdbq9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToxOVrOGdbq9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI1Mg==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515252", "createdAt": "2020-06-01T22:05:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -357,35 +370,55 @@ public void setDependencies() throws DotSecurityException, DotDataException, Dot\n \t * <li>Folders</li>\n \t * </ul>\n \t */\n-\tprivate void setLinkDependencies() {\n+\tprivate void setLinkDependencies(final PublisherFilter publisherFilter)  {\n \t\tfor(String linkId : linksSet) {\n \t\t\ttry {\n \t\t\t\tIdentifier ident=APILocator.getIdentifierAPI().find(linkId);\n-\t\t\t\tFolder ff = APILocator.getFolderAPI().findFolderByPath(ident.getParentPath(), ident.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( ff.getInode(), ff.getModDate());\n-\t\t\t\tfoldersSet.add(ff.getInode());\n \n-\t\t\t\tHost hh=APILocator.getHostAPI().find(ident.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( hh.getIdentifier(), hh.getModDate());\n-\t\t\t\thostsSet.add(hh.getIdentifier());\n+\t\t\t\t// Folder Dependencies\n+\t\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t.findFolderByPath(ident.getParentPath(), ident.getHostId(), user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n-\t\t\t\tLink link = APILocator.getMenuLinkAPI().findWorkingLinkById(linkId, user, false);\n+\t\t\t\t// Host Dependencies\n+\t\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tfinal Host host = APILocator.getHostAPI().find(ident.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(host.getIdentifier(), host.getModDate());\n+\t\t\t\t\thostsSet.add(host.getIdentifier());\n+\t\t\t\t}\n \n-\t\t\t\tif(link!=null) {\n+\t\t\t\t// Content Dependencies\n+\t\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tfinal Link link = APILocator.getMenuLinkAPI()\n+\t\t\t\t\t\t\t.findWorkingLinkById(linkId, user, false);\n \n-\t\t\t\t\tif(link.getLinkType().equals(Link.LinkType.INTERNAL.toString())) {\n-\t\t\t\t\t\tIdentifier id = APILocator.getIdentifierAPI().find(link.getInternalLinkIdentifier());\n+\t\t\t\t\tif (link != null) {\n \n-\t\t\t\t\t\t// add file/content dependencies. will also work with htmlpages as content\n-\t\t\t\t\t\tif (InodeUtils.isSet(id.getInode()) && id.getAssetType().equals(\"contentlet\")) {\n-\t\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(\"+identifier:\"+id.getId(), 0, 0, \"moddate\", user, false);\n+\t\t\t\t\t\tif (link.getLinkType().equals(Link.LinkType.INTERNAL.toString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 210}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzI3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214327", "createdAt": "2020-06-01T22:05:20Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMFrOGdbq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMFrOGdbq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI1OQ==", "bodyText": "Issue found: Local variable 'struct' could be declared final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515259", "createdAt": "2020-06-01T22:05:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,102 +1078,143 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tfinal Structure childStructure = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getChildStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes\n+\t\t\t\t\t\t\t.addOrClean(relationship.getChildStructureInode(), childStructure.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getChildStructureInode())) {\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getChildStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (!contentTypes.contains(relationship.getParentStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 1063}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzQw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214340", "createdAt": "2020-06-01T22:05:20Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMVrOGdbrAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMVrOGdbrAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI2Nw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515267", "createdAt": "2020-06-01T22:05:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzQz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214343", "createdAt": "2020-06-01T22:05:21Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMVrOGdbrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyMVrOGdbrBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI3MA==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515270", "createdAt": "2020-06-01T22:05:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,102 +1078,143 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tfinal Structure childStructure = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getChildStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes\n+\t\t\t\t\t\t\t.addOrClean(relationship.getChildStructureInode(), childStructure.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getChildStructureInode())) {\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getChildStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (!contentTypes.contains(relationship.getParentStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getParentStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes.addOrClean(relationship.getParentStructureInode(),\n+\t\t\t\t\t\t\tstruct.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getParentStructureInode()))\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getParentStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n \t/**\n \t * \n-\t * @param cons\n+\t * @param contentletSet\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n-\t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n-\t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n-\n-\t\t//Getting all related content\n-\n-\t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n-\t\t\tcontentsToProcess.add(con);\n-\n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\tprivate void processList(final Set<Contentlet> contentletSet, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n+\t\tfinal Set<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n+\t\tfinal Set<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n+\n+\t\tfor (final Contentlet contentlet : contentletSet) {\n+\t\t\t// Host Dependency\n+\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\t\tfinal Host host = APILocator.getHostAPI().find(contentlet.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(contentlet.getHost(), host.getModDate());\n+\t\t\t}\n+\n+\t\t\tcontentsToProcess.add(contentlet);\n+\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tfinal Map<Relationship, List<Contentlet>> contentRelationshipsMap =\n+\t\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(contentlet, user);\n+\n+\t\t\t\tfor (final Relationship relationship : contentRelationshipsMap.keySet()) {\n+\t\t\t\t\tcontentsToProcess.addAll(contentRelationshipsMap.get(relationship));\n+\t\t\t\t\t/**\n+\t\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n+\t\t\t\t\t *\n+\t\t\t\t\t * We need the relationships in which the single related content is involved.\n+\t\t\t\t\t *\n+\t\t\t\t\t */\n+\t\t\t\t\tif (contentRelationshipsMap.get(relationship).size() > 0)\n+\t\t\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\t// end relationships false\n \n-\t\tfor (Contentlet con : contentsToProcess) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n-\t\t\tcontentsWithDependenciesToProcess.add(con);\n+\t\tfor (final Contentlet contentletToProcess : contentsToProcess) {\n+\t\t\t// Host Dependency\n+\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\t\tfinal Host host = APILocator.getHostAPI().find(contentletToProcess.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(contentletToProcess.getHost(), host.getModDate());\n+\t\t\t}\n+\t\t\tcontentsWithDependenciesToProcess.add(contentletToProcess);\n \t\t\t//Copy asset files to bundle folder keeping original folders structure\n-\t\t\tList<Field> fields=FieldsCache.getFieldsByStructureInode(con.getStructureInode());\n+\t\t\tfinal List<Field> fields=FieldsCache.getFieldsByStructureInode(contentletToProcess.getStructureInode());\n \n-\t\t\tfor(Field ff : fields) {\n-\t\t\t\tif (ff.getFieldType().equals(Field.FieldType.IMAGE.toString())\n-\t\t\t\t\t\t|| ff.getFieldType().equals(Field.FieldType.FILE.toString())) {\n+\t\t\tfor(final Field field : fields) {\n+\t\t\t\tif (field.getFieldType().equals(Field.FieldType.IMAGE.toString())\n+\t\t\t\t\t\t|| field.getFieldType().equals(Field.FieldType.FILE.toString())) {\n \n \t\t\t\t\ttry {\n \t\t\t\t\t\tString value = \"\";\n-\t\t\t\t\t\tif(UtilMethods.isSet(APILocator.getContentletAPI().getFieldValue(con, ff))){\n-\t\t\t\t\t\t\tvalue = APILocator.getContentletAPI().getFieldValue(con, ff).toString();\n+\t\t\t\t\t\tif(UtilMethods.isSet(APILocator.getContentletAPI().getFieldValue(contentletToProcess, field))){\n+\t\t\t\t\t\t\tvalue = APILocator.getContentletAPI().getFieldValue(contentletToProcess, field).toString();\n \t\t\t\t\t\t}\n-\t\t\t\t\t\tIdentifier id = APILocator.getIdentifierAPI().find(value);\n+\t\t\t\t\t\tfinal Identifier id = APILocator.getIdentifierAPI().find(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 1171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzU5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214359", "createdAt": "2020-06-01T22:05:22Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyM1rOGdbrDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyM1rOGdbrDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI3OA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515278", "createdAt": "2020-06-01T22:05:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key is not passed,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_emptyKey_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyEmptyKeyDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyEmptyKeyDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyEmptyKeyNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyEmptyKeyDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key passed does not belong to any FilterDescriptor,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_filterKeyDoesNotExist_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyDoesNotExistDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyDoesNotExistDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyDoesNotExistNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyDoesNotExistNonDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"thisKeyNotExists\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates a FilterDescriptor and a Bundle (with the created FilterDescriptor) and\n+     * returns a PublisherFilter with the filters of the FilterDescriptor.\n+     *\n+     * In this case the FilterDescriptor has all the possible filters.\n+     */\n+    @Test\n+    public void test_createPublisherFilter_withAllFilters()\n+            throws DotDataException, DotSecurityException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String filterKey = \"TestCreatePublisherFilterAllFilters.yml\";\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        filtersMap.put(\"excludeQuery\",\"+baseType:5\");\n+        final List<Object> listExcludeClasses = new ArrayList();\n+        listExcludeClasses.add(\"User\");\n+        listExcludeClasses.add(\"Host\");\n+        listExcludeClasses.add(\"ContentType\");\n+        filtersMap.put(\"excludeClasses\", listExcludeClasses);\n+        filtersMap.put(\"dependencies\",true);\n+        filtersMap.put(\"excludeDependencyQuery\",\"+baseType:7\");\n+        filtersMap.put(\"excludeDependencyClasses\", listExcludeClasses);\n+        filtersMap.put(\"forcePush\",false);\n+        filtersMap.put(\"relationships\",true);\n+        createFilterDescriptor(filterKey,\"TestCreatePublisherFilter\",true,filtersMap);\n+\n+        final String bundleName = \"testCreatePublisherFilterAllFilters\";\n+        Bundle bundle = new Bundle(bundleName, new Date(), null, adminUser.getUserId(),\n+                (Boolean) filtersMap.get(\"forcePush\"),filterKey);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+        bundle = APILocator.getBundleAPI().getBundleByName(bundleName);\n+        Assert.assertNotNull(bundle);\n+        Assert.assertEquals(filterKey,bundle.getFilterKey());\n+\n+        final PublisherFilter publisherFilter = publisherAPI.createPublisherFilter(bundle.getId());\n+        Assert.assertNotNull(publisherFilter);\n+        Assert.assertEquals(filtersMap.get(\"dependencies\"),publisherFilter.isDependencies());\n+        Assert.assertEquals(filtersMap.get(\"relationships\"),publisherFilter.isRelationships());\n+        Assert.assertEquals(filtersMap.get(\"forcePush\"),bundle.isForcePush());\n+        Assert.assertTrue(publisherFilter.doesExcludeClassesContainsType(\"User\"));\n+        Assert.assertFalse(publisherFilter.doesExcludeClassesContainsType(\"Template\"));\n+        Assert.assertTrue(publisherFilter.doesExcludeDependencyClassesContainsType(\"Host\"));\n+        Assert.assertTrue(publisherFilter.doesExcludeDependencyClassesContainsType(\"ContentType\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 313}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0MzY2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214366", "createdAt": "2020-06-01T22:05:24Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNFrOGdbrFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNFrOGdbrFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI4Nw==", "bodyText": "Issue found: Avoid unused imports such as 'java.util.Map'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515287", "createdAt": "2020-06-01T22:05:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/ajax/AjaxDirectorServletIntegrationTest.java", "diffHunk": "@@ -35,6 +37,7 @@\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mzcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214373", "createdAt": "2020-06-01T22:05:24Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNVrOGdbrIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNVrOGdbrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTI5Ng==", "bodyText": "Issue found: The String literal \"TestBundle\" appears 12 times in this file; the first occurrence is on line 216", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515296", "createdAt": "2020-06-01T22:05:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/publishing/remote/DependencyBundlerTest.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package com.dotcms.enterprise.publishing.remote;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.bundle.business.BundleAPI;\n+import com.dotcms.publisher.business.DotPublisherException;\n+import com.dotcms.publisher.business.PublishQueueElement;\n+import com.dotcms.publisher.business.PublisherAPI;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.dotcms.publisher.util.PublisherUtil;\n+import com.dotcms.publishing.BundlerStatus;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotBundleException;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.IBundler;\n+import com.dotcms.publishing.Publisher;\n+import com.dotcms.publishing.PublisherConfig.Operation;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.structure.model.Relationship;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys.Relationship.RELATIONSHIP_CARDINALITY;\n+import com.liferay.portal.model.User;\n+import io.vavr.API;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class DependencyBundlerTest extends IntegrationTestBase {\n+\n+    private static User systemUser;\n+    private static String defaultFilterKey = \"Intelligent.yml\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.getUserAPI().getSystemUser();\n+        createFilterDescriptor(defaultFilterKey,true,true,false,null,null,null,null,true);\n+    }\n+\n+    /**\n+     * Creates and saves bundle\n+     * @param bundleName\n+     * @return a bundle\n+     * @throws DotDataException\n+     */\n+    private static Bundle createBundle (final String bundleName, final boolean forcePush,final String filterKey)\n+            throws DotDataException {\n+\n+        final BundleAPI bundleAPI         = APILocator.getBundleAPI();\n+        final Bundle     bundle1           = new Bundle(bundleName, null, null, systemUser.getUserId(),forcePush,filterKey);\n+\n+        bundleAPI.saveBundle(bundle1);\n+        return bundle1;\n+    }\n+\n+    /**\n+     * Creates a Filter and adds it to map of filters\n+     *\n+     * @param key\n+     * @param dependencies\n+     * @param relationships\n+     * @param forcePush\n+     * @param excludeClasses\n+     * @param excludeDependencyClasses\n+     * @param excludeQuery\n+     * @param excludeDependencyQuery\n+     * @param defaultFilter\n+     */\n+    private static void createFilterDescriptor(final String key, final boolean dependencies,//CREATE BUILDER PARA EVITAR METODO CON TANTOS PARAMS\n+            final boolean relationships, final boolean forcePush,\n+            final List<Object> excludeClasses, final List<Object> excludeDependencyClasses,\n+            final String excludeQuery, final String excludeDependencyQuery, final boolean defaultFilter){\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        if(UtilMethods.isSet(dependencies)) {\n+            filtersMap.put(\"dependencies\", dependencies);\n+        }\n+        if(UtilMethods.isSet(relationships)) {\n+            filtersMap.put(\"relationships\", relationships);\n+        }\n+        if(UtilMethods.isSet(forcePush)) {\n+            filtersMap.put(\"forcePush\", forcePush);\n+        }\n+        if(UtilMethods.isSet(excludeClasses)) {\n+            filtersMap.put(\"excludeClasses\", excludeClasses);\n+        }\n+        if(UtilMethods.isSet(excludeDependencyClasses)) {\n+            filtersMap.put(\"excludeDependencyClasses\", excludeDependencyClasses);\n+        }\n+        if(UtilMethods.isSet(excludeQuery)) {\n+            filtersMap.put(\"excludeQuery\", excludeQuery);\n+        }\n+        if(UtilMethods.isSet(excludeDependencyQuery)) {\n+            filtersMap.put(\"excludeDependencyQuery\", excludeDependencyQuery);\n+        }\n+        APILocator.getPublisherAPI().addFilterDescriptor(new FilterDescriptor(key,key,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * Generate a bundle and returns a PushPublisherConfig to retrieve the list of objects that make up\n+     * the bundle, organized by their types.\n+     */\n+    private static PushPublisherConfig generateBundle ( final String bundleId, final PushPublisherConfig.Operation operation )\n+            throws DotPublisherException, DotDataException, DotPublishingException, IllegalAccessException, InstantiationException, DotBundleException, IOException {\n+\n+        final PushPublisherConfig pconf = new PushPublisherConfig();\n+        final PublisherAPI pubAPI = PublisherAPI.getInstance();\n+\n+        final List<PublishQueueElement> tempBundleContents = pubAPI\n+                .getQueueElementsByBundleId(bundleId);\n+        final List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>();\n+\n+        for (final PublishQueueElement queueElement : tempBundleContents) {\n+            assetsToPublish.add(queueElement);\n+        }\n+\n+        pconf.setDownloading(true);\n+        pconf.setOperation(operation);\n+\n+        pconf.setAssets(assetsToPublish);\n+        //Queries creation\n+        pconf.setLuceneQueries(PublisherUtil.prepareQueries(tempBundleContents));\n+        pconf.setId(bundleId);\n+        pconf.setUser(APILocator.getUserAPI().getSystemUser());\n+\n+        //BUNDLERS\n+\n+        final List<Class<IBundler>> bundlers = new ArrayList<>();\n+        final List<IBundler> confBundlers = new ArrayList<IBundler>();\n+\n+        final Publisher publisher = new PushPublisher();\n+        publisher.init(pconf);\n+        //Add the bundles for this publisher\n+        for (final Class<IBundler> clazz : publisher.getBundlers()) {\n+            if (!bundlers.contains(clazz)) {\n+                bundlers.add(clazz);\n+            }\n+        }\n+\n+        final File bundleRoot = BundlerUtil.getBundleRoot(pconf);\n+\n+        // Run bundlers\n+        BundlerUtil.writeBundleXML(pconf);\n+        for (final Class<IBundler> aClass : bundlers) {\n+\n+            final IBundler bundler = aClass.newInstance();\n+            confBundlers.add(bundler);\n+            bundler.setConfig(pconf);\n+            bundler.setPublisher(publisher);\n+            final BundlerStatus bundlerStatus = new BundlerStatus(bundler.getClass().getName());\n+            //Generate the bundler\n+            Logger.info(DependencyBundlerTest.class, \"Start of Bundler: \" + aClass.getSimpleName());\n+            bundler.generate(bundleRoot, bundlerStatus);\n+            Logger.info(DependencyBundlerTest.class, \"End of Bundler: \" + aClass.getSimpleName());\n+        }\n+\n+        pconf.setBundlers(confBundlers);\n+\n+        return pconf;\n+    }\n+\n+    /**\n+     * This test is for the filter excludeDependencyClasses.\n+     *\n+     * This test creates a Content Type and a content, and generates the bundle using the default Filter (this one does not have any exclude filter set),\n+     * so the content and the content type (as a dependency) will be added.\n+     * After this using the same Content Type and content generates another bundle but using a new created filter that exclude ContentTypes to be pushed\n+     * as a dependency, so in the bundle the content will be added but the content type will not.\n+     */\n+    @Test\n+    public void testGenerateBundleWithFilter_ExcludeDependencyClasses_ContentTypeWorkflow_NotAdded()\n+            throws DotDataException, IllegalAccessException, DotBundleException, DotPublishingException, InstantiationException, DotPublisherException, IOException {\n+        //Create ContentType\n+        final ContentType contentType = TestDataUtils.getWikiLikeContentType();\n+        //Create Content\n+        final Contentlet content = TestDataUtils.getWikiContent(true,APILocator.getLanguageAPI().getDefaultLanguage().getId(),contentType.id());\n+\n+        //Create bundle with DefaultFilter\n+        final Bundle bundleWithDefaultFilter = createBundle(\"TestBundle\"+System.currentTimeMillis(),false,defaultFilterKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 216}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mzgz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214383", "createdAt": "2020-06-01T22:05:26Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNlrOGdbrJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyNlrOGdbrJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMwMw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515303", "createdAt": "2020-06-01T22:05:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionletTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.environment.business.EnvironmentAPI;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.PublisherAPIImpl;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.FactoryLocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.AlreadyExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.MultiKeyValue;\n+import com.dotmarketing.portlets.workflows.model.MultiSelectionWorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClass;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.validation.constraints.AssertTrue;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PushNowActionletTest extends BaseWorkflowIntegrationTest {\n+\n+    private static CreateSchemeStepActionResult schemeStepActionResult = null;\n+    private static WorkflowAPI workflowAPI = null;\n+    private static ContentletAPI contentletAPI = null;\n+    private static ContentTypeAPI contentTypeAPI = null;\n+    private static ContentType type = null;\n+    private static User adminUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mzg3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214387", "createdAt": "2020-06-01T22:05:27Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyN1rOGdbrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyN1rOGdbrKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMwNg==", "bodyText": "Issue found: Avoid unused imports such as 'io.vavr.API'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515306", "createdAt": "2020-06-01T22:05:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/publishing/remote/DependencyBundlerTest.java", "diffHunk": "@@ -0,0 +1,569 @@\n+package com.dotcms.enterprise.publishing.remote;\n+\n+import static com.dotcms.rendering.velocity.directive.ParseContainer.getDotParserContainerUUID;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.RelationshipField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.bundle.business.BundleAPI;\n+import com.dotcms.publisher.business.DotPublisherException;\n+import com.dotcms.publisher.business.PublishQueueElement;\n+import com.dotcms.publisher.business.PublisherAPI;\n+import com.dotcms.publisher.pusher.PushPublisher;\n+import com.dotcms.publisher.pusher.PushPublisherConfig;\n+import com.dotcms.publisher.util.PublisherUtil;\n+import com.dotcms.publishing.BundlerStatus;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotBundleException;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.IBundler;\n+import com.dotcms.publishing.Publisher;\n+import com.dotcms.publishing.PublisherConfig.Operation;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.structure.model.Relationship;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys.Relationship.RELATIONSHIP_CARDINALITY;\n+import com.liferay.portal.model.User;\n+import io.vavr.API;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Mzk3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214397", "createdAt": "2020-06-01T22:05:28Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOFrOGdbrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOFrOGdbrMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMxMw==", "bodyText": "Issue found: This statement should have braces", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515313", "createdAt": "2020-06-01T22:05:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,102 +1078,143 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tfinal Structure childStructure = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getChildStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes\n+\t\t\t\t\t\t\t.addOrClean(relationship.getChildStructureInode(), childStructure.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getChildStructureInode())) {\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getChildStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (!contentTypes.contains(relationship.getParentStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getParentStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes.addOrClean(relationship.getParentStructureInode(),\n+\t\t\t\t\t\t\tstruct.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getParentStructureInode()))\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getParentStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n \t/**\n \t * \n-\t * @param cons\n+\t * @param contentletSet\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void processList(Set<Contentlet> cons) throws DotDataException, DotSecurityException {\n-\t\tSet<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n-\t\tSet<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n-\n-\t\t//Getting all related content\n-\n-\t\tfor (Contentlet con : cons) {\n-\t\t\tHost h = APILocator.getHostAPI().find(con.getHost(), user, false);\n-\t\t\thosts.addOrClean( con.getHost(), h.getModDate()); // add the host dependency\n-\t\t\tcontentsToProcess.add(con);\n-\n-\t\t\tMap<Relationship, List<Contentlet>> contentRel =\n-\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(con, user);\n-\n-\t\t\tfor (Relationship rel : contentRel.keySet()) {\n-\t\t\t\tcontentsToProcess.addAll(contentRel.get(rel));\n-\t\t\t\t/**\n-\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n-\t\t\t\t *\n-\t\t\t\t * We need the relationships in which the single related content is involved.\n-\t\t\t\t *\n-\t\t\t\t */\n-\t\t\t\tif(contentRel.get(rel).size()>0)\n-\t\t\t\t\trelationships.addOrClean( rel.getInode(), rel.getModDate());\n+\tprivate void processList(final Set<Contentlet> contentletSet, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException {\n+\t\tfinal Set<Contentlet> contentsToProcess = new HashSet<Contentlet>();\n+\t\tfinal Set<Contentlet> contentsWithDependenciesToProcess = new HashSet<Contentlet>();\n+\n+\t\tfor (final Contentlet contentlet : contentletSet) {\n+\t\t\t// Host Dependency\n+\t\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\t\tfinal Host host = APILocator.getHostAPI().find(contentlet.getHost(), user, false);\n+\t\t\t\thosts.addOrClean(contentlet.getHost(), host.getModDate());\n+\t\t\t}\n+\n+\t\t\tcontentsToProcess.add(contentlet);\n+\n+\t\t\t// Relationships Dependencies\n+\t\t\tif(publisherFilter.isRelationships()) {\n+\t\t\t\tfinal Map<Relationship, List<Contentlet>> contentRelationshipsMap =\n+\t\t\t\t\t\tAPILocator.getContentletAPI().findContentRelationships(contentlet, user);\n+\n+\t\t\t\tfor (final Relationship relationship : contentRelationshipsMap.keySet()) {\n+\t\t\t\t\tcontentsToProcess.addAll(contentRelationshipsMap.get(relationship));\n+\t\t\t\t\t/**\n+\t\t\t\t\t * ISSUE #2222: https://github.com/dotCMS/dotCMS/issues/2222\n+\t\t\t\t\t *\n+\t\t\t\t\t * We need the relationships in which the single related content is involved.\n+\t\t\t\t\t *\n+\t\t\t\t\t */\n+\t\t\t\t\tif (contentRelationshipsMap.get(relationship).size() > 0)\n+\t\t\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 1135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDA0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214404", "createdAt": "2020-06-01T22:05:29Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOVrOGdbrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOVrOGdbrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMxNg==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.Role'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515316", "createdAt": "2020-06-01T22:05:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionletTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.environment.business.EnvironmentAPI;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.PublisherAPIImpl;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.FactoryLocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDA1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214405", "createdAt": "2020-06-01T22:05:29Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOVrOGdbrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNToyOVrOGdbrNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMxOQ==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515319", "createdAt": "2020-06-01T22:05:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05305AddPushPublishFilterColumnTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05305AddPushPublishFilterColumnTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDE1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214415", "createdAt": "2020-06-01T22:05:30Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMFrOGdbrPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMFrOGdbrPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMyNA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515324", "createdAt": "2020-06-01T22:05:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key is not passed,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_emptyKey_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyEmptyKeyDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyEmptyKeyDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyEmptyKeyNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyEmptyKeyDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key passed does not belong to any FilterDescriptor,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_filterKeyDoesNotExist_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyDoesNotExistDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyDoesNotExistDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyDoesNotExistNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyDoesNotExistNonDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"thisKeyNotExists\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates a FilterDescriptor and a Bundle (with the created FilterDescriptor) and\n+     * returns a PublisherFilter with the filters of the FilterDescriptor.\n+     *\n+     * In this case the FilterDescriptor has all the possible filters.\n+     */\n+    @Test\n+    public void test_createPublisherFilter_withAllFilters()\n+            throws DotDataException, DotSecurityException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String filterKey = \"TestCreatePublisherFilterAllFilters.yml\";\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        filtersMap.put(\"excludeQuery\",\"+baseType:5\");\n+        final List<Object> listExcludeClasses = new ArrayList();\n+        listExcludeClasses.add(\"User\");\n+        listExcludeClasses.add(\"Host\");\n+        listExcludeClasses.add(\"ContentType\");\n+        filtersMap.put(\"excludeClasses\", listExcludeClasses);\n+        filtersMap.put(\"dependencies\",true);\n+        filtersMap.put(\"excludeDependencyQuery\",\"+baseType:7\");\n+        filtersMap.put(\"excludeDependencyClasses\", listExcludeClasses);\n+        filtersMap.put(\"forcePush\",false);\n+        filtersMap.put(\"relationships\",true);\n+        createFilterDescriptor(filterKey,\"TestCreatePublisherFilter\",true,filtersMap);\n+\n+        final String bundleName = \"testCreatePublisherFilterAllFilters\";\n+        Bundle bundle = new Bundle(bundleName, new Date(), null, adminUser.getUserId(),\n+                (Boolean) filtersMap.get(\"forcePush\"),filterKey);\n+        APILocator.getBundleAPI().saveBundle(bundle);\n+        bundle = APILocator.getBundleAPI().getBundleByName(bundleName);\n+        Assert.assertNotNull(bundle);\n+        Assert.assertEquals(filterKey,bundle.getFilterKey());\n+\n+        final PublisherFilter publisherFilter = publisherAPI.createPublisherFilter(bundle.getId());\n+        Assert.assertNotNull(publisherFilter);\n+        Assert.assertEquals(filtersMap.get(\"dependencies\"),publisherFilter.isDependencies());\n+        Assert.assertEquals(filtersMap.get(\"relationships\"),publisherFilter.isRelationships());\n+        Assert.assertEquals(filtersMap.get(\"forcePush\"),bundle.isForcePush());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDIx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214421", "createdAt": "2020-06-01T22:05:31Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMVrOGdbrQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMVrOGdbrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMyOA==", "bodyText": "Issue found: Avoid variables with short names like c", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515328", "createdAt": "2020-06-01T22:05:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -571,22 +638,22 @@ private void setFolderListDependencies(List<Folder> folderList) throws DotIdenti\n \t * determines which of them are actually {@link IHTMLPage} objects. After\n \t * that, the respective dependencies will be retrieved and added acordingly.\n \t */\n-\tprivate void setHTMLPagesDependencies() {\n+\tprivate void setHTMLPagesDependencies(final PublisherFilter publisherFilter)  {\n \t\ttry {\n \n-\t\t\tSet<String> idsToWork = new HashSet<>();\n+\t\t\tfinal Set<String> idsToWork = new HashSet<>();\n \t\t\tidsToWork.addAll(htmlPagesSet);\n-\t\t\tfor (String contId : contentsSet) {\n+\t\t\tfor (final String contId : contentsSet) {\n \n-\t\t\t\tList<Contentlet> c = APILocator.getContentletAPI().search(\"+identifier:\" + contId, 0, 0, \"moddate\", user, false);\n+\t\t\t\tfinal List<Contentlet> c = APILocator.getContentletAPI().search(\"+identifier:\" + contId, 0, 0, \"moddate\", user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 503}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDMw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214430", "createdAt": "2020-06-01T22:05:32Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMlrOGdbrRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozMlrOGdbrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMzNA==", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515334", "createdAt": "2020-06-01T22:05:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/YamlUtil.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.dotcms.util;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.util.Logger;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Yaml Utils to parse and save yaml files\n+ * @author jsanca\n+ */\n+public class YamlUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDM3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214437", "createdAt": "2020-06-01T22:05:33Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozM1rOGdbrSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozM1rOGdbrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTMzOQ==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515339", "createdAt": "2020-06-01T22:05:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/bundle/bean/Bundle.java", "diffHunk": "@@ -10,69 +10,78 @@\n \tprivate String owner;\n \tprivate Integer operation;\n \tprivate boolean forcePush;\n+\tprivate String filterKey;\n \n \tpublic Bundle() {}\n \n-\tpublic Bundle(String name, Date publishDate, Date expireDate, String owner) {\n+\tpublic Bundle(final String name,final Date publishDate,final Date expireDate,final String owner) {\n \t\tthis.name = name;\n \t\tthis.publishDate = publishDate;\n \t\tthis.expireDate = expireDate;\n \t\tthis.owner = owner;\n \t}\n \n-\tpublic Bundle(String name, Date publishDate, Date expireDate, String owner, boolean forcePush) {\n+\tpublic Bundle(final String name,final Date publishDate,final Date expireDate,final String owner,final boolean forcePush,final String filterKey) {\n \t\tthis.name = name;\n \t\tthis.publishDate = publishDate;\n \t\tthis.expireDate = expireDate;\n \t\tthis.owner = owner;\n \t\tthis.forcePush = forcePush;\n+\t\tthis.filterKey = filterKey;\n \t}\n \n \tpublic String getId() {\n \t\treturn id;\n \t}\n-\tpublic void setId(String id) {\n+\tpublic void setId(final String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDQ0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214444", "createdAt": "2020-06-01T22:05:35Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNVrOGdbrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNVrOGdbrVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTM0OA==", "bodyText": "Issue found: Local variable 'pathStream' could be declared final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515348", "createdAt": "2020-06-01T22:05:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PushPublishFiltersInitializerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.dotcms.publishing;\n+\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotcms.util.YamlUtil;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.Logger;\n+import com.google.common.collect.ImmutableMap;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PushPublishFiltersInitializerTest {\n+\n+    private static PushPublishFiltersInitializer pushPublishFiltersInitializer;\n+    private static File path;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        final String tmpdirPath = System.getProperty(\"java.io.tmpdir\");\n+        path = new File(tmpdirPath + File.separator + \"filters\");\n+        if (!path.exists()) {\n+            path.mkdir();\n+        }\n+        pushPublishFiltersInitializer = new PushPublishFiltersInitializer();\n+    }\n+\n+    private void createFilterFile(final FilterDescriptor filterDescriptor){\n+        Logger.info(this,\"PATH\" + path.toString());\n+        final File file = new File(path.toString(),filterDescriptor.getKey());\n+        YamlUtil.write(file,filterDescriptor);\n+    }\n+\n+    /**\n+     * Method to test: {@link PushPublishFiltersInitializer#loadFilter(Path)}\n+     * Given Scenario: Given a yaml file that contains a FilterDescriptor, the initializer reads the file and loads the filter\n+     * ExpectedResult: filter is successfully added to the filterDescriptorMap\n+     *\n+     */\n+    @Test\n+    public void test_loadFilter_success() throws IOException, DotDataException {\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTest.yml\",\"Filter Test Title\",filtersMap,true,\"Reviewer,dotcms.org.2789\");\n+        createFilterFile(filterDescriptor);\n+\n+        Stream<Path> pathStream = Files.list(path.toPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDU1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214455", "createdAt": "2020-06-01T22:05:35Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNlrOGdbrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNlrOGdbrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTM1Nw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515357", "createdAt": "2020-06-01T22:05:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDY2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214466", "createdAt": "2020-06-01T22:05:36Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNlrOGdbrYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozNlrOGdbrYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTM2Mg==", "bodyText": "Issue found: The String literal \"forcePush\" appears 6 times in this file; the first occurrence is on line 551", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515362", "createdAt": "2020-06-01T22:05:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherAPITest.java", "diffHunk": "@@ -319,4 +327,304 @@ private FileFilter getNoBundleXMLFileFilter() {\n         return file -> !file.getAbsolutePath().endsWith(\"bundle.xml\");\n     }\n \n+    /**\n+     * Method to test: {@link PublisherAPI#addFilterDescriptor(FilterDescriptor)}\n+     * Given Scenario: Create a new FilterDescriptor and add it to the FilterDescriptorMap\n+     * ExpectedResult: the filterDescriptor is added successfully to the map\n+     *\n+     */\n+    @Test\n+    public void test_addFilter_success() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor =\n+                new FilterDescriptor(\"filterTestAPI.yml\",\"Filter Test Title\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor);\n+\n+        final List<FilterDescriptor> filterDescriptorList = APILocator.getPublisherAPI().getFiltersDescriptorsByRole(\n+                TestUserUtils.getAdminUser());\n+        Assert.assertFalse(filterDescriptorList.isEmpty());\n+        Assert.assertTrue(filterDescriptorList.stream().anyMatch(filter -> filter.getKey().equalsIgnoreCase(filterDescriptor.getKey())));\n+    }\n+\n+    /**\n+     * Method to test: {@link PublisherAPI#getFiltersDescriptorsByRole(User)}\n+     * Given Scenario: Get the filters that the CMSAdmin has access to\n+     * ExpectedResult: CMSAdmin has access to all the filters\n+     *\n+     */\n+    @Test\n+    public void test_getFiltersByRole_CMSAdmin_returnAllFilters() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,dotcms.org.2789\");\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), newUser);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test the userId of the new User is set into possible roles in the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_userId() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User newUser = new UserDataGen().nextPersisted();\n+\n+        final Map<String,Object> filtersMap =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap,false,\"Reviewer,\" + newUser.getUserId());\n+\n+        final FilterDescriptor filterDescriptor2 =\n+                new FilterDescriptor(\"filterTest2.yml\",\"Filter Test Title 2\",filtersMap,false,\"Reviewer\");\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+        publisherAPI.addFilterDescriptor(filterDescriptor2);\n+\n+        final List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(newUser);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+        Assert.assertFalse(filterDescriptors.contains(filterDescriptor2));\n+    }\n+\n+    /***\n+     * This test gets the filters that the user has access.\n+     * This test creates 3 Roles and 5 users with the following Hierarchy:\n+     * Role A (user A)\n+     *  |_____ Role B (user B)\n+     *           |_____ Role C (user C and user D)\n+     *\n+     * On the roles field is set the Role B and the userId of user C.\n+     *\n+     * Since Role Hierarchy is respected this is the expected result:\n+     * User A - Have Access to the Filter\n+     * User B - Have Access to the Filter\n+     * User C - Have Access to the Filter\n+     * User D - Do not have access to the Filter\n+     *\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void test_getFiltersByRole_nonCMSAdmin_RoleHierarchy() throws DotDataException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final User userA = new UserDataGen().nextPersisted();\n+        final User userB = new UserDataGen().nextPersisted();\n+        final User userC = new UserDataGen().nextPersisted();\n+        final User userD = new UserDataGen().nextPersisted();\n+\n+        final Role roleA = new RoleDataGen().nextPersisted();\n+        final Role roleB = new RoleDataGen().parent(roleA.getId()).nextPersisted();\n+        final Role roleC = new RoleDataGen().parent(roleB.getId()).nextPersisted();\n+\n+        APILocator.getRoleAPI().addRoleToUser(roleA,userA);\n+        APILocator.getRoleAPI().addRoleToUser(roleB,userB);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userC);\n+        APILocator.getRoleAPI().addRoleToUser(roleC,userD);\n+\n+        final Map<String,Object> filtersMap1 =\n+                ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\"Host,Workflow\");\n+        final FilterDescriptor filterDescriptor1 =\n+                new FilterDescriptor(\"filterTest1.yml\",\"Filter Test Title 1\",filtersMap1,false,roleB.getRoleKey()+','+userC.getUserId());\n+\n+        publisherAPI.addFilterDescriptor(filterDescriptor1);\n+\n+        //User A\n+        List<FilterDescriptor> filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userA);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User B\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userB);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User C\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userC);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertFalse(filterDescriptors.isEmpty());\n+        Assert.assertTrue(filterDescriptors.contains(filterDescriptor1));\n+\n+        //User D\n+        filterDescriptors = publisherAPI.getFiltersDescriptorsByRole(userD);\n+        Logger.info(this,filterDescriptors.toString());\n+        Assert.assertTrue(filterDescriptors.isEmpty());\n+    }\n+\n+    private void createFilterDescriptor(final String key,final String title,final boolean defaultFilter,Map<String,Object> filtersMap){\n+        if(!UtilMethods.isSet(filtersMap)){\n+            final List<Object> listExcludeClasses = new ArrayList();\n+            listExcludeClasses.add(\"User\");\n+            listExcludeClasses.add(\"OSGI\");\n+            filtersMap =\n+                    ImmutableMap.of(\"dependencies\",true,\"relationships\",true,\"excludeClasses\",\n+                            listExcludeClasses);\n+        }\n+        publisherAPI.addFilterDescriptor(new FilterDescriptor(key,title,filtersMap,defaultFilter,\"DOTCMS_BACK_END_USER\"));\n+    }\n+\n+    /**\n+     * This test creates and gets a FilterDescriptor using the key as reference.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_success(){\n+        final String key = \"TestByKeySuccess.yml\";\n+        createFilterDescriptor(key,\"TestByKeySuccess\",true,null);\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(key);\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(key,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key is not passed,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_emptyKey_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyEmptyKeyDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyEmptyKeyDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyEmptyKeyNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyEmptyKeyDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates 2 FilterDescriptors (one set as default) tries to get a FilterDescriptor, but since key passed does not belong to any FilterDescriptor,\n+     * it returns the FilterDescriptor set as default.\n+     */\n+    @Test\n+    public void test_getFilterDescriptorByKey_filterKeyDoesNotExist_returnDefaultFilter(){\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String keyDefault = \"TestByKeyDoesNotExistDefault.yml\";\n+        createFilterDescriptor(keyDefault,\"TestByKeyDoesNotExistDefault\",true,null);\n+\n+        final String keyNonDefault = \"TestByKeyDoesNotExistNonDefault.yml\";\n+        createFilterDescriptor(keyNonDefault,\"TestByKeyDoesNotExistNonDefault\",false,null);\n+\n+        final FilterDescriptor filterDescriptor = publisherAPI.getFilterDescriptorByKey(\"thisKeyNotExists\");\n+        Assert.assertNotNull(filterDescriptor);\n+        Assert.assertEquals(keyDefault,filterDescriptor.getKey());\n+    }\n+\n+    /**\n+     * This test creates a FilterDescriptor and a Bundle (with the created FilterDescriptor) and\n+     * returns a PublisherFilter with the filters of the FilterDescriptor.\n+     *\n+     * In this case the FilterDescriptor has all the possible filters.\n+     */\n+    @Test\n+    public void test_createPublisherFilter_withAllFilters()\n+            throws DotDataException, DotSecurityException {\n+        PublisherAPIImpl.class.cast(publisherAPI).getFilterDescriptorMap().clear();\n+\n+        final String filterKey = \"TestCreatePublisherFilterAllFilters.yml\";\n+        final Map<String,Object> filtersMap = new HashMap<>();\n+        filtersMap.put(\"excludeQuery\",\"+baseType:5\");\n+        final List<Object> listExcludeClasses = new ArrayList();\n+        listExcludeClasses.add(\"User\");\n+        listExcludeClasses.add(\"Host\");\n+        listExcludeClasses.add(\"ContentType\");\n+        filtersMap.put(\"excludeClasses\", listExcludeClasses);\n+        filtersMap.put(\"dependencies\",true);\n+        filtersMap.put(\"excludeDependencyQuery\",\"+baseType:7\");\n+        filtersMap.put(\"excludeDependencyClasses\", listExcludeClasses);\n+        filtersMap.put(\"forcePush\",false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 293}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214473", "createdAt": "2020-06-01T22:05:37Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozN1rOGdbraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozN1rOGdbraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTM2OQ==", "bodyText": "Issue found: Avoid unused imports such as 'javax.validation.constraints.AssertTrue'", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515369", "createdAt": "2020-06-01T22:05:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/PushNowActionletTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.field.DataTypes;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.FieldBuilder;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.BaseContentType;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n+import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.publisher.bundle.bean.Bundle;\n+import com.dotcms.publisher.environment.bean.Environment;\n+import com.dotcms.publisher.environment.business.EnvironmentAPI;\n+import com.dotcms.publishing.FilterDescriptor;\n+import com.dotcms.publishing.PublisherAPIImpl;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.FactoryLocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.AlreadyExistException;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.business.FolderAPI;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.business.WorkflowAPI;\n+import com.dotmarketing.portlets.workflows.model.MultiKeyValue;\n+import com.dotmarketing.portlets.workflows.model.MultiSelectionWorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClass;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.liferay.portal.model.User;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.validation.constraints.AssertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0NDgy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-422214482", "createdAt": "2020-06-01T22:05:38Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozOFrOGdbrcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNTozOFrOGdbrcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTM3OQ==", "bodyText": "Issue found: This statement should have braces", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r433515379", "createdAt": "2020-06-01T22:05:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -952,102 +1078,143 @@ private void setStructureDependencies() throws DotDataException, DotSecurityExce\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void structureDependencyHelper(String stInode) throws DotDataException, DotSecurityException{\n+\tprivate void structureDependencyHelper(final String stInode, final PublisherFilter publisherFilter) throws DotDataException, DotSecurityException{\n \t\tfinal Structure structure = CacheLocator.getContentTypeCache().getStructureByInode(stInode);\n-\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n-\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n \n-\t\tfinal Folder folder = APILocator.getFolderAPI().find(structure.getFolder(), user, false);\n-\t\tfolders.addOrClean(structure.getFolder(), folder.getModDate()); // add the folder dependency\n+\t\t// Host Dependency\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.SITE.getType())) {\n+\t\t\tfinal Host host = APILocator.getHostAPI().find(structure.getHost(), user, false);\n+\t\t\thosts.addOrClean(structure.getHost(), host.getModDate()); // add the host dependency\n+\t\t}\n \n-\t\ttry {\n-\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI().findSchemesForStruct(structure);\n-\t\t\tfor (final WorkflowScheme scheme : schemes) {\n-\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t// Folder Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.FOLDER.getType())) {\n+\t\t\tfinal Folder folder = APILocator.getFolderAPI()\n+\t\t\t\t\t.find(structure.getFolder(), user, false);\n+\t\t\tfolders.addOrClean(structure.getFolder(),\n+\t\t\t\t\tfolder.getModDate()); // add the folder dependency\n+\t\t}\n+\n+\t\t// Workflows Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.WORKFLOW.getType())) {\n+\t\t\ttry {\n+\t\t\t\tfinal List<WorkflowScheme> schemes = APILocator.getWorkflowAPI()\n+\t\t\t\t\t\t.findSchemesForStruct(structure);\n+\t\t\t\tfor (final WorkflowScheme scheme : schemes) {\n+\t\t\t\t\tworkflows.addOrClean(scheme.getId(), scheme.getModDate());\n+\t\t\t\t}\n+\t\t\t} catch (DotDataException e) {\n+\t\t\t\tLogger.debug(getClass(),\n+\t\t\t\t\t\t() -> \"Could not get the Workflow Scheme Dependency for Structure ID: \"\n+\t\t\t\t\t\t\t\t+ structure.getInode());\n \t\t\t}\n-\t\t} catch (DotDataException e) {\n-\t\t\tLogger.debug(getClass(), ()->\"Could not get the Workflow Scheme Dependency for Structure ID: \" + structure.getInode());\n \t\t}\n \n-        APILocator.getCategoryAPI().findCategories(new StructureTransformer(structure).from(), user).forEach(category -> {\n-            this.categories.addOrClean(category.getCategoryId(), category.getModDate());\n-        });\n+\t\t// Categories Dependencies\n+\t\tif(!publisherFilter.doesExcludeDependencyClassesContainsType(PusheableAsset.CATEGORY.getType())) {\n+\t\t\tAPILocator.getCategoryAPI()\n+\t\t\t\t\t.findCategories(new StructureTransformer(structure).from(), user)\n+\t\t\t\t\t.forEach(category -> {\n+\t\t\t\t\t\tthis.categories.addOrClean(category.getCategoryId(), category.getModDate());\n+\t\t\t\t\t});\n+\t\t}\n \n \t\t// Related structures\n-\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory().byContentType(structure);\n-\n-\t\tfor (final Relationship relationship : relations) {\n-\t\t\trelationships.addOrClean( relationship.getInode(), relationship.getModDate());\n-\n-\t\t\tif(!structures.contains(relationship.getChildStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getChildStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getChildStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getChildStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getChildStructureInode() );\n-\t\t\t}\n-\t\t\tif(!structures.contains(relationship.getParentStructureInode()) && config.getOperation().equals( Operation.PUBLISH) ){\n-\t\t\t\tStructure struct = CacheLocator.getContentTypeCache().getStructureByInode(relationship.getParentStructureInode());\n-\t\t\t\tsolvedStructures.add(stInode);\n-\t\t\t\tstructures.addOrClean( relationship.getParentStructureInode(), struct.getModDate());\n-\n-\t\t\t\tif(!solvedStructures.contains(relationship.getParentStructureInode()))\n-\t\t\t\t\tstructureDependencyHelper( relationship.getParentStructureInode() );\n+\t\tif(publisherFilter.isRelationships()) {\n+\t\t\tfinal List<Relationship> relations = FactoryLocator.getRelationshipFactory()\n+\t\t\t\t\t.byContentType(structure);\n+\n+\t\t\tfor (final Relationship relationship : relations) {\n+\t\t\t\trelationships.addOrClean(relationship.getInode(), relationship.getModDate());\n+\n+\t\t\t\tif (!contentTypes.contains(relationship.getChildStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tfinal Structure childStructure = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getChildStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes\n+\t\t\t\t\t\t\t.addOrClean(relationship.getChildStructureInode(), childStructure.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getChildStructureInode())) {\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getChildStructureInode(),\n+\t\t\t\t\t\t\t\tpublisherFilter);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (!contentTypes.contains(relationship.getParentStructureInode()) && config\n+\t\t\t\t\t\t.getOperation().equals(Operation.PUBLISH)) {\n+\t\t\t\t\tStructure struct = CacheLocator.getContentTypeCache()\n+\t\t\t\t\t\t\t.getStructureByInode(relationship.getParentStructureInode());\n+\t\t\t\t\tsolvedContentTypes.add(stInode);\n+\t\t\t\t\tcontentTypes.addOrClean(relationship.getParentStructureInode(),\n+\t\t\t\t\t\t\tstruct.getModDate());\n+\n+\t\t\t\t\tif (!solvedContentTypes.contains(relationship.getParentStructureInode()))\n+\t\t\t\t\t\tstructureDependencyHelper(relationship.getParentStructureInode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "originalPosition": 1070}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNzc4MTg2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-423778186", "createdAt": "2020-06-03T17:30:41Z", "commit": {"oid": "d303d8ce23e694dae36c96f07e87151f2bef3f36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c83a3d8320a957796e1969bd84d42698336f601", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/3c83a3d8320a957796e1969bd84d42698336f601", "committedDate": "2020-02-13T14:52:22Z", "message": "#17986 read and load yml files when init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a740ba85c2887c0d7909973aa3b6c3001362049e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/a740ba85c2887c0d7909973aa3b6c3001362049e", "committedDate": "2020-02-13T22:00:23Z", "message": "#17984 create Resource to getFilters by Role"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa2c8344aa90988f20c77839cdc7f888c51b6e8", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ffa2c8344aa90988f20c77839cdc7f888c51b6e8", "committedDate": "2020-02-18T18:58:14Z", "message": "#17986 #17984 IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1bc461bb659ad67234b1cc76e20e43d2a268f3", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/3a1bc461bb659ad67234b1cc76e20e43d2a268f3", "committedDate": "2020-02-20T20:51:46Z", "message": "#17998 ship dotcms filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31cab36755d3cfbb94d1af27b16411ab6bee227", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/e31cab36755d3cfbb94d1af27b16411ab6bee227", "committedDate": "2020-02-21T14:46:22Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee92a35499107d901e320e5f3fb995d69fd48fc", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/5ee92a35499107d901e320e5f3fb995d69fd48fc", "committedDate": "2020-02-24T17:03:29Z", "message": "#17985 remove force_push param, add filterKey param, update bundle bean and references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f21f0642348af4831c43ccc4310321dca5526526", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/f21f0642348af4831c43ccc4310321dca5526526", "committedDate": "2020-02-25T14:36:42Z", "message": "#17806 merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583617b0b1adc9dd1a449dd767df602b28797b65", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/583617b0b1adc9dd1a449dd767df602b28797b65", "committedDate": "2020-02-25T20:49:43Z", "message": "#17985 add column to DB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00abc5e8cfa54ce7c9e9b11bc20821312cf4863f", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/00abc5e8cfa54ce7c9e9b11bc20821312cf4863f", "committedDate": "2020-02-25T20:52:15Z", "message": "#17985 add new column to queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8745734b5b7445f6c5ca3f1c4ccda0eaa854cf84", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8745734b5b7445f6c5ca3f1c4ccda0eaa854cf84", "committedDate": "2020-02-25T21:12:33Z", "message": "logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f073e0be7e0227f4f768d0a7088a1faf01b6dd", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/e8f073e0be7e0227f4f768d0a7088a1faf01b6dd", "committedDate": "2020-02-25T21:49:00Z", "message": "logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7d74e20177cdae50c060f9514c24e7239de3b0", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ac7d74e20177cdae50c060f9514c24e7239de3b0", "committedDate": "2020-02-25T22:14:08Z", "message": "logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187ef45cf8d7503a3ddb1c3c7822c3539f67737e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/187ef45cf8d7503a3ddb1c3c7822c3539f67737e", "committedDate": "2020-02-26T14:16:49Z", "message": "logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf2c488df3b4b0c1e94309e7e76f84e0363b152", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/caf2c488df3b4b0c1e94309e7e76f84e0363b152", "committedDate": "2020-02-26T22:38:28Z", "message": "#17985 fix tests and revert logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa43eb3a3438d18c77981a678a004b2415d2d6b", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/1fa43eb3a3438d18c77981a678a004b2415d2d6b", "committedDate": "2020-02-27T14:28:49Z", "message": "#17985 add new column to h2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0fa018de0f60e87bde512132d9b164970ad74d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/9c0fa018de0f60e87bde512132d9b164970ad74d", "committedDate": "2020-02-27T14:30:04Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8aa5d736780ea888f2678421b815fc25c1be5b1", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/d8aa5d736780ea888f2678421b815fc25c1be5b1", "committedDate": "2020-02-27T15:33:47Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0127b2ae5075e91965f2c13563c9507fba342cc", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/e0127b2ae5075e91965f2c13563c9507fba342cc", "committedDate": "2020-02-28T17:07:58Z", "message": "#17985 force push comes in the yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd31653e43527c64812ac4fc57d0bc4772771dbd", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/cd31653e43527c64812ac4fc57d0bc4772771dbd", "committedDate": "2020-02-28T17:10:53Z", "message": "#17985 forcePush yamls, and getFilterbykey"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce6b868fb39466d18f4a63165be792307e5f9f36", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ce6b868fb39466d18f4a63165be792307e5f9f36", "committedDate": "2020-02-28T20:22:54Z", "message": "#17985 change title yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8ffc2eeda8f1d8718d4f656f2d0496fa83a42a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2e8ffc2eeda8f1d8718d4f656f2d0496fa83a42a", "committedDate": "2020-03-02T14:09:30Z", "message": "#17985 change path of resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c993b41bbd858016d4b3b94cd52b938dc2616a93", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/c993b41bbd858016d4b3b94cd52b938dc2616a93", "committedDate": "2020-03-04T17:28:21Z", "message": "#17985 merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca2efb50fdff315e2be15b075359e4a1f71dc77", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8ca2efb50fdff315e2be15b075359e4a1f71dc77", "committedDate": "2020-03-04T18:07:21Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981ae4f703f48a001020fb80381bbc93600414c8", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/981ae4f703f48a001020fb80381bbc93600414c8", "committedDate": "2020-03-09T16:56:43Z", "message": "#17985 update info to yaml files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401cda5b2a80e777ec58db5cb0050769e3cbad77", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/401cda5b2a80e777ec58db5cb0050769e3cbad77", "committedDate": "2020-03-09T21:01:32Z", "message": "#17985 publisherFilter manages filters values, IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470536e37414f2b239b113dc051e22791eeca707", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/470536e37414f2b239b113dc051e22791eeca707", "committedDate": "2020-03-09T23:02:28Z", "message": "#17985 getFilterByKey and createPublisherFilter methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c143fbd004c7526c3d02264ce2807710f2cc3a6", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8c143fbd004c7526c3d02264ce2807710f2cc3a6", "committedDate": "2020-03-09T23:04:10Z", "message": "#17985 apply accept to the dependencyManager to check if the asset is added to the bundle and which dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15a8f48ea5cee798d5cf2c1218040bf1de4ac14", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/d15a8f48ea5cee798d5cf2c1218040bf1de4ac14", "committedDate": "2020-04-07T17:53:52Z", "message": "merge master April 7th"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ab7f00e2e1fad659a74090a28ef2ee5cae9290", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/91ab7f00e2e1fad659a74090a28ef2ee5cae9290", "committedDate": "2020-04-08T21:38:35Z", "message": "#17985 #17806 modify yml files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522868ce6c870005f525711c5139eaad09d5871d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/522868ce6c870005f525711c5139eaad09d5871d", "committedDate": "2020-04-08T21:40:02Z", "message": "#17985 fix structure excludeDependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7440314f0aac9785d81ab75a22b10e04431b6179", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/7440314f0aac9785d81ab75a22b10e04431b6179", "committedDate": "2020-04-08T21:41:25Z", "message": "#17985 #17806 remove key from yml file, get from fileName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1209a3cc1c6bc0068d66ec5a3c949b5dfc3339f8", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/1209a3cc1c6bc0068d66ec5a3c949b5dfc3339f8", "committedDate": "2020-04-08T21:43:02Z", "message": "#17985 fix download bundle, use BundleId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a43c9e66afe2e15773107570cea1e270600e3d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/22a43c9e66afe2e15773107570cea1e270600e3d", "committedDate": "2020-04-09T15:27:09Z", "message": "#17806 #17985 order filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43601eb8c62e7e67b00c4e566b6fccaa5b7377ea", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/43601eb8c62e7e67b00c4e566b6fccaa5b7377ea", "committedDate": "2020-04-09T19:48:41Z", "message": "#17985 show Filter applied in the bundle detail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36dff915bf582a90094f2f3e57d6ec702a591dec", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/36dff915bf582a90094f2f3e57d6ec702a591dec", "committedDate": "2020-04-09T21:03:27Z", "message": "#17985 fix oracle column datatype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1ed441f86356c16069ac5702dd3db9bd5f53135", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/b1ed441f86356c16069ac5702dd3db9bd5f53135", "committedDate": "2020-04-09T22:12:54Z", "message": "#17985 upgradeTask and Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7acf88f3d9211f6e1569fdf4b852757b8788867e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/7acf88f3d9211f6e1569fdf4b852757b8788867e", "committedDate": "2020-04-13T19:33:21Z", "message": "#17985 add upgradeTask to TaskLocator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13187fc67fcd9fe8774e527f2edfb8f7adff68bd", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/13187fc67fcd9fe8774e527f2edfb8f7adff68bd", "committedDate": "2020-04-20T17:31:08Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9d8e7bca09e34e3a7c84d347fc8b186b9219eb", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/4b9d8e7bca09e34e3a7c84d347fc8b186b9219eb", "committedDate": "2020-04-21T16:58:24Z", "message": "#17806 new tests and refactor other ones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c4078d746fe72714773439c05f0d1b2d08f512", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/d4c4078d746fe72714773439c05f0d1b2d08f512", "committedDate": "2020-04-21T16:59:44Z", "message": "#17806 rename methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6965a08afabb751a10bdcd4bddc5360f334335dd", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6965a08afabb751a10bdcd4bddc5360f334335dd", "committedDate": "2020-04-21T17:40:43Z", "message": "#17806 fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a820b51d6fa417678bce28d7b3f2e16ff07d2a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/d0a820b51d6fa417678bce28d7b3f2e16ff07d2a", "committedDate": "2020-04-22T15:59:57Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6852c3a43ce24e374e5e3f106d19f797adff7f86", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6852c3a43ce24e374e5e3f106d19f797adff7f86", "committedDate": "2020-04-24T16:26:25Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da07b60e77143ac297df3a6823f3aab858df5768", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/da07b60e77143ac297df3a6823f3aab858df5768", "committedDate": "2020-04-24T18:13:10Z", "message": "#17806 change structure for contenttype"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a778b93954912a0b0ebebfee6b9cb4e5d9d5b8a7", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/a778b93954912a0b0ebebfee6b9cb4e5d9d5b8a7", "committedDate": "2020-04-28T00:11:12Z", "message": "#17806 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "133ac7126a55aba1e2d1407d701c4e9bb5d6eb7a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/133ac7126a55aba1e2d1407d701c4e9bb5d6eb7a", "committedDate": "2020-04-28T18:46:45Z", "message": "#17806 #17985 better definition of relationship filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb67a317560c9889966f77ce35b2b0c45898051", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/4fb67a317560c9889966f77ce35b2b0c45898051", "committedDate": "2020-04-28T18:48:06Z", "message": "#17806 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e6f85d575f288592d2c018c886556b5cd699f5", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/a0e6f85d575f288592d2c018c886556b5cd699f5", "committedDate": "2020-05-01T21:46:26Z", "message": "#17806 #17985 tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6869538b2a86df10c68b49810c1e0fc52feb600f", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6869538b2a86df10c68b49810c1e0fc52feb600f", "committedDate": "2020-05-01T21:52:52Z", "message": "#17985 merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a805f564931586628e409141e62f791190bfd6", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/38a805f564931586628e409141e62f791190bfd6", "committedDate": "2020-05-02T01:22:12Z", "message": "#17985 add tests to mainsuite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a7b1eb1b80d45b013bf82cb21b81e233ad04ac", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/21a7b1eb1b80d45b013bf82cb21b81e233ad04ac", "committedDate": "2020-05-04T14:30:11Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6284a4bdf499874fe638ccf0f04018e52239777a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6284a4bdf499874fe638ccf0f04018e52239777a", "committedDate": "2020-05-04T17:48:41Z", "message": "#17806 fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74d8492e2dadcc9901bf430c7deedeb7da725b7f", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/74d8492e2dadcc9901bf430c7deedeb7da725b7f", "committedDate": "2020-05-04T20:07:59Z", "message": "#17806 toString publisherFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf5dc5bf0c33e77862e6d14f7c64edeca79b0c7", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/6cf5dc5bf0c33e77862e6d14f7c64edeca79b0c7", "committedDate": "2020-05-04T20:09:09Z", "message": "#17806 error message assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "488cd98c1f44831ae8587788d3c9d1818997dfae", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/488cd98c1f44831ae8587788d3c9d1818997dfae", "committedDate": "2020-05-04T21:14:23Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294472d26f4e044cade157ed39534b31f531fc81", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/294472d26f4e044cade157ed39534b31f531fc81", "committedDate": "2020-05-04T21:59:08Z", "message": "logs for failing test, delete later"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f262b5e4eab8987e08033397dcd33c594db6ee24", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/f262b5e4eab8987e08033397dcd33c594db6ee24", "committedDate": "2020-05-05T00:58:50Z", "message": "logs for failing test, delete later"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8103f0fb2e6d439cd8335dde26a8096ea972dce", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/f8103f0fb2e6d439cd8335dde26a8096ea972dce", "committedDate": "2020-05-05T02:38:26Z", "message": "logs for failing test, delete later"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86bb128e7bd5cfc88d3449c149c4fe006ea6824c", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/86bb128e7bd5cfc88d3449c149c4fe006ea6824c", "committedDate": "2020-05-05T14:56:07Z", "message": "#17806 #17985 missing apply filters to lang var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9325f54ca814dbbbdaed6e0f82b23b2a10b6bd", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/7e9325f54ca814dbbbdaed6e0f82b23b2a10b6bd", "committedDate": "2020-05-05T17:33:49Z", "message": "remove logs for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/adfebf4e3a948581410f416bb5f6127fde9b1a7e", "committedDate": "2020-05-11T20:08:17Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-17806-ppfilters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDkwODA3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411090807", "createdAt": "2020-05-13T16:20:10Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMDoxMFrOGU5e0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMDoxMFrOGU5e0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NjQ4Mg==", "bodyText": "use this doc guide\n\n/**\n* Method to test: include this in case the method to test does not belong to the class this test-class is testing \n* Given Scenario: Scenario under test\n* ExpectedResult: Expected result that the assertion is checking against\n*\n*/", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424566482", "createdAt": "2020-05-13T16:20:10Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/PublisherFilterImplTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.publishing;\n+\n+import com.dotcms.publisher.util.PusheableAsset;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.util.UUIDGenerator;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class PublisherFilterImplTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDkyODMw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411092830", "createdAt": "2020-05-13T16:22:34Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMjozNFrOGU5lFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyMjozNFrOGU5lFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2ODA4Nw==", "bodyText": "I think on some db these strategies may break the connection, I think we can query the catalog to check metainfo to see if the filter_key exists", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424568087", "createdAt": "2020-05-13T16:22:34Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05305AddPushPublishFilterColumnTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05305AddPushPublishFilterColumnTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private void dropColumn() throws SQLException {\n+        final String dropColumnSQL = \"ALTER TABLE publishing_bundle DROP COLUMN filter_key\";\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.executeStatement(dropColumnSQL);\n+    }\n+\n+    private boolean checkColumnExists(){\n+        final String dropColumnSQL = \"select id from publishing_bundle where filter_key = ''\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDk1Mzgz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411095383", "createdAt": "2020-05-13T16:25:30Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNTozMVrOGU5s7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNTozMVrOGU5s7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDA5Mg==", "bodyText": "rename to publisherAPI", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424570092", "createdAt": "2020-05-13T16:25:31Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -633,13 +633,13 @@ public void downloadUnpushedBundle ( HttpServletRequest request, HttpServletResp\n     @SuppressWarnings (\"unchecked\")\n     private Map<String, Object> generateBundle ( String bundleId, PushPublisherConfig.Operation operation ) throws DotPublisherException, DotDataException, DotPublishingException, IllegalAccessException, InstantiationException, DotBundleException, IOException {\n \n-        PushPublisherConfig pconf = new PushPublisherConfig();\n-        PublisherAPI pubAPI = PublisherAPI.getInstance();\n+        final PushPublisherConfig pconf = new PushPublisherConfig();\n+        final PublisherAPI pubAPI = PublisherAPI.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDk1NTgw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411095580", "createdAt": "2020-05-13T16:25:45Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNTo0NVrOGU5tiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNTo0NVrOGU5tiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDI1MQ==", "bodyText": "rename to pushPublisherConfig", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424570251", "createdAt": "2020-05-13T16:25:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -633,13 +633,13 @@ public void downloadUnpushedBundle ( HttpServletRequest request, HttpServletResp\n     @SuppressWarnings (\"unchecked\")\n     private Map<String, Object> generateBundle ( String bundleId, PushPublisherConfig.Operation operation ) throws DotPublisherException, DotDataException, DotPublishingException, IllegalAccessException, InstantiationException, DotBundleException, IOException {\n \n-        PushPublisherConfig pconf = new PushPublisherConfig();\n-        PublisherAPI pubAPI = PublisherAPI.getInstance();\n+        final PushPublisherConfig pconf = new PushPublisherConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDk2MDMy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411096032", "createdAt": "2020-05-13T16:26:15Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNjoxNVrOGU5vBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjoyNjoxNVrOGU5vBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3MDYyOA==", "bodyText": "rename to publishQueueElement", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424570628", "createdAt": "2020-05-13T16:26:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -633,13 +633,13 @@ public void downloadUnpushedBundle ( HttpServletRequest request, HttpServletResp\n     @SuppressWarnings (\"unchecked\")\n     private Map<String, Object> generateBundle ( String bundleId, PushPublisherConfig.Operation operation ) throws DotPublisherException, DotDataException, DotPublishingException, IllegalAccessException, InstantiationException, DotBundleException, IOException {\n \n-        PushPublisherConfig pconf = new PushPublisherConfig();\n-        PublisherAPI pubAPI = PublisherAPI.getInstance();\n+        final PushPublisherConfig pconf = new PushPublisherConfig();\n+        final PublisherAPI pubAPI = PublisherAPI.getInstance();\n \n-        List<PublishQueueElement> tempBundleContents = pubAPI.getQueueElementsByBundleId( bundleId );\n-        List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>(); \n+        final List<PublishQueueElement> tempBundleContents = pubAPI.getQueueElementsByBundleId( bundleId );\n+        final List<PublishQueueElement> assetsToPublish = new ArrayList<PublishQueueElement>();\n \n-        for ( PublishQueueElement c : tempBundleContents ) {\n+        for ( final PublishQueueElement c : tempBundleContents ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTE4NjY0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411118664", "createdAt": "2020-05-13T16:54:18Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NDoxOVrOGU601Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NDoxOVrOGU601Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODUwMQ==", "bodyText": "rename to clazzBundler", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424588501", "createdAt": "2020-05-13T16:54:19Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -654,32 +654,28 @@ public void downloadUnpushedBundle ( HttpServletRequest request, HttpServletResp\n \n         //BUNDLERS\n \n-        List<Class<IBundler>> bundlers = new ArrayList<Class<IBundler>>();\n-        List<IBundler> confBundlers = new ArrayList<IBundler>();\n+        final List<Class<IBundler>> bundlers = new ArrayList<Class<IBundler>>();\n+        final List<IBundler> confBundlers = new ArrayList<IBundler>();\n \n-        Publisher publisher = new PushPublisher();\n+        final Publisher publisher = new PushPublisher();\n         publisher.init( pconf );\n         //Add the bundles for this publisher\n-        for ( Class clazz : publisher.getBundlers() ) {\n+        for ( final Class clazz : publisher.getBundlers() ) {\n             if ( !bundlers.contains( clazz ) ) {\n                 bundlers.add( clazz );\n             }\n         }\n-\n-        //Create a new bundle id for this generated bundle\n-        String newBundleId = UUID.randomUUID().toString();\n-        pconf.setId( newBundleId );\n-        File bundleRoot = BundlerUtil.getBundleRoot( pconf );\n+        final File bundleRoot = BundlerUtil.getBundleRoot( pconf );\n \n         // Run bundlers\n         BundlerUtil.writeBundleXML( pconf );\n-        for ( Class<IBundler> c : bundlers ) {\n+        for ( final Class<IBundler> c : bundlers ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTE5MDky", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411119092", "createdAt": "2020-05-13T16:54:52Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NDo1MlrOGU62Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NDo1MlrOGU62Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODgzMQ==", "bodyText": "rename to fileList", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424588831", "createdAt": "2020-05-13T16:54:52Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -689,12 +685,11 @@ public void downloadUnpushedBundle ( HttpServletRequest request, HttpServletResp\n         pconf.setBundlers( confBundlers );\n \n         //Compressing bundle\n-        ArrayList<File> list = new ArrayList<File>();\n+        final ArrayList<File> list = new ArrayList<File>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTIzNjcy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411123672", "createdAt": "2020-05-13T17:00:20Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowMDoyMFrOGU7EEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowMDoyMFrOGU7EEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjQwMA==", "bodyText": "remove the _ from the variables", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424592400", "createdAt": "2020-05-13T17:00:20Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/ajax/RemotePublishAjaxAction.java", "diffHunk": "@@ -937,19 +932,15 @@ public void pushBundle ( HttpServletRequest request, HttpServletResponse respons\n             PublisherAPI publisherAPI = PublisherAPI.getInstance();\n \n             //Read the form values\n-            String bundleId = request.getParameter( \"assetIdentifier\" );\n-            String _contentPushPublishDate = request.getParameter( \"remotePublishDate\" );\n-            String _contentPushPublishTime = request.getParameter( \"remotePublishTime\" );\n-            String _contentPushExpireDate = request.getParameter( \"remotePublishExpireDate\" );\n-            String _contentPushExpireTime = request.getParameter( \"remotePublishExpireTime\" );\n-            String _iWantTo = request.getParameter( \"iWantTo\" );\n-            String whoToSendTmp = request.getParameter( \"whoToSend\" );\n-            String forcePushTmp = request.getParameter( \"forcePush\" );\n-            \n-            Boolean forcePush = false;\n-            if(UtilMethods.isSet(forcePushTmp)){\n-                forcePush = Boolean.valueOf(forcePushTmp);\n-            }\n+            final String bundleId = request.getParameter( \"assetIdentifier\" );\n+            final String _contentPushPublishDate = request.getParameter( \"remotePublishDate\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTI5NzMx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411129731", "createdAt": "2020-05-13T17:08:09Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowODowOVrOGU7WaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowODowOVrOGU7WaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NzA5Nw==", "bodyText": "rename to\nfinal Folder folder =", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424597097", "createdAt": "2020-05-13T17:08:09Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -357,35 +370,55 @@ public void setDependencies() throws DotSecurityException, DotDataException, Dot\n \t * <li>Folders</li>\n \t * </ul>\n \t */\n-\tprivate void setLinkDependencies() {\n+\tprivate void setLinkDependencies(final PublisherFilter publisherFilter)  {\n \t\tfor(String linkId : linksSet) {\n \t\t\ttry {\n \t\t\t\tIdentifier ident=APILocator.getIdentifierAPI().find(linkId);\n-\t\t\t\tFolder ff = APILocator.getFolderAPI().findFolderByPath(ident.getParentPath(), ident.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( ff.getInode(), ff.getModDate());\n-\t\t\t\tfoldersSet.add(ff.getInode());\n \n-\t\t\t\tHost hh=APILocator.getHostAPI().find(ident.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( hh.getIdentifier(), hh.getModDate());\n-\t\t\t\thostsSet.add(hh.getIdentifier());\n+\t\t\t\t// Folder Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder ff = APILocator.getFolderAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTMwMTEx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411130111", "createdAt": "2020-05-13T17:08:37Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowODozN1rOGU7XWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowODozN1rOGU7XWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5NzMzOQ==", "bodyText": "rename to\nfinal Host host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424597339", "createdAt": "2020-05-13T17:08:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -357,35 +370,55 @@ public void setDependencies() throws DotSecurityException, DotDataException, Dot\n \t * <li>Folders</li>\n \t * </ul>\n \t */\n-\tprivate void setLinkDependencies() {\n+\tprivate void setLinkDependencies(final PublisherFilter publisherFilter)  {\n \t\tfor(String linkId : linksSet) {\n \t\t\ttry {\n \t\t\t\tIdentifier ident=APILocator.getIdentifierAPI().find(linkId);\n-\t\t\t\tFolder ff = APILocator.getFolderAPI().findFolderByPath(ident.getParentPath(), ident.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( ff.getInode(), ff.getModDate());\n-\t\t\t\tfoldersSet.add(ff.getInode());\n \n-\t\t\t\tHost hh=APILocator.getHostAPI().find(ident.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( hh.getIdentifier(), hh.getModDate());\n-\t\t\t\thostsSet.add(hh.getIdentifier());\n+\t\t\t\t// Folder Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder ff = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t.findFolderByPath(ident.getParentPath(), ident.getHostId(), user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tfolders.addOrClean(ff.getInode(), ff.getModDate());\n+\t\t\t\t\tfoldersSet.add(ff.getInode());\n+\t\t\t\t}\n \n-\t\t\t\tLink link = APILocator.getMenuLinkAPI().findWorkingLinkById(linkId, user, false);\n+\t\t\t\t// Host Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost hh = APILocator.getHostAPI().find(ident.getHostId(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTMxMDg2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411131086", "createdAt": "2020-05-13T17:09:54Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowOTo1NVrOGU7aQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzowOTo1NVrOGU7aQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5ODA4Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424598083", "createdAt": "2020-05-13T17:09:55Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -357,35 +370,55 @@ public void setDependencies() throws DotSecurityException, DotDataException, Dot\n \t * <li>Folders</li>\n \t * </ul>\n \t */\n-\tprivate void setLinkDependencies() {\n+\tprivate void setLinkDependencies(final PublisherFilter publisherFilter)  {\n \t\tfor(String linkId : linksSet) {\n \t\t\ttry {\n \t\t\t\tIdentifier ident=APILocator.getIdentifierAPI().find(linkId);\n-\t\t\t\tFolder ff = APILocator.getFolderAPI().findFolderByPath(ident.getParentPath(), ident.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( ff.getInode(), ff.getModDate());\n-\t\t\t\tfoldersSet.add(ff.getInode());\n \n-\t\t\t\tHost hh=APILocator.getHostAPI().find(ident.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( hh.getIdentifier(), hh.getModDate());\n-\t\t\t\thostsSet.add(hh.getIdentifier());\n+\t\t\t\t// Folder Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder ff = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t.findFolderByPath(ident.getParentPath(), ident.getHostId(), user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tfolders.addOrClean(ff.getInode(), ff.getModDate());\n+\t\t\t\t\tfoldersSet.add(ff.getInode());\n+\t\t\t\t}\n \n-\t\t\t\tLink link = APILocator.getMenuLinkAPI().findWorkingLinkById(linkId, user, false);\n+\t\t\t\t// Host Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost hh = APILocator.getHostAPI().find(ident.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(hh.getIdentifier(), hh.getModDate());\n+\t\t\t\t\thostsSet.add(hh.getIdentifier());\n+\t\t\t\t}\n \n-\t\t\t\tif(link!=null) {\n+\t\t\t\t// Content Dependencies\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tLink link = APILocator.getMenuLinkAPI()\n+\t\t\t\t\t\t\t.findWorkingLinkById(linkId, user, false);\n \n-\t\t\t\t\tif(link.getLinkType().equals(Link.LinkType.INTERNAL.toString())) {\n-\t\t\t\t\t\tIdentifier id = APILocator.getIdentifierAPI().find(link.getInternalLinkIdentifier());\n+\t\t\t\t\tif (link != null) {\n \n-\t\t\t\t\t\t// add file/content dependencies. will also work with htmlpages as content\n-\t\t\t\t\t\tif (InodeUtils.isSet(id.getInode()) && id.getAssetType().equals(\"contentlet\")) {\n-\t\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(\"+identifier:\"+id.getId(), 0, 0, \"moddate\", user, false);\n+\t\t\t\t\t\tif (link.getLinkType().equals(Link.LinkType.INTERNAL.toString())) {\n+\t\t\t\t\t\t\tIdentifier id = APILocator.getIdentifierAPI()\n+\t\t\t\t\t\t\t\t\t.find(link.getInternalLinkIdentifier());\n \n-\t\t\t\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n-\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t// add file/content dependencies. will also work with htmlpages as content\n+\t\t\t\t\t\t\tif (InodeUtils.isSet(id.getInode()) && id.getAssetType()\n+\t\t\t\t\t\t\t\t\t.equals(\"contentlet\")) {\n+\t\t\t\t\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t\t\t\t.search(\"+identifier:\" + id.getId(), 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\t\t\t\tfalse);\n+\n+\t\t\t\t\t\t\t\tfor (Contentlet contentlet : contentList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTMxMzQ3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411131347", "createdAt": "2020-05-13T17:10:14Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMDoxNFrOGU7bIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMDoxNFrOGU7bIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5ODMwNw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424598307", "createdAt": "2020-05-13T17:10:14Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTMxNTcx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411131571", "createdAt": "2020-05-13T17:10:31Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMDozMVrOGU7bxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMDozMVrOGU7bxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5ODQ3MQ==", "bodyText": "rename to host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424598471", "createdAt": "2020-05-13T17:10:31Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM3NDIx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411137421", "createdAt": "2020-05-13T17:18:10Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODoxMFrOGU7tfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODoxMFrOGU7tfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzAwNQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603005", "createdAt": "2020-05-13T17:18:10Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 242}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM3NjY0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411137664", "createdAt": "2020-05-13T17:18:30Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODozMFrOGU7uXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODozMFrOGU7uXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzIzMQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603231", "createdAt": "2020-05-13T17:18:30Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {\n+\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Content dependencies\n-\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n-\n-\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 262}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM3Nzgw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411137780", "createdAt": "2020-05-13T17:18:41Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODo0MVrOGU7u4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODo0MVrOGU7u4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzM2MA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603360", "createdAt": "2020-05-13T17:18:41Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {\n+\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Content dependencies\n-\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n-\n-\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n+\t\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\t\tfor (Contentlet contentlet : contentList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 265}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM3OTg1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411137985", "createdAt": "2020-05-13T17:18:58Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODo1OFrOGU7veg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxODo1OFrOGU7veg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzUxNA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603514", "createdAt": "2020-05-13T17:18:58Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {\n+\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Content dependencies\n-\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n-\n-\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n+\t\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(),\n+\t\t\t\t\t\t\t\t\tcontentlet.getModDate());\n+\t\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Structure dependencies\n-\t\t\t\tfinal List<Structure> structuresList = StructureFactory.getStructuresUnderHost(h, user, false);\n-\t\t\t\tfor (Structure structure : structuresList) {\n-\t\t\t\t\tstructures.addOrClean( structure.getInode(), structure.getModDate());\n-\t\t\t\t\tstructuresSet.add(structure.getInode());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tfinal List<Structure> structuresList = StructureFactory\n+\t\t\t\t\t\t\t.getStructuresUnderHost(h, user, false);\n+\t\t\t\t\tfor (Structure structure : structuresList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 282}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM4MTcw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411138170", "createdAt": "2020-05-13T17:19:15Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxOToxNVrOGU7wGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxOToxNVrOGU7wGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzY3Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603673", "createdAt": "2020-05-13T17:19:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {\n+\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Content dependencies\n-\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n-\n-\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n+\t\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(),\n+\t\t\t\t\t\t\t\t\tcontentlet.getModDate());\n+\t\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Structure dependencies\n-\t\t\t\tfinal List<Structure> structuresList = StructureFactory.getStructuresUnderHost(h, user, false);\n-\t\t\t\tfor (Structure structure : structuresList) {\n-\t\t\t\t\tstructures.addOrClean( structure.getInode(), structure.getModDate());\n-\t\t\t\t\tstructuresSet.add(structure.getInode());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tfinal List<Structure> structuresList = StructureFactory\n+\t\t\t\t\t\t\t.getStructuresUnderHost(h, user, false);\n+\t\t\t\t\tfor (Structure structure : structuresList) {\n+\t\t\t\t\t\tcontentTypes.addOrClean(structure.getInode(), structure.getModDate());\n+\t\t\t\t\t\tcontentTypesSet.add(structure.getInode());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Folder dependencies\n-\t\t\t\tfinal List<Folder> folderList = APILocator.getFolderAPI().findFoldersByHost(h, user, false);\n-\t\t\t\tfor (Folder folder : folderList) {\n-\t\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tfinal List<Folder> folderList = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t.findFoldersByHost(h, user, false);\n+\t\t\t\t\tfor (Folder folder : folderList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 296}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM4MzAz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411138303", "createdAt": "2020-05-13T17:19:24Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxOToyNFrOGU7wfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxOToyNFrOGU7wfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMzc3Mw==", "bodyText": "rename h to host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424603773", "createdAt": "2020-05-13T17:19:24Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -408,58 +441,79 @@ private void setLinkDependencies() {\n \t * <li>Rules.</li>\n \t * </ul>\n \t */\n-\tprivate void setHostDependencies () {\n+\tprivate void setHostDependencies (final PublisherFilter publisherFilter) {\n \t\ttry {\n \t\t\tfor (String id : hostsSet) {\n \t\t\t\tfinal Host h = APILocator.getHostAPI().find(id, user, false);\n \n \t\t\t\t// Template dependencies\n-\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI().findTemplatesAssignedTo(h);\n-\t\t\t\tfor (Template template : templateList) {\n-\t\t\t\t\ttemplates.addOrClean( template.getIdentifier(), template.getModDate());\n-\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\tfinal List<Template> templateList = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findTemplatesAssignedTo(h);\n+\t\t\t\t\tfor (Template template : templateList) {\n+\t\t\t\t\t\ttemplates.addOrClean(template.getIdentifier(), template.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(template.getIdentifier());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Container dependencies\n-\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI().findContainersUnder(h);\n-\t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\tfinal List<Container> containerList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t.findContainersUnder(h);\n+\t\t\t\t\tfor (Container container : containerList) {\n+\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Content dependencies\n-\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n-\n-\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\t\tString luceneQuery = \"+conHost:\" + h.getIdentifier();\n+\t\t\t\t\tfinal List<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(),\n+\t\t\t\t\t\t\t\t\tcontentlet.getModDate());\n+\t\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Structure dependencies\n-\t\t\t\tfinal List<Structure> structuresList = StructureFactory.getStructuresUnderHost(h, user, false);\n-\t\t\t\tfor (Structure structure : structuresList) {\n-\t\t\t\t\tstructures.addOrClean( structure.getInode(), structure.getModDate());\n-\t\t\t\t\tstructuresSet.add(structure.getInode());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\tfinal List<Structure> structuresList = StructureFactory\n+\t\t\t\t\t\t\t.getStructuresUnderHost(h, user, false);\n+\t\t\t\t\tfor (Structure structure : structuresList) {\n+\t\t\t\t\t\tcontentTypes.addOrClean(structure.getInode(), structure.getModDate());\n+\t\t\t\t\t\tcontentTypesSet.add(structure.getInode());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\t// Folder dependencies\n-\t\t\t\tfinal List<Folder> folderList = APILocator.getFolderAPI().findFoldersByHost(h, user, false);\n-\t\t\t\tfor (Folder folder : folderList) {\n-\t\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tfinal List<Folder> folderList = APILocator.getFolderAPI()\n+\t\t\t\t\t\t\t.findFoldersByHost(h, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 295}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM4ODMy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411138832", "createdAt": "2020-05-13T17:20:02Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDowMlrOGU7yGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDowMlrOGU7yGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDE4NA==", "bodyText": "rename to folder and set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424604184", "createdAt": "2020-05-13T17:20:02Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 341}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM5MzY3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411139367", "createdAt": "2020-05-13T17:20:41Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDo0MVrOGU7zvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDo0MVrOGU7zvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDYwNw==", "bodyText": "rename to\nfinal Host host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424604607", "createdAt": "2020-05-13T17:20:41Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 356}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM5NTU0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411139554", "createdAt": "2020-05-13T17:20:55Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDo1NVrOGU70Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMDo1NVrOGU70Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDc2Nw==", "bodyText": "Rename f to folder", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424604767", "createdAt": "2020-05-13T17:20:55Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 356}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM5NzE3", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411139717", "createdAt": "2020-05-13T17:21:07Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTowN1rOGU700g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTowN1rOGU700g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNDg4Mg==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424604882", "createdAt": "2020-05-13T17:21:07Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 369}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM5ODgw", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411139880", "createdAt": "2020-05-13T17:21:18Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMToxOFrOGU71UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMToxOFrOGU71UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTAwOA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424605008", "createdAt": "2020-05-13T17:21:18Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 370}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTM5OTYy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411139962", "createdAt": "2020-05-13T17:21:25Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMToyNVrOGU71kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMToyNVrOGU71kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTA3Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424605073", "createdAt": "2020-05-13T17:21:25Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\tfor (Contentlet contentlet : contentList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 372}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQwMDc1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411140075", "createdAt": "2020-05-13T17:21:36Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTozNlrOGU718A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTozNlrOGU718A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTE2OA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424605168", "createdAt": "2020-05-13T17:21:36Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(), contentlet.getModDate());\n+\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Menu Link dependencies\n-\n-\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n-\t\t\tfor (Link link : linkList) {\n-\t\t\t\tlinks.addOrClean( link.getIdentifier(), link.getModDate());\n-\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.LINK.getType())) {\n+\t\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 387}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQwMTc0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411140174", "createdAt": "2020-05-13T17:21:43Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTo0NFrOGU72PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMTo0NFrOGU72PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTI0NQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424605245", "createdAt": "2020-05-13T17:21:44Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(), contentlet.getModDate());\n+\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Menu Link dependencies\n-\n-\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n-\t\t\tfor (Link link : linkList) {\n-\t\t\t\tlinks.addOrClean( link.getIdentifier(), link.getModDate());\n-\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.LINK.getType())) {\n+\t\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n+\t\t\t\tfor (Link link : linkList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 388}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQwOTU5", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411140959", "createdAt": "2020-05-13T17:22:44Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMjo0NFrOGU74qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMjo0NFrOGU74qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNTg2NQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424605865", "createdAt": "2020-05-13T17:22:44Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(), contentlet.getModDate());\n+\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Menu Link dependencies\n-\n-\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n-\t\t\tfor (Link link : linkList) {\n-\t\t\t\tlinks.addOrClean( link.getIdentifier(), link.getModDate());\n-\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.LINK.getType())) {\n+\t\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n+\t\t\t\tfor (Link link : linkList) {\n+\t\t\t\t\tlinks.addOrClean(link.getIdentifier(), link.getModDate());\n+\t\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Structure dependencies\n-\t\t\tList<Structure> structureList = APILocator.getFolderAPI().getStructures(f, user, false);\n-\n-\t\t\tfor (Structure structure : structureList) {\n-\t\t\t\tstructures.addOrClean( structure.getInode(), structure.getModDate());\n-\t\t\t\tstructuresSet.add(structure.getInode());\n-\t\t\t}\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\tList<Structure> structureList = APILocator.getFolderAPI()\n+\t\t\t\t\t\t.getStructures(f, user, false);\n+\t\t\t\tfor (Structure structure : structureList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 404}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQxMTQ4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411141148", "createdAt": "2020-05-13T17:23:00Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzowMVrOGU75VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzowMVrOGU75VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNjAzNg==", "bodyText": "rename to folder", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424606036", "createdAt": "2020-05-13T17:23:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -514,54 +568,67 @@ private void setFolderDependencies() {\n \t * @throws DotDataException\n \t * @throws DotSecurityException\n \t */\n-\tprivate void setFolderListDependencies(List<Folder> folderList) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n+\tprivate void setFolderListDependencies(final List<Folder> folderList, final PublisherFilter publisherFilter) throws DotIdentifierStateException, DotDataException, DotSecurityException {\n \t\tfor (Folder f : folderList) {\n \n \t\t\t// Add folder even if empty\n-\t\t\tfolders.addOrClean( f.getInode(), f.getModDate());\n-\t\t\tfoldersSet.add(f.getInode());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\tfolders.addOrClean(f.getInode(), f.getModDate());\n+\t\t\t\tfoldersSet.add(f.getInode());\n+\t\t\t}\n \n \t\t\t// Host dependency\n-\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n-\t\t\thosts.addOrClean( f.getHostId(), h.getModDate());\n-\t\t\thostsSet.add(f.getHostId());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\tHost h = APILocator.getHostAPI().find(f.getHostId(), user, false);\n+\t\t\t\thosts.addOrClean(f.getHostId(), h.getModDate());\n+\t\t\t\thostsSet.add(f.getHostId());\n+\t\t\t}\n \n \t\t\t// Content dependencies\n-\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n-\n-\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI().search(luceneQuery, 0, 0, null, user, false);\n-\t\t\tfor (Contentlet contentlet : contentList) {\n-\t\t\t\tcontents.addOrClean( contentlet.getIdentifier(), contentlet.getModDate());\n-\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENTLET.getType())) {\n+\t\t\t\tString luceneQuery = \"+conFolder:\" + f.getInode();\n+\t\t\t\tList<Contentlet> contentList = APILocator.getContentletAPI()\n+\t\t\t\t\t\t.search(luceneQuery, 0, 0, null, user, false);\n+\t\t\t\tfor (Contentlet contentlet : contentList) {\n+\t\t\t\t\tif(publisherFilter.acceptExcludeDependencyQuery(contentlet.getIdentifier())) {\n+\t\t\t\t\t\tcontents.addOrClean(contentlet.getIdentifier(), contentlet.getModDate());\n+\t\t\t\t\t\tcontentsSet.add(contentlet.getIdentifier());\n+\t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Menu Link dependencies\n-\n-\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n-\t\t\tfor (Link link : linkList) {\n-\t\t\t\tlinks.addOrClean( link.getIdentifier(), link.getModDate());\n-\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.LINK.getType())) {\n+\t\t\t\tList<Link> linkList = APILocator.getMenuLinkAPI().findFolderMenuLinks(f);\n+\t\t\t\tfor (Link link : linkList) {\n+\t\t\t\t\tlinks.addOrClean(link.getIdentifier(), link.getModDate());\n+\t\t\t\t\tlinksSet.add(link.getIdentifier());\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\t// Structure dependencies\n-\t\t\tList<Structure> structureList = APILocator.getFolderAPI().getStructures(f, user, false);\n-\n-\t\t\tfor (Structure structure : structureList) {\n-\t\t\t\tstructures.addOrClean( structure.getInode(), structure.getModDate());\n-\t\t\t\tstructuresSet.add(structure.getInode());\n-\t\t\t}\n+\t\t\tif(publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\tList<Structure> structureList = APILocator.getFolderAPI()\n+\t\t\t\t\t\t.getStructures(f, user, false);\n+\t\t\t\tfor (Structure structure : structureList) {\n+\t\t\t\t\tcontentTypes.addOrClean(structure.getInode(), structure.getModDate());\n+\t\t\t\t\tcontentTypesSet.add(structure.getInode());\n+\t\t\t\t}\n \n-\t\t\t//Add the default structure of this folder\n-\t\t\tif ( f.getDefaultFileType() != null ) {\n-\t\t\t\tStructure defaultStructure = CacheLocator.getContentTypeCache().getStructureByInode( f.getDefaultFileType() );\n-\t\t\t\tif ( (defaultStructure != null && InodeUtils.isSet( defaultStructure.getInode() ))\n-\t\t\t\t\t\t&& !structuresSet.contains( defaultStructure.getInode() ) ) {\n-\t\t\t\t\tstructures.addOrClean( defaultStructure.getInode(), defaultStructure.getModDate() );\n-\t\t\t\t\tstructuresSet.add( defaultStructure.getInode() );\n+\t\t\t\t//Add the default structure of this folder\n+\t\t\t\tif (f.getDefaultFileType() != null) {\n+\t\t\t\t\tStructure defaultStructure = CacheLocator.getContentTypeCache()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 418}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQxNDcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411141473", "createdAt": "2020-05-13T17:23:27Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzoyN1rOGU76Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzoyN1rOGU76Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNjMwNw==", "bodyText": "rename to identifier", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424606307", "createdAt": "2020-05-13T17:23:27Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 462}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQxNzky", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411141792", "createdAt": "2020-05-13T17:23:51Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzo1MVrOGU77YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyMzo1MVrOGU77YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNjU2MA==", "bodyText": "rename to\nfinal Host host", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424606560", "createdAt": "2020-05-13T17:23:51Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 472}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQxOTYx", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411141961", "createdAt": "2020-05-13T17:24:04Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNDowNVrOGU774w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNDowNVrOGU774w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNjY5MQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424606691", "createdAt": "2020-05-13T17:24:05Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 479}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQyNDY4", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411142468", "createdAt": "2020-05-13T17:24:48Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNDo0OFrOGU79jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNDo0OFrOGU79jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNzExOA==", "bodyText": "Logger should use the supplier such as\nLogger.debug (this, ()->e.getMessage(), e)", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424607118", "createdAt": "2020-05-13T17:24:48Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 498}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQyODA2", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411142806", "createdAt": "2020-05-13T17:25:13Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNToxM1rOGU7-qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNToxM1rOGU7-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNzQwMA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424607400", "createdAt": "2020-05-13T17:25:13Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 513}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQzMDAz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411143003", "createdAt": "2020-05-13T17:25:28Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNToyOFrOGU7_MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNToyOFrOGU7_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNzUzNw==", "bodyText": "same Logger comment", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424607537", "createdAt": "2020-05-13T17:25:28Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 523}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQzMTcz", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411143173", "createdAt": "2020-05-13T17:25:43Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNTo0M1rOGU7_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNTo0M1rOGU7_vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwNzY3OA==", "bodyText": "use curly brackets", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424607678", "createdAt": "2020-05-13T17:25:43Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 528}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQzNzE1", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411143715", "createdAt": "2020-05-13T17:26:25Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNjoyNVrOGU8Bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNjoyNVrOGU8Bbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODExMA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424608110", "createdAt": "2020-05-13T17:26:25Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 593}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ0MTk0", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411144194", "createdAt": "2020-05-13T17:27:03Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzowM1rOGU8C8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzowM1rOGU8C8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODQ5Ng==", "bodyText": "set to final\nrename to containerList", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424608496", "createdAt": "2020-05-13T17:27:03Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 614}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ0MzMy", "url": "https://github.com/dotCMS/core/pull/18428#pullrequestreview-411144332", "createdAt": "2020-05-13T17:27:12Z", "commit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzoxMlrOGU8DYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzoxMlrOGU8DYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODYwOQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18428#discussion_r424608609", "createdAt": "2020-05-13T17:27:12Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publisher/util/DependencyManager.java", "diffHunk": "@@ -621,119 +688,155 @@ private void setHTMLPagesDependencies(Set<String> idsToWork) {\n \t\t\t\tIdentifier iden = idenAPI.find(pageId);\n \n \t\t\t\t// Host dependency\n-\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n-\t\t\t\thosts.addOrClean( iden.getHostId(), h.getModDate());\n-\t\t\t\thostsSet.add(iden.getHostId());\n-\t\t\t\tFolder folder = folderAPI.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n-\t\t\t\tfolders.addOrClean( folder.getInode(), folder.getModDate());\n-\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.SITE.getType())) {\n+\t\t\t\t\tHost h = APILocator.getHostAPI().find(iden.getHostId(), user, false);\n+\t\t\t\t\thosts.addOrClean(iden.getHostId(), h.getModDate());\n+\t\t\t\t\thostsSet.add(iden.getHostId());\n+\t\t\t\t}\n \n+\t\t\t\t// Folder dependencies\n+\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.FOLDER.getType())) {\n+\t\t\t\t\tFolder folder = folderAPI\n+\t\t\t\t\t\t\t.findFolderByPath(iden.getParentPath(), iden.getHostId(), user, false);\n+\t\t\t\t\tfolders.addOrClean(folder.getInode(), folder.getModDate());\n+\t\t\t\t\tfoldersSet.add(folder.getInode());\n+\t\t\t\t}\n \n \t\t\t\t// looking for working version (must exists)\n \t\t\t\tIHTMLPage workingPage = null;\n \n \t\t\t\tContentlet contentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tcontentlet = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +working:true\", 0, 0, \"moddate\", user, false).get(0);\n+\t\t\t\ttry {\n+\t\t\t\t\tcontentlet = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +working:true\", 0, 0, \"moddate\",\n+\t\t\t\t\t\t\t\t\tuser, false).get(0);\n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n+\t\t\t\tif (contentlet != null)\n \t\t\t\t\tworkingPage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n-\n \t\t\t\t// looking for live version (might not exists)\n \t\t\t\tIHTMLPage livePage = null;\n \n \t\t\t\tcontentlet = null;\n-\t\t\t\ttry{\n-\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI().search(\"+identifier:\"+pageId+\" +live:true\", 0, 0, \"moddate\", user, false);\n-\t\t\t\t\tif(!result.isEmpty()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tList<Contentlet> result = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.search(\"+identifier:\" + pageId + \" +live:true\", 0, 0, \"moddate\", user,\n+\t\t\t\t\t\t\t\t\tfalse);\n+\t\t\t\t\tif (!result.isEmpty()) {\n \t\t\t\t\t\tcontentlet = result.get(0);\n \t\t\t\t\t}\n \n \t\t\t\t} catch (DotContentletStateException e) {\n \t\t\t\t\t// content not found message is already displayed on console\n-\t\t\t\t\tLogger.debug(this, e.getMessage(),e);\n+\t\t\t\t\tLogger.debug(this, e.getMessage(), e);\n \t\t\t\t}\n-\t\t\t\tif(contentlet != null)\n-\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet); \n-\n+\t\t\t\tif (contentlet != null)\n+\t\t\t\t\tlivePage = APILocator.getHTMLPageAssetAPI().fromContentlet(contentlet);\n \n \t\t\t\t// working template working page\n \t\t\t\tTemplate workingTemplateWP = null;\n \t\t\t\t// live template working page\n \t\t\t\tTemplate liveTemplateWP = null;\n \n-\t\t\t\tif(workingPage!=null) {\n-\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI().findWorkingTemplate(workingPage.getTemplateId(), user, false);\n-\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI().findLiveTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\tif (workingPage != null) {\n+\t\t\t\t\tworkingTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findWorkingTemplate(workingPage.getTemplateId(), user, false);\n+\t\t\t\t\tliveTemplateWP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(workingPage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( workingPage.getTemplateId(), workingTemplateWP.getModDate());\n-\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(workingPage.getTemplateId(),\n+\t\t\t\t\t\t\t\tworkingTemplateWP.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(workingPage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t\tTemplate liveTemplateLP = null;\n \n \t\t\t\t// live template live page\n-\t\t\t\tif(livePage!=null) {\n-\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI().findLiveTemplate(livePage.getTemplateId(), user, false);\n+\t\t\t\tif (livePage != null) {\n+\t\t\t\t\tliveTemplateLP = APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.findLiveTemplate(livePage.getTemplateId(), user, false);\n \t\t\t\t\t// Templates dependencies\n-\t\t\t\t\ttemplates.addOrClean( livePage.getTemplateId(), livePage.getModDate());\n-\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.TEMPLATE.getType())) {\n+\t\t\t\t\t\ttemplates.addOrClean(livePage.getTemplateId(), livePage.getModDate());\n+\t\t\t\t\t\ttemplatesSet.add(livePage.getTemplateId());\n+\t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// Containers dependencies\n \t\t\t\tcontainerList.clear();\n \n-\t\t\t\tif(workingTemplateWP!=null && InodeUtils.isSet(workingTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(workingTemplateWP, user, false));\n+\t\t\t\tif (workingTemplateWP != null && InodeUtils.isSet(workingTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(workingTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateWP!=null && InodeUtils.isSet(liveTemplateWP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateWP, user, false));\n+\t\t\t\tif (liveTemplateWP != null && InodeUtils.isSet(liveTemplateWP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateWP, user, false));\n \t\t\t\t}\n-\t\t\t\tif(liveTemplateLP!=null && InodeUtils.isSet(liveTemplateLP.getInode())){\n-\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI().getContainersInTemplate(liveTemplateLP, user, false));\n+\t\t\t\tif (liveTemplateLP != null && InodeUtils.isSet(liveTemplateLP.getInode())) {\n+\t\t\t\t\tcontainerList.addAll(APILocator.getTemplateAPI()\n+\t\t\t\t\t\t\t.getContainersInTemplate(liveTemplateLP, user, false));\n \t\t\t\t}\n \n \t\t\t\tfor (Container container : containerList) {\n-\n-\t\t\t\t\tif (container instanceof FileAssetContainer) {\n-\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcontainers.addOrClean(container.getIdentifier(), container.getModDate());\n-\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t// Containers dependencies\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTAINER.getType())) {\n+\t\t\t\t\t\tif (container instanceof FileAssetContainer) {\n+\t\t\t\t\t\t\tfileAssetContainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tcontainers\n+\t\t\t\t\t\t\t\t\t.addOrClean(container.getIdentifier(), container.getModDate());\n+\t\t\t\t\t\t\tcontainersSet.add(container.getIdentifier());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \n \t\t\t\t\t// Structure dependencies\n-\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI().getContainerStructures(container);\n+\t\t\t\t\tif (publisherFilter.acceptExcludeDependencyClasses(PusheableAsset.CONTENT_TYPE.getType())) {\n+\t\t\t\t\t\tList<ContainerStructure> csList = APILocator.getContainerAPI()\n+\t\t\t\t\t\t\t\t.getContainerStructures(container);\n \n-\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {\n-\t\t\t\t\t\tStructure st = CacheLocator.getContentTypeCache().getStructureByInode(containerStructure.getStructureId());\n-\t\t\t\t\t\tstructures.addOrClean(containerStructure.getStructureId(), st.getModDate());\n-\t\t\t\t\t\tstructuresSet.add(containerStructure.getStructureId());\n+\t\t\t\t\t\tfor (ContainerStructure containerStructure : csList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfebf4e3a948581410f416bb5f6127fde9b1a7e"}, "originalPosition": 621}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1064, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}