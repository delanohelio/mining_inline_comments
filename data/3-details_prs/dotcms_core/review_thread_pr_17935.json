{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Nzk5OTQy", "number": 17935, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyODo1MlrODctpNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0OFrODdcJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDM0NTUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyODo1MlrOFk5k6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoxMjo1N1rOFk64BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNjM5Mg==", "bodyText": "maybe we should move this logic to its own Util, something like:\nclass GrahpQLUtil {\n    public List<String> getReservedWord(){\n         return InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES;\n   }\n}", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374236392", "createdAt": "2020-02-03T17:28:52Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java", "diffHunk": "@@ -232,8 +234,13 @@ private Field dbSaveUpdate(final Field throwAwayField) throws DotDataException {\n       }\n \n       // normalize our velocityvar\n+      final List<String> takenFieldVars = fieldsAlreadyAdded.stream().map(Field::variable).collect(\n+              Collectors.toList());\n+      // let's add GraphQL reserved field names to the taken fields vars list\n+      takenFieldVars.addAll(InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NzY2OA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374257668", "createdAt": "2020-02-03T18:12:57Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java", "diffHunk": "@@ -232,8 +234,13 @@ private Field dbSaveUpdate(final Field throwAwayField) throws DotDataException {\n       }\n \n       // normalize our velocityvar\n+      final List<String> takenFieldVars = fieldsAlreadyAdded.stream().map(Field::variable).collect(\n+              Collectors.toList());\n+      // let's add GraphQL reserved field names to the taken fields vars list\n+      takenFieldVars.addAll(InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNjM5Mg=="}, "originalCommit": {"oid": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDM1MjA5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzozMDo0NVrOFk5o4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzo0MzozNVrOFk6BWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNzQxMA==", "bodyText": "doc, why are you changing this method signature?, if the List is a list with the Field's id (or some other field attribute) I think is better keep the List of Fied and into the method get the field's id", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374237410", "createdAt": "2020-02-03T17:30:45Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java", "diffHunk": "@@ -51,7 +51,7 @@ default FieldFactory instance() {\n     List<Field> selectByContentTypeInDb(String id) throws DotDataException;\n \n \n-    String suggestVelocityVar(String tryVar, List<Field> takenFields) throws DotDataException;\n+    String suggestVelocityVar(String tryVar, List<String> takenFields) throws DotDataException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI0MzY3Mw==", "bodyText": "The only thing we used from Field was its varname", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r374243673", "createdAt": "2020-02-03T17:43:35Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactory.java", "diffHunk": "@@ -51,7 +51,7 @@ default FieldFactory instance() {\n     List<Field> selectByContentTypeInDb(String id) throws DotDataException;\n \n \n-    String suggestVelocityVar(String tryVar, List<Field> takenFields) throws DotDataException;\n+    String suggestVelocityVar(String tryVar, List<String> takenFields) throws DotDataException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzNzQxMA=="}, "originalCommit": {"oid": "d5f9f7d963db3c526db9c40411e2ef15d3fb3636"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0MVrOFmC4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0MVrOFmC4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM1MQ==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.graphql.InterfaceType'", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437351", "createdAt": "2020-02-05T18:42:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -23,6 +23,8 @@\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.datagen.ContentTypeDataGen;\n import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.graphql.InterfaceType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NDg5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0M1rOFmC4MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0M1rOFmC4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM2MQ==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437361", "createdAt": "2020-02-05T18:42:43Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NDkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0NFrOFmC4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0NFrOFmC4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM2Nw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertNotNull' due to existing static import 'org.junit.Assert.assertNotNull'", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437367", "createdAt": "2020-02-05T18:42:44Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n+            Assert.assertNotEquals(fieldName, field1.variable());\n+\n+            // let's create a new field to make sure it's getting a new variable\n+\n+            Field field2 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field2 = fieldAPI.save(field2, user);\n+\n+            Assert.assertNotNull(field2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NDk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0NVrOFmC4QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0NVrOFmC4QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM3Nw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertNotNull' due to existing static import 'org.junit.Assert.assertNotNull'", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437377", "createdAt": "2020-02-05T18:42:45Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NTA3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/GraphQLUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0N1rOFmC4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0N1rOFmC4Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzM5MQ==", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437391", "createdAt": "2020-02-05T18:42:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/GraphQLUtil.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.dotcms.graphql.util;\n+\n+import com.dotcms.graphql.InterfaceType;\n+import java.util.Set;\n+\n+public class GraphQLUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk2NTE0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0OFrOFmC4XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0Mjo0OFrOFmC4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNzQwNA==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertTrue' due to existing static import 'org.junit.Assert.assertTrue'", "url": "https://github.com/dotCMS/core/pull/17935#discussion_r375437404", "createdAt": "2020-02-05T18:42:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1035,13 +1037,64 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n             fieldAPI.save(variable, user);\n \n             boolean anyMatch = field.fieldVariables().stream()\n-                  .anyMatch((var)->var.key().equals(fieldVarKey));\n+                    .anyMatch((var)->var.key().equals(fieldVarKey));\n \n             Assert.assertTrue(\"Incorrect var key\", anyMatch);\n         } finally {\n             contentTypeAPI.delete(type);\n         }\n     }\n \n+    @DataProvider\n+    public static Object[] dataProviderGraphQLReservedNames() {\n+        return GraphQLUtil.getFieldReservedWords().toArray();\n+    }\n+\n+    @Test\n+    @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n+    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n+            final String fieldName)\n+            throws DotSecurityException, DotDataException {\n+\n+        final ContentType type = new ContentTypeDataGen().nextPersisted();\n+        try {\n+            Field field1 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field1 = fieldAPI.save(field1, user);\n+\n+            Assert.assertNotNull(field1);\n+            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n+            Assert.assertNotEquals(fieldName, field1.variable());\n+\n+            // let's create a new field to make sure it's getting a new variable\n+\n+            Field field2 = FieldBuilder.builder(TextField.class)\n+                    .name(fieldName)\n+                    .contentTypeId(type.id())\n+                    .indexed(false)\n+                    .listed(false)\n+                    .fixed(true)\n+                    .build();\n+            field2 = fieldAPI.save(field2, user);\n+\n+            Assert.assertNotNull(field2);\n+            Assert.assertTrue(UtilMethods.isSet(field2.variable()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a017151116403a80824cad4f30ca2fd2c207bf7"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2531, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}