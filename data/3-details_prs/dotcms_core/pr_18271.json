{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTQ2ODM1", "number": 18271, "title": "#18021 added a logic to handle DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE on\u2026", "bodyText": "Previously the content recovered on the page render was not taking the language id.\nNow it is just recovering by language id, set. However DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE can. be activate in order to have a mix of languages.\nBy default spanish version of the page (for instance) only shows spanish content", "createdAt": "2020-04-06T22:56:34Z", "url": "https://github.com/dotCMS/core/pull/18271", "merged": true, "mergeCommit": {"oid": "ac2da777b61b12b08d5444f6709870e0cc754078"}, "closed": true, "closedAt": "2020-04-17T20:16:04Z", "author": {"login": "jdotcms"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVGzcpgH2gAyMzk5OTQ2ODM1OmM3ZjYwNTc1YTVjYzBiNzUxYTNjMWQyYjkzYjM1N2NjOWQzMTE4MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYNfQLAFqTM5NDY4MTAwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c7f60575a5cc0b751a3c1d2b93b357cc9d31180d", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/c7f60575a5cc0b751a3c1d2b93b357cc9d31180d", "committedDate": "2020-04-06T22:54:07Z", "message": "#18021 added a logic to handle DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE on the container content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b", "committedDate": "2020-04-07T06:14:28Z", "message": "#18021 fixing unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTcwMzQw", "url": "https://github.com/dotCMS/core/pull/18271#pullrequestreview-389170340", "createdAt": "2020-04-07T14:25:47Z", "commit": {"oid": "d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyNTo0N1rOGCGKVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDoyNzo1MVrOGCGQ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1MTI4Ng==", "bodyText": "really this set is not doing nothing because the next line is setting this same property to false", "url": "https://github.com/dotCMS/core/pull/18271#discussion_r404851286", "createdAt": "2020-04-07T14:25:47Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -340,6 +340,7 @@ public static void restore() throws Exception{\n     public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3(\n             final Container container, final Template template) throws Exception{\n \n+        Config.setProperty(\"DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg1Mjk2Ng==", "bodyText": "we are missing test for this change", "url": "https://github.com/dotCMS/core/pull/18271#discussion_r404852966", "createdAt": "2020-04-07T14:27:51Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1390,4 +1392,4 @@ private static void addAnonymousPermissions(final Contentlet contentlet)\n                 contentlet, APILocator.systemUser(), false);\n     }\n \n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDI3OTY0", "url": "https://github.com/dotCMS/core/pull/18271#pullrequestreview-390027964", "createdAt": "2020-04-08T14:27:30Z", "commit": {"oid": "d98e54e4fc5d68acbfbbd9b52c8c60600e414a4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fec27b8ca2788374a1800df7e2c505a6edf260b", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/4fec27b8ca2788374a1800df7e2c505a6edf260b", "committedDate": "2020-04-08T21:33:51Z", "message": "#18021 fixing the language when requesting a page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c66e0a8e8d173e91aa7f1d1fe1f89e55044dfc", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/e4c66e0a8e8d173e91aa7f1d1fe1f89e55044dfc", "committedDate": "2020-04-09T20:37:55Z", "message": "#now the contentlets when is edit or preview mode, are be taken from a diff variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54de04928743ee45f0f4f400aa3a76aa8f346de2", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/54de04928743ee45f0f4f400aa3a76aa8f346de2", "committedDate": "2020-04-13T23:41:34Z", "message": "#18021 changes to avoid deleting contentlets on diff languages when another a content to the multi tree in another lang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea6e8ef7c48451b2926783bc3af814fda9e75b6", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/eea6e8ef7c48451b2926783bc3af814fda9e75b6", "committedDate": "2020-04-14T06:01:16Z", "message": "#adding the max content logic to the page render util instead of the multitree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4a787592fe56b195b9f0bc4f35caaf02e1d139", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/ac4a787592fe56b195b9f0bc4f35caaf02e1d139", "committedDate": "2020-04-14T07:12:09Z", "message": "#18021 fix for personalization per language"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c155ae35d5531de8a5859b85ed9dcc2e525899", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/19c155ae35d5531de8a5859b85ed9dcc2e525899", "committedDate": "2020-04-14T21:39:34Z", "message": "#18021 fixing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1580bc49ddf25de5779590f13ae574605694758d", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/1580bc49ddf25de5779590f13ae574605694758d", "committedDate": "2020-04-15T07:28:34Z", "message": "#18021 unit test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079342030801ca84d843c9145abcda05e2e69b5a", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/079342030801ca84d843c9145abcda05e2e69b5a", "committedDate": "2020-04-15T07:30:22Z", "message": "#18021 unit test fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjgxMDAz", "url": "https://github.com/dotCMS/core/pull/18271#pullrequestreview-394681003", "createdAt": "2020-04-16T14:19:29Z", "commit": {"oid": "079342030801ca84d843c9145abcda05e2e69b5a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoxOTozMFrOGGnq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyMToxNlrOGGnwIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NDYwOA==", "bodyText": "I think this case just could happend if the user change the Max Contentlet to a number less than the contentlets currently added, maybe in this case we should sent a message to the user (if the user is a backend user)", "url": "https://github.com/dotCMS/core/pull/18271#discussion_r409594608", "createdAt": "2020-04-16T14:19:30Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -228,143 +230,192 @@ private Container getWorkingContainerById(final String containerIdOrPath, final\n \n         final WorkingContainerFinderByIdOrPathStrategyResolver strategyResolver =\n                 WorkingContainerFinderByIdOrPathStrategyResolver.getInstance();\n-        final Optional<ContainerFinderByIdOrPathStrategy> strategy           = strategyResolver.get(containerIdOrPath);\n+        final Optional<ContainerFinderByIdOrPathStrategy> strategy = strategyResolver.get(containerIdOrPath);\n \n         return this.geContainerById(containerIdOrPath, user, template, strategy, strategyResolver.getDefaultStrategy());\n     }\n \n     private Container geContainerById(final String containerIdOrPath, final User user, final Template template,\n                                       final Optional<ContainerFinderByIdOrPathStrategy> strategy,\n-                                      final ContainerFinderByIdOrPathStrategy defaultContainerFinderByIdOrPathStrategy) throws NotFoundInDbException  {\n+                                      final ContainerFinderByIdOrPathStrategy defaultContainerFinderByIdOrPathStrategy) throws NotFoundInDbException {\n \n-        final Supplier<Host> resourceHostSupplier                            =  Sneaky.sneaked(()->APILocator.getTemplateAPI().getTemplateHost(template));\n+        final Supplier<Host> resourceHostSupplier = Sneaky.sneaked(() -> APILocator.getTemplateAPI().getTemplateHost(template));\n \n-        return strategy.isPresent()?\n-                strategy.get().apply(containerIdOrPath, user, false, resourceHostSupplier):\n+        return strategy.isPresent() ?\n+                strategy.get().apply(containerIdOrPath, user, false, resourceHostSupplier) :\n                 defaultContainerFinderByIdOrPathStrategy.apply(containerIdOrPath, user, false, resourceHostSupplier);\n     }\n \n     private List<ContainerRaw> populateContainers() throws DotDataException, DotSecurityException {\n \n         final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\n-        final boolean live =\n-                request != null && request.getSession(false) != null && request.getSession().getAttribute(\"tm_date\") != null ?\n-                        false :\n-                        mode.showLive;\n+        final boolean live               = this.isLive(request);\n         final Table<String, String, Set<PersonalizedContentlet>> pageContents = this.multiTreeAPI.getPageMultiTrees(htmlPage, live);\n         final Set<String> personalizationsForPage = this.multiTreeAPI.getPersonalizationsForPage(htmlPage);\n-        final List<ContainerRaw> raws = Lists.newArrayList();\n+        final List<ContainerRaw> raws  = Lists.newArrayList();\n         final String includeContentFor = this.getPersonaTagToIncludeContent(request, personalizationsForPage);\n \n         for (final String containerId : pageContents.rowKeySet()) {\n \n-            Container container = null;\n-            final WorkingContainerFinderByIdOrPathStrategyResolver strategyResolver =\n-                    WorkingContainerFinderByIdOrPathStrategyResolver.getInstance();\n-            final Optional<ContainerFinderByIdOrPathStrategy> strategy = strategyResolver.get(containerId);\n-            final ContainerFinderByIdOrPathStrategy workingStrategy    = strategy.isPresent()?strategy.get():strategyResolver.getDefaultStrategy();\n-            final Supplier<Host>                  resourceHostSupplier = ()-> this.site;\n-\n-            try {\n-                if (live) {\n-\n-                    container = this.getLiveContainerById(containerId);\n-                    if (null == container) {\n-                        container = workingStrategy.apply(containerId, APILocator.systemUser(), false, resourceHostSupplier);\n-                    }\n-                } else {\n-                    container = workingStrategy.apply(containerId, APILocator.systemUser(), false, resourceHostSupplier);\n-                }\n-            } catch (NotFoundInDbException | DotRuntimeException e) {\n-\n-                new ContainerExceptionNotifier(e, containerId).notifyUser();\n-                container = null;\n-            }\n+            final Container container = this.getContainer(live, containerId);\n \n             if (container == null) {\n                 continue;\n             }\n-            \n+\n             final List<ContainerStructure> containerStructures = APILocator.getContainerAPI().getContainerStructures(container);\n-            final boolean hasWritePermissionOnContainer = permissionAPI.doesUserHavePermission(container, PERMISSION_WRITE, user, false)\n-                    && APILocator.getPortletAPI().hasContainerManagerRights(user);\n-            final boolean hasReadPermissionOnContainer = permissionAPI.doesUserHavePermission(container, PERMISSION_READ, user, false);\n-            contextMap.put(\"EDIT_CONTAINER_PERMISSION\" + container.getIdentifier(), hasWritePermissionOnContainer);\n-            if (Config.getBooleanProperty(\"SIMPLE_PAGE_CONTENT_PERMISSIONING\", true)) {\n-                contextMap.put(\"USE_CONTAINER_PERMISSION\" + container.getIdentifier(), true);\n-            } else {\n-                contextMap.put(\"USE_CONTAINER_PERMISSION\" + container.getIdentifier(), hasReadPermissionOnContainer);\n-            }\n+            this.addPermissions(container);\n \n-            final Map<String, List<Map<String,Object>>> contentMaps = Maps.newLinkedHashMap();\n-            final Map<String, List<String>> containerUuidPersona = Maps.newHashMap();\n+            final Map<String, List<Map<String, Object>>> contentMaps = Maps.newLinkedHashMap();\n+            final Map<String, List<String>> containerUuidPersona     = Maps.newHashMap();\n             for (final String uniqueId : pageContents.row(containerId).keySet()) {\n \n                 final String uniqueUUIDForRender = needParseContainerPrefix(container, uniqueId) ?\n-                                ParseContainer.getDotParserContainerUUID(uniqueId) :\n-                                uniqueId;\n+                        ParseContainer.getDotParserContainerUUID(uniqueId) : uniqueId;\n \n-                if(ContainerUUID.UUID_DEFAULT_VALUE.equals(uniqueId)) {\n+                if (ContainerUUID.UUID_DEFAULT_VALUE.equals(uniqueId)) {\n                     continue;\n                 }\n \n                 final Collection<PersonalizedContentlet> personalizedContentletSet = pageContents.get(containerId, uniqueId);\n-                final List<Map<String, Object>> personalizedContentletMap = Lists.newArrayList();\n+                final List<Map<String, Object>> personalizedContentletMap          = Lists.newArrayList();\n+                int   contentletIncludedCount = 1;\n+                for (final PersonalizedContentlet personalizedContentlet : personalizedContentletSet) {\n \n-                for (final PersonalizedContentlet  personalizedContentlet : personalizedContentletSet) {\n-                    final Contentlet contentlet = getContentlet(personalizedContentlet);\n+                    final Contentlet contentlet = this.getContentlet(personalizedContentlet);\n \n                     if (contentlet == null) {\n+\n+                        continue;\n+                    }\n+\n+                    if (container.getMaxContentlets() < contentletIncludedCount) {\n+\n+                        Logger.debug(this, ()-> \"Contentlet: \"          + contentlet.getIdentifier()\n+                                + \", has been skipped. Max contentlet: \"    + container.getMaxContentlets()\n+                                + \", has been overcome for the container: \" + containerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079342030801ca84d843c9145abcda05e2e69b5a"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NTkzNg==", "bodyText": "we should split this class it have a lot of  responsabilities", "url": "https://github.com/dotCMS/core/pull/18271#discussion_r409595936", "createdAt": "2020-04-16T14:21:16Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -20,6 +20,7 @@\n import com.dotmarketing.business.APILocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079342030801ca84d843c9145abcda05e2e69b5a"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1254, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}