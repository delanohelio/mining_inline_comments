{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjM1NTc0", "number": 18976, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjo1MFrOEScRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MlrOEd1UNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzcyOTc3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjo1MFrOG3n6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjo1MFrOG3n6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3ODg4MQ==", "bodyText": "you can throw DoesNotExistException, in order to translate this to 404", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460978881", "createdAt": "2020-07-27T15:32:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzczNDMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMzo1N1rOG3n9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjo1NFrOG3oFzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3OTY0OQ==", "bodyText": "you can use the InitBuilder", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460979649", "createdAt": "2020-07-27T15:33:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTcwOA==", "bodyText": "I am using the same code that is in the method loadFolderByURI above this one.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460981708", "createdAt": "2020-07-27T15:36:54Z", "author": {"login": "luisbacca"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3OTY0OQ=="}, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0MTMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNToyNlrOG3oB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0MTo1OFrOG3oSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDcwOA==", "bodyText": "you do not need to catch anything here, jersey will take care for you", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980708", "createdAt": "2020-07-27T15:35:26Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NTAzMg==", "bodyText": "I am using the same code that is in the method loadFolderByURI above this one.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460985032", "createdAt": "2020-07-27T15:41:58Z", "author": {"login": "luisbacca"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDcwOA=="}, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0MjIyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0MVrOG3oCcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0MVrOG3oCcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDg1MQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980851", "createdAt": "2020-07-27T15:35:41Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0MjU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0NlrOG3oCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0NlrOG3oCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDkxNQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980915", "createdAt": "2020-07-27T15:35:46Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0MzgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjowMVrOG3oDeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjowMVrOG3oDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTExMw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460981113", "createdAt": "2020-07-27T15:36:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0NjQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjozOVrOG3oFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjozOVrOG3oFEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTUyMA==", "bodyText": "Probably log it", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460981520", "createdAt": "2020-07-27T15:36:39Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            exception.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc1MTM3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNzo1M1rOG3oILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxNToyOFrOG3uAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjMxOA==", "bodyText": "I might be wrong, but shouldn't this be something like: /site/${siteName}/folder/{folder : .+}", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460982318", "createdAt": "2020-07-27T15:37:53Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4ODI5Mg==", "bodyText": "I agree but I tried to keep the same parameter name than we had in a previous endpoint.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460988292", "createdAt": "2020-07-27T15:46:55Z", "author": {"login": "luisbacca"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjMxOA=="}, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3ODczMg==", "bodyText": "ok nvm", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r461078732", "createdAt": "2020-07-27T18:15:28Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjMxOA=="}, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc1MzYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozODoyNlrOG3oJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozODoyNlrOG3oJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjY1Nw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460982657", "createdAt": "2020-07-27T15:38:26Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc3ODY2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NDozNVrOG3oZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjoyNToyOFrOG3qBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NjcxNQ==", "bodyText": "this could be an immutable", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460986715", "createdAt": "2020-07-27T15:44:35Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            exception.printStackTrace();\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {\n+\n+        private String path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAxMzM3MQ==", "bodyText": "yeah. set everything to final. remove all the setters so you can only make an unmodifiable instance once.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r461013371", "createdAt": "2020-07-27T16:25:28Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            exception.printStackTrace();\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {\n+\n+        private String path;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NjcxNQ=="}, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzg2MTI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMzo0OFrOG3pMJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowNTo0NFrOG3pQsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTcxNw==", "bodyText": "I would extract this class to another file", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460999717", "createdAt": "2020-07-27T16:03:48Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +117,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            final Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            final Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new DoesNotExistException(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private final CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(final Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            Logger.error(this, \"Error copying properties\");\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDgwNA==", "bodyText": "agree a view", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r461000804", "createdAt": "2020-07-27T16:05:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +117,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            final Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            final Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new DoesNotExistException(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private final CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(final Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            Logger.error(this, \"Error copying properties\");\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTcxNw=="}, "originalCommit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTAwMDg4MA==", "bodyText": "I totally agree. I did it here because I am know sure what package should I use for this kind of class. What package do you suggest to use ?", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r461000880", "createdAt": "2020-07-27T16:05:44Z", "author": {"login": "luisbacca"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +117,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            final Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            final Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new DoesNotExistException(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private final CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(final Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            Logger.error(this, \"Error copying properties\");\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTcxNw=="}, "originalCommit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/folder/FolderResourceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNFrOHJO6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNFrOHJO6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUyMQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443521", "createdAt": "2020-08-28T17:32:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/folder/FolderResourceTest.java", "diffHunk": "@@ -132,11 +135,211 @@ public void test_createFolders_siteNameNotExists_return400() throws DotDataExcep\n     @Test (expected = InvalidFolderNameException.class)\n     public void test_createFolders_restrictedFolderName_return400() throws DotDataException, DotSecurityException {\n         final Host newHost = new SiteDataGen().nextPersisted();\n-        final User adminUser = TestUserUtils.getAdminUser();\n         final List<String> foldersToCreate = Arrays.asList(\"dotcms\");\n \n         resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n \n     }\n \n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user\n+     * ExpectedResult: All the folders/subfolders of the requested folder path, 200 code.\n+     *\n+     */\n+    @Test\n+    public void test_loadFolderAndSubFoldersByPath_Admin_success() throws DotDataException, DotSecurityException {\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        responseResource = resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,newHost.getIdentifier(),\"test_\"+currentTime);\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Check Results\n+        final ResponseEntityView responseEntityView = ResponseEntityView.class.cast(responseResource.getEntity());\n+        final FolderView responseFolderView = FolderView.class.cast(responseEntityView.getEntity());\n+        Assert.assertNotNull(\"Title is null\",responseFolderView.getTitle());\n+        Assert.assertEquals(\"Title is not the same as the one requested\",responseFolderView.getTitle(),\"test_\"+currentTime);\n+        Assert.assertEquals(\"There is more than one subfolder\",1,responseFolderView.getSubFolders().size());\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user, but the hostId sent is not valid\n+     * ExpectedResult: The endpoint should return IllegalArgumentException that jersey will map to a 400 code\n+     *\n+     */\n+    @Test (expected = IllegalArgumentException.class)\n+    public void test_loadFolderAndSubFoldersByPath_Admin_InvalidHostId_return400() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,\n+                UUIDGenerator.uuid(),\"test_\"+currentTime);\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user, but the path sent is not valid\n+     * ExpectedResult: The endpoint should return IllegalArgumentException that jersey will map to a 400 code\n+     *\n+     */\n+    @Test (expected = IllegalArgumentException.class)\n+    public void test_loadFolderAndSubFoldersByPath_Admin_InvalidPath_return400() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,\n+                newHost.getIdentifier(),\"folderpathnotexist\");\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders using the admin user, try to get the created Folders/subFolders\n+     *                  using a limited user with no permissions over the requested folder.\n+     * ExpectedResult: The endpoint should return DotSecurityException that jersey will map to a 403 code\n+     *\n+     */\n+    @Test (expected = DotSecurityException.class)\n+    public void test_loadFolderAndSubFoldersByPath_UserNoPermissionsOverFolder_return403() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Give Permissions Over the Host\n+        final Permission permissions = new Permission(PermissionAPI.INDIVIDUAL_PERMISSION_TYPE,\n+                newHost.getPermissionId(),\n+                TestUserUtils.getOrCreatePublisherRole(newHost).getId(),\n+                (PermissionAPI.PERMISSION_READ | PermissionAPI.PERMISSION_WRITE | PermissionAPI.PERMISSION_CAN_ADD_CHILDREN | PermissionAPI.PERMISSION_EDIT_PERMISSIONS), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjUzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNVrOHJO6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNVrOHJO6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUzMA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.UUIDGenerator'", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443530", "createdAt": "2020-08-28T17:32:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -45,6 +49,7 @@\n import com.dotmarketing.portlets.templates.business.TemplateAPI;\n import com.dotmarketing.portlets.templates.model.Template;\n import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.UUIDGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNlrOHJO6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNlrOHJO6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUzOQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443539", "createdAt": "2020-08-28T17:32:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+        if(!UtilMethods.isSet(host)) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any host with id `%s` \",hostId));\n+        }\n+        if(!UtilMethods.isSet(folderByPath) || !UtilMethods.isSet(folderByPath.getInode())) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any folder with name `%s` in the host `%s`\",folder,hostId));\n+        }\n+\n+        return getFolders(folderByPath,user);\n+    }\n+\n+    /**\n+     * This method returns a folder structure with their children recursively based on\n+     * the folder returned by findFolderByPath\n+     *\n+     * @param folder  parent folder to  find\n+     * @param user user\n+     * @return FolderView a folder structure with their children recursively\n+     */\n+    private final FolderView getFolders(final Folder folder, final User user){\n+\n+        final List<FolderView> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozN1rOHJO6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozN1rOHJO6WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU0NQ==", "bodyText": "Codacy found an issue: The String literal \"/folder\" appears 6 times in this file; the first occurrence is on line 834", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443545", "createdAt": "2020-08-28T17:32:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -844,15 +832,31 @@ public void testFindSubFolders() throws DotDataException, DotSecurityException {\n \n \t@Test\n \tpublic void testFindSubFoldersByHost() throws DotDataException, DotSecurityException {\n-\t\tfinal List<Folder> folders = folderAPI.findSubFolders(host, false);\n+\t\tfinal Host newHost = new SiteDataGen().nextPersisted();\n+\t\tfinal String folderPath = \"/folder\"+System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOFrOHJO6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOFrOHJO6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU1MQ==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443551", "createdAt": "2020-08-28T17:32:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOVrOHJO6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOVrOHJO6aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU2MQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.datagen.TestUserUtils'", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443561", "createdAt": "2020-08-28T17:32:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -9,14 +9,18 @@\n import com.dotcms.datagen.SiteDataGen;\n import com.dotcms.datagen.TemplateDataGen;\n import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3Njc1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MFrOHJO6cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MFrOHJO6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU3MQ==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on method 'getFolders': private methods cannot be overridden", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443571", "createdAt": "2020-08-28T17:32:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+        if(!UtilMethods.isSet(host)) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any host with id `%s` \",hostId));\n+        }\n+        if(!UtilMethods.isSet(folderByPath) || !UtilMethods.isSet(folderByPath.getInode())) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any folder with name `%s` in the host `%s`\",folder,hostId));\n+        }\n+\n+        return getFolders(folderByPath,user);\n+    }\n+\n+    /**\n+     * This method returns a folder structure with their children recursively based on\n+     * the folder returned by findFolderByPath\n+     *\n+     * @param folder  parent folder to  find\n+     * @param user user\n+     * @return FolderView a folder structure with their children recursively\n+     */\n+    private final FolderView getFolders(final Folder folder, final User user){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3NjgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/folders/business/FolderAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MVrOHJO6gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MVrOHJO6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU4NA==", "bodyText": "Codacy found an issue: The String literal \"User \" appears 33 times in this file; the first occurrence is on line 110", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443584", "createdAt": "2020-08-28T17:32:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/folders/business/FolderAPIImpl.java", "diffHunk": "@@ -84,38 +84,38 @@\n \tprivate final ContentletAPI contentletAPI = APILocator.getContentletAPI();\n \n \t/**\n-\t * Will get a folder for you on a given path for a particular host\n+\t * Will get a folder on a given path for a particular host.\n \t *\n-\t * @param path\n-\t * @param hostId\n-\t * @return\n-\t * @throws DotHibernateException\n+\t * If the folder does not exists will return a folder with null values.\n+\t * If the user does not have permissions over the folder a DotSecurityException will be thrown.\n+\t *\n+\t * @param path path of the requested folder\n+\t * @param host host where the folder should live\n+\t * @return the requested folder if the user has permissions, if not an exception.\n+\t * @throws DotSecurityException\n \t */\n+\n \tprivate final FolderFactory folderFactory = FactoryLocator.getFolderFactory();\n \tprivate final PermissionAPI permissionAPI = getPermissionAPI();\n \n \t@CloseDBIfOpened\n \tpublic Folder findFolderByPath(final String path, final Host host,\n-\t\t\t\t\t\t\t\t   final User user, final boolean respectFrontEndPermissions) throws DotStateException,\n+\t\t\tfinal User user, final boolean respectFrontEndPermissions) throws DotStateException,\n \t\t\tDotDataException, DotSecurityException {\n-\n \t\tfinal Folder folder = folderFactory.findFolderByPath(path, host);\n+\t\tif (folder == null || UtilMethods.isEmpty(folder.getInode()) ||\n+\t\t\t\tpermissionAPI.doesUserHavePermission(folder, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)){\n+\t\t\treturn folder;\n+\t\t}\n \n-\t\tif (folder != null && InodeUtils.isSet(folder.getInode()) &&\n-\t\t\t\t!permissionAPI.doesUserHavePermission(folder, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)) {\n-\n-\t\t\t// SYSTEM_FOLDER means if the user has permissions to the host, then they can see host.com/\n-\t\t\tif(FolderAPI.SYSTEM_FOLDER.equals(folder.getInode())) {\n-\t\t\t\tif(!Host.SYSTEM_HOST.equals(host.getIdentifier())){\n-\t\t\t\t\tif(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)) {\n-\t\t\t\t\t\tthrow new DotSecurityException(\"User \" + (user.getUserId() != null ? user.getUserId() : BLANK) + \" does not have permission to read folder \" + folder.getPath());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n+\t\tif(FolderAPI.SYSTEM_FOLDER.equals(folder.getInode()) &&\n+\t\t\t\t(permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions) || host.isSystemHost())){\n+\t\t\t\t\treturn findSystemFolder();\n \t\t}\n \n-\t\treturn folder;\n+\t\tfinal String errorMsg = \"User \" + (user.getUserId() != null ? user.getUserId() : BLANK) + \" does not have permission to read folder \" + folder.getPath()+ \" on host \" + host.getHostname();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NzE3Njg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MlrOHJO6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MlrOHJO6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU5MQ==", "bodyText": "Codacy found an issue: The String literal \"folder's owner\" appears 6 times in this file; the first occurrence is on line 837", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443591", "createdAt": "2020-08-28T17:32:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -844,15 +832,31 @@ public void testFindSubFolders() throws DotDataException, DotSecurityException {\n \n \t@Test\n \tpublic void testFindSubFoldersByHost() throws DotDataException, DotSecurityException {\n-\t\tfinal List<Folder> folders = folderAPI.findSubFolders(host, false);\n+\t\tfinal Host newHost = new SiteDataGen().nextPersisted();\n+\t\tfinal String folderPath = \"/folder\"+System.currentTimeMillis();\n+\n+\t\tfinal Folder folder = folderAPI.createFolders(folderPath, newHost, user, false);\n+\t\tfolder.setOwner(\"folder's owner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1929, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}