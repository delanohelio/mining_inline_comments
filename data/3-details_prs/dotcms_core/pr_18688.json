{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTk3Mjk3", "number": 18688, "title": "Issue 17842 show notification if es is read only missing cases", "bodyText": "", "createdAt": "2020-06-17T17:34:29Z", "url": "https://github.com/dotCMS/core/pull/18688", "merged": true, "mergeCommit": {"oid": "4b32284db0ea826ef6cff4e6afe857593635f1a8"}, "closed": true, "closedAt": "2020-06-18T15:40:16Z", "author": {"login": "freddyucv"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr2lVsgH2gAyNDM1OTk3Mjk3OmM4MDFjMDFiMjM2NWMwMjlkMjUwNjE4OTcxMmU4YmE2NzRiYTk1OWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsTw1OgFqTQzMjg3MTUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c801c01b2365c029d2506189712e8ba674ba959b", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/c801c01b2365c029d2506189712e8ba674ba959b", "committedDate": "2020-06-16T15:00:29Z", "message": "#17842 Case when the disk space was full and try to put the read only to false"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42a7d20050a868e56eaa4508b347992003b8253e", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/42a7d20050a868e56eaa4508b347992003b8253e", "committedDate": "2020-06-16T15:07:48Z", "message": "#17842 Not ignoring test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68fa6828f955c560f379f0eb633f2d0f3c0135e", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/a68fa6828f955c560f379f0eb633f2d0f3c0135e", "committedDate": "2020-06-16T18:12:17Z", "message": "#17842 Fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/f58a8b56937d47b512e00711721b72ffd004bcb8", "committedDate": "2020-06-17T14:24:36Z", "message": "#16976 refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjI5ODgz", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432629883", "createdAt": "2020-06-17T17:41:22Z", "commit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MToyMlrOGlQTDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MToyMlrOGlQTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNzUxOQ==", "bodyText": "incorrect method to test", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441717519", "createdAt": "2020-06-17T17:41:22Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjMwMDU3", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432630057", "createdAt": "2020-06-17T17:41:36Z", "commit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MTozNlrOGlQTlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MTozNlrOGlQTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNzY1NA==", "bodyText": "incorrect method to test", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441717654", "createdAt": "2020-06-17T17:41:36Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjMwOTM2", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432630936", "createdAt": "2020-06-17T17:42:47Z", "commit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0Mjo0N1rOGlQWRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0Mjo0N1rOGlQWRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxODM0Mg==", "bodyText": "here should be \"default value\" instead of \"seconds\"", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441718342", "createdAt": "2020-06-17T17:42:47Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjMxMTM0", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432631134", "createdAt": "2020-06-17T17:43:03Z", "commit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MzowM1rOGlQW4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo0MzowM1rOGlQW4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxODQ5OQ==", "bodyText": "here should be \"seconds\" instead of \"default value\"", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441718499", "createdAt": "2020-06-17T17:43:03Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ElasticsearchUtilTest.java", "diffHunk": "@@ -257,6 +259,51 @@ public void shouldReturnFalseWhenTheClusterIsInReadOnlyMode(final String propert\n         }\n     }\n \n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in minutes\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInMinutes(){\n+        try {\n+            setClusterUpdateInterval(\"2m\");\n+            final long millisExpected = Duration.ofMinutes(2).toMillis();\n+            assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+        }finally {\n+            setClusterUpdateInterval(\"30s\");\n+        }\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in seconds\n+     * Should: return the right valus in millis\n+     */\n+    @Test\n+    public void whenIntervalUpdateIsSetInDefaultValue(){\n+        setClusterUpdateInterval(null);\n+        final long millisExpected = Duration.ofSeconds(30).toMillis();\n+        assertEquals(millisExpected, ElasticsearchUtil.getClusterUpdateInterval());\n+    }\n+\n+    /**\n+     * Method to Test: {@link ElasticsearchUtil#isClusterInReadOnlyMode()}\n+     * When: The cluster is set in the default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58a8b56937d47b512e00711721b72ffd004bcb8"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92ff7919efd810498cda63d53590ba758c36b29", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/e92ff7919efd810498cda63d53590ba758c36b29", "committedDate": "2020-06-17T17:58:50Z", "message": "#17842  doc and refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjYxNzQy", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432661742", "createdAt": "2020-06-17T18:23:22Z", "commit": {"oid": "e92ff7919efd810498cda63d53590ba758c36b29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMzoyM1rOGlRyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMzoyM1rOGlRyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTkxNg==", "bodyText": "remove this comment", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441741916", "createdAt": "2020-06-17T18:23:23Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESReadOnlyMonitorTest.java", "diffHunk": "@@ -209,8 +213,49 @@ public void shouldSendLargeMessageTwice(final String propertyName) throws DotDat\n \n             setReadOnly(indiciesInfo.getWorking(), propertyName, true);\n \n+            Thread.sleep(ESReadOnlyMonitor.getInstance().timeToWaitAfterWriteModeSet + TimeUnit.MINUTES.toMillis(1));\n+            //checkLargeMessageSent(user, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92ff7919efd810498cda63d53590ba758c36b29"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjY0NjIy", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432664622", "createdAt": "2020-06-17T18:27:28Z", "commit": {"oid": "e92ff7919efd810498cda63d53590ba758c36b29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjY2NjI1", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432666625", "createdAt": "2020-06-17T18:30:12Z", "commit": {"oid": "e92ff7919efd810498cda63d53590ba758c36b29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e156a55a9b41061bef5ace3f2e7e13a7e3d052", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/99e156a55a9b41061bef5ace3f2e7e13a7e3d052", "committedDate": "2020-06-17T20:01:42Z", "message": "#17842 Not sending request to early to ES server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b0d1d1b7ae157fc3dd711e25163dd2052f5719", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/b9b0d1d1b7ae157fc3dd711e25163dd2052f5719", "committedDate": "2020-06-17T22:39:06Z", "message": "#17842 Fixing test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyODcxNTMx", "url": "https://github.com/dotCMS/core/pull/18688#pullrequestreview-432871531", "createdAt": "2020-06-18T01:00:17Z", "commit": {"oid": "b9b0d1d1b7ae157fc3dd711e25163dd2052f5719"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMTowMDoxN1rOGlcH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwMTowMDoxN1rOGlcH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTkxMTI5NA==", "bodyText": "Codacy found an issue: Use block level rather than method level synchronization", "url": "https://github.com/dotCMS/core/pull/18688#discussion_r441911294", "createdAt": "2020-06-18T01:00:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESReadOnlyMonitor.java", "diffHunk": "@@ -79,118 +84,158 @@ public void start(final String message){\n      * @return false if a ESReadOnlyMonitor was started before\n      */\n     public boolean start(){\n+\n+        if (timeToWaitAfterWriteModeSet == TIME_TO_WAIT_AFTER_WRITE_MODE_SET_NOTY_VALUE) {\n+            loadTimeToWaitAfterWriteModeSet();\n+        }\n+\n+        final boolean clusterInReadOnlyMode = ElasticsearchUtil.isClusterInReadOnlyMode();\n+        final boolean eitherLiveOrWorkingIndicesReadOnly = ElasticsearchUtil.isEitherLiveOrWorkingIndicesReadOnly();\n+\n         if (started.compareAndSet(false, true)) {\n-            if (ElasticsearchUtil.isClusterInReadOnlyMode()) {\n-                ReindexThread.setCurrentIndexReadOnly(true);\n-                sendMessage(\"es.cluster.read.only.message\");\n+            if (clusterInReadOnlyMode) {\n+                this.readOnlyMessageKey = \"es.cluster.read.only.message\";\n+                sendReadOnlyMessage();\n                 startClusterMonitor();\n-            } else if (ElasticsearchUtil.isEitherLiveOrWorkingIndicesReadOnly()) {\n-                ReindexThread.setCurrentIndexReadOnly(true);\n-                sendMessage(\"es.index.read.only.message\");\n+            } else if (eitherLiveOrWorkingIndicesReadOnly) {\n+                this.readOnlyMessageKey = \"es.index.read.only.message\";\n+                sendReadOnlyMessage();\n                 startIndexMonitor();\n             } else {\n                 started.set(false);\n             }\n \n-            return true;\n+            return this.started.get();\n         } else {\n             return false;\n         }\n     }\n \n+    private void loadTimeToWaitAfterWriteModeSet() {\n+        timeToWaitAfterWriteModeSet = ElasticsearchUtil.getClusterUpdateInterval() +\n+                TimeUnit.MINUTES.toMillis(INTERVAL_IN_MINUTES_TO_CHECK_READ_ONLY) +\n+                TimeUnit.SECONDS.toMillis(10);\n+    }\n+\n+    public void sendReadOnlyMessage() {\n+        sendMessage(readOnlyMessageKey);\n+    }\n+\n     private void sendMessage(final String messageKey) {\n         try {\n+            final String message = LanguageUtil.get(messageKey);\n+\n             final Role adminRole = roleAPI.loadCMSAdminRole();\n             final List<String> usersId = roleAPI.findUsersForRole(adminRole)\n                     .stream()\n                     .map(user -> user.getUserId())\n                     .collect(Collectors.toList());\n \n-            final String message = LanguageUtil.get(messageKey);\n-\n             final SystemMessageBuilder messageBuilder = new SystemMessageBuilder()\n                     .setMessage(message)\n                     .setSeverity(MessageSeverity.ERROR)\n                     .setType(MessageType.SIMPLE_MESSAGE)\n                     .setLife(TimeUnit.SECONDS.toMillis(5));\n-\n-            Logger.error(ESReadOnlyMonitor.class, message);\n+            Logger.error(this.getClass(), message);\n             systemMessageEventUtil.pushMessage(messageBuilder.create(), usersId);\n-        } catch (final LanguageException | DotDataException | DotSecurityException e) {\n+        } catch (final  LanguageException | DotDataException | DotSecurityException e) {\n             Logger.warn(ESReadOnlyMonitor.class, () -> e.getMessage());\n         }\n     }\n \n-    private void putCurrentIndicesToWriteMode() {\n-        try {\n-            Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n-            ElasticsearchUtil.setLiveAndWorkingIndicesToWriteMode();\n-            sendMessage(\"es.index.write.allow.message\");\n-            ReindexThread.setCurrentIndexReadOnly(false);\n-\n-            this.stop();\n-        } catch (final ElasticsearchResponseException e) {\n-            Logger.info(ESReadOnlyMonitor.class, ()  -> e.getMessage());\n-        }\n+    private void putCurrentIndicesToWriteMode() throws ElasticsearchResponseException {\n+        Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n+        ElasticsearchUtil.setLiveAndWorkingIndicesToWriteMode();\n     }\n \n-    private void putClusterToWriteMode() {\n-        try{\n-            Logger.debug(this.getClass(), () -> \"Trying to set the current indices to Write mode\");\n-            ElasticsearchUtil.setClusterToWriteMode();\n-            sendMessage(\"es.cluster.write.allow.message\");\n-            ReindexThread.setCurrentIndexReadOnly(false);\n-\n-            this.stop();\n-        } catch (final ElasticsearchResponseException e) {\n-            Logger.info(ESReadOnlyMonitor.class, ()  -> e.getMessage());\n-        }\n+    private void putClusterToWriteMode() throws ElasticsearchResponseException {\n+        Logger.debug(this.getClass(), () -> \"Trying to set the cluster to Write mode\");\n+        ElasticsearchUtil.setClusterToWriteMode();\n     }\n \n     private void startIndexMonitor() {\n-         schedule(new IndexMonitorTimerTask(this));\n+         schedule(\n+                 this::putCurrentIndicesToWriteMode,\n+                 ElasticsearchUtil::isEitherLiveOrWorkingIndicesReadOnly,\n+                 \"es.index.write.allow.message\"\n+         );\n     }\n \n-    private synchronized void schedule(final TimerTask timerTask) {\n-        timer = new Timer(true);\n-        timer.schedule(timerTask, 0, TimeUnit.MINUTES.toMillis(1));\n+    private synchronized void schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b0d1d1b7ae157fc3dd711e25163dd2052f5719"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}