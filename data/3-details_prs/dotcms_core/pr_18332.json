{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDA0Njg2", "number": 18332, "title": "Issue 18325 allow vanity urls to have params", "bodyText": "", "createdAt": "2020-04-21T02:43:02Z", "url": "https://github.com/dotCMS/core/pull/18332", "merged": true, "mergeCommit": {"oid": "6cad4e932b8729bb53133850f01f556844f3bd2c"}, "closed": true, "closedAt": "2020-04-23T21:18:08Z", "author": {"login": "wezell"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZpyGQgH2gAyNDA2NDA0Njg2OjI1MmU0ZjUwY2ZiYTJhYmY1MTQ5YzM0ZTBkYzg3NmU2Yzc1NzRlNjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaisjcgFqTM5OTQ0MTMxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "252e4f50cfba2abf5149c34e0dc876e6c7574e64", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/252e4f50cfba2abf5149c34e0dc876e6c7574e64", "committedDate": "2020-04-21T01:55:01Z", "message": "#18325 vanities can now pass query params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a69df4e471db51a84c00b88f503b33b9a43013", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/91a69df4e471db51a84c00b88f503b33b9a43013", "committedDate": "2020-04-21T02:34:04Z", "message": "#18325 vanities can now pass query params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a007b9a5522c381887feaebad40cd52e08f955c", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/5a007b9a5522c381887feaebad40cd52e08f955c", "committedDate": "2020-04-21T02:36:01Z", "message": "#18325 cleaner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f4ea2b6c3ff04e5a8d3101a40ebd8940ab7884", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/79f4ea2b6c3ff04e5a8d3101a40ebd8940ab7884", "committedDate": "2020-04-21T02:42:48Z", "message": "#18325 another test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b7a3f01c6833503e31a0eebfe2e34a02ce09c97", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/1b7a3f01c6833503e31a0eebfe2e34a02ce09c97", "committedDate": "2020-04-21T02:46:08Z", "message": "#18325 another assertion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Mzg1NjEy", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-397385612", "createdAt": "2020-04-21T14:26:51Z", "commit": {"oid": "1b7a3f01c6833503e31a0eebfe2e34a02ce09c97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNjo1MVrOGJIt8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDoyNjo1MVrOGJIt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIzMzIwMQ==", "bodyText": "really this chenge is not tested, I think this test is tested VanityURL maybe we can add a new query params test:\nhttps://github.com/dotCMS/core/blob/master/dotCMS/src/integration-test/java/com/dotmarketing/filters/FiltersTest.java#L162", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r412233201", "createdAt": "2020-04-21T14:26:51Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityURLFilter.java", "diffHunk": "@@ -85,20 +86,10 @@ public void doFilter(final ServletRequest req, final ServletResponse res,\n                     return;\n                 }\n \n-                /*\n-                If the VanityURL has a query string we need to add it to the request in order to override\n-                in the other filters.\n-                 */\n-                if (vanityUrlResult.getQueryString() != null) {\n-                    request.setAttribute(CMS_FILTER_QUERY_STRING_OVERRIDE,\n-                            vanityUrlResult.getQueryString());\n-                }\n+                filterChain.doFilter(new  VanityUrlRequestWrapper(request, vanityUrlResult) , response);\n+                return;\n+           }\n \n-                /*\n-                Set into the request the VanityURL we need to use to rewrite the current URI\n-                 */\n-                request.setAttribute(CMS_FILTER_URI_OVERRIDE, vanityUrlResult.getRewrite());\n-            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b7a3f01c6833503e31a0eebfe2e34a02ce09c97"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODI3Njkx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-397827691", "createdAt": "2020-04-22T04:03:21Z", "commit": {"oid": "1b7a3f01c6833503e31a0eebfe2e34a02ce09c97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjUwMDMz", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-398250033", "createdAt": "2020-04-22T14:28:42Z", "commit": {"oid": "1b7a3f01c6833503e31a0eebfe2e34a02ce09c97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bae34f0b794c99d56f0a36fbb6165e35741c668e", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/bae34f0b794c99d56f0a36fbb6165e35741c668e", "committedDate": "2020-04-22T22:13:49Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18325-allow-vanity-urls-to-have-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18852872affcd21cf4ae1c46226b8a665e7b9ada", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/18852872affcd21cf4ae1c46226b8a665e7b9ada", "committedDate": "2020-04-23T17:07:21Z", "message": "Merge remote-tracking branch 'origin/master' into issue-18325-allow-vanity-urls-to-have-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5429a396fc4a4ff20f6f1e6ca812dc019e614ae2", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/5429a396fc4a4ff20f6f1e6ca812dc019e614ae2", "committedDate": "2020-04-23T17:23:14Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18325-allow-vanity-urls-to-have-params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee59687d4c72848248572ea1d8abb08ef51683b9", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/ee59687d4c72848248572ea1d8abb08ef51683b9", "committedDate": "2020-04-23T20:05:26Z", "message": "#18325 more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90", "author": {"user": {"login": "wezell", "name": "Will Ezell"}}, "url": "https://github.com/dotCMS/core/commit/fe949d3b27169b6c046cf579d4a8b6e1aacf7c90", "committedDate": "2020-04-23T20:06:23Z", "message": "Merge branch 'issue-18325-allow-vanity-urls-to-have-params' of https://github.com/dotcms/core into issue-18325-allow-vanity-urls-to-have-params"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTIx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440921", "createdAt": "2020-04-23T20:12:59Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMjo1OVrOGK6MUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMjo1OVrOGK6MUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjM2OA==", "bodyText": "Issue found: Document empty method body", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092368", "createdAt": "2020-04-23T20:12:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityURLFilter.java", "diffHunk": "@@ -29,83 +31,72 @@\n     private final CMSUrlUtil urlUtil;\n     private final HostWebAPI hostWebAPI;\n     private final LanguageWebAPI languageWebAPI;\n-    private final UserWebAPI  userWebAPI;\n+    private final UserWebAPI userWebAPI;\n \n     public VanityURLFilter() {\n \n-        this (VanityUrlHandlerResolver.getInstance(), CMSUrlUtil.getInstance(),\n-                WebAPILocator.getHostWebAPI(), WebAPILocator.getLanguageWebAPI(),\n-                WebAPILocator.getUserWebAPI());\n+        this(VanityUrlHandlerResolver.getInstance(), CMSUrlUtil.getInstance(), WebAPILocator.getHostWebAPI(),\n+                        WebAPILocator.getLanguageWebAPI(), WebAPILocator.getUserWebAPI());\n     }\n \n     @VisibleForTesting\n-    protected VanityURLFilter(final VanityUrlHandlerResolver vanityUrlHandlerResolver,\n-                           final CMSUrlUtil urlUtil,\n-                           final HostWebAPI hostWebAPI,\n-                           final LanguageWebAPI languageWebAPI,\n-                           final UserWebAPI  userWebAPI) {\n+    protected VanityURLFilter(final VanityUrlHandlerResolver vanityUrlHandlerResolver, final CMSUrlUtil urlUtil,\n+                    final HostWebAPI hostWebAPI, final LanguageWebAPI languageWebAPI, final UserWebAPI userWebAPI) {\n \n         this.vanityUrlHandlerResolver = vanityUrlHandlerResolver;\n-        this.urlUtil                  = urlUtil;\n-        this.hostWebAPI               = hostWebAPI;\n-        this.languageWebAPI           = languageWebAPI;\n-        this.userWebAPI               = userWebAPI;\n+        this.urlUtil = urlUtil;\n+        this.hostWebAPI = hostWebAPI;\n+        this.languageWebAPI = languageWebAPI;\n+        this.userWebAPI = userWebAPI;\n     }\n \n-    public void init(FilterConfig filterConfig) throws ServletException {\n-    }\n+    public void init(FilterConfig filterConfig) throws ServletException {}\n \n-    public void doFilter(final ServletRequest req, final ServletResponse res,\n-            final FilterChain filterChain) throws IOException, ServletException {\n+    public void doFilter(final ServletRequest req, final ServletResponse res, final FilterChain filterChain)\n+                    throws IOException, ServletException {\n \n-        final HttpServletRequest  request  = (HttpServletRequest)  req;\n+        final HttpServletRequest request = (HttpServletRequest) req;\n         final HttpServletResponse response = (HttpServletResponse) res;\n \n-        //Get the URI from the request and check for possible XSS hacks\n-        final String uri         = this.urlUtil.getURIFromRequest(request);\n-        final boolean isFiltered = this.urlUtil.isVanityUrlFiltered (uri);\n-        //Getting the site form the request\n-        final Host site          = WebAPILocator.getHostWebAPI().getCurrentHostNoThrow(request);\n-\n-        if (!isFiltered) {\n-\n-            //Get the user language\n+        // Get the URI from the request and check for possible XSS hacks\n+        final String uri = this.urlUtil.getURIFromRequest(request);\n+        \n+        final boolean isFiltered = this.urlUtil.isVanityUrlFiltered(uri);\n+        \n+        // Getting the site form the request\n+        final Host site = hostWebAPI.getCurrentHostNoThrow(request);\n+\n+        // do not run again if the filter has been run\n+        if (!isFiltered && request.getAttribute(Constants.VANITY_URL_HAS_RUN) == null) {\n+            request.setAttribute(Constants.VANITY_URL_HAS_RUN, true);\n+            // Get the user language\n             final long languageId = this.languageWebAPI.getLanguage(request).getId();\n \n-            //Verify if the given URI is a VanityURL\n+            // Verify if the given URI is a VanityURL\n             if (this.urlUtil.isVanityUrl(uri, site, languageId)) {\n \n-                //Find the Vanity URL handler and handle this given URI\n+                // Find the Vanity URL handler and handle this given URI\n                 final VanityUrlHandler vanityUrlHandler = this.vanityUrlHandlerResolver.getVanityUrlHandler();\n-                final VanityUrlResult vanityUrlResult = vanityUrlHandler\n-                        .handle(uri, response, site, languageId, this.userWebAPI.getUser(request));\n+                final VanityUrlResult vanityUrlResult =\n+                                vanityUrlHandler.handle(uri, response, site, languageId, this.userWebAPI.getUser(request));\n \n-                //If the handler already resolved the requested URI we stop the processing here\n+                // If the handler already resolved the requested URI we stop the processing here\n                 if (vanityUrlResult.isResolved()) {\n                     return;\n                 }\n \n-                /*\n-                If the VanityURL has a query string we need to add it to the request in order to override\n-                in the other filters.\n-                 */\n-                if (vanityUrlResult.getQueryString() != null) {\n-                    request.setAttribute(CMS_FILTER_QUERY_STRING_OVERRIDE,\n-                            vanityUrlResult.getQueryString());\n-                }\n-\n-                /*\n-                Set into the request the VanityURL we need to use to rewrite the current URI\n-                 */\n-                request.setAttribute(CMS_FILTER_URI_OVERRIDE, vanityUrlResult.getRewrite());\n+                filterChain.doFilter(new VanityUrlRequestWrapper(request, vanityUrlResult), response);\n+                return;\n             }\n+\n         }\n \n         filterChain.doFilter(request, response);\n     } // doFilter.\n \n \n-    public void destroy() {\n-    }\n+    public void destroy() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTM0", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440934", "createdAt": "2020-04-23T20:13:00Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMFrOGK6MVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMFrOGK6MVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjM3NA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092374", "createdAt": "2020-04-23T20:13:00Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTQy", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440942", "createdAt": "2020-04-23T20:13:01Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMVrOGK6MWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMVrOGK6MWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjM3OQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092379", "createdAt": "2020-04-23T20:13:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));\n+        assert(!queryString.endsWith(\"&\"));\n+        assert(queryString.contains(\"param1=\" + URL));\n+        assert(queryString.contains(\"param2=\" + URL));\n+        assert(queryString.contains(\"param2=\" + VANITY));\n+        assert(queryString.contains(\"param3=\" + VANITY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTUy", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440952", "createdAt": "2020-04-23T20:13:02Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMlrOGK6MZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowMlrOGK6MZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjM5MQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092391", "createdAt": "2020-04-23T20:13:02Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTY3", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440967", "createdAt": "2020-04-23T20:13:03Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowM1rOGK6Mcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowM1rOGK6Mcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQwMw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092403", "createdAt": "2020-04-23T20:13:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));\n+        assert(!queryString.endsWith(\"&\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTc2", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440976", "createdAt": "2020-04-23T20:13:05Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowNVrOGK6Mgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowNVrOGK6Mgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQxOQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092419", "createdAt": "2020-04-23T20:13:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));\n+        assert(!queryString.endsWith(\"&\"));\n+        assert(queryString.contains(\"param1=\" + URL));\n+        assert(queryString.contains(\"param2=\" + URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQwOTkz", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399440993", "createdAt": "2020-04-23T20:13:06Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowNlrOGK6Mlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowNlrOGK6Mlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQzOA==", "bodyText": "Issue found: Parameter 'invocation' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092438", "createdAt": "2020-04-23T20:13:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/request/MockHttpRequest.java", "diffHunk": "@@ -18,15 +26,36 @@\n public class MockHttpRequest implements MockRequest {\n \n     private final HttpServletRequest request;\n-\n+    private final Map<String,String[]> paramMap;\n     public MockHttpRequest(final String hostname, final String uri) {\n         HttpServletRequest mockReq = new BaseRequest().request();\n         Mockito.when(mockReq.getRequestURI()).thenReturn(uri);\n         Mockito.when(mockReq.getRequestURL()).thenReturn(new StringBuffer(\"http://\" + hostname + uri));\n         Mockito.when(mockReq.getServerName()).thenReturn(hostname);\n         Mockito.when(mockReq.getRemoteAddr()).thenReturn(\"127.0.0.1\");\n         Mockito.when(mockReq.getRemoteHost()).thenReturn(\"127.0.0.1\");\n+        paramMap = new HashMap<>();\n+        if(uri.contains(\"?\")) {\n+            final String queryString = uri.substring(uri.indexOf(\"?\") + 1, uri.length());\n+            Mockito.when(mockReq.getQueryString()).thenReturn(queryString);\n+            List<NameValuePair> additional = URLEncodedUtils.parse(queryString, Charset.forName(\"UTF-8\"));\n+            for(NameValuePair nvp : additional) {\n+                paramMap.compute(nvp.getName(), (k, v) -> (v == null) ? new String[] {nvp.getValue()} : new String[]{nvp.getValue(),v[0]});\n+            }\n+            Mockito.when(mockReq.getQueryString()).thenReturn(queryString);\n+            Mockito.when(mockReq.getParameterMap()).thenReturn(paramMap);\n+            Mockito.when(mockReq.getParameterNames()).thenReturn(Collections.enumeration(paramMap.keySet()));\n+            Mockito.when(mockReq.getParameter(Mockito.anyString())).thenAnswer(new Answer<String>() {\n+                public String answer(InvocationOnMock invocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDA0", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441004", "createdAt": "2020-04-23T20:13:07Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowN1rOGK6Mqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowN1rOGK6Mqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQ1OQ==", "bodyText": "Issue found: The String literal \"param2\" appears 5 times in this file; the first occurrence is on line 33", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092459", "createdAt": "2020-04-23T20:13:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDIx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441021", "createdAt": "2020-04-23T20:13:08Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowOFrOGK6MtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowOFrOGK6MtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQ2OA==", "bodyText": "Issue found: Local variable 'tempMap' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092468", "createdAt": "2020-04-23T20:13:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityUrlRequestWrapper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.dotmarketing.filters;\n+\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_QUERY_STRING_OVERRIDE;\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_URI_OVERRIDE;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * The VanityUrlOverrideRequest merges the parameters set in the original request and merges them\n+ * with the parameters that are being set in the vanityUrl. In all cases, if there are parameters\n+ * set in the VanityURL Query String, they will override the ones being sent in by original visitors\n+ * request\n+ *\n+ */\n+class VanityUrlRequestWrapper extends HttpServletRequestWrapper {\n+    \n+    final Map<String, String[]> queryParamMap;\n+    final String newQueryString;\n+    final boolean vanityHasQueryString;\n+\n+\n+    public VanityUrlRequestWrapper(HttpServletRequest request, VanityUrlResult vanityUrlResult) {\n+        super(request);\n+\n+        \n+        this.vanityHasQueryString = UtilMethods.isSet(vanityUrlResult.getQueryString());\n+        \n+        this.newQueryString = vanityHasQueryString && UtilMethods.isSet(request.getQueryString())\n+                        ? request.getQueryString() + \"&\" + vanityUrlResult.getQueryString()\n+                        : vanityHasQueryString \n+                            ? vanityUrlResult.getQueryString()\n+                            : request.getQueryString();\n+\n+\n+        // we create a new map here because it merges the \n+        Map<String,String[]> tempMap = new HashMap<>(request.getParameterMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDMx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441031", "createdAt": "2020-04-23T20:13:09Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowOVrOGK6MvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzowOVrOGK6MvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQ3Ng==", "bodyText": "Issue found: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092476", "createdAt": "2020-04-23T20:13:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/request/MockHttpRequest.java", "diffHunk": "@@ -18,15 +26,36 @@\n public class MockHttpRequest implements MockRequest {\n \n     private final HttpServletRequest request;\n-\n+    private final Map<String,String[]> paramMap;\n     public MockHttpRequest(final String hostname, final String uri) {\n         HttpServletRequest mockReq = new BaseRequest().request();\n         Mockito.when(mockReq.getRequestURI()).thenReturn(uri);\n         Mockito.when(mockReq.getRequestURL()).thenReturn(new StringBuffer(\"http://\" + hostname + uri));\n         Mockito.when(mockReq.getServerName()).thenReturn(hostname);\n         Mockito.when(mockReq.getRemoteAddr()).thenReturn(\"127.0.0.1\");\n         Mockito.when(mockReq.getRemoteHost()).thenReturn(\"127.0.0.1\");\n+        paramMap = new HashMap<>();\n+        if(uri.contains(\"?\")) {\n+            final String queryString = uri.substring(uri.indexOf(\"?\") + 1, uri.length());\n+            Mockito.when(mockReq.getQueryString()).thenReturn(queryString);\n+            List<NameValuePair> additional = URLEncodedUtils.parse(queryString, Charset.forName(\"UTF-8\"));\n+            for(NameValuePair nvp : additional) {\n+                paramMap.compute(nvp.getName(), (k, v) -> (v == null) ? new String[] {nvp.getValue()} : new String[]{nvp.getValue(),v[0]});\n+            }\n+            Mockito.when(mockReq.getQueryString()).thenReturn(queryString);\n+            Mockito.when(mockReq.getParameterMap()).thenReturn(paramMap);\n+            Mockito.when(mockReq.getParameterNames()).thenReturn(Collections.enumeration(paramMap.keySet()));\n+            Mockito.when(mockReq.getParameter(Mockito.anyString())).thenAnswer(new Answer<String>() {\n+                public String answer(InvocationOnMock invocation) {\n+                    Object[] args = invocation.getArguments();\n+                    Object mock = invocation.getMock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDQz", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441043", "createdAt": "2020-04-23T20:13:10Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMFrOGK6Mxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMFrOGK6Mxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjQ4Ng==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092486", "createdAt": "2020-04-23T20:13:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));\n+        assert(!queryString.endsWith(\"&\"));\n+        assert(queryString.contains(\"param1=\" + URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDU3", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441057", "createdAt": "2020-04-23T20:13:11Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMVrOGK6M1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMVrOGK6M1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjUwMQ==", "bodyText": "Issue found: Local variable 'additional' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092501", "createdAt": "2020-04-23T20:13:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityUrlRequestWrapper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.dotmarketing.filters;\n+\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_QUERY_STRING_OVERRIDE;\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_URI_OVERRIDE;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * The VanityUrlOverrideRequest merges the parameters set in the original request and merges them\n+ * with the parameters that are being set in the vanityUrl. In all cases, if there are parameters\n+ * set in the VanityURL Query String, they will override the ones being sent in by original visitors\n+ * request\n+ *\n+ */\n+class VanityUrlRequestWrapper extends HttpServletRequestWrapper {\n+    \n+    final Map<String, String[]> queryParamMap;\n+    final String newQueryString;\n+    final boolean vanityHasQueryString;\n+\n+\n+    public VanityUrlRequestWrapper(HttpServletRequest request, VanityUrlResult vanityUrlResult) {\n+        super(request);\n+\n+        \n+        this.vanityHasQueryString = UtilMethods.isSet(vanityUrlResult.getQueryString());\n+        \n+        this.newQueryString = vanityHasQueryString && UtilMethods.isSet(request.getQueryString())\n+                        ? request.getQueryString() + \"&\" + vanityUrlResult.getQueryString()\n+                        : vanityHasQueryString \n+                            ? vanityUrlResult.getQueryString()\n+                            : request.getQueryString();\n+\n+\n+        // we create a new map here because it merges the \n+        Map<String,String[]> tempMap = new HashMap<>(request.getParameterMap());\n+        if(vanityHasQueryString) {\n+            List<NameValuePair> additional = URLEncodedUtils.parse(newQueryString, Charset.forName(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDY3", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441067", "createdAt": "2020-04-23T20:13:12Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMlrOGK6M3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxMlrOGK6M3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjUwOA==", "bodyText": "Issue found: Local variable 'val' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092508", "createdAt": "2020-04-23T20:13:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityUrlRequestWrapper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.dotmarketing.filters;\n+\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_QUERY_STRING_OVERRIDE;\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_URI_OVERRIDE;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * The VanityUrlOverrideRequest merges the parameters set in the original request and merges them\n+ * with the parameters that are being set in the vanityUrl. In all cases, if there are parameters\n+ * set in the VanityURL Query String, they will override the ones being sent in by original visitors\n+ * request\n+ *\n+ */\n+class VanityUrlRequestWrapper extends HttpServletRequestWrapper {\n+    \n+    final Map<String, String[]> queryParamMap;\n+    final String newQueryString;\n+    final boolean vanityHasQueryString;\n+\n+\n+    public VanityUrlRequestWrapper(HttpServletRequest request, VanityUrlResult vanityUrlResult) {\n+        super(request);\n+\n+        \n+        this.vanityHasQueryString = UtilMethods.isSet(vanityUrlResult.getQueryString());\n+        \n+        this.newQueryString = vanityHasQueryString && UtilMethods.isSet(request.getQueryString())\n+                        ? request.getQueryString() + \"&\" + vanityUrlResult.getQueryString()\n+                        : vanityHasQueryString \n+                            ? vanityUrlResult.getQueryString()\n+                            : request.getQueryString();\n+\n+\n+        // we create a new map here because it merges the \n+        Map<String,String[]> tempMap = new HashMap<>(request.getParameterMap());\n+        if(vanityHasQueryString) {\n+            List<NameValuePair> additional = URLEncodedUtils.parse(newQueryString, Charset.forName(\"UTF-8\"));\n+            for(NameValuePair nvp : additional) {\n+                tempMap.compute(nvp.getName(), (k, v) -> (v == null) ? new String[] {nvp.getValue()} : new String[]{nvp.getValue(),v[0]});\n+            }\n+        }\n+        \n+\n+        this.queryParamMap = ImmutableMap.copyOf(tempMap);\n+\n+\n+\n+        this.setAttribute(CMS_FILTER_URI_OVERRIDE, vanityUrlResult.getRewrite());\n+        this.setAttribute(CMS_FILTER_QUERY_STRING_OVERRIDE, this.newQueryString);\n+\n+    }\n+\n+    @Override\n+    public String getQueryString() {\n+        return this.newQueryString;\n+    }\n+\n+    @Override\n+    public String getParameter(final String name) {\n+        String[] val = this.queryParamMap.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMDgy", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441082", "createdAt": "2020-04-23T20:13:13Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxM1rOGK6M5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxM1rOGK6M5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjUxOQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092519", "createdAt": "2020-04-23T20:13:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTA2", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441106", "createdAt": "2020-04-23T20:13:14Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNFrOGK6M_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNFrOGK6M_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjU0Mg==", "bodyText": "Issue found: Local variable 'nvp' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092542", "createdAt": "2020-04-23T20:13:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityUrlRequestWrapper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.dotmarketing.filters;\n+\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_QUERY_STRING_OVERRIDE;\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_URI_OVERRIDE;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * The VanityUrlOverrideRequest merges the parameters set in the original request and merges them\n+ * with the parameters that are being set in the vanityUrl. In all cases, if there are parameters\n+ * set in the VanityURL Query String, they will override the ones being sent in by original visitors\n+ * request\n+ *\n+ */\n+class VanityUrlRequestWrapper extends HttpServletRequestWrapper {\n+    \n+    final Map<String, String[]> queryParamMap;\n+    final String newQueryString;\n+    final boolean vanityHasQueryString;\n+\n+\n+    public VanityUrlRequestWrapper(HttpServletRequest request, VanityUrlResult vanityUrlResult) {\n+        super(request);\n+\n+        \n+        this.vanityHasQueryString = UtilMethods.isSet(vanityUrlResult.getQueryString());\n+        \n+        this.newQueryString = vanityHasQueryString && UtilMethods.isSet(request.getQueryString())\n+                        ? request.getQueryString() + \"&\" + vanityUrlResult.getQueryString()\n+                        : vanityHasQueryString \n+                            ? vanityUrlResult.getQueryString()\n+                            : request.getQueryString();\n+\n+\n+        // we create a new map here because it merges the \n+        Map<String,String[]> tempMap = new HashMap<>(request.getParameterMap());\n+        if(vanityHasQueryString) {\n+            List<NameValuePair> additional = URLEncodedUtils.parse(newQueryString, Charset.forName(\"UTF-8\"));\n+            for(NameValuePair nvp : additional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTIx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441121", "createdAt": "2020-04-23T20:13:15Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNVrOGK6NDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNVrOGK6NDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjU1OQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092559", "createdAt": "2020-04-23T20:13:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTMz", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441133", "createdAt": "2020-04-23T20:13:15Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNlrOGK6NHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxNlrOGK6NHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjU3Mg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092572", "createdAt": "2020-04-23T20:13:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));\n+        assert(!queryString.endsWith(\"&\"));\n+        assert(queryString.contains(\"param1=\" + URL));\n+        assert(queryString.contains(\"param2=\" + URL));\n+        assert(queryString.contains(\"param2=\" + VANITY));\n+        assert(queryString.contains(\"param3=\" + VANITY));\n+        List<NameValuePair> queryParams = URLEncodedUtils.parse(queryString, Charset.forName(\"UTF-8\"));\n+        assert(queryParams.size()==4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTQ3", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441147", "createdAt": "2020-04-23T20:13:16Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxN1rOGK6NKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxN1rOGK6NKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjU4Ng==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092586", "createdAt": "2020-04-23T20:13:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTYx", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441161", "createdAt": "2020-04-23T20:13:18Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxOFrOGK6NOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxOFrOGK6NOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjYwMQ==", "bodyText": "Issue found: Local variable 'additional' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092601", "createdAt": "2020-04-23T20:13:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/request/MockParameterRequest.java", "diffHunk": "@@ -24,6 +27,13 @@ public MockParameterRequest(HttpServletRequest request) {\n     public MockParameterRequest(HttpServletRequest request, Map<String, String> setMe) {\n         super(request);\n         HashMap<String, String> mutable = new HashMap<String, String>();\n+        \n+        List<NameValuePair> additional = URLEncodedUtils.parse(request.getQueryString(), Charset.forName(\"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTc0", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441174", "createdAt": "2020-04-23T20:13:19Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxOVrOGK6NSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoxOVrOGK6NSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjYxNw==", "bodyText": "Issue found: This final field could be made static", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092617", "createdAt": "2020-04-23T20:13:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTg2", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441186", "createdAt": "2020-04-23T20:13:20Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMFrOGK6NVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMFrOGK6NVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjYzMQ==", "bodyText": "Issue found: Local variable 'nvp' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092631", "createdAt": "2020-04-23T20:13:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/request/MockHttpRequest.java", "diffHunk": "@@ -18,15 +26,36 @@\n public class MockHttpRequest implements MockRequest {\n \n     private final HttpServletRequest request;\n-\n+    private final Map<String,String[]> paramMap;\n     public MockHttpRequest(final String hostname, final String uri) {\n         HttpServletRequest mockReq = new BaseRequest().request();\n         Mockito.when(mockReq.getRequestURI()).thenReturn(uri);\n         Mockito.when(mockReq.getRequestURL()).thenReturn(new StringBuffer(\"http://\" + hostname + uri));\n         Mockito.when(mockReq.getServerName()).thenReturn(hostname);\n         Mockito.when(mockReq.getRemoteAddr()).thenReturn(\"127.0.0.1\");\n         Mockito.when(mockReq.getRemoteHost()).thenReturn(\"127.0.0.1\");\n+        paramMap = new HashMap<>();\n+        if(uri.contains(\"?\")) {\n+            final String queryString = uri.substring(uri.indexOf(\"?\") + 1, uri.length());\n+            Mockito.when(mockReq.getQueryString()).thenReturn(queryString);\n+            List<NameValuePair> additional = URLEncodedUtils.parse(queryString, Charset.forName(\"UTF-8\"));\n+            for(NameValuePair nvp : additional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMTk1", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441195", "createdAt": "2020-04-23T20:13:21Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMVrOGK6NXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMVrOGK6NXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjYzOQ==", "bodyText": "Issue found: This call to String.startsWith can be rewritten using String.charAt(0)", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092639", "createdAt": "2020-04-23T20:13:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);\n+        assert(!queryString.startsWith(\"&\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMjA4", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441208", "createdAt": "2020-04-23T20:13:22Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMlrOGK6NaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyMlrOGK6NaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjY0OA==", "bodyText": "Issue found: Local variable 'nvp' could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092648", "createdAt": "2020-04-23T20:13:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/mock/request/MockParameterRequest.java", "diffHunk": "@@ -24,6 +27,13 @@ public MockParameterRequest(HttpServletRequest request) {\n     public MockParameterRequest(HttpServletRequest request, Map<String, String> setMe) {\n         super(request);\n         HashMap<String, String> mutable = new HashMap<String, String>();\n+        \n+        List<NameValuePair> additional = URLEncodedUtils.parse(request.getQueryString(), Charset.forName(\"UTF-8\"));\n+        for(NameValuePair nvp : additional) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMjIw", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441220", "createdAt": "2020-04-23T20:13:23Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyM1rOGK6NdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyM1rOGK6NdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjY2MQ==", "bodyText": "Issue found: Parameter 'vanityUrlResult' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092661", "createdAt": "2020-04-23T20:13:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/VanityUrlRequestWrapper.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.dotmarketing.filters;\n+\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_QUERY_STRING_OVERRIDE;\n+import static com.dotmarketing.filters.Constants.CMS_FILTER_URI_OVERRIDE;\n+import java.nio.charset.Charset;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.collect.ImmutableMap;\n+\n+\n+/**\n+ * The VanityUrlOverrideRequest merges the parameters set in the original request and merges them\n+ * with the parameters that are being set in the vanityUrl. In all cases, if there are parameters\n+ * set in the VanityURL Query String, they will override the ones being sent in by original visitors\n+ * request\n+ *\n+ */\n+class VanityUrlRequestWrapper extends HttpServletRequestWrapper {\n+    \n+    final Map<String, String[]> queryParamMap;\n+    final String newQueryString;\n+    final boolean vanityHasQueryString;\n+\n+\n+    public VanityUrlRequestWrapper(HttpServletRequest request, VanityUrlResult vanityUrlResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMjM0", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441234", "createdAt": "2020-04-23T20:13:24Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyNFrOGK6Nfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMDoxMzoyNFrOGK6Nfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5MjY3MQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18332#discussion_r414092671", "createdAt": "2020-04-23T20:13:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotmarketing/filters/VanityUrlRequestWrapperTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.dotmarketing.filters;\n+\n+import java.nio.charset.Charset;\n+import java.util.List;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.client.utils.URLEncodedUtils;\n+import org.junit.Test;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockParameterRequest;\n+import com.dotcms.vanityurl.model.VanityUrlResult;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class VanityUrlRequestWrapperTest {\n+\n+    final String URL = \"URL\";\n+    final String FORM = \"FORM\";\n+    final String VANITY = \"VANITY\";\n+\n+\n+    /**\n+     * This tests if you have a vanity URL that has query parameters, that they will be merged into to\n+     * the request and if their keys match an existing parameter, the vanity url parameter will\n+     * overwrite any parameters that were in the original request\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_vanity_urls_with_query_params_override_incoming_requests() {\n+\n+        // three form params\n+        final Map<String, String> formParameters = ImmutableMap.of(\"param0\", FORM, \"param1\", FORM, \"param2\", FORM);\n+\n+\n+        // two url params (2 overlap)\n+        final HttpServletRequest baseRequest = new MockParameterRequest(\n+                        new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request(), formParameters)\n+                                        .request();\n+\n+        // two vanity params (1 overlaps)\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+\n+\n+        // we have 3 objects in our param map\n+        assert (request.getParameterMap().size() == 4);\n+\n+        assert (request.getParameter(\"param0\").equals(FORM));\n+        assert (request.getParameter(\"param1\").equals(URL));\n+\n+        // param2 have been overridden by the vanity url\n+        assert (request.getParameter(\"param2\").equals(VANITY));\n+\n+        assert (request.getParameter(\"param3\").equals(VANITY));\n+\n+        // param2 also has the original value from the url\n+        assert (request.getParameterValues(\"param2\").length == 2);\n+        assert (request.getParameterValues(\"param2\")[0].equals(VANITY));\n+        assert (request.getParameterValues(\"param2\")[1].equals(URL));\n+\n+\n+\n+    }\n+\n+    /**\n+     * This tests to insure that the new query string has both the old and the new query parameters\n+     * \n+     * see: https://github.com/dotCMS/core/issues/18325\n+     */\n+    @Test\n+    public void test_that_query_string_has_all_the_parameters() {\n+\n+\n+        final HttpServletRequest baseRequest = new MockHttpRequest(\"testing\", \"/test?param1=\" + URL + \"&param2=\" + URL).request();\n+\n+        final VanityUrlResult vanityUrlResult = new VanityUrlResult(\"/newUrl\", \"param2=\" + VANITY + \"&param3=\" + VANITY, false);\n+\n+        final HttpServletRequest request = new VanityUrlRequestWrapper(baseRequest, vanityUrlResult);\n+\n+        final String queryString= request.getQueryString();\n+        assert(queryString!=null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDQxMzE4", "url": "https://github.com/dotCMS/core/pull/18332#pullrequestreview-399441318", "createdAt": "2020-04-23T20:13:33Z", "commit": {"oid": "fe949d3b27169b6c046cf579d4a8b6e1aacf7c90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1008, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}