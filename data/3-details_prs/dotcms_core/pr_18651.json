{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzk3MDcw", "number": 18651, "title": "Create Page API with First Level fields and Site field", "bodyText": "In this PR the GraphQL Page API was created with two already working things:\n\nAll the basic properties at root level of the page are available\nSite field was converted into Contentlet to be able to have all the Contentlet properties available.\n\nAlso GraphQL was updated from 11.0 to 13.0 and kickstart library also from 7 to 9. This required adaption of a few classes: DotGraphQLContext, GraphQLServletContextBuilder, DotGraphQLHttpServlet, DotGraphQLSchemaProvider, DotGraphQLServletListener.\nLastly, a refactor was done to some classes used in the Page REST API to avoid code duplication for GraphQL. The additional properties that were resolved at Page REST API level are now solved at transformer level. PageViewStrategy has this code now.", "createdAt": "2020-06-12T00:11:38Z", "url": "https://github.com/dotCMS/core/pull/18651", "merged": true, "mergeCommit": {"oid": "518f3481b8eda5cc646f20aa919bdefc8f418a96"}, "closed": true, "closedAt": "2020-06-19T17:56:53Z", "author": {"login": "dsilvam"}, "timelineItems": {"totalCount": 73, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclgxkVgH2gAyNDMzMzk3MDcwOjEwOGU1YTU2NjVmNDU3M2ExZjNlY2JkZGEzMzdjMThhMjAyM2VhZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcszdlEgFqTQzNDA5NzM5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "108e5a5665f4573a1f3ecbdda337c18a2023eaf9", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/108e5a5665f4573a1f3ecbdda337c18a2023eaf9", "committedDate": "2020-05-27T22:12:23Z", "message": "#18286"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b75a6275ada0402b11737d3ef9b51ba7ed752282", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b75a6275ada0402b11737d3ef9b51ba7ed752282", "committedDate": "2020-05-28T05:17:17Z", "message": "#18286 stabilize tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdeb8208fd7b66c8583fb93fcc116a62f4a9ea67", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/fdeb8208fd7b66c8583fb93fcc116a62f4a9ea67", "committedDate": "2020-05-28T16:15:10Z", "message": "#18286 fixes + builder for content resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e809111e4dbe4eeae2166a67e4f97db80774944a", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/e809111e4dbe4eeae2166a67e4f97db80774944a", "committedDate": "2020-05-30T04:22:13Z", "message": "#18286  code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72131088f919a9b5dde5d09324510a9cc8806a7", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/a72131088f919a9b5dde5d09324510a9cc8806a7", "committedDate": "2020-06-01T05:21:33Z", "message": "#18286  clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1f93b777454f1449c9bca76fa37c5cf1e1f276", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/fd1f93b777454f1449c9bca76fa37c5cf1e1f276", "committedDate": "2020-06-01T16:44:42Z", "message": "#18286 more clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "615de987710983c1b07b809d6d44ab763d34138d", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/615de987710983c1b07b809d6d44ab763d34138d", "committedDate": "2020-06-01T23:41:16Z", "message": "#18297 refactor GraphQLAPIImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c0a5e5e415fc3d93d782e4b5652ea4d2b2b2ab", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/75c0a5e5e415fc3d93d782e4b5652ea4d2b2b2ab", "committedDate": "2020-06-02T15:16:24Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ef578e9411c2558ff1afe157e4fe4f91cdaf977", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/4ef578e9411c2558ff1afe157e4fe4f91cdaf977", "committedDate": "2020-06-03T23:10:59Z", "message": "#18589 Refactor GraphQLAPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf16d0d83251305937ab75302e4f9f168240e48b", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/bf16d0d83251305937ab75302e4f9f168240e48b", "committedDate": "2020-06-03T23:46:41Z", "message": "#18589 restore schema cache. Remove unneeded class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ef798818a6a8a48ff2462cb53106d7a50f74cc7", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3ef798818a6a8a48ff2462cb53106d7a50f74cc7", "committedDate": "2020-06-04T16:50:39Z", "message": "#18286 performance boost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece472f94e2531d590982f8e5544699f032a6419", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/ece472f94e2531d590982f8e5544699f032a6419", "committedDate": "2020-06-04T20:01:10Z", "message": "#18589 GraphQL refactor part II"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a6ecc2c5c7b610403a319e8a40f63060fb537a2", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/6a6ecc2c5c7b610403a319e8a40f63060fb537a2", "committedDate": "2020-06-05T21:18:48Z", "message": "18589 Include javadoc for new exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88fe2745b8418276abaeddaac5709efcff5da69", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/c88fe2745b8418276abaeddaac5709efcff5da69", "committedDate": "2020-06-05T22:51:25Z", "message": "#18589 code-review, integration test for new method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0649d6d61eec99c2d5cb7853aaf9ecb0b164290", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d0649d6d61eec99c2d5cb7853aaf9ecb0b164290", "committedDate": "2020-06-07T23:05:00Z", "message": "#18286 performance tuning + adding category support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa642ef1824462f9e5885c1f358be625b4db3ea", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3fa642ef1824462f9e5885c1f358be625b4db3ea", "committedDate": "2020-06-07T23:46:03Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fe38db3c340456adf086700d053eb0ac739cd3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/f3fe38db3c340456adf086700d053eb0ac739cd3", "committedDate": "2020-06-08T00:29:35Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3591966c8b22609dcfcace18504556db233e5a4c", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3591966c8b22609dcfcace18504556db233e5a4c", "committedDate": "2020-06-08T01:43:34Z", "message": "#18286 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a09b4478e46f8ee86719f99e234547d6e5c560", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/b4a09b4478e46f8ee86719f99e234547d6e5c560", "committedDate": "2020-06-08T17:01:10Z", "message": "#18286  prevent fail when contentlet is reprocessed by the transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bedaf19ff821d440401ccf87cff722d773b3783", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/1bedaf19ff821d440401ccf87cff722d773b3783", "committedDate": "2020-06-08T17:52:42Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f12c9003394120fe60bee34b46ecd8012c8192fa", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/f12c9003394120fe60bee34b46ecd8012c8192fa", "committedDate": "2020-06-08T18:05:37Z", "message": "#18589 Fix failing tests. New fix and test for missing case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7286b91a0d431dac4ccfaa4637dae41709dde19", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/e7286b91a0d431dac4ccfaa4637dae41709dde19", "committedDate": "2020-06-08T18:27:59Z", "message": "#18589 Refactor test cases for cleaner asserts and more specific test methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b616972ea9d9317f2cdda4084b4eedd2bc9b05", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/46b616972ea9d9317f2cdda4084b4eedd2bc9b05", "committedDate": "2020-06-08T22:59:43Z", "message": "#18286 graphQL dataFetcher requires  binaries to not be removed from the resulting contentlet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67241ed09ace976c006a8b5792846ed242dea051", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/67241ed09ace976c006a8b5792846ed242dea051", "committedDate": "2020-06-08T23:58:19Z", "message": "#18297 Skeleton for types and fields provider for Page API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6894b54d181b814f767b12ec2fff28faed56e9d6", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6894b54d181b814f767b12ec2fff28faed56e9d6", "committedDate": "2020-06-09T00:39:37Z", "message": "#18286 adding back the LanguageViewStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2461d0bb978034785244612e1d4515a1362fd62", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d2461d0bb978034785244612e1d4515a1362fd62", "committedDate": "2020-06-09T03:46:15Z", "message": "#18286 fixing test that used to check the file returned in the response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c90daaa8982ce50fc52b581d101a7b5f704c7b5", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/7c90daaa8982ce50fc52b581d101a7b5f704c7b5", "committedDate": "2020-06-09T15:03:48Z", "message": "Merge branch 'master' into issue-18286-contentlet-transform-unified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a008edbee53f58c42639f15275805fdd9a7329e9", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/a008edbee53f58c42639f15275805fdd9a7329e9", "committedDate": "2020-06-09T15:28:17Z", "message": "#18297 more skeleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "208c05b2901026666264821cf67b00728e65dc75", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/208c05b2901026666264821cf67b00728e65dc75", "committedDate": "2020-06-09T22:08:34Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01420a79b6dcebfa15a7876476c76b0f08df9e4e", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/01420a79b6dcebfa15a7876476c76b0f08df9e4e", "committedDate": "2020-06-09T22:32:36Z", "message": "Merge remote-tracking branch 'origin/issue-18286-contentlet-transform-unified' into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fa539db3a7982a2bb20270796f11b8af1ffea6", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/57fa539db3a7982a2bb20270796f11b8af1ffea6", "committedDate": "2020-06-12T00:00:19Z", "message": "#18644 Modify Site GraphqQL Field to be content. Add additional Site properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a30ca1859e7b8f3d5fa540f770b72e17fae1bb17", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/a30ca1859e7b8f3d5fa540f770b72e17fae1bb17", "committedDate": "2020-06-12T00:11:04Z", "message": "#18644 merge with master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3050d3154f60496c5e118f0e907f5a74c452bff", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/a3050d3154f60496c5e118f0e907f5a74c452bff", "committedDate": "2020-06-12T00:21:48Z", "message": "#18599 use proper DataFetcher. Remove not needed DataFetcher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fca6fcdc19af0cf3d85cd38ac6c1dc8edfd6c55", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/1fca6fcdc19af0cf3d85cd38ac6c1dc8edfd6c55", "committedDate": "2020-06-12T23:24:03Z", "message": "#18599 migrate additional page properties to transformer. Refactor REST Page API to rely on transformer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15aadd7bdfffaa4336ce328883affcaeb1e57b57", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/15aadd7bdfffaa4336ce328883affcaeb1e57b57", "committedDate": "2020-06-15T17:20:05Z", "message": "#18599 fixing failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9fbe98473ba4d38683b62b3c53f655829048f38", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/e9fbe98473ba4d38683b62b3c53f655829048f38", "committedDate": "2020-06-15T17:29:49Z", "message": "#18599 codacy feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e21deee9f1925931137de2519fc8ac09edf349d8", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/e21deee9f1925931137de2519fc8ac09edf349d8", "committedDate": "2020-06-15T17:59:06Z", "message": "#18599 remove commented out code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/41b258fa0b4aa4141280d403c6b6e1dff928cb66", "committedDate": "2020-06-15T18:38:03Z", "message": "#18599 javadoc and remove local-only changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQyNzAy", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430942702", "createdAt": "2020-06-15T19:46:47Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0Njo0N1rOGkAU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0Njo0N1rOGkAU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzI2NQ==", "bodyText": "why commented, sounds like it could be deleted at all", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440407265", "createdAt": "2020-06-15T19:46:47Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/AbstractGraphQLHttpServlet.java", "diffHunk": "@@ -1,446 +1,446 @@\n-package com.dotcms.graphql;\n-\n-import com.google.common.io.ByteStreams;\n-import com.google.common.io.CharStreams;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.Writer;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-import javax.servlet.AsyncContext;\n-import javax.servlet.Servlet;\n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.Part;\n-\n-import graphql.ExecutionResult;\n-import graphql.introspection.IntrospectionQuery;\n-import graphql.schema.GraphQLFieldDefinition;\n-import graphql.servlet.GraphQLBatchedInvocationInput;\n-import graphql.servlet.GraphQLConfiguration;\n-import graphql.servlet.GraphQLInvocationInputFactory;\n-import graphql.servlet.GraphQLMBean;\n-import graphql.servlet.GraphQLObjectMapper;\n-import graphql.servlet.GraphQLQueryInvoker;\n-import graphql.servlet.GraphQLServletListener;\n-import graphql.servlet.GraphQLSingleInvocationInput;\n-import graphql.servlet.internal.GraphQLRequest;\n-import graphql.servlet.internal.VariableMapper;\n-\n-/**\n- * @author Andrew Potter\n- */\n-public abstract class AbstractGraphQLHttpServlet extends HttpServlet implements Servlet, GraphQLMBean {\n-\n-    public static final Logger log = LoggerFactory.getLogger(AbstractGraphQLHttpServlet.class);\n-\n-    public static final String APPLICATION_JSON_UTF8 = \"application/json;charset=UTF-8\";\n-    public static final String APPLICATION_GRAPHQL = \"application/graphql\";\n-    public static final int STATUS_OK = 200;\n-    public static final int STATUS_BAD_REQUEST = 400;\n-\n-    private static final GraphQLRequest INTROSPECTION_REQUEST = new GraphQLRequest(IntrospectionQuery.INTROSPECTION_QUERY, new HashMap<>(), null);\n-    private static final String[] MULTIPART_KEYS = new String[]{\"operations\", \"graphql\", \"query\"};\n-\n-    private GraphQLConfiguration configuration;\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLQueryInvoker getQueryInvoker();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLInvocationInputFactory getInvocationInputFactory();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLObjectMapper getGraphQLObjectMapper();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract boolean isAsyncServletMode();\n-\n-    protected GraphQLConfiguration getConfiguration() {\n-        return GraphQLConfiguration.with(getInvocationInputFactory())\n-                .with(getQueryInvoker())\n-                .with(getGraphQLObjectMapper())\n-                .with(isAsyncServletMode())\n-                .with(listeners)\n-                .build();\n-    }\n-\n-    /**\n-     * @deprecated use {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    private final List<GraphQLServletListener> listeners;\n-\n-    private HttpRequestHandler getHandler;\n-    private HttpRequestHandler postHandler;\n-\n-    public AbstractGraphQLHttpServlet() {\n-        this(null);\n-    }\n-\n-    public AbstractGraphQLHttpServlet(List<GraphQLServletListener> listeners) {\n-        this.listeners = listeners != null ? new ArrayList<>(listeners) : new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void init(ServletConfig servletConfig) {\n-        this.configuration = getConfiguration();\n-\n-        this.getHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            String path = request.getPathInfo();\n-            if (path == null) {\n-                path = request.getServletPath();\n-            }\n-            if (path.contentEquals(\"/schema.json\")) {\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(INTROSPECTION_REQUEST, request, response), response);\n-            } else {\n-                String query = request.getParameter(\"query\");\n-                if (query != null) {\n-\n-                    if (isBatchedQuery(query)) {\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(graphQLObjectMapper.readBatchedGraphQLRequest(query), request, response), response);\n-                    } else {\n-                        final Map<String, Object> variables = new HashMap<>();\n-                        if (request.getParameter(\"variables\") != null) {\n-                            variables.putAll(graphQLObjectMapper.deserializeVariables(request.getParameter(\"variables\")));\n-                        }\n-\n-                        String operationName = request.getParameter(\"operationName\");\n-\n-                        query(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(new GraphQLRequest(query, variables, operationName), request, response), response);\n-                    }\n-                } else {\n-                    response.setStatus(STATUS_BAD_REQUEST);\n-                    log.info(\"Bad GET request: path was not \\\"/schema.json\\\" or no query variable named \\\"query\\\" given\");\n-                }\n-            }\n-        };\n-\n-        this.postHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            if (APPLICATION_GRAPHQL.equals(request.getContentType())) {\n-                String query = CharStreams.toString(request.getReader());\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(new GraphQLRequest(query, null, null)), response);\n-            } else if (request.getContentType() != null && request.getContentType().startsWith(\"multipart/form-data\") && !request.getParts().isEmpty()) {\n-                final Map<String, List<Part>> fileItems = request.getParts()\n-                    .stream()\n-                    .collect(Collectors.groupingBy(Part::getName));\n-\n-                for (String key : MULTIPART_KEYS) {\n-                    // Check to see if there is a part under the key we seek\n-                    if (!fileItems.containsKey(key)) {\n-                        continue;\n-                    }\n-\n-                    final Optional<Part> queryItem = getFileItem(fileItems, key);\n-                    if (!queryItem.isPresent()) {\n-                        // If there is a part, but we don't see an item, then break and return BAD_REQUEST\n-                        break;\n-                    }\n-\n-                    InputStream inputStream = asMarkableInputStream(queryItem.get().getInputStream());\n-\n-                    final Optional<Map<String, List<String>>> variablesMap =\n-                        getFileItem(fileItems, \"map\").map(graphQLObjectMapper::deserializeMultipartMap);\n-\n-                    if (isBatchedQuery(inputStream)) {\n-                        List<GraphQLRequest> graphQLRequests =\n-                            graphQLObjectMapper.readBatchedGraphQLRequest(inputStream);\n-                        variablesMap.ifPresent(map -> graphQLRequests.forEach(r -> mapMultipartVariables(r, map, fileItems)));\n-                        GraphQLBatchedInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequests, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    } else {\n-                        GraphQLRequest graphQLRequest;\n-                        if (\"query\".equals(key)) {\n-                            graphQLRequest = buildRequestFromQuery(inputStream, graphQLObjectMapper, fileItems);\n-                        } else {\n-                            graphQLRequest = graphQLObjectMapper.readGraphQLRequest(inputStream);\n-                        }\n-\n-                        variablesMap.ifPresent(m -> mapMultipartVariables(graphQLRequest, m, fileItems));\n-                        GraphQLSingleInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequest, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        query(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    }\n-                }\n-\n-                response.setStatus(STATUS_BAD_REQUEST);\n-                log.info(\"Bad POST multipart request: no part named \" + Arrays.toString(MULTIPART_KEYS));\n-            } else {\n-                // this is not a multipart request\n-                InputStream inputStream = asMarkableInputStream(request.getInputStream());\n-\n-                if (isBatchedQuery(inputStream)) {\n-                    queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readBatchedGraphQLRequest(inputStream), request, response), response);\n-                } else {\n-                    query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readGraphQLRequest(inputStream), request, response), response);\n-                }\n-            }\n-        };\n-    }\n-\n-    private static InputStream asMarkableInputStream(InputStream inputStream) {\n-        if (!inputStream.markSupported()) {\n-            inputStream = new BufferedInputStream(inputStream);\n-        }\n-        return inputStream;\n-    }\n-\n-    private GraphQLRequest buildRequestFromQuery(InputStream inputStream,\n-                                                 GraphQLObjectMapper graphQLObjectMapper,\n-                                                 Map<String, List<Part>> fileItems) throws IOException {\n-        GraphQLRequest graphQLRequest;\n-        String query = new String(ByteStreams.toByteArray(inputStream));\n-\n-        Map<String, Object> variables = null;\n-        final Optional<Part> variablesItem = getFileItem(fileItems, \"variables\");\n-        if (variablesItem.isPresent()) {\n-            variables = graphQLObjectMapper.deserializeVariables(new String(ByteStreams.toByteArray(variablesItem.get().getInputStream())));\n-        }\n-\n-        String operationName = null;\n-        final Optional<Part> operationNameItem = getFileItem(fileItems, \"operationName\");\n-        if (operationNameItem.isPresent()) {\n-            operationName = new String(ByteStreams.toByteArray(operationNameItem.get().getInputStream())).trim();\n-        }\n-\n-        graphQLRequest = new GraphQLRequest(query, variables, operationName);\n-        return graphQLRequest;\n-    }\n-\n-    private void mapMultipartVariables(GraphQLRequest request,\n-                                       Map<String, List<String>> variablesMap,\n-                                       Map<String, List<Part>> fileItems) {\n-        Map<String, Object> variables = request.getVariables();\n-\n-        variablesMap.forEach((partName, objectPaths) -> {\n-            Part part = getFileItem(fileItems, partName)\n-                    .orElseThrow(() -> new RuntimeException(\"unable to find part name \" +\n-                            partName +\n-                            \" as referenced in the variables map\"));\n-\n-            objectPaths.forEach(objectPath -> VariableMapper.mapVariable(objectPath, variables, part));\n-        });\n-    }\n-\n-    public void addListener(GraphQLServletListener servletListener) {\n-        configuration.add(servletListener);\n-    }\n-\n-    public void removeListener(GraphQLServletListener servletListener) {\n-        configuration.remove(servletListener);\n-    }\n-\n-    @Override\n-    public String[] getQueries() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getQueryType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String[] getMutations() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getMutationType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String executeQuery(String query) {\n-        try {\n-            return configuration.getObjectMapper().serializeResultAsJson(configuration.getQueryInvoker().query(configuration.getInvocationInputFactory().create(new GraphQLRequest(query, new HashMap<>(), null))));\n-        } catch (Exception e) {\n-            return e.getMessage();\n-        }\n-    }\n-\n-    private void doRequestAsync(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler) {\n-        if (configuration.isAsyncServletModeEnabled()) {\n-            AsyncContext asyncContext = request.startAsync();\n-            HttpServletRequest asyncRequest = (HttpServletRequest) asyncContext.getRequest();\n-            HttpServletResponse asyncResponse = (HttpServletResponse) asyncContext.getResponse();\n-            new Thread(() -> doRequest(asyncRequest, asyncResponse, handler, asyncContext)).start();\n-        } else {\n-            doRequest(request, response, handler, null);\n-        }\n-    }\n-\n-    private void doRequest(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler, AsyncContext asyncContext) {\n-\n-        List<GraphQLServletListener.RequestCallback> requestCallbacks = runListeners(l -> l.onRequest(request, response));\n-\n-        try {\n-            handler.handle(request, response);\n-            runCallbacks(requestCallbacks, c -> c.onSuccess(request, response));\n-        } catch (Throwable t) {\n-            response.setStatus(500);\n-            log.error(\"Error executing GraphQL request!\", t);\n-            runCallbacks(requestCallbacks, c -> c.onError(request, response, t));\n-        } finally {\n-            runCallbacks(requestCallbacks, c -> c.onFinally(request, response));\n-            if (asyncContext != null) {\n-                asyncContext.complete();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, getHandler);\n-    }\n-\n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, postHandler);\n-    }\n-\n-    private Optional<Part> getFileItem(Map<String, List<Part>> fileItems, String name) {\n-        return Optional.ofNullable(fileItems.get(name)).filter(list -> !list.isEmpty()).map(list -> list.get(0));\n-    }\n-\n-    private void query(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLSingleInvocationInput invocationInput, HttpServletResponse resp) throws IOException {\n-        ExecutionResult result = queryInvoker.query(invocationInput);\n-\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-        resp.getWriter().write(graphQLObjectMapper.serializeResultAsJson(result));\n-    }\n-\n-    private void queryBatched(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLBatchedInvocationInput invocationInput, HttpServletResponse resp) throws Exception {\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-\n-        Writer respWriter = resp.getWriter();\n-        respWriter.write('[');\n-\n-        queryInvoker.query(invocationInput, (result, hasNext) -> {\n-            respWriter.write(graphQLObjectMapper.serializeResultAsJson(result));\n-            if (hasNext) {\n-                respWriter.write(',');\n-            }\n-        });\n-\n-        respWriter.write(']');\n-    }\n-\n-    private <R> List<R> runListeners(Function<? super GraphQLServletListener, R> action) {\n-        return configuration.getListeners().stream()\n-                .map(listener -> {\n-                    try {\n-                        return action.apply(listener);\n-                    } catch (Throwable t) {\n-                        log.error(\"Error running listener: {}\", listener, t);\n-                        return null;\n-                    }\n-                })\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private <T> void runCallbacks(List<T> callbacks, Consumer<T> action) {\n-        callbacks.forEach(callback -> {\n-            try {\n-                action.accept(callback);\n-            } catch (Throwable t) {\n-                log.error(\"Error running callback: {}\", callback, t);\n-            }\n-        });\n-    }\n-\n-    private boolean isBatchedQuery(InputStream inputStream) throws IOException {\n-        if (inputStream == null) {\n-            return false;\n-        }\n-\n-        ByteArrayOutputStream result = new ByteArrayOutputStream();\n-        byte[] buffer = new byte[128];\n-        int length;\n-\n-        inputStream.mark(0);\n-        while ((length = inputStream.read(buffer)) != -1) {\n-            result.write(buffer, 0, length);\n-            String chunk = result.toString();\n-            Boolean isArrayStart = isArrayStart(chunk);\n-            if (isArrayStart != null) {\n-                inputStream.reset();\n-                return isArrayStart;\n-            }\n-        }\n-\n-        inputStream.reset();\n-        return false;\n-    }\n-\n-    private boolean isBatchedQuery(String query) {\n-        if (query == null) {\n-            return false;\n-        }\n-\n-        Boolean isArrayStart = isArrayStart(query);\n-        return isArrayStart != null && isArrayStart;\n-    }\n-\n-    // return true if the first non whitespace character is the beginning of an array\n-    private Boolean isArrayStart(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            if (!Character.isWhitespace(ch)) {\n-                return ch == '[';\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    protected interface HttpRequestHandler extends BiConsumer<HttpServletRequest, HttpServletResponse> {\n-        @Override\n-        default void accept(HttpServletRequest request, HttpServletResponse response) {\n-            try {\n-                handle(request, response);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        void handle(HttpServletRequest request, HttpServletResponse response) throws Exception;\n-    }\n-}\n+//package com.dotcms.graphql;\n+//\n+//import com.google.common.io.ByteStreams;\n+//import com.google.common.io.CharStreams;\n+//\n+//import org.slf4j.Logger;\n+//import org.slf4j.LoggerFactory;\n+//\n+//import java.io.BufferedInputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 455}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ2NzE3", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430946717", "createdAt": "2020-06-15T19:53:15Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzoxNVrOGkAhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzoxNVrOGkAhNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDQyMw==", "bodyText": "add some doc", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410423", "createdAt": "2020-06-15T19:53:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPI.java", "diffHunk": "@@ -63,6 +64,9 @@ PageView getPageMetadata(\n             final HttpServletResponse response)\n                 throws DotSecurityException, DotDataException;\n \n+    HTMLPageUrl getHtmlPageAsset(PageContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ2ODgw", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430946880", "createdAt": "2020-06-15T19:53:32Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzozMlrOGkAhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzozMlrOGkAhuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDU1Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410553", "createdAt": "2020-06-15T19:53:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -34,17 +38,22 @@ public static GraphQLObjectType createObjectType(final String typeName, final Ma\n \n     public static GraphQLObjectType createObjectType(final String typeName,\n             final Map<String, TypeFetcher> fieldsTypesAndFetchers) {\n+\n         final GraphQLObjectType.Builder builder = GraphQLObjectType.newObject().name(typeName);\n \n-        fieldsTypesAndFetchers.keySet().forEach((key)->{\n-            builder.field(newFieldDefinition()\n-                    .name(key)\n-                    .type(fieldsTypesAndFetchers.get(key).getType())\n-                    .dataFetcher(fieldsTypesAndFetchers.get(key).getDataFetcher()!=null\n-                            ?fieldsTypesAndFetchers.get(key).getDataFetcher()\n-                            :new PropertyDataFetcher<String>(key))\n-            );\n-        });\n+        for (String key : fieldsTypesAndFetchers.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ3Mjc1", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430947275", "createdAt": "2020-06-15T19:54:11Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDoxMVrOGkAi7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDoxMVrOGkAi7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDg2Mw==", "bodyText": "what is that for?", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410863", "createdAt": "2020-06-15T19:54:11Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/PageAPIGraphQLTypesProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.dotcms.graphql.business;\n+\n+import static graphql.Scalars.GraphQLBoolean;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.InterfaceType;\n+import com.dotcms.graphql.util.TypeUtil;\n+import com.dotcms.graphql.util.TypeUtil.TypeFetcher;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Singleton class that provides all the {@link GraphQLType}s needed for the Page API\n+ */\n+\n+public enum PageAPIGraphQLTypesProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ3NjI3", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430947627", "createdAt": "2020-06-15T19:54:44Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo0NVrOGkAj4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo0NVrOGkAj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTEwNg==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411106", "createdAt": "2020-06-15T19:54:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ3Njg3", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430947687", "createdAt": "2020-06-15T19:54:50Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1MFrOGkAkEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1MFrOGkAkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTE1NQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411155", "createdAt": "2020-06-15T19:54:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ3NzYy", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430947762", "createdAt": "2020-06-15T19:54:56Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1NlrOGkAkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1NlrOGkAkTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTIxNA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411214", "createdAt": "2020-06-15T19:54:56Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTQ3ODMz", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430947833", "createdAt": "2020-06-15T19:55:04Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NTowNFrOGkAkig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NTowNFrOGkAkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTI3NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411274", "createdAt": "2020-06-15T19:55:04Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            HTMLPageAsset pageAsset = pageUrl.getHTMLPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTM3NDY4", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-430937468", "createdAt": "2020-06-15T19:38:35Z", "commit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozODozNVrOGkAEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1Njo0MFrOGkAnmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjk3Mw==", "bodyText": "toolbox already has contentletAPI. Use the one from there", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440402973", "createdAt": "2020-06-15T19:38:35Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -77,6 +84,40 @@ public HTMLPageAsset fromContentlet(final Contentlet contentlet) {\n         map.put(\"statusIcons\", UtilHTML.getStatusIcons(page));\n         map.put(\"__icon__\", IconType.HTMLPAGE.iconName());\n \n+        final ContentletVersionInfo info = APILocator.getVersionableAPI().\n+                getContentletVersionInfo(page.getIdentifier(), page.getLanguageId());\n+\n+        map.put(\"workingInode\",  info.getWorkingInode());\n+        map.put(\"shortyWorking\", APILocator.getShortyAPI().shortify(info.getWorkingInode()));\n+        map.put(\"canEdit\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.EDIT.getType(), user, false));\n+        map.put(\"canRead\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.READ.getType(), user, false));\n+        map.put(\"liveInode\", info.getLiveInode());\n+        map.put(\"shortyLive\", APILocator.getShortyAPI().shortify(info.getLiveInode()));\n+        map.put(\"canLock\", canLock(page, user));\n+\n+        if(info.getLockedBy()!=null) {\n+            map.put(\"lockedOn\", info.getLockedOn());\n+            map.put(\"lockedBy\", info.getLockedBy());\n+            map.put(\"lockedByName\", getLockedByUserName(info));\n+        }\n+\n         return map;\n     }\n+\n+    private boolean canLock(final HTMLPageAsset page, User user)  {\n+        try {\n+            APILocator.getContentletAPI().canLock(page, user);\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzg2NQ==", "bodyText": "I know I broke my own rule here. But I think permissionAPI should probably be in TransformToolbox for the sake of being able to feed all services with mocks from one singe entry point,", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440403865", "createdAt": "2020-06-15T19:40:18Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -32,6 +38,7 @@\n     PageViewStrategy(final TransformToolbox toolBox) {\n         super(toolBox);\n         htmlPageCache = CacheLocator.getHTMLPageCache();\n+        permissionAPI = APILocator.getPermissionAPI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMjA1OQ==", "bodyText": "get a reference of the inner map here and over it. instead of having to do host.getMap at all times", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440412059", "createdAt": "2020-06-15T19:56:40Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/SiteFieldDataFetcher.java", "diffHunk": "@@ -13,22 +15,24 @@\n import graphql.schema.DataFetcher;\n import graphql.schema.DataFetchingEnvironment;\n \n-public class SiteFieldDataFetcher implements DataFetcher<Map<String, Object>> {\n+public class SiteFieldDataFetcher implements DataFetcher<Contentlet> {\n     @Override\n-    public Map<String, Object> get(final DataFetchingEnvironment environment) throws Exception {\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n         try {\n             final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n             final Contentlet contentlet = environment.getSource();\n-            final Map<String, Object> siteMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3a6d461133de147ed021d6065841393c5652645", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/e3a6d461133de147ed021d6065841393c5652645", "committedDate": "2020-06-16T00:47:56Z", "message": "#18599 code-review. Refactor of class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ab55fee1e1e10f4065452a9c004024276aae64d", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/1ab55fee1e1e10f4065452a9c004024276aae64d", "committedDate": "2020-06-16T15:04:23Z", "message": "#18599 add description to test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "348436052d4f3d5582dcabe0ecf93a8d599ce223", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/348436052d4f3d5582dcabe0ecf93a8d599ce223", "committedDate": "2020-06-16T18:29:24Z", "message": "#18599 fix tests in travis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/2c4acb73545fc459f553a9a119040fa91dd9afbd", "committedDate": "2020-06-17T21:07:34Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzgzNjI5", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-432783629", "createdAt": "2020-06-17T21:18:05Z", "commit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzMwNTMy", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433330532", "createdAt": "2020-06-18T14:18:18Z", "commit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoxODoxOFrOGlxgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDozNDowN1rOGlyQ2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2MTY2OQ==", "bodyText": "remove", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442261669", "createdAt": "2020-06-18T14:18:18Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -494,13 +492,13 @@ public void testGetSchema_ContentTypeOperations(final TypeTestCase testCase)\n             contentType = operation.apply(testCase.getContentTypeName(), testCase.getBaseType());\n         }\n \n-        final String contentTypeVar = contentType != null ? contentType.variable() : null;\n+//        final String contentTypeVar = contentType != null ? contentType.variable() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2ODkxOA==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442268918", "createdAt": "2020-06-18T14:27:52Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,117 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+public class DotGraphQLContext extends DefaultGraphQLContext implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NDAxMQ==", "bodyText": "why this method return null allways?", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442274011", "createdAt": "2020-06-18T14:34:07Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLSchemaProvider.java", "diffHunk": "@@ -32,6 +30,11 @@ public GraphQLSchema getSchema() {\n         }\n     }\n \n+    @Override\n+    public GraphQLSchema getReadOnlySchema() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e3078c8a02818b0a1e3b7b4d920f8e09e27340c", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/9e3078c8a02818b0a1e3b7b4d920f8e09e27340c", "committedDate": "2020-06-18T15:35:40Z", "message": "#18599 partial mods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad955cb4091fccbf472f0f0180f8e0747f902682", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/ad955cb4091fccbf472f0f0180f8e0747f902682", "committedDate": "2020-06-18T23:20:50Z", "message": "#18599 Fixes error after upgrading version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/30aeab176affaaf2610458cbcf7250a0a39c2486", "committedDate": "2020-06-18T23:21:09Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18297-page-api-graphql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6c0afb6ed750d32045544ef1c24c4b345c1744", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/8c6c0afb6ed750d32045544ef1c24c4b345c1744", "committedDate": "2020-06-18T23:32:22Z", "message": "#18599 little refactor and code-review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzEyMjQy", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433712242", "createdAt": "2020-06-18T23:32:28Z", "commit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOFrOGmDZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOFrOGmDZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc4MA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554780", "createdAt": "2020-06-18T23:32:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,117 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzEyMjQ5", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433712249", "createdAt": "2020-06-18T23:32:29Z", "commit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOVrOGmDZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOVrOGmDZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc4Nw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'graphql.schema.GraphQLFieldDefinition.newFieldDefinition'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554787", "createdAt": "2020-06-18T23:32:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "diffHunk": "@@ -5,6 +5,7 @@\n import static graphql.Scalars.GraphQLFloat;\n import static graphql.Scalars.GraphQLInt;\n import static graphql.Scalars.GraphQLString;\n+import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzEyMjUz", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433712253", "createdAt": "2020-06-18T23:32:30Z", "commit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMVrOGmDZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMVrOGmDZpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc5MQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'graphql.schema.PropertyDataFetcher'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554791", "createdAt": "2020-06-18T23:32:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "diffHunk": "@@ -35,18 +36,20 @@\n import com.dotcms.graphql.datafetcher.TagsFieldDataFetcher;\n import com.dotcms.graphql.exception.FieldGenerationException;\n import com.dotcms.graphql.exception.TypeGenerationException;\n+import com.dotcms.graphql.util.TypeUtil;\n import com.dotcms.util.DotPreconditions;\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.util.Logger;\n import com.dotmarketing.util.UtilMethods;\n import com.google.common.annotations.VisibleForTesting;\n-import graphql.scalars.ExtendedScalars;\n+import graphql.GraphQLException;\n import graphql.schema.DataFetcher;\n import graphql.schema.GraphQLFieldDefinition;\n import graphql.schema.GraphQLObjectType;\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.GraphQLType;\n+import graphql.schema.PropertyDataFetcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzEyMjU5", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433712259", "createdAt": "2020-06-18T23:32:32Z", "commit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMlrOGmDZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMlrOGmDZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc5OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554798", "createdAt": "2020-06-18T23:32:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            final HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            final HTMLPageAsset pageAsset = pageUrl.getHTMLPage();\n+            pageAsset.getMap().put(\"URLMapContent\", pageUrl.getUrlMapInfo());\n+\n+            final DotContentletTransformer transformer = new DotTransformerBuilder()\n+                    .graphQLDataFetchOptions().content(pageAsset).forUser(user).build();\n+\n+            return transformer.hydrate().get(0);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc", "author": {"user": {"login": "dsilvam", "name": "Daniel Silva"}}, "url": "https://github.com/dotCMS/core/commit/21b2d30489334b10b94bfc4b617a74a6392d4adc", "committedDate": "2020-06-18T23:33:25Z", "message": "#18599 remove unused imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTA3", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715907", "createdAt": "2020-06-18T23:43:17Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxN1rOGmDl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxN1rOGmDl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkxNQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557915", "createdAt": "2020-06-18T23:43:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,121 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+/**\n+ * Extends the {@link DefaultGraphQLContext} to be able to set the dotCMS user and have it\n+ * available from the different {@link graphql.schema.DataFetcher}s\n+ */\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTE2", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715916", "createdAt": "2020-06-18T23:43:18Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxOFrOGmDl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxOFrOGmDl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkyMQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.jetbrains.annotations.NotNull'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557921", "createdAt": "2020-06-18T23:43:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -10,6 +18,8 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.PropertyDataFetcher;\n import graphql.schema.TypeResolver;\n+import java.util.Map.Entry;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTIz", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715923", "createdAt": "2020-06-18T23:43:19Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMFrOGmDl5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMFrOGmDl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkyNg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.graphql.InterfaceType'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557926", "createdAt": "2020-06-18T23:43:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTI4", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715928", "createdAt": "2020-06-18T23:43:21Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMVrOGmDl7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMVrOGmDl7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkzNA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.UtilMethods'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557934", "createdAt": "2020-06-18T23:43:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;\n import com.dotcms.graphql.datafetcher.FieldDataFetcher;\n \n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTQw", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715940", "createdAt": "2020-06-18T23:43:22Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMlrOGmDl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMlrOGmDl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk0NQ==", "bodyText": "Codacy found an issue: Field description has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557945", "createdAt": "2020-06-18T23:43:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/TypeTestCase.java", "diffHunk": "@@ -59,6 +61,7 @@ public BaseContentType getBaseType() {\n         private String fieldVarName;\n         private Class<? extends Field> fieldType;\n         private boolean fieldRequired;\n+        private String description;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTQ3", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715947", "createdAt": "2020-06-18T23:43:23Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyM1rOGmDl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyM1rOGmDl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk0OQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557949", "createdAt": "2020-06-18T23:43:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,121 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+/**\n+ * Extends the {@link DefaultGraphQLContext} to be able to set the dotCMS user and have it\n+ * available from the different {@link graphql.schema.DataFetcher}s\n+ */\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTUz", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715953", "createdAt": "2020-06-18T23:43:24Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNFrOGmDmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNFrOGmDmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk1Mg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.util.DotPreconditions'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557952", "createdAt": "2020-06-18T23:43:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;\n import com.dotcms.graphql.datafetcher.FieldDataFetcher;\n \n+import com.dotcms.util.DotPreconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTYx", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715961", "createdAt": "2020-06-18T23:43:25Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNVrOGmDmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNVrOGmDmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk1OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557958", "createdAt": "2020-06-18T23:43:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            final HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            final HTMLPageAsset pageAsset = pageUrl.getHTMLPage();\n+            pageAsset.getMap().put(\"URLMapContent\", pageUrl.getUrlMapInfo());\n+\n+            final DotContentletTransformer transformer = new DotTransformerBuilder()\n+                    .graphQLDataFetchOptions().content(pageAsset).forUser(user).build();\n+\n+            return transformer.hydrate().get(0);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTY1", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715965", "createdAt": "2020-06-18T23:43:26Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNlrOGmDmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNlrOGmDmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk2MA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Map.Entry'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557960", "createdAt": "2020-06-18T23:43:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -10,6 +18,8 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.PropertyDataFetcher;\n import graphql.schema.TypeResolver;\n+import java.util.Map.Entry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzE1OTcw", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-433715970", "createdAt": "2020-06-18T23:43:27Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyN1rOGmDmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyN1rOGmDmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk2NQ==", "bodyText": "Codacy found an issue: Field page has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557965", "createdAt": "2020-06-18T23:43:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -196,7 +192,7 @@ public Contentlet getUrlContent() {\n         private  Template template;\n         // The map of Containers and their respective relationships with Content Types\n         private  Collection<? extends ContainerRaw> containers;\n-        private  HTMLPageAssetInfo page;\n+        private  HTMLPageAsset page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDk3Mzk0", "url": "https://github.com/dotCMS/core/pull/18651#pullrequestreview-434097394", "createdAt": "2020-06-19T13:56:13Z", "commit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 932, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}