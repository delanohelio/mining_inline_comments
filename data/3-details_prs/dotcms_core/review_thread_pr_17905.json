{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTQ5MjM1", "number": 17905, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyMVrODakNFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyOFrODakNLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyMVrOFhlwuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyMVrOFhlwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAwOQ==", "bodyText": "Issue found: Local variable 'jsonFactoryField' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766009", "createdAt": "2020-01-24T18:01:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyM1rOFhlwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjo0NToyMVrOF-y2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAxNQ==", "bodyText": "Issue found: Local variable 'x' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766015", "createdAt": "2020-01-24T18:01:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM4OTE5Ng==", "bodyText": "yeah x is not a good name", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r401389196", "createdAt": "2020-04-01T06:45:21Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAxNQ=="}, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNVrOFhlwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNVrOFhlwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAyNQ==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766025", "createdAt": "2020-01-24T18:01:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);\n+\n+            // set the value\n+            Logger.info(RestHighLevelClientProvider.class, \"disabling String.intern() in Jackson\");\n+            jsonFactory.configure(JsonFactory.Feature.INTERN_FIELD_NAMES, false);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNlrOFhlw1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyNlrOFhlw1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjAzNw==", "bodyText": "Issue found: Avoid variables with short names like x", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766037", "createdAt": "2020-01-24T18:01:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzYyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyN1rOFhlw2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyN1rOFhlw2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA0Mg==", "bodyText": "Issue found: Local variable 'jsonFactory' could be declared final", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766042", "createdAt": "2020-01-24T18:01:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();\n+\n+            // get a handle on the field\n+            Field jsonFactoryField = JsonXContent.class.getDeclaredField(\"jsonFactory\");\n+            jsonFactoryField.setAccessible(true);\n+            JsonFactory jsonFactory = (JsonFactory) jsonFactoryField.get(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgyNzY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyOFrOFhlw4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowMToyOFrOFhlw4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjA1MA==", "bodyText": "Issue found: Avoid unused local variables such as 'x'.", "url": "https://github.com/dotCMS/core/pull/17905#discussion_r370766050", "createdAt": "2020-01-24T18:01:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/RestHighLevelClientProvider.java", "diffHunk": "@@ -15,25 +19,64 @@\n \n     public static RestHighLevelClientProvider getInstance() {\n         if (INSTANCE == null) {\n-            final String providerClassName = Config\n-                    .getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n-                            \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n-            try {\n-                INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName))\n-                        .newInstance();\n-                Logger.info(DotRestHighLevelClientProvider.class,\n-                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n-            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-                INSTANCE = new DotRestHighLevelClientProvider();\n-                Logger.error(RestHighLevelClientProvider.class,\n-                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n-                                + providerClassName + \"].\", e);\n+            synchronized (RestHighLevelClientProvider.class) {\n+                if (INSTANCE == null) {\n+\n+                    final String providerClassName = Config.getStringProperty(\"ES_REST_CLIENT_PROVIDER_CLASS\",\n+                                    \"com.dotcms.content.elasticsearch.util.DotRestHighLevelClientProvider\");\n+\n+                    disableStringIntern();\n+\n+                    try {\n+                        INSTANCE = ((Class<RestHighLevelClientProvider>) Class.forName(providerClassName)).newInstance();\n+                        Logger.info(DotRestHighLevelClientProvider.class,\n+                                        \"RestHighLevelClientProvider \" + providerClassName + \" loaded successfully\");\n+                    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+                        INSTANCE = new DotRestHighLevelClientProvider();\n+                        Logger.error(RestHighLevelClientProvider.class,\n+                                        \"Unable to get the class reference for the RestHighLevelClientProvider  [\"\n+                                                        + providerClassName + \"].\",\n+                                        e);\n+                    }\n+                }\n             }\n         }\n-\n+        \n         return INSTANCE;\n     }\n \n+    /**\n+     * This method uses reflection to disable String.intern in elasticsearch's Jackson JsonFactory\n+     * instance. If this method fails for any reason, it is not tragic, just not optimal. Also, this is\n+     * hard to test for - the only indication that any change has happened to the JsonFactory is an\n+     * inner flag on the JsonFactory object itself\n+     * \n+     * @return\n+     */\n+    private static boolean disableStringIntern() {\n+        try {\n+            // init the static field\n+            XContentBuilder x = JsonXContent.contentBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656602da53ead103e1cea592f35b9854f4093b0d"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2509, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}