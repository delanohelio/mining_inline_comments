{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTQ0MjAy", "number": 18150, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozODozMVrODpNqrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxNFrODqnKLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTQyMTI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozODozMVrOF4P-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozODozMVrOF4P-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNjIxMg==", "bodyText": "I think we should add here detail about what this task do\nfor example\n\nremove the load_records_to_index function if it exists", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r394526212", "createdAt": "2020-03-18T17:38:31Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n+\n+/**\n+ * Remove {@code load_records_to_index} stored procedure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612414de271a7710cb1df3f71d583b8f80d2d99e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTQyNDMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozOToyM1rOF4QACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzozOToyM1rOF4QACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNjczMQ==", "bodyText": "is it possible do a test?, maybe we can run the Task manually and check that the data base have the change that we expect", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r394526731", "createdAt": "2020-03-18T17:39:23Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotmarketing.startup.runonce;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612414de271a7710cb1df3f71d583b8f80d2d99e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODUwNTQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo0Mzo0MVrOF6OQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTo0NTo0M1rOF6Vfmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NTQzMQ==", "bodyText": "Looks like this run on an already altered db. We could put it in the previous state and run the upgrade task to actually test it did the modification.", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396595431", "createdAt": "2020-03-23T16:43:41Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05205UpdateIndexNameLengthTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private Map<String, String> getColumnPropertiesAfterUpgrade() throws DotDataException {\n+        String query;\n+\n+        if (!DbConnectionFactory.getDBType().equals(\"Oracle\")){\n+            query = \"select character_maximum_length as field_length, is_nullable as nullable_value from \"\n+                    + \"information_schema.columns where table_name = 'indicies' \"\n+                    + \"and column_name='index_name'\";\n+        } else {\n+            query = \"SELECT DATA_LENGTH as field_length, NULLABLE as nullable_value \"\n+                    + \"FROM user_tab_columns WHERE table_name = 'INDICIES' \"\n+                    + \"AND column_name = 'INDEX_NAME'\";\n+        }\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(query);\n+        return (Map<String, String>)dotConnect.loadResults().get(0);\n+\n+    }\n+\n+    @Test\n+    public void testUpgradeTaskShouldPass() throws DotDataException {\n+        final Task05205UpdateIndexNameLength task = new Task05205UpdateIndexNameLength();\n+\n+        task.executeUpgrade();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4323b684162390ac9e5c2d39e0cb63cbca1576d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxMzg4Mg==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396713882", "createdAt": "2020-03-23T19:45:43Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05205UpdateIndexNameLengthTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private Map<String, String> getColumnPropertiesAfterUpgrade() throws DotDataException {\n+        String query;\n+\n+        if (!DbConnectionFactory.getDBType().equals(\"Oracle\")){\n+            query = \"select character_maximum_length as field_length, is_nullable as nullable_value from \"\n+                    + \"information_schema.columns where table_name = 'indicies' \"\n+                    + \"and column_name='index_name'\";\n+        } else {\n+            query = \"SELECT DATA_LENGTH as field_length, NULLABLE as nullable_value \"\n+                    + \"FROM user_tab_columns WHERE table_name = 'INDICIES' \"\n+                    + \"AND column_name = 'INDEX_NAME'\";\n+        }\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(query);\n+        return (Map<String, String>)dotConnect.loadResults().get(0);\n+\n+    }\n+\n+    @Test\n+    public void testUpgradeTaskShouldPass() throws DotDataException {\n+        final Task05205UpdateIndexNameLength task = new Task05205UpdateIndexNameLength();\n+\n+        task.executeUpgrade();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NTQzMQ=="}, "originalCommit": {"oid": "a4323b684162390ac9e5c2d39e0cb63cbca1576d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNFrOF6d2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNFrOF6d2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDc5OA==", "bodyText": "Issue found: Avoid variables with short names like dc", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850798", "createdAt": "2020-03-24T01:17:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05225RemoveLoadRecordsToIndexTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testUpgradeTaskShouldPass() throws DotDataException, SQLException {\n+\n+        createLoadRecordsToIndexProcedure();\n+        final Task05225RemoveLoadRecordsToIndex task = new Task05225RemoveLoadRecordsToIndex();\n+        task.executeUpgrade();\n+        assertFalse(procedureExists());\n+\n+    }\n+\n+    private void createLoadRecordsToIndexProcedure() throws SQLException {\n+        String script = null;\n+\n+        switch (DbConnectionFactory.getDBType()){\n+            case \"MySQL\":\n+                script = getMySQLScript();\n+                break;\n+\n+            case \"PostgreSQL\":\n+                script = getPostgreSQLScript();\n+                break;\n+\n+            case \"Oracle\":\n+                script = getOracleScript();\n+                break;\n+\n+            case \"Microsoft SQL Server\":\n+                script = getSQLServerScript();\n+                break;\n+        }\n+\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.executeStatement(script);\n+\n+    }\n+\n+    private String getOracleScript() {\n+        return \"CREATE OR REPLACE FUNCTION load_records_to_index(server_id VARCHAR2, records_to_fetch NUMBER, priority_level NUMBER)\\n\"\n+                + \"   RETURN types.ref_cursor IS\\n\"\n+                + \" cursor_ret types.ref_cursor;\\n\"\n+                + \" data_ret reindex_record_list;\\n\"\n+                + \"BEGIN\\n\"\n+                + \"  data_ret := reindex_record_list();\\n\"\n+                + \"  FOR dj in (SELECT * FROM dist_reindex_journal\\n\"\n+                + \"         WHERE serverid IS NULL AND priority <= priority_level AND rownum<=records_to_fetch\\n\"\n+                + \"         ORDER BY priority ASC\\n\"\n+                + \"         FOR UPDATE)\\n\"\n+                + \"  LOOP\\n\"\n+                + \"    UPDATE dist_reindex_journal SET serverid=server_id WHERE id=dj.id;\\n\"\n+                + \"    data_ret.extend;\\n\"\n+                + \"    data_ret(data_ret.Last) := reindex_record(dj.id,dj.inode_to_index,dj.ident_to_index,dj.priority,dj.dist_action);\\n\"\n+                + \"  END LOOP;\\n\"\n+                + \"  OPEN cursor_ret FOR\\n\"\n+                + \"    SELECT * FROM TABLE(CAST(data_ret AS reindex_record_list));\\n\"\n+                + \"  RETURN cursor_ret;\\n\"\n+                + \"END;\";\n+    }\n+\n+    private String getPostgreSQLScript() {\n+        return \"CREATE OR REPLACE FUNCTION load_records_to_index(server_id character varying, records_to_fetch int, priority_level int)\\n\"\n+                + \"  RETURNS SETOF dist_reindex_journal AS'\\n\"\n+                + \"DECLARE\\n\"\n+                + \"   dj dist_reindex_journal;\\n\"\n+                + \"BEGIN\\n\"\n+                + \"\\n\"\n+                + \"    FOR dj IN SELECT * FROM dist_reindex_journal\\n\"\n+                + \"       WHERE serverid IS NULL\\n\"\n+                + \"       AND priority <= priority_level\\n\"\n+                + \"       ORDER BY priority ASC\\n\"\n+                + \"       LIMIT records_to_fetch\\n\"\n+                + \"       FOR UPDATE\\n\"\n+                + \"    LOOP\\n\"\n+                + \"        UPDATE dist_reindex_journal SET serverid=server_id WHERE id=dj.id;\\n\"\n+                + \"        RETURN NEXT dj;\\n\"\n+                + \"    END LOOP;\\n\"\n+                + \"\\n\"\n+                + \"END'\"\n+                + \"LANGUAGE plpgsql;\";\n+    }\n+\n+    private String getSQLServerScript() {\n+        return \"CREATE PROCEDURE load_records_to_index(@server_id NVARCHAR(100), @records_to_fetch INT, @priority_level INT)\\n\"\n+                + \"AS\\n\"\n+                + \"BEGIN\\n\"\n+                + \"WITH cte AS (\\n\"\n+                + \"  SELECT TOP(@records_to_fetch) *\\n\"\n+                + \"  FROM dist_reindex_journal WITH (ROWLOCK, READPAST, UPDLOCK)\\n\"\n+                + \"  WHERE serverid IS NULL\\n\"\n+                + \"  AND priority <= @priority_level\\n\"\n+                + \"  ORDER BY priority ASC)\\n\"\n+                + \"UPDATE cte\\n\"\n+                + \"  SET serverid=@server_id\\n\"\n+                + \"OUTPUT\\n\"\n+                + \"  INSERTED.*\\n\"\n+                + \"END;\";\n+    }\n+\n+    private String getMySQLScript() {\n+        return \"CREATE PROCEDURE load_records_to_index(IN server_id VARCHAR(100), IN records_to_fetch INT, IN priority_level INT)\\n\"\n+                + \"BEGIN\\n\"\n+                + \"DECLARE v_id BIGINT;\\n\"\n+                + \"DECLARE v_inode_to_index VARCHAR(100);\\n\"\n+                + \"DECLARE v_ident_to_index VARCHAR(100);\\n\"\n+                + \"DECLARE v_serverid VARCHAR(64);\\n\"\n+                + \"DECLARE v_priority INT;\\n\"\n+                + \"DECLARE v_time_entered TIMESTAMP;\\n\"\n+                + \"DECLARE v_index_val VARCHAR(325);\\n\"\n+                + \"DECLARE v_dist_action INT;\\n\"\n+                + \"DECLARE cursor_end BOOL DEFAULT FALSE;\\n\"\n+                + \"DECLARE cur1 CURSOR FOR SELECT * FROM dist_reindex_journal WHERE serverid IS NULL or serverid='' AND priority <= priority_level ORDER BY priority ASC LIMIT records_to_fetch;\\n\"\n+                + \"DECLARE CONTINUE HANDLER FOR NOT FOUND SET cursor_end:=TRUE;\\n\"\n+                + \"\\n\"\n+                + \"DROP TEMPORARY TABLE IF EXISTS tmp_records_reindex;\\n\"\n+                + \"CREATE TEMPORARY TABLE tmp_records_reindex (\\n\"\n+                + \"  id BIGINT PRIMARY KEY,\\n\"\n+                + \"  inode_to_index varchar(36),\\n\"\n+                + \"  ident_to_index varchar(36),\\n\"\n+                + \"  dist_action INT,\\n\"\n+                + \"  priority INT\\n\"\n+                + \") ENGINE=MEMORY;\\n\"\n+                + \"\\n\"\n+                + \"OPEN cur1;\\n\"\n+                + \"WHILE (NOT cursor_end) DO\\n\"\n+                + \"  FETCH cur1 INTO v_id,v_inode_to_index,v_ident_to_index,v_serverid,v_priority,v_time_entered,v_index_val,v_dist_action;\\n\"\n+                + \"  IF (NOT cursor_end) THEN\\n\"\n+                + \"    UPDATE dist_reindex_journal SET serverid=server_id WHERE id=v_id;\\n\"\n+                + \"    INSERT INTO tmp_records_reindex VALUES (v_id, v_inode_to_index, v_ident_to_index, v_dist_action, v_priority);\\n\"\n+                + \"  END IF;\\n\"\n+                + \"END WHILE;\\n\"\n+                + \"CLOSE cur1;\\n\"\n+                + \"\\n\"\n+                + \"SELECT * FROM tmp_records_reindex;\\n\"\n+                + \"END;\";\n+    }\n+\n+    private boolean procedureExists() throws DotDataException {\n+        String query = null;\n+\n+        switch (DbConnectionFactory.getDBType()){\n+            case \"MySQL\":\n+                query = \"SHOW PROCEDURE STATUS WHERE name = 'load_records_to_index';\";\n+                break;\n+\n+            case \"PostgreSQL\":\n+                query = \"SELECT * FROM information_schema.routines where routine_name='load_records_to_index'\";\n+                break;\n+\n+            case \"Oracle\":\n+                query = \"select * from dba_objects where object_type = 'FUNCTION' and  object_name='LOAD_RECORDS_TO_INDEX'\";\n+                break;\n+\n+            case \"Microsoft SQL Server\":\n+                query = \"select * from sys.objects obj where obj.type in ('P', 'X') and obj.name = 'load_records_to_index'\";\n+                break;\n+        }\n+\n+        final DotConnect dc = new DotConnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNVrOF6d2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNVrOF6d2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgwMA==", "bodyText": "Issue found: The String literal \"BEGIN\\n\" appears 4 times in this file; the first occurrence is on line 62", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850800", "createdAt": "2020-03-24T01:17:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05225RemoveLoadRecordsToIndexTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testUpgradeTaskShouldPass() throws DotDataException, SQLException {\n+\n+        createLoadRecordsToIndexProcedure();\n+        final Task05225RemoveLoadRecordsToIndex task = new Task05225RemoveLoadRecordsToIndex();\n+        task.executeUpgrade();\n+        assertFalse(procedureExists());\n+\n+    }\n+\n+    private void createLoadRecordsToIndexProcedure() throws SQLException {\n+        String script = null;\n+\n+        switch (DbConnectionFactory.getDBType()){\n+            case \"MySQL\":\n+                script = getMySQLScript();\n+                break;\n+\n+            case \"PostgreSQL\":\n+                script = getPostgreSQLScript();\n+                break;\n+\n+            case \"Oracle\":\n+                script = getOracleScript();\n+                break;\n+\n+            case \"Microsoft SQL Server\":\n+                script = getSQLServerScript();\n+                break;\n+        }\n+\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.executeStatement(script);\n+\n+    }\n+\n+    private String getOracleScript() {\n+        return \"CREATE OR REPLACE FUNCTION load_records_to_index(server_id VARCHAR2, records_to_fetch NUMBER, priority_level NUMBER)\\n\"\n+                + \"   RETURN types.ref_cursor IS\\n\"\n+                + \" cursor_ret types.ref_cursor;\\n\"\n+                + \" data_ret reindex_record_list;\\n\"\n+                + \"BEGIN\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNlrOF6d2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowNlrOF6d2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgwMg==", "bodyText": "Issue found: This final field could be made static", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850802", "createdAt": "2020-03-24T01:17:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n+\n+/**\n+ * Remove {@code load_records_to_index} stored procedure\n+ *\n+ * @author nollymar\n+ */\n+public class Task05225RemoveLoadRecordsToIndex extends AbstractJDBCStartupTask {\n+\n+    private final String POSTGRES_SCRIPT = \"DROP FUNCTION IF EXISTS load_records_to_index;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowN1rOF6d2fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowN1rOF6d2fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgxMg==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850812", "createdAt": "2020-03-24T01:17:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05205UpdateIndexNameLengthTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowOFrOF6d2gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowOFrOF6d2gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgxOA==", "bodyText": "Issue found: The String literal \"Oracle\" appears 4 times in this file; the first occurrence is on line 25", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850818", "createdAt": "2020-03-24T01:17:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05205UpdateIndexNameLengthTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private Map<String, String> getColumnProperties() throws DotDataException {\n+        String query;\n+\n+        if (!DbConnectionFactory.getDBType().equals(\"Oracle\")){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzUzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowOVrOF6d2hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzowOVrOF6d2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgyMw==", "bodyText": "Issue found: This final field could be made static", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850823", "createdAt": "2020-03-24T01:17:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n+\n+/**\n+ * Remove {@code load_records_to_index} stored procedure\n+ *\n+ * @author nollymar\n+ */\n+public class Task05225RemoveLoadRecordsToIndex extends AbstractJDBCStartupTask {\n+\n+    private final String POSTGRES_SCRIPT = \"DROP FUNCTION IF EXISTS load_records_to_index;\";\n+\n+    private final String MYSQL_SCRIPT = \"DROP PROCEDURE IF EXISTS load_records_to_index;\";\n+\n+    private final String MSSQL_SCRIPT =\n+            \"IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'load_records_to_index')\\n\"\n+                    + \"DROP PROCEDURE load_records_to_index;\";\n+\n+\n+    private final String ORACLE_SCRIPT = \"DROP FUNCTION load_records_to_index\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxMFrOF6d2iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxMFrOF6d2iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgyNw==", "bodyText": "Issue found: Switch statements should have a default label", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850827", "createdAt": "2020-03-24T01:17:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05225RemoveLoadRecordsToIndexTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void testUpgradeTaskShouldPass() throws DotDataException, SQLException {\n+\n+        createLoadRecordsToIndexProcedure();\n+        final Task05225RemoveLoadRecordsToIndex task = new Task05225RemoveLoadRecordsToIndex();\n+        task.executeUpgrade();\n+        assertFalse(procedureExists());\n+\n+    }\n+\n+    private void createLoadRecordsToIndexProcedure() throws SQLException {\n+        String script = null;\n+\n+        switch (DbConnectionFactory.getDBType()){\n+            case \"MySQL\":\n+                script = getMySQLScript();\n+                break;\n+\n+            case \"PostgreSQL\":\n+                script = getPostgreSQLScript();\n+                break;\n+\n+            case \"Oracle\":\n+                script = getOracleScript();\n+                break;\n+\n+            case \"Microsoft SQL Server\":\n+                script = getSQLServerScript();\n+                break;\n+        }\n+\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.executeStatement(script);\n+\n+    }\n+\n+    private String getOracleScript() {\n+        return \"CREATE OR REPLACE FUNCTION load_records_to_index(server_id VARCHAR2, records_to_fetch NUMBER, priority_level NUMBER)\\n\"\n+                + \"   RETURN types.ref_cursor IS\\n\"\n+                + \" cursor_ret types.ref_cursor;\\n\"\n+                + \" data_ret reindex_record_list;\\n\"\n+                + \"BEGIN\\n\"\n+                + \"  data_ret := reindex_record_list();\\n\"\n+                + \"  FOR dj in (SELECT * FROM dist_reindex_journal\\n\"\n+                + \"         WHERE serverid IS NULL AND priority <= priority_level AND rownum<=records_to_fetch\\n\"\n+                + \"         ORDER BY priority ASC\\n\"\n+                + \"         FOR UPDATE)\\n\"\n+                + \"  LOOP\\n\"\n+                + \"    UPDATE dist_reindex_journal SET serverid=server_id WHERE id=dj.id;\\n\"\n+                + \"    data_ret.extend;\\n\"\n+                + \"    data_ret(data_ret.Last) := reindex_record(dj.id,dj.inode_to_index,dj.ident_to_index,dj.priority,dj.dist_action);\\n\"\n+                + \"  END LOOP;\\n\"\n+                + \"  OPEN cursor_ret FOR\\n\"\n+                + \"    SELECT * FROM TABLE(CAST(data_ret AS reindex_record_list));\\n\"\n+                + \"  RETURN cursor_ret;\\n\"\n+                + \"END;\";\n+    }\n+\n+    private String getPostgreSQLScript() {\n+        return \"CREATE OR REPLACE FUNCTION load_records_to_index(server_id character varying, records_to_fetch int, priority_level int)\\n\"\n+                + \"  RETURNS SETOF dist_reindex_journal AS'\\n\"\n+                + \"DECLARE\\n\"\n+                + \"   dj dist_reindex_journal;\\n\"\n+                + \"BEGIN\\n\"\n+                + \"\\n\"\n+                + \"    FOR dj IN SELECT * FROM dist_reindex_journal\\n\"\n+                + \"       WHERE serverid IS NULL\\n\"\n+                + \"       AND priority <= priority_level\\n\"\n+                + \"       ORDER BY priority ASC\\n\"\n+                + \"       LIMIT records_to_fetch\\n\"\n+                + \"       FOR UPDATE\\n\"\n+                + \"    LOOP\\n\"\n+                + \"        UPDATE dist_reindex_journal SET serverid=server_id WHERE id=dj.id;\\n\"\n+                + \"        RETURN NEXT dj;\\n\"\n+                + \"    END LOOP;\\n\"\n+                + \"\\n\"\n+                + \"END'\"\n+                + \"LANGUAGE plpgsql;\";\n+    }\n+\n+    private String getSQLServerScript() {\n+        return \"CREATE PROCEDURE load_records_to_index(@server_id NVARCHAR(100), @records_to_fetch INT, @priority_level INT)\\n\"\n+                + \"AS\\n\"\n+                + \"BEGIN\\n\"\n+                + \"WITH cte AS (\\n\"\n+                + \"  SELECT TOP(@records_to_fetch) *\\n\"\n+                + \"  FROM dist_reindex_journal WITH (ROWLOCK, READPAST, UPDLOCK)\\n\"\n+                + \"  WHERE serverid IS NULL\\n\"\n+                + \"  AND priority <= @priority_level\\n\"\n+                + \"  ORDER BY priority ASC)\\n\"\n+                + \"UPDATE cte\\n\"\n+                + \"  SET serverid=@server_id\\n\"\n+                + \"OUTPUT\\n\"\n+                + \"  INSERTED.*\\n\"\n+                + \"END;\";\n+    }\n+\n+    private String getMySQLScript() {\n+        return \"CREATE PROCEDURE load_records_to_index(IN server_id VARCHAR(100), IN records_to_fetch INT, IN priority_level INT)\\n\"\n+                + \"BEGIN\\n\"\n+                + \"DECLARE v_id BIGINT;\\n\"\n+                + \"DECLARE v_inode_to_index VARCHAR(100);\\n\"\n+                + \"DECLARE v_ident_to_index VARCHAR(100);\\n\"\n+                + \"DECLARE v_serverid VARCHAR(64);\\n\"\n+                + \"DECLARE v_priority INT;\\n\"\n+                + \"DECLARE v_time_entered TIMESTAMP;\\n\"\n+                + \"DECLARE v_index_val VARCHAR(325);\\n\"\n+                + \"DECLARE v_dist_action INT;\\n\"\n+                + \"DECLARE cursor_end BOOL DEFAULT FALSE;\\n\"\n+                + \"DECLARE cur1 CURSOR FOR SELECT * FROM dist_reindex_journal WHERE serverid IS NULL or serverid='' AND priority <= priority_level ORDER BY priority ASC LIMIT records_to_fetch;\\n\"\n+                + \"DECLARE CONTINUE HANDLER FOR NOT FOUND SET cursor_end:=TRUE;\\n\"\n+                + \"\\n\"\n+                + \"DROP TEMPORARY TABLE IF EXISTS tmp_records_reindex;\\n\"\n+                + \"CREATE TEMPORARY TABLE tmp_records_reindex (\\n\"\n+                + \"  id BIGINT PRIMARY KEY,\\n\"\n+                + \"  inode_to_index varchar(36),\\n\"\n+                + \"  ident_to_index varchar(36),\\n\"\n+                + \"  dist_action INT,\\n\"\n+                + \"  priority INT\\n\"\n+                + \") ENGINE=MEMORY;\\n\"\n+                + \"\\n\"\n+                + \"OPEN cur1;\\n\"\n+                + \"WHILE (NOT cursor_end) DO\\n\"\n+                + \"  FETCH cur1 INTO v_id,v_inode_to_index,v_ident_to_index,v_serverid,v_priority,v_time_entered,v_index_val,v_dist_action;\\n\"\n+                + \"  IF (NOT cursor_end) THEN\\n\"\n+                + \"    UPDATE dist_reindex_journal SET serverid=server_id WHERE id=v_id;\\n\"\n+                + \"    INSERT INTO tmp_records_reindex VALUES (v_id, v_inode_to_index, v_ident_to_index, v_dist_action, v_priority);\\n\"\n+                + \"  END IF;\\n\"\n+                + \"END WHILE;\\n\"\n+                + \"CLOSE cur1;\\n\"\n+                + \"\\n\"\n+                + \"SELECT * FROM tmp_records_reindex;\\n\"\n+                + \"END;\";\n+    }\n+\n+    private boolean procedureExists() throws DotDataException {\n+        String query = null;\n+\n+        switch (DbConnectionFactory.getDBType()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxMlrOF6d2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxMlrOF6d2kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgzMw==", "bodyText": "Issue found: This final field could be made static", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850833", "createdAt": "2020-03-24T01:17:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndex.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotmarketing.startup.AbstractJDBCStartupTask;\n+import java.util.List;\n+\n+/**\n+ * Remove {@code load_records_to_index} stored procedure\n+ *\n+ * @author nollymar\n+ */\n+public class Task05225RemoveLoadRecordsToIndex extends AbstractJDBCStartupTask {\n+\n+    private final String POSTGRES_SCRIPT = \"DROP FUNCTION IF EXISTS load_records_to_index;\";\n+\n+    private final String MYSQL_SCRIPT = \"DROP PROCEDURE IF EXISTS load_records_to_index;\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxM1rOF6d2lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxM1rOF6d2lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDgzOA==", "bodyText": "Issue found: Switch statements should have a default label", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850838", "createdAt": "2020-03-24T01:17:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05205UpdateIndexNameLengthTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05205UpdateIndexNameLengthTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    private Map<String, String> getColumnProperties() throws DotDataException {\n+        String query;\n+\n+        if (!DbConnectionFactory.getDBType().equals(\"Oracle\")){\n+            query = \"select character_maximum_length as field_length, is_nullable as nullable_value from \"\n+                    + \"information_schema.columns where table_name = 'indicies' \"\n+                    + \"and column_name='index_name'\";\n+        } else {\n+            query = \"SELECT DATA_LENGTH as field_length, NULLABLE as nullable_value \"\n+                    + \"FROM user_tab_columns WHERE table_name = 'INDICIES' \"\n+                    + \"AND column_name = 'INDEX_NAME'\";\n+        }\n+        final DotConnect dotConnect = new DotConnect();\n+        dotConnect.setSQL(query);\n+        return (Map<String, String>)dotConnect.loadResults().get(0);\n+\n+    }\n+\n+    private void setStateBeforeUpgrade() throws SQLException {\n+        String query = null;\n+\n+        switch(DbConnectionFactory.getDBType()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDA4MzY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxNFrOF6d2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMToxNzoxNFrOF6d2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg1MDg0MQ==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18150#discussion_r396850841", "createdAt": "2020-03-24T01:17:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task05225RemoveLoadRecordsToIndexTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.common.db.DotConnect;\n+import com.dotmarketing.db.DbConnectionFactory;\n+import com.dotmarketing.exception.DotDataException;\n+import java.sql.SQLException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task05225RemoveLoadRecordsToIndexTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3246a81be88d8914b4a4bd0f998946484405d1"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2389, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}