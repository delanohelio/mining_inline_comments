{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzc1NzI2", "number": 19150, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjoyMjowOVrOEb2D5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoyMFrOEcEWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjMyNzQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/vanityurl/business/VanityUrlAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjoyMjowOVrOHGBRmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjoyMjowOVrOHGBRmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA3NDM5Mw==", "bodyText": "We should always append e.getMessage() to our message so the real root cause does not get eaten higher up.", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476074393", "createdAt": "2020-08-25T02:22:09Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/vanityurl/business/VanityUrlAPIImpl.java", "diffHunk": "@@ -125,22 +126,18 @@ public void populateAllVanityURLsCache() throws DotDataException {\n           vanityUrls.stream().map(vanity -> vanity.get(\"live_inode\").toString()).collect(Collectors.toList());\n       final List<Contentlet> contentlets = this.contentletAPI.findContentlets(vanityUrlInodes);\n \n-      return contentlets.stream().map(contentlet -> new CachedVanityUrl(this.fromContentlet(contentlet))).collect(Collectors.toList());\n+      return contentlets.stream().map(contentlet -> new CachedVanityUrl(this.fromContentlet(contentlet))).sorted().collect(Collectors.toList());\n \n     } catch (final Exception e) {\n       Logger.error(this,\n-          String.format(\"An error occurred when retrieving Vanity URLs: siteId=[%s], \" + \"languageId=[%s], includeSystemHost=[%s]\",\n+          String.format(\"An error occurred when retrieving Vanity URLs: siteId=[%s], languageId=[%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f1438fd1494c2a54935b7e1647bcaf5f168c59f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODY2NzUxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxN1rOHGX-Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxN1rOHGX-Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMwMw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446303", "createdAt": "2020-08-25T13:26:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);\n+\n+        \n+        // testing they have different order\n+        assert(cachedVanities.get(0).order < cachedVanities.get(numberOfTestVanities-1).order);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9741f441d0e107dc371195ee750e60d4504cd390"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODY2NzU0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxOFrOHGX-Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxOFrOHGX-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMxMA==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446310", "createdAt": "2020-08-25T13:26:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9741f441d0e107dc371195ee750e60d4504cd390"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODY2NzYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxOVrOHGX-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoxOVrOHGX-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMxOA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446318", "createdAt": "2020-08-25T13:26:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9741f441d0e107dc371195ee750e60d4504cd390"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODY2NzcwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoyMFrOHGX-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzoyNjoyMFrOHGX-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ0NjMzNA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19150#discussion_r476446334", "createdAt": "2020-08-25T13:26:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/vanityurl/business/VanityUrlAPITest.java", "diffHunk": "@@ -73,6 +72,65 @@ public static void prepare() throws Exception {\n     }\n \n     \n+    /**\n+     * tests that we correctly order the cached vanites.  This ordering is done\n+     * by the findInDb method, which should return a hosts' vanities in order asc\n+     * \n+     * It also tests that the vanityUrlAPI.resolveVanityUrl returns\n+     * the first matching vanity in the list\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testing_vanityurl_ordering() throws Exception {\n+        final String baseUri = '/' + UUIDGenerator.shorty();\n+        final String site = defaultHost.getIdentifier();\n+        final int action = 200;\n+        final int numberOfTestVanities = 10;\n+        \n+        \n+        for (int i = numberOfTestVanities; i > 0; i--) {\n+            final String title = \"VanityURLOrder\" + i;\n+            final int randomOrder = new Random().nextInt(100);\n+            Contentlet vanity = filtersUtil.createVanityUrl(title, site, baseUri, baseUri,\n+                            action, randomOrder, defaultLanguage.getId());\n+            filtersUtil.publishVanityUrl(vanity);\n+        }\n+\n+\n+        // this list of CachedVanityUrl is ordered based on the order of the vanities - asc\n+        List<CachedVanityUrl> cachedVanities = vanityUrlAPI.findInDb(defaultHost, defaultLanguage)\n+                        .stream()\n+                        .filter(v -> v.forwardTo.equals(baseUri))\n+                        .collect(Collectors.toList());\n+\n+        // testing we have all the vanities we just saved\n+        assert(cachedVanities.size() == numberOfTestVanities);\n+\n+        \n+        // testing they have different order\n+        assert(cachedVanities.get(0).order < cachedVanities.get(numberOfTestVanities-1).order);\n+        \n+\n+\n+        CachedVanityUrl previousCachedVanity = cachedVanities.get(0);\n+        \n+        // the vanities are in order, from lowest to highest\n+        for (final CachedVanityUrl cached : cachedVanities) {\n+            assert(cached.order >= previousCachedVanity.order);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9741f441d0e107dc371195ee750e60d4504cd390"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2007, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}