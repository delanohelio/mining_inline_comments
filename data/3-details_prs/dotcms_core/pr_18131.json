{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTQ2Mzc5", "number": 18131, "title": "#18101 adding the skinid as mark check for the jwt user validation", "bodyText": "The user json web token, is using as a constraint with the user the mod_date. However the strategy is not working as an expected since any action is changing that column.\nIn order to fix it, a new claim has skinid which is an uuid to mark the relationship between the user and the jwt.\nThe skinid is re-generated any time the user updates important attributes of it", "createdAt": "2020-03-11T22:16:28Z", "url": "https://github.com/dotCMS/core/pull/18131", "merged": true, "mergeCommit": {"oid": "68e451819e154ead3da2db76ffdbd917ceaec0ba"}, "closed": true, "closedAt": "2020-03-23T16:19:28Z", "author": {"login": "jdotcms"}, "timelineItems": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMujNiAH2gAyMzg2OTQ2Mzc5OjcwNDJjNTJjZDczYTM3N2E5MzM5YmYzODQ3NGVhZWU3M2Q2NThiMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPOfmcAFqTM3Nzg0MjUyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7042c52cd73a377a9339bf38474eaee73d658b23", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/7042c52cd73a377a9339bf38474eaee73d658b23", "committedDate": "2020-03-11T22:07:16Z", "message": "#18101 adding the skinid as mark check for the jwt user validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "249067355be600554cfe773f7351e8d09f8843db", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/249067355be600554cfe773f7351e8d09f8843db", "committedDate": "2020-03-12T05:11:50Z", "message": "#18101 adding a web service to revoke user api token and fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "138f04ef261d71f30c79648fcd09c99792393640", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/138f04ef261d71f30c79648fcd09c99792393640", "committedDate": "2020-03-12T06:58:17Z", "message": "#18101 adding web services for api token and role/layout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20ca93ad21eec1ecae232bbcb56c432e759429cd", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/20ca93ad21eec1ecae232bbcb56c432e759429cd", "committedDate": "2020-03-12T17:41:53Z", "message": "#18101 Adding resources to handle CRUD over the role layouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798764ebcb3ad912171c59323d701cb9ecca38f5", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/798764ebcb3ad912171c59323d701cb9ecca38f5", "committedDate": "2020-03-12T18:19:41Z", "message": "#18101 added unit test to test diff scenarios on UserPersistance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "908f74186c6fb067b82927de3a06b67ae04e7e45", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/908f74186c6fb067b82927de3a06b67ae04e7e45", "committedDate": "2020-03-12T23:09:12Z", "message": "#18101 Adding fixes and unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6999f66134752e458a5250b7040b1c420db74680", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/6999f66134752e458a5250b7040b1c420db74680", "committedDate": "2020-03-13T19:20:03Z", "message": "#18101 adding an unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NTY3NjQ5", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374567649", "createdAt": "2020-03-13T19:46:48Z", "commit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo0Njo0OFrOF2QVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1Njo0N1rOF2Qlkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNTEzNg==", "bodyText": "rename this method to roleHasLayout", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392435136", "createdAt": "2020-03-13T19:46:48Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/RoleAPIImpl.java", "diffHunk": "@@ -365,6 +366,16 @@ public void addLayoutToRole(final Layout layout, final Role role) throws DotData\n \t\troleFactory.addLayoutToRole(layout, role);\n \t}\n \n+\t@CloseDBIfOpened\n+\t@Override\n+\tpublic boolean hasLayoutToRole(final Layout layout, final Role role) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNTc0Ng==", "bodyText": "as discussed, we need to add property and methods for rememberMeToken e.g. user.getRememberMeToken()\nWe should only save the value of this field to \"skinUI\" when saving to the db", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392435746", "createdAt": "2020-03-13T19:48:28Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotcms/auth/providers/jwt/JsonWebTokenUtilsIntegrationTest.java", "diffHunk": "@@ -67,7 +71,7 @@ public void get_user_in_token()\n \n         //Generate a new token\n         String jsonWebToken = jsonWebTokenService.generateUserToken(new UserToken(jwtId,\n-                userId, date, DateUtil.daysToMillis(2)\n+                userId, date, DateUtil.daysToMillis(2), user.getSkinId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzODA0Ng==", "bodyText": "Question - should we just use the value of user.skinId as the token id instead of adding another claim on the token?  I think that might be best - less moving parts.  When a user logs in, they get a user token with the id out of their user.skinId.  If that gets invalidated/updated, then all tokens using that would be invalidated, right?", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392438046", "createdAt": "2020-03-13T19:54:07Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotcms/filters/interceptor/jwt/JsonWebTokenInterceptorIntegrationTest.java", "diffHunk": "@@ -189,8 +190,8 @@ public void interceptWithAccessTokenTest() throws IOException, DotSecurityExcept\n \n         when(loginService.isLoggedIn(request)).thenReturn(false);\n \n-\n-        final UserToken userToken = new UserToken(jwtId, userId, date, date.getTime());\n+        final User user = APILocator.getUserAPI().loadUserById(userId);\n+        final UserToken userToken = new UserToken(jwtId, userId, date, date.getTime(), user.getSkinId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzODg2MQ==", "bodyText": "We need to mark User.skinId as @JsonIgnore", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392438861", "createdAt": "2020-03-13T19:55:52Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/liferay/portal/model/User.java", "diffHunk": "@@ -22,15 +22,6 @@\n \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzOTE4Nw==", "bodyText": "This should be moved to our LayoutAPI and called findLayoutByRole(final Layout layout, final Role role)", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392439187", "createdAt": "2020-03-13T19:56:47Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/RoleFactoryImpl.java", "diffHunk": "@@ -615,6 +617,22 @@ protected void addLayoutToRole(Layout layout, Role role) throws DotDataException\n \t\trc.removeLayoutsOnRole(role.getId());\n \t}\n \n+\t@Override\n+\tprotected Optional<LayoutsRoles> findLayoutsRoles(final Layout layout, final Role role) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6999f66134752e458a5250b7040b1c420db74680"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/154ca366fca64ad6dcc0940d821fe622c5ea9f5e", "committedDate": "2020-03-13T22:17:16Z", "message": "#18101 adding a new remember me token method to the user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c1d3f0dffd92cfb24ab42ce9d912f6c09b5b5a", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/51c1d3f0dffd92cfb24ab42ce9d912f6c09b5b5a", "committedDate": "2020-03-13T22:24:39Z", "message": "#18101 renaming a method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzE3", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650717", "createdAt": "2020-03-13T22:24:54Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NFrOF2VDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NFrOF2VDqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQyNg==", "bodyText": "Issue found: Avoid unused imports such as 'com.liferay.portal.ejb.CompanyPool'", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512426", "createdAt": "2020-03-13T22:24:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ApiTokenResourceTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.dotcms.rest.api.v1.authentication;\n+\n+import com.dotcms.datagen.CompanyDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.RestUtilTest;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.NoSuchCompanyException;\n+import com.liferay.portal.SystemException;\n+import com.liferay.portal.ejb.CompanyPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzI0", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650724", "createdAt": "2020-03-13T22:24:55Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NVrOF2VDsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NVrOF2VDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQzNA==", "bodyText": "Issue found: Field roleId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512434", "createdAt": "2020-03-13T22:24:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleLayoutForm.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.rest.api.Validated;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.Set;\n+\n+@JsonDeserialize(builder = RoleLayoutForm.Builder.class)\n+public class RoleLayoutForm extends Validated {\n+\n+    private final String roleId;\n+    private final Set<String> layoutIds;\n+\n+    private RoleLayoutForm(final RoleLayoutForm.Builder builder) {\n+        roleId    = builder.roleId;\n+        layoutIds = builder.layoutIds;\n+        checkValid();\n+    }\n+\n+    public String getRoleId() {\n+        return this.roleId;\n+    }\n+\n+    public Set<String> getLayoutIds() {\n+        return this.layoutIds;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty(required = true)\n+        private String roleId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzMy", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650732", "createdAt": "2020-03-13T22:24:56Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NlrOF2VDtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1NlrOF2VDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQzOQ==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512439", "createdAt": "2020-03-13T22:24:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleHelper.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.api.system.event.Payload;\n+import com.dotcms.api.system.event.SystemEventType;\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotmarketing.business.Layout;\n+import com.dotmarketing.business.LayoutAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper to encapsulate Roles logic\n+ * @author jsanca\n+ */\n+public class RoleHelper {\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> saveRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<Layout> layouts      = layoutAPI.loadLayoutsForRole(role);\n+        final List<String> layoutsAdded = new ArrayList<>();\n+        final Map<String, Layout> currentLayoutMaps = layouts.stream().collect(\n+                Collectors.toMap(layout -> layout.getId(), layout -> layout));\n+\n+        //Remove all layouts not included in the layoutIds list\n+        layoutIds.forEach(layoutId -> currentLayoutMaps.remove(layoutId));\n+        for(final Map.Entry<String, Layout> layoutToRemoveEntry : currentLayoutMaps.entrySet()) {\n+            roleAPI.removeLayoutFromRole(layoutToRemoveEntry.getValue(), role);\n+        }\n+\n+        // Add new layouts\n+        for(final String changedLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(changedLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (!roleAPI.hasLayoutToRole(layout, role)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzM2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650736", "createdAt": "2020-03-13T22:24:57Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1N1rOF2VDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1N1rOF2VDvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ0NA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512444", "createdAt": "2020-03-13T22:24:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -55,12 +59,13 @@ public void initTest(){\n     }\n \n     @Test\n-    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, SystemException, PortalException {\n+    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, SystemException, PortalException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzQ1", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650745", "createdAt": "2020-03-13T22:24:59Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1OVrOF2VDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNDo1OVrOF2VDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ1Mw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512453", "createdAt": "2020-03-13T22:24:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzQ5", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650749", "createdAt": "2020-03-13T22:25:00Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMFrOF2VDxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMFrOF2VDxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ1NQ==", "bodyText": "Issue found: The String literal \"eee\" appears 15 times in this file; the first occurrence is on line 33", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512455", "createdAt": "2020-03-13T22:25:00Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void test_diff_same_user_nodiff()  {\n+\n+        final UserPersistence userPersistence = new UserPersistence();\n+        final UserHBM userHBM = new UserHBM();\n+        final User    user    = new User();\n+\n+        userHBM.setPassword(\"xxx\");\n+        user.setPassword(\"xxx\");\n+\n+        userHBM.setCompanyId(\"yyy\");\n+        user.setCompanyId(\"yyy\");\n+\n+        userHBM.setEmailAddress(\"eee\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzUz", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650753", "createdAt": "2020-03-13T22:25:01Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMVrOF2VDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMVrOF2VDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ2MA==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512460", "createdAt": "2020-03-13T22:25:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -76,8 +77,8 @@ public UserToken(String id, String subject, Date modificationDate, long ttlMilli\n      * @param subject - The subject of the token\n      * @param ttlMillis - The expiration date of the token.\n      */\n-    public UserToken(String id, String subject, String issuer, Date modificationDate, long ttlMillis) {\n-        this(id, subject, issuer, modificationDate,ttlMillis, ImmutableMap.of());\n+    public UserToken(final String id, final String subject, final String issuer, final Date modificationDate, final long ttlMillis, final String skinId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzU5", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650759", "createdAt": "2020-03-13T22:25:02Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMlrOF2VD0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowMlrOF2VD0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ2Ng==", "bodyText": "Issue found: Field skinId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512466", "createdAt": "2020-03-13T22:25:02Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/UserDataGen.java", "diffHunk": "@@ -22,6 +23,8 @@\n     private String lastName = \"testLastName\" + currentTime;\n     private String emailAddress = \"testEmailAddress@\" + currentTime + \".com\";\n     private String password = String.valueOf(currentTime);\n+    private String skinId   = UUIDGenerator.generateUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzY1", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650765", "createdAt": "2020-03-13T22:25:03Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowM1rOF2VD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowM1rOF2VD1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ3MA==", "bodyText": "Issue found: The String literal \"111\" appears 13 times in this file; the first occurrence is on line 39", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512470", "createdAt": "2020-03-13T22:25:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void test_diff_same_user_nodiff()  {\n+\n+        final UserPersistence userPersistence = new UserPersistence();\n+        final UserHBM userHBM = new UserHBM();\n+        final User    user    = new User();\n+\n+        userHBM.setPassword(\"xxx\");\n+        user.setPassword(\"xxx\");\n+\n+        userHBM.setCompanyId(\"yyy\");\n+        user.setCompanyId(\"yyy\");\n+\n+        userHBM.setEmailAddress(\"eee\");\n+        user.setEmailAddress(\"eee\");\n+\n+        userHBM.setLayoutIds(\"iii\");\n+        user.setLayoutIds(\"iii\");\n+\n+        userHBM.setUserId(\"111\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzc0", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650774", "createdAt": "2020-03-13T22:25:04Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowNFrOF2VD3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowNFrOF2VD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ3Nw==", "bodyText": "Issue found: Avoid unused imports such as 'org.mockito.Matchers.anyObject'", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512477", "createdAt": "2020-03-13T22:25:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ApiTokenResourceTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.dotcms.rest.api.v1.authentication;\n+\n+import com.dotcms.datagen.CompanyDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.RestUtilTest;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.NoSuchCompanyException;\n+import com.liferay.portal.SystemException;\n+import com.liferay.portal.ejb.CompanyPool;\n+import com.liferay.portal.ejb.CompanyUtil;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzgy", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650782", "createdAt": "2020-03-13T22:25:05Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowNlrOF2VD5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowNlrOF2VD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjQ4Ng==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512486", "createdAt": "2020-03-13T22:25:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ApiTokenResourceTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.dotcms.rest.api.v1.authentication;\n+\n+import com.dotcms.datagen.CompanyDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.RestUtilTest;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.NoSuchCompanyException;\n+import com.liferay.portal.SystemException;\n+import com.liferay.portal.ejb.CompanyPool;\n+import com.liferay.portal.ejb.CompanyUtil;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiTokenResourceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzky", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650792", "createdAt": "2020-03-13T22:25:06Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowN1rOF2VD9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowN1rOF2VD9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUwMg==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512502", "createdAt": "2020-03-13T22:25:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -70,12 +75,13 @@ public void testNoSuchUserException() throws DotSecurityException, NoSuchUserExc\n     }\n \n     @Test\n-    public void testTokenInvalidException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException {\n+    public void testTokenInvalidException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwNzk4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650798", "createdAt": "2020-03-13T22:25:07Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowN1rOF2VD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowN1rOF2VD_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUwOQ==", "bodyText": "Issue found: The String literal \"xxx\" appears 15 times in this file; the first occurrence is on line 27", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512509", "createdAt": "2020-03-13T22:25:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void test_diff_same_user_nodiff()  {\n+\n+        final UserPersistence userPersistence = new UserPersistence();\n+        final UserHBM userHBM = new UserHBM();\n+        final User    user    = new User();\n+\n+        userHBM.setPassword(\"xxx\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODA1", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650805", "createdAt": "2020-03-13T22:25:08Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowOVrOF2VEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNTowOVrOF2VEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUxNQ==", "bodyText": "Issue found: Field companyId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512515", "createdAt": "2020-03-13T22:25:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/UserDataGen.java", "diffHunk": "@@ -22,6 +23,8 @@\n     private String lastName = \"testLastName\" + currentTime;\n     private String emailAddress = \"testEmailAddress@\" + currentTime + \".com\";\n     private String password = String.valueOf(currentTime);\n+    private String skinId   = UUIDGenerator.generateUuid();\n+    private String companyId = UUIDGenerator.generateUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODE0", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650814", "createdAt": "2020-03-13T22:25:10Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMFrOF2VECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMFrOF2VECQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUyMQ==", "bodyText": "Issue found: Parameter 'ttlMillis' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512521", "createdAt": "2020-03-13T22:25:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -65,8 +66,8 @@ public UserToken(final String id, final String subject, final String issuer, fin\n      * @param subject - The subject of the token\n      * @param ttlMillis - The expiration date of the token.\n      */\n-    public UserToken(String id, String subject, Date modificationDate, long ttlMillis) {\n-        this(id, subject, ClusterFactory.getClusterId(), modificationDate,ttlMillis, ImmutableMap.of());\n+    public UserToken(String id, String subject, Date modificationDate, long ttlMillis, final String skinId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODE2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650816", "createdAt": "2020-03-13T22:25:11Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMVrOF2VEDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMVrOF2VEDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUyNQ==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512525", "createdAt": "2020-03-13T22:25:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleHelper.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.api.system.event.Payload;\n+import com.dotcms.api.system.event.SystemEventType;\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotmarketing.business.Layout;\n+import com.dotmarketing.business.LayoutAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper to encapsulate Roles logic\n+ * @author jsanca\n+ */\n+public class RoleHelper {\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> saveRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<Layout> layouts      = layoutAPI.loadLayoutsForRole(role);\n+        final List<String> layoutsAdded = new ArrayList<>();\n+        final Map<String, Layout> currentLayoutMaps = layouts.stream().collect(\n+                Collectors.toMap(layout -> layout.getId(), layout -> layout));\n+\n+        //Remove all layouts not included in the layoutIds list\n+        layoutIds.forEach(layoutId -> currentLayoutMaps.remove(layoutId));\n+        for(final Map.Entry<String, Layout> layoutToRemoveEntry : currentLayoutMaps.entrySet()) {\n+            roleAPI.removeLayoutFromRole(layoutToRemoveEntry.getValue(), role);\n+        }\n+\n+        // Add new layouts\n+        for(final String changedLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(changedLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (!roleAPI.hasLayoutToRole(layout, role)) {\n+\n+                    roleAPI.addLayoutToRole(layout, role);\n+                    layoutsAdded.add(layout.getId());\n+                }\n+            }\n+        }\n+\n+        //Send a websocket event to notificate a layout change\n+        systemEventsAPI.pushAsync(SystemEventType.UPDATE_PORTLET_LAYOUTS, new Payload(layoutsAdded));\n+\n+        return layoutsAdded;\n+    }\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> deleteRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                        final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                        final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<String> layoutsDeleted = new ArrayList<>();\n+        // Delete layout new layouts\n+        for(final String toDeleteLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(toDeleteLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (roleAPI.hasLayoutToRole(layout, role)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODIx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650821", "createdAt": "2020-03-13T22:25:12Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMlrOF2VEEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxMlrOF2VEEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUzMQ==", "bodyText": "Issue found: Field layoutIds has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512531", "createdAt": "2020-03-13T22:25:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleLayoutForm.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.rest.api.Validated;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.Set;\n+\n+@JsonDeserialize(builder = RoleLayoutForm.Builder.class)\n+public class RoleLayoutForm extends Validated {\n+\n+    private final String roleId;\n+    private final Set<String> layoutIds;\n+\n+    private RoleLayoutForm(final RoleLayoutForm.Builder builder) {\n+        roleId    = builder.roleId;\n+        layoutIds = builder.layoutIds;\n+        checkValid();\n+    }\n+\n+    public String getRoleId() {\n+        return this.roleId;\n+    }\n+\n+    public Set<String> getLayoutIds() {\n+        return this.layoutIds;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty(required = true)\n+        private String roleId;\n+        @JsonProperty(required = true)\n+        private Set<String> layoutIds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODMw", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650830", "createdAt": "2020-03-13T22:25:13Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxM1rOF2VEFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxM1rOF2VEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjUzNQ==", "bodyText": "Issue found: The String literal \"yyy\" appears 15 times in this file; the first occurrence is on line 30", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512535", "createdAt": "2020-03-13T22:25:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void test_diff_same_user_nodiff()  {\n+\n+        final UserPersistence userPersistence = new UserPersistence();\n+        final UserHBM userHBM = new UserHBM();\n+        final User    user    = new User();\n+\n+        userHBM.setPassword(\"xxx\");\n+        user.setPassword(\"xxx\");\n+\n+        userHBM.setCompanyId(\"yyy\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODM1", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650835", "createdAt": "2020-03-13T22:25:14Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNFrOF2VEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNFrOF2VEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjU0Mg==", "bodyText": "Issue found: The String literal \"dotcms.org.1\" appears 7 times in this file; the first occurrence is on line 64", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512542", "createdAt": "2020-03-13T22:25:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -55,12 +59,13 @@ public void initTest(){\n     }\n \n     @Test\n-    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, SystemException, PortalException {\n+    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, SystemException, PortalException, DotDataException {\n         UserManager userManager = getUserManagerThrowingException( new NoSuchUserException(\"\") );\n+        final User user = APILocator.getUserAPI().loadUserById(\"dotcms.org.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODM4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650838", "createdAt": "2020-03-13T22:25:15Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNVrOF2VEIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNVrOF2VEIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjU0NA==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512544", "createdAt": "2020-03-13T22:25:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -65,8 +66,8 @@ public UserToken(final String id, final String subject, final String issuer, fin\n      * @param subject - The subject of the token\n      * @param ttlMillis - The expiration date of the token.\n      */\n-    public UserToken(String id, String subject, Date modificationDate, long ttlMillis) {\n-        this(id, subject, ClusterFactory.getClusterId(), modificationDate,ttlMillis, ImmutableMap.of());\n+    public UserToken(String id, String subject, Date modificationDate, long ttlMillis, final String skinId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NjUwODQ4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-374650848", "createdAt": "2020-03-13T22:25:16Z", "commit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNlrOF2VEJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMjoyNToxNlrOF2VEJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUxMjU0OQ==", "bodyText": "Issue found: The String literal \"iii\" appears 15 times in this file; the first occurrence is on line 36", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r392512549", "createdAt": "2020-03-13T22:25:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void test_diff_same_user_nodiff()  {\n+\n+        final UserPersistence userPersistence = new UserPersistence();\n+        final UserHBM userHBM = new UserHBM();\n+        final User    user    = new User();\n+\n+        userHBM.setPassword(\"xxx\");\n+        user.setPassword(\"xxx\");\n+\n+        userHBM.setCompanyId(\"yyy\");\n+        user.setCompanyId(\"yyy\");\n+\n+        userHBM.setEmailAddress(\"eee\");\n+        user.setEmailAddress(\"eee\");\n+\n+        userHBM.setLayoutIds(\"iii\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca366fca64ad6dcc0940d821fe622c5ea9f5e"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/b9de60c3b448d5b2cd4567bedbd82eeb21c63503", "committedDate": "2020-03-17T06:11:15Z", "message": "#18101 refactor, fixes and unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00288f35d8562deb8536c368deb5b3d2668fd5cb", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/00288f35d8562deb8536c368deb5b3d2668fd5cb", "committedDate": "2020-03-17T20:02:39Z", "message": "#18101 adding fixes for the codacy feedback and some unit test fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDUyOTcy", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377052972", "createdAt": "2020-03-18T16:50:28Z", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MDoyOFrOF4ODBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjo1MDoyOFrOF4ODBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5NDcyNQ==", "bodyText": "Tests and Doc regarding this new Resource", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394494725", "createdAt": "2020-03-18T16:50:28Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleResource.java", "diffHunk": "@@ -1,26 +1,36 @@\n package com.dotcms.rest.api.v1.system.role;\n \n-import static com.dotcms.util.CollectionsUtils.list;\n-import static com.dotcms.util.CollectionsUtils.map;\n-\n import com.dotcms.repackage.com.google.common.annotations.VisibleForTesting;\n import com.dotcms.rest.InitDataObject;\n import com.dotcms.rest.ResponseEntityView;\n import com.dotcms.rest.WebResource;\n import com.dotcms.rest.exception.mapper.ExceptionMapperUtil;\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.business.ApiProvider;\n+import com.dotmarketing.business.LayoutAPI;\n+import com.dotmarketing.business.Role;\n import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.user.ajax.UserAjax;\n import com.dotmarketing.util.Logger;\n-import java.io.Serializable;\n+import com.dotmarketing.util.SecurityLogger;\n+\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.Context;\n import javax.ws.rs.core.Response;\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+import static com.dotcms.util.CollectionsUtils.list;\n+import static com.dotcms.util.CollectionsUtils.map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDgyNjEx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377082611", "createdAt": "2020-03-18T17:25:44Z", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNTo0NFrOF4PeQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNTo0NFrOF4PeQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODA4MA==", "bodyText": "Looks like wrong javadoc. Should be \"Deletes\" etc...", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394518080", "createdAt": "2020-03-18T17:25:44Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleResource.java", "diffHunk": "@@ -98,7 +109,109 @@ public Response checkRoles(final @Context HttpServletRequest request,\n \t\t\tLogger.error(this, \"An error occurred when processing the request.\", e);\n \t\t\treturn ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n \t\t}\n+\n \t\treturn Response.ok(new ResponseEntityView(map(\"checkRoles\", hasUserRole))).build();\n \t}\n \n+\t/**\n+\t * Saves set of layout into a role\n+\t * The user must have to be a BE and has to have access to roles portlet\n+\t */\n+\t@DELETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDgzNDI2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377083426", "createdAt": "2020-03-18T17:26:45Z", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNjo0NVrOF4Pgyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzoyNjo0NVrOF4Pgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxODczMQ==", "bodyText": "Also wrong javadoc here", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394518731", "createdAt": "2020-03-18T17:26:45Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleResource.java", "diffHunk": "@@ -98,7 +109,109 @@ public Response checkRoles(final @Context HttpServletRequest request,\n \t\t\tLogger.error(this, \"An error occurred when processing the request.\", e);\n \t\t\treturn ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n \t\t}\n+\n \t\treturn Response.ok(new ResponseEntityView(map(\"checkRoles\", hasUserRole))).build();\n \t}\n \n+\t/**\n+\t * Saves set of layout into a role\n+\t * The user must have to be a BE and has to have access to roles portlet\n+\t */\n+\t@DELETE\n+\t@Path(\"/layouts\")\n+\t@Produces(\"application/json\")\n+\tpublic Response deleteRoleLayouts(\n+\t\t\tfinal @Context HttpServletRequest request,\n+\t\t\tfinal @Context HttpServletResponse response,\n+\t\t\tfinal RoleLayoutForm roleLayoutForm) throws DotDataException, DotSecurityException {\n+\n+\t\tfinal InitDataObject initDataObject = new WebResource.InitBuilder()\n+\t\t\t\t.requiredFrontendUser(false).rejectWhenNoUser(true)\n+\t\t\t\t.requiredBackendUser(true).requiredPortlet(\"roles\")\n+\t\t\t\t.requestAndResponse(request, response).init();\n+\n+\t\tif (this.roleAPI.doesUserHaveRole(initDataObject.getUser(), this.roleAPI.loadCMSAdminRole())) {\n+\n+\t\t\tfinal String roleId         = roleLayoutForm.getRoleId();\n+\t\t\tfinal Set<String> layoutIds = roleLayoutForm.getLayoutIds();\n+\t\t\tfinal Role role \t\t\t= roleAPI.loadRoleById(roleId);\n+\t\t\tfinal LayoutAPI layoutAPI   = APILocator.getLayoutAPI();\n+\n+\t\t\tLogger.debug(this, ()-> \"Deleting the layouts : \" + layoutIds + \" to the role: \" + roleId);\n+\n+\t\t\treturn Response.ok(new ResponseEntityView(map(\"deletedLayouts\",\n+\t\t\t\t\tthis.roleHelper.deleteRoleLayouts(role, layoutIds, layoutAPI,\n+\t\t\t\t\t\t\tthis.roleAPI, APILocator.getSystemEventsAPI())))).build();\n+\t\t} else {\n+\n+\t\t\tfinal String remoteIp = request.getRemoteHost();\n+\t\t\tSecurityLogger.logInfo(UserAjax.class, \"unauthorized attempt to call delete role layouts by user \"+\n+\t\t\t\t\tinitDataObject.getUser().getUserId() + \" from \" + remoteIp);\n+\t\t\tthrow new DotSecurityException(\"User: '\" +  initDataObject.getUser().getUserId() + \"' not authorized\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Saves set of layout into a role\n+\t * The user must have to be a BE and has to have access to roles portlet\n+\t */\n+\t@POST\n+\t@Path(\"/layouts\")\n+\t@Produces(\"application/json\")\n+\tpublic Response saveRoleLayouts(\n+\t\t\tfinal @Context HttpServletRequest request,\n+\t\t\tfinal @Context HttpServletResponse response,\n+\t\t\tfinal RoleLayoutForm roleLayoutForm) throws DotDataException, DotSecurityException {\n+\n+\t\tfinal InitDataObject initDataObject = new WebResource.InitBuilder(this.webResource)\n+\t\t\t\t.requiredFrontendUser(false).rejectWhenNoUser(true)\n+\t\t\t\t.requiredBackendUser(true).requiredPortlet(\"roles\")\n+\t\t\t\t.requestAndResponse(request, response).init();\n+\n+\t\tif (this.roleAPI.doesUserHaveRole(initDataObject.getUser(), this.roleAPI.loadCMSAdminRole())) {\n+\n+\t\t\tfinal String roleId         = roleLayoutForm.getRoleId();\n+\t\t\tfinal Set<String> layoutIds = roleLayoutForm.getLayoutIds();\n+\t\t\tfinal Role role \t\t\t= roleAPI.loadRoleById(roleId);\n+\t\t\tfinal LayoutAPI layoutAPI   = APILocator.getLayoutAPI();\n+\n+\t\t\tLogger.debug(this, ()-> \"Saving the layouts : \" + layoutIds + \" to the role: \" + roleId);\n+\n+\t\t\treturn Response.ok(new ResponseEntityView(map(\"savedLayouts\",\n+\t\t\t\t\tthis.roleHelper.saveRoleLayouts(role, layoutIds, layoutAPI,\n+\t\t\t\t\t\t\tthis.roleAPI, APILocator.getSystemEventsAPI())))).build();\n+\t\t} else {\n+\n+\t\t\tfinal String remoteIp = request.getRemoteHost();\n+\t\t\tSecurityLogger.logInfo(UserAjax.class, \"unauthorized attempt to call save role layouts by user \"+\n+\t\t\t\t\tinitDataObject.getUser().getUserId() + \" from \" + remoteIp);\n+\t\t\tthrow new DotSecurityException(\"User: '\" +  initDataObject.getUser().getUserId() + \"' not authorized\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Saves set of layout into a role\n+\t * The user must have to be a BE and has to have access to roles portlet\n+\t */\n+\t@GET", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDg1NzU2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377085756", "createdAt": "2020-03-18T17:29:28Z", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDk1Mjgx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377095281", "createdAt": "2020-03-18T17:41:37Z", "commit": {"oid": "b9de60c3b448d5b2cd4567bedbd82eeb21c63503"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f004e218c84269bfff4c49d70f46953ce9764b89", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/f004e218c84269bfff4c49d70f46953ce9764b89", "committedDate": "2020-03-18T17:51:29Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18101-jwt-userinvalidation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77d7159e564b36b33448b2164110f8b99efcdfb6", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/77d7159e564b36b33448b2164110f8b99efcdfb6", "committedDate": "2020-03-18T19:42:02Z", "message": "#18101 fixing unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2", "author": {"user": {"login": "jdotcms", "name": "Jonathan"}}, "url": "https://github.com/dotCMS/core/commit/4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2", "committedDate": "2020-03-18T20:04:22Z", "message": "#18101 part of the review check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMDc3", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200077", "createdAt": "2020-03-18T20:12:03Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNFrOF4VK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNFrOF4VK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQxMw==", "bodyText": "Issue found: Field companyId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611413", "createdAt": "2020-03-18T20:12:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/UserDataGen.java", "diffHunk": "@@ -22,6 +23,8 @@\n     private String lastName = \"testLastName\" + currentTime;\n     private String emailAddress = \"testEmailAddress@\" + currentTime + \".com\";\n     private String password = String.valueOf(currentTime);\n+    private String skinIdentifier = UUIDGenerator.generateUuid();\n+    private String companyId = UUIDGenerator.generateUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMDk1", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200095", "createdAt": "2020-03-18T20:12:05Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNVrOF4VK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNVrOF4VK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQyMg==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611422", "createdAt": "2020-03-18T20:12:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleHelper.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.api.system.event.Payload;\n+import com.dotcms.api.system.event.SystemEventType;\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotmarketing.business.Layout;\n+import com.dotmarketing.business.LayoutAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper to encapsulate Roles logic\n+ * @author jsanca\n+ */\n+public class RoleHelper {\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> saveRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<Layout> layouts      = layoutAPI.loadLayoutsForRole(role);\n+        final List<String> layoutsAdded = new ArrayList<>();\n+        final Map<String, Layout> currentLayoutMaps = layouts.stream().collect(\n+                Collectors.toMap(layout -> layout.getId(), layout -> layout));\n+\n+        //Remove all layouts not included in the layoutIds list\n+        layoutIds.forEach(layoutId -> currentLayoutMaps.remove(layoutId));\n+        for(final Map.Entry<String, Layout> layoutToRemoveEntry : currentLayoutMaps.entrySet()) {\n+            roleAPI.removeLayoutFromRole(layoutToRemoveEntry.getValue(), role);\n+        }\n+\n+        // Add new layouts\n+        for(final String changedLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(changedLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (!roleAPI.roleHasLayout(layout, role)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTA0", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200104", "createdAt": "2020-03-18T20:12:06Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNlrOF4VK6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowNlrOF4VK6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQzMg==", "bodyText": "Issue found: Field layoutIds has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611432", "createdAt": "2020-03-18T20:12:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleLayoutForm.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.rest.api.Validated;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.Set;\n+\n+@JsonDeserialize(builder = RoleLayoutForm.Builder.class)\n+public class RoleLayoutForm extends Validated {\n+\n+    private final String roleId;\n+    private final Set<String> layoutIds;\n+\n+    private RoleLayoutForm(final RoleLayoutForm.Builder builder) {\n+        super();\n+        roleId    = builder.roleId;\n+        layoutIds = builder.layoutIds;\n+        checkValid();\n+    }\n+\n+    public String getRoleId() {\n+        return this.roleId;\n+    }\n+\n+    public Set<String> getLayoutIds() {\n+        return this.layoutIds;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty(required = true)\n+        private String roleId;\n+        @JsonProperty(required = true)\n+        private Set<String> layoutIds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTE2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200116", "createdAt": "2020-03-18T20:12:07Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowN1rOF4VK7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowN1rOF4VK7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQzOQ==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611439", "createdAt": "2020-03-18T20:12:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTI2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200126", "createdAt": "2020-03-18T20:12:08Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowOFrOF4VK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjowOFrOF4VK9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQ0Ng==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611446", "createdAt": "2020-03-18T20:12:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -70,12 +72,14 @@ public void testNoSuchUserException() throws DotSecurityException, NoSuchUserExc\n     }\n \n     @Test\n-    public void testTokenInvalidException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException {\n+    public void testTokenInvalidException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTM4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200138", "createdAt": "2020-03-18T20:12:10Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMFrOF4VLAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMFrOF4VLAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQ1OQ==", "bodyText": "Issue found: Field roleId has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611459", "createdAt": "2020-03-18T20:12:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleLayoutForm.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.rest.api.Validated;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+\n+import java.util.Set;\n+\n+@JsonDeserialize(builder = RoleLayoutForm.Builder.class)\n+public class RoleLayoutForm extends Validated {\n+\n+    private final String roleId;\n+    private final Set<String> layoutIds;\n+\n+    private RoleLayoutForm(final RoleLayoutForm.Builder builder) {\n+        super();\n+        roleId    = builder.roleId;\n+        layoutIds = builder.layoutIds;\n+        checkValid();\n+    }\n+\n+    public String getRoleId() {\n+        return this.roleId;\n+    }\n+\n+    public Set<String> getLayoutIds() {\n+        return this.layoutIds;\n+    }\n+\n+    public static final class Builder {\n+\n+        @JsonProperty(required = true)\n+        private String roleId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTU4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200158", "createdAt": "2020-03-18T20:12:11Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMVrOF4VLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMVrOF4VLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQ3Ng==", "bodyText": "Issue found: Avoid using short method names", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611476", "createdAt": "2020-03-18T20:12:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();\n+        @JsonProperty(required = true)  private Date   modificationDate = new Date();\n+        @JsonProperty(required = true)  private Date   expiresDate;\n+        @JsonProperty(required = true)  private ImmutableMap<String,Object> claims = ImmutableMap.of();\n \n+        public UserToken.Builder id(final String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTcx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200171", "createdAt": "2020-03-18T20:12:12Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMlrOF4VLJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxMlrOF4VLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTQ5Mg==", "bodyText": "Issue found: Local variable 'jsonWebToken' could be declared final", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611492", "createdAt": "2020-03-18T20:12:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/auth/providers/jwt/JsonWebTokenUtilsIntegrationTest.java", "diffHunk": "@@ -102,10 +110,13 @@ public void get_user_in_token_modified()\n                 JsonWebTokenFactory.getInstance().getJsonWebTokenService();\n         assertNotNull(jsonWebTokenService);\n \n+        final String jwtId = APILocator.getUserAPI().loadUserById(userId).getRememberMeToken();\n         //Generate a new token\n-        String jsonWebToken = jsonWebTokenService.generateUserToken(new UserToken(jwtId,\n-                userId, date, DateUtil.daysToMillis(2)\n-        ));\n+        final UserToken userToken = new UserToken.Builder().id(jwtId).subject(userId).modificationDate(date)\n+                .expiresDate(DateUtil.daysToMillis(2))\n+                .build();\n+        String jsonWebToken = jsonWebTokenService.generateUserToken(userToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTg3", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200187", "createdAt": "2020-03-18T20:12:13Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxM1rOF4VLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxM1rOF4VLMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTUwNQ==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611505", "createdAt": "2020-03-18T20:12:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ApiTokenResourceTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.authentication;\n+\n+import com.dotcms.datagen.CompanyDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.RestUtilTest;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.NoSuchCompanyException;\n+import com.liferay.portal.SystemException;\n+import com.liferay.portal.ejb.CompanyUtil;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiTokenResourceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMTk2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200196", "createdAt": "2020-03-18T20:12:14Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNFrOF4VLOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNFrOF4VLOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTUxNQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611515", "createdAt": "2020-03-18T20:12:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -55,12 +58,11 @@ public void initTest(){\n     }\n \n     @Test\n-    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, SystemException, PortalException {\n+    public void testNoSuchUserException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException,  DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjA4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200208", "createdAt": "2020-03-18T20:12:15Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNVrOF4VLRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNVrOF4VLRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTUyNQ==", "bodyText": "Issue found: Field modificationDate has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611525", "createdAt": "2020-03-18T20:12:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();\n+        @JsonProperty(required = true)  private Date   modificationDate = new Date();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjIy", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200222", "createdAt": "2020-03-18T20:12:16Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNlrOF4VLUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxNlrOF4VLUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTUzNw==", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertNotNull' due to existing static import 'org.junit.Assert.assertNotNull'", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611537", "createdAt": "2020-03-18T20:12:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ApiTokenResourceTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.dotcms.rest.api.v1.authentication;\n+\n+import com.dotcms.datagen.CompanyDataGen;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.rest.InitDataObject;\n+import com.dotcms.rest.RestUtilTest;\n+import com.dotcms.rest.WebResource;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.portal.NoSuchCompanyException;\n+import com.liferay.portal.SystemException;\n+import com.liferay.portal.ejb.CompanyUtil;\n+import com.liferay.portal.model.Company;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class ApiTokenResourceTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test()\n+    public void test_revokeUserToken_non_admin_user() throws DotDataException, DotSecurityException {\n+\n+        final String skinId    = UUIDGenerator.generateUuid();\n+        final User limitedUser = new UserDataGen().active(true)\n+                .skinId(skinId).nextPersisted();\n+        final HttpServletRequest  request  = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final WebResource      webResource = mock(WebResource.class);\n+        final ApiTokenResource apiTokenResource = new ApiTokenResource(APILocator.getApiTokenAPI(), webResource);\n+\n+        when(request.getAttribute(WebKeys.USER)).thenReturn(limitedUser);\n+        final InitDataObject initDataObject = new InitDataObject();\n+        initDataObject.setUser(limitedUser);\n+        when(webResource.init(any(WebResource.InitBuilder.class))).thenReturn(initDataObject);\n+        final Response restResponse = apiTokenResource.revokeUserToken(request, response, limitedUser.getUserId());\n+        Assert.assertNotNull(restResponse);\n+        RestUtilTest.verifyErrorResponse(restResponse,  Response.Status.UNAUTHORIZED.getStatusCode(), \"unauthorized to remove the token\");\n+    }\n+\n+    @Test\n+    public void test_revokeUserToken() throws DotSecurityException, DotDataException, SystemException, NoSuchCompanyException {\n+\n+        // 1) create an user with skinid\n+        // 2) call the revoke to reset the user\n+        // 3) check the user has the skinid reset\n+\n+        final Company company = new CompanyDataGen()\n+                .name(\"TestCompany\")\n+                .shortName(\"TC\")\n+                .authType(\"email\")\n+                .autoLogin(true)\n+                .emailAddress(\"lol@dotCMS.com\")\n+                .homeURL(\"localhost\")\n+                .city(\"NYC\")\n+                .mx(\"MX\")\n+                .type(\"test\")\n+                .phone(\"5552368\")\n+                .portalURL(\"/portalURL\")\n+                .nextPersisted();\n+        assertNotNull(company.getCompanyId());\n+        final Company retrievedCompany =  CompanyUtil.findByPrimaryKey(company.getCompanyId());\n+        assertEquals(company.getCompanyId(), retrievedCompany.getCompanyId());\n+\n+        final String skinId    = UUIDGenerator.generateUuid();\n+        final User limitedUser = new UserDataGen().active(true)\n+                .skinId(skinId).companyId(retrievedCompany.getCompanyId()).nextPersisted();\n+\n+        final User adminUser = new UserDataGen().nextPersisted();\n+        APILocator.getRoleAPI().addRoleToUser(APILocator.getRoleAPI().loadCMSAdminRole(), adminUser);\n+        assertTrue(APILocator.getUserAPI().isCMSAdmin(adminUser));\n+\n+        final HttpServletRequest  request  = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+        final WebResource      webResource = mock(WebResource.class);\n+        final ApiTokenResource apiTokenResource = new ApiTokenResource(APILocator.getApiTokenAPI(), webResource);\n+\n+        when(request.getAttribute(WebKeys.USER)).thenReturn(adminUser);\n+        final InitDataObject initDataObject = new InitDataObject();\n+        initDataObject.setUser(adminUser);\n+        when(webResource.init(any(WebResource.InitBuilder.class))).thenReturn(initDataObject);\n+        final Response restResponse = apiTokenResource.revokeUserToken(request, response, limitedUser.getUserId());\n+        Assert.assertNotNull(restResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjMz", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200233", "createdAt": "2020-03-18T20:12:17Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxN1rOF4VLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxN1rOF4VLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTU0NA==", "bodyText": "Issue found: These nested if statements could be combined", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611544", "createdAt": "2020-03-18T20:12:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/system/role/RoleHelper.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package com.dotcms.rest.api.v1.system.role;\n+\n+import com.dotcms.api.system.event.Payload;\n+import com.dotcms.api.system.event.SystemEventType;\n+import com.dotcms.api.system.event.SystemEventsAPI;\n+import com.dotcms.business.WrapInTransaction;\n+import com.dotmarketing.business.Layout;\n+import com.dotmarketing.business.LayoutAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.util.UtilMethods;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Helper to encapsulate Roles logic\n+ * @author jsanca\n+ */\n+public class RoleHelper {\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> saveRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<Layout> layouts      = layoutAPI.loadLayoutsForRole(role);\n+        final List<String> layoutsAdded = new ArrayList<>();\n+        final Map<String, Layout> currentLayoutMaps = layouts.stream().collect(\n+                Collectors.toMap(layout -> layout.getId(), layout -> layout));\n+\n+        //Remove all layouts not included in the layoutIds list\n+        layoutIds.forEach(layoutId -> currentLayoutMaps.remove(layoutId));\n+        for(final Map.Entry<String, Layout> layoutToRemoveEntry : currentLayoutMaps.entrySet()) {\n+            roleAPI.removeLayoutFromRole(layoutToRemoveEntry.getValue(), role);\n+        }\n+\n+        // Add new layouts\n+        for(final String changedLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(changedLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (!roleAPI.roleHasLayout(layout, role)) {\n+\n+                    roleAPI.addLayoutToRole(layout, role);\n+                    layoutsAdded.add(layout.getId());\n+                }\n+            }\n+        }\n+\n+        //Send a websocket event to notificate a layout change\n+        systemEventsAPI.pushAsync(SystemEventType.UPDATE_PORTLET_LAYOUTS, new Payload(layoutsAdded));\n+\n+        return layoutsAdded;\n+    }\n+\n+    /**\n+     * Saves only the existing layouts on layoutIds, any issue previous added not in the list will be removed\n+     * @param role\n+     * @param layoutIds\n+     * @param layoutAPI\n+     * @param roleAPI\n+     * @param systemEventsAPI\n+     * @throws DotDataException\n+     */\n+    @WrapInTransaction\n+    public List<String> deleteRoleLayouts(final Role role, final Set<String> layoutIds,\n+                                        final LayoutAPI layoutAPI, final RoleAPI roleAPI,\n+                                        final SystemEventsAPI systemEventsAPI) throws DotDataException {\n+\n+        final List<String> layoutsDeleted = new ArrayList<>();\n+        // Delete layout new layouts\n+        for(final String toDeleteLayout : layoutIds) {\n+\n+            final Layout layout = layoutAPI.findLayout(toDeleteLayout);\n+            if (null != layout && UtilMethods.isSet(layout.getId())) {\n+                if (roleAPI.roleHasLayout(layout, role)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjUx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200251", "createdAt": "2020-03-18T20:12:18Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxOVrOF4VLZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoxOVrOF4VLZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTU1Nw==", "bodyText": "Issue found: Field claims has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611557", "createdAt": "2020-03-18T20:12:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();\n+        @JsonProperty(required = true)  private Date   modificationDate = new Date();\n+        @JsonProperty(required = true)  private Date   expiresDate;\n+        @JsonProperty(required = true)  private ImmutableMap<String,Object> claims = ImmutableMap.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjY4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200268", "createdAt": "2020-03-18T20:12:20Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMFrOF4VLdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMFrOF4VLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTU3Mg==", "bodyText": "Issue found: Field subject has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611572", "createdAt": "2020-03-18T20:12:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjg0", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200284", "createdAt": "2020-03-18T20:12:21Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMVrOF4VLfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMVrOF4VLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTU4Mw==", "bodyText": "Issue found: Avoid variables with short names like id", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611583", "createdAt": "2020-03-18T20:12:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();\n+        @JsonProperty(required = true)  private Date   modificationDate = new Date();\n+        @JsonProperty(required = true)  private Date   expiresDate;\n+        @JsonProperty(required = true)  private ImmutableMap<String,Object> claims = ImmutableMap.of();\n \n+        public UserToken.Builder id(final String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMjkw", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200290", "createdAt": "2020-03-18T20:12:22Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMlrOF4VLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyMlrOF4VLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTU5MA==", "bodyText": "Issue found: Field expiresDate has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611590", "createdAt": "2020-03-18T20:12:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();\n+        @JsonProperty(required = true)  private Date   modificationDate = new Date();\n+        @JsonProperty(required = true)  private Date   expiresDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMzAx", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200301", "createdAt": "2020-03-18T20:12:23Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyM1rOF4VLkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyM1rOF4VLkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTYwMQ==", "bodyText": "Issue found: Field id has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611601", "createdAt": "2020-03-18T20:12:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMzA2", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200306", "createdAt": "2020-03-18T20:12:24Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNFrOF4VLlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNFrOF4VLlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTYwNg==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611606", "createdAt": "2020-03-18T20:12:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/authentication/ResetPasswordResourceIntegrationTest.java", "diffHunk": "@@ -84,12 +88,12 @@ public void testTokenInvalidException() throws DotSecurityException, NoSuchUserE\n     }\n \n     @Test\n-    public void testTokenExpiredException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException {\n+    public void testTokenExpiredException() throws DotSecurityException, NoSuchUserException, DotInvalidTokenException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMzE4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200318", "createdAt": "2020-03-18T20:12:25Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNVrOF4VLoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNVrOF4VLoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTYxNw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611617", "createdAt": "2020-03-18T20:12:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/liferay/portal/ejb/UserPersistenceTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package com.liferay.portal.ejb;\n+\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.liferay.portal.model.User;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+/**\n+ * Unit test for the {@link UserPersistence}\n+ */\n+public class UserPersistenceTest {\n+\n+    private static final String TOKEN_XXX = \"xxx\";\n+    private static final String TOKEN_YYY = \"yyy\";\n+    private static final String TOKEN_EEE = \"eee\";\n+    private static final String TOKEN_III = \"iii\";\n+    private static final String TOKEN_USER_ID = \"111\";\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMzI3", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200327", "createdAt": "2020-03-18T20:12:26Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNlrOF4VLrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyNlrOF4VLrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTYzMA==", "bodyText": "Issue found: Field issuer has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611630", "createdAt": "2020-03-18T20:12:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/beans/UserToken.java", "diffHunk": "@@ -186,5 +212,50 @@ public String getUserId() {\n         return this.subject;\n     }\n \n+    public static final class Builder {\n+        @JsonProperty(required = true)  private String id;\n+        @JsonProperty(required = true)  private String subject;\n+        @JsonProperty(required = true)  private String issuer = ClusterFactory.getClusterId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAwMzM4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377200338", "createdAt": "2020-03-18T20:12:27Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyN1rOF4VLtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjoyN1rOF4VLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTYzOA==", "bodyText": "Issue found: Local variable 'jsonWebToken' could be declared final", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r394611638", "createdAt": "2020-03-18T20:12:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/auth/providers/jwt/services/JsonWebTokenServiceIntegrationTest.java", "diffHunk": "@@ -56,18 +56,26 @@ public static void prepare() throws Exception {\n      * Testing the generateToken JsonWebTokenServiceTest\n      */\n     @Test\n-    public void generateTokenTest() {\n+    public void generateTokenTest() throws DotSecurityException, DotDataException {\n \n+        final User user = APILocator.getUserAPI().loadUserById(userId);\n         //Generate a new token\n-        String jsonWebToken = jsonWebTokenService.generateUserToken(new UserToken(jwtId,\n-                userId, new Date(), DateUtil.daysToMillis(2)));\n+        final String jwtokenId    = user.getRememberMeToken();\n+        final UserToken userToken = new UserToken.Builder()\n+                .id(jwtokenId)\n+                .subject(userId)\n+                .issuer(clusterId)\n+                .expiresDate(DateUtil.daysToMillis(2))\n+                .claims(ImmutableMap.of())\n+                .build();\n+        String jsonWebToken = jsonWebTokenService.generateUserToken(userToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODQyNTI4", "url": "https://github.com/dotCMS/core/pull/18131#pullrequestreview-377842528", "createdAt": "2020-03-19T15:39:19Z", "commit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozOToxOVrOF40VBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNTowNVrOF42WNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTkyNw==", "bodyText": "uuid could be null - should we NPE check here?", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r395121927", "createdAt": "2020-03-19T15:39:19Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/factories/JsonWebTokenFactory.java", "diffHunk": "@@ -273,13 +268,17 @@ private JWToken validateToken(final Jws<Claims> jws, final JWToken jwtToken, fin\n             }\n             \n             if(jwtToken.getTokenType() == TokenType.USER_TOKEN) {\n-                if(jwtToken.getModificationDate().before(user.getModificationDate())) {\n-                    IncorrectClaimException claimException = new IncorrectClaimException( jws.getHeader(), body, \"JWT Token user: \" + jwtToken.getUserId() + \" has been modified, old tokens are invalid\");\n+\n+                final String uuid = jwtToken.getId();\n+\n+                if (!uuid.equals(user.getRememberMeToken())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MDg4OA==", "bodyText": "Does this need a @closedb annotation?", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r395150888", "createdAt": "2020-03-19T16:19:10Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/RoleFactoryImpl.java", "diffHunk": "@@ -615,6 +617,22 @@ protected void addLayoutToRole(Layout layout, Role role) throws DotDataException\n \t\trc.removeLayoutsOnRole(role.getId());\n \t}\n \n+\t@Override\n+\tprotected Optional<LayoutsRoles> findLayoutsRole(final Layout layout, final Role role) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MjM1MA==", "bodyText": "fwiw, we don't really support multiple companies.  Not sure what the ramifications of this are.", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r395152350", "createdAt": "2020-03-19T16:21:20Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotcms/auth/providers/jwt/factories/ApiTokenAPITest.java", "diffHunk": "@@ -357,7 +361,26 @@ public void test_expired_ApiToken() throws Exception {\n     @Test\n     public void test_user_must_be_active_to_validate_ApiToken() throws Exception {\n \n-        User user = new UserDataGen().nextPersisted();\n+        final Company company = new CompanyDataGen()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1MzI4OA==", "bodyText": "Why not use default company?  Will this break other tests using this?", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r395153288", "createdAt": "2020-03-19T16:22:36Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/UserDataGen.java", "diffHunk": "@@ -22,6 +23,8 @@\n     private String lastName = \"testLastName\" + currentTime;\n     private String emailAddress = \"testEmailAddress@\" + currentTime + \".com\";\n     private String password = String.valueOf(currentTime);\n+    private String skinIdentifier = UUIDGenerator.generateUuid();\n+    private String companyId = UUIDGenerator.generateUuid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NDk5OA==", "bodyText": "Can uuid =null?  I think we should null check here.", "url": "https://github.com/dotCMS/core/pull/18131#discussion_r395154998", "createdAt": "2020-03-19T16:25:05Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/auth/providers/jwt/factories/JsonWebTokenFactory.java", "diffHunk": "@@ -273,13 +268,17 @@ private JWToken validateToken(final Jws<Claims> jws, final JWToken jwtToken, fin\n             }\n             \n             if(jwtToken.getTokenType() == TokenType.USER_TOKEN) {\n-                if(jwtToken.getModificationDate().before(user.getModificationDate())) {\n-                    IncorrectClaimException claimException = new IncorrectClaimException( jws.getHeader(), body, \"JWT Token user: \" + jwtToken.getUserId() + \" has been modified, old tokens are invalid\");\n+\n+                final String uuid = jwtToken.getId();\n+\n+                if (!uuid.equals(user.getRememberMeToken())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d85b789d7d8b3edd9be7f65709b9bc4326ee2a2"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1176, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}