{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTAwNzI4", "number": 19103, "title": "Issue 19060", "bodyText": "This PR incorporates the amazon Rekognition actionlet to core.\nIt can be configured using the Apps.\nWhen an error is reached executing the actionlet it should be logged an move on, no error should be thrown.", "createdAt": "2020-08-14T17:33:42Z", "url": "https://github.com/dotCMS/core/pull/19103", "merged": true, "mergeCommit": {"oid": "aa0b3b72c1682bde8115be21202a975e29e7098f"}, "closed": true, "closedAt": "2020-08-14T20:34:28Z", "author": {"login": "erickgonzalez"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-R9FzAH2gAyNDY4MTAwNzI4OjgxNjZkZjc4MTRjYjI2NDI5NjQ1YWE5ZWM0Mzg2ZjJiM2ZjOWRjMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-6FJRAFqTQ2NzgzNzA5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8166df7814cb26429645aa9ec4386f2b3fc9dc22", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8166df7814cb26429645aa9ec4386f2b3fc9dc22", "committedDate": "2020-08-12T21:04:30Z", "message": "#19060 rekognition dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af53d3d776425ab5e45be9df11ba14e2178faa9", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8af53d3d776425ab5e45be9df11ba14e2178faa9", "committedDate": "2020-08-12T21:05:35Z", "message": "#19060 move rekognition plugin to core"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aedb410a952dc9d2aebb7574fefe29848ff8945", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2aedb410a952dc9d2aebb7574fefe29848ff8945", "committedDate": "2020-08-13T22:29:13Z", "message": "#19060 aws rekognition yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99c595484665b508d59f5dcd259d2860df679aad", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/99c595484665b508d59f5dcd259d2860df679aad", "committedDate": "2020-08-13T22:29:48Z", "message": "#19060 update to use apps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fb2e363e8d124944af8633f4ab443292aa2517", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/57fb2e363e8d124944af8633f4ab443292aa2517", "committedDate": "2020-08-14T16:58:35Z", "message": "#19060 change log level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8d3de97dc40ec2844cbcc942a8663c82575eedc1", "committedDate": "2020-08-14T16:58:56Z", "message": "#19060 update yaml file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzU2MDY3", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467756067", "createdAt": "2020-08-14T17:41:53Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1M1rOHA9Nqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1M1rOHA9Nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk3MA==", "bodyText": "Codacy found an issue: Perhaps 'awsCredentials' could be replaced by a local variable.", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764970", "createdAt": "2020-08-14T17:41:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzU2MDc2", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467756076", "createdAt": "2020-08-14T17:41:53Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NFrOHA9NsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NFrOHA9NsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk3Ng==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on resource specification 'aFile': resource specifications are implicitly final", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764976", "createdAt": "2020-08-14T17:41:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;\n+  private final AmazonRekognition client;\n+\n+  public RekognitionAPI(final String awsKey, final String awsSecret) {\n+\n+    this.awsCredentials = new BasicAWSCredentials(awsKey, awsSecret);\n+    \n+    this.client = AmazonRekognitionClientBuilder\n+                    .standard()\n+                    .withRegion(Regions.US_WEST_2)\n+                    .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))\n+                    .build();\n+\n+  }\n+\n+  public List<String> generateTags(final File file, final int maxLabels, final float minConfidence) throws IOException {\n+\n+    try (final RandomAccessFile aFile = new RandomAccessFile(file.getAbsolutePath(), \"r\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzU2MDg5", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467756089", "createdAt": "2020-08-14T17:41:55Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NVrOHA9Nuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NVrOHA9Nuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NDk4Nw==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470764987", "createdAt": "2020-08-14T17:41:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/actionlet/RekognitionActionlet.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package com.dotcms.rekognition.actionlet;\n+\n+\n+import com.dotcms.security.apps.AppSecrets;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.CacheLocator;\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.TagField;\n+import com.dotcms.rekognition.api.RekognitionAPI;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.db.HibernateUtil;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.image.filter.ResizeImageFilter;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.workflows.actionlet.WorkFlowActionlet;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionletParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.dotmarketing.tag.business.TagAPI;\n+import com.dotmarketing.tag.model.Tag;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import io.vavr.control.Try;\n+\n+public class RekognitionActionlet extends WorkFlowActionlet {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final static int IMAGE_MAX_LENGTH = 5242879;\n+    private final static String TAGGED_BY_AWS = \"TAGGED_BY_AWS\";\n+    public static final String AMAZON_REKOGNITION_APP_CONFIG_KEY = \"dotAmazonRekognition-config\";\n+    public static final String ACCESS_KEY_VAR = \"accessKey\";\n+    public static final String SECRET_ACCESS_KEY_VAR = \"secretAccessKey\";\n+    public static final String MAX_LABELS_VAR = \"maxLabels\";\n+    public static final String MIN_CONFIDENCE_VAR = \"minConfidence\";\n+\n+    private final TagAPI tagAPI = APILocator.getTagAPI();\n+\n+    @Override\n+    public List<WorkflowActionletParameter> getParameters() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"Auto Tag Images - AWS\";\n+    }\n+\n+    @Override\n+    public String getHowTo() {\n+        return \"This Actionlet will automatically tag images using Amazon's Rekognition AI engine. This actionlet needs be after the Save Actionlet\";\n+    }\n+\n+    @Override\n+    public void executeAction(final WorkflowProcessor processor, final Map<String, WorkflowActionClassParameter> params)\n+            throws WorkflowActionFailureException {\n+\n+        final Contentlet contentlet = processor.getContentlet();\n+        Optional<Field> tagFieldOpt = null;\n+        Optional<File> imageOpt     = null;\n+        Optional<AppSecrets> appSecrets = null;\n+        File image;\n+        List<Field> fields;\n+        try {\n+\n+            fields = APILocator.getContentTypeAPI(processor.getUser()).find(contentlet.getContentTypeId()).fields();\n+            tagFieldOpt = fields.stream().filter(TagField.class::isInstance).findFirst();\n+            //Check if there is a Tag Field, if not there is nothing to do here\n+            if (!tagFieldOpt.isPresent()) {\n+                Logger.warn(this,\"There is no Tag Field in the Content Type\");\n+                return;\n+            }\n+\n+            final List<Tag> tags = tagAPI.getTagsByInode(contentlet.getInode());\n+            //Check if there is already a Tag with the name TAGGED_BY_AWS, if there is Tags were already generated and nothing to do here\n+            if (tags.stream().anyMatch(tag -> TAGGED_BY_AWS.equalsIgnoreCase(tag.getTagName()))) {\n+                Logger.warn(this,\"Tags already generated\");\n+                return;\n+            }\n+\n+            imageOpt = fields.stream().filter(BinaryField.class::isInstance)\n+                    .map(field -> Try.of(()->contentlet.getBinary(field.variable())).getOrNull())\n+                    .filter(img -> null != img && UtilMethods.isImage(img.getAbsolutePath()))\n+                    .findFirst();\n+\n+            //Check if there is a Binary Field and if there is an Image set in it, if not there is nothing to do here\n+            if (!imageOpt.isPresent()) {\n+                Logger.warn(this,\"There is no Binary Field or an Image is not set in it\");\n+                return;\n+            }\n+            image = imageOpt.get();\n+\n+            //Get Values from Secrets\n+            final Host host = Try.of(() -> APILocator.getHostAPI().find(contentlet.getHost(), APILocator.systemUser(),false)).getOrElse(APILocator.systemHost());\n+            appSecrets = APILocator.getAppsAPI().getSecrets(AMAZON_REKOGNITION_APP_CONFIG_KEY,true,host,APILocator.systemUser());\n+\n+            if(!appSecrets.isPresent()) {\n+                Logger.warn(RekognitionActionlet.class,\"There is no config set, please set it via Apps Tool\");\n+                return;\n+            }\n+\n+            final String accessKey = appSecrets.get().getSecrets().get(ACCESS_KEY_VAR).getString();\n+            final String secretAccessKey = appSecrets.get().getSecrets().get(SECRET_ACCESS_KEY_VAR).getString();\n+            final int maxLabels = Integer.parseInt(appSecrets.get().getSecrets().get(MAX_LABELS_VAR).getString());\n+            final float minConfidence = Float.parseFloat(appSecrets.get().getSecrets().get(MIN_CONFIDENCE_VAR).getString());\n+            //End Get Values from Secrets\n+\n+            if (image.length() > IMAGE_MAX_LENGTH) {\n+\n+                final Map<String, String[]> args = new HashMap<>();\n+                args.put(\"resize_w\", new String[]{\"1000\"});\n+                image = new ResizeImageFilter().runFilter(image, args);\n+            }\n+\n+            final List<String> awsTags = new RekognitionAPI(accessKey,secretAccessKey).generateTags(image, maxLabels, minConfidence);\n+\n+            Logger.debug(this,\"Tags generated by AWS: \" + awsTags.toString());\n+\n+            awsTags.add(TAGGED_BY_AWS);\n+            for (final String tag : awsTags) {\n+                tagAPI.addContentletTagInode(tag, contentlet.getInode(), contentlet.getHost(), tagFieldOpt.get().variable());\n+            }\n+\n+            HibernateUtil.addCommitListener(contentlet.getInode(),\n+                    ()->this.refresh(contentlet));\n+\n+            CacheLocator.getContentletCache().remove(contentlet);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzU2MTA0", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467756104", "createdAt": "2020-08-14T17:41:56Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NlrOHA9NyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzo0MTo1NlrOHA9NyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc2NTAwMA==", "bodyText": "Codacy found an issue: Ensure that resources like this FileChannel object are closed after use", "url": "https://github.com/dotCMS/core/pull/19103#discussion_r470765000", "createdAt": "2020-08-14T17:41:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rekognition/api/RekognitionAPI.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.dotcms.rekognition.api;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.MappedByteBuffer;\n+import java.nio.channels.FileChannel;\n+import java.util.List;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.regions.Regions;\n+import com.amazonaws.services.rekognition.AmazonRekognition;\n+import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;\n+import com.amazonaws.services.rekognition.model.DetectLabelsRequest;\n+import com.amazonaws.services.rekognition.model.DetectLabelsResult;\n+import com.amazonaws.services.rekognition.model.Image;\n+import com.amazonaws.services.rekognition.model.Label;\n+import java.util.stream.Collectors;\n+\n+public class RekognitionAPI {\n+\n+\n+  private final AWSCredentials awsCredentials;\n+  private final AmazonRekognition client;\n+\n+  public RekognitionAPI(final String awsKey, final String awsSecret) {\n+\n+    this.awsCredentials = new BasicAWSCredentials(awsKey, awsSecret);\n+    \n+    this.client = AmazonRekognitionClientBuilder\n+                    .standard()\n+                    .withRegion(Regions.US_WEST_2)\n+                    .withCredentials(new AWSStaticCredentialsProvider(awsCredentials))\n+                    .build();\n+\n+  }\n+\n+  public List<String> generateTags(final File file, final int maxLabels, final float minConfidence) throws IOException {\n+\n+    try (final RandomAccessFile aFile = new RandomAccessFile(file.getAbsolutePath(), \"r\")) {\n+\n+      final FileChannel inChannel = aFile.getChannel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODM2MTU1", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467836155", "createdAt": "2020-08-14T19:47:37Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODM3MDk3", "url": "https://github.com/dotCMS/core/pull/19103#pullrequestreview-467837097", "createdAt": "2020-08-14T19:49:30Z", "commit": {"oid": "8d3de97dc40ec2844cbcc942a8663c82575eedc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 741, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}