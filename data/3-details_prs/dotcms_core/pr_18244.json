{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MTk3NTg1", "number": 18244, "title": "Issue 17956 apps improvements", "bodyText": "17956 is a list of 21 items bugs/improvements requested all rolled into 1 single ticket.\nThat explains why this PR is relatively big.\nSome of these fixes come to solve validation problems that were not begin based on the AppDescriptor.\nAlso, we're moving away from capturing data using String to char[] for security purposes.", "createdAt": "2020-04-01T19:47:42Z", "url": "https://github.com/dotCMS/core/pull/18244", "merged": true, "mergeCommit": {"oid": "ddfa5d1c0162c554b91b6458d375cc6d87e77a81"}, "closed": true, "closedAt": "2020-04-08T19:29:57Z", "author": {"login": "fabrizzio-dotCMS"}, "timelineItems": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQz8_lgH2gAyMzk3MTk3NTg1OmYwNWNmYTliODFmNjY5M2U5NDdmYTE5Y2YxNDM3NDY0NWExNDc0MmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVZ35DAFqTM4OTQ5MDk0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f05cfa9b81f6693e947fa19cf14374645a14742b", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/f05cfa9b81f6693e947fa19cf14374645a14742b", "committedDate": "2020-03-24T14:40:39Z", "message": "#17965 apps bug fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ec2ad127a85d8310a134398bfd547e8d8ae1dd2", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9ec2ad127a85d8310a134398bfd547e8d8ae1dd2", "committedDate": "2020-03-25T15:35:38Z", "message": "Merge branch 'master' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72570f1bf5957a5ceb9d12f76b66bd943316d098", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/72570f1bf5957a5ceb9d12f76b66bd943316d098", "committedDate": "2020-03-30T16:32:39Z", "message": "#17956 - save point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3da25a2ea84d23f721f0db55cb570f09bdfd53b", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/d3da25a2ea84d23f721f0db55cb570f09bdfd53b", "committedDate": "2020-03-30T21:18:04Z", "message": "#17956 change in the json structure per request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cedb626e7bd921ae26ace0bbb3c67b2619f4c69", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6cedb626e7bd921ae26ace0bbb3c67b2619f4c69", "committedDate": "2020-03-30T23:20:07Z", "message": "#17956 fix in the apps search filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9079ee93d343a554ecaeabaa05ce9b4c08b91844", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9079ee93d343a554ecaeabaa05ce9b4c08b91844", "committedDate": "2020-03-31T00:34:51Z", "message": "#17956 fixing issue counting configs for SYSTEM_HOST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0bdd82efa5f2180dce5c57af2712de53791c11", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/7b0bdd82efa5f2180dce5c57af2712de53791c11", "committedDate": "2020-03-31T14:44:51Z", "message": "#17956 sort props alphabetically and dynamic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dceeda7b91d93b46a2de311c221f50be07ff6cc0", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/dceeda7b91d93b46a2de311c221f50be07ff6cc0", "committedDate": "2020-03-31T16:42:27Z", "message": "#17956  skipping save if the param is a secret all filled with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb760bef22affc16c9bda8bd65430d69bbfeec0", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/dbb760bef22affc16c9bda8bd65430d69bbfeec0", "committedDate": "2020-03-31T16:43:43Z", "message": "#17956  skipping save if the param is a secret all filled with"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0032d706ae9aca6366ee3e674fb6ff0e46ad78ab", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0032d706ae9aca6366ee3e674fb6ff0e46ad78ab", "committedDate": "2020-03-31T17:03:34Z", "message": "#17956 adding lang keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e73dd4058804ebed94a3b43575279af046e22127", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/e73dd4058804ebed94a3b43575279af046e22127", "committedDate": "2020-04-01T04:17:12Z", "message": "#17956 fix compose key for SYSTEM_HOST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "009b63efb4e628a0cad1f8201c289e4ce9e5dc24", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/009b63efb4e628a0cad1f8201c289e4ce9e5dc24", "committedDate": "2020-04-01T19:17:04Z", "message": "#17956 updating postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f39ae38b95a7f4a6bd4356f448e0f4bd51c6bec", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/2f39ae38b95a7f4a6bd4356f448e0f4bd51c6bec", "committedDate": "2020-04-01T19:19:23Z", "message": "#17956 updating postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/bcf30e60c0bc23f20b9ef00a7383f543e89964f5", "committedDate": "2020-04-01T19:40:03Z", "message": "#17956 commenting out code required for future enhancement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTMzODg2", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-385933886", "createdAt": "2020-04-01T20:42:19Z", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0MjoxOVrOF_R1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo0MjoxOVrOF_R1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Njc0Nw==", "bodyText": "not sure why do we need the new List if you are going to sort at the end again", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r401896747", "createdAt": "2020-04-01T20:42:19Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -164,24 +176,65 @@ Response getAppSiteView(\n             final AppDescriptor appDescriptor = appDescriptorOptional.get();\n             final Host host = hostAPI.find(siteId, user, false);\n             if (null == host) {\n-                throw new DotDataException(\n-                        String.format(\" Couldn't find any host with identifier `%s` \", siteId));\n+                throw new DoesNotExistException(\n+                      String.format(\" Couldn't find any host with identifier `%s` \", siteId)\n+                );\n             }\n \n             final Optional<AppSecrets> optionalAppSecrets = appsAPI\n                     .getSecrets(key, true, host, user);\n-            if (optionalAppSecrets.isPresent()) {\n-                final AppSecrets appSecrets = protectHiddenSecrets(\n-                        optionalAppSecrets.get());\n-                final SiteView siteView = new SiteView(host.getIdentifier(), host.getHostname(),\n-                        appSecrets.getSecrets());\n-                return Optional.of(new AppView(appDescriptor, 1L,\n-                        ImmutableList.of(siteView)));\n-            }\n+\n+                //We need to return a view with all the secrets and also descriptors of the remaining parameters merged.\n+                //So we're gonna need a copy of the params on the yml.\n+                final Map<String, ParamDescriptor> descriptorParams = new HashMap<>(appDescriptor.getParams());\n+                //First will process the secrets stored..\n+                //As we process them we we remove them from the `descriptorParams` map.\n+                //They're removed from the map as we go on so we know that what's left in the map doesnt have a secret in storage.\n+                final AppSecrets appSecrets = optionalAppSecrets.isPresent() ? protectHiddenSecrets(optionalAppSecrets.get()) : AppSecrets.empty() ;\n+                final Set<SecretView> mappedSecrets = appSecrets.getSecrets().entrySet()\n+                        .stream()\n+                        .map(e -> new SecretView(e.getKey(),e.getValue(), descriptorParams.remove(e.getKey()))).collect(\n+                                Collectors.toSet());\n+\n+                //Now we process the remaining on `descriptorParams`.\n+                //Transform the DescriptorParams into SecretView\n+                //What ever is left in there is a param that exist on the yml.\n+                // that doesnt have a secret in storage.\n+                final Set<SecretView> mappedDescriptors = appDescriptor.getParams().keySet().stream()\n+                        .map(\n+                                paramKey -> new SecretView(paramKey, null,\n+                                        descriptorParams.remove(paramKey))).collect(\n+                                Collectors.toSet());\n+\n+                //At this point `descriptorParams` should be empty.\n+                assert (descriptorParams.isEmpty());\n+\n+                //Now we need to present them both.\n+                //For which we first add the ones from the descriptor.\n+                final Set<SecretView> merged = new LinkedList<>(mappedDescriptors).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTM4ODc3", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-385938877", "createdAt": "2020-04-01T20:50:06Z", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDowNlrOF_SFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MDowNlrOF_SFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMDg0Mg==", "bodyText": "this one shouldn't be an OR?", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r401900842", "createdAt": "2020-04-01T20:50:06Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -312,62 +440,150 @@ void deleteSecret(final DeleteSecretForm form, final User user)\n \n     /**\n      * Validate the incoming params match the params described by an appDescriptor yml.\n-     * @param incomingParams a set of paramNames\n-     * @param appDescriptor the app template\n-     * @throws DotDataException This will give bac an exception if you send an invalid param.\n+     * This validation is intended to behave as a form validation. It'll make sure that all required values are present at save time.\n+     * And nothing else besides the params described are allowed. Unless they app-desciptor establishes that extraParams are allowed.\n+     * @param form a set of paramNames.\n+     * @param appDescriptor the app template.\n+     * @throws IllegalArgumentException This will give back an exception if you send an invalid param.\n      */\n-    private void validateIncomingParams(final Map<String, Param> incomingParams, final AppDescriptor appDescriptor)\n-            throws DotDataException {\n+    private Map<String, Input> validateFormForSave(final SecretForm form,\n+            final AppDescriptor appDescriptor)\n+            throws IllegalArgumentException {\n+\n+        final Map<String, Input> params = form.getInputParams();\n+        if (!UtilMethods.isSet(params)) {\n+            throw new IllegalArgumentException(\"Required Params aren't set.\");\n+        }\n \n         //Param/Property names are case sensitive.\n-        final Map<String, Param> appDescriptorParams = appDescriptor.getParams();\n-        for (final Entry<String, Param> incomingParamEntry : incomingParams.entrySet()) {\n-            final String incomingParamName = incomingParamEntry.getKey();\n-            final Param describedParam = appDescriptorParams.get(incomingParamName);\n-            if(appDescriptor.isAllowExtraParameters() && null == describedParam){\n-               //if the param isn't found in our description but the allow extra params flag is true we're ok\n-               continue;\n+        final Map<String, ParamDescriptor> appDescriptorParams = appDescriptor.getParams();\n+\n+        for (final Entry<String, ParamDescriptor> appDescriptorParam : appDescriptorParams\n+                .entrySet()) {\n+            final String describedParamName = appDescriptorParam.getKey();\n+            final Input input = params.get(describedParamName);\n+            if (appDescriptorParam.getValue().isRequired() && (input == null || UtilMethods\n+                    .isNotSet(input.getValue()))) {\n+                throw new IllegalArgumentException(\n+                        String.format(\n+                                \"Param `%s` is marked required in the descriptor but does not come with a value.\",\n+                                describedParamName\n+                        )\n+                );\n             }\n-            //If the flag isn't true. Then we must reject the unknown param.\n-            if(null == describedParam) {\n-                throw new IllegalArgumentException(String.format(\n-                        \"Params named `%s` can not be matched against an app descriptor. \",\n-                        incomingParamName));\n+\n+            if (Type.BOOL.equals(appDescriptorParam.getValue().getType()) && UtilMethods\n+                    .isSet(input.getValue())) {\n+                final String asString = new String(input.getValue());\n+                final boolean bool = (asString.equalsIgnoreCase(Boolean.TRUE.toString())\n+                        || asString.equalsIgnoreCase(Boolean.FALSE.toString()));\n+                if (!bool) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\n+                                    \"Can not convert value `%s` to type BOOL for param `%s`.\",\n+                                    asString, describedParamName\n+                            )\n+                    );\n+                }\n+            }\n+        }\n+\n+        if (!appDescriptor.isAllowExtraParameters()) {\n+            final SetView<String> extraParamsFound = Sets\n+                    .difference(params.keySet(), appDescriptorParams.keySet());\n+\n+            if (!extraParamsFound.isEmpty()) {\n+                throw new IllegalArgumentException(\n+                        String.format(\n+                                \"Unknown additional params `%s` not allowed by the app descriptor.\",\n+                                String.join(\", \", extraParamsFound)\n+                        )\n+                );\n             }\n+        }\n+        return params;\n+    }\n+\n+    /**\n+     * This method is meant to validate inputs for an update that can be performed on individual\n+     * properties. It assumes there's an instance already saved and only performs validations on the\n+     * new incoming params. This gives the flexibility to modify the value on individual properties\n+     * that are already saved. If the app We're not expecting\n+     * @throws IllegalArgumentException This will give back an exception if you send an invalid param.\n+     */\n+    private Map<String, Input> validateFormForUpdate(final SecretForm form,\n+            final AppDescriptor appDescriptor)\n+            throws IllegalArgumentException {\n+\n+        final Map<String, Input> params = form.getInputParams();\n+        if (!UtilMethods.isSet(params)) {\n+            throw new IllegalArgumentException(\"Required Params aren't set.\");\n+        }\n \n-            final Param incomingParam = incomingParamEntry.getValue();\n-            //We revise the incoming param against the definition loaded from the yml.\n-            if(describedParam.isRequired() && UtilMethods.isNotSet(incomingParam.getValue())){\n-               throw new IllegalArgumentException(\n-               String.format(\"Params named `%s` is marked as required in the descriptor but does not have any value.\", incomingParamName));\n+        //Param/Property names are case sensitive.\n+        final Map<String, ParamDescriptor> appDescriptorParams = appDescriptor.getParams();\n+        for (final Entry<String, Input> entry : params.entrySet()) {\n+            final String paramName = entry.getKey();\n+            final ParamDescriptor paramDescriptor = appDescriptorParams.get(paramName);\n+            if (null == paramDescriptor && !appDescriptor.isAllowExtraParameters()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "originalPosition": 438}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTQwNzYx", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-385940761", "createdAt": "2020-04-01T20:53:09Z", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MzowOVrOF_SLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1MzowOVrOF_SLHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMjM2NA==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r401902364", "createdAt": "2020-04-01T20:53:09Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/Input.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.dotcms.rest.api.v1.apps;\n+\n+import com.dotcms.repackage.javax.validation.constraints.NotNull;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Arrays;\n+\n+public class Input {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTQxNjcw", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-385941670", "createdAt": "2020-04-01T20:54:40Z", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NDo0MFrOF_SOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NDo0MFrOF_SOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwMzE5Mw==", "bodyText": "not immutable?", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r401903193", "createdAt": "2020-04-01T20:54:40Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/Input.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package com.dotcms.rest.api.v1.apps;\n+\n+import com.dotcms.repackage.javax.validation.constraints.NotNull;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Arrays;\n+\n+public class Input {\n+\n+    @NotNull\n+    private char [] value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTQzMjI5", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-385943229", "createdAt": "2020-04-01T20:57:14Z", "commit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NzoxNFrOF_STcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDo1NzoxNFrOF_STcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkwNDQ5OQ==", "bodyText": "add unit test", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r401904499", "createdAt": "2020-04-01T20:57:14Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/UtilMethods.java", "diffHunk": "@@ -312,6 +312,34 @@ public static final boolean isSet(String x) {\n \n     }\n \n+\n+    public static boolean isNotSet(final char[] chars){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcf30e60c0bc23f20b9ef00a7383f543e89964f5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f", "committedDate": "2020-04-02T02:51:31Z", "message": "#17956 feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MTAyODUw", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386102850", "createdAt": "2020-04-02T04:39:28Z", "commit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDg0NjUz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386484653", "createdAt": "2020-04-02T14:30:36Z", "commit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMDozN1rOF_uB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMjoyMlrOF_uHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODc1OA==", "bodyText": "If this is not needed anymore can be deleted.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r402358758", "createdAt": "2020-04-02T14:30:37Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +329,40 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1OTg1Ng==", "bodyText": "If this is not needed anymore can be deleted.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r402359856", "createdAt": "2020-04-02T14:31:59Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -68,26 +69,69 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private String toJsonString(final AppSecrets object) throws DotDataException {\n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MDE1OQ==", "bodyText": "Same as above.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r402360159", "createdAt": "2020-04-02T14:32:22Z", "author": {"login": "erickgonzalez"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -68,26 +69,69 @@\n             .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n             .findAndRegisterModules();\n \n-    private String toJsonString(final AppSecrets object) throws DotDataException {\n+    /*\n+    char[] toJsonAsChars(final AppSecrets object) throws DotDataException {\n         try {\n-            return jsonMapper.writeValueAsString(object);\n+            final byte [] bytes = jsonMapper.writeValueAsBytes(object);\n+            return bytesToCharArrayUTF(bytes);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n     }\n \n-    private AppSecrets readJson(final String json) throws DotDataException {\n+    AppSecrets readJson2(final char[] chars) throws DotDataException {\n         try {\n-            return jsonMapper.readValue(json, AppSecrets.class);\n+            final byte [] bytes = charsToBytesUTF(chars);\n+            return jsonMapper.readValue(bytes, AppSecrets.class);\n         } catch (IOException e) {\n             throw new DotDataException(e);\n         }\n-    }\n+    }*/\n \n     private AppSecrets readJson(final char[] chars) throws DotDataException {\n-        return readJson(String.valueOf(chars));\n+        try {\n+            return jsonMapper.readValue(new String(chars), AppSecrets.class);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n+    }\n+\n+    private String toJsonAsString(final AppSecrets object) throws DotDataException {\n+        try {\n+            return jsonMapper.writeValueAsString(object);\n+        } catch (IOException e) {\n+            throw new DotDataException(e);\n+        }\n     }\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTE5NTA2", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386519506", "createdAt": "2020-04-02T15:05:30Z", "commit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTowNTozMFrOF_vvYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNToyMTo1OFrOF_wgqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4Njc4Nw==", "bodyText": "remove or uncomment this code", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r402386787", "createdAt": "2020-04-02T15:05:30Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/security/apps/AppsAPIImplTest.java", "diffHunk": "@@ -329,6 +329,40 @@ public void Test_Non_Admin_User_With_Portlet_Read_Attempt() throws DotDataExcept\n         api.saveSecrets(builder.build(), APILocator.systemHost() , nonAdminUserWithAccessToPortlet);\n     }\n \n+    /*\n+    @Test\n+    public void Test_BytesToChar_No_Middle_String_Conversion() throws DotDataException {\n+        final AppsAPIImpl impl =  new AppsAPIImpl();\n+        final String in = RandomStringUtils.randomAlphanumeric(600);\n+        final char [] chars = impl.bytesToCharArrayUTF(in.getBytes());\n+        final byte [] bytes = impl.charsToBytesUTF(chars);\n+        final String out = new String(bytes);\n+        Assert.assertEquals(in,out);\n+    }\n+\n+    @Test\n+    public void Test_Secret_Json_Serialization_No_String_Middle_Man() throws DotDataException {\n+        final AppsAPIImpl impl = new AppsAPIImpl();\n+        final AppSecrets secretsIn = new AppSecrets.Builder()\n+                .withKey(\"TheKey\")\n+                .withHiddenSecret(\"hidden\", \"I'm hidden\")\n+                .withSecret(\"non-hidden\", \"I'm not hidden\")\n+                .withSecret(\"bool\", true)\n+                .build();\n+        final char[] toJsonAsChars = impl.toJsonAsChars(secretsIn);\n+        final AppSecrets secretsOut = impl.readJson2(toJsonAsChars);\n+        Assert.assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+\n+        Assert.assertEquals(secretsIn.getSecrets().size(), secretsOut.getSecrets().size());\n+\n+        final Set<Entry<String, Secret>> secretsInEntries = secretsIn.getSecrets().entrySet();\n+        for (final Entry<String, Secret> entryIn : secretsInEntries) {\n+            Assert.assertEquals(secretsIn.getKey(), secretsOut.getKey());\n+            final Secret out = secretsOut.getSecrets().get(entryIn.getKey());\n+            Assert.assertNotNull(out);\n+            Assert.assertTrue(out.equals(entryIn.getValue()));//This does a deepEquals.\n+        }\n+    }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5OTQwMA==", "bodyText": "maybe it should go to a private method so this comment can go in the method javadoc", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r402399400", "createdAt": "2020-04-02T15:21:58Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -164,24 +176,65 @@ Response getAppSiteView(\n             final AppDescriptor appDescriptor = appDescriptorOptional.get();\n             final Host host = hostAPI.find(siteId, user, false);\n             if (null == host) {\n-                throw new DotDataException(\n-                        String.format(\" Couldn't find any host with identifier `%s` \", siteId));\n+                throw new DoesNotExistException(\n+                      String.format(\" Couldn't find any host with identifier `%s` \", siteId)\n+                );\n             }\n \n             final Optional<AppSecrets> optionalAppSecrets = appsAPI\n                     .getSecrets(key, true, host, user);\n-            if (optionalAppSecrets.isPresent()) {\n-                final AppSecrets appSecrets = protectHiddenSecrets(\n-                        optionalAppSecrets.get());\n-                final SiteView siteView = new SiteView(host.getIdentifier(), host.getHostname(),\n-                        appSecrets.getSecrets());\n-                return Optional.of(new AppView(appDescriptor, 1L,\n-                        ImmutableList.of(siteView)));\n-            }\n+\n+                //We need to return a view with all the secrets and also descriptors of the remaining parameters merged.\n+                //So we're gonna need a copy of the params on the yml.\n+                final Map<String, ParamDescriptor> descriptorParams = new HashMap<>(appDescriptor.getParams());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a3c2633018fe9d8be0c210bcb01ddfe94a60e7f"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e39af05ab73bc7f426d44d9f184c244a358cc44", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/9e39af05ab73bc7f426d44d9f184c244a358cc44", "committedDate": "2020-04-02T16:24:47Z", "message": "#17956  adding a deserializer to deal convert bool values into char array + more feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTk3MTQz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386597143", "createdAt": "2020-04-02T16:31:16Z", "commit": {"oid": "9e39af05ab73bc7f426d44d9f184c244a358cc44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTk4MTI2", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386598126", "createdAt": "2020-04-02T16:32:31Z", "commit": {"oid": "9e39af05ab73bc7f426d44d9f184c244a358cc44"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b09bd431ab6bcfa67d902bdd89c86bb6ef4adc9", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6b09bd431ab6bcfa67d902bdd89c86bb6ef4adc9", "committedDate": "2020-04-02T17:50:14Z", "message": "#17956  clean-up filter  routine"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjYyNDIx", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-386662421", "createdAt": "2020-04-02T17:51:54Z", "commit": {"oid": "6b09bd431ab6bcfa67d902bdd89c86bb6ef4adc9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1212d5114e02271982768504268b536243a3cfb3", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/1212d5114e02271982768504268b536243a3cfb3", "committedDate": "2020-04-03T21:35:37Z", "message": "#18263  fix app detail items order mirrors yml param order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500344501873ed74dfda087ffd23fe4a46113438", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/500344501873ed74dfda087ffd23fe4a46113438", "committedDate": "2020-04-04T04:38:11Z", "message": "#18263  respect natural order defined by the yml file + cache delete fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c987e9e1355ce5e1aef4268ea286206a5fafb2d", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/0c987e9e1355ce5e1aef4268ea286206a5fafb2d", "committedDate": "2020-04-06T18:03:29Z", "message": "#18263  adding a custom serializer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d1ef7e8c2191265c97aed0e8d0a2598ea03e3d6", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/6d1ef7e8c2191265c97aed0e8d0a2598ea03e3d6", "committedDate": "2020-04-06T18:06:03Z", "message": "Merge branch 'master' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "850c9d91dfd7999ede024b5abbe5231bfaa4519a", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/850c9d91dfd7999ede024b5abbe5231bfaa4519a", "committedDate": "2020-04-06T18:08:31Z", "message": "Merge branch 'issue-18263-order-keys-in-yml' into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30f9d5ec225743989c507085b626cf8c2181323", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/c30f9d5ec225743989c507085b626cf8c2181323", "committedDate": "2020-04-07T16:02:41Z", "message": "Merge branch 'master' of https://github.com/dotCMS/core into issue-17956-apps-improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc", "author": {"user": {"login": "fabrizzio-dotCMS", "name": "Fabrizzio Araya"}}, "url": "https://github.com/dotCMS/core/commit/4ed60cd76684fb92e082d60c65d32d3a70d0addc", "committedDate": "2020-04-07T20:59:51Z", "message": "fixes on broken postman tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzI1", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490725", "createdAt": "2020-04-07T21:06:47Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0N1rOGCWJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0N1rOGCWJPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE1MQ==", "bodyText": "Issue found: Local variable 'that' could be declared final", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113151", "createdAt": "2020-04-07T21:06:47Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/SecretView.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AbstractProperty;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+@JsonSerialize(using = SecretView.SecretViewSerializer.class)\n+public class SecretView {\n+\n+    private final String name;\n+\n+    final private Secret secret;\n+\n+    final private ParamDescriptor paramDescriptor;\n+\n+    final private boolean dynamic;\n+\n+    public SecretView(final String name, final Secret secret, final ParamDescriptor paramDescriptor) {\n+        this.name = name;\n+        this.secret = secret;\n+        this.paramDescriptor = paramDescriptor;\n+        this.dynamic = null == paramDescriptor;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Secret getSecret() {\n+        return secret;\n+    }\n+\n+    public ParamDescriptor getParamDescriptor() {\n+        return paramDescriptor;\n+    }\n+\n+    public boolean isDynamic() {\n+        return dynamic;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        SecretView that = (SecretView) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzM0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490734", "createdAt": "2020-04-07T21:06:48Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0OFrOGCWJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0OFrOGCWJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE2Ng==", "bodyText": "Issue found: The user-supplied array 'value' is stored directly.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113166", "createdAt": "2020-04-07T21:06:48Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/Input.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.rest.api.v1.apps;\n+\n+import com.dotcms.repackage.javax.validation.constraints.NotNull;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * This class represent an input value captured using a char array The value on the char array can\n+ * be wiped out as opposed to a string which are final\n+ */\n+@JsonDeserialize(using = Input.InputDeserialize.class)\n+public class Input {\n+\n+    @NotNull\n+    private final char[] value;\n+\n+    private final boolean hidden;\n+\n+    private Input(final char[] value, final boolean hidden) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzQ0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490744", "createdAt": "2020-04-07T21:06:49Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0OVrOGCWJVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo0OVrOGCWJVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE3NA==", "bodyText": "Issue found: The String literal \"param1\" appears 20 times in this file; the first occurrence is on line 249", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113174", "createdAt": "2020-04-07T21:06:49Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -239,11 +249,15 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n     @Test\n     public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n \n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzU0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490754", "createdAt": "2020-04-07T21:06:50Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MFrOGCWJXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MFrOGCWJXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE4Mw==", "bodyText": "Issue found: Parameter 'o' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113183", "createdAt": "2020-04-07T21:06:50Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/SecretView.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AbstractProperty;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+@JsonSerialize(using = SecretView.SecretViewSerializer.class)\n+public class SecretView {\n+\n+    private final String name;\n+\n+    final private Secret secret;\n+\n+    final private ParamDescriptor paramDescriptor;\n+\n+    final private boolean dynamic;\n+\n+    public SecretView(final String name, final Secret secret, final ParamDescriptor paramDescriptor) {\n+        this.name = name;\n+        this.secret = secret;\n+        this.paramDescriptor = paramDescriptor;\n+        this.dynamic = null == paramDescriptor;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Secret getSecret() {\n+        return secret;\n+    }\n+\n+    public ParamDescriptor getParamDescriptor() {\n+        return paramDescriptor;\n+    }\n+\n+    public boolean isDynamic() {\n+        return dynamic;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzY0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490764", "createdAt": "2020-04-07T21:06:51Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MVrOGCWJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MVrOGCWJZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE4OQ==", "bodyText": "Issue found: The String literal \"val-2\" appears 7 times in this file; the first occurrence is on line 381", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113189", "createdAt": "2020-04-07T21:06:51Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -357,10 +378,13 @@ public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_O\n     @Test\n     public void Test_Create_App_Descriptor_Then_Create_App_Integration_Then_Delete_App_Descriptor() {\n \n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor\n+                        .newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param2\", ParamDescriptor\n+                        .newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 207}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzcy", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490772", "createdAt": "2020-04-07T21:06:52Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MlrOGCWJbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1MlrOGCWJbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzE5Ng==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113196", "createdAt": "2020-04-07T21:06:52Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -426,12 +631,26 @@ private AppSecrets protectHiddenSecrets(final AppSecrets appSecrets){\n         final Map<String,Secret> sourceSecrets = appSecrets.getSecrets();\n         for (final Entry<String, Secret> secretEntry : sourceSecrets.entrySet()) {\n             if(secretEntry.getValue().isHidden()){\n-                builder.withHiddenSecret(secretEntry.getKey(), PROTECTED_HIDDEN_SECRET);\n+                builder.withHiddenSecret(secretEntry.getKey(), HIDDEN_SECRET_MASK);\n             } else {\n                 builder.withSecret(secretEntry.getKey(),secretEntry.getValue());\n             }\n         }\n         return builder.build();\n     }\n \n+    /**\n+     * This method checks if we're looking at a char array all filled with the character `*`\n+     * @param chars\n+     * @return\n+     */\n+    private boolean isAllFilledWithAsters(final char [] chars){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 527}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwNzkw", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490790", "createdAt": "2020-04-07T21:06:53Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NFrOGCWJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NFrOGCWJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzIwOQ==", "bodyText": "Issue found: Avoid using Literals in Conditional Statements", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113209", "createdAt": "2020-04-07T21:06:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -426,12 +631,26 @@ private AppSecrets protectHiddenSecrets(final AppSecrets appSecrets){\n         final Map<String,Secret> sourceSecrets = appSecrets.getSecrets();\n         for (final Entry<String, Secret> secretEntry : sourceSecrets.entrySet()) {\n             if(secretEntry.getValue().isHidden()){\n-                builder.withHiddenSecret(secretEntry.getKey(), PROTECTED_HIDDEN_SECRET);\n+                builder.withHiddenSecret(secretEntry.getKey(), HIDDEN_SECRET_MASK);\n             } else {\n                 builder.withSecret(secretEntry.getKey(),secretEntry.getValue());\n             }\n         }\n         return builder.build();\n     }\n \n+    /**\n+     * This method checks if we're looking at a char array all filled with the character `*`\n+     * @param chars\n+     * @return\n+     */\n+    private boolean isAllFilledWithAsters(final char [] chars){\n+         for(final char chr: chars){\n+            if(chr != '*'){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 529}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODAz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490803", "createdAt": "2020-04-07T21:06:55Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NVrOGCWJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NVrOGCWJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzIxNw==", "bodyText": "Issue found: Local variable 'secretEntry' could be declared final", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113217", "createdAt": "2020-04-07T21:06:55Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -487,19 +527,25 @@ public void Test_Protected_Hidden_Secret() {\n                         .getEntity();\n                 Assert.assertNotNull(appDetailedView.getSites());\n                 Assert.assertFalse(appDetailedView.getSites().isEmpty());\n-                final Map<String, Secret> secrets = appDetailedView.getSites().get(0)\n-                        .getSecrets();\n-                for (Entry<String, Secret> secretEntry : secrets.entrySet()) {\n+                final Map<String, SecretView> secrets = appDetailedView.getSites().get(0)\n+                        .getSecrets().stream().collect(Collectors.toMap(SecretView::getName,\n+                                Function.identity(),(v1, v2) -> v1, LinkedHashMap::new));\n+                //Using a LinkedHashMap we guarantee we keep the original order on which the elements were sent.\n+                int index = 0;\n+                for (Entry<String, SecretView> secretEntry : secrets.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 329}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODEz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490813", "createdAt": "2020-04-07T21:06:56Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NlrOGCWJiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1NlrOGCWJiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzIyNQ==", "bodyText": "Issue found: Parameter 'o' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113225", "createdAt": "2020-04-07T21:06:56Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AbstractProperty.java", "diffHunk": "@@ -43,4 +44,22 @@ public boolean getBoolean() {\n         return Boolean.parseBoolean(getString());\n     }\n \n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODI2", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490826", "createdAt": "2020-04-07T21:06:57Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1N1rOGCWJkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1N1rOGCWJkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzIzNQ==", "bodyText": "Issue found: The String literal \"any-value\" appears 5 times in this file; the first occurrence is on line 685", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113235", "createdAt": "2020-04-07T21:06:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -591,30 +642,150 @@ public void Test_Required_Params() throws IOException, DotDataException, DotSecu\n             Assert.assertNotNull(appResponse);\n             Assert.assertEquals(HttpStatus.SC_OK, appResponse.getStatus());\n \n+            //Secrets are destroyed for security every time. Making the form useless. They need to be re-generated every time.\n             //Here's a secret with an empty param that is marked as required.\n-            final Map<String, Param> secretParam = ImmutableMap.of(\n-                    \"param1\", Param.newParam(\"\", false, Type.STRING, null, null, true)\n+            final Map<String, Input> inputParamMap = ImmutableMap.of(\n+                    \"param1\", Input.newInputParam(\"\".toCharArray(),false));\n+\n+            final Host host = new SiteDataGen().nextPersisted();\n+            final SecretForm secretForm = new SecretForm(inputParamMap);\n+            final Response createSecretResponse = appsResource\n+                    .createAppSecrets(request, response, key, host.getIdentifier(), secretForm);\n+            Assert.assertEquals(HttpStatus.SC_BAD_REQUEST, createSecretResponse.getStatus());\n+        }catch (Exception e){\n+            Logger.error(AppsResourceTest.class, e);\n+            fail();\n+        }\n+    }\n+\n+    @Test\n+    public void Test_Required_Params_Multiple_Params_Descriptor_Non_Empty_Value_Missing_Required_Param_Sent()  {\n+\n+        final SortedMap<String, ParamDescriptor> initialParamsMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param2\", ParamDescriptor.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true)\n+        );\n+\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        final HttpServletResponse response = mock(HttpServletResponse.class);\n+\n+        when(request.getRequestURI()).thenReturn(\"/baseURL\");\n+\n+        long time = System.currentTimeMillis();\n+\n+        final String key = String.format(\"all_lower_case_not_too_short_prefix_%d\", time);\n+        final String fileName = String.format(\"%s.yml\", key);\n+\n+        //We're indicating that extra params are allowed to test required params are still required\n+        try(final InputStream inputStream = createAppDescriptorFile(fileName, key,\n+                key,\n+                \"Test-required-params\",\n+                true, initialParamsMap)){\n+\n+            final Response appResponse = appsResource\n+                    .createApp(request, response,\n+                            createFormDataMultiPart(fileName, inputStream));\n+            Assert.assertNotNull(appResponse);\n+            Assert.assertEquals(HttpStatus.SC_OK, appResponse.getStatus());\n+\n+            //Secrets are destroyed for security every time. Making the form useless. They need to be re-generated every time.\n+            //We're sending only one parameter when the descriptor says there's another one mandatory.\n+            final Map<String, Input> inputParamMap = ImmutableMap.of(\n+                    \"param1\", Input.newInputParam(\"any-value\".toCharArray(),false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 455}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODMx", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490831", "createdAt": "2020-04-07T21:06:58Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1OFrOGCWJlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1OFrOGCWJlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzIzOA==", "bodyText": "Issue found: The String literal \"true\" appears 4 times in this file; the first occurrence is on line 468", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113238", "createdAt": "2020-04-07T21:06:58Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -429,13 +459,15 @@ public void Test_Create_App_Descriptor_Then_Create_App_Integration_Then_Delete_A\n     }\n \n     @Test\n-    public void Test_Protected_Hidden_Secret() {\n-\n-        final Map<String, Param> initialParamsMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"true\", false, Type.BOOL, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-2\", true, Type.STRING, \"label\", \"hint\", true),\n-                \"param4\", Param.newParam(\"true\", true, Type.BOOL, \"label\", \"hint\", true)\n+    public void Test_Protected_Hidden_Secret_And_Values_Returned_Match_Descriptor() {\n+\n+        final List<String> orderedParamNames = ImmutableList.of(\"param1\",\"param2\",\"param3\",\"param4\");\n+        //This is how the descriptor looks like.\n+        final SortedMap<String, ParamDescriptor> appDescriptorParamsMap = ImmutableSortedMap.of(\n+                orderedParamNames.get(0), ParamDescriptor.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n+                orderedParamNames.get(1), ParamDescriptor.newParam(\"true\", false, Type.BOOL, \"label\", \"hint\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 280}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODQw", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490840", "createdAt": "2020-04-07T21:06:59Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1OVrOGCWJnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNjo1OVrOGCWJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI0Nw==", "bodyText": "Issue found: The String literal \"label\" appears 21 times in this file; the first occurrence is on line 135", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113247", "createdAt": "2020-04-07T21:06:59Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -131,10 +134,17 @@ private FormDataMultiPart createFormDataMultiPart(final String fileName,\n     public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_The_Whole_App() {\n \n         final Host host = new SiteDataGen().nextPersisted();\n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"p1\", Param.newParam(\"v1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p2\", Param.newParam(\"v2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"p3\", Param.newParam(\"v3\", false, Type.STRING, \"label\", \"hint\", true)\n+\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"p1\", ParamDescriptor.newParam(\"v1\", false, Type.STRING, \"label\", \"hint\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODQ3", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490847", "createdAt": "2020-04-07T21:06:59Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMFrOGCWJpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMFrOGCWJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI1NA==", "bodyText": "Issue found: The String literal \"param2\" appears 10 times in this file; the first occurrence is on line 251", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113254", "createdAt": "2020-04-07T21:07:00Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -239,11 +249,15 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n     @Test\n     public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n \n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor\n+                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param2\", ParamDescriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODY0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490864", "createdAt": "2020-04-07T21:07:00Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMVrOGCWJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMVrOGCWJsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI2NQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113265", "createdAt": "2020-04-07T21:07:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/AppsHelper.java", "diffHunk": "@@ -312,62 +429,150 @@ void deleteSecret(final DeleteSecretForm form, final User user)\n \n     /**\n      * Validate the incoming params match the params described by an appDescriptor yml.\n-     * @param incomingParams a set of paramNames\n-     * @param appDescriptor the app template\n-     * @throws DotDataException This will give bac an exception if you send an invalid param.\n+     * This validation is intended to behave as a form validation. It'll make sure that all required values are present at save time.\n+     * And nothing else besides the params described are allowed. Unless they app-desciptor establishes that extraParams are allowed.\n+     * @param form a set of paramNames.\n+     * @param appDescriptor the app template.\n+     * @throws IllegalArgumentException This will give back an exception if you send an invalid param.\n      */\n-    private void validateIncomingParams(final Map<String, Param> incomingParams, final AppDescriptor appDescriptor)\n-            throws DotDataException {\n+    private Map<String, Input> validateFormForSave(final SecretForm form,\n+            final AppDescriptor appDescriptor)\n+            throws IllegalArgumentException {\n+\n+        final Map<String, Input> params = form.getInputParams();\n+        if (!UtilMethods.isSet(params)) {\n+            throw new IllegalArgumentException(\"Required Params aren't set.\");\n+        }\n \n         //Param/Property names are case sensitive.\n-        final Map<String, Param> appDescriptorParams = appDescriptor.getParams();\n-        for (final Entry<String, Param> incomingParamEntry : incomingParams.entrySet()) {\n-            final String incomingParamName = incomingParamEntry.getKey();\n-            final Param describedParam = appDescriptorParams.get(incomingParamName);\n-            if(appDescriptor.isAllowExtraParameters() && null == describedParam){\n-               //if the param isn't found in our description but the allow extra params flag is true we're ok\n-               continue;\n+        final Map<String, ParamDescriptor> appDescriptorParams = appDescriptor.getParams();\n+\n+        for (final Entry<String, ParamDescriptor> appDescriptorParam : appDescriptorParams\n+                .entrySet()) {\n+            final String describedParamName = appDescriptorParam.getKey();\n+            final Input input = params.get(describedParamName);\n+            if (appDescriptorParam.getValue().isRequired() && (input == null || UtilMethods\n+                    .isNotSet(input.getValue()))) {\n+                throw new IllegalArgumentException(\n+                        String.format(\n+                                \"Param `%s` is marked required in the descriptor but does not come with a value.\",\n+                                describedParamName\n+                        )\n+                );\n             }\n-            //If the flag isn't true. Then we must reject the unknown param.\n-            if(null == describedParam) {\n-                throw new IllegalArgumentException(String.format(\n-                        \"Params named `%s` can not be matched against an app descriptor. \",\n-                        incomingParamName));\n+\n+            if (Type.BOOL.equals(appDescriptorParam.getValue().getType()) && UtilMethods\n+                    .isSet(input.getValue())) {\n+                final String asString = new String(input.getValue());\n+                final boolean bool = (asString.equalsIgnoreCase(Boolean.TRUE.toString())\n+                        || asString.equalsIgnoreCase(Boolean.FALSE.toString()));\n+                if (!bool) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\n+                                    \"Can not convert value `%s` to type BOOL for param `%s`.\",\n+                                    asString, describedParamName\n+                            )\n+                    );\n+                }\n             }\n+        }\n \n-            final Param incomingParam = incomingParamEntry.getValue();\n-            //We revise the incoming param against the definition loaded from the yml.\n-            if(describedParam.isRequired() && UtilMethods.isNotSet(incomingParam.getValue())){\n-               throw new IllegalArgumentException(\n-               String.format(\"Params named `%s` is marked as required in the descriptor but does not have any value.\", incomingParamName));\n+        if (!appDescriptor.isAllowExtraParameters()) {\n+            final SetView<String> extraParamsFound = Sets\n+                    .difference(params.keySet(), appDescriptorParams.keySet());\n+\n+            if (!extraParamsFound.isEmpty()) {\n+                throw new IllegalArgumentException(\n+                        String.format(\n+                                \"Unknown additional params `%s` not allowed by the app descriptor.\",\n+                                String.join(\", \", extraParamsFound)\n+                        )\n+                );\n             }\n         }\n+        return params;\n+    }\n+\n+    /**\n+     * This method is meant to validate inputs for an update that can be performed on individual\n+     * properties. It assumes there's an instance already saved and only performs validations on the\n+     * new incoming params. This gives the flexibility to modify the value on individual properties\n+     * that are already saved. If the app We're not expecting\n+     * @throws IllegalArgumentException This will give back an exception if you send an invalid param.\n+     */\n+    private Map<String, Input> validateFormForUpdate(final SecretForm form,\n+            final AppDescriptor appDescriptor)\n+            throws IllegalArgumentException {\n+\n+        final Map<String, Input> params = form.getInputParams();\n+        if (!UtilMethods.isSet(params)) {\n+            throw new IllegalArgumentException(\"Required Params aren't set.\");\n+        }\n+\n+        //Param/Property names are case sensitive.\n+        final Map<String, ParamDescriptor> appDescriptorParams = appDescriptor.getParams();\n+        for (final Entry<String, Input> entry : params.entrySet()) {\n+            final String paramName = entry.getKey();\n+            final ParamDescriptor paramDescriptor = appDescriptorParams.get(paramName);\n+            if (null == paramDescriptor && !appDescriptor.isAllowExtraParameters()) {\n+                throw new IllegalArgumentException(String.format(\n+                        \"Unknown additional Param `%s` not allowed by the app descriptor.\",\n+                        paramName));\n+            } else {\n+                if (null != paramDescriptor && paramDescriptor.isRequired() && null != entry\n+                        .getValue() && UtilMethods.isNotSet(entry.getValue().getValue())) {\n+                    throw new IllegalArgumentException(\n+                            String.format(\n+                                    \"Param `%s` is marked required in the descriptor but does not come with a value.\",\n+                                    paramName\n+                            )\n+                    );\n+                }\n+\n+                if (paramDescriptor != null && Type.BOOL.equals(paramDescriptor.getType())\n+                        && UtilMethods.isSet(entry.getValue())) {\n+                    final String asString = new String(entry.getValue().getValue());\n+                    final boolean bool = (asString.equalsIgnoreCase(Boolean.TRUE.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 441}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODcz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490873", "createdAt": "2020-04-07T21:07:02Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMlrOGCWJuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowMlrOGCWJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI3Mg==", "bodyText": "Issue found: The String literal \"param3\" appears 10 times in this file; the first occurrence is on line 253", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113272", "createdAt": "2020-04-07T21:07:02Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -239,11 +249,15 @@ public void Test_Create_app_descriptor_Then_Create_App_Integration_Then_Delete_T\n     @Test\n     public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_One_Single_Secret() {\n \n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor\n+                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param2\", ParamDescriptor\n+                        .newParam(\"default\", false, Type.STRING, \"label\", \"hint\", true),\n+                \"param3\", ParamDescriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODgx", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490881", "createdAt": "2020-04-07T21:07:03Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowM1rOGCWJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowM1rOGCWJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI4Mw==", "bodyText": "Issue found: Avoid variables with short names like o", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113283", "createdAt": "2020-04-07T21:07:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/view/SecretView.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.dotcms.rest.api.v1.apps.view;\n+\n+import com.dotcms.rest.api.v1.DotObjectMapperProvider;\n+import com.dotcms.security.apps.AbstractProperty;\n+import com.dotcms.security.apps.ParamDescriptor;\n+import com.dotcms.security.apps.Secret;\n+import com.dotcms.security.apps.Type;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+@JsonSerialize(using = SecretView.SecretViewSerializer.class)\n+public class SecretView {\n+\n+    private final String name;\n+\n+    final private Secret secret;\n+\n+    final private ParamDescriptor paramDescriptor;\n+\n+    final private boolean dynamic;\n+\n+    public SecretView(final String name, final Secret secret, final ParamDescriptor paramDescriptor) {\n+        this.name = name;\n+        this.secret = secret;\n+        this.paramDescriptor = paramDescriptor;\n+        this.dynamic = null == paramDescriptor;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public Secret getSecret() {\n+        return secret;\n+    }\n+\n+    public ParamDescriptor getParamDescriptor() {\n+        return paramDescriptor;\n+    }\n+\n+    public boolean isDynamic() {\n+        return dynamic;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwODkz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490893", "createdAt": "2020-04-07T21:07:04Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNFrOGCWJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNFrOGCWJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzI5NQ==", "bodyText": "Issue found: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113295", "createdAt": "2020-04-07T21:07:04Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/Input.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.rest.api.v1.apps;\n+\n+import com.dotcms.repackage.javax.validation.constraints.NotNull;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * This class represent an input value captured using a char array The value on the char array can\n+ * be wiped out as opposed to a string which are final\n+ */\n+@JsonDeserialize(using = Input.InputDeserialize.class)\n+public class Input {\n+\n+    @NotNull\n+    private final char[] value;\n+\n+    private final boolean hidden;\n+\n+    private Input(final char[] value, final boolean hidden) {\n+        this.value = value;\n+        this.hidden = hidden;\n+    }\n+\n+    @JsonCreator\n+    public static Input newInputParam(@JsonProperty(\"value\") final char[] value,\n+            @JsonProperty(\"hidden\") final boolean hidden) {\n+        return new Input(value, hidden);\n+    }\n+\n+    public static Input newInputParam(final char[] value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwOTA0", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490904", "createdAt": "2020-04-07T21:07:05Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNVrOGCWJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNVrOGCWJ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzMwMg==", "bodyText": "Issue found: A class which only has private constructors should be final", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113302", "createdAt": "2020-04-07T21:07:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/ParamDescriptor.java", "diffHunk": "@@ -8,15 +8,15 @@\n  * Class used to collect properties or secrets set from the front-end\n  * This is mostly used to pass values from the front-end into the Resource.\n  */\n-public class Param extends AbstractProperty<String>{\n+public class ParamDescriptor extends AbstractProperty<String>{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwOTE1", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490915", "createdAt": "2020-04-07T21:07:06Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNlrOGCWJ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowNlrOGCWJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzMxMw==", "bodyText": "Issue found: It is a good practice to call super() in a constructor", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113313", "createdAt": "2020-04-07T21:07:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/SecretForm.java", "diffHunk": "@@ -14,45 +13,28 @@\n public class SecretForm extends Validated {\n \n     @NotNull\n-    private final String key;\n-\n-    @NotNull\n-    private final String siteId;\n-\n-    @NotNull\n-    private final Map<String, Param> params;\n+    private final Map<String, Input> inputParams;\n \n     @JsonCreator\n-    public SecretForm(@JsonProperty(\"key\") final String key,\n-            @JsonProperty(\"siteId\") final String siteId,\n-            @JsonProperty(\"params\") final Map<String, Param> params) {\n-        this.key = key;\n-        this.siteId = siteId;\n-        this.params = params;\n-    }\n-\n-    /**\n-     * This should contain the unique identifier that differentiates the service\n-     * @return\n-     */\n-    public String getKey() {\n-        return key;\n+    public SecretForm(final Map<String, Input> inputParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwOTI3", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490927", "createdAt": "2020-04-07T21:07:07Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowN1rOGCWJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowN1rOGCWJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzMyMg==", "bodyText": "Issue found: Avoid variables with short names like o", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113322", "createdAt": "2020-04-07T21:07:07Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/security/apps/AbstractProperty.java", "diffHunk": "@@ -43,4 +44,22 @@ public boolean getBoolean() {\n         return Boolean.parseBoolean(getString());\n     }\n \n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwOTQz", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490943", "createdAt": "2020-04-07T21:07:09Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowOVrOGCWJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzowOVrOGCWJ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzMzNg==", "bodyText": "Issue found: The String literal \"val-1\" appears 12 times in this file; the first occurrence is on line 379", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113336", "createdAt": "2020-04-07T21:07:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/apps/AppsResourceTest.java", "diffHunk": "@@ -357,10 +378,13 @@ public void Test_Create_App_descriptor_Then_Create_App_Integration_Then_Delete_O\n     @Test\n     public void Test_Create_App_Descriptor_Then_Create_App_Integration_Then_Delete_App_Descriptor() {\n \n-        final Map<String, Param> paramMap = ImmutableMap.of(\n-                \"param1\", Param.newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param2\", Param.newParam(\"val-2\", false, Type.STRING, \"label\", \"hint\", true),\n-                \"param3\", Param.newParam(\"val-3\", false, Type.STRING, \"label\", \"hint\", true)\n+        final SortedMap<String, ParamDescriptor> paramMap = ImmutableSortedMap.of(\n+                \"param1\", ParamDescriptor\n+                        .newParam(\"val-1\", false, Type.STRING, \"label\", \"hint\", true),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 205}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkwOTQ5", "url": "https://github.com/dotCMS/core/pull/18244#pullrequestreview-389490949", "createdAt": "2020-04-07T21:07:10Z", "commit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzoxMFrOGCWKAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowNzoxMFrOGCWKAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExMzM0NQ==", "bodyText": "Issue found: Returning 'value' may expose an internal array.", "url": "https://github.com/dotCMS/core/pull/18244#discussion_r405113345", "createdAt": "2020-04-07T21:07:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/apps/Input.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.rest.api.v1.apps;\n+\n+import com.dotcms.repackage.javax.validation.constraints.NotNull;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * This class represent an input value captured using a char array The value on the char array can\n+ * be wiped out as opposed to a string which are final\n+ */\n+@JsonDeserialize(using = Input.InputDeserialize.class)\n+public class Input {\n+\n+    @NotNull\n+    private final char[] value;\n+\n+    private final boolean hidden;\n+\n+    private Input(final char[] value, final boolean hidden) {\n+        this.value = value;\n+        this.hidden = hidden;\n+    }\n+\n+    @JsonCreator\n+    public static Input newInputParam(@JsonProperty(\"value\") final char[] value,\n+            @JsonProperty(\"hidden\") final boolean hidden) {\n+        return new Input(value, hidden);\n+    }\n+\n+    public static Input newInputParam(final char[] value) {\n+        return new Input(value, false);\n+    }\n+\n+    public char[] getValue() {\n+        return value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed60cd76684fb92e082d60c65d32d3a70d0addc"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1244, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}