{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDYxMzY3", "number": 19032, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDowODowOVrOEVbfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0N1rOEV4jBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTA1ODgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDowODowOVrOG8LVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyNzo1MFrOG8bQxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng==", "bodyText": "I am not sure if this should be fieldName, maybe 'collectionName' could be a better name", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465753456", "createdAt": "2020-08-05T14:08:09Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,\n+            \"fieldName\", GraphQLString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNDU4Nw==", "bodyText": "Waiting on discussion with team", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465824587", "createdAt": "2020-08-05T15:46:37Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,\n+            \"fieldName\", GraphQLString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng=="}, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQwNQ==", "bodyText": "leaving like this", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466014405", "createdAt": "2020-08-05T21:27:50Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,\n+            \"fieldName\", GraphQLString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng=="}, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTA2OTYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMDozNFrOG8LcUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyODowMVrOG8bRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ==", "bodyText": "should it be the same name than here https://github.com/dotCMS/core/pull/19032/files#diff-cf87643edb0d8a8ccf07993e94b7180bR21?\nmaybe we can create a suoer class here to define to add the count field and create the Map, and later each sub class could add the extra parameters", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465755219", "createdAt": "2020-08-05T14:10:34Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNDY3Nw==", "bodyText": "Waiting on discussion with team", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465824677", "createdAt": "2020-08-05T15:46:43Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ=="}, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQ5Mg==", "bodyText": "leaving it like this", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466014492", "createdAt": "2020-08-05T21:28:01Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ=="}, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTA3NTUzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/CountDataFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMTo1NlrOG8Lf_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDoxMTo1NlrOG8Lf_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NjE1Ng==", "bodyText": "maybe should re throw a DotRuntimeException", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465756156", "createdAt": "2020-08-05T14:11:56Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/CountDataFetcher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.graphql.datafetcher;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.FolderToMapTransformer;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+\n+public class CountDataFetcher implements DataFetcher<List<Map<String, Object>>> {\n+    @Override\n+    public List<Map<String, Object>> get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            return ((DotGraphQLContext) environment.getContext()).getFieldCountMaps();\n+        } catch (Exception e) {\n+            Logger.error(this, e.getMessage(), e);\n+            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgxMTc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataFieldProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozNzo1NlrOG85Fnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozNzo1NlrOG85Fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMzA3MQ==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466503071", "createdAt": "2020-08-06T15:37:56Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataFieldProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.dotcms.graphql.business;\n+\n+import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;\n+import static graphql.schema.GraphQLList.list;\n+\n+import com.dotcms.graphql.datafetcher.QueryMetadataDataFetcher;\n+import com.dotmarketing.exception.DotDataException;\n+import graphql.schema.GraphQLFieldDefinition;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+public enum QueryMetadataFieldProvider implements GraphQLFieldsProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89735bdcb988dfde0380f834877314543d36d985"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgxMzQzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataTypeProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozODoyMlrOG85Gug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozODoyMlrOG85Gug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMzM1NA==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466503354", "createdAt": "2020-08-06T15:38:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum QueryMetadataTypeProvider implements GraphQLTypesProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89735bdcb988dfde0380f834877314543d36d985"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgyMDIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/QueryMetadataDataFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0N1rOG85K8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0N1rOG85K8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDQzNA==", "bodyText": "Doc", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466504434", "createdAt": "2020-08-06T15:39:47Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/QueryMetadataDataFetcher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.graphql.datafetcher;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.FolderToMapTransformer;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+\n+public class QueryMetadataDataFetcher implements DataFetcher<List<Map<String, Object>>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89735bdcb988dfde0380f834877314543d36d985"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}