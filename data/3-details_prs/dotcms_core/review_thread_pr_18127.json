{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzgyNDc2", "number": 18127, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMDo1MlrODnLBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozOFrODnjA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDAxNTczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyMDo1MlrOF1BBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMDowNVrOF1BaTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNTU1NA==", "bodyText": "why are you comparing against 3 rules if the assert below verifies that there are just 2 rules in the collection?", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391135554", "createdAt": "2020-03-11T17:20:52Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -81,6 +253,95 @@ public void shouldGetRules() throws DotSecurityException, DotDataException {\n         assertFalse(rulesId.contains(rule3.getId()));\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#getAllRulesByParent(String, User)} )}\n+     * When: User with permission try to get all the rules from host\n+     * Should: Return all the rules from the host\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldGetRulesFromHostId() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule1 = new RuleDataGen().host(host).nextPersisted();\n+        final Rule rule2 = new RuleDataGen().host(host).nextPersisted();\n+\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final Rule rule3 = new RuleDataGen().host(anotherHost).nextPersisted();\n+\n+        this.addPermission(role, host, false);\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(host.getIdentifier(), user, false);\n+\n+        assertEquals(2, rules.size());\n+\n+        final List<String> rulesId = rules.stream().map(rule -> rule.getId()).collect(Collectors.toList());\n+        assertTrue(rulesId.contains(rule1.getId()));\n+        assertTrue(rulesId.contains(rule2.getId()));\n+        assertFalse(rulesId.contains(rule3.getId()));\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#getAllRulesByParent(String, User)} )}\n+     * When: User with permission try to get all the rules from host\n+     * Should: Return all the rules from the host\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldGetRulesFromPageId() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        this.addPermission(role, host, false);\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final Folder folder = new FolderDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .folder(folder)\n+                .nextPersisted();\n+\n+        final Rule rule1 = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+        final Rule rule2 = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+        new RuleDataGen().host(host).nextPersisted();\n+\n+        final HTMLPageAsset anotherHtmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        final Rule rule3 = new RuleDataGen().page(anotherHtmlPageAsset).nextPersisted();\n+\n+        addPermissionToReadRulesFolder(role, folder);\n+\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(htmlPageAsset.getIdentifier(), user, false);\n+\n+        assertEquals(2, rules.size());\n+\n+        final List<String> rulesId = rules.stream().map(rule -> rule.getId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d1acb6689278feea712e8d984d49a793b5c746"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MTk2NQ==", "bodyText": "because one of this rules is add in another page\nhttps://github.com/dotCMS/core/pull/18127/files/91d1acb6689278feea712e8d984d49a793b5c746#diff-9baded4fb0fb63e2648d9c9c4380ec1aR313", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391141965", "createdAt": "2020-03-11T17:30:05Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -81,6 +253,95 @@ public void shouldGetRules() throws DotSecurityException, DotDataException {\n         assertFalse(rulesId.contains(rule3.getId()));\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#getAllRulesByParent(String, User)} )}\n+     * When: User with permission try to get all the rules from host\n+     * Should: Return all the rules from the host\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldGetRulesFromHostId() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule1 = new RuleDataGen().host(host).nextPersisted();\n+        final Rule rule2 = new RuleDataGen().host(host).nextPersisted();\n+\n+        final Host anotherHost = new SiteDataGen().nextPersisted();\n+        final Rule rule3 = new RuleDataGen().host(anotherHost).nextPersisted();\n+\n+        this.addPermission(role, host, false);\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(host.getIdentifier(), user, false);\n+\n+        assertEquals(2, rules.size());\n+\n+        final List<String> rulesId = rules.stream().map(rule -> rule.getId()).collect(Collectors.toList());\n+        assertTrue(rulesId.contains(rule1.getId()));\n+        assertTrue(rulesId.contains(rule2.getId()));\n+        assertFalse(rulesId.contains(rule3.getId()));\n+    }\n+\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#getAllRulesByParent(String, User)} )}\n+     * When: User with permission try to get all the rules from host\n+     * Should: Return all the rules from the host\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldGetRulesFromPageId() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        this.addPermission(role, host, false);\n+\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final Folder folder = new FolderDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template)\n+                .folder(folder)\n+                .nextPersisted();\n+\n+        final Rule rule1 = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+        final Rule rule2 = new RuleDataGen().page(htmlPageAsset).nextPersisted();\n+        new RuleDataGen().host(host).nextPersisted();\n+\n+        final HTMLPageAsset anotherHtmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        final Rule rule3 = new RuleDataGen().page(anotherHtmlPageAsset).nextPersisted();\n+\n+        addPermissionToReadRulesFolder(role, folder);\n+\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(htmlPageAsset.getIdentifier(), user, false);\n+\n+        assertEquals(2, rules.size());\n+\n+        final List<String> rulesId = rules.stream().map(rule -> rule.getId()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzNTU1NA=="}, "originalCommit": {"oid": "91d1acb6689278feea712e8d984d49a793b5c746"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDAzNTE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzoyNTozN1rOF1BNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODozMzowNFrOF1DyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODY0OA==", "bodyText": "I think you should also compare the parent, not just the size", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391138648", "createdAt": "2020-03-11T17:25:37Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -119,6 +418,30 @@ public void shouldReturnEmptyList() throws DotSecurityException, DotDataExceptio\n         assertTrue( rules.isEmpty());\n     }\n \n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user with right permission try to save a new rule in a Page\n+     * Should: Save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveNewRuleInPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).next();\n+\n+        this.addPermission(role, host, true);\n+        rulesAPI.saveRule(rule, user, false);\n+\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(htmlPageAsset, systemUser, true);\n+        assertEquals(1, rules.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91d1acb6689278feea712e8d984d49a793b5c746"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE4MDg5Nw==", "bodyText": "done 6ca6e58#diff-9baded4fb0fb63e2648d9c9c4380ec1aR483", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391180897", "createdAt": "2020-03-11T18:33:04Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -119,6 +418,30 @@ public void shouldReturnEmptyList() throws DotSecurityException, DotDataExceptio\n         assertTrue( rules.isEmpty());\n     }\n \n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRule(Rule, User, boolean)}\n+     * When: A not admin user with right permission try to save a new rule in a Page\n+     * Should: Save the new rule\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveNewRuleInPage() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Template template = new TemplateDataGen().nextPersisted();\n+        final HTMLPageAsset htmlPageAsset = new HTMLPageDataGen(host, template).nextPersisted();\n+        final Rule rule = new RuleDataGen().page(htmlPageAsset).next();\n+\n+        this.addPermission(role, host, true);\n+        rulesAPI.saveRule(rule, user, false);\n+\n+        final List<Rule> rules = rulesAPI.getAllRulesByParent(htmlPageAsset, systemUser, true);\n+        assertEquals(1, rules.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEzODY0OA=="}, "originalCommit": {"oid": "91d1acb6689278feea712e8d984d49a793b5c746"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk2Mjg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo0MzozMlrOF1KKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo0NjoyMFrOF1KPLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NTQzMg==", "bodyText": "I think the expected value goes at first", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391285432", "createdAt": "2020-03-11T21:43:32Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NjU3NA==", "bodyText": "done d8a32ec#diff-9baded4fb0fb63e2648d9c9c4380ec1aR84", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391286574", "createdAt": "2020-03-11T21:46:20Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4NTQzMg=="}, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDk4MDEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo0OTozOFrOF1KVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNDowNFrOF1jXOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODA3NQ==", "bodyText": "this assert doesn't look like it's needed", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391288075", "createdAt": "2020-03-11T21:49:38Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());\n+\n+        //Saving and testing Condition\n+        final Condition condition = new ConditionDataGen().group(groups.get(0)).next();\n+\n+        rulesAPI.saveCondition(condition, user, false);\n+\n+        allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5ODIzNA==", "bodyText": "done d8a32ec#diff-9baded4fb0fb63e2648d9c9c4380ec1aL93", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391698234", "createdAt": "2020-03-12T15:24:04Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());\n+\n+        //Saving and testing Condition\n+        final Condition condition = new ConditionDataGen().group(groups.get(0)).next();\n+\n+        rulesAPI.saveCondition(condition, user, false);\n+\n+        allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4ODA3NQ=="}, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTAxNDc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjowMzozOVrOF1KqTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNToyNDoxOVrOF1jX1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MzUxOQ==", "bodyText": "assert not needed", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391293519", "createdAt": "2020-03-11T22:03:39Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());\n+\n+        //Saving and testing Condition\n+        final Condition condition = new ConditionDataGen().group(groups.get(0)).next();\n+\n+        rulesAPI.saveCondition(condition, user, false);\n+\n+        allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+        final List<Condition> conditions = allRules.get(0).getGroups().get(0).getConditions();\n+\n+        assertEquals(1, conditions.size());\n+\n+        assertEquals(condition.getOperator(), conditions.get(0).getOperator());\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     * When: User without permission try to create a Group Condition\n+     * Should: Throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldNotSaveCondition() throws DotDataException, DotSecurityException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRuleAction(RuleAction, User, boolean)}\n+     * When: User with permission try to create a Rule's Action\n+     * Should: Save it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveRuleAction() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        this.addPermission(role, host, true);\n+\n+        final RuleAction ruleAction = new RuleActionDataGen().rule(rule).next();\n+\n+        rulesAPI.saveRuleAction(ruleAction, user, false);\n+\n+        final List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY5ODM4OA==", "bodyText": "done d8a32ec#diff-9baded4fb0fb63e2648d9c9c4380ec1aL142", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391698388", "createdAt": "2020-03-12T15:24:19Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -51,6 +51,178 @@ public static void prepare() throws Exception {\n         rulesAPI   = APILocator.getRulesAPI();\n     }\n \n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     *                  and {@link RulesAPIImpl#saveCondition(Condition, User, boolean)}\n+     * When: User with permission try to create a Group Condition and a Condition\n+     * Should: Delete it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveCondition() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        this.addPermission(role, host, true);\n+\n+        //Saving and testing GroupCondition\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+\n+        List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+\n+        final Rule ruleFromDataBase = allRules.get(0);\n+\n+        final List<ConditionGroup> groups = ruleFromDataBase.getGroups();\n+        assertEquals(1, groups.size());\n+\n+        assertEquals(groups.get(0).getOperator(), conditionGroup.getOperator());\n+\n+        //Saving and testing Condition\n+        final Condition condition = new ConditionDataGen().group(groups.get(0)).next();\n+\n+        rulesAPI.saveCondition(condition, user, false);\n+\n+        allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());\n+        final List<Condition> conditions = allRules.get(0).getGroups().get(0).getConditions();\n+\n+        assertEquals(1, conditions.size());\n+\n+        assertEquals(condition.getOperator(), conditions.get(0).getOperator());\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveConditionGroup(ConditionGroup, User, boolean)}\n+     * When: User without permission try to create a Group Condition\n+     * Should: Throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void shouldNotSaveCondition() throws DotDataException, DotSecurityException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        final ConditionGroup conditionGroup = new ConditionGroupDataGen().rule(rule).next();\n+        rulesAPI.saveConditionGroup(conditionGroup, user, false);\n+    }\n+\n+    /**\n+     * Method to Test: {@link RulesAPIImpl#saveRuleAction(RuleAction, User, boolean)}\n+     * When: User with permission try to create a Rule's Action\n+     * Should: Save it\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void shouldSaveRuleAction() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final Host host = new SiteDataGen().nextPersisted();\n+        final Rule rule = new RuleDataGen().host(host).nextPersisted();\n+\n+        this.addPermission(role, host, true);\n+\n+        final RuleAction ruleAction = new RuleActionDataGen().rule(rule).next();\n+\n+        rulesAPI.saveRuleAction(ruleAction, user, false);\n+\n+        final List<Rule> allRules = rulesAPI.getAllRules(user, false);\n+        assertEquals(1, allRules.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MzUxOQ=="}, "originalCommit": {"oid": "a2480c1acb9ab72ce418b9f1a7b293d82b2f7f55"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzk0NzExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/RuleResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozNFrOF1nGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozNFrOF1nGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTM5Ng==", "bodyText": "Issue found: The String literal \"siteId\" appears 5 times in this file; the first occurrence is on line 80", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391759396", "createdAt": "2020-03-12T16:56:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/RuleResource.java", "diffHunk": "@@ -82,12 +77,11 @@ protected RuleResource(ApiProvider apiProvider, WebResource webResource) {\n     public Map<String, RestRule> list(\n             @Context final HttpServletRequest request,\n             @Context final HttpServletResponse response,\n-            @PathParam(\"siteId\") String siteId) throws DotSecurityException, DotDataException {\n+            @PathParam(\"siteId\") String parentId) throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a32ec5a775f434c7ee34caeaa3b0e19018ab5f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzk0NzE1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/RuleResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozNlrOF1nGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozNlrOF1nGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTQwNA==", "bodyText": "Issue found: Avoid reassigning parameters such as 'parentId'", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391759404", "createdAt": "2020-03-12T16:56:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/sites/ruleengine/rules/RuleResource.java", "diffHunk": "@@ -82,12 +77,11 @@ protected RuleResource(ApiProvider apiProvider, WebResource webResource) {\n     public Map<String, RestRule> list(\n             @Context final HttpServletRequest request,\n             @Context final HttpServletResponse response,\n-            @PathParam(\"siteId\") String siteId) throws DotSecurityException, DotDataException {\n+            @PathParam(\"siteId\") String parentId) throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a32ec5a775f434c7ee34caeaa3b0e19018ab5f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzk0NzIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozN1rOF1nGNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozN1rOF1nGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTQxNA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391759414", "createdAt": "2020-03-12T16:56:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -1,15 +1,14 @@\n package com.dotcms.enterprise.rules;\n \n-import com.dotcms.datagen.RoleDataGen;\n-import com.dotcms.datagen.SiteDataGen;\n-import com.dotcms.datagen.UserDataGen;\n-import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a32ec5a775f434c7ee34caeaa3b0e19018ab5f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzk0NzI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozOFrOF1nGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjo1NjozOFrOF1nGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1OTQyOA==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18127#discussion_r391759428", "createdAt": "2020-03-12T16:56:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/rules/RulesAPIImplIntegrationTest.java", "diffHunk": "@@ -27,10 +27,9 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import static com.dotcms.util.CollectionsUtils.list;\n import static org.jgroups.util.Util.assertFalse;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a32ec5a775f434c7ee34caeaa3b0e19018ab5f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2364, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}