{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODY0MDY3", "number": 18135, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjoxM1rODn5ODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNDo1N1rODn7rcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU4NTQxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjoxM1rOF2KFSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjoxM1rOF2KFSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMjYxNg==", "bodyText": "this would be handle by a Set and contains method", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392332616", "createdAt": "2020-03-13T16:22:13Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "diffHunk": "@@ -26,4 +26,29 @@ public static String sha256(final String fieldName, final Object fieldValue,\n \t\t\t\t+ (fieldValue == null ? \"\" : fieldValue.toString()) + \"_\"\n \t\t\t\t+ languageId, Charset.forName(\"UTF-8\")).toString();\n \t}\n+\n+\t/**\n+\t * Returns a String where those characters that QueryParser expects to be escaped are escaped by\n+\t * a preceding <code>\\</code> excluding the \"/\", we found some cases where we don't want to\n+\t * scape it.\n+\t * This method is a copy of the {@link QueryParser#escape(String)} where we remove the\n+\t * scape for slashes \"/\" and we included the scape for white spaces \" \"\n+\t */\n+\tpublic static String escapeExcludingSlashIncludingSpace(String s) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tfor (int i = 0; i < s.length(); i++) {\n+\t\t\tchar c = s.charAt(i);\n+\t\t\t// These characters are part of the query syntax and must be escaped\n+\t\t\tif (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU4NTk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjoyMlrOF2KFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjoyMlrOF2KFoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMjcwNA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392332704", "createdAt": "2020-03-13T16:22:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "diffHunk": "@@ -26,4 +26,29 @@ public static String sha256(final String fieldName, final Object fieldValue,\n \t\t\t\t+ (fieldValue == null ? \"\" : fieldValue.toString()) + \"_\"\n \t\t\t\t+ languageId, Charset.forName(\"UTF-8\")).toString();\n \t}\n+\n+\t/**\n+\t * Returns a String where those characters that QueryParser expects to be escaped are escaped by\n+\t * a preceding <code>\\</code> excluding the \"/\", we found some cases where we don't want to\n+\t * scape it.\n+\t * This method is a copy of the {@link QueryParser#escape(String)} where we remove the\n+\t * scape for slashes \"/\" and we included the scape for white spaces \" \"\n+\t */\n+\tpublic static String escapeExcludingSlashIncludingSpace(String s) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU4Njc1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjozOFrOF2KGMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMjozOFrOF2KGMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMjg1MA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392332850", "createdAt": "2020-03-13T16:22:38Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "diffHunk": "@@ -26,4 +26,29 @@ public static String sha256(final String fieldName, final Object fieldValue,\n \t\t\t\t+ (fieldValue == null ? \"\" : fieldValue.toString()) + \"_\"\n \t\t\t\t+ languageId, Charset.forName(\"UTF-8\")).toString();\n \t}\n+\n+\t/**\n+\t * Returns a String where those characters that QueryParser expects to be escaped are escaped by\n+\t * a preceding <code>\\</code> excluding the \"/\", we found some cases where we don't want to\n+\t * scape it.\n+\t * This method is a copy of the {@link QueryParser#escape(String)} where we remove the\n+\t * scape for slashes \"/\" and we included the scape for white spaces \" \"\n+\t */\n+\tpublic static String escapeExcludingSlashIncludingSpace(String s) {\n+\t\tStringBuilder sb = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU5MTAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMzo1NVrOF2KI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMzo1NVrOF2KI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMzU2MA==", "bodyText": "add doc", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392333560", "createdAt": "2020-03-13T16:23:55Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPI.java", "diffHunk": "@@ -20,5 +20,7 @@\n     Optional<URLMapInfo> processURLMap(final UrlMapContext context)\n             throws DotSecurityException, DotDataException;\n \n-    public boolean isUrlPattern(final UrlMapContext urlMapContext) throws DotDataException;\n-}\n+    boolean isUrlPattern(final UrlMapContext urlMapContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU5NDcxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTowMlrOF2KLbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTowMlrOF2KLbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNDE4OQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392334189", "createdAt": "2020-03-13T16:25:02Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -58,63 +57,65 @@\n      * @return\n      * @throws DotDataException\n      */\n-    public boolean isUrlPattern(final UrlMapContext urlMapContext) throws DotDataException {\n+    public boolean isUrlPattern(final UrlMapContext urlMapContext)\n+            throws DotDataException, DotSecurityException {\n         return matchingUrlPattern(urlMapContext.getUri()) && getContentlet(urlMapContext) != null;\n     }\n \n     public Optional<URLMapInfo> processURLMap(final UrlMapContext context)\n             throws DotSecurityException, DotDataException {\n \n-        if (this.matchingUrlPattern(context.getUri())) {\n-            final Matches matches = this.findPatternChange(context.getUri());\n-\n-            final Structure structure = CacheLocator.getContentTypeCache()\n-                    .getStructureByInode(matches.getPatternChange().getStructureInode());\n-\n-            final Field hostField = this.findHostField(structure);\n-\n-            final Contentlet contentlet = this.getContentlet(matches, structure, hostField, context);\n-\n-            if (contentlet == null) {\n-                return Optional.empty();\n-            }\n-\n-            final Identifier pageUriIdentifier = this.getDetailtPageUri(structure);\n-\n-            return Optional.of(new URLMapInfo(contentlet, pageUriIdentifier, context.getUri()));\n-        } else {\n+        final Contentlet contentlet = getContentlet(context);\n+        if (contentlet == null) {\n             return Optional.empty();\n         }\n+\n+        final Structure structure = CacheLocator.getContentTypeCache()\n+                .getStructureByInode(contentlet.getStructureInode());\n+        final Identifier pageUriIdentifier = this.getDetailtPageUri(structure);\n+\n+        return Optional.of(new URLMapInfo(contentlet, pageUriIdentifier, context.getUri()));\n     }\n \n     /**\n-     * Return the {@link Contentlet} the match the {@link UrlMapContext#getUri()} value,\n-     * if not exists any {@link com.dotcms.contenttype.model.type.UrlMapable} matching with the URI\n-     * then a {@link DotRuntimeException} is thrown\n+     * Return the {@link Contentlet} the match the {@link UrlMapContext#getUri()} value, if not\n+     * exists any {@link com.dotcms.contenttype.model.type.UrlMapable} matching with the URI then a\n+     * {@link DotRuntimeException} is thrown\n      *\n      * @param urlMapContext\n      * @return\n      */\n-    private Contentlet getContentlet(final UrlMapContext urlMapContext){\n-        final Matches matches = this.findPatternChange(urlMapContext.getUri());\n-        final Structure structure = CacheLocator.getContentTypeCache()\n-                .getStructureByInode(matches.getPatternChange().getStructureInode());\n+    private Contentlet getContentlet(final UrlMapContext urlMapContext) throws DotSecurityException {\n \n-        final Field hostField = this.findHostField(structure);\n+        Contentlet matchingContentlet = null;\n \n         try {\n-            return this.getContentlet(matches, structure, hostField, urlMapContext);\n-        } catch (DotDataException | DotSecurityException e){\n-            return null;\n-        }\n-    }\n+            // We could have multiple matches as multiple content types could have the same\n+            // URLMap pattern and we need to evaluate all until we find content match.\n+            final List<Matches> matchesFound = this.findMatch(urlMapContext.getUri());\n+            if (!matchesFound.isEmpty()) {\n+\n+                for (Matches matches : matchesFound) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU5NzM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTo0NlrOF2KNAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNTo0NlrOF2KNAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNDU5NQ==", "bodyText": "if do not need mod, use Collections.empyList()", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392334595", "createdAt": "2020-03-13T16:25:46Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -139,44 +140,64 @@ private Identifier getDetailtPageUri(final Structure structure) {\n         }\n     }\n \n-    private boolean containsRegEx(final String uri) {\n-        final String mastRegEx = this.getURLMasterPattern().orElse(null);\n+    /**\n+     * Return all the matches related to a given URI, multiple content types could use the URLMap\n+     * pattern and on those cases we need to evaluate all the matches.\n+     *\n+     * @param uri URI to evaluate for matches\n+     * @return List of found matches\n+     * @throws DotDataException\n+     */\n+    private List<Matches> findMatch(final String uri) throws DotDataException {\n \n-        if (mastRegEx == null) {\n-            return false;\n+        // We want to avoid unnecessary lookups for vanity urls when browsing in the backend\n+        for (final String backendFilter : CMSUrlUtil.BACKEND_FILTERED_LIST_ARRAY) {\n+            if (uri.startsWith(backendFilter)) {\n+                return new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU5ODU0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNjowMVrOF2KNtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNjowMVrOF2KNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNDc3Mg==", "bodyText": "set final", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392334772", "createdAt": "2020-03-13T16:26:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -139,44 +140,64 @@ private Identifier getDetailtPageUri(final Structure structure) {\n         }\n     }\n \n-    private boolean containsRegEx(final String uri) {\n-        final String mastRegEx = this.getURLMasterPattern().orElse(null);\n+    /**\n+     * Return all the matches related to a given URI, multiple content types could use the URLMap\n+     * pattern and on those cases we need to evaluate all the matches.\n+     *\n+     * @param uri URI to evaluate for matches\n+     * @return List of found matches\n+     * @throws DotDataException\n+     */\n+    private List<Matches> findMatch(final String uri) throws DotDataException {\n \n-        if (mastRegEx == null) {\n-            return false;\n+        // We want to avoid unnecessary lookups for vanity urls when browsing in the backend\n+        for (final String backendFilter : CMSUrlUtil.BACKEND_FILTERED_LIST_ARRAY) {\n+            if (uri.startsWith(backendFilter)) {\n+                return new ArrayList<>();\n+            }\n         }\n \n-        final String url = !uri.endsWith(StringPool.FORWARD_SLASH) ? uri + StringPool.FORWARD_SLASH : uri;\n-        return RegEX.contains(url, mastRegEx);\n-    }\n-\n-    private static Optional<String> getURLMasterPattern() {\n-        try {\n-            final String mastRegEx = CacheLocator.getContentTypeCache().getURLMasterPattern();\n-\n-            return Optional.ofNullable(mastRegEx);\n-        } catch (DotCacheException e) {\n-            throw new DotRuntimeException(e);\n+        if (this.shouldLoadPatterns()) {\n+            this.loadPatterns();\n         }\n-    }\n \n-    private Matches findPatternChange(final String uri) {\n-        final String url = !uri.endsWith(StringPool.FORWARD_SLASH) ? uri + StringPool.FORWARD_SLASH : uri;\n+        List<Matches> foundMatches = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTU5OTk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNjoyM1rOF2KOkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyNjoyM1rOF2KOkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNDk5Mg==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392334992", "createdAt": "2020-03-13T16:26:23Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/cms/urlmap/URLMapAPIImpl.java", "diffHunk": "@@ -139,44 +140,64 @@ private Identifier getDetailtPageUri(final Structure structure) {\n         }\n     }\n \n-    private boolean containsRegEx(final String uri) {\n-        final String mastRegEx = this.getURLMasterPattern().orElse(null);\n+    /**\n+     * Return all the matches related to a given URI, multiple content types could use the URLMap\n+     * pattern and on those cases we need to evaluate all the matches.\n+     *\n+     * @param uri URI to evaluate for matches\n+     * @return List of found matches\n+     * @throws DotDataException\n+     */\n+    private List<Matches> findMatch(final String uri) throws DotDataException {\n \n-        if (mastRegEx == null) {\n-            return false;\n+        // We want to avoid unnecessary lookups for vanity urls when browsing in the backend\n+        for (final String backendFilter : CMSUrlUtil.BACKEND_FILTERED_LIST_ARRAY) {\n+            if (uri.startsWith(backendFilter)) {\n+                return new ArrayList<>();\n+            }\n         }\n \n-        final String url = !uri.endsWith(StringPool.FORWARD_SLASH) ? uri + StringPool.FORWARD_SLASH : uri;\n-        return RegEX.contains(url, mastRegEx);\n-    }\n-\n-    private static Optional<String> getURLMasterPattern() {\n-        try {\n-            final String mastRegEx = CacheLocator.getContentTypeCache().getURLMasterPattern();\n-\n-            return Optional.ofNullable(mastRegEx);\n-        } catch (DotCacheException e) {\n-            throw new DotRuntimeException(e);\n+        if (this.shouldLoadPatterns()) {\n+            this.loadPatterns();\n         }\n-    }\n \n-    private Matches findPatternChange(final String uri) {\n-        final String url = !uri.endsWith(StringPool.FORWARD_SLASH) ? uri + StringPool.FORWARD_SLASH : uri;\n+        List<Matches> foundMatches = new ArrayList<>();\n+\n+        final String url =\n+                !uri.endsWith(StringPool.FORWARD_SLASH) ? uri + StringPool.FORWARD_SLASH : uri;\n \n         for (final ContentTypeURLPattern contentTypeURLPattern : this.patternsCache) {\n \n-            final List<RegExMatch> matches = RegEX.findForUrlMap(url, contentTypeURLPattern.getRegEx());\n+            final List<RegExMatch> matches = RegEX\n+                    .findForUrlMap(url, contentTypeURLPattern.getRegEx());\n             if (matches != null && !matches.isEmpty()) {\n-                return new Matches(contentTypeURLPattern, matches);\n+\n+                /*\n+                We need to make sure we have an exact match, we could have regex too generic, like\n+                a regex in the root: \"/{urlTitle}\" resulting in a regex like \"/(.+)/\" which basically\n+                will match any url.\n+                 */\n+                for (RegExMatch regExMatch : matches) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTYxMzc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMDoyMVrOF2KXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMDoyMVrOF2KXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNzI2MA==", "bodyText": "consider a set to avoid log(N) time", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392337260", "createdAt": "2020-03-13T16:30:21Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/filters/CMSUrlUtil.java", "diffHunk": "@@ -47,7 +48,7 @@\n \tprivate static final String NOT_FOUND = \"NOTFOUND\";\n \tprivate static final String UNABLE_TO_FIND = \"Unable to find \";\n \n-\tprivate static final String [] VANITY_FILTERED_LIST_ARRAY =\n+\tpublic static final String [] BACKEND_FILTERED_LIST_ARRAY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4153d8096b574376d86e922639b47ddce6d9cd5c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTk4ODMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNDo1N1rOF2OH-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODoyNDo1N1rOF2OH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM5ODg0MQ==", "bodyText": "Issue found: Avoid variables with short names like c", "url": "https://github.com/dotCMS/core/pull/18135#discussion_r392398841", "createdAt": "2020-03-13T18:24:57Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/util/ESUtils.java", "diffHunk": "@@ -26,4 +40,26 @@ public static String sha256(final String fieldName, final Object fieldValue,\n \t\t\t\t+ (fieldValue == null ? \"\" : fieldValue.toString()) + \"_\"\n \t\t\t\t+ languageId, Charset.forName(\"UTF-8\")).toString();\n \t}\n+\n+\t/**\n+\t * Returns a String where those characters that QueryParser expects to be escaped are escaped by\n+\t * a preceding <code>\\</code> excluding the \"/\", we found some cases where we don't want to\n+\t * scape it.\n+\t * This method is a copy of the {@link QueryParser#escape(String)} where we remove the\n+\t * scape for slashes \"/\" and we included the scape for white spaces \" \"\n+\t */\n+\tpublic static String escapeExcludingSlashIncludingSpace(final String toEscape) {\n+\n+\t\tfinal StringBuilder escapedString = new StringBuilder();\n+\t\tfor (int i = 0; i < toEscape.length(); i++) {\n+\t\t\tfinal char c = toEscape.charAt(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018cd22e3960381c5b4161cf0f2d46ba2d8f4df7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2376, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}