{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzk3MDcw", "number": 18651, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozODozNVrOEFq60w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyN1rOEG8ifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgxNTIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozODozNVrOGkAEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0NlrOGkHSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjk3Mw==", "bodyText": "toolbox already has contentletAPI. Use the one from there", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440402973", "createdAt": "2020-06-15T19:38:35Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -77,6 +84,40 @@ public HTMLPageAsset fromContentlet(final Contentlet contentlet) {\n         map.put(\"statusIcons\", UtilHTML.getStatusIcons(page));\n         map.put(\"__icon__\", IconType.HTMLPAGE.iconName());\n \n+        final ContentletVersionInfo info = APILocator.getVersionableAPI().\n+                getContentletVersionInfo(page.getIdentifier(), page.getLanguageId());\n+\n+        map.put(\"workingInode\",  info.getWorkingInode());\n+        map.put(\"shortyWorking\", APILocator.getShortyAPI().shortify(info.getWorkingInode()));\n+        map.put(\"canEdit\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.EDIT.getType(), user, false));\n+        map.put(\"canRead\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.READ.getType(), user, false));\n+        map.put(\"liveInode\", info.getLiveInode());\n+        map.put(\"shortyLive\", APILocator.getShortyAPI().shortify(info.getLiveInode()));\n+        map.put(\"canLock\", canLock(page, user));\n+\n+        if(info.getLockedBy()!=null) {\n+            map.put(\"lockedOn\", info.getLockedOn());\n+            map.put(\"lockedBy\", info.getLockedBy());\n+            map.put(\"lockedByName\", getLockedByUserName(info));\n+        }\n+\n         return map;\n     }\n+\n+    private boolean canLock(final HTMLPageAsset page, User user)  {\n+        try {\n+            APILocator.getContentletAPI().canLock(page, user);\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTM2NQ==", "bodyText": "The Toolbox was generalized to be used by any class. Also it was refactored to use the Builder pattern to ease the use of it.", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440521365", "createdAt": "2020-06-16T00:38:46Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -77,6 +84,40 @@ public HTMLPageAsset fromContentlet(final Contentlet contentlet) {\n         map.put(\"statusIcons\", UtilHTML.getStatusIcons(page));\n         map.put(\"__icon__\", IconType.HTMLPAGE.iconName());\n \n+        final ContentletVersionInfo info = APILocator.getVersionableAPI().\n+                getContentletVersionInfo(page.getIdentifier(), page.getLanguageId());\n+\n+        map.put(\"workingInode\",  info.getWorkingInode());\n+        map.put(\"shortyWorking\", APILocator.getShortyAPI().shortify(info.getWorkingInode()));\n+        map.put(\"canEdit\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.EDIT.getType(), user, false));\n+        map.put(\"canRead\", this.permissionAPI.doesUserHavePermission(page, PermissionLevel.READ.getType(), user, false));\n+        map.put(\"liveInode\", info.getLiveInode());\n+        map.put(\"shortyLive\", APILocator.getShortyAPI().shortify(info.getLiveInode()));\n+        map.put(\"canLock\", canLock(page, user));\n+\n+        if(info.getLockedBy()!=null) {\n+            map.put(\"lockedOn\", info.getLockedOn());\n+            map.put(\"lockedBy\", info.getLockedBy());\n+            map.put(\"lockedByName\", getLockedByUserName(info));\n+        }\n+\n         return map;\n     }\n+\n+    private boolean canLock(final HTMLPageAsset page, User user)  {\n+        try {\n+            APILocator.getContentletAPI().canLock(page, user);\n+            return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjk3Mw=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzgyMDU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0MDoxOFrOGkAHmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo1MVrOGkHSrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzg2NQ==", "bodyText": "I know I broke my own rule here. But I think permissionAPI should probably be in TransformToolbox for the sake of being able to feed all services with mocks from one singe entry point,", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440403865", "createdAt": "2020-06-15T19:40:18Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -32,6 +38,7 @@\n     PageViewStrategy(final TransformToolbox toolBox) {\n         super(toolBox);\n         htmlPageCache = CacheLocator.getHTMLPageCache();\n+        permissionAPI = APILocator.getPermissionAPI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTM5MA==", "bodyText": "The Toolbox was generalized to be used by any class. Also it was refactored to use the Builder pattern to ease the use of it.", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440521390", "createdAt": "2020-06-16T00:38:51Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/transform/strategy/PageViewStrategy.java", "diffHunk": "@@ -32,6 +38,7 @@\n     PageViewStrategy(final TransformToolbox toolBox) {\n         super(toolBox);\n         htmlPageCache = CacheLocator.getHTMLPageCache();\n+        permissionAPI = APILocator.getPermissionAPI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzg2NQ=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg0MTYwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/AbstractGraphQLHttpServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo0Njo0N1rOGkAU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxMjo1MlrOGkFwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzI2NQ==", "bodyText": "why commented, sounds like it could be deleted at all", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440407265", "createdAt": "2020-06-15T19:46:47Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/AbstractGraphQLHttpServlet.java", "diffHunk": "@@ -1,446 +1,446 @@\n-package com.dotcms.graphql;\n-\n-import com.google.common.io.ByteStreams;\n-import com.google.common.io.CharStreams;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.Writer;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-import javax.servlet.AsyncContext;\n-import javax.servlet.Servlet;\n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.Part;\n-\n-import graphql.ExecutionResult;\n-import graphql.introspection.IntrospectionQuery;\n-import graphql.schema.GraphQLFieldDefinition;\n-import graphql.servlet.GraphQLBatchedInvocationInput;\n-import graphql.servlet.GraphQLConfiguration;\n-import graphql.servlet.GraphQLInvocationInputFactory;\n-import graphql.servlet.GraphQLMBean;\n-import graphql.servlet.GraphQLObjectMapper;\n-import graphql.servlet.GraphQLQueryInvoker;\n-import graphql.servlet.GraphQLServletListener;\n-import graphql.servlet.GraphQLSingleInvocationInput;\n-import graphql.servlet.internal.GraphQLRequest;\n-import graphql.servlet.internal.VariableMapper;\n-\n-/**\n- * @author Andrew Potter\n- */\n-public abstract class AbstractGraphQLHttpServlet extends HttpServlet implements Servlet, GraphQLMBean {\n-\n-    public static final Logger log = LoggerFactory.getLogger(AbstractGraphQLHttpServlet.class);\n-\n-    public static final String APPLICATION_JSON_UTF8 = \"application/json;charset=UTF-8\";\n-    public static final String APPLICATION_GRAPHQL = \"application/graphql\";\n-    public static final int STATUS_OK = 200;\n-    public static final int STATUS_BAD_REQUEST = 400;\n-\n-    private static final GraphQLRequest INTROSPECTION_REQUEST = new GraphQLRequest(IntrospectionQuery.INTROSPECTION_QUERY, new HashMap<>(), null);\n-    private static final String[] MULTIPART_KEYS = new String[]{\"operations\", \"graphql\", \"query\"};\n-\n-    private GraphQLConfiguration configuration;\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLQueryInvoker getQueryInvoker();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLInvocationInputFactory getInvocationInputFactory();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLObjectMapper getGraphQLObjectMapper();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract boolean isAsyncServletMode();\n-\n-    protected GraphQLConfiguration getConfiguration() {\n-        return GraphQLConfiguration.with(getInvocationInputFactory())\n-                .with(getQueryInvoker())\n-                .with(getGraphQLObjectMapper())\n-                .with(isAsyncServletMode())\n-                .with(listeners)\n-                .build();\n-    }\n-\n-    /**\n-     * @deprecated use {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    private final List<GraphQLServletListener> listeners;\n-\n-    private HttpRequestHandler getHandler;\n-    private HttpRequestHandler postHandler;\n-\n-    public AbstractGraphQLHttpServlet() {\n-        this(null);\n-    }\n-\n-    public AbstractGraphQLHttpServlet(List<GraphQLServletListener> listeners) {\n-        this.listeners = listeners != null ? new ArrayList<>(listeners) : new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void init(ServletConfig servletConfig) {\n-        this.configuration = getConfiguration();\n-\n-        this.getHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            String path = request.getPathInfo();\n-            if (path == null) {\n-                path = request.getServletPath();\n-            }\n-            if (path.contentEquals(\"/schema.json\")) {\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(INTROSPECTION_REQUEST, request, response), response);\n-            } else {\n-                String query = request.getParameter(\"query\");\n-                if (query != null) {\n-\n-                    if (isBatchedQuery(query)) {\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(graphQLObjectMapper.readBatchedGraphQLRequest(query), request, response), response);\n-                    } else {\n-                        final Map<String, Object> variables = new HashMap<>();\n-                        if (request.getParameter(\"variables\") != null) {\n-                            variables.putAll(graphQLObjectMapper.deserializeVariables(request.getParameter(\"variables\")));\n-                        }\n-\n-                        String operationName = request.getParameter(\"operationName\");\n-\n-                        query(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(new GraphQLRequest(query, variables, operationName), request, response), response);\n-                    }\n-                } else {\n-                    response.setStatus(STATUS_BAD_REQUEST);\n-                    log.info(\"Bad GET request: path was not \\\"/schema.json\\\" or no query variable named \\\"query\\\" given\");\n-                }\n-            }\n-        };\n-\n-        this.postHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            if (APPLICATION_GRAPHQL.equals(request.getContentType())) {\n-                String query = CharStreams.toString(request.getReader());\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(new GraphQLRequest(query, null, null)), response);\n-            } else if (request.getContentType() != null && request.getContentType().startsWith(\"multipart/form-data\") && !request.getParts().isEmpty()) {\n-                final Map<String, List<Part>> fileItems = request.getParts()\n-                    .stream()\n-                    .collect(Collectors.groupingBy(Part::getName));\n-\n-                for (String key : MULTIPART_KEYS) {\n-                    // Check to see if there is a part under the key we seek\n-                    if (!fileItems.containsKey(key)) {\n-                        continue;\n-                    }\n-\n-                    final Optional<Part> queryItem = getFileItem(fileItems, key);\n-                    if (!queryItem.isPresent()) {\n-                        // If there is a part, but we don't see an item, then break and return BAD_REQUEST\n-                        break;\n-                    }\n-\n-                    InputStream inputStream = asMarkableInputStream(queryItem.get().getInputStream());\n-\n-                    final Optional<Map<String, List<String>>> variablesMap =\n-                        getFileItem(fileItems, \"map\").map(graphQLObjectMapper::deserializeMultipartMap);\n-\n-                    if (isBatchedQuery(inputStream)) {\n-                        List<GraphQLRequest> graphQLRequests =\n-                            graphQLObjectMapper.readBatchedGraphQLRequest(inputStream);\n-                        variablesMap.ifPresent(map -> graphQLRequests.forEach(r -> mapMultipartVariables(r, map, fileItems)));\n-                        GraphQLBatchedInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequests, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    } else {\n-                        GraphQLRequest graphQLRequest;\n-                        if (\"query\".equals(key)) {\n-                            graphQLRequest = buildRequestFromQuery(inputStream, graphQLObjectMapper, fileItems);\n-                        } else {\n-                            graphQLRequest = graphQLObjectMapper.readGraphQLRequest(inputStream);\n-                        }\n-\n-                        variablesMap.ifPresent(m -> mapMultipartVariables(graphQLRequest, m, fileItems));\n-                        GraphQLSingleInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequest, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        query(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    }\n-                }\n-\n-                response.setStatus(STATUS_BAD_REQUEST);\n-                log.info(\"Bad POST multipart request: no part named \" + Arrays.toString(MULTIPART_KEYS));\n-            } else {\n-                // this is not a multipart request\n-                InputStream inputStream = asMarkableInputStream(request.getInputStream());\n-\n-                if (isBatchedQuery(inputStream)) {\n-                    queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readBatchedGraphQLRequest(inputStream), request, response), response);\n-                } else {\n-                    query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readGraphQLRequest(inputStream), request, response), response);\n-                }\n-            }\n-        };\n-    }\n-\n-    private static InputStream asMarkableInputStream(InputStream inputStream) {\n-        if (!inputStream.markSupported()) {\n-            inputStream = new BufferedInputStream(inputStream);\n-        }\n-        return inputStream;\n-    }\n-\n-    private GraphQLRequest buildRequestFromQuery(InputStream inputStream,\n-                                                 GraphQLObjectMapper graphQLObjectMapper,\n-                                                 Map<String, List<Part>> fileItems) throws IOException {\n-        GraphQLRequest graphQLRequest;\n-        String query = new String(ByteStreams.toByteArray(inputStream));\n-\n-        Map<String, Object> variables = null;\n-        final Optional<Part> variablesItem = getFileItem(fileItems, \"variables\");\n-        if (variablesItem.isPresent()) {\n-            variables = graphQLObjectMapper.deserializeVariables(new String(ByteStreams.toByteArray(variablesItem.get().getInputStream())));\n-        }\n-\n-        String operationName = null;\n-        final Optional<Part> operationNameItem = getFileItem(fileItems, \"operationName\");\n-        if (operationNameItem.isPresent()) {\n-            operationName = new String(ByteStreams.toByteArray(operationNameItem.get().getInputStream())).trim();\n-        }\n-\n-        graphQLRequest = new GraphQLRequest(query, variables, operationName);\n-        return graphQLRequest;\n-    }\n-\n-    private void mapMultipartVariables(GraphQLRequest request,\n-                                       Map<String, List<String>> variablesMap,\n-                                       Map<String, List<Part>> fileItems) {\n-        Map<String, Object> variables = request.getVariables();\n-\n-        variablesMap.forEach((partName, objectPaths) -> {\n-            Part part = getFileItem(fileItems, partName)\n-                    .orElseThrow(() -> new RuntimeException(\"unable to find part name \" +\n-                            partName +\n-                            \" as referenced in the variables map\"));\n-\n-            objectPaths.forEach(objectPath -> VariableMapper.mapVariable(objectPath, variables, part));\n-        });\n-    }\n-\n-    public void addListener(GraphQLServletListener servletListener) {\n-        configuration.add(servletListener);\n-    }\n-\n-    public void removeListener(GraphQLServletListener servletListener) {\n-        configuration.remove(servletListener);\n-    }\n-\n-    @Override\n-    public String[] getQueries() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getQueryType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String[] getMutations() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getMutationType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String executeQuery(String query) {\n-        try {\n-            return configuration.getObjectMapper().serializeResultAsJson(configuration.getQueryInvoker().query(configuration.getInvocationInputFactory().create(new GraphQLRequest(query, new HashMap<>(), null))));\n-        } catch (Exception e) {\n-            return e.getMessage();\n-        }\n-    }\n-\n-    private void doRequestAsync(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler) {\n-        if (configuration.isAsyncServletModeEnabled()) {\n-            AsyncContext asyncContext = request.startAsync();\n-            HttpServletRequest asyncRequest = (HttpServletRequest) asyncContext.getRequest();\n-            HttpServletResponse asyncResponse = (HttpServletResponse) asyncContext.getResponse();\n-            new Thread(() -> doRequest(asyncRequest, asyncResponse, handler, asyncContext)).start();\n-        } else {\n-            doRequest(request, response, handler, null);\n-        }\n-    }\n-\n-    private void doRequest(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler, AsyncContext asyncContext) {\n-\n-        List<GraphQLServletListener.RequestCallback> requestCallbacks = runListeners(l -> l.onRequest(request, response));\n-\n-        try {\n-            handler.handle(request, response);\n-            runCallbacks(requestCallbacks, c -> c.onSuccess(request, response));\n-        } catch (Throwable t) {\n-            response.setStatus(500);\n-            log.error(\"Error executing GraphQL request!\", t);\n-            runCallbacks(requestCallbacks, c -> c.onError(request, response, t));\n-        } finally {\n-            runCallbacks(requestCallbacks, c -> c.onFinally(request, response));\n-            if (asyncContext != null) {\n-                asyncContext.complete();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, getHandler);\n-    }\n-\n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, postHandler);\n-    }\n-\n-    private Optional<Part> getFileItem(Map<String, List<Part>> fileItems, String name) {\n-        return Optional.ofNullable(fileItems.get(name)).filter(list -> !list.isEmpty()).map(list -> list.get(0));\n-    }\n-\n-    private void query(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLSingleInvocationInput invocationInput, HttpServletResponse resp) throws IOException {\n-        ExecutionResult result = queryInvoker.query(invocationInput);\n-\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-        resp.getWriter().write(graphQLObjectMapper.serializeResultAsJson(result));\n-    }\n-\n-    private void queryBatched(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLBatchedInvocationInput invocationInput, HttpServletResponse resp) throws Exception {\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-\n-        Writer respWriter = resp.getWriter();\n-        respWriter.write('[');\n-\n-        queryInvoker.query(invocationInput, (result, hasNext) -> {\n-            respWriter.write(graphQLObjectMapper.serializeResultAsJson(result));\n-            if (hasNext) {\n-                respWriter.write(',');\n-            }\n-        });\n-\n-        respWriter.write(']');\n-    }\n-\n-    private <R> List<R> runListeners(Function<? super GraphQLServletListener, R> action) {\n-        return configuration.getListeners().stream()\n-                .map(listener -> {\n-                    try {\n-                        return action.apply(listener);\n-                    } catch (Throwable t) {\n-                        log.error(\"Error running listener: {}\", listener, t);\n-                        return null;\n-                    }\n-                })\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private <T> void runCallbacks(List<T> callbacks, Consumer<T> action) {\n-        callbacks.forEach(callback -> {\n-            try {\n-                action.accept(callback);\n-            } catch (Throwable t) {\n-                log.error(\"Error running callback: {}\", callback, t);\n-            }\n-        });\n-    }\n-\n-    private boolean isBatchedQuery(InputStream inputStream) throws IOException {\n-        if (inputStream == null) {\n-            return false;\n-        }\n-\n-        ByteArrayOutputStream result = new ByteArrayOutputStream();\n-        byte[] buffer = new byte[128];\n-        int length;\n-\n-        inputStream.mark(0);\n-        while ((length = inputStream.read(buffer)) != -1) {\n-            result.write(buffer, 0, length);\n-            String chunk = result.toString();\n-            Boolean isArrayStart = isArrayStart(chunk);\n-            if (isArrayStart != null) {\n-                inputStream.reset();\n-                return isArrayStart;\n-            }\n-        }\n-\n-        inputStream.reset();\n-        return false;\n-    }\n-\n-    private boolean isBatchedQuery(String query) {\n-        if (query == null) {\n-            return false;\n-        }\n-\n-        Boolean isArrayStart = isArrayStart(query);\n-        return isArrayStart != null && isArrayStart;\n-    }\n-\n-    // return true if the first non whitespace character is the beginning of an array\n-    private Boolean isArrayStart(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            if (!Character.isWhitespace(ch)) {\n-                return ch == '[';\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    protected interface HttpRequestHandler extends BiConsumer<HttpServletRequest, HttpServletResponse> {\n-        @Override\n-        default void accept(HttpServletRequest request, HttpServletResponse response) {\n-            try {\n-                handle(request, response);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        void handle(HttpServletRequest request, HttpServletResponse response) throws Exception;\n-    }\n-}\n+//package com.dotcms.graphql;\n+//\n+//import com.google.common.io.ByteStreams;\n+//import com.google.common.io.CharStreams;\n+//\n+//import org.slf4j.Logger;\n+//import org.slf4j.LoggerFactory;\n+//\n+//import java.io.BufferedInputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NjIxOQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440496219", "createdAt": "2020-06-15T23:12:52Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/AbstractGraphQLHttpServlet.java", "diffHunk": "@@ -1,446 +1,446 @@\n-package com.dotcms.graphql;\n-\n-import com.google.common.io.ByteStreams;\n-import com.google.common.io.CharStreams;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.Writer;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-import javax.servlet.AsyncContext;\n-import javax.servlet.Servlet;\n-import javax.servlet.ServletConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.Part;\n-\n-import graphql.ExecutionResult;\n-import graphql.introspection.IntrospectionQuery;\n-import graphql.schema.GraphQLFieldDefinition;\n-import graphql.servlet.GraphQLBatchedInvocationInput;\n-import graphql.servlet.GraphQLConfiguration;\n-import graphql.servlet.GraphQLInvocationInputFactory;\n-import graphql.servlet.GraphQLMBean;\n-import graphql.servlet.GraphQLObjectMapper;\n-import graphql.servlet.GraphQLQueryInvoker;\n-import graphql.servlet.GraphQLServletListener;\n-import graphql.servlet.GraphQLSingleInvocationInput;\n-import graphql.servlet.internal.GraphQLRequest;\n-import graphql.servlet.internal.VariableMapper;\n-\n-/**\n- * @author Andrew Potter\n- */\n-public abstract class AbstractGraphQLHttpServlet extends HttpServlet implements Servlet, GraphQLMBean {\n-\n-    public static final Logger log = LoggerFactory.getLogger(AbstractGraphQLHttpServlet.class);\n-\n-    public static final String APPLICATION_JSON_UTF8 = \"application/json;charset=UTF-8\";\n-    public static final String APPLICATION_GRAPHQL = \"application/graphql\";\n-    public static final int STATUS_OK = 200;\n-    public static final int STATUS_BAD_REQUEST = 400;\n-\n-    private static final GraphQLRequest INTROSPECTION_REQUEST = new GraphQLRequest(IntrospectionQuery.INTROSPECTION_QUERY, new HashMap<>(), null);\n-    private static final String[] MULTIPART_KEYS = new String[]{\"operations\", \"graphql\", \"query\"};\n-\n-    private GraphQLConfiguration configuration;\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLQueryInvoker getQueryInvoker();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLInvocationInputFactory getInvocationInputFactory();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract GraphQLObjectMapper getGraphQLObjectMapper();\n-\n-    /**\n-     * @deprecated override {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    protected abstract boolean isAsyncServletMode();\n-\n-    protected GraphQLConfiguration getConfiguration() {\n-        return GraphQLConfiguration.with(getInvocationInputFactory())\n-                .with(getQueryInvoker())\n-                .with(getGraphQLObjectMapper())\n-                .with(isAsyncServletMode())\n-                .with(listeners)\n-                .build();\n-    }\n-\n-    /**\n-     * @deprecated use {@link #getConfiguration()} instead\n-     */\n-    @Deprecated\n-    private final List<GraphQLServletListener> listeners;\n-\n-    private HttpRequestHandler getHandler;\n-    private HttpRequestHandler postHandler;\n-\n-    public AbstractGraphQLHttpServlet() {\n-        this(null);\n-    }\n-\n-    public AbstractGraphQLHttpServlet(List<GraphQLServletListener> listeners) {\n-        this.listeners = listeners != null ? new ArrayList<>(listeners) : new ArrayList<>();\n-    }\n-\n-    @Override\n-    public void init(ServletConfig servletConfig) {\n-        this.configuration = getConfiguration();\n-\n-        this.getHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            String path = request.getPathInfo();\n-            if (path == null) {\n-                path = request.getServletPath();\n-            }\n-            if (path.contentEquals(\"/schema.json\")) {\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(INTROSPECTION_REQUEST, request, response), response);\n-            } else {\n-                String query = request.getParameter(\"query\");\n-                if (query != null) {\n-\n-                    if (isBatchedQuery(query)) {\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(graphQLObjectMapper.readBatchedGraphQLRequest(query), request, response), response);\n-                    } else {\n-                        final Map<String, Object> variables = new HashMap<>();\n-                        if (request.getParameter(\"variables\") != null) {\n-                            variables.putAll(graphQLObjectMapper.deserializeVariables(request.getParameter(\"variables\")));\n-                        }\n-\n-                        String operationName = request.getParameter(\"operationName\");\n-\n-                        query(queryInvoker, graphQLObjectMapper, invocationInputFactory.createReadOnly(new GraphQLRequest(query, variables, operationName), request, response), response);\n-                    }\n-                } else {\n-                    response.setStatus(STATUS_BAD_REQUEST);\n-                    log.info(\"Bad GET request: path was not \\\"/schema.json\\\" or no query variable named \\\"query\\\" given\");\n-                }\n-            }\n-        };\n-\n-        this.postHandler = (request, response) -> {\n-            GraphQLInvocationInputFactory invocationInputFactory = configuration.getInvocationInputFactory();\n-            GraphQLObjectMapper graphQLObjectMapper = configuration.getObjectMapper();\n-            GraphQLQueryInvoker queryInvoker = configuration.getQueryInvoker();\n-\n-            if (APPLICATION_GRAPHQL.equals(request.getContentType())) {\n-                String query = CharStreams.toString(request.getReader());\n-                query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(new GraphQLRequest(query, null, null)), response);\n-            } else if (request.getContentType() != null && request.getContentType().startsWith(\"multipart/form-data\") && !request.getParts().isEmpty()) {\n-                final Map<String, List<Part>> fileItems = request.getParts()\n-                    .stream()\n-                    .collect(Collectors.groupingBy(Part::getName));\n-\n-                for (String key : MULTIPART_KEYS) {\n-                    // Check to see if there is a part under the key we seek\n-                    if (!fileItems.containsKey(key)) {\n-                        continue;\n-                    }\n-\n-                    final Optional<Part> queryItem = getFileItem(fileItems, key);\n-                    if (!queryItem.isPresent()) {\n-                        // If there is a part, but we don't see an item, then break and return BAD_REQUEST\n-                        break;\n-                    }\n-\n-                    InputStream inputStream = asMarkableInputStream(queryItem.get().getInputStream());\n-\n-                    final Optional<Map<String, List<String>>> variablesMap =\n-                        getFileItem(fileItems, \"map\").map(graphQLObjectMapper::deserializeMultipartMap);\n-\n-                    if (isBatchedQuery(inputStream)) {\n-                        List<GraphQLRequest> graphQLRequests =\n-                            graphQLObjectMapper.readBatchedGraphQLRequest(inputStream);\n-                        variablesMap.ifPresent(map -> graphQLRequests.forEach(r -> mapMultipartVariables(r, map, fileItems)));\n-                        GraphQLBatchedInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequests, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        queryBatched(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    } else {\n-                        GraphQLRequest graphQLRequest;\n-                        if (\"query\".equals(key)) {\n-                            graphQLRequest = buildRequestFromQuery(inputStream, graphQLObjectMapper, fileItems);\n-                        } else {\n-                            graphQLRequest = graphQLObjectMapper.readGraphQLRequest(inputStream);\n-                        }\n-\n-                        variablesMap.ifPresent(m -> mapMultipartVariables(graphQLRequest, m, fileItems));\n-                        GraphQLSingleInvocationInput invocationInput =\n-                            invocationInputFactory.create(graphQLRequest, request, response);\n-                        invocationInput.getContext().setParts(fileItems);\n-                        query(queryInvoker, graphQLObjectMapper, invocationInput, response);\n-                        return;\n-                    }\n-                }\n-\n-                response.setStatus(STATUS_BAD_REQUEST);\n-                log.info(\"Bad POST multipart request: no part named \" + Arrays.toString(MULTIPART_KEYS));\n-            } else {\n-                // this is not a multipart request\n-                InputStream inputStream = asMarkableInputStream(request.getInputStream());\n-\n-                if (isBatchedQuery(inputStream)) {\n-                    queryBatched(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readBatchedGraphQLRequest(inputStream), request, response), response);\n-                } else {\n-                    query(queryInvoker, graphQLObjectMapper, invocationInputFactory.create(graphQLObjectMapper.readGraphQLRequest(inputStream), request, response), response);\n-                }\n-            }\n-        };\n-    }\n-\n-    private static InputStream asMarkableInputStream(InputStream inputStream) {\n-        if (!inputStream.markSupported()) {\n-            inputStream = new BufferedInputStream(inputStream);\n-        }\n-        return inputStream;\n-    }\n-\n-    private GraphQLRequest buildRequestFromQuery(InputStream inputStream,\n-                                                 GraphQLObjectMapper graphQLObjectMapper,\n-                                                 Map<String, List<Part>> fileItems) throws IOException {\n-        GraphQLRequest graphQLRequest;\n-        String query = new String(ByteStreams.toByteArray(inputStream));\n-\n-        Map<String, Object> variables = null;\n-        final Optional<Part> variablesItem = getFileItem(fileItems, \"variables\");\n-        if (variablesItem.isPresent()) {\n-            variables = graphQLObjectMapper.deserializeVariables(new String(ByteStreams.toByteArray(variablesItem.get().getInputStream())));\n-        }\n-\n-        String operationName = null;\n-        final Optional<Part> operationNameItem = getFileItem(fileItems, \"operationName\");\n-        if (operationNameItem.isPresent()) {\n-            operationName = new String(ByteStreams.toByteArray(operationNameItem.get().getInputStream())).trim();\n-        }\n-\n-        graphQLRequest = new GraphQLRequest(query, variables, operationName);\n-        return graphQLRequest;\n-    }\n-\n-    private void mapMultipartVariables(GraphQLRequest request,\n-                                       Map<String, List<String>> variablesMap,\n-                                       Map<String, List<Part>> fileItems) {\n-        Map<String, Object> variables = request.getVariables();\n-\n-        variablesMap.forEach((partName, objectPaths) -> {\n-            Part part = getFileItem(fileItems, partName)\n-                    .orElseThrow(() -> new RuntimeException(\"unable to find part name \" +\n-                            partName +\n-                            \" as referenced in the variables map\"));\n-\n-            objectPaths.forEach(objectPath -> VariableMapper.mapVariable(objectPath, variables, part));\n-        });\n-    }\n-\n-    public void addListener(GraphQLServletListener servletListener) {\n-        configuration.add(servletListener);\n-    }\n-\n-    public void removeListener(GraphQLServletListener servletListener) {\n-        configuration.remove(servletListener);\n-    }\n-\n-    @Override\n-    public String[] getQueries() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getQueryType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String[] getMutations() {\n-        return configuration.getInvocationInputFactory().getSchemaProvider().getSchema().getMutationType().getFieldDefinitions().stream().map(GraphQLFieldDefinition::getName).toArray(String[]::new);\n-    }\n-\n-    @Override\n-    public String executeQuery(String query) {\n-        try {\n-            return configuration.getObjectMapper().serializeResultAsJson(configuration.getQueryInvoker().query(configuration.getInvocationInputFactory().create(new GraphQLRequest(query, new HashMap<>(), null))));\n-        } catch (Exception e) {\n-            return e.getMessage();\n-        }\n-    }\n-\n-    private void doRequestAsync(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler) {\n-        if (configuration.isAsyncServletModeEnabled()) {\n-            AsyncContext asyncContext = request.startAsync();\n-            HttpServletRequest asyncRequest = (HttpServletRequest) asyncContext.getRequest();\n-            HttpServletResponse asyncResponse = (HttpServletResponse) asyncContext.getResponse();\n-            new Thread(() -> doRequest(asyncRequest, asyncResponse, handler, asyncContext)).start();\n-        } else {\n-            doRequest(request, response, handler, null);\n-        }\n-    }\n-\n-    private void doRequest(HttpServletRequest request, HttpServletResponse response, HttpRequestHandler handler, AsyncContext asyncContext) {\n-\n-        List<GraphQLServletListener.RequestCallback> requestCallbacks = runListeners(l -> l.onRequest(request, response));\n-\n-        try {\n-            handler.handle(request, response);\n-            runCallbacks(requestCallbacks, c -> c.onSuccess(request, response));\n-        } catch (Throwable t) {\n-            response.setStatus(500);\n-            log.error(\"Error executing GraphQL request!\", t);\n-            runCallbacks(requestCallbacks, c -> c.onError(request, response, t));\n-        } finally {\n-            runCallbacks(requestCallbacks, c -> c.onFinally(request, response));\n-            if (asyncContext != null) {\n-                asyncContext.complete();\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, getHandler);\n-    }\n-\n-    @Override\n-    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n-        doRequestAsync(req, resp, postHandler);\n-    }\n-\n-    private Optional<Part> getFileItem(Map<String, List<Part>> fileItems, String name) {\n-        return Optional.ofNullable(fileItems.get(name)).filter(list -> !list.isEmpty()).map(list -> list.get(0));\n-    }\n-\n-    private void query(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLSingleInvocationInput invocationInput, HttpServletResponse resp) throws IOException {\n-        ExecutionResult result = queryInvoker.query(invocationInput);\n-\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-        resp.getWriter().write(graphQLObjectMapper.serializeResultAsJson(result));\n-    }\n-\n-    private void queryBatched(GraphQLQueryInvoker queryInvoker, GraphQLObjectMapper graphQLObjectMapper, GraphQLBatchedInvocationInput invocationInput, HttpServletResponse resp) throws Exception {\n-        resp.setContentType(APPLICATION_JSON_UTF8);\n-        resp.setStatus(STATUS_OK);\n-\n-        Writer respWriter = resp.getWriter();\n-        respWriter.write('[');\n-\n-        queryInvoker.query(invocationInput, (result, hasNext) -> {\n-            respWriter.write(graphQLObjectMapper.serializeResultAsJson(result));\n-            if (hasNext) {\n-                respWriter.write(',');\n-            }\n-        });\n-\n-        respWriter.write(']');\n-    }\n-\n-    private <R> List<R> runListeners(Function<? super GraphQLServletListener, R> action) {\n-        return configuration.getListeners().stream()\n-                .map(listener -> {\n-                    try {\n-                        return action.apply(listener);\n-                    } catch (Throwable t) {\n-                        log.error(\"Error running listener: {}\", listener, t);\n-                        return null;\n-                    }\n-                })\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-    }\n-\n-    private <T> void runCallbacks(List<T> callbacks, Consumer<T> action) {\n-        callbacks.forEach(callback -> {\n-            try {\n-                action.accept(callback);\n-            } catch (Throwable t) {\n-                log.error(\"Error running callback: {}\", callback, t);\n-            }\n-        });\n-    }\n-\n-    private boolean isBatchedQuery(InputStream inputStream) throws IOException {\n-        if (inputStream == null) {\n-            return false;\n-        }\n-\n-        ByteArrayOutputStream result = new ByteArrayOutputStream();\n-        byte[] buffer = new byte[128];\n-        int length;\n-\n-        inputStream.mark(0);\n-        while ((length = inputStream.read(buffer)) != -1) {\n-            result.write(buffer, 0, length);\n-            String chunk = result.toString();\n-            Boolean isArrayStart = isArrayStart(chunk);\n-            if (isArrayStart != null) {\n-                inputStream.reset();\n-                return isArrayStart;\n-            }\n-        }\n-\n-        inputStream.reset();\n-        return false;\n-    }\n-\n-    private boolean isBatchedQuery(String query) {\n-        if (query == null) {\n-            return false;\n-        }\n-\n-        Boolean isArrayStart = isArrayStart(query);\n-        return isArrayStart != null && isArrayStart;\n-    }\n-\n-    // return true if the first non whitespace character is the beginning of an array\n-    private Boolean isArrayStart(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            if (!Character.isWhitespace(ch)) {\n-                return ch == '[';\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    protected interface HttpRequestHandler extends BiConsumer<HttpServletRequest, HttpServletResponse> {\n-        @Override\n-        default void accept(HttpServletRequest request, HttpServletResponse response) {\n-            try {\n-                handle(request, response);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        void handle(HttpServletRequest request, HttpServletResponse response) throws Exception;\n-    }\n-}\n+//package com.dotcms.graphql;\n+//\n+//import com.google.common.io.ByteStreams;\n+//import com.google.common.io.CharStreams;\n+//\n+//import org.slf4j.Logger;\n+//import org.slf4j.LoggerFactory;\n+//\n+//import java.io.BufferedInputStream;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzI2NQ=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 455}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2MTE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzoxNVrOGkAhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxNzozOVrOGkF2Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDQyMw==", "bodyText": "add some doc", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410423", "createdAt": "2020-06-15T19:53:15Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPI.java", "diffHunk": "@@ -63,6 +64,9 @@ PageView getPageMetadata(\n             final HttpServletResponse response)\n                 throws DotSecurityException, DotDataException;\n \n+    HTMLPageUrl getHtmlPageAsset(PageContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5Nzc1OQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440497759", "createdAt": "2020-06-15T23:17:39Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/HTMLPageAssetRenderedAPI.java", "diffHunk": "@@ -63,6 +64,9 @@ PageView getPageMetadata(\n             final HttpServletResponse response)\n                 throws DotSecurityException, DotDataException;\n \n+    HTMLPageUrl getHtmlPageAsset(PageContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDQyMw=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2MTk5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1MzozMlrOGkAhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODoxMFrOGkHSAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDU1Mw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410553", "createdAt": "2020-06-15T19:53:32Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -34,17 +38,22 @@ public static GraphQLObjectType createObjectType(final String typeName, final Ma\n \n     public static GraphQLObjectType createObjectType(final String typeName,\n             final Map<String, TypeFetcher> fieldsTypesAndFetchers) {\n+\n         final GraphQLObjectType.Builder builder = GraphQLObjectType.newObject().name(typeName);\n \n-        fieldsTypesAndFetchers.keySet().forEach((key)->{\n-            builder.field(newFieldDefinition()\n-                    .name(key)\n-                    .type(fieldsTypesAndFetchers.get(key).getType())\n-                    .dataFetcher(fieldsTypesAndFetchers.get(key).getDataFetcher()!=null\n-                            ?fieldsTypesAndFetchers.get(key).getDataFetcher()\n-                            :new PropertyDataFetcher<String>(key))\n-            );\n-        });\n+        for (String key : fieldsTypesAndFetchers.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTIxOQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440521219", "createdAt": "2020-06-16T00:38:10Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -34,17 +38,22 @@ public static GraphQLObjectType createObjectType(final String typeName, final Ma\n \n     public static GraphQLObjectType createObjectType(final String typeName,\n             final Map<String, TypeFetcher> fieldsTypesAndFetchers) {\n+\n         final GraphQLObjectType.Builder builder = GraphQLObjectType.newObject().name(typeName);\n \n-        fieldsTypesAndFetchers.keySet().forEach((key)->{\n-            builder.field(newFieldDefinition()\n-                    .name(key)\n-                    .type(fieldsTypesAndFetchers.get(key).getType())\n-                    .dataFetcher(fieldsTypesAndFetchers.get(key).getDataFetcher()!=null\n-                            ?fieldsTypesAndFetchers.get(key).getDataFetcher()\n-                            :new PropertyDataFetcher<String>(key))\n-            );\n-        });\n+        for (String key : fieldsTypesAndFetchers.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDU1Mw=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2MzkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/PageAPIGraphQLTypesProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDoxMVrOGkAi7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzowNTo1M1rOGkFoZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDg2Mw==", "bodyText": "what is that for?", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440410863", "createdAt": "2020-06-15T19:54:11Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/PageAPIGraphQLTypesProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.dotcms.graphql.business;\n+\n+import static graphql.Scalars.GraphQLBoolean;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.InterfaceType;\n+import com.dotcms.graphql.util.TypeUtil;\n+import com.dotcms.graphql.util.TypeUtil.TypeFetcher;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Singleton class that provides all the {@link GraphQLType}s needed for the Page API\n+ */\n+\n+public enum PageAPIGraphQLTypesProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDE4MA==", "bodyText": "This is a singleton implementation using ENUM, as stated in the Book Effective Java from Java creator Joshua Botch. It is the most recommended way of creating a singleton. You can see it here in Method 3. https://medium.com/codelog/3-methods-to-create-singleton-with-java-effective-java-learning-notes-12ee8cd27ccd", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440494180", "createdAt": "2020-06-15T23:05:53Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/PageAPIGraphQLTypesProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.dotcms.graphql.business;\n+\n+import static graphql.Scalars.GraphQLBoolean;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.InterfaceType;\n+import com.dotcms.graphql.util.TypeUtil;\n+import com.dotcms.graphql.util.TypeUtil.TypeFetcher;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Singleton class that provides all the {@link GraphQLType}s needed for the Page API\n+ */\n+\n+public enum PageAPIGraphQLTypesProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMDg2Mw=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2NTM2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo0NVrOGkAj4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxODo1N1rOGkF36A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTEwNg==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411106", "createdAt": "2020-06-15T19:54:45Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODE1Mg==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440498152", "createdAt": "2020-06-15T23:18:57Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTEwNg=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2NTY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1MFrOGkAkEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxOTowNFrOGkF4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTE1NQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411155", "createdAt": "2020-06-15T19:54:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODE4OQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440498189", "createdAt": "2020-06-15T23:19:04Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTE1NQ=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2NjA5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1NlrOGkAkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NDo1NlrOGkAkTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTIxNA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411214", "createdAt": "2020-06-15T19:54:56Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg2NjQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1NTowNFrOGkAkig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMzoxOTowOFrOGkF4Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTI3NA==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440411274", "createdAt": "2020-06-15T19:55:04Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            HTMLPageAsset pageAsset = pageUrl.getHTMLPage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5ODIxMQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440498211", "createdAt": "2020-06-15T23:19:08Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            HTMLPageAsset pageAsset = pageUrl.getHTMLPage();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMTI3NA=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Mzg3MTI5OnYy", "diffSide": "LEFT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/SiteFieldDataFetcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTo1Njo0MFrOGkAnmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDo0MDo0N1rOGkHUyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMjA1OQ==", "bodyText": "get a reference of the inner map here and over it. instead of having to do host.getMap at all times", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440412059", "createdAt": "2020-06-15T19:56:40Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/SiteFieldDataFetcher.java", "diffHunk": "@@ -13,22 +15,24 @@\n import graphql.schema.DataFetcher;\n import graphql.schema.DataFetchingEnvironment;\n \n-public class SiteFieldDataFetcher implements DataFetcher<Map<String, Object>> {\n+public class SiteFieldDataFetcher implements DataFetcher<Contentlet> {\n     @Override\n-    public Map<String, Object> get(final DataFetchingEnvironment environment) throws Exception {\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n         try {\n             final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n             final Contentlet contentlet = environment.getSource();\n-            final Map<String, Object> siteMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTkzMQ==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r440521931", "createdAt": "2020-06-16T00:40:47Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/SiteFieldDataFetcher.java", "diffHunk": "@@ -13,22 +15,24 @@\n import graphql.schema.DataFetcher;\n import graphql.schema.DataFetchingEnvironment;\n \n-public class SiteFieldDataFetcher implements DataFetcher<Map<String, Object>> {\n+public class SiteFieldDataFetcher implements DataFetcher<Contentlet> {\n     @Override\n-    public Map<String, Object> get(final DataFetchingEnvironment environment) throws Exception {\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n         try {\n             final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n             final Contentlet contentlet = environment.getSource();\n-            final Map<String, Object> siteMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMjA1OQ=="}, "originalCommit": {"oid": "41b258fa0b4aa4141280d403c6b6e1dff928cb66"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM2MDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoxODoxOFrOGlxgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzoyNjoxOFrOGmDSKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2MTY2OQ==", "bodyText": "remove", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442261669", "createdAt": "2020-06-18T14:18:18Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -494,13 +492,13 @@ public void testGetSchema_ContentTypeOperations(final TypeTestCase testCase)\n             contentType = operation.apply(testCase.getContentTypeName(), testCase.getBaseType());\n         }\n \n-        final String contentTypeVar = contentType != null ? contentType.variable() : null;\n+//        final String contentTypeVar = contentType != null ? contentType.variable() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Mjg3NA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442552874", "createdAt": "2020-06-18T23:26:18Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -494,13 +492,13 @@ public void testGetSchema_ContentTypeOperations(final TypeTestCase testCase)\n             contentType = operation.apply(testCase.getContentTypeName(), testCase.getBaseType());\n         }\n \n-        final String contentTypeVar = contentType != null ? contentType.variable() : null;\n+//        final String contentTypeVar = contentType != null ? contentType.variable() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2MTY2OQ=="}, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTQwNTg1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNzo1MlrOGlx89g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzoyODoyNlrOGmDUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2ODkxOA==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442268918", "createdAt": "2020-06-18T14:27:52Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,117 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+public class DotGraphQLContext extends DefaultGraphQLContext implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1MzUxOA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442553518", "createdAt": "2020-06-18T23:28:26Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,117 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+public class DotGraphQLContext extends DefaultGraphQLContext implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2ODkxOA=="}, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTQzOTQ2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLSchemaProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDozNDowN1rOGlyQ2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMTo1OVrOGmDZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NDAxMQ==", "bodyText": "why this method return null allways?", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442274011", "createdAt": "2020-06-18T14:34:07Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLSchemaProvider.java", "diffHunk": "@@ -32,6 +30,11 @@ public GraphQLSchema getSchema() {\n         }\n     }\n \n+    @Override\n+    public GraphQLSchema getReadOnlySchema() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDY0MQ==", "bodyText": "We don't provide a read only schema", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554641", "createdAt": "2020-06-18T23:31:59Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLSchemaProvider.java", "diffHunk": "@@ -32,6 +30,11 @@ public GraphQLSchema getSchema() {\n         }\n     }\n \n+    @Override\n+    public GraphQLSchema getReadOnlySchema() {\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI3NDAxMQ=="}, "originalCommit": {"oid": "2c4acb73545fc459f553a9a119040fa91dd9afbd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE2NjI4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOFrOGmDZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOFrOGmDZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc4MA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554780", "createdAt": "2020-06-18T23:32:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,117 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE2NjMyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOVrOGmDZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjoyOVrOGmDZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc4Nw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'graphql.schema.GraphQLFieldDefinition.newFieldDefinition'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554787", "createdAt": "2020-06-18T23:32:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "diffHunk": "@@ -5,6 +5,7 @@\n import static graphql.Scalars.GraphQLFloat;\n import static graphql.Scalars.GraphQLInt;\n import static graphql.Scalars.GraphQLString;\n+import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE2NjM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMVrOGmDZpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMVrOGmDZpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc5MQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'graphql.schema.PropertyDataFetcher'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554791", "createdAt": "2020-06-18T23:32:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/business/ContentAPIGraphQLTypesProvider.java", "diffHunk": "@@ -35,18 +36,20 @@\n import com.dotcms.graphql.datafetcher.TagsFieldDataFetcher;\n import com.dotcms.graphql.exception.FieldGenerationException;\n import com.dotcms.graphql.exception.TypeGenerationException;\n+import com.dotcms.graphql.util.TypeUtil;\n import com.dotcms.util.DotPreconditions;\n import com.dotmarketing.business.APILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.util.Logger;\n import com.dotmarketing.util.UtilMethods;\n import com.google.common.annotations.VisibleForTesting;\n-import graphql.scalars.ExtendedScalars;\n+import graphql.GraphQLException;\n import graphql.schema.DataFetcher;\n import graphql.schema.GraphQLFieldDefinition;\n import graphql.schema.GraphQLObjectType;\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.GraphQLType;\n+import graphql.schema.PropertyDataFetcher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE2NjQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMlrOGmDZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzozMjozMlrOGmDZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NDc5OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442554798", "createdAt": "2020-06-18T23:32:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            final HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            final HTMLPageAsset pageAsset = pageUrl.getHTMLPage();\n+            pageAsset.getMap().put(\"URLMapContent\", pageUrl.getUrlMapInfo());\n+\n+            final DotContentletTransformer transformer = new DotTransformerBuilder()\n+                    .graphQLDataFetchOptions().content(pageAsset).forUser(user).build();\n+\n+            return transformer.hydrate().get(0);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30aeab176affaaf2610458cbcf7250a0a39c2486"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxN1rOGmDl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxN1rOGmDl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkxNQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557915", "createdAt": "2020-06-18T23:43:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,121 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+/**\n+ * Extends the {@link DefaultGraphQLContext} to be able to set the dotCMS user and have it\n+ * available from the different {@link graphql.schema.DataFetcher}s\n+ */\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzU0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxOFrOGmDl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoxOFrOGmDl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkyMQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.jetbrains.annotations.NotNull'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557921", "createdAt": "2020-06-18T23:43:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -10,6 +18,8 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.PropertyDataFetcher;\n import graphql.schema.TypeResolver;\n+import java.util.Map.Entry;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMFrOGmDl5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMFrOGmDl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkyNg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.graphql.InterfaceType'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557926", "createdAt": "2020-06-18T23:43:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMVrOGmDl7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMVrOGmDl7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1NzkzNA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.UtilMethods'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557934", "createdAt": "2020-06-18T23:43:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;\n import com.dotcms.graphql.datafetcher.FieldDataFetcher;\n \n+import com.dotcms.util.DotPreconditions;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/TypeTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMlrOGmDl-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyMlrOGmDl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk0NQ==", "bodyText": "Codacy found an issue: Field description has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557945", "createdAt": "2020-06-18T23:43:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/TypeTestCase.java", "diffHunk": "@@ -59,6 +61,7 @@ public BaseContentType getBaseType() {\n         private String fieldVarName;\n         private Class<? extends Field> fieldType;\n         private boolean fieldRequired;\n+        private String description;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyM1rOGmDl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyM1rOGmDl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk0OQ==", "bodyText": "Codacy found an issue: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557949", "createdAt": "2020-06-18T23:43:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/DotGraphQLContext.java", "diffHunk": "@@ -1,23 +1,121 @@\n package com.dotcms.graphql;\n \n import com.liferay.portal.model.User;\n+import graphql.kickstart.execution.context.DefaultGraphQLContext;\n+import graphql.kickstart.servlet.context.GraphQLServletContext;\n+import org.dataloader.DataLoaderRegistry;\n \n+import javax.security.auth.Subject;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.Part;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n \n-import graphql.servlet.GraphQLContext;\n-\n-public class DotGraphQLContext extends GraphQLContext {\n+/**\n+ * Extends the {@link DefaultGraphQLContext} to be able to set the dotCMS user and have it\n+ * available from the different {@link graphql.schema.DataFetcher}s\n+ */\n+public class DotGraphQLContext extends DefaultGraphQLContext implements\n+        GraphQLServletContext {\n \n+    private final HttpServletRequest httpServletRequest;\n+    private final HttpServletResponse httpServletResponse;\n     private final User user;\n \n-    public DotGraphQLContext(final HttpServletRequest httpServletRequest,\n-                             final HttpServletResponse httpServletResponse, final User user) {\n-        super(httpServletRequest, httpServletResponse);\n+    private DotGraphQLContext(DataLoaderRegistry dataLoaderRegistry, Subject subject, HttpServletRequest httpServletRequest,\n+            HttpServletResponse httpServletResponse, User user) {\n+        super(dataLoaderRegistry, subject);\n+        this.httpServletRequest = httpServletRequest;\n+        this.httpServletResponse = httpServletResponse;\n         this.user = user;\n     }\n \n+    @Override\n+    public HttpServletRequest getHttpServletRequest() {\n+        return httpServletRequest;\n+    }\n+\n+    @Override\n+    public HttpServletResponse getHttpServletResponse() {\n+        return httpServletResponse;\n+    }\n+\n+    @Override\n+    public List<Part> getFileParts() {\n+        try {\n+            return httpServletRequest.getParts().stream()\n+                    .filter(part -> part.getContentType() != null)\n+                    .collect(Collectors.toList());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4Nzc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNFrOGmDmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNFrOGmDmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk1Mg==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.util.DotPreconditions'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557952", "createdAt": "2020-06-18T23:43:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -1,7 +1,15 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.graphql.InterfaceType;\n import com.dotcms.graphql.datafetcher.FieldDataFetcher;\n \n+import com.dotcms.util.DotPreconditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4Nzc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNVrOGmDmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNVrOGmDmBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk1OA==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557958", "createdAt": "2020-06-18T23:43:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageDataFetcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.DotContentletTransformer;\n+import com.dotmarketing.portlets.contentlet.transform.DotTransformerBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl.HTMLPageUrl;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.UtilMethods;\n+import com.dotmarketing.util.WebKeys;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * This DataFetcher returns a {@link HTMLPageAsset} given an URL. It also takes optional parameters\n+ * to find a specific version of the page: languageId and pageMode.\n+ *\n+ * The returned page includes extra properties set by a page transformer.\n+ *\n+ */\n+public class PageDataFetcher implements DataFetcher<Contentlet> {\n+    @Override\n+    public Contentlet get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+\n+            final String url = environment.getArgument(\"url\");\n+            final String languageId = environment.getArgument(\"languageId\");\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            // we need to set the language to the request\n+            if(UtilMethods.isSet(languageId)) {\n+                request.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, languageId);\n+            }\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            final HTMLPageUrl pageUrl = APILocator.getHTMLPageAssetRenderedAPI()\n+                    .getHtmlPageAsset(pageContext, request);\n+\n+            final HTMLPageAsset pageAsset = pageUrl.getHTMLPage();\n+            pageAsset.getMap().put(\"URLMapContent\", pageUrl.getUrlMapInfo());\n+\n+            final DotContentletTransformer transformer = new DotTransformerBuilder()\n+                    .graphQLDataFetchOptions().content(pageAsset).forUser(user).build();\n+\n+            return transformer.hydrate().get(0);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4Nzc5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNlrOGmDmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyNlrOGmDmCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk2MA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Map.Entry'", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557960", "createdAt": "2020-06-18T23:43:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/util/TypeUtil.java", "diffHunk": "@@ -10,6 +18,8 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.PropertyDataFetcher;\n import graphql.schema.TypeResolver;\n+import java.util.Map.Entry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzE4NzgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyN1rOGmDmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzo0MzoyN1rOGmDmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU1Nzk2NQ==", "bodyText": "Codacy found an issue: Field page has the same name as a method", "url": "https://github.com/dotCMS/core/pull/18651#discussion_r442557965", "createdAt": "2020-06-18T23:43:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -196,7 +192,7 @@ public Contentlet getUrlContent() {\n         private  Template template;\n         // The map of Containers and their respective relationships with Content Types\n         private  Collection<? extends ContainerRaw> containers;\n-        private  HTMLPageAssetInfo page;\n+        private  HTMLPageAsset page;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b2d30489334b10b94bfc4b617a74a6392d4adc"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2156, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}