{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2OTA2MjUz", "number": 18009, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNFrODhO_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjowMDo0NVrODhPODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc1MjMyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNFrOFr43HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNFrOFr43HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcwMQ==", "bodyText": "Issue found: Local variable 'fileAssetFields' could be declared final", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564701", "createdAt": "2020-02-19T21:48:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc1MjQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNlrOFr43KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0ODozNlrOFr43KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NDcxMw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381564713", "createdAt": "2020-02-19T21:48:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/graphql/business/GraphqlAPITest.java", "diffHunk": "@@ -701,6 +714,62 @@ public void testGetSchema_GivenEELicense_EnterpriseBaseTypeCollectionsShouldBeAv\n                 +\"BaseTypeCollection\"));\n     }\n \n+    /**\n+     * This method tests that given a {@link Field} of type {@link com.dotcms.contenttype.model.field.FileField}\n+     * or {@link com.dotcms.contenttype.model.field.ImageField}, the following GraphQL fields are\n+     * available to query:\n+     *\n+     * {@link FileAssetContentType#FILEASSET_FILE_NAME_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_DESCRIPTION_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_FILEASSET_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_METADATA_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SHOW_ON_MENU_FIELD_VAR}\n+     * {@link FileAssetContentType#FILEASSET_SORT_ORDER_FIELD_VAR}\n+     */\n+\n+    @Test\n+    public void testAvailableGraphQLFieldsOnImageAndFileFields()\n+            throws DotDataException, DotSecurityException {\n+        ContentType contentType = null;\n+        try {\n+            contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field fileField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(FileField.class).nextPersisted();\n+            final Field imageField = new FieldDataGen().contentTypeId(contentType.id())\n+                    .type(ImageField.class).nextPersisted();\n+\n+            APILocator.getGraphqlAPI().invalidateSchema();\n+\n+            final GraphQLSchema schema = APILocator.getGraphqlAPI().getSchema();\n+\n+            final GraphQLFieldDefinition fileFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(fileField.variable());\n+\n+            final GraphQLFieldDefinition imageFieldDefinition = schema\n+                    .getObjectType(contentType.variable())\n+                    .getFieldDefinition(imageField.variable());\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), fileFieldDefinition.getType());\n+\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) fileFieldDefinition.getType()));\n+            assertTrue(areFileassetFieldsPresent((GraphQLObjectType) imageFieldDefinition.getType()));\n+\n+            assertEquals(CustomFieldType.FILEASSET.getType(), imageFieldDefinition.getType());\n+        } finally {\n+            APILocator.getContentTypeAPI(APILocator.systemUser()).delete(contentType);\n+        }\n+    }\n+\n+    private boolean areFileassetFieldsPresent(final GraphQLObjectType objectType) {\n+        List<String> fileAssetFields = list(FILEASSET_FILE_NAME_FIELD_VAR,\n+                FILEASSET_DESCRIPTION_FIELD_VAR, FILEASSET_FILEASSET_FIELD_VAR,\n+                FILEASSET_METADATA_FIELD_VAR, FILEASSET_SHOW_ON_MENU_FIELD_VAR,\n+                FILEASSET_SORT_ORDER_FIELD_VAR);\n+        return objectType.getFieldDefinitions().stream().allMatch((fieldDefinition ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc4OTU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/CustomFieldType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjowMDo0NVrOFr5OfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjowMDo0NVrOFr5OfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDY4NA==", "bodyText": "maybe we can move this logic into a private method, something like:\nMap<String, TypeFetcher> getFileAssetTypeFields(){\n...\n}", "url": "https://github.com/dotCMS/core/pull/18009#discussion_r381570684", "createdAt": "2020-02-19T22:00:45Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/CustomFieldType.java", "diffHunk": "@@ -103,6 +115,17 @@\n         userTypeFields.put(\"lastName\", GraphQLString);\n         userTypeFields.put(\"email\", GraphQLString);\n         customFieldTypes.put(\"USER\", TypeUtil.createObjectType(\"User\", userTypeFields, null));\n+\n+        final Map<String, TypeFetcher> fileAssetTypeFields = new HashMap<>();\n+        fileAssetTypeFields.put(FILEASSET_FILE_NAME_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_DESCRIPTION_FIELD_VAR, new TypeFetcher(GraphQLString, new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_FILEASSET_FIELD_VAR,\n+                new TypeFetcher(CustomFieldType.BINARY.getType(),new BinaryFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_METADATA_FIELD_VAR,\n+                new TypeFetcher(list(CustomFieldType.KEY_VALUE.getType()), new KeyValueFieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SHOW_ON_MENU_FIELD_VAR, new TypeFetcher(list(GraphQLString), new FieldDataFetcher()));\n+        fileAssetTypeFields.put(FILEASSET_SORT_ORDER_FIELD_VAR, new TypeFetcher(GraphQLInt, new FieldDataFetcher()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5e0d212fb9205eb78b703171d42d2492dfcfdc1"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2568, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}