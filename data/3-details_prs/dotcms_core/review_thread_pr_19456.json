{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjk5MzQ1", "number": 19456, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMFrOEvdQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMTo1MDozNVrOFkaOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk3OTY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMFrOHkc9zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMFrOHkc9zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTM1Ng==", "bodyText": "Codacy found an issue: Avoid unused local variables such as 'assets'.", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985356", "createdAt": "2020-10-19T18:48:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "diffHunk": "@@ -56,4 +72,81 @@ public void get_container_structure_from_file_name_() throws Exception {\n         assertEquals(longNamedStrategy.getVelocityVarName(fileAsset), fileName);\n     }\n \n+    /**\n+     * Method to test: {@link FileAssetContainerUtil#fromAssets(Host, Folder, List, boolean, boolean)}\n+     * Given Scenario: Creates a container with a default layout\n+     * ExpectedResult: Expected result that the result should contains the default container layout\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_default_layout() throws Exception {\n+\n+        //Getting the current default host\n+        final String pathRoot             = \"/application/containers/test\"+System.currentTimeMillis();\n+        final Host currentDefaultHost     = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+        final Folder containerFolder      = this.createAppContainerTest(currentDefaultHost, pathRoot);\n+        final String contentTypeVariable  = \"testfa\"+System.currentTimeMillis();\n+        ContentType fileAssetContentType  = ImmutableFileAssetContentType.builder()\n+                .name(\"FileAssetTestContentType\").variable(contentTypeVariable).build();\n+        fileAssetContentType              = APILocator.getContentTypeAPI(APILocator.systemUser()).save(fileAssetContentType);\n+        final List<FileAsset> assets      = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk3OTc1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMVrOHkc91Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMVrOHkc91Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTM2NQ==", "bodyText": "Codacy found an issue: Consider simply returning the value vs storing it in local variable 'rootFolder'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985365", "createdAt": "2020-10-19T18:48:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -116,6 +135,70 @@ public void test_getHost_demo_default_demo() throws Exception {\n         }\n     }\n \n+    /**\n+     * Method to test: {@link FileAssetContainerUtil#fromAssets(Host, Folder, List, boolean, boolean)}\n+     * Given Scenario: Creates a container with a default layout\n+     * ExpectedResult: Expected result that the result should contains the default container layout\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_fromAssets_default_layout() throws Exception {\n+\n+        //Getting the current default host\n+        final Host currentDefaultHost     = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+        final Folder containerFolder      = this.createAppContainerTest(currentDefaultHost);\n+        final String contentTypeVariable  = \"testfa\"+System.currentTimeMillis();\n+        ContentType fileAssetContentType  = ImmutableFileAssetContentType.builder()\n+                .name(\"FileAssetTestContentType\").variable(contentTypeVariable).build();\n+        fileAssetContentType              = contentTypeAPI.save(fileAssetContentType);\n+        final List<FileAsset> assets      = Arrays.asList(\n+                this.createFileAsset(\"container\", \".vtl\",\n+                        \"$dotJSON.put(\\\"title\\\", \\\"Test VTL and Valid and Invalid Content Types\\\")\\n\" +\n+                        \"$dotJSON.put(\\\"max_contentlets\\\", 25)\\n\" +\n+                        \"$dotJSON.put(\\\"useDefaultLayout\\\",\\\"*\\\")\", containerFolder, fileAssetContentType),\n+                this.createFileAsset(\"default_container\", \".vtl\", \"$title\", containerFolder, fileAssetContentType));\n+        final boolean showLive            = false;\n+        final boolean includeHostOnPath   = false;\n+\n+        final Container container = FileAssetContainerUtil.getInstance().fromAssets(currentDefaultHost,\n+                containerFolder, assets, showLive, includeHostOnPath);\n+\n+        Assert.assertNotNull(container);\n+        Assert.assertTrue(container instanceof FileAssetContainer);\n+        Assert.assertEquals(1   , FileAssetContainer.class.cast(container).getContainerStructuresAssets().size());\n+        Assert.assertNotNull(FileAssetContainer.class.cast(container).getDefaultContainerLayoutAsset());\n+        Assert.assertEquals(\"default_container.vtl\",FileAssetContainer.class.cast(container).getDefaultContainerLayoutAsset().getFileName());\n+    }\n+\n+    private FileAsset createFileAsset (final String fileName1,\n+                                       final String fileExtension,\n+                                       final String fileContent,\n+                                       final Folder root1,\n+                                       final ContentType fileAssetContentType) throws Exception {\n+\n+        final FileAsset fileAsset = new FileAsset();\n+        final File tempFile1      = File.createTempFile(fileName1, fileExtension);\n+        FileUtil.write(tempFile1, fileContent);\n+        final String fileNameField1 = fileName1 + fileExtension;\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, fileNameField1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        return APILocator.getFileAssetAPI().fromContentlet(\n+                APILocator.getContentletAPI().checkin(fileAsset, user, false));\n+    }\n+\n+    private Folder createAppContainerTest(final Host currentDefaultHost) throws DotDataException, DotSecurityException {\n \n+        final String pathRoot   = \"/application/containers/test\"+System.currentTimeMillis();\n+        final Folder rootFolder = APILocator.getFolderAPI().createFolders(pathRoot, currentDefaultHost, APILocator.systemUser(), false);\n+        return rootFolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk3OTg0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMlrOHkc94g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxMlrOHkc94g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTM3OA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985378", "createdAt": "2020-10-19T18:48:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "diffHunk": "@@ -56,4 +72,81 @@ public void get_container_structure_from_file_name_() throws Exception {\n         assertEquals(longNamedStrategy.getVelocityVarName(fileAsset), fileName);\n     }\n \n+    /**\n+     * Method to test: {@link FileAssetContainerUtil#fromAssets(Host, Folder, List, boolean, boolean)}\n+     * Given Scenario: Creates a container with a default layout\n+     * ExpectedResult: Expected result that the result should contains the default container layout\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_default_layout() throws Exception {\n+\n+        //Getting the current default host\n+        final String pathRoot             = \"/application/containers/test\"+System.currentTimeMillis();\n+        final Host currentDefaultHost     = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+        final Folder containerFolder      = this.createAppContainerTest(currentDefaultHost, pathRoot);\n+        final String contentTypeVariable  = \"testfa\"+System.currentTimeMillis();\n+        ContentType fileAssetContentType  = ImmutableFileAssetContentType.builder()\n+                .name(\"FileAssetTestContentType\").variable(contentTypeVariable).build();\n+        fileAssetContentType              = APILocator.getContentTypeAPI(APILocator.systemUser()).save(fileAssetContentType);\n+        final List<FileAsset> assets      = Arrays.asList(\n+                this.createFileAsset(\"container\", \".vtl\",\n+                        \"$dotJSON.put(\\\"title\\\", \\\"Test No VTL and All Content Types\\\")\\n\" +\n+                                \"$dotJSON.put(\\\"max_contentlets\\\", 25)\\n\" +\n+                                \"$dotJSON.put(\\\"useDefaultLayout\\\",\\\"*\\\")\", containerFolder, fileAssetContentType),\n+                this.createFileAsset(\"default_container\", \".vtl\", \"$title\", containerFolder, fileAssetContentType));\n+\n+        final ContainerStructureFinderStrategyResolver containerStructureFinderStrategyResolver =\n+                new ContainerStructureFinderStrategyResolver();\n+\n+        final Container container = APILocator.getContainerAPI()\n+                .getWorkingContainerByFolderPath(pathRoot, currentDefaultHost, APILocator.systemUser(), false);\n+        final Optional<ContainerStructureFinderStrategy> containerStructureFinderStrategy =\n+                containerStructureFinderStrategyResolver.get(container);\n+\n+        Assert.assertTrue(containerStructureFinderStrategy.isPresent());\n+\n+        final  List<ContainerStructure> containerStructures = containerStructureFinderStrategy.get().apply(container);\n+\n+        Assert.assertNotNull(containerStructures);\n+        Assert.assertFalse(containerStructures.isEmpty());\n+\n+        final List<ContentType> contentTypes = APILocator.getContentTypeAPI(APILocator.systemUser()).findAll();\n+        for (final ContentType contentType : contentTypes) {\n+\n+            Assert.assertTrue(\"Content Type: \" + contentType.variable() + \" does not included on the container\",\n+                    containerStructures.stream().anyMatch(containerStructure -> containerStructure.getStructureId().equals(contentType.id())));\n+        }\n+    }\n+\n+    private FileAsset createFileAsset (final String fileName1,\n+                                       final String fileExtension,\n+                                       final String fileContent,\n+                                       final Folder root1,\n+                                       final ContentType fileAssetContentType) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk3OTkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/model/FileAssetContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxM1rOHkc97Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxM1rOHkc97Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTM4OQ==", "bodyText": "Codacy found an issue: Avoid using redundant field initializer for 'defaultContainerLayoutAsset'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985389", "createdAt": "2020-10-19T18:48:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/model/FileAssetContainer.java", "diffHunk": "@@ -42,15 +42,28 @@ public FileAssetContainer() {\n     @JsonIgnore\n     private transient FileAsset postLoopAsset = null;\n \n+    @JsonIgnore\n+    private transient FileAsset defaultContainerLayoutAsset = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDAwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNFrOHkc99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNFrOHkc99g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTM5OA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.rendering.velocity.viewtools.content.FileAssetMap'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985398", "createdAt": "2020-10-19T18:48:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -1,14 +1,33 @@\n package com.dotmarketing.portlets.containers.business;\n \n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n import com.dotcms.datagen.ContainerAsFileDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.rendering.velocity.viewtools.content.FileAssetMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNVrOHkc-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNVrOHkc-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQxMQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.datagen.FolderDataGen'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985411", "createdAt": "2020-10-19T18:48:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -1,14 +1,33 @@\n package com.dotmarketing.portlets.containers.business;\n \n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n import com.dotcms.datagen.ContainerAsFileDataGen;\n+import com.dotcms.datagen.FolderDataGen;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDE1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNlrOHkc-Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxNlrOHkc-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQyMw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.portlets.containers.model.FileAssetContainer'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985423", "createdAt": "2020-10-19T18:48:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "diffHunk": "@@ -1,6 +1,18 @@\n package com.dotmarketing.portlets.containers.business;\n \n import static org.junit.Assert.assertEquals;\n+\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n+import com.dotmarketing.beans.ContainerStructure;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.containers.model.FileAssetContainer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOFrOHkc-HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOFrOHkc-HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQzNg==", "bodyText": "Codacy found an issue: Consider simply returning the value vs storing it in local variable 'rootFolder'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985436", "createdAt": "2020-10-19T18:48:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/ContainerStructureFinderStrategyResolverTest.java", "diffHunk": "@@ -56,4 +72,81 @@ public void get_container_structure_from_file_name_() throws Exception {\n         assertEquals(longNamedStrategy.getVelocityVarName(fileAsset), fileName);\n     }\n \n+    /**\n+     * Method to test: {@link FileAssetContainerUtil#fromAssets(Host, Folder, List, boolean, boolean)}\n+     * Given Scenario: Creates a container with a default layout\n+     * ExpectedResult: Expected result that the result should contains the default container layout\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_default_layout() throws Exception {\n+\n+        //Getting the current default host\n+        final String pathRoot             = \"/application/containers/test\"+System.currentTimeMillis();\n+        final Host currentDefaultHost     = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+        final Folder containerFolder      = this.createAppContainerTest(currentDefaultHost, pathRoot);\n+        final String contentTypeVariable  = \"testfa\"+System.currentTimeMillis();\n+        ContentType fileAssetContentType  = ImmutableFileAssetContentType.builder()\n+                .name(\"FileAssetTestContentType\").variable(contentTypeVariable).build();\n+        fileAssetContentType              = APILocator.getContentTypeAPI(APILocator.systemUser()).save(fileAssetContentType);\n+        final List<FileAsset> assets      = Arrays.asList(\n+                this.createFileAsset(\"container\", \".vtl\",\n+                        \"$dotJSON.put(\\\"title\\\", \\\"Test No VTL and All Content Types\\\")\\n\" +\n+                                \"$dotJSON.put(\\\"max_contentlets\\\", 25)\\n\" +\n+                                \"$dotJSON.put(\\\"useDefaultLayout\\\",\\\"*\\\")\", containerFolder, fileAssetContentType),\n+                this.createFileAsset(\"default_container\", \".vtl\", \"$title\", containerFolder, fileAssetContentType));\n+\n+        final ContainerStructureFinderStrategyResolver containerStructureFinderStrategyResolver =\n+                new ContainerStructureFinderStrategyResolver();\n+\n+        final Container container = APILocator.getContainerAPI()\n+                .getWorkingContainerByFolderPath(pathRoot, currentDefaultHost, APILocator.systemUser(), false);\n+        final Optional<ContainerStructureFinderStrategy> containerStructureFinderStrategy =\n+                containerStructureFinderStrategyResolver.get(container);\n+\n+        Assert.assertTrue(containerStructureFinderStrategy.isPresent());\n+\n+        final  List<ContainerStructure> containerStructures = containerStructureFinderStrategy.get().apply(container);\n+\n+        Assert.assertNotNull(containerStructures);\n+        Assert.assertFalse(containerStructures.isEmpty());\n+\n+        final List<ContentType> contentTypes = APILocator.getContentTypeAPI(APILocator.systemUser()).findAll();\n+        for (final ContentType contentType : contentTypes) {\n+\n+            Assert.assertTrue(\"Content Type: \" + contentType.variable() + \" does not included on the container\",\n+                    containerStructures.stream().anyMatch(containerStructure -> containerStructure.getStructureId().equals(contentType.id())));\n+        }\n+    }\n+\n+    private FileAsset createFileAsset (final String fileName1,\n+                                       final String fileExtension,\n+                                       final String fileContent,\n+                                       final Folder root1,\n+                                       final ContentType fileAssetContentType) throws Exception {\n+\n+        final FileAsset fileAsset = new FileAsset();\n+        final File tempFile1      = File.createTempFile(fileName1, fileExtension);\n+        FileUtil.write(tempFile1, fileContent);\n+        final String fileNameField1 = fileName1 + fileExtension;\n+\n+        fileAsset.setContentType(fileAssetContentType);\n+        fileAsset.setFolder(root1.getInode());\n+        fileAsset.setBinary(FileAssetAPI.BINARY_FIELD, tempFile1);\n+        fileAsset.setStringProperty(FileAssetAPI.HOST_FOLDER_FIELD, root1.getInode());\n+        fileAsset.setStringProperty(FileAssetAPI.TITLE_FIELD, fileNameField1);\n+        fileAsset.setStringProperty(FileAssetAPI.FILE_NAME_FIELD, fileNameField1);\n+        fileAsset.setIndexPolicy(IndexPolicy.FORCE);\n+\n+        // Create a piece of content for the default host\n+        return APILocator.getFileAssetAPI().fromContentlet(\n+                APILocator.getContentletAPI().checkin(fileAsset, APILocator.systemUser(), false));\n+    }\n+\n+    private Folder createAppContainerTest(final Host currentDefaultHost, final String pathRoot) throws DotDataException, DotSecurityException {\n+\n+        final Folder rootFolder = APILocator.getFolderAPI().createFolders(pathRoot, currentDefaultHost, APILocator.systemUser(), false);\n+        return rootFolder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDI4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOVrOHkc-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOVrOHkc-Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQ0Mw==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.liferay.portal.model.User'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985443", "createdAt": "2020-10-19T18:48:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -1,14 +1,33 @@\n package com.dotmarketing.portlets.containers.business;\n \n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n import com.dotcms.datagen.ContainerAsFileDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.rendering.velocity.viewtools.content.FileAssetMap;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.ContentletBaseTest;\n+import com.dotmarketing.portlets.containers.model.Container;\n import com.dotmarketing.portlets.containers.model.FileAssetContainer;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOVrOHkc-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoxOVrOHkc-LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQ1Mw==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985453", "createdAt": "2020-10-19T18:48:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -116,6 +135,70 @@ public void test_getHost_demo_default_demo() throws Exception {\n         }\n     }\n \n+    /**\n+     * Method to test: {@link FileAssetContainerUtil#fromAssets(Host, Folder, List, boolean, boolean)}\n+     * Given Scenario: Creates a container with a default layout\n+     * ExpectedResult: Expected result that the result should contains the default container layout\n+     * @throws Exception\n+     */\n+    @Test\n+    public void test_fromAssets_default_layout() throws Exception {\n+\n+        //Getting the current default host\n+        final Host currentDefaultHost     = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+        final Folder containerFolder      = this.createAppContainerTest(currentDefaultHost);\n+        final String contentTypeVariable  = \"testfa\"+System.currentTimeMillis();\n+        ContentType fileAssetContentType  = ImmutableFileAssetContentType.builder()\n+                .name(\"FileAssetTestContentType\").variable(contentTypeVariable).build();\n+        fileAssetContentType              = contentTypeAPI.save(fileAssetContentType);\n+        final List<FileAsset> assets      = Arrays.asList(\n+                this.createFileAsset(\"container\", \".vtl\",\n+                        \"$dotJSON.put(\\\"title\\\", \\\"Test VTL and Valid and Invalid Content Types\\\")\\n\" +\n+                        \"$dotJSON.put(\\\"max_contentlets\\\", 25)\\n\" +\n+                        \"$dotJSON.put(\\\"useDefaultLayout\\\",\\\"*\\\")\", containerFolder, fileAssetContentType),\n+                this.createFileAsset(\"default_container\", \".vtl\", \"$title\", containerFolder, fileAssetContentType));\n+        final boolean showLive            = false;\n+        final boolean includeHostOnPath   = false;\n+\n+        final Container container = FileAssetContainerUtil.getInstance().fromAssets(currentDefaultHost,\n+                containerFolder, assets, showLive, includeHostOnPath);\n+\n+        Assert.assertNotNull(container);\n+        Assert.assertTrue(container instanceof FileAssetContainer);\n+        Assert.assertEquals(1   , FileAssetContainer.class.cast(container).getContainerStructuresAssets().size());\n+        Assert.assertNotNull(FileAssetContainer.class.cast(container).getDefaultContainerLayoutAsset());\n+        Assert.assertEquals(\"default_container.vtl\",FileAssetContainer.class.cast(container).getDefaultContainerLayoutAsset().getFileName());\n+    }\n+\n+    private FileAsset createFileAsset (final String fileName1,\n+                                       final String fileExtension,\n+                                       final String fileContent,\n+                                       final Folder root1,\n+                                       final ContentType fileAssetContentType) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDQyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoyMFrOHkc-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoyMFrOHkc-OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQ2NQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.io.IOException'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985465", "createdAt": "2020-10-19T18:48:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -1,14 +1,33 @@\n package com.dotmarketing.portlets.containers.business;\n \n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n import com.dotcms.datagen.ContainerAsFileDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.rendering.velocity.viewtools.content.FileAssetMap;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.ContentletBaseTest;\n+import com.dotmarketing.portlets.containers.model.Container;\n import com.dotmarketing.portlets.containers.model.FileAssetContainer;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTk4MDUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoyMVrOHkc-Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODo0ODoyMVrOHkc-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk4NTQ3NA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'java.util.Map'", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r507985474", "createdAt": "2020-10-19T18:48:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtilTest.java", "diffHunk": "@@ -1,14 +1,33 @@\n package com.dotmarketing.portlets.containers.business;\n \n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.contenttype.model.type.ImmutableFileAssetContentType;\n import com.dotcms.datagen.ContainerAsFileDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.rendering.velocity.viewtools.content.FileAssetMap;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.ContentletBaseTest;\n+import com.dotmarketing.portlets.containers.model.Container;\n import com.dotmarketing.portlets.containers.model.FileAssetContainer;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.fileassets.business.FileAsset;\n+import com.dotmarketing.portlets.fileassets.business.FileAssetAPI;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116cf22bed9da6f8f2213f0d70b57ca441b1c555"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzczNzIyNzQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeCache2Impl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMTo1MDozNVrOI0elgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMTo1MDozNVrOI0elgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTg5Nzk4NA==", "bodyText": "here are you flushing all the cache?", "url": "https://github.com/dotCMS/core/pull/19456#discussion_r591897984", "createdAt": "2021-03-10T21:50:35Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/ContentTypeCache2Impl.java", "diffHunk": "@@ -103,4 +104,9 @@ public ContentType byVarOrInode(String varOrInode) {\n     \t}\n \n \t}\n+\n+    public void clearContainerStructures() {\n+\n+        cache.flushGroup(containerStructureGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec4a88401010f9702504c8cb6f58d1e6ecdd953"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1773, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}