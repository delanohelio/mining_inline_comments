{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMTQyMTkz", "number": 19017, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoxOVrOEW_b2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MlrOEW_cVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDQ4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoxOVrOG-idsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoxOVrOG-idsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU1Mw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229553", "createdAt": "2020-08-10T22:54:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {\n+\n+\n+ \n+        String value =Config.getStringProperty(\"no-property\", TESTING_VALUE);\n+        assert(value.equals(TESTING_VALUE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMFrOG-idtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMFrOG-idtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU1OQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229559", "createdAt": "2020-08-10T22:54:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMVrOG-idvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMVrOG-idvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU2NQ==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229565", "createdAt": "2020-08-10T22:54:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {\n+\n+\n+ \n+        String value =Config.getStringProperty(\"no-property\", TESTING_VALUE);\n+        assert(value.equals(TESTING_VALUE));\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringProperty(\"testing.integer\", TESTING_VALUE);\n+        assert(value.equals(String.valueOf(Integer.MAX_VALUE)));\n+        \n+        // we should get back VALUE_ABC\n+        value =Config.getStringProperty(\"testing.string\",\"VALUE_ABC\");\n+\n+    }\n+    \n+    @Test\n+    public void test_get_string_array_from_env() {\n+\n+\n+ \n+        String[] value =Config.getStringArrayProperty(\"no-property\", TESTING_ARRAY);\n+        assertArrayEquals(value, TESTING_ARRAY);\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringArrayProperty(\"testing_string_with_comma\");\n+        assert(value.length==2);\n+        assert(value[1].equals(\"VALUE2\"));\n+        \n+        String notArray  =Config.getStringProperty(\"testing_string_with_comma\");\n+        assertEquals(notArray, \"VALUE1,VALUE2\");\n+    }\n+    \n+    \n+    /*\n+     * \n+     * Restore default variables for each test\n+     */\n+    @AfterClass\n+    public static void resetMap() {\n+        envMap.clear();\n+        envMap.putAll(DEFAULTS);\n+    }\n+    \n+    \n+\n+    \n+    \n+    \n+    @BeforeClass\n+    public static void accessFields() throws Exception {\n+\n+        envMap.putAll(DEFAULTS);\n+        Class<?> clazz = Class.forName(\"java.lang.ProcessEnvironment\");\n+        //Field theCaseInsensitiveEnvironmentField = clazz.getDeclaredField(\"theCaseInsensitiveEnvironment\");\n+        Field theUnmodifiableEnvironmentField = clazz.getDeclaredField(\"theUnmodifiableEnvironment\");\n+        //removeStaticFinalAndSetValue(theCaseInsensitiveEnvironmentField, envMap);\n+        removeStaticFinalAndSetValue(theUnmodifiableEnvironmentField, envMap);\n+        setTestEnvVariables();\n+    }\n+\n+    private static void removeStaticFinalAndSetValue(Field field, Object value) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDYxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMlrOG-idwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyMlrOG-idwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU3MA==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229570", "createdAt": "2020-08-10T22:54:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyM1rOG-idyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyM1rOG-idyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU3Ng==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229576", "createdAt": "2020-08-10T22:54:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNFrOG-idzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNFrOG-idzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU4MQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229581", "createdAt": "2020-08-10T22:54:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNVrOG-id0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNVrOG-id0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU4Nw==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229587", "createdAt": "2020-08-10T22:54:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDc4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNlrOG-id2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNlrOG-id2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU5NA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229594", "createdAt": "2020-08-10T22:54:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyN1rOG-id3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyN1rOG-id3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU5OA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229598", "createdAt": "2020-08-10T22:54:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyOVrOG-id6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyOVrOG-id6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYxMA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229610", "createdAt": "2020-08-10T22:54:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMFrOG-id7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMFrOG-id7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYxNA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229614", "createdAt": "2020-08-10T22:54:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {\n+\n+\n+ \n+        String value =Config.getStringProperty(\"no-property\", TESTING_VALUE);\n+        assert(value.equals(TESTING_VALUE));\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringProperty(\"testing.integer\", TESTING_VALUE);\n+        assert(value.equals(String.valueOf(Integer.MAX_VALUE)));\n+        \n+        // we should get back VALUE_ABC\n+        value =Config.getStringProperty(\"testing.string\",\"VALUE_ABC\");\n+\n+    }\n+    \n+    @Test\n+    public void test_get_string_array_from_env() {\n+\n+\n+ \n+        String[] value =Config.getStringArrayProperty(\"no-property\", TESTING_ARRAY);\n+        assertArrayEquals(value, TESTING_ARRAY);\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringArrayProperty(\"testing_string_with_comma\");\n+        assert(value.length==2);\n+        assert(value[1].equals(\"VALUE2\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMFrOG-id-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMFrOG-id-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYyNA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229624", "createdAt": "2020-08-10T22:54:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTA1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMVrOG-id_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMVrOG-id_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYyOA==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229628", "createdAt": "2020-08-10T22:54:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMlrOG-ieAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozMlrOG-ieAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYzMg==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229632", "createdAt": "2020-08-10T22:54:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozM1rOG-ieBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozM1rOG-ieBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTYzNw==", "bodyText": "Codacy found an issue: An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229637", "createdAt": "2020-08-10T22:54:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNFrOG-ieCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNFrOG-ieCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY0Mw==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229643", "createdAt": "2020-08-10T22:54:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNVrOG-ieFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNVrOG-ieFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY1Mw==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229653", "createdAt": "2020-08-10T22:54:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {\n+\n+\n+ \n+        String value =Config.getStringProperty(\"no-property\", TESTING_VALUE);\n+        assert(value.equals(TESTING_VALUE));\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringProperty(\"testing.integer\", TESTING_VALUE);\n+        assert(value.equals(String.valueOf(Integer.MAX_VALUE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTMwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNlrOG-ieHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozNlrOG-ieHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY2MA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229660", "createdAt": "2020-08-10T22:54:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {\n+\n+\n+ \n+        String value =Config.getStringProperty(\"no-property\", TESTING_VALUE);\n+        assert(value.equals(TESTING_VALUE));\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringProperty(\"testing.integer\", TESTING_VALUE);\n+        assert(value.equals(String.valueOf(Integer.MAX_VALUE)));\n+        \n+        // we should get back VALUE_ABC\n+        value =Config.getStringProperty(\"testing.string\",\"VALUE_ABC\");\n+\n+    }\n+    \n+    @Test\n+    public void test_get_string_array_from_env() {\n+\n+\n+ \n+        String[] value =Config.getStringArrayProperty(\"no-property\", TESTING_ARRAY);\n+        assertArrayEquals(value, TESTING_ARRAY);\n+        \n+        // this should  work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getStringArrayProperty(\"testing_string_with_comma\");\n+        assert(value.length==2);\n+        assert(value[1].equals(\"VALUE2\"));\n+        \n+        String notArray  =Config.getStringProperty(\"testing_string_with_comma\");\n+        assertEquals(notArray, \"VALUE1,VALUE2\");\n+    }\n+    \n+    \n+    /*\n+     * \n+     * Restore default variables for each test\n+     */\n+    @AfterClass\n+    public static void resetMap() {\n+        envMap.clear();\n+        envMap.putAll(DEFAULTS);\n+    }\n+    \n+    \n+\n+    \n+    \n+    \n+    @BeforeClass\n+    public static void accessFields() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozN1rOG-ieIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozN1rOG-ieIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY2NQ==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229665", "createdAt": "2020-08-10T22:54:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTM5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOFrOG-ieKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOFrOG-ieKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY3NA==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229674", "createdAt": "2020-08-10T22:54:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTQ2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOFrOG-ieMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOFrOG-ieMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY4Mg==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229682", "createdAt": "2020-08-10T22:54:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTQ5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOVrOG-ieNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDozOVrOG-ieNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY4Ng==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229686", "createdAt": "2020-08-10T22:54:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MFrOG-ieQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MFrOG-ieQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTY5Nw==", "bodyText": "Codacy found an issue: Consider using varargs for methods or constructors which take an array the last parameter.", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229697", "createdAt": "2020-08-10T22:54:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/Config.java", "diffHunk": "@@ -473,31 +415,44 @@ public static String getStringProperty (String name) {\n \t\treturn entities;\n \t}\n \n-\t/**\n-\t * If config value == null, returns the default\n-\t * @param name\n-\t * @param defaultValue\n-\t * @return\n-\t */\n-  public static String[] getStringArrayProperty (String name, String[] defaultValue) {\n-      _refreshProperties ();\n-      \n-      return props.containsKey(name) ? props.getStringArray(name) : defaultValue;\n-  }\n+    /**\n+     * If config value == null, returns the default\n+     * \n+     * @param name\n+     * @param defaultValue\n+     * @return\n+     */\n+    public static String[] getStringArrayProperty(final String name, final String[] defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTY0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/Config.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MVrOG-ieSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MVrOG-ieSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTcwNw==", "bodyText": "Codacy found an issue: Consider simply returning the value vs storing it in local variable 'value'", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229707", "createdAt": "2020-08-10T22:54:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/Config.java", "diffHunk": "@@ -298,137 +298,80 @@ private static void _refreshProperties () {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param name\n-\t * @param defValue\n-\t * @return\n-\t */\n-\tpublic static String getStringProperty(String name, String defValue) {\n-\t\treturn getStringProperty(name, defValue, true);\n-\t}\n \n+\tprivate final static String ENV_PREFIX=\"DOT_\";\n+\t\n+    private static void readEnvironmentVariables() {\n+        \n+        \n+        System.getenv().entrySet().stream().filter(e->e.getKey().startsWith(ENV_PREFIX)).forEach(e->\n+            props.addProperty(e.getKey(), e.getValue())\n+        );\n+        \n+\n+\n+    }\n+\t\n+\t\n+\tprivate static String envKey(final String theKey) {\n+\n+        String envKey = ENV_PREFIX + theKey.toUpperCase().replace(\".\", \"_\");\n+        while (envKey.contains(\"__\")) {\n+            envKey = envKey.replace(\"__\", \"_\");\n+        }\n+        return envKey.endsWith(\"_\") ? envKey.substring(0, envKey.length() - 1) : envKey;\n+\n+\t}\n+\t\n \t/**\n \t * Returns a string property\n \t *\n \t * @param name     The name of the property to locate.\n \t * @param defValue Value to return if property is not found.\n-\t * @param forceDefaultToString If the provided default value should be returned as a string, even when null (marshals literal null to \"null\").\n \t * @return The value of the property.  If property is found more than once, all the occurrences will be concatenated (with a comma separating each\n \t * element).\n \t */\n-\tpublic static String getStringProperty(String name, String defValue, boolean forceDefaultToString) {\n-\t\t_refreshProperties();\n-\t\tString result = defValue;\n-\n-\t\tif(props != null) {\n-\t\t\tString[] propsArr = props.getStringArray(name);\n-\t\t\tStringBuilder property = new StringBuilder();\n+\tpublic static String getStringProperty(final String name, final String defValue) {\n \n-\t\t\tif(propsArr != null && propsArr.length > 0) {\n-\t\t\t\tbuildProperty(propsArr, property);\n-\t\t\t\tresult = property.toString();\n-\t\t\t} else if(forceDefaultToString) {\n-\t\t\t\tresult = String.valueOf(defValue);\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// default is not forced to string here for historical reasons. Presumably props is never actually null.\n-\t\t\tresult = defValue;\n-\t\t}\n-\t\treturn result;\n-\t}\n+\t    final String[] propsArr = getStringArrayProperty(name,  defValue==null ? null : new String[] {defValue});\n \n-\t/**\n-\t * Returns a string property. The {@link Supplier} is useful when you want\n-\t * lazy evaluation for the default value. This means that figuring out the\n-\t * value of the supplier will not happen until the logic determines that the\n-\t * property specified by the {@code name} parameter does not map to a value\n-\t * in the properties files.\n-\t *\n-\t * @param name\n-\t *            - The name of the property to read.\n-\t * @param defValue\n-\t *            - The default value as a {@link Supplier}, in case the\n-\t *            property is not defined.\n-\t * @return The value of the specified property, or its default value.\n-\t */\n-\tpublic static String getAsString(String name, Supplier<String> defValue) {\n-\t\treturn getAsString(name, defValue, true);\n+\t\tif (propsArr == null || propsArr.length == 0) {\n+\t\t    return defValue;\n+\t\t} \n+\t\t\n+\t\treturn String.join(\",\", propsArr);\n+\t\t\n \t}\n \n \t/**\n-\t * Returns a string property. The {@link Supplier} is useful when you want\n-\t * lazy evaluation for the default value. This means that figuring out the\n-\t * value of the supplier will not happen until the logic determines that the\n-\t * property specified by the {@code name} parameter does not map to a value\n-\t * in the properties files.\n-\t *\n+\t * this is only here so the old tests pass\n+\t * \n \t * @param name\n-\t *            - The name of the property to read.\n \t * @param defValue\n-\t *            - The default value as a {@link Supplier}, in case the\n-\t *            property is not defined.\n-\t * @param forceDefaultToString\n-\t *            - If the default value is to be returned when the property is\n-\t *            not defined in the configuration files, set to {@code true}.\n-\t *            Otherwise, set to {@code false}.\n-\t * @return The value of the specified property, or its default value.\n-\t */\n-\tpublic static String getAsString(String name, Supplier<String> defValue, boolean forceDefaultToString) {\n-\t\t_refreshProperties();\n-\t\tString result = StringUtils.EMPTY;\n-\t\tif (props != null) {\n-\t\t\tString[] propsArr = props.getStringArray(name);\n-\t\t\tStringBuilder property = new StringBuilder();\n-\t\t\tif (propsArr != null && propsArr.length > 0) {\n-\t\t\t\tbuildProperty(propsArr, property);\n-\t\t\t\tresult = property.toString();\n-\t\t\t} else if (forceDefaultToString) {\n-\t\t\t\tresult = (defValue != null) ? defValue.get() : \"\";\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// Default is not forced to string here for historical reasons.\n-\t\t\t// Presumably props are never actually null.\n-\t\t\tresult = (defValue != null) ? defValue.get() : \"\";\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\t/**\n-\t * \n-\t * @param propsArr\n-\t * @param property\n+\t * @param thing\n+\t * @return\n \t */\n-\tprivate static void buildProperty(String[] propsArr, StringBuilder property) {\n+\t@VisibleForTesting\n+\t@Deprecated\n+    public static String getStringProperty(final String name, final String defValue, boolean thing) {\n \n-\t\tint i = 0;\n+        return getStringProperty(name, defValue);\n+        \n+    }\n \n-\t\tfor (String propItem : propsArr) {\n-            if(i > 0) {\n-                property.append(\",\");\n-            }\n-            property.append(propItem);\n-            i++;\n-        }\n-\t}\n+\t\n+\t\n+\t\n \n \t/**\n \t * @deprecated  Use getStringProperty(String name, String default) and\n \t * set an intelligent default\n \t */\n \t@Deprecated\n     public static String getStringProperty (String name) {\n-        _refreshProperties ();\n-        String[] propsArr = props.getStringArray(name);\n-        String property = new String ();\n-        int i = 0;\n-        for (String propItem : propsArr) {\n-            if (i > 0)\n-                property += \",\";\n-            property += propItem;\n-            i++;\n-        }\n-        return property;\n+        String value = getStringProperty(name, null);\n+\n+        return value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MlrOG-ieVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0MlrOG-ieVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTcxOA==", "bodyText": "Codacy found an issue: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/19017#discussion_r468229718", "createdAt": "2020-08-10T22:54:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/ConfigTest.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ConfigTest {\n+\n+    \n+    private static final Map<String, String> DEFAULTS = new HashMap<>(System.getenv());\n+    private static final Map<String, String> envMap = new HashMap<>();\n+\n+    final static String DOT_TESTING_INTEGER=\"DOT_TESTING_INTEGER\";\n+    final static String XXX_TESTING_INTEGER = \"XXX_TESTING_INTEGER\";\n+    final static String DOT_TESTING_LONG= \"DOT_TESTING_LONG\";\n+    final static String DOT_TESTING_BOOLEAN =\"DOT_TESTING_BOOLEAN\";\n+    final static String DOT_TESTING_FLOAT =\"DOT_TESTING_FLOAT\";\n+    \n+    final static String SIMPLE_TESTING_STRING = \"SIMPLE_TESTING_STRING\";\n+    final static String TESTING_VALUE = \"TESTING_VALUE\";\n+    final static String[] TESTING_ARRAY = new String[]{\"TESTING_VALUE\"};\n+    final static String NO_VALUE = \"NO_VALUE\";\n+    final static String DOT_TESTING_STRING_WITH_COMMA =\"DOT_TESTING_STRING_WITH_COMMA\";\n+    final static String DOT_TESTING_STRING_WITH_SPACES =\"DOT_TESTING_STRING_WITH_SPACES\";\n+    final static String DOT_TESTING_STRING =\"DOT_TESTING_STRING\";\n+    final static String UNABLE_TO_READ_VAR=\"UNABLE_TO_READ_VAR\";\n+    \n+    \n+    \n+    /**\n+     * This method sets environmental variables that are intended for testing.\n+     * \n+     */\n+    private static void setTestEnvVariables() {\n+        \n+        System.getenv().put(DOT_TESTING_INTEGER, String.valueOf(Integer.MAX_VALUE));\n+        System.getenv().put(XXX_TESTING_INTEGER, String.valueOf(Integer.MIN_VALUE));\n+        System.getenv().put(DOT_TESTING_LONG, String.valueOf(Long.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_BOOLEAN, String.valueOf(Boolean.TRUE));\n+        System.getenv().put(DOT_TESTING_FLOAT, String.valueOf(Float.MAX_VALUE));\n+        System.getenv().put(DOT_TESTING_STRING_WITH_COMMA, \"VALUE1,VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING_WITH_SPACES, \"VALUE1 VALUE2\");\n+        System.getenv().put(DOT_TESTING_STRING, \"VALUE_ABC\");\n+        System.getenv().put(UNABLE_TO_READ_VAR, \"NOPE\");\n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_string_with_comma() {\n+\n+        String value = Config.getStringProperty(\"TESTING_STRING_WITH_COMMA\");\n+        assert(value.equals(Config.getStringProperty(\"testing.String.with_comma\")));\n+\n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void testing_null_returns() {\n+\n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, null);\n+        assertNull(test);\n+\n+        \n+    }\n+    \n+    \n+    @Test\n+    public void testing_default_returns() {\n+\n+        \n+        String test = Config.getStringProperty(SIMPLE_TESTING_STRING, TESTING_VALUE);\n+        assertEquals(test, TESTING_VALUE);\n+\n+        \n+    }\n+    \n+    @Test\n+    public void testing_notfound_string_returns() {\n+\n+\n+        assert(Config.getStringProperty(\"no-property\") ==null);\n+  \n+\n+\n+        \n+    }\n+\n+\n+    \n+    @Test\n+    public void testing_notfound_int_returns() {\n+\n+        try {\n+            Config.getIntProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+\n+    @Test\n+    public void testing_notfound_float_returns() {\n+\n+        try {\n+            Config.getFloatProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+\n+    @Test\n+    public void testing_notfound_booean_returns() {\n+\n+        try {\n+            Config.getBooleanProperty(\"no-property\");\n+            assert(false);\n+        }\n+        catch(Exception e) {\n+            assert(e instanceof NoSuchElementException);\n+            \n+        }\n+ \n+        \n+    }\n+    \n+    \n+    \n+    @Test\n+    public void test_get_integer_from_env() {\n+\n+\n+        int value =Config.getIntProperty(\"no-property\", -99);\n+        assert(value==-99);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getIntProperty(XXX_TESTING_INTEGER, -99);\n+        assert(value==-99);\n+        \n+        // we should get back Integer.MAX_VALUE, as this get transformed into DOT_TESTING_INTEGER\n+        value =Config.getIntProperty(\"testing.integer\", -99);\n+        assert(value==Integer.MAX_VALUE);\n+    }\n+\n+    @Test\n+    public void test_get_float_from_env() {\n+\n+\n+        float value =Config.getFloatProperty(\"no-property\", 3.14f);\n+        assert(value==3.14f);\n+        \n+        // this should not work, as we prefix DOT_ to the env variable lookup\n+        value =Config.getFloatProperty(XXX_TESTING_INTEGER, 3.14f);\n+        assert(value==3.14f);\n+        \n+        // we should get back Integer.MAX_VALUE, not the default\n+        value =Config.getFloatProperty(\"testing_float\",-1f);\n+        assert(value==Float.MAX_VALUE);\n+    }\n+\n+    \n+    @Test\n+    public void test_get_string_from_env() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60e00ad8d0692221875a7accdd55b1200d4fb93c"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1950, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}