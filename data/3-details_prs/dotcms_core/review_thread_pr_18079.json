{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjAwOTE0", "number": 18079, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxNVrODka_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozMToxM1rODkxGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3Njg4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxNVrOFwvHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxNVrOFwvHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg2NA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.mock.request.BaseRequest'", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647864", "createdAt": "2020-03-02T21:02:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3Njk4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxNlrOFwvHRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxNlrOFwvHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg3Ng==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647876", "createdAt": "2020-03-02T21:02:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzA0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxN1rOFwvHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxN1rOFwvHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg4Ng==", "bodyText": "Issue found: Avoid unused private fields such as 'testUser'.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647886", "createdAt": "2020-03-02T21:02:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxOFrOFwvHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoxOFrOFwvHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzg5OA==", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647898", "createdAt": "2020-03-02T21:02:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMFrOFwvHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMFrOFwvHYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkwNQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647905", "createdAt": "2020-03-02T21:02:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzI2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMVrOFwvHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMVrOFwvHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkxNg==", "bodyText": "Issue found: Local variable 'user' could be declared final", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647916", "createdAt": "2020-03-02T21:02:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+    \r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public boolean isLoggedToBackend(HttpServletRequest request) {\r\n+        return PortalUtil.getUser(request) != null && PortalUtil.getUser(request).isBackendUser();\r\n     }\r\n     \r\n-\t@Override\r\n-\tpublic User getLoggedInUser(HttpServletRequest request) {\r\n-\t\tUser user = PortalUtil.getUser(request);\r\n-\t\treturn (user == null)?\r\n-\t\t\t\t//Assuming is a front-end access\r\n-\t\t\t\tthis.getLoggedInUser(request.getSession(false)):user;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic User getLoggedInUser(final HttpSession session) {\r\n-\r\n-\t\treturn  PortalUtil.getUser(session);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean isLoggedToBackend(HttpServletRequest request) {\r\n-\t\treturn PortalUtil.getUser(request) != null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic User getLoggedInFrontendUser(HttpServletRequest request)  {\r\n-\t\tHttpSession session = request.getSession(false);\r\n-\t\tif(session != null)\r\n-\t\t\treturn (User) session.getAttribute(WebKeys.CMS_USER);\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic boolean isLoggedToFrontend(HttpServletRequest req)  {\r\n-\t\treturn !isLoggedToBackend(req);\r\n-\t}\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInFrontendUser(HttpServletRequest request) {\r\n+        User user = getLoggedInUser(request);\r\n+\r\n+        return user != null && PortalUtil.getUser(request).isFrontendUser() ? user : null;\r\n+    }\r\n+    \r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public boolean isLoggedToFrontend(HttpServletRequest request) {\r\n+        User user = getLoggedInUser(request);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMlrOFwvHdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyMlrOFwvHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkyNA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647924", "createdAt": "2020-03-02T21:02:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyM1rOFwvHgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyM1rOFwvHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NzkzOA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647938", "createdAt": "2020-03-02T21:02:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzQ2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNFrOFwvHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNFrOFwvHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk0Ng==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647946", "createdAt": "2020-03-02T21:02:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNVrOFwvHkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNVrOFwvHkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk1NA==", "bodyText": "Issue found: Avoid unused private fields such as 'systemUser'.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647954", "createdAt": "2020-03-02T21:02:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNlrOFwvHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyNlrOFwvHnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk2Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647967", "createdAt": "2020-03-02T21:02:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyN1rOFwvHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyN1rOFwvHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk3Nw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647977", "createdAt": "2020-03-02T21:02:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);\n+        assert (userWebAPI.isLoggedToFrontend(frontEndRequest()) == true);\n+\n+        assert (userWebAPI.isLoggedToFrontend(anonymousRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3Nzc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyOFrOFwvHtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjoyOFrOFwvHtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0Nzk4OQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386647989", "createdAt": "2020-03-02T21:02:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {\n+\n+        HttpServletRequest request = frontEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+    }\n+\n+\n+\n+    /**\n+     * Back end users can have their page mode set to EDIT MODE\n+     */\n+    @Test\n+    public void test_back_end_user_can_be_set_to_EDIT() {\n+\n+        HttpServletRequest request = backEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.EDIT_MODE);\n+\n+    }\n+\n+    /**\n+     * getting and setting a PAGE MODE does not create a session\n+     */\n+    @Test\n+    public void test_page_mode_does_not_create_session() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzgzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMFrOFwvHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMFrOFwvHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAwMA==", "bodyText": "Issue found: Local variable 'user' could be declared final", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648000", "createdAt": "2020-03-02T21:02:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3Nzg4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMVrOFwvHxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMVrOFwvHxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAwNw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648007", "createdAt": "2020-03-02T21:02:31Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3NzkwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMlrOFwvHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozMlrOFwvHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAxMg==", "bodyText": "Issue found: Avoid unused private fields such as 'userAPI'.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648012", "createdAt": "2020-03-02T21:02:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3Nzk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozM1rOFwvH1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozM1rOFwvH1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAyMQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648021", "createdAt": "2020-03-02T21:02:33Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNFrOFwvH3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNFrOFwvH3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAzMQ==", "bodyText": "Issue found: Local variable 'request' could be declared final", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648031", "createdAt": "2020-03-02T21:02:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/util/PageModeTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.dotmarketing.util;\n+\n+import static org.junit.Assert.*;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.BaseRequest;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class PageModeTest {\n+\n+    private static User systemUser;\n+    private static User testUser;\n+    private static UserAPI userAPI;\n+    private static User frontEndUser, backEndUser;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userAPI = APILocator.getUserAPI();\n+\n+    }\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    /**\n+     * Front end users can never have any page mode other than LIVE, even when you try to set it\n+     * explictily\n+     */\n+\n+    @Test\n+    public void test_front_end_user_is_only_LIVE() {\n+\n+        HttpServletRequest request = frontEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+    }\n+\n+\n+\n+    /**\n+     * Back end users can have their page mode set to EDIT MODE\n+     */\n+    @Test\n+    public void test_back_end_user_can_be_set_to_EDIT() {\n+\n+        HttpServletRequest request = backEndRequest();\n+\n+        assert (PageMode.get(request) == PageMode.LIVE);\n+\n+        PageMode.setPageMode(request, PageMode.EDIT_MODE);\n+\n+        assert (PageMode.get(request) == PageMode.EDIT_MODE);\n+\n+    }\n+\n+    /**\n+     * getting and setting a PAGE MODE does not create a session\n+     */\n+    @Test\n+    public void test_page_mode_does_not_create_session() {\n+\n+        HttpServletRequest request = backEndRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODA2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNVrOFwvH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNVrOFwvH5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODAzOA==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648038", "createdAt": "2020-03-02T21:02:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODEwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNlrOFwvH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozNlrOFwvH6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA0Mw==", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648043", "createdAt": "2020-03-02T21:02:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozN1rOFwvH7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozN1rOFwvH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA0Nw==", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648047", "createdAt": "2020-03-02T21:02:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozOFrOFwvH-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjozOFrOFwvH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA1OQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648059", "createdAt": "2020-03-02T21:02:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MFrOFwvIBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MFrOFwvIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA3MQ==", "bodyText": "Issue found: Avoid unnecessary comparisons in boolean expressions", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648071", "createdAt": "2020-03-02T21:02:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToFrontend() {\n+\n+        assert (userWebAPI.isLoggedToFrontend(backEndRequest()) == false);\n+        assert (userWebAPI.isLoggedToFrontend(frontEndRequest()) == true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODQ0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/util/PageMode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MVrOFwvIGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MVrOFwvIGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA4OA==", "bodyText": "Issue found: Local variable 'sessionPageMode' could be declared final", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648088", "createdAt": "2020-03-02T21:02:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/util/PageMode.java", "diffHunk": "@@ -166,9 +177,15 @@ private static PageMode getCurrentPageMode(final HttpSession ses) {\n     }\n \n     private static boolean isNavigateEditMode(final HttpSession ses) {\n-        PageMode sessionPageMode = (PageMode) ses.getAttribute(WebKeys.PAGE_MODE_SESSION);\n+        PageMode sessionPageMode = ses==null ? DEFAULT_PAGE_MODE : (PageMode) ses.getAttribute(WebKeys.PAGE_MODE_SESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTE3ODUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MlrOFwvIHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowMjo0MlrOFwvIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0ODA5NQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r386648095", "createdAt": "2020-03-02T21:02:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/web/UserWebAPIImpl.java", "diffHunk": "@@ -16,55 +13,65 @@\n  */\r\n public class UserWebAPIImpl extends UserAPIImpl implements UserWebAPI {\r\n \r\n-\tpublic UserWebAPIImpl() {\r\n-\t\t\r\n-\t}\r\n+    public UserWebAPIImpl() {\r\n+\r\n+    }\r\n+\r\n \r\n-\t@CloseDBIfOpened\r\n+\r\n+    @CloseDBIfOpened\r\n     @Override\r\n     public User getUser(HttpServletRequest request) {\r\n-      try{\r\n-        User user = this.getLoggedInUser(request);\r\n-        if(user==null){\r\n-          user =  APILocator.getUserAPI().getAnonymousUser();\r\n+\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        if (user == null) {\r\n+            user = APILocator.getUserAPI().getAnonymousUserNoThrow();\r\n         }\r\n         return user;\r\n-      }catch(Exception e){\r\n-        throw new DotStateException(e);\r\n-      }\r\n+\r\n+    }\r\n+\r\n+\r\n+    @CloseDBIfOpened\r\n+    @Override\r\n+    public User getLoggedInUser(HttpServletRequest request) {\r\n+        User user = PortalUtil.getUser(request);\r\n+\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r\n+                        ? user\r\n+                        : null;\r\n+    }\r\n+\r\n+    @Deprecated\r\n+    @Override\r\n+    public User getLoggedInUser(final HttpSession session) {\r\n+        User user = PortalUtil.getUser(session);\r\n+        return (user != null && !user.isAnonymousUser() && user.isActive() && (user.isBackendUser() || user.isFrontendUser()))\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc5NzEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozMToxM1rOFxRiuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozMToxM1rOFxRiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTk2Mw==", "bodyText": "Looks like a wrong javadoc here", "url": "https://github.com/dotCMS/core/pull/18079#discussion_r387211963", "createdAt": "2020-03-03T18:31:13Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/business/web/UserWebAPIImplTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.dotmarketing.business.web;\n+\n+import static org.junit.Assert.assertTrue;\n+import javax.servlet.http.HttpServletRequest;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import com.dotcms.datagen.UserDataGen;\n+import com.dotcms.mock.request.MockAttributeRequest;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.liferay.portal.model.User;\n+import com.liferay.portal.util.WebKeys;\n+\n+public class UserWebAPIImplTest {\n+\n+\n+    private static User frontEndUser, backEndUser;\n+\n+\n+    private static UserWebAPIImpl userWebAPI;\n+\n+\n+    private HttpServletRequest anonymousRequest() {\n+        return new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/api/testing-web-resorce\").request()).request();\n+    }\n+\n+    private HttpServletRequest frontEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"frontEndUser has frontEnd role\", frontEndUser.isFrontendUser());\n+        request.setAttribute(WebKeys.USER, frontEndUser);\n+        return request;\n+    }\n+\n+    private HttpServletRequest backEndRequest() {\n+        final HttpServletRequest request = anonymousRequest();\n+        assertTrue(\"backEndUser has backend role\", backEndUser.isBackendUser());\n+        request.setAttribute(WebKeys.USER, backEndUser);\n+        return request;\n+    }\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+\n+        frontEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadFrontEndUserRole()).nextPersisted();\n+\n+        backEndUser = new UserDataGen().roles(APILocator.getRoleAPI().loadBackEndUserRole()).nextPersisted();\n+\n+\n+        userWebAPI = new UserWebAPIImpl();\n+\n+    }\n+\n+\n+\n+    /**\n+     * Validates that only front end users can be returned from the call to\n+     * userWebAPI.getLoggedInFrontendUser.\n+     */\n+    @Test\n+    public void test_getLoggedInFrontendUser() {\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInFrontendUser(backEndRequest()) == null);\n+\n+        assert (userWebAPI.getLoggedInFrontendUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getLoggedInUser returns any user that is logged into the dotCMS front end or back\n+     * end\n+     * \n+     */\n+    @Test\n+    public void test_getLoggedInUser() {\n+\n+        assert (userWebAPI.getLoggedInUser(frontEndRequest()).equals(frontEndUser));\n+        assert (userWebAPI.getLoggedInUser(backEndRequest()).equals(backEndUser));\n+\n+\n+        assert (userWebAPI.getLoggedInUser(anonymousRequest()) == null);\n+\n+    }\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_getUser() {\n+\n+        assert (userWebAPI.getUser(backEndRequest()).equals(backEndUser));\n+        assert (userWebAPI.getUser(frontEndRequest()).equals(frontEndUser));\n+\n+        assert (userWebAPI.getUser(anonymousRequest()).equals(userWebAPI.getAnonymousUserNoThrow()));\n+\n+    }\n+\n+    /**\n+     * validates that isLoggedToBackend true if front end or back end OR returns CMS_ANON if not set\n+     * \n+     */\n+    @Test\n+    public void test_isLoggedToBackend() {\n+\n+        assert (userWebAPI.isLoggedToBackend(backEndRequest()) == true);\n+        assert (userWebAPI.isLoggedToBackend(frontEndRequest()) == false);\n+\n+        assert (userWebAPI.isLoggedToBackend(anonymousRequest()) == false);\n+\n+    }\n+\n+\n+    /**\n+     * validates that getUser returns any user that is logged into the dotCMS front end or back end OR\n+     * returns CMS_ANON if not set\n+     * ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852fa17c156aa391f758de8ca00f4fb79d457143"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2354, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}