{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODcwMjA2", "number": 18922, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxMlrOEQdRxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMVrOEQdR6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzU3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/TestDataUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxMlrOG0nkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxMlrOG0nkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQwOQ==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827409", "createdAt": "2020-07-21T04:22:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/TestDataUtils.java", "diffHunk": "@@ -948,25 +942,44 @@ public static Contentlet getFileAssetContent(Boolean persist, long languageId) {\n \n             //Test file\n             final String testImagePath = \"com/dotmarketing/portlets/contentlet/business/test_files/test_image1.jpg\";\n-            final File originalTestImage = new File(\n-                    ConfigTestHelper.getUrlToTestResource(testImagePath).toURI());\n-            final File testImage = new File(Files.createTempDir(),\n-                    \"test_image1\" + System.currentTimeMillis() + \".jpg\");\n-            FileUtil.copyFile(originalTestImage, testImage);\n+            return createFileAsset(testImagePath, folder, languageId, persist);\n+        } catch (Exception e) {\n+            throw new DotRuntimeException(e);\n+        }\n+    }\n \n-            ContentletDataGen fileAssetDataGen = new FileAssetDataGen(folder, testImage)\n-                    .languageId(languageId);\n+    public static Contentlet getFileAssetSVGContent(Boolean persist, long languageId) {\n \n-            if (persist) {\n-                return ContentletDataGen.publish(fileAssetDataGen.nextPersisted());\n-            } else {\n-                return fileAssetDataGen.next();\n-            }\n+        try {\n+            final Folder folder = new FolderDataGen().nextPersisted();\n+\n+            //Test file\n+            final String testImagePath = \"com/dotmarketing/portlets/contentlet/business/test_files/test_image.svg\";\n+            return createFileAsset(testImagePath, folder, languageId, persist);\n         } catch (Exception e) {\n             throw new DotRuntimeException(e);\n         }\n     }\n \n+    private static Contentlet createFileAsset(final String testImagePath, final Folder folder, final long languageId, final boolean persist) throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzU5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxM1rOG0nkVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxM1rOG0nkVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQxNA==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827414", "createdAt": "2020-07-21T04:22:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzYyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNFrOG0nkWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNFrOG0nkWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQxOQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827419", "createdAt": "2020-07-21T04:22:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNVrOG0nkXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNVrOG0nkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyMw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827423", "createdAt": "2020-07-21T04:22:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzY3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNlrOG0nkYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxNlrOG0nkYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyNQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827425", "createdAt": "2020-07-21T04:22:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxN1rOG0nkZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxN1rOG0nkZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQyOQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827429", "createdAt": "2020-07-21T04:22:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOFrOG0nkbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOFrOG0nkbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQzNw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827437", "createdAt": "2020-07-21T04:22:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ0Nw==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827447", "createdAt": "2020-07-21T04:22:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzg4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoxOVrOG0nkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxMTowNVrOG1IAHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ1NQ==", "bodyText": "Codacy found an issue: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827455", "createdAt": "2020-07-21T04:22:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());\n+    };\n+\n+\n+    /**\n+     * This will serialize a contentlet to disk\n+     * @param contentlet\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void serializeContentlet(final Contentlet contentlet, final File file)\n+            throws IOException {\n+\n+        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1ODgxMw==", "bodyText": "Agree with Codacy!", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r458358813", "createdAt": "2020-07-21T20:11:05Z", "author": {"login": "wezell"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());\n+    };\n+\n+\n+    /**\n+     * This will serialize a contentlet to disk\n+     * @param contentlet\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void serializeContentlet(final Contentlet contentlet, final File file)\n+            throws IOException {\n+\n+        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ1NQ=="}, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzkzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMFrOG0nkiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMFrOG0nkiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ2NQ==", "bodyText": "Codacy found an issue: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827465", "createdAt": "2020-07-21T04:22:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkyMzk1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMVrOG0nkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoyMjoyMVrOG0nkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNzQ2Nw==", "bodyText": "Codacy found an issue: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "url": "https://github.com/dotCMS/core/pull/18922#discussion_r457827467", "createdAt": "2020-07-21T04:22:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/ContentletTransformerTest.java", "diffHunk": "@@ -604,5 +622,128 @@ public String getUrl(Contentlet contentlet) {\n \n     }\n \n+    /**\n+     * Given Scenario: This takes samples of content transforms the original then serialize it the recovers the serialized content and transforms the result then compares the two contentlet\n+     * Expected Result: Both results must match\n+     * @param serializationTestCase\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    @UseDataProvider(\"listSerializeTestCases\")\n+    public void Test_Serialize_Contentlet_Then_Recover_Then_Transform(final SerializationTestCase serializationTestCase)\n+            throws IOException, ClassNotFoundException, DotDataException {\n+\n+        final File file = new File(directory,String.format(\"%s.serialized\",System.currentTimeMillis()));\n+        file.createNewFile();\n+\n+        final Contentlet original = serializationTestCase.contentlet;\n+        serializeContentlet(serializationTestCase.contentlet, file);\n+        final Contentlet copy = readSerializedContentlet(file);\n+        validateTransformation(original, copy);\n+        final AssertionStrategy assertionStrategy = serializationTestCase.assertionStrategy;\n+        if(null != assertionStrategy) {\n+            assertionStrategy.apply(original, copy);\n+        }\n+    }\n+\n+    private static class SerializationTestCase {\n+\n+        final Contentlet contentlet;\n+        final AssertionStrategy assertionStrategy;\n+\n+        SerializationTestCase(final Contentlet contentlet,\n+                final AssertionStrategy assertionStrategy) {\n+            this.contentlet = contentlet;\n+            this.assertionStrategy = assertionStrategy;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] listSerializeTestCases() throws Exception {\n+\n+        final FileAssetAPI assetAPI = APILocator.getFileAssetAPI();\n+        final HTMLPageAssetAPI pageAssetAPI = APILocator.getHTMLPageAssetAPI();\n+\n+        return new Object[]{\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetSVGContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getFileAssetContent(true, langId);\n+                    return assetAPI.fromContentlet(contentlet);\n+                }).get(), fileAssetValidation),\n+                new SerializationTestCase(((Supplier<Contentlet>) () -> {\n+                    final Contentlet contentlet = TestDataUtils.getPageContent(true, langId);\n+                    return pageAssetAPI.fromContentlet(contentlet);\n+                }).get(), pageValidation),\n+                new SerializationTestCase(TestDataUtils.getDotAssetLikeContentlet(), null),\n+                new SerializationTestCase(TestDataUtils.getBlogContent(true, langId), null)\n+        };\n+    }\n+\n+    private void validateTransformation(final Contentlet original, final Contentlet copy){\n+        final DotContentletTransformer transformer1 = new DotTransformerBuilder().defaultOptions().content(original).build();\n+        final Map<String, Object> preSerializationMap = transformer1.toMaps().get(0);\n+\n+        final DotContentletTransformer transformer2 = new DotTransformerBuilder().defaultOptions().content(copy).build();\n+        final Map<String, Object> postSerializationMap = transformer2.toMaps().get(0);\n+        Assert.assertEquals(preSerializationMap, postSerializationMap);\n+\n+        Assert.assertEquals(transformer1.hydrate().get(0), transformer2.hydrate().get(0));\n+    }\n+\n+    private static final AssertionStrategy fileAssetValidation = (original, copy) -> {\n+        final FileAsset fileAsset1 = (FileAsset) original;\n+        final int width = fileAsset1.getWidth();\n+        final int height = fileAsset1.getHeight();\n+        final FileAsset fileAsset2 = (FileAsset) copy;\n+        final int width2 = fileAsset2.getWidth();\n+        final int height2 = fileAsset2.getHeight();\n+        Assert.assertEquals(width, width2);\n+        Assert.assertEquals(height, height2);\n+    };\n+\n+    private static final AssertionStrategy pageValidation = (original, copy) -> {\n+        final HTMLPageAsset htmlPageAsset1 = (HTMLPageAsset) original;\n+        final HTMLPageAsset htmlPageAsset2 = (HTMLPageAsset) copy;\n+        Assert.assertEquals(htmlPageAsset1.getPageUrl(),htmlPageAsset2.getPageUrl());\n+        Assert.assertEquals(htmlPageAsset1.getRedirect(),htmlPageAsset2.getRedirect());\n+        Assert.assertEquals(htmlPageAsset1.getURI(),htmlPageAsset2.getURI());\n+    };\n+\n+\n+    /**\n+     * This will serialize a contentlet to disk\n+     * @param contentlet\n+     * @param file\n+     * @throws IOException\n+     */\n+    private void serializeContentlet(final Contentlet contentlet, final File file)\n+            throws IOException {\n+\n+        try (FileOutputStream fileOutputStream = new FileOutputStream(file)) {\n+            try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {\n+                objectOutputStream.writeObject(contentlet);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This will deserialize a contentlet from disk\n+     * @param file\n+     * @return\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    private Contentlet readSerializedContentlet(final File file) throws IOException, ClassNotFoundException{\n+        try(FileInputStream fileInputStream = new FileInputStream(file)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77ff825d34117eb3059d4e5c348908e1c81bcb8"}, "originalPosition": 252}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2054, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}