{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1NjAzMDMx", "number": 19551, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0NzoyMFrOE1ZDug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0MzowMlrOE1bHXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDIwNTM4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0NzoyMFrOHtpIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxMDowOVrOHtrfaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTg4NA==", "bodyText": "I would check if it is not null or empty list", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517621884", "createdAt": "2020-11-04T20:47:20Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDUyMw==", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R365", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660523", "createdAt": "2020-11-04T22:10:09Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMTg4NA=="}, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDIwNjIzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0NzozN1rOHtpI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxMDoyM1rOHtrf1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjAxNA==", "bodyText": "is this ok", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517622014", "createdAt": "2020-11-04T20:47:37Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDYzMA==", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R371", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660630", "createdAt": "2020-11-04T22:10:23Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjAxNA=="}, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDIwNjc2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0Nzo1MFrOHtpJUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoxMDo0MFrOHtrgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjA5OQ==", "bodyText": "you ca use Try.of", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517622099", "createdAt": "2020-11-04T20:47:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;\n+\t\t}\n+\t}\n+\n+\tprivate boolean needLiveVersion(final Contentlet contentlet) {\n+\t\ttry {\n+\t\t\treturn EDIT_OR_PREVIEW_MODE || !EDIT_OR_PREVIEW_MODE && contentlet.hasLiveVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDc2NQ==", "bodyText": "done 9ed56d6#diff-fbb11290830742365067c6c4e761a23f3eef90d1e024037cbaa272100c134e61R376", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517660765", "createdAt": "2020-11-04T22:10:40Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,49 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet>  contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets.get(0);\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn relatedContent;\n+\t\t}\n+\t}\n+\n+\tprivate boolean needLiveVersion(final Contentlet contentlet) {\n+\t\ttry {\n+\t\t\treturn EDIT_OR_PREVIEW_MODE || !EDIT_OR_PREVIEW_MODE && contentlet.hasLiveVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMjA5OQ=="}, "originalCommit": {"oid": "65fec36019f104da3573a9e540b21d352574e845"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDU0MjM2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0MzowMlrOHtsWWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjo0MzowMlrOHtsWWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY3NDU4Ng==", "bodyText": "Is it better to return Optional?", "url": "https://github.com/dotCMS/core/pull/19551#discussion_r517674586", "createdAt": "2020-11-04T22:43:02Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/viewtools/content/ContentMap.java", "diffHunk": "@@ -342,20 +336,47 @@ private Object getRelationshipInfo(final Field field)\n \t\tfinal ContentletRelationshipRecords records = relationships.getRelationshipsRecords().get(0);\n \t\tif(records.getRecords().isEmpty()) {\n \t\t    return null;\n+\t\t} else if (records.doesAllowOnlyOne()){\n+\t\t\treturn new ContentMap(records.getRecords().get(0),user, EDIT_OR_PREVIEW_MODE, host, context);\n+\t\t} else {\n+\t\t\tfinal List<Contentlet> contents = records.getRecords().stream()\n+\t\t\t\t\t.filter(contentlet -> needLiveVersion(contentlet))\n+\t\t\t\t\t.map(relatedContent -> EDIT_OR_PREVIEW_MODE ? relatedContent : getLiveVersion(relatedContent))\n+\t\t\t\t\t.filter(Objects::nonNull)\n+\t\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\treturn perAPI.filterCollection(contents, PermissionAPI.PERMISSION_USE, true, user).stream()\n+\t\t\t\t\t.map(contentlet -> new ContentMap(contentlet, user, EDIT_OR_PREVIEW_MODE, host, context))\n+\t\t\t\t\t.collect(Collectors.toList());\n \t\t}\n-\t\telse if (records.doesAllowOnlyOne()){\n-\t\t\treturn new ContentMap(records.getRecords().get(0),user,\n-\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context);\n-\t\t} else{\n-\t\t\treturn perAPI.filterCollection(records.getRecords(),\n-\t\t\t\t\tPermissionAPI.PERMISSION_USE, true, user).stream()\n-\t\t\t\t\t.map(contentlet -> new ContentMap((Contentlet) contentlet, user,\n-\t\t\t\t\t\t\tEDIT_OR_PREVIEW_MODE, host, context)).collect(Collectors.toList());\n-\t\t}\n \n \n \t}\n \n+\tprivate Contentlet getLiveVersion(final Contentlet relatedContent) {\n+\t\ttry {\n+\t\t\tif (relatedContent.isLive()) {\n+\t\t\t\treturn relatedContent;\n+\t\t\t} else {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal List<Contentlet> contentlets = APILocator.getContentletAPI()\n+\t\t\t\t\t\t\t.findContentletsByIdentifiers(new String[]{relatedContent.getIdentifier()}, true, relatedContent.getLanguageId(), user, user.isFrontendUser());\n+\n+\t\t\t\t\treturn contentlets != null && !contentlets.isEmpty() ? contentlets.get(0) : null;\n+\t\t\t\t} catch (DotDataException| DotSecurityException e) {\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (DotDataException | DotSecurityException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed56d60337cd0089bc8c6b1562ecf5fcd027a50"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1819, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}