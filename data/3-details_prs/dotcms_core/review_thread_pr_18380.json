{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjY3NDc2", "number": 18380, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1MjoyMlrOD3ZToQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyNVrOD3uAQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDEyODk3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTo1MjoyMlrOGNoYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0Nzo0NVrOGOFUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI5MQ==", "bodyText": "I think you could use something like\nreturn newNormal.replaceAll(Pattern.quote(\"//\"), StringPool.SLASH);", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r416946291", "createdAt": "2020-04-28T21:52:22Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -36,7 +36,12 @@ public String getRequestURI() {\n                  2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n                  3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n                  */\n-                return URI.create(super.getRequestURI()).normalize().toString();\n+                String newNormal = URI.create(super.getRequestURI()).normalize().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7234d6110ff44eb9676103a8b8aa1cd7afbf7157"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyMDQ3MA==", "bodyText": "While the code looks \"cleaner\", my thinking was that a replaceAll with a RegEx was actually going to be slower than just doing a string replace in a loop.", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417420470", "createdAt": "2020-04-29T15:47:45Z", "author": {"login": "wezell"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -36,7 +36,12 @@ public String getRequestURI() {\n                  2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n                  3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n                  */\n-                return URI.create(super.getRequestURI()).normalize().toString();\n+                String newNormal = URI.create(super.getRequestURI()).normalize().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NjI5MQ=="}, "originalCommit": {"oid": "7234d6110ff44eb9676103a8b8aa1cd7afbf7157"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njg2MTU1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDozMzo0MVrOGOB2ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDozMzo0MVrOGOB2ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2MzU2Mg==", "bodyText": "miss test here", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417363562", "createdAt": "2020-04-29T14:33:41Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -36,7 +36,12 @@ public String getRequestURI() {\n                  2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n                  3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n                  */\n-                return URI.create(super.getRequestURI()).normalize().toString();\n+                String newNormal = URI.create(super.getRequestURI()).normalize().toString();\n+                \n+                while(newNormal.indexOf(\"//\")>-1) {\n+                    newNormal = newNormal.replace(\"//\", \"/\");\n+                }\n+                return newNormal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7234d6110ff44eb9676103a8b8aa1cd7afbf7157"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTU4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoxOVrOGOIaNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoxOVrOGOIaNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTAyOQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471029", "createdAt": "2020-04-29T17:02:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -111,5 +135,73 @@ private void compare(final String originalURI, final String expectedNormalizedUR\n         assertNotNull(normalizedValueByFilter);\n         assertEquals(expectedNormalizedURI, normalizedValueByFilter);\n     }\n+    \n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalizer_fixes_double_slashes() throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTYzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMFrOGOIaPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMFrOGOIaPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTAzNg==", "bodyText": "Issue found: String.indexOf(char) is faster than String.indexOf(String).", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471036", "createdAt": "2020-04-29T17:02:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -86,15 +109,16 @@ public void test_uri_normalization_valid_URI() throws IOException, ServletExcept\n         String originalURI = \"/folder/important/secret_file.dat\";\n         compare(originalURI, originalURI);\n \n+        // (query strings are not part of URI)\n         originalURI = \"/folder/folder1/forward_jsp.jsp?FORWARD_URL=http://google.com\";\n-        compare(originalURI, originalURI);\n+        compare(originalURI, originalURI.substring(0,originalURI.indexOf(\"?\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTczOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMVrOGOIaTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMVrOGOIaTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTA1Mw==", "bodyText": "Issue found: The String literal \"/folder/folder1/file.dat\" appears 4 times in this file; the first occurrence is on line 66", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471053", "createdAt": "2020-04-29T17:02:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -62,18 +63,40 @@ public void test_uri_normalization_invalid_URI() throws IOException, ServletExce\n \n         // Each \".\" segment is simply removed\n         originalURI = \"./folder/folder1/file.dat\";\n-        expectedNormalizedURI = \"folder/folder1/file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTc3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMlrOGOIaVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyMlrOGOIaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTA2MA==", "bodyText": "Issue found: Avoid empty catch blocks", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471060", "createdAt": "2020-04-29T17:02:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -30,13 +37,35 @@ public void doFilter(ServletRequest servletRequest, ServletResponse servletRespo\n \n             @Override\n             public String getRequestURI() {\n+                try {\n+                    /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n+                     1. Each \".\" segment is simply removed.\n+                     2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n+                     3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n+                     */\n \n-                /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n-                 1. Each \".\" segment is simply removed.\n-                 2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n-                 3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n-                 */\n-                return URI.create(super.getRequestURI()).normalize().toString();\n+                    String newNormal = URI.create(super.getRequestURI()).normalize().toString();\n+                    newNormal = newNormal.startsWith(DOUBLEPEROIDS) ? newNormal.replace(DOUBLEPEROIDS, \"\") : newNormal;\n+                    newNormal = newNormal.startsWith(SLASH) ? newNormal : SLASH + newNormal;\n+\n+                    // this should not happen \n+                    newNormal = newNormal.indexOf(QUESTION )>-1 ? newNormal.substring(0,newNormal.indexOf(StringPool.QUESTION)) : newNormal;\n+                    while(newNormal.indexOf(DOUBLESLASH)>-1) {\n+                        newNormal = newNormal.replace(DOUBLESLASH, SLASH);\n+                    }\n+                    return newNormal;\n+                }\n+                catch(IllegalArgumentException ill) {\n+                    Logger.warnAndDebug(this.getClass(),ill);\n+                    HttpServletResponse response= (HttpServletResponse) servletResponse;\n+                    try {\n+                        response.sendError(HttpServletResponse.SC_FORBIDDEN);\n+                        response.flushBuffer();\n+                    }\n+                    catch(Exception e) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyM1rOGOIaYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyM1rOGOIaYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTA3Mw==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471073", "createdAt": "2020-04-29T17:02:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -111,5 +135,73 @@ private void compare(final String originalURI, final String expectedNormalizedUR\n         assertNotNull(normalizedValueByFilter);\n         assertEquals(expectedNormalizedURI, normalizedValueByFilter);\n     }\n+    \n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalizer_fixes_double_slashes() throws IOException, ServletException {\n+\n+        \n+        // remove all //, replace with /\n+        String originalURI = \"//folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // testing ///\n+        originalURI = \"///folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // testing ////\n+        originalURI = \"////folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+        \n+\n+        \n+        // testing multiple ////\n+        originalURI = \"////folder/important///secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+        \n+        // testing // not at the root (query strings are not part of URI)\n+        originalURI = \"/test//folder/folder1//forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/test/folder/folder1/forward_jsp.jsp\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"///test/../folder/important//../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./f/older//folder1//file.dat\";\n+        expectedNormalizedURI = \"/f/older/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat//..//\";\n+        expectedNormalizedURI = \"/folder/folder1/\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // starts with ..//\n+        originalURI = \"..//folder/./folder1//file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+    \n+    \n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalizer_invalid_uris() throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUxOTk2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyNFrOGOIabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyNFrOGOIabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTA4NQ==", "bodyText": "Issue found: Local variable 'originalURI' could be declared final", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471085", "createdAt": "2020-04-29T17:02:24Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/test/java/com/dotcms/filters/NormalizationFilterTest.java", "diffHunk": "@@ -111,5 +135,73 @@ private void compare(final String originalURI, final String expectedNormalizedUR\n         assertNotNull(normalizedValueByFilter);\n         assertEquals(expectedNormalizedURI, normalizedValueByFilter);\n     }\n+    \n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalizer_fixes_double_slashes() throws IOException, ServletException {\n+\n+        \n+        // remove all //, replace with /\n+        String originalURI = \"//folder/important/secret_file.dat\";\n+        String expectedNormalizedURI = \"/folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // testing ///\n+        originalURI = \"///folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // testing ////\n+        originalURI = \"////folder/important/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+        \n+\n+        \n+        // testing multiple ////\n+        originalURI = \"////folder/important///secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+        \n+        // testing // not at the root (query strings are not part of URI)\n+        originalURI = \"/test//folder/folder1//forward_jsp.jsp?FORWARD_URL=http://google.com\";\n+        expectedNormalizedURI = \"/test/folder/folder1/forward_jsp.jsp\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // A \"..\" segment is removed only if it is preceded by a non-\"..\" segment\n+        originalURI = \"///test/../folder/important//../secret_file.dat\";\n+        expectedNormalizedURI = \"/folder/secret_file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./f/older//folder1//file.dat\";\n+        expectedNormalizedURI = \"/f/older/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // Each \".\" segment is simply removed\n+        originalURI = \"./folder/./folder1/file.dat//..//\";\n+        expectedNormalizedURI = \"/folder/folder1/\";\n+        compare(originalURI, expectedNormalizedURI);\n+\n+        // starts with ..//\n+        originalURI = \"..//folder/./folder1//file.dat\";\n+        expectedNormalizedURI = \"/folder/folder1/file.dat\";\n+        compare(originalURI, expectedNormalizedURI);\n+    }\n+    \n+    \n+    /**\n+     * Test to verify the {@link NormalizationFilter} is applying properly the normalization on\n+     * invalids URIs\n+     */\n+    @Test\n+    public void test_uri_normalizer_invalid_uris() throws IOException, ServletException {\n+        // testing escaped slashes - Filter barfs and returns /\n+        String originalURI = \"/\\\\///folder//important////secret_file.dat\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzUyMDAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyNVrOGOIaeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzowMjoyNVrOGOIaeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3MTA5OA==", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18380#discussion_r417471098", "createdAt": "2020-04-29T17:02:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/filters/NormalizationFilter.java", "diffHunk": "@@ -30,13 +37,35 @@ public void doFilter(ServletRequest servletRequest, ServletResponse servletRespo\n \n             @Override\n             public String getRequestURI() {\n+                try {\n+                    /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n+                     1. Each \".\" segment is simply removed.\n+                     2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n+                     3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n+                     */\n \n-                /* Normalization is the process of removing unnecessary \".\" and \"..\" segments from the path component of a hierarchical URI.\n-                 1. Each \".\" segment is simply removed.\n-                 2. A \"..\" segment is removed only if it is preceded by a non-\"..\" segment.\n-                 3. Normalization has no effect upon opaque URIs. (mailto:a@b.com)\n-                 */\n-                return URI.create(super.getRequestURI()).normalize().toString();\n+                    String newNormal = URI.create(super.getRequestURI()).normalize().toString();\n+                    newNormal = newNormal.startsWith(DOUBLEPEROIDS) ? newNormal.replace(DOUBLEPEROIDS, \"\") : newNormal;\n+                    newNormal = newNormal.startsWith(SLASH) ? newNormal : SLASH + newNormal;\n+\n+                    // this should not happen \n+                    newNormal = newNormal.indexOf(QUESTION )>-1 ? newNormal.substring(0,newNormal.indexOf(StringPool.QUESTION)) : newNormal;\n+                    while(newNormal.indexOf(DOUBLESLASH)>-1) {\n+                        newNormal = newNormal.replace(DOUBLESLASH, SLASH);\n+                    }\n+                    return newNormal;\n+                }\n+                catch(IllegalArgumentException ill) {\n+                    Logger.warnAndDebug(this.getClass(),ill);\n+                    HttpServletResponse response= (HttpServletResponse) servletResponse;\n+                    try {\n+                        response.sendError(HttpServletResponse.SC_FORBIDDEN);\n+                        response.flushBuffer();\n+                    }\n+                    catch(Exception e) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b7c5c4079cf3dee767923d2147ea51692b76f10"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2257, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}