{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODU2ODI4", "number": 18669, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MFrOEFvfvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MVrOEFvfwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDU2NTExOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/servlet/ReloadableServletContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MFrOGkHSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MFrOGkHSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTM0Mg==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18669#discussion_r440521342", "createdAt": "2020-06-16T00:38:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/servlet/ReloadableServletContainer.java", "diffHunk": "@@ -183,7 +184,8 @@ private static ResourceConfig configureResourceConfig(ResourceConfig config) {\n                 .register((new DotBadRequestExceptionMapper<NumberFormatException>(){}).getClass())\n                 .register(DotSecurityExceptionMapper.class)\n                 .register(DotDataExceptionMapper.class)\n-                .register(ElasticsearchStatusExceptionMapper.class);\n+                .register(ElasticsearchStatusExceptionMapper.class)\n+                .register((new DotBadRequestExceptionMapper<InvalidFolderNameException>(){}).getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cd9697bec2437a692d64e0315437a4be8f4f2a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDU2NTE0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MVrOGkHSgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDozODo0MVrOGkHSgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMTM0Ng==", "bodyText": "Issue found: A catch statement that catches an exception only to rethrow it should be avoided.", "url": "https://github.com/dotCMS/core/pull/18669#discussion_r440521346", "createdAt": "2020-06-16T00:38:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -120,28 +134,38 @@ private Contentlet getContentlet(final String inode,\n                                      final PageMode pageMode) throws DotDataException, DotSecurityException {\n \n         Contentlet contentlet = null;\n-        PageMode mode         = pageMode;\n+        try {\n+            PageMode mode = pageMode;\n \n-        if(UtilMethods.isSet(inode)) {\n+            if (UtilMethods.isSet(inode)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n-            contentlet = this.contentletAPI.find\n-                    (inode, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by inode: \" + inode);\n+                contentlet = this.contentletAPI.find\n+                        (inode, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.notNull(contentlet, ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-        } else if (UtilMethods.isSet(identifier)) {\n+                DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+            } else if (UtilMethods.isSet(identifier)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by identifier: \" + identifier);\n-            mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n-            final Optional<Contentlet> currentContentlet =  language <= 0?\n-                    Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n-                            sessionLanguage.get(), initDataObject.getUser() , mode.respectAnonPerms)):\n-                    this.contentletAPI.findContentletByIdentifierOrFallback\n-                            (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by identifier: \" + identifier);\n+                mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n+                final Optional<Contentlet> currentContentlet = language <= 0 ?\n+                        Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n+                                sessionLanguage.get(), initDataObject.getUser(), mode.respectAnonPerms)) :\n+                        this.contentletAPI.findContentletByIdentifierOrFallback\n+                                (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+\n+                DotPreconditions.isTrue(currentContentlet.isPresent(), () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+                contentlet = currentContentlet.get();\n+\n+            }\n+        } catch (DoesNotExistException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3cd9697bec2437a692d64e0315437a4be8f4f2a"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2162, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}