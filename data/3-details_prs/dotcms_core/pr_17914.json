{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDgzNjQz", "number": 17914, "title": "#17858: Binary servlet changed to return 401 for non logged users", "bodyText": "Before this change, binary servlet returns 404 (Not Found) for a front end user if the requested file asset is not accessible for the user doing the request because permissions are required. Now, the servlet returns 401 (Authorization required), so the user can be redirected to the login page.", "createdAt": "2020-01-25T03:39:21Z", "url": "https://github.com/dotCMS/core/pull/17914", "merged": true, "mergeCommit": {"oid": "1b654a490050c465828235e4697e354d7c21f31d"}, "closed": true, "closedAt": "2020-02-11T17:16:34Z", "author": {"login": "dsolistorres"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9rDOagH2gAyMzY3MDgzNjQzOjYzMzBkZmYzOWVkODZkOTc3NzAxMjRmZDM0NTYyNDcxOWEwNTEyY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDVAU0gFqTM1Njg0MjExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6330dff39ed86d97770124fd345624719a0512cc", "author": {"user": {"login": "dsolistorres", "name": "daniel.solis"}}, "url": "https://github.com/dotCMS/core/commit/6330dff39ed86d97770124fd345624719a0512cc", "committedDate": "2020-01-25T03:33:45Z", "message": "dotCMS/core#17858: Binary servlet changed to return 401 for non logged users"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b771635cb074eb72680e5473dda9a003676146d8", "author": {"user": {"login": "dsolistorres", "name": "daniel.solis"}}, "url": "https://github.com/dotCMS/core/commit/b771635cb074eb72680e5473dda9a003676146d8", "committedDate": "2020-01-25T17:50:09Z", "message": "dotCMS/core#17858: Removed unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318", "author": {"user": {"login": "dsolistorres", "name": "daniel.solis"}}, "url": "https://github.com/dotCMS/core/commit/73db92f9daf7e07f9d5cb33a78ebd48920374318", "committedDate": "2020-01-25T18:42:06Z", "message": "dotCMS/core#17858: Fixed integration test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzM5NTU2", "url": "https://github.com/dotCMS/core/pull/17914#pullrequestreview-348339556", "createdAt": "2020-01-25T18:48:34Z", "commit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNFrOFhw8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNFrOFhw8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTI0Ng==", "bodyText": "Issue found: JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest", "url": "https://github.com/dotCMS/core/pull/17914#discussion_r370949246", "createdAt": "2020-01-25T18:48:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package com.dotmarketing.servlets;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockServletPathRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.BaseResponse;\n+import com.dotcms.mock.response.MockHttpCaptureResponse;\n+import com.dotcms.mock.response.MockHttpStatusResponse;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class BinaryExporterServletTest {\n+\n+    // Temporary binary png file\n+    private static class TmpBinaryFile implements Closeable {\n+\n+        private final Path pngFilePath;\n+\n+        public TmpBinaryFile(final boolean setContent) throws IOException {\n+            pngFilePath = Files.createTempFile(\"tmp\", \".png\");\n+            if (setContent) {\n+                Files.write(pngFilePath, ShortyServletAndTitleImageTest.pngPixel);\n+            }\n+        }\n+\n+        public Path getPath() {\n+            return pngFilePath;\n+        }\n+\n+        public File getFile() {\n+            return pngFilePath.toFile();\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            Files.deleteIfExists(pngFilePath);\n+        }\n+    }\n+\n+    private static final String BY_ID = \"by-identifier\";\n+    private static final String BY_INODE = \"by-inode\";\n+\n+    private static final String READ_PERMISSIONS = \"has-read-permissions\";\n+    private static final String NO_PERMISSIONS = \"no-permissions\";\n+\n+    private static Host host;\n+    private static Role role;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        // Set testing environment\n+        IntegrationTestInitService.getInstance().init();\n+\n+        host = new SiteDataGen().nextPersisted();\n+        role = new RoleDataGen().nextPersisted();\n+\n+    }\n+\n+    @DataProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzM5NTU3", "url": "https://github.com/dotCMS/core/pull/17914#pullrequestreview-348339557", "createdAt": "2020-01-25T18:48:36Z", "commit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNlrOFhw8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODo0ODozNlrOFhw8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0OTI0Nw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/17914#discussion_r370949247", "createdAt": "2020-01-25T18:48:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/servlets/BinaryExporterServletTest.java", "diffHunk": "@@ -0,0 +1,211 @@\n+package com.dotmarketing.servlets;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FileAssetDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.RoleDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.mock.request.MockHttpRequest;\n+import com.dotcms.mock.request.MockServletPathRequest;\n+import com.dotcms.mock.request.MockSessionRequest;\n+import com.dotcms.mock.response.BaseResponse;\n+import com.dotcms.mock.response.MockHttpCaptureResponse;\n+import com.dotcms.mock.response.MockHttpStatusResponse;\n+import com.dotcms.util.CollectionsUtils;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionAPI;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.util.UtilMethods;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(DataProviderRunner.class)\n+public class BinaryExporterServletTest {\n+\n+    // Temporary binary png file\n+    private static class TmpBinaryFile implements Closeable {\n+\n+        private final Path pngFilePath;\n+\n+        public TmpBinaryFile(final boolean setContent) throws IOException {\n+            pngFilePath = Files.createTempFile(\"tmp\", \".png\");\n+            if (setContent) {\n+                Files.write(pngFilePath, ShortyServletAndTitleImageTest.pngPixel);\n+            }\n+        }\n+\n+        public Path getPath() {\n+            return pngFilePath;\n+        }\n+\n+        public File getFile() {\n+            return pngFilePath.toFile();\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            Files.deleteIfExists(pngFilePath);\n+        }\n+    }\n+\n+    private static final String BY_ID = \"by-identifier\";\n+    private static final String BY_INODE = \"by-inode\";\n+\n+    private static final String READ_PERMISSIONS = \"has-read-permissions\";\n+    private static final String NO_PERMISSIONS = \"no-permissions\";\n+\n+    private static Host host;\n+    private static Role role;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODM2NjA2", "url": "https://github.com/dotCMS/core/pull/17914#pullrequestreview-356836606", "createdAt": "2020-02-11T17:08:43Z", "commit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODQyMTE1", "url": "https://github.com/dotCMS/core/pull/17914#pullrequestreview-356842115", "createdAt": "2020-02-11T17:16:13Z", "commit": {"oid": "73db92f9daf7e07f9d5cb33a78ebd48920374318"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1345, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}