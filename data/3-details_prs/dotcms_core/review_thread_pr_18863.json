{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTgzMTAx", "number": 18863, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODozMDowNFrOENX0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozNzo0MlrOEPNhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDU3MTAxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODozMDowNFrOGwBTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1NToyNFrOGwD9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjEyNw==", "bodyText": "code expresses a different thing that this javadoc", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453006127", "createdAt": "2020-07-10T18:30:04Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java", "diffHunk": "@@ -414,4 +423,176 @@ private ContentTool getContentTool(final long languageId){\n         contentTool.init(viewContext);\n         return contentTool;\n     }\n+\n+    /*\n+\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date in the future and the time machine parameter in null\n+     * Should: Not return the content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateIsNullAndPublishDateInFutureShouldNotReturnAnything() {\n+        final Calendar contentPublishDate = Calendar.getInstance();\n+        contentPublishDate.add(Calendar.DATE, 1);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        new ContentletDataGen(contentType.id())\n+                .setPolicy(IndexPolicy.FORCE)\n+                .setProperty(SYS_PUBLISH_DATE, contentPublishDate.getTime())\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(null);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+        assertEquals(0, contents.size());\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date set to tomorrow and the time machine date is the date after tomorrow\n+     * Should: return one content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateAndPublishDateAreTomorrowShouldReturnOneContent() {\n+        final Calendar publishDate = Calendar.getInstance();\n+        publishDate.add(Calendar.DATE, 1);\n+\n+        final Calendar timeMachine = Calendar.getInstance();\n+        timeMachine.add(Calendar.DATE, 2);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(SYS_PUBLISH_DATE, publishDate.getTime())\n+                .languageId(1)\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(timeMachine);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+\n+        assertEquals(1  , contents.size());\n+        assertEquals(1  , contents.getTotalResults());\n+        assertEquals(contentlet.getIdentifier(), contents.get(0).getContentObject().getIdentifier());\n+    }\n+\n+    @NotNull\n+    private ContentTool getContentTool(Calendar timeMachine) {\n+        final ContentTool contentTool  = new ContentTool();\n+\n+        final String time = timeMachine != null ? Long.toString(timeMachine.getTime().getTime()) : null;\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getAttribute(WebKeys.USER)).thenReturn(APILocator.systemUser());\n+\n+        when(session.getAttribute(\"tm_date\")).thenReturn(time);\n+\n+        final ViewContext viewContext = mock(ViewContext.class);\n+        when(viewContext.getRequest()).thenReturn(request);\n+\n+        contentTool.init(viewContext);\n+        return contentTool;\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a expire  date set to tomorrow and the time machine date is the date after tomorrow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b91e4ecc94e8fe652653cefc5f3eec266b0df382"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA0OTYyMg==", "bodyText": "done a73fc1f#diff-b77a02567ac2b8e298742516ca666f0dR510", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453049622", "createdAt": "2020-07-10T19:55:24Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/viewtools/content/ContentToolTest.java", "diffHunk": "@@ -414,4 +423,176 @@ private ContentTool getContentTool(final long languageId){\n         contentTool.init(viewContext);\n         return contentTool;\n     }\n+\n+    /*\n+\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date in the future and the time machine parameter in null\n+     * Should: Not return the content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateIsNullAndPublishDateInFutureShouldNotReturnAnything() {\n+        final Calendar contentPublishDate = Calendar.getInstance();\n+        contentPublishDate.add(Calendar.DATE, 1);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        new ContentletDataGen(contentType.id())\n+                .setPolicy(IndexPolicy.FORCE)\n+                .setProperty(SYS_PUBLISH_DATE, contentPublishDate.getTime())\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(null);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+        assertEquals(0, contents.size());\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a publish date set to tomorrow and the time machine date is the date after tomorrow\n+     * Should: return one content\n+     */\n+    @Test\n+    public void whenTheTimeMachineDateAndPublishDateAreTomorrowShouldReturnOneContent() {\n+        final Calendar publishDate = Calendar.getInstance();\n+        publishDate.add(Calendar.DATE, 1);\n+\n+        final Calendar timeMachine = Calendar.getInstance();\n+        timeMachine.add(Calendar.DATE, 2);\n+\n+        final ContentType contentType = TestDataUtils.getNewsLikeContentType();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(SYS_PUBLISH_DATE, publishDate.getTime())\n+                .languageId(1)\n+                .nextPersisted();\n+\n+        final String query = String.format(QUERY_BY_STRUCTURE_NAME, contentType.variable());\n+\n+        final ContentTool contentTool = getContentTool(timeMachine);\n+\n+        final PaginatedContentList<ContentMap> contents = contentTool.pullPerPage(query, 1, 2, null);\n+\n+        assertEquals(1  , contents.size());\n+        assertEquals(1  , contents.getTotalResults());\n+        assertEquals(contentlet.getIdentifier(), contents.get(0).getContentObject().getIdentifier());\n+    }\n+\n+    @NotNull\n+    private ContentTool getContentTool(Calendar timeMachine) {\n+        final ContentTool contentTool  = new ContentTool();\n+\n+        final String time = timeMachine != null ? Long.toString(timeMachine.getTime().getTime()) : null;\n+\n+        final HttpSession session = mock(HttpSession.class);\n+        final HttpServletRequest request = mock(HttpServletRequest.class);\n+        when(request.getSession(false)).thenReturn(session);\n+        when(request.getSession()).thenReturn(session);\n+        when(request.getAttribute(WebKeys.USER)).thenReturn(APILocator.systemUser());\n+\n+        when(session.getAttribute(\"tm_date\")).thenReturn(time);\n+\n+        final ViewContext viewContext = mock(ViewContext.class);\n+        when(viewContext.getRequest()).thenReturn(request);\n+\n+        contentTool.init(viewContext);\n+        return contentTool;\n+    }\n+\n+    /**\n+     * Method to test: {@link ContentTool#pullPerPage(String, int, int, String)}\n+     * When: there is a content with a expire  date set to tomorrow and the time machine date is the date after tomorrow", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNjEyNw=="}, "originalCommit": {"oid": "b91e4ecc94e8fe652653cefc5f3eec266b0df382"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg1NDc0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1ODowNlrOGwEBgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDowNjowOVrOGwqJBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg==", "bodyText": "doc", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453050752", "createdAt": "2020-07-10T19:58:06Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+public class TimeMachineUtil {\n+\n+    private TimeMachineUtil(){}\n+\n+    public static Optional<String> getTimeMachineDate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a73fc1f7ed898352425c4be3a6211ffafdea42a6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDk5NA==", "bodyText": "shouldn't be getSession(false)", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453050994", "createdAt": "2020-07-10T19:58:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+public class TimeMachineUtil {\n+\n+    private TimeMachineUtil(){}\n+\n+    public static Optional<String> getTimeMachineDate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg=="}, "originalCommit": {"oid": "a73fc1f7ed898352425c4be3a6211ffafdea42a6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY3NTI2OQ==", "bodyText": "done de46031", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r453675269", "createdAt": "2020-07-13T14:06:09Z", "author": {"login": "freddyucv"}, "path": "dotCMS/src/main/java/com/dotcms/util/TimeMachineUtil.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+\n+import javax.servlet.http.HttpSession;\n+import java.util.Optional;\n+\n+public class TimeMachineUtil {\n+\n+    private TimeMachineUtil(){}\n+\n+    public static Optional<String> getTimeMachineDate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDc1Mg=="}, "originalCommit": {"oid": "a73fc1f7ed898352425c4be3a6211ffafdea42a6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg1NjY5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozNzo0MVrOGyzO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozNzo0MVrOGyzO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMTM4Mg==", "bodyText": "Codacy found an issue: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r455921382", "createdAt": "2020-07-16T16:37:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class TimeMachineUtilTest {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa9a979092f4999062b9cedd2deb078ff96e9341"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Mzg1Njc3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozNzo0MlrOGyzO9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjozNzo0MlrOGyzO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyMTM5Ng==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18863#discussion_r455921396", "createdAt": "2020-07-16T16:37:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/util/TimeMachineUtilTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.api.web.HttpServletRequestThreadLocal;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpSession;\n+\n+import java.util.Date;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa9a979092f4999062b9cedd2deb078ff96e9341"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2034, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}