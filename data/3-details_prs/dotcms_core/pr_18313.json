{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDI0NTA0", "number": 18313, "title": "#18309 Owner user should have permission to edit contentlet", "bodyText": "The lock permission error was show because the user not have EDIT_PERMISSIOn and after save a contentlet a unlock action is called, The fix was just add a if if the content is not lock it no need unlock it", "createdAt": "2020-04-15T22:41:29Z", "url": "https://github.com/dotCMS/core/pull/18313", "merged": true, "mergeCommit": {"oid": "6cfb47f448e0b1826d16090f106e38af15579e4a"}, "closed": true, "closedAt": "2020-04-20T23:03:20Z", "author": {"login": "freddyucv"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX_7GpgH2gAyNDA0MDI0NTA0OjA0MmExMmFlMGQxMDRiZThjZDhkMDdhOTE5NjBlMmQ1MTc0OTIyYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZm_4_AFqTM5Njg2MjA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/042a12ae0d104be8cd8d07a91960e2d5174922be", "committedDate": "2020-04-15T22:34:55Z", "message": "#18309 Owner user should have permission to edit contentlet"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTg1ODAz", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-394185803", "createdAt": "2020-04-15T22:45:04Z", "commit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTowNVrOGGONfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTowNVrOGGONfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NzQ3MQ==", "bodyText": "We can add an assert checking that the content is actually locked", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409177471", "createdAt": "2020-04-15T22:45:05Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +333,94 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTg2MDU2", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-394186056", "createdAt": "2020-04-15T22:45:41Z", "commit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTo0MVrOGGOOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0NTo0MVrOGGOOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NzY4Mg==", "bodyText": "same as previous comment", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409177682", "createdAt": "2020-04-15T22:45:41Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +333,94 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: The contentlet's owner without permission to EDIT try to lock the contebtlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test()\n+    public void whenOwnerTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id())\n+                 .next();\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, user, false);\n+        esContentletAPI.lock(contentletSaved, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTg4MTg0", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-394188184", "createdAt": "2020-04-15T22:50:56Z", "commit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1NlrOGGOWMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo1MDo1NlrOGGOWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3OTY5OQ==", "bodyText": "does this apply only for WRITE level or any other also?", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r409179699", "createdAt": "2020-04-15T22:50:56Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotmarketing/business/PermissionBitAPIImpl.java", "diffHunk": "@@ -310,6 +310,13 @@ public boolean doesUserHavePermission(final Permissionable permissionable, int p\n \r\n \t\tfinal List<Permission> perms =  getPermissions(permissionable, true);\r\n \t\tfinal boolean isContentlet = permissionable instanceof Contentlet;\r\n+\r\n+\t\tif (isContentlet &&\r\n+\t\t\t\tPermissionLevel.WRITE.getType() == permissionType &&\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042a12ae0d104be8cd8d07a91960e2d5174922be"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846bdbd729fc161f4f46565d471414001147af5c", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/846bdbd729fc161f4f46565d471414001147af5c", "committedDate": "2020-04-17T17:28:55Z", "message": "#18309 When a contentlet is not lock you not have to lock it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49e4b158627f2948a5066bc098364caef683b4f1", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/49e4b158627f2948a5066bc098364caef683b4f1", "committedDate": "2020-04-17T17:36:36Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee15ab19ea817f1c3340baa65936fbab209c6b31", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/ee15ab19ea817f1c3340baa65936fbab209c6b31", "committedDate": "2020-04-17T18:11:45Z", "message": "#18309 refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a508f2ac034622f37c4a3c3cd240e1ce873e4e7", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/3a508f2ac034622f37c4a3c3cd240e1ce873e4e7", "committedDate": "2020-04-17T22:38:41Z", "message": "#18292 Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODExMTQ5", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-395811149", "createdAt": "2020-04-17T22:39:00Z", "commit": {"oid": "ee15ab19ea817f1c3340baa65936fbab209c6b31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed23a58657539e3215bc832cba13b9c0901ac96", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/5ed23a58657539e3215bc832cba13b9c0901ac96", "committedDate": "2020-04-17T22:39:32Z", "message": "#18292 Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTU4ODMz", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-395958833", "createdAt": "2020-04-18T23:09:14Z", "commit": {"oid": "5ed23a58657539e3215bc832cba13b9c0901ac96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTkzMTYz", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396593163", "createdAt": "2020-04-20T16:00:24Z", "commit": {"oid": "5ed23a58657539e3215bc832cba13b9c0901ac96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885", "author": {"user": {"login": "freddyucv", "name": "Freddy Rodriguez"}}, "url": "https://github.com/dotCMS/core/commit/1303b1626f23b53765f0fdba71e841c426de4885", "committedDate": "2020-04-20T22:24:15Z", "message": "merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDM3", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862037", "createdAt": "2020-04-20T22:40:14Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNFrOGIqk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNFrOGIqk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM1MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739350", "createdAt": "2020-04-20T22:40:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -20,19 +20,18 @@\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n-import com.dotcms.datagen.ContentletDataGen;\n-import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDQ1", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862045", "createdAt": "2020-04-20T22:40:15Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNVrOGIqk3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNVrOGIqk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM1Ng==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739356", "createdAt": "2020-04-20T22:40:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(DataProviderRunner.class)\n+public class CheckinContentActionletTest {\n+\n+    private static class TestCase {\n+        Contentlet contentlet;\n+        User user;\n+\n+        boolean hasWritePermission;\n+\n+        public TestCase(Contentlet contentlet, User user, boolean hasWritePermission) {\n+            this.contentlet = contentlet;\n+            this.user = user;\n+            this.hasWritePermission = hasWritePermission;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[] dataProviderSaveLanguage() throws DotSecurityException, DotDataException {\n+        final ContentType contentType = new ContentTypeDataGen()\n+                .fields(ImmutableList.of(ImmutableTextField.builder().name(\"Name\").variable(\"name\").build()))\n+                .nextPersisted();\n+\n+        final Contentlet notLockContentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(\"name\", \"testName\")\n+                .nextPersisted();\n+        final User limitedUser = new UserDataGen().next();\n+\n+        final Contentlet lockContentlet = new ContentletDataGen(contentType.id())\n+                .setProperty(\"name\", \"testName\")\n+                .nextPersisted();\n+\n+        final User userWithPermission = createUserWithPermission(lockContentlet);\n+        APILocator.getContentletAPI().lock(lockContentlet, userWithPermission, false);\n+\n+        return new TestCase[]{\n+                new TestCase(notLockContentlet, limitedUser, false),\n+                new TestCase(lockContentlet, limitedUser, false),\n+                new TestCase(notLockContentlet, userWithPermission, true)\n+        };\n+    }\n+\n+    private static User createUserWithPermission(final Contentlet lockContentlet) throws DotDataException {\n+        final Role backEndUserRole = APILocator.getRoleAPI().loadBackEndUserRole();\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User userWithPermission = new UserDataGen().roles(role, backEndUserRole).nextPersisted();\n+        addWritePermissionToContentlet(role, lockContentlet);\n+        return userWithPermission;\n+    }\n+\n+    private static void addWritePermissionToContentlet(final Role role, final Contentlet contentlet) throws DotDataException {\n+        final Permission permission = getPermission(role, contentlet, PermissionLevel.EDIT.getType());\n+\n+        try {\n+            APILocator.getPermissionAPI().save(permission, contentlet, APILocator.systemUser(), false);\n+\n+        } catch (DotDataException | DotSecurityException e){\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDUw", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862050", "createdAt": "2020-04-20T22:40:16Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNlrOGIqk4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxNlrOGIqk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM2MA==", "bodyText": "Issue found: Parameter 'user' is not assigned and could be declared final", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739360", "createdAt": "2020-04-20T22:40:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(DataProviderRunner.class)\n+public class CheckinContentActionletTest {\n+\n+    private static class TestCase {\n+        Contentlet contentlet;\n+        User user;\n+\n+        boolean hasWritePermission;\n+\n+        public TestCase(Contentlet contentlet, User user, boolean hasWritePermission) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDU0", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862054", "createdAt": "2020-04-20T22:40:17Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxN1rOGIqk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxN1rOGIqk5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM2NA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739364", "createdAt": "2020-04-20T22:40:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +332,115 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDYx", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862061", "createdAt": "2020-04-20T22:40:18Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOFrOGIqk6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOFrOGIqk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM3MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739370", "createdAt": "2020-04-20T22:40:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -20,19 +20,18 @@\n import com.dotcms.contenttype.model.type.ContentTypeBuilder;\n import com.dotcms.contenttype.model.type.SimpleContentType;\n import com.dotcms.contenttype.transform.contenttype.StructureTransformer;\n-import com.dotcms.datagen.ContentletDataGen;\n-import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.*;\n import com.dotcms.util.CollectionsUtils;\n import com.dotcms.util.IntegrationTestInitService;\n import com.dotmarketing.beans.Host;\n-import com.dotmarketing.business.APILocator;\n-import com.dotmarketing.business.CacheLocator;\n-import com.dotmarketing.business.RelationshipAPI;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDc2", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862076", "createdAt": "2020-04-20T22:40:19Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOVrOGIqk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoxOVrOGIqk9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM4MQ==", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739381", "createdAt": "2020-04-20T22:40:19Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;\n+import com.dotcms.exception.ExceptionUtil;\n+import com.dotmarketing.beans.Permission;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.DotLockException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.ContentletDependencies;\n+import com.dotmarketing.portlets.contentlet.model.ContentletVersionInfo;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionClassParameter;\n+import com.dotmarketing.portlets.workflows.model.WorkflowActionFailureException;\n+import com.dotmarketing.portlets.workflows.model.WorkflowProcessor;\n+import com.google.common.collect.ImmutableList;\n+import com.liferay.portal.model.User;\n+import com.tngtech.java.junit.dataprovider.DataProvider;\n+import com.tngtech.java.junit.dataprovider.DataProviderRunner;\n+import com.tngtech.java.junit.dataprovider.UseDataProvider;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Map;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDg0", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862084", "createdAt": "2020-04-20T22:40:20Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMFrOGIqk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMFrOGIqk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM4Nw==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739387", "createdAt": "2020-04-20T22:40:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImplTest.java", "diffHunk": "@@ -330,6 +332,115 @@ public void testIsCheckInSafeWithoutRelationshipsShouldReturnTrue() {\n     }\n \n \n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user without permission try to lock a contentlet\n+     * ExpectedResult: Should throw a DotSecurityException\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test(expected = DotSecurityException.class)\n+    public void whenTryToLockShouldThrowDotSecurityException() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+        esContentletAPI.lock(contentletSaved, user, false);\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: A user with {@link PermissionLevel#EDIT} permission try to lock a contentlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test\n+    public void whenTryToLockShouldWork() throws DotSecurityException, DotDataException {\n+        final Role role = new RoleDataGen().nextPersisted();\n+        final User user = new UserDataGen().roles(role).nextPersisted();\n+        final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+        final Contentlet contentlet = new ContentletDataGen(contentType.id()).next();\n+\n+        final ESContentletAPIImpl esContentletAPI = new ESContentletAPIImpl();\n+        final Contentlet contentletSaved = esContentletAPI.checkin(contentlet, APILocator.systemUser(), false);\n+\n+        addPermission(role, contentType, PermissionLevel.WRITE);\n+        addPermission(role, contentletSaved, PermissionLevel.WRITE);\n+\n+        esContentletAPI.lock(contentletSaved, user, false);\n+\n+        checkLock(user, contentletSaved);\n+    }\n+\n+    private void checkLock(final User user, final Contentlet contentletSaved) throws DotDataException {\n+        final ContentletVersionInfo info = APILocator.getVersionableAPI().\n+                getContentletVersionInfo(contentletSaved.getIdentifier(), contentletSaved.getLanguageId());\n+\n+        assertNotNull(info.getLockedBy());\n+        assertNotNull(info.getLockedOn());\n+        assertEquals(user.getUserId(), info.getLockedBy());\n+    }\n+\n+    /**\n+     * Method to test: {@link ESContentletAPIImpl#lock(Contentlet, User, boolean)}\n+     * Given Scenario: The contentlet's owner without permission to EDIT try to lock the contebtlet\n+     * ExpectedResult: Should work\n+     *\n+     * @throws DotSecurityException\n+     * @throws DotDataException\n+     */\n+    @Test()\n+    public void whenOwnerTryToLockShouldWork() throws DotSecurityException, DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDg5", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862089", "createdAt": "2020-04-20T22:40:21Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMVrOGIqk_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMVrOGIqk_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM5MA==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.contenttype.model.field'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739390", "createdAt": "2020-04-20T22:40:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYyMDk4", "url": "https://github.com/dotCMS/core/pull/18313#pullrequestreview-396862098", "createdAt": "2020-04-20T22:40:22Z", "commit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMlrOGIqlBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0MDoyMlrOGIqlBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTczOTM5Nw==", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen'", "url": "https://github.com/dotCMS/core/pull/18313#discussion_r411739397", "createdAt": "2020-04-20T22:40:22Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/workflows/actionlet/CheckinContentActionletTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package com.dotmarketing.portlets.workflows.actionlet;\n+\n+import com.dotcms.contenttype.model.field.*;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1303b1626f23b53765f0fdba71e841c426de4885"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 989, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}