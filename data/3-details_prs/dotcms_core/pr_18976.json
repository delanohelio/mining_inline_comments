{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MjM1NTc0", "number": 18976, "title": "#18964 : Adding rest endpoint to get a folder structure recursively", "bodyText": "FolderAPIImpl refactor to better understanding, fix a bug that if the user does not have permissions over the folder still returned.\nFolderView, FolderHelper, FolderResource: new endpoint to get Folder and the subFolders by Path, respecting permissions.\nFolderAPITest Integration Tests for the refactor and bug of the FolderAPIImpl.findFolderByPath\nFolderResourceTest Integration Tests for the new endpoint\nFolderResourcePostman Postman tests for the new endpoint", "createdAt": "2020-07-27T15:25:13Z", "url": "https://github.com/dotCMS/core/pull/18976", "merged": true, "mergeCommit": {"oid": "863e1093ee419425a9d35ec287290f0d10eb969f"}, "closed": true, "closedAt": "2020-08-31T16:58:38Z", "author": {"login": "luisbacca"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5DbaEgH2gAyNDU3MjM1NTc0OjNiOGQxYTE5ZmM3NjUxYTU1NzRmMDkzNjA0ZTRlZDkzMmJkMzUwNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEU0K2gFqTQ3ODczMjk2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/3b8d1a19fc7651a5574f093604e4ed932bd3504f", "committedDate": "2020-07-27T15:19:25Z", "message": "#18964 : Adding rest endpoint to get a folder structure recursively"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk2MzA3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455896307", "createdAt": "2020-07-27T15:32:49Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjo1MFrOG3n6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMjo1MFrOG3n6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3ODg4MQ==", "bodyText": "you can throw DoesNotExistException, in order to translate this to 404", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460978881", "createdAt": "2020-07-27T15:32:50Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk3Mjg5", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455897289", "createdAt": "2020-07-27T15:33:57Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMzo1N1rOG3n9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozMzo1N1rOG3n9wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3OTY0OQ==", "bodyText": "you can use the InitBuilder", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460979649", "createdAt": "2020-07-27T15:33:57Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk4NTc4", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455898578", "createdAt": "2020-07-27T15:35:26Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNToyNlrOG3oB5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNToyNlrOG3oB5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDcwOA==", "bodyText": "you do not need to catch anything here, jersey will take care for you", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980708", "createdAt": "2020-07-27T15:35:26Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk4Nzc3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455898777", "createdAt": "2020-07-27T15:35:40Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0MVrOG3oCcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0MVrOG3oCcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDg1MQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980851", "createdAt": "2020-07-27T15:35:41Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk4ODQ5", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455898849", "createdAt": "2020-07-27T15:35:46Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0NlrOG3oCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo0NlrOG3oCsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDkxNQ==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460980915", "createdAt": "2020-07-27T15:35:46Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk5MDk4", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455899098", "createdAt": "2020-07-27T15:36:01Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjowMVrOG3oDeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjowMVrOG3oDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTExMw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460981113", "createdAt": "2020-07-27T15:36:01Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODk5Njc5", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455899679", "createdAt": "2020-07-27T15:36:38Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjozOVrOG3oFEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNjozOVrOG3oFEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MTUyMA==", "bodyText": "Probably log it", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460981520", "createdAt": "2020-07-27T15:36:39Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            exception.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTAwNjk4", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455900698", "createdAt": "2020-07-27T15:37:53Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNzo1M1rOG3oILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNzo1M1rOG3oILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjMxOA==", "bodyText": "I might be wrong, but shouldn't this be something like: /site/${siteName}/folder/{folder : .+}", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460982318", "createdAt": "2020-07-27T15:37:53Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTAxMTYy", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455901162", "createdAt": "2020-07-27T15:38:26Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozODoyNlrOG3oJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozODoyNlrOG3oJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MjY1Nw==", "bodyText": "set to final", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460982657", "createdAt": "2020-07-27T15:38:26Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTA2NTU5", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455906559", "createdAt": "2020-07-27T15:44:35Z", "commit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NDozNVrOG3oZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTo0NDozNVrOG3oZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4NjcxNQ==", "bodyText": "this could be an immutable", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460986715", "createdAt": "2020-07-27T15:44:35Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +116,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new Exception(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            exception.printStackTrace();\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {\n+\n+        private String path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8d1a19fc7651a5574f093604e4ed932bd3504f"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/04a70e34e5dac7c4d397ecc29cc3a11be1b1409f", "committedDate": "2020-07-27T15:50:32Z", "message": "#18964 : Adding changes per Jonathan review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTIyNTk0", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455922594", "createdAt": "2020-07-27T16:02:55Z", "commit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTIzMzI4", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455923328", "createdAt": "2020-07-27T16:03:47Z", "commit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMzo0OFrOG3pMJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNjowMzo0OFrOG3pMJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk5OTcxNw==", "bodyText": "I would extract this class to another file", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r460999717", "createdAt": "2020-07-27T16:03:48Z", "author": {"login": "nollymar"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderResource.java", "diffHunk": "@@ -106,4 +117,216 @@ public final Response loadFolderByURI(@Context final HttpServletRequest httpServ\n         return response;\n     }\n \n+    @GET\n+    @Path (\"/sitename/{siteName}/folder/{folder : .+}\")\n+    @JSONP\n+    @NoCache\n+    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\"})\n+    public final Response loadFolderChildrenByURIPath(@Context final HttpServletRequest httpServletRequest,\n+                                                      @Context final HttpServletResponse httpServletResponse,\n+                                                      @PathParam(\"siteName\") final String siteName,\n+                                                      @PathParam(\"folder\") final String uri){\n+        Response response = null;\n+        final InitDataObject initData = this.webResource.init(null, httpServletRequest, httpServletResponse, true, null);\n+        final User user = initData.getUser();\n+        try{\n+            final String uriParam = !uri.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(uri) : uri;\n+            final Host host = APILocator.getHostAPI().findByName(siteName, user, false);\n+            //final Folder folder = folderHelper.loadFolderByURI(siteName,user,uriParam);\n+            final Folder folder = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+            if(host==null || folder==null) {\n+                throw new DoesNotExistException(\"No folder found for \"+uri+\" on site \"+siteName);\n+            }\n+            CustomFolder root = getFolderStructure(folder, user);\n+            response = Response.ok( new ResponseEntityView(root) ).build();\n+        } catch (Exception e) { // this is an unknown error, so we report as a 500.\n+            Logger.error(this, \"Error gettign folder for URI\", e);\n+            if (ExceptionUtil.causedBy(e, DotSecurityException.class)) {\n+                throw new ForbiddenException(e);\n+            }\n+            response = ExceptionMapperUtil.createResponse(e, Response.Status.INTERNAL_SERVER_ERROR);\n+        }\n+        return response;\n+    }\n+\n+    private final CustomFolder getFolderStructure(Folder folder, User user){\n+\n+        CustomFolder customFolder = convertFrom(folder);\n+\n+        List<CustomFolder> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {\n+            Logger.error(this, \"Error getting findSubFolders for folder \"+folder.getPath(), e);\n+        }\n+\n+        if(children != null && children.size() != 0){\n+            for(final Folder child : children){\n+                CustomFolder recursiveFolder = getFolderStructure(child, user);\n+                foldersChildCustoms.add(recursiveFolder);\n+            }\n+        }\n+\n+        customFolder.setCustomFolders(foldersChildCustoms);\n+\n+        return customFolder;\n+    }\n+\n+    private CustomFolder convertFrom(Folder folder){\n+        CustomFolder customFolder = new CustomFolder();\n+        try {\n+            BeanUtils.copyProperties(folder, customFolder);\n+            //TODO Research why for some reason path is not being copied on jostens dev\n+            customFolder.setPath(folder.getPath());\n+        }catch (Exception exception){\n+            Logger.error(this, \"Error copying properties\");\n+        }\n+        return customFolder;\n+    }\n+\n+    @JsonPropertyOrder({ \"path\", \"customFolders\" })\n+    @JsonRootName(\"folder\")\n+    class CustomFolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a70e34e5dac7c4d397ecc29cc3a11be1b1409f"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f918a82deb60e1caadbd7200d6e9d1669df40b3d", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/f918a82deb60e1caadbd7200d6e9d1669df40b3d", "committedDate": "2020-07-27T16:21:18Z", "message": "#18964 : Adding removing catch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a562296e1d1784505b1a3be486ab3e9788e284c3", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a562296e1d1784505b1a3be486ab3e9788e284c3", "committedDate": "2020-07-27T16:51:59Z", "message": "#18964 : Removing catch, adding immutable, placing the CustomFolder class in its own view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a60847ac33ce5bc34b960c556c8a886e6fe06b25", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/a60847ac33ce5bc34b960c556c8a886e6fe06b25", "committedDate": "2020-07-27T17:01:33Z", "message": "#18964 : Adding CustomFolderView"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTcyNzEw", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-455972710", "createdAt": "2020-07-27T17:06:01Z", "commit": {"oid": "a60847ac33ce5bc34b960c556c8a886e6fe06b25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDIzNzgx", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-456023781", "createdAt": "2020-07-27T18:17:08Z", "commit": {"oid": "a60847ac33ce5bc34b960c556c8a886e6fe06b25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7407b72c4ed581653c7f3917ac68019e059785e", "author": {"user": null}, "url": "https://github.com/dotCMS/core/commit/c7407b72c4ed581653c7f3917ac68019e059785e", "committedDate": "2020-07-27T18:32:06Z", "message": "#18964 : Ading javadoc per Jose\\'s review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f4620eb1af9cc6464b178a74458c4570dd8d9a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/f9f4620eb1af9cc6464b178a74458c4570dd8d9a", "committedDate": "2020-08-24T16:23:13Z", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18964-missing-endpoint-retrieving-folder-tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45dc384b8a8146dcbef9ba84011dd9295900743d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/45dc384b8a8146dcbef9ba84011dd9295900743d", "committedDate": "2020-08-26T21:36:22Z", "message": "#18964 folderview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377722c11c1bbe5c6136406d99bb257424a0f29a", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/377722c11c1bbe5c6136406d99bb257424a0f29a", "committedDate": "2020-08-26T22:33:19Z", "message": "#18964 refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb3d0b86d9b18b24fb97a6c53dfd5ea79a2ff455", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/fb3d0b86d9b18b24fb97a6c53dfd5ea79a2ff455", "committedDate": "2020-08-26T22:33:55Z", "message": "#18964 validate permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4146f533f77bf2ad08e9e18abd1134a28ef61c", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ec4146f533f77bf2ad08e9e18abd1134a28ef61c", "committedDate": "2020-08-27T15:05:57Z", "message": "#18964 feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53645cd7783612b4abb7f725d57746fa44cd2890", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/53645cd7783612b4abb7f725d57746fa44cd2890", "committedDate": "2020-08-27T16:29:28Z", "message": "#18964 postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9b0ac5c299959164afbbc51e50925c85687403", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2d9b0ac5c299959164afbbc51e50925c85687403", "committedDate": "2020-08-27T16:34:51Z", "message": "#18964 change path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a86a4974f5540e9669859871c5421e9ab768b73", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/2a86a4974f5540e9669859871c5421e9ab768b73", "committedDate": "2020-08-27T17:34:00Z", "message": "#18964 fix postman"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916c664fe4b19c7492aad05993510150448c1170", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/916c664fe4b19c7492aad05993510150448c1170", "committedDate": "2020-08-27T17:49:09Z", "message": "#18964 change hostid to siteid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffe225b7536e10fea3b2878735f14b1bf3a4caf5", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ffe225b7536e10fea3b2878735f14b1bf3a4caf5", "committedDate": "2020-08-27T19:08:56Z", "message": "#18964 log"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed11de697acbe02e1af26d6d52130eb30cc1ba27", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ed11de697acbe02e1af26d6d52130eb30cc1ba27", "committedDate": "2020-08-27T19:09:27Z", "message": "#18964 tests over the resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded0a485f57e25138747e36594be5d1944a024e7", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/ded0a485f57e25138747e36594be5d1944a024e7", "committedDate": "2020-08-27T22:19:12Z", "message": "#18964 tests change folderapiimpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa1ce9260f2fd402339aa1004b4290e0c84a5a9", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/dfa1ce9260f2fd402339aa1004b4290e0c84a5a9", "committedDate": "2020-08-27T22:34:04Z", "message": "#18964 doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1779aaba0aa424d7cee923a9447b8d46d2c7c432", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/1779aaba0aa424d7cee923a9447b8d46d2c7c432", "committedDate": "2020-08-28T03:38:01Z", "message": "#18964 fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd89a2568f85d33fa471d8f960510569a2002a5e", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/cd89a2568f85d33fa471d8f960510569a2002a5e", "committedDate": "2020-08-28T04:44:15Z", "message": "#18964 if user has permissions over the host and is system folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d", "author": {"user": {"login": "erickgonzalez", "name": null}}, "url": "https://github.com/dotCMS/core/commit/8f4fd194557d3177b954b309efddad0878b2ee6d", "committedDate": "2020-08-28T17:26:09Z", "message": "#18964 fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTA1", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908905", "createdAt": "2020-08-28T17:32:34Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNFrOHJO6QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNFrOHJO6QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUyMQ==", "bodyText": "Codacy found an issue: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443521", "createdAt": "2020-08-28T17:32:34Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/folder/FolderResourceTest.java", "diffHunk": "@@ -132,11 +135,211 @@ public void test_createFolders_siteNameNotExists_return400() throws DotDataExcep\n     @Test (expected = InvalidFolderNameException.class)\n     public void test_createFolders_restrictedFolderName_return400() throws DotDataException, DotSecurityException {\n         final Host newHost = new SiteDataGen().nextPersisted();\n-        final User adminUser = TestUserUtils.getAdminUser();\n         final List<String> foldersToCreate = Arrays.asList(\"dotcms\");\n \n         resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n \n     }\n \n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user\n+     * ExpectedResult: All the folders/subfolders of the requested folder path, 200 code.\n+     *\n+     */\n+    @Test\n+    public void test_loadFolderAndSubFoldersByPath_Admin_success() throws DotDataException, DotSecurityException {\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        responseResource = resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,newHost.getIdentifier(),\"test_\"+currentTime);\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Check Results\n+        final ResponseEntityView responseEntityView = ResponseEntityView.class.cast(responseResource.getEntity());\n+        final FolderView responseFolderView = FolderView.class.cast(responseEntityView.getEntity());\n+        Assert.assertNotNull(\"Title is null\",responseFolderView.getTitle());\n+        Assert.assertEquals(\"Title is not the same as the one requested\",responseFolderView.getTitle(),\"test_\"+currentTime);\n+        Assert.assertEquals(\"There is more than one subfolder\",1,responseFolderView.getSubFolders().size());\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user, but the hostId sent is not valid\n+     * ExpectedResult: The endpoint should return IllegalArgumentException that jersey will map to a 400 code\n+     *\n+     */\n+    @Test (expected = IllegalArgumentException.class)\n+    public void test_loadFolderAndSubFoldersByPath_Admin_InvalidHostId_return400() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,\n+                UUIDGenerator.uuid(),\"test_\"+currentTime);\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders and get them using the admin as the user, but the path sent is not valid\n+     * ExpectedResult: The endpoint should return IllegalArgumentException that jersey will map to a 400 code\n+     *\n+     */\n+    @Test (expected = IllegalArgumentException.class)\n+    public void test_loadFolderAndSubFoldersByPath_Admin_InvalidPath_return400() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Get all the folders and subfolders\n+        resource.loadFolderAndSubFoldersByPath(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,\n+                newHost.getIdentifier(),\"folderpathnotexist\");\n+    }\n+\n+    /**\n+     * Method to test: loadFolderAndSubFoldersByPath in the FolderResource\n+     * Given Scenario: Create a few folders/subfolders using the admin user, try to get the created Folders/subFolders\n+     *                  using a limited user with no permissions over the requested folder.\n+     * ExpectedResult: The endpoint should return DotSecurityException that jersey will map to a 403 code\n+     *\n+     */\n+    @Test (expected = DotSecurityException.class)\n+    public void test_loadFolderAndSubFoldersByPath_UserNoPermissionsOverFolder_return403() throws DotDataException, DotSecurityException {\n+\n+        final long currentTime = System.currentTimeMillis();\n+        final List<String> foldersToCreate = Arrays.asList(\"test_\"+currentTime+\"/folder_\"+currentTime);\n+        final Host newHost = new SiteDataGen().nextPersisted();\n+\n+        //Create Folders and SubFolders\n+        Response responseResource = resource.createFolders(getHttpRequest(adminUser.getEmailAddress(),\"admin\"),response,foldersToCreate,newHost.getHostname());\n+\n+        //Check that the response is 200, OK\n+        Assert.assertEquals(Status.OK.getStatusCode(),responseResource.getStatus());\n+\n+        //Give Permissions Over the Host\n+        final Permission permissions = new Permission(PermissionAPI.INDIVIDUAL_PERMISSION_TYPE,\n+                newHost.getPermissionId(),\n+                TestUserUtils.getOrCreatePublisherRole(newHost).getId(),\n+                (PermissionAPI.PERMISSION_READ | PermissionAPI.PERMISSION_WRITE | PermissionAPI.PERMISSION_CAN_ADD_CHILDREN | PermissionAPI.PERMISSION_EDIT_PERMISSIONS), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTE3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908917", "createdAt": "2020-08-28T17:32:35Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNVrOHJO6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNVrOHJO6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUzMA==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotmarketing.util.UUIDGenerator'", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443530", "createdAt": "2020-08-28T17:32:35Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -45,6 +49,7 @@\n import com.dotmarketing.portlets.templates.business.TemplateAPI;\n import com.dotmarketing.portlets.templates.model.Template;\n import com.dotmarketing.util.InodeUtils;\n+import com.dotmarketing.util.UUIDGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTI3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908927", "createdAt": "2020-08-28T17:32:36Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNlrOHJO6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozNlrOHJO6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzUzOQ==", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443539", "createdAt": "2020-08-28T17:32:36Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+        if(!UtilMethods.isSet(host)) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any host with id `%s` \",hostId));\n+        }\n+        if(!UtilMethods.isSet(folderByPath) || !UtilMethods.isSet(folderByPath.getInode())) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any folder with name `%s` in the host `%s`\",folder,hostId));\n+        }\n+\n+        return getFolders(folderByPath,user);\n+    }\n+\n+    /**\n+     * This method returns a folder structure with their children recursively based on\n+     * the folder returned by findFolderByPath\n+     *\n+     * @param folder  parent folder to  find\n+     * @param user user\n+     * @return FolderView a folder structure with their children recursively\n+     */\n+    private final FolderView getFolders(final Folder folder, final User user){\n+\n+        final List<FolderView> foldersChildCustoms = new LinkedList<>();\n+        List<Folder> children = null;\n+        try {\n+            children = APILocator.getFolderAPI().findSubFolders(folder, user, false);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTM2", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908936", "createdAt": "2020-08-28T17:32:37Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozN1rOHJO6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozN1rOHJO6WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU0NQ==", "bodyText": "Codacy found an issue: The String literal \"/folder\" appears 6 times in this file; the first occurrence is on line 834", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443545", "createdAt": "2020-08-28T17:32:37Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -844,15 +832,31 @@ public void testFindSubFolders() throws DotDataException, DotSecurityException {\n \n \t@Test\n \tpublic void testFindSubFoldersByHost() throws DotDataException, DotSecurityException {\n-\t\tfinal List<Folder> folders = folderAPI.findSubFolders(host, false);\n+\t\tfinal Host newHost = new SiteDataGen().nextPersisted();\n+\t\tfinal String folderPath = \"/folder\"+System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTUw", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908950", "createdAt": "2020-08-28T17:32:38Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOFrOHJO6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOFrOHJO6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU1MQ==", "bodyText": "Codacy found an issue: Avoid declaring a variable if it is unreferenced before a possible exit point.", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443551", "createdAt": "2020-08-28T17:32:38Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTY0", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908964", "createdAt": "2020-08-28T17:32:39Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOVrOHJO6aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjozOVrOHJO6aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU2MQ==", "bodyText": "Codacy found an issue: Avoid unused imports such as 'com.dotcms.datagen.TestUserUtils'", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443561", "createdAt": "2020-08-28T17:32:39Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -9,14 +9,18 @@\n import com.dotcms.datagen.SiteDataGen;\n import com.dotcms.datagen.TemplateDataGen;\n import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTc3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908977", "createdAt": "2020-08-28T17:32:40Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MFrOHJO6cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MFrOHJO6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU3MQ==", "bodyText": "Codacy found an issue: Unnecessary modifier 'final' on method 'getFolders': private methods cannot be overridden", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443571", "createdAt": "2020-08-28T17:32:40Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/folder/FolderHelper.java", "diffHunk": "@@ -98,4 +100,56 @@ public Folder loadFolderByURI(String siteName, User user, String uri) throws Dot\n         return ret;\n     }\n \n+    /**\n+     *\n+     * @param hostId hostId where the folder lives\n+     * @param folder parent folder to find\n+     * @param user user making the request\n+     * @return FolderView with the info of the folder requested and the subFolders\n+     * @throws DotDataException\n+     * @throws DotSecurityException\n+     */\n+    public FolderView loadFolderAndSubFoldersByPath(final String hostId, final String folder, final User user)\n+            throws DotSecurityException, DotDataException {\n+        final String uriParam = !folder.startsWith(StringPool.FORWARD_SLASH) ? StringPool.FORWARD_SLASH.concat(folder) : folder;\n+        final Host host = APILocator.getHostAPI().find(hostId,user,false);\n+        final Folder folderByPath = APILocator.getFolderAPI().findFolderByPath(uriParam, host, user, false);\n+        if(!UtilMethods.isSet(host)) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any host with id `%s` \",hostId));\n+        }\n+        if(!UtilMethods.isSet(folderByPath) || !UtilMethods.isSet(folderByPath.getInode())) {\n+            throw new IllegalArgumentException(String.format(\" Couldn't find any folder with name `%s` in the host `%s`\",folder,hostId));\n+        }\n+\n+        return getFolders(folderByPath,user);\n+    }\n+\n+    /**\n+     * This method returns a folder structure with their children recursively based on\n+     * the folder returned by findFolderByPath\n+     *\n+     * @param folder  parent folder to  find\n+     * @param user user\n+     * @return FolderView a folder structure with their children recursively\n+     */\n+    private final FolderView getFolders(final Folder folder, final User user){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA4OTky", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477908992", "createdAt": "2020-08-28T17:32:41Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MVrOHJO6gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MVrOHJO6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU4NA==", "bodyText": "Codacy found an issue: The String literal \"User \" appears 33 times in this file; the first occurrence is on line 110", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443584", "createdAt": "2020-08-28T17:32:41Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/portlets/folders/business/FolderAPIImpl.java", "diffHunk": "@@ -84,38 +84,38 @@\n \tprivate final ContentletAPI contentletAPI = APILocator.getContentletAPI();\n \n \t/**\n-\t * Will get a folder for you on a given path for a particular host\n+\t * Will get a folder on a given path for a particular host.\n \t *\n-\t * @param path\n-\t * @param hostId\n-\t * @return\n-\t * @throws DotHibernateException\n+\t * If the folder does not exists will return a folder with null values.\n+\t * If the user does not have permissions over the folder a DotSecurityException will be thrown.\n+\t *\n+\t * @param path path of the requested folder\n+\t * @param host host where the folder should live\n+\t * @return the requested folder if the user has permissions, if not an exception.\n+\t * @throws DotSecurityException\n \t */\n+\n \tprivate final FolderFactory folderFactory = FactoryLocator.getFolderFactory();\n \tprivate final PermissionAPI permissionAPI = getPermissionAPI();\n \n \t@CloseDBIfOpened\n \tpublic Folder findFolderByPath(final String path, final Host host,\n-\t\t\t\t\t\t\t\t   final User user, final boolean respectFrontEndPermissions) throws DotStateException,\n+\t\t\tfinal User user, final boolean respectFrontEndPermissions) throws DotStateException,\n \t\t\tDotDataException, DotSecurityException {\n-\n \t\tfinal Folder folder = folderFactory.findFolderByPath(path, host);\n+\t\tif (folder == null || UtilMethods.isEmpty(folder.getInode()) ||\n+\t\t\t\tpermissionAPI.doesUserHavePermission(folder, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)){\n+\t\t\treturn folder;\n+\t\t}\n \n-\t\tif (folder != null && InodeUtils.isSet(folder.getInode()) &&\n-\t\t\t\t!permissionAPI.doesUserHavePermission(folder, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)) {\n-\n-\t\t\t// SYSTEM_FOLDER means if the user has permissions to the host, then they can see host.com/\n-\t\t\tif(FolderAPI.SYSTEM_FOLDER.equals(folder.getInode())) {\n-\t\t\t\tif(!Host.SYSTEM_HOST.equals(host.getIdentifier())){\n-\t\t\t\t\tif(!permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions)) {\n-\t\t\t\t\t\tthrow new DotSecurityException(\"User \" + (user.getUserId() != null ? user.getUserId() : BLANK) + \" does not have permission to read folder \" + folder.getPath());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n+\t\tif(FolderAPI.SYSTEM_FOLDER.equals(folder.getInode()) &&\n+\t\t\t\t(permissionAPI.doesUserHavePermission(host, PermissionAPI.PERMISSION_READ, user, respectFrontEndPermissions) || host.isSystemHost())){\n+\t\t\t\t\treturn findSystemFolder();\n \t\t}\n \n-\t\treturn folder;\n+\t\tfinal String errorMsg = \"User \" + (user.getUserId() != null ? user.getUserId() : BLANK) + \" does not have permission to read folder \" + folder.getPath()+ \" on host \" + host.getHostname();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA5MDAw", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477909000", "createdAt": "2020-08-28T17:32:42Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MlrOHJO6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzozMjo0MlrOHJO6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzU5MQ==", "bodyText": "Codacy found an issue: The String literal \"folder's owner\" appears 6 times in this file; the first occurrence is on line 837", "url": "https://github.com/dotCMS/core/pull/18976#discussion_r479443591", "createdAt": "2020-08-28T17:32:42Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/folders/business/FolderAPITest.java", "diffHunk": "@@ -844,15 +832,31 @@ public void testFindSubFolders() throws DotDataException, DotSecurityException {\n \n \t@Test\n \tpublic void testFindSubFoldersByHost() throws DotDataException, DotSecurityException {\n-\t\tfinal List<Folder> folders = folderAPI.findSubFolders(host, false);\n+\t\tfinal Host newHost = new SiteDataGen().nextPersisted();\n+\t\tfinal String folderPath = \"/folder\"+System.currentTimeMillis();\n+\n+\t\tfinal Folder folder = folderAPI.createFolders(folderPath, newHost, user, false);\n+\t\tfolder.setOwner(\"folder's owner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTU5OTg2", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477959986", "createdAt": "2020-08-28T18:59:51Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTY0MTUw", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-477964150", "createdAt": "2020-08-28T19:07:20Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzMyOTY3", "url": "https://github.com/dotCMS/core/pull/18976#pullrequestreview-478732967", "createdAt": "2020-08-31T15:48:01Z", "commit": {"oid": "8f4fd194557d3177b954b309efddad0878b2ee6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 674, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}