{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5Njc4NDYy", "number": 19014, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNDoyNFrOEUw-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDo1NFrOEVI_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA5MzY1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/ContentFields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNDoyNFrOG7JeGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozNDoyNFrOG7JeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NDMyOA==", "bodyText": "Nitpick:\nNo constant for this field?", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464674328", "createdAt": "2020-08-03T21:34:24Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/ContentFields.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.dotcms.graphql;\n+\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.BASE_TYPE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.CONTENT_TYPE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.IDENTIFIER;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.INODE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.LIVE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.MOD_DATE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.TITLE;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.URL_MAP;\n+import static com.dotcms.content.elasticsearch.constants.ESMappingConstants.WORKING;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.ARCHIVED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.FOLDER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.HOST_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.LOCKED_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.MOD_USER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.OWNER_KEY;\n+import static com.dotmarketing.portlets.contentlet.model.Contentlet.TITLE_IMAGE_KEY;\n+import static graphql.Scalars.GraphQLBoolean;\n+import static graphql.Scalars.GraphQLID;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.datafetcher.FolderFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.LanguageDataFetcher;\n+import com.dotcms.graphql.datafetcher.SiteFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.TitleImageFieldDataFetcher;\n+import com.dotcms.graphql.datafetcher.UserDataFetcher;\n+import com.dotcms.graphql.util.TypeUtil.TypeFetcher;\n+import graphql.schema.GraphQLTypeReference;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Utility class that defines and returns the available fields for the {@link InterfaceType#CONTENTLET}\n+ */\n+public final class ContentFields {\n+\n+    private ContentFields() {}\n+\n+    public static Map<String, TypeFetcher> getContentFields() {\n+        final Map<String, TypeFetcher> contentFields = new HashMap<>();\n+        contentFields.put(MOD_DATE, new TypeFetcher(GraphQLString));\n+        contentFields.put(TITLE, new TypeFetcher(GraphQLString));\n+        contentFields.put(TITLE_IMAGE_KEY, new TypeFetcher(GraphQLTypeReference.typeRef(\"Binary\"), new TitleImageFieldDataFetcher()));\n+        contentFields.put(CONTENT_TYPE, new TypeFetcher(GraphQLString));\n+        contentFields.put(BASE_TYPE, new TypeFetcher(GraphQLString));\n+        contentFields.put(LIVE, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(WORKING, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(ARCHIVED_KEY, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(LOCKED_KEY, new TypeFetcher(GraphQLBoolean));\n+        contentFields.put(\"conLanguage\", new TypeFetcher(GraphQLTypeReference.typeRef(\"Language\"), new LanguageDataFetcher()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d7fcc1a66e77daed2928537252931681dea50ec"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjEwNjM3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTozOToxN1rOG7JmEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTo1NTowMVrOG7J-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NjM2OA==", "bodyText": "Nitpick: to match every other field, can we declare it in the same order? That is: private static final...", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464676368", "createdAt": "2020-08-03T21:39:17Z", "author": {"login": "victoralfaro-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -62,15 +48,15 @@\n     FORM(FormContentType.class),\n     DOTASSET(DotAssetContentType.class);\n \n-    private Class<? extends ContentType> baseContentType;\n+    final private Class<? extends ContentType> baseContentType;\n \n     InterfaceType(final Class<? extends ContentType> baseContentType) {\n         this.baseContentType = baseContentType;\n     }\n \n     public static Set<String> CONTENT_INTERFACE_FIELDS = new HashSet<>();\n \n-    private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();\n+    final private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d7fcc1a66e77daed2928537252931681dea50ec"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY4MjY0MA==", "bodyText": "Done", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r464682640", "createdAt": "2020-08-03T21:55:01Z", "author": {"login": "dsilvam"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -62,15 +48,15 @@\n     FORM(FormContentType.class),\n     DOTASSET(DotAssetContentType.class);\n \n-    private Class<? extends ContentType> baseContentType;\n+    final private Class<? extends ContentType> baseContentType;\n \n     InterfaceType(final Class<? extends ContentType> baseContentType) {\n         this.baseContentType = baseContentType;\n     }\n \n     public static Set<String> CONTENT_INTERFACE_FIELDS = new HashSet<>();\n \n-    private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();\n+    final private static Map<String, GraphQLInterfaceType> interfaceTypes = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3NjM2OA=="}, "originalCommit": {"oid": "0d7fcc1a66e77daed2928537252931681dea50ec"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAyOTUyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDo1M1rOG7usGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDo1M1rOG7usGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDEyMw==", "bodyText": "Codacy found an issue: This statement should have braces", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r465284123", "createdAt": "2020-08-04T19:34:53Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -110,32 +79,55 @@\n         interfaceTypes.put(\"CONTENT\", createInterfaceType(CONTENT_INTERFACE_NAME, contentFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> fileAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(fileAssetFields, ImmutableFileAssetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"FILEASSET\", createInterfaceType(FILE_INTERFACE_NAME, fileAssetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> pageAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(pageAssetFields, ImmutablePageContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"HTMLPAGE\", createInterfaceType(PAGE_INTERFACE_NAME, pageAssetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> personaFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(personaFields, ImmutablePersonaContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"PERSONA\", createInterfaceType(PERSONA_INTERFACE_NAME, personaFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> widgetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(widgetFields, ImmutableWidgetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"WIDGET\", createInterfaceType(WIDGET_INTERFACE_NAME, widgetFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> vanityUrlFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(vanityUrlFields, ImmutableVanityUrlContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"VANITY_URL\", createInterfaceType(VANITY_URL_INTERFACE_NAME, vanityUrlFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> keyValueFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(keyValueFields, ImmutableKeyValueContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"KEY_VALUE\", createInterfaceType(KEY_VALUE_INTERFACE_NAME, keyValueFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> formFields = new HashMap<>(contentFields);\n-        interfaceTypes.put(\"FORM\", createInterfaceType(FORM_INTERFACE_NAME, formFields, new ContentResolver()));\n+        addBaseTypeFields(formFields, ImmutableFormContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n+        interfaceTypes.put(\"FORM\", createInterfaceType(FORM_INTERFACE_NAME, formFields,\n+                new ContentResolver()));\n \n         final Map<String, TypeFetcher> dotAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(dotAssetFields, ImmutableDotAssetContentType.builder().name(\"dummy\")\n+                .build().requiredFields());\n         interfaceTypes.put(\"DOTASSET\", createInterfaceType(DOTASSET_INTERFACE_NAME, dotAssetFields, new ContentResolver()));\n     }\n \n-    public static Map<String, TypeFetcher> getContentFields() {\n-        return contentFields;\n+    private static void addBaseTypeFields(Map<String, TypeFetcher> baseTypeFields,\n+            List<Field> requiredFormFields) {\n+        for (final Field formField : requiredFormFields) {\n+            if(!formField.fixed()) continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ca4c75b00bab15023b664fd51dc44d10fd8afb"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjAyOTY4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDo1NFrOG7usMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTozNDo1NFrOG7usMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4NDE0Nw==", "bodyText": "Codacy found an issue: The String literal \"dummy\" appears 7 times in this file; the first occurrence is on line 81", "url": "https://github.com/dotCMS/core/pull/19014#discussion_r465284147", "createdAt": "2020-08-04T19:34:54Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/graphql/InterfaceType.java", "diffHunk": "@@ -110,32 +79,55 @@\n         interfaceTypes.put(\"CONTENT\", createInterfaceType(CONTENT_INTERFACE_NAME, contentFields, new ContentResolver()));\n \n         final Map<String, TypeFetcher> fileAssetFields = new HashMap<>(contentFields);\n+        addBaseTypeFields(fileAssetFields, ImmutableFileAssetContentType.builder().name(\"dummy\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ca4c75b00bab15023b664fd51dc44d10fd8afb"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1946, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}