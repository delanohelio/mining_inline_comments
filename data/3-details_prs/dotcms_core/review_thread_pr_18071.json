{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjA3MDU5", "number": 18071, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyMDowMlrODj996A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNlrODkzKLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDQyMDI0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotmarketing/sitesearch/business/SiteSearchAPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMjoyMDowMlrOFwEc-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwNDo0ODoxMVrOFwMQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0ODkyMg==", "bodyText": "Add doc", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385948922", "createdAt": "2020-02-28T22:20:02Z", "author": {"login": "jdotcms"}, "path": "dotCMS/src/main/java/com/dotmarketing/sitesearch/business/SiteSearchAPI.java", "diffHunk": "@@ -24,12 +24,16 @@\n \r\n \tList<String> listIndices();\r\n \r\n+    boolean isDefaultIndex(String indexName) throws DotDataException;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85abeeea02f37692f1b312addfbdf72f7f917082"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3Njc3Nw==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r386076777", "createdAt": "2020-03-01T04:48:11Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotmarketing/sitesearch/business/SiteSearchAPI.java", "diffHunk": "@@ -24,12 +24,16 @@\n \r\n \tList<String> listIndices();\r\n \r\n+    boolean isDefaultIndex(String indexName) throws DotDataException;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0ODkyMg=="}, "originalCommit": {"oid": "85abeeea02f37692f1b312addfbdf72f7f917082"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjAyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxMVrOFwHYXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxMVrOFwHYXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njg5Mw==", "bodyText": "Issue found: Private field 'indexName' could be made final; it is only initialized in the declaration or constructor.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996893", "createdAt": "2020-02-29T03:33:11Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;\n+                }\n+            }\n+            if(UtilMethods.isSet(indexName)){\n+                final SiteSearchResults search = siteSearchAPI.search(indexName, \"*\",0, 10);\n+                recordCount = search.getTotalResults();\n+            }\n+        }//if indexName is null. Then the result is interpreted as a new index.\n+        return new IndexMetaData(indexName, defaultIndex, indexAlias, recordCount == 0);\n+    }\n+\n+    static class IndexMetaData {\n+\n+        private String indexName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 473}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjAzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxMlrOFwHYXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxMlrOFwHYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njg5NA==", "bodyText": "Issue found: Local variable 'switchIndex' could be declared final", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996894", "createdAt": "2020-02-29T03:33:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n+        AdminLogger.log(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n \n         HibernateUtil.startTransaction();\n \n-        JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n+        final JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n \n-        String jobId=(String)dataMap.get(\"JOB_ID\");\n-        if(jobId==null) {\n-            jobId=dataMap.getString(\"QUARTZ_JOB_NAME\");\n+        String jobId = (String) dataMap.get(JOB_ID);\n+        if (jobId == null) {\n+            jobId = dataMap.getString(QUARTZ_JOB_NAME);\n         }\n \n-        boolean indexAll = UtilMethods.isSet((String) dataMap.get(\"indexAll\")) ? true : false;\n-        String[] indexHosts = null;\n-        Object obj = (dataMap.get(\"indexhost\") != null) ?dataMap.get(\"indexhost\") : new String[0];\n-        if(obj instanceof String){\n-            indexHosts = new String[] {(String) obj};\n-        }\n-        else{\n+        final boolean indexAll = UtilMethods.isSet((String) dataMap.get(INDEX_ALL));\n+        final String[] indexHosts;\n+        final Object obj = (dataMap.get(INDEX_HOST) != null) ? dataMap.get(INDEX_HOST) : new String[0];\n+        if (obj instanceof String) {\n+            indexHosts = new String[]{(String) obj};\n+        } else {\n             indexHosts = (String[]) obj;\n         }\n \n+        final boolean incrementalParam = dataMap.getBooleanFromString(INCREMENTAL);\n \n+        final User userToRun = userAPI.getSystemUser();\n \n-        boolean incremental = dataMap.getString(\"incremental\") != null;\n-\n-        User userToRun = APILocator.getUserAPI().getSystemUser();\n+        final boolean include = (\"all\".equals(dataMap.getString(INCLUDE_EXCLUDE)) || INCLUDE\n+                .equals(dataMap.getString(INCLUDE_EXCLUDE)));\n \n-        boolean include = (\"all\".equals(dataMap.getString(\"includeExclude\")) || \"include\".equals(dataMap.getString(\"includeExclude\")));\n-\n-        String path = dataMap.getString(\"paths\");\n-        List<String> paths = new ArrayList<String>();\n-        if(path != null){\n+        String path = dataMap.getString(PATHS);\n+        final List<String> paths = new ArrayList<>();\n+        if (path != null) {\n             path = path.replace(',', '\\r');\n             path = path.replace('\\n', '\\r');\n-            for(String x : path.split(\"\\r\")){\n-                if(UtilMethods.isSet(x)){\n+            for (String x : path.split(\"\\r\")) {\n+                if (UtilMethods.isSet(x)) {\n                     paths.add(x);\n                 }\n             }\n         }\n-\n-        Date startDate,endDate;\n-        if(incremental) {\n-            endDate=jobContext.getFireTime();\n-\n-            startDate=null;\n-            try {\n-                List<SiteSearchAudit> recentAudits = APILocator.getSiteSearchAuditAPI().findRecentAudits(jobId, 0, 1);\n-                if(recentAudits.size()>0)\n-                    startDate=recentAudits.get(0).getFireDate();\n-            }\n-            catch(Exception ex) {\n-                Logger.warn(this, \"can't determine last audit entry for this job\",ex);\n-            }\n+        final boolean isRunNowJob = dataMap.getBooleanFromString(RUN_NOW);\n+        // Run now jobs can not get the incremental treatment.\n+        final IndexMetaData indexMetaData = getIndexMetaData(dataMap.getString(INDEX_ALIAS));\n+        final String newIndexName;\n+        final String indexName;\n+\n+        final String jobName = dataMap.getString(QUARTZ_JOB_NAME);\n+        final Date startDate, endDate;\n+        final List<SiteSearchAudit> recentAudits = isRunNowJob ? Collections.emptyList()\n+                : siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+\n+        final boolean incremental = (incrementalParam && !isRunNowJob && !indexMetaData.isNewIndex() && !indexMetaData.isEmpty() && !recentAudits.isEmpty());\n+        //We can only run incrementally if all the above pre-requisites are met.\n+        if (incremental) {\n+            //Incremental mode is useful only if there's already an index previously built.\n+            //Incremental mode also implies we have to have a date range to work on.\n+            //So if we have an empty index or we lack of audit data we can not run incrementally.\n+            //Even if the user wants to.\n+            newIndexName = null;\n+            endDate = jobContext.getFireTime();\n+            startDate = recentAudits.get(0).getFireDate();\n+            //For incremental jobs, we write the bundle to the same folder every time.\n+            bundleId = StringUtils.camelCaseLower(jobName);\n+            //We'll be working directly into the final index.\n+            indexName = indexMetaData.getIndexName();\n+        } else {\n+            //Set null explicitly just in case\n+            startDate = endDate = null;\n+            // For non-incremental jobs. We create a new folder using a date stamp.\n+            // But even if this run was executed non-incrementally for not having met any of the pre-requisits\n+            // The job originally was meant to run incrementally therefore the results must be stored in the job specific folder.\n+            // So they will still be available in the next round.\n+            bundleId = incrementalParam ? StringUtils.camelCaseLower(jobName) :\n+            // Otherwise it is safe to create a unique time-stamp like folder name.\n+                       UtilMethods.dateToJDBC(new Date()).replace(':', '-').replace(' ', '_');\n+            // We use a new index name only on non-incremental\n+            newIndexName = newIndexName();\n+            final String newAlias = indexMetaData.isNewIndex() ? indexMetaData.getAlias() : null ;\n+            siteSearchAPI.createSiteSearchIndex(newIndexName, newAlias, 1);\n+            // This is the old index we will swap from.\n+            // if it doesnt exist. It doesnt matter here since we will end up with the new one.\n+            indexName = indexMetaData.getIndexName();\n         }\n-        else {\n-            // set null explicitly just in case\n-            startDate=endDate=null;\n+\n+        Logger.info(SiteSearchJobImpl.class, () -> String\n+                .format(\" Incremental mode [%s]. current index is `%s`. new index is `%s`. bundle id is `%s` \",\n+                        BooleanUtils.toStringYesNo(incremental), indexName ,\n+                        UtilMethods.isSet(newIndexName) ? newIndexName : \"N/A\",\n+                        bundleId));\n+\n+        final List<Host> hosts;\n+        if (indexAll) {\n+            hosts = hostAPI.findAll(userToRun, true);\n+        } else {\n+            hosts = Stream.of(indexHosts).map(h -> {\n+                try {\n+                   return hostAPI.find(h, userToRun, true);\n+                } catch (DotDataException | DotSecurityException e) {\n+                    Logger.error(SiteSearchJobImpl.class, e);\n+                }\n+                return null;\n+            }).filter(Objects::nonNull).collect(Collectors.toList());\n         }\n \n-        String[] languageToIndex=(String[])dataMap.get(\"langToIndex\");\n-        int counter = 0;\n-        String indexName = null;\n-        boolean createNew=false;\n-        for(String lang : languageToIndex) {\n-        \tcounter = counter + 1;\n-            SiteSearchConfig config = new SiteSearchConfig();\n+        final List<String> languageToIndex = Arrays.asList((String[])dataMap.get(LANG_TO_INDEX));\n+        final ListIterator<String> listIterator = languageToIndex.listIterator();\n+        while (listIterator.hasNext()) {\n+            final String lang = listIterator.next();\n+            final SiteSearchConfig config = new SiteSearchConfig();\n             config.setJobId(jobId);\n             config.setLanguage(Long.parseLong(lang));\n-\n-            config.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n-\n-            List<Host> hosts=new ArrayList<Host>();\n-\n-            if(indexAll){\n-                    hosts = APILocator.getHostAPI().findAll(userToRun, true);\n-            }else{\n-\n-                for(String h : indexHosts){\n-                    hosts.add(APILocator.getHostAPI().find(h, userToRun, true));\n-                }\n-\n-            }\n-\n-            config.setHosts( hosts);\n-\n-            // reuse or create new indexes as needed\n-            String indexAlias = dataMap.getString(\"indexAlias\");\n-            ESIndexAPI iapi=new ESIndexAPI();\n-            Map<String,String> aliasMap=iapi.getAliasToIndexMap(APILocator.getSiteSearchAPI().listIndices());\n-\n-            if(counter==1){\n-\t            if(indexAlias.equals(APILocator.getIndiciesAPI().loadIndicies().getSiteSearch())){\n-\t            \tLogger.info(this, \"Index Alias is DEFAULT\");\n-\t                indexName = APILocator.getIndiciesAPI().loadIndicies().getSiteSearch();\n-\t            }\n-\t            else if(indexAlias.equals(\"create-new\")){\n-\t            \tLogger.info(this, \"Index Alias is default\");\n-\t            \tcreateNew=true;\n-\t                indexName = SiteSearchAPI.ES_SITE_SEARCH_NAME  + \"_\" + ESMappingAPIImpl.datetimeFormat.format(new Date());\n-\t                APILocator.getSiteSearchAPI().createSiteSearchIndex(indexName, null, 1);\n-\t            }\n-\t            else {\n-\t                indexName=aliasMap.get(indexAlias);\n-\t                Logger.info(this, \"Index Alias is \" + indexName);\n-\t            }\n-            }\n-            if(createNew && languageToIndex.length == counter){\n-            \tconfig.setSwitchIndexWhenDone(true);\n-            }\n-\n+            config.setJobName(jobName);\n+            config.setHosts(hosts);\n+            config.setNewIndexName(newIndexName);\n             config.setIndexName(indexName);\n-\n-\n-\n-            // if it is going to be an incremental job, write the bundle to the same folder\n-            // every time.  Otherwise, create a new folder using a date stamp.\n-            if(dataMap.get(\"incremental\")!=null){\n-                config.setId(StringUtils.camelCaseLower(config.getJobName()));\n-            }\n-            else{\n-                String x = UtilMethods.dateToJDBC(new Date()).replace(':', '-').replace(' ', '_');\n-                config.setId(x);\n-            }\n-\n+            config.setId(bundleId);\n             config.setStartDate(startDate);\n             config.setEndDate(endDate);\n             config.setIncremental(incremental);\n             config.setUser(userToRun);\n+\n             if(include) {\n                 config.setIncludePatterns(paths);\n-            }\n-            else {\n+            } else {\n                 config.setExcludePatterns(paths);\n             }\n \n-            APILocator.getPublisherAPI().publish(config,status);\n-\n+            //We should always replace the index when performing on non-incremental mode.\n+            //That means we drop the old one and re-use the alias.\n+            //But we only activate the new index when the old one was the default.\n+            //Or there wasn't any previous index.\n+            //it must be done on the last round of our loop.\n+            boolean switchIndex = !incremental && !listIterator.hasNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 375}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjA4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxM1rOFwHYYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxM1rOFwHYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njg5OQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996899", "createdAt": "2020-02-29T03:33:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n+        AdminLogger.log(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n \n         HibernateUtil.startTransaction();\n \n-        JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n+        final JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n \n-        String jobId=(String)dataMap.get(\"JOB_ID\");\n-        if(jobId==null) {\n-            jobId=dataMap.getString(\"QUARTZ_JOB_NAME\");\n+        String jobId = (String) dataMap.get(JOB_ID);\n+        if (jobId == null) {\n+            jobId = dataMap.getString(QUARTZ_JOB_NAME);\n         }\n \n-        boolean indexAll = UtilMethods.isSet((String) dataMap.get(\"indexAll\")) ? true : false;\n-        String[] indexHosts = null;\n-        Object obj = (dataMap.get(\"indexhost\") != null) ?dataMap.get(\"indexhost\") : new String[0];\n-        if(obj instanceof String){\n-            indexHosts = new String[] {(String) obj};\n-        }\n-        else{\n+        final boolean indexAll = UtilMethods.isSet((String) dataMap.get(INDEX_ALL));\n+        final String[] indexHosts;\n+        final Object obj = (dataMap.get(INDEX_HOST) != null) ? dataMap.get(INDEX_HOST) : new String[0];\n+        if (obj instanceof String) {\n+            indexHosts = new String[]{(String) obj};\n+        } else {\n             indexHosts = (String[]) obj;\n         }\n \n+        final boolean incrementalParam = dataMap.getBooleanFromString(INCREMENTAL);\n \n+        final User userToRun = userAPI.getSystemUser();\n \n-        boolean incremental = dataMap.getString(\"incremental\") != null;\n-\n-        User userToRun = APILocator.getUserAPI().getSystemUser();\n+        final boolean include = (\"all\".equals(dataMap.getString(INCLUDE_EXCLUDE)) || INCLUDE\n+                .equals(dataMap.getString(INCLUDE_EXCLUDE)));\n \n-        boolean include = (\"all\".equals(dataMap.getString(\"includeExclude\")) || \"include\".equals(dataMap.getString(\"includeExclude\")));\n-\n-        String path = dataMap.getString(\"paths\");\n-        List<String> paths = new ArrayList<String>();\n-        if(path != null){\n+        String path = dataMap.getString(PATHS);\n+        final List<String> paths = new ArrayList<>();\n+        if (path != null) {\n             path = path.replace(',', '\\r');\n             path = path.replace('\\n', '\\r');\n-            for(String x : path.split(\"\\r\")){\n-                if(UtilMethods.isSet(x)){\n+            for (String x : path.split(\"\\r\")) {\n+                if (UtilMethods.isSet(x)) {\n                     paths.add(x);\n                 }\n             }\n         }\n-\n-        Date startDate,endDate;\n-        if(incremental) {\n-            endDate=jobContext.getFireTime();\n-\n-            startDate=null;\n-            try {\n-                List<SiteSearchAudit> recentAudits = APILocator.getSiteSearchAuditAPI().findRecentAudits(jobId, 0, 1);\n-                if(recentAudits.size()>0)\n-                    startDate=recentAudits.get(0).getFireDate();\n-            }\n-            catch(Exception ex) {\n-                Logger.warn(this, \"can't determine last audit entry for this job\",ex);\n-            }\n+        final boolean isRunNowJob = dataMap.getBooleanFromString(RUN_NOW);\n+        // Run now jobs can not get the incremental treatment.\n+        final IndexMetaData indexMetaData = getIndexMetaData(dataMap.getString(INDEX_ALIAS));\n+        final String newIndexName;\n+        final String indexName;\n+\n+        final String jobName = dataMap.getString(QUARTZ_JOB_NAME);\n+        final Date startDate, endDate;\n+        final List<SiteSearchAudit> recentAudits = isRunNowJob ? Collections.emptyList()\n+                : siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+\n+        final boolean incremental = (incrementalParam && !isRunNowJob && !indexMetaData.isNewIndex() && !indexMetaData.isEmpty() && !recentAudits.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjEyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNFrOFwHYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNFrOFwHYZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkwMw==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996903", "createdAt": "2020-02-29T03:33:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNVrOFwHYaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNVrOFwHYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkwNA==", "bodyText": "Issue found: The String literal \"all\" appears 4 times in this file; the first occurrence is on line 165", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996904", "createdAt": "2020-02-29T03:33:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjE1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNlrOFwHYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxNlrOFwHYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkwNw==", "bodyText": "Issue found: The String literal \"content1\" appears 4 times in this file; the first occurrence is on line 121", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996907", "createdAt": "2020-02-29T03:33:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjE3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxN1rOFwHYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNzoxMFrOFxSwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkwOQ==", "bodyText": "Issue found: Local variable 'indices' could be declared final", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996909", "createdAt": "2020-02-29T03:33:17Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context.getJobDetail()).thenReturn(jobDetail);\n+        Mockito.when(context.getFireTime()).thenReturn(new Date());\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+        impl.run(context);\n+\n+        final List<String> indicesAfterTest = siteSearchAPI.listIndices();\n+        Assert.assertFalse(indicesAfterTest.isEmpty());\n+        final String newIndexName = indicesAfterTest.get(0);\n+\n+        Assert.assertEquals(\"New index is expected have same Alias\", alias, esIndexAPI.getIndexAlias(newIndexName));\n+        final SiteSearchResults search = siteSearchAPI.search(newIndexName, \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+        final List<SiteSearchAudit> recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+        Assert.assertEquals(1, siteSearchAudit.getPagesCount());\n+        Assert.assertFalse(siteSearchAudit.isIncremental()); //did not run incrementally since it was launched as a run-now.\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newIndexName));\n+    }\n+\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Create_Second_Index_Run_Non_Incrementally_Expect_Non_Default_New_Index()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String defaultAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String defaultIndexName = IndexType.SITE_SEARCH.getPrefix() + \"_\" + timeMillis1;\n+        siteSearchAPI.createSiteSearchIndex(defaultIndexName, defaultAlias, 1);\n+        siteSearchAPI.activateIndex(defaultIndexName); //Make it default.\n+\n+        final String jobId1 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap1 = new JobDataMap();\n+        jobDataMap1.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_ALIAS, defaultAlias);\n+        jobDataMap1.put(SiteSearchJobImpl.JOB_ID, jobId1);\n+        jobDataMap1.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap1.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap1.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap1);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context1);\n+        //First run will create the default index\n+\n+        List <String> indices = siteSearchAPI.listIndices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTg5OA==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231898", "createdAt": "2020-03-03T19:07:10Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context.getJobDetail()).thenReturn(jobDetail);\n+        Mockito.when(context.getFireTime()).thenReturn(new Date());\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+        impl.run(context);\n+\n+        final List<String> indicesAfterTest = siteSearchAPI.listIndices();\n+        Assert.assertFalse(indicesAfterTest.isEmpty());\n+        final String newIndexName = indicesAfterTest.get(0);\n+\n+        Assert.assertEquals(\"New index is expected have same Alias\", alias, esIndexAPI.getIndexAlias(newIndexName));\n+        final SiteSearchResults search = siteSearchAPI.search(newIndexName, \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+        final List<SiteSearchAudit> recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+        Assert.assertEquals(1, siteSearchAudit.getPagesCount());\n+        Assert.assertFalse(siteSearchAudit.isIncremental()); //did not run incrementally since it was launched as a run-now.\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newIndexName));\n+    }\n+\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Create_Second_Index_Run_Non_Incrementally_Expect_Non_Default_New_Index()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String defaultAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String defaultIndexName = IndexType.SITE_SEARCH.getPrefix() + \"_\" + timeMillis1;\n+        siteSearchAPI.createSiteSearchIndex(defaultIndexName, defaultAlias, 1);\n+        siteSearchAPI.activateIndex(defaultIndexName); //Make it default.\n+\n+        final String jobId1 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap1 = new JobDataMap();\n+        jobDataMap1.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_ALIAS, defaultAlias);\n+        jobDataMap1.put(SiteSearchJobImpl.JOB_ID, jobId1);\n+        jobDataMap1.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap1.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap1.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap1);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context1);\n+        //First run will create the default index\n+\n+        List <String> indices = siteSearchAPI.listIndices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkwOQ=="}, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxOFrOFwHYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoxOFrOFwHYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkxMA==", "bodyText": "Issue found: Document empty method body", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996910", "createdAt": "2020-02-29T03:33:18Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjIxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyMFrOFwHYcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjo1NlrOFxSwHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkxMw==", "bodyText": "Issue found: Perhaps 'indicesAPI' could be replaced by a local variable.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996913", "createdAt": "2020-02-29T03:33:20Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTc3NA==", "bodyText": "nah", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231774", "createdAt": "2020-03-03T19:06:56Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkxMw=="}, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjI1OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContentletDataGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyMVrOFwHYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyMVrOFwHYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkxNw==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996917", "createdAt": "2020-02-29T03:33:21Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContentletDataGen.java", "diffHunk": "@@ -359,6 +356,26 @@ public static void destroy(final Contentlet contentlet, final Boolean failSilent\n         }\n     }\n \n+    public static void unpublish(final Contentlet contentlet) {\n+       unpublish(contentlet, true);\n+    }\n+\n+    @WrapInTransaction\n+    public static void unpublish(final Contentlet contentlet, final Boolean failSilently) {\n+\n+        if (null != contentlet) {\n+            try {\n+                APILocator.getContentletAPI().unpublish(contentlet, APILocator.systemUser(), false);\n+            } catch (Exception e) {\n+                if (failSilently) {\n+                    Logger.error(ContentTypeDataGen.class, \"Unable to unpublish Contentlet.\", e);\n+                } else {\n+                    throw new RuntimeException(\"Unable to unpublish Contentlete.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjI2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyM1rOFwHYdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyM1rOFwHYdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkxOQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996919", "createdAt": "2020-02-29T03:33:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n+        AdminLogger.log(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n \n         HibernateUtil.startTransaction();\n \n-        JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n+        final JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n \n-        String jobId=(String)dataMap.get(\"JOB_ID\");\n-        if(jobId==null) {\n-            jobId=dataMap.getString(\"QUARTZ_JOB_NAME\");\n+        String jobId = (String) dataMap.get(JOB_ID);\n+        if (jobId == null) {\n+            jobId = dataMap.getString(QUARTZ_JOB_NAME);\n         }\n \n-        boolean indexAll = UtilMethods.isSet((String) dataMap.get(\"indexAll\")) ? true : false;\n-        String[] indexHosts = null;\n-        Object obj = (dataMap.get(\"indexhost\") != null) ?dataMap.get(\"indexhost\") : new String[0];\n-        if(obj instanceof String){\n-            indexHosts = new String[] {(String) obj};\n-        }\n-        else{\n+        final boolean indexAll = UtilMethods.isSet((String) dataMap.get(INDEX_ALL));\n+        final String[] indexHosts;\n+        final Object obj = (dataMap.get(INDEX_HOST) != null) ? dataMap.get(INDEX_HOST) : new String[0];\n+        if (obj instanceof String) {\n+            indexHosts = new String[]{(String) obj};\n+        } else {\n             indexHosts = (String[]) obj;\n         }\n \n+        final boolean incrementalParam = dataMap.getBooleanFromString(INCREMENTAL);\n \n+        final User userToRun = userAPI.getSystemUser();\n \n-        boolean incremental = dataMap.getString(\"incremental\") != null;\n-\n-        User userToRun = APILocator.getUserAPI().getSystemUser();\n+        final boolean include = (\"all\".equals(dataMap.getString(INCLUDE_EXCLUDE)) || INCLUDE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjI3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyM1rOFwHYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyM1rOFwHYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyMA==", "bodyText": "Issue found: Private field 'empty' could be made final; it is only initialized in the declaration or constructor.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996920", "createdAt": "2020-02-29T03:33:23Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;\n+                }\n+            }\n+            if(UtilMethods.isSet(indexName)){\n+                final SiteSearchResults search = siteSearchAPI.search(indexName, \"*\",0, 10);\n+                recordCount = search.getTotalResults();\n+            }\n+        }//if indexName is null. Then the result is interpreted as a new index.\n+        return new IndexMetaData(indexName, defaultIndex, indexAlias, recordCount == 0);\n+    }\n+\n+    static class IndexMetaData {\n+\n+        private String indexName;\n+        private boolean defaultIndex;\n+        private String alias;\n+        private boolean empty;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 476}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjI4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyNVrOFwHYeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyNVrOFwHYeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyMQ==", "bodyText": "Issue found: Private field 'defaultIndex' could be made final; it is only initialized in the declaration or constructor.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996921", "createdAt": "2020-02-29T03:33:25Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;\n+                }\n+            }\n+            if(UtilMethods.isSet(indexName)){\n+                final SiteSearchResults search = siteSearchAPI.search(indexName, \"*\",0, 10);\n+                recordCount = search.getTotalResults();\n+            }\n+        }//if indexName is null. Then the result is interpreted as a new index.\n+        return new IndexMetaData(indexName, defaultIndex, indexAlias, recordCount == 0);\n+    }\n+\n+    static class IndexMetaData {\n+\n+        private String indexName;\n+        private boolean defaultIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 474}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjI5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyNlrOFwHYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyNlrOFwHYeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyMg==", "bodyText": "Issue found: Assigning an Object to null is a code smell.  Consider refactoring.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996922", "createdAt": "2020-02-29T03:33:26Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 460}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjMxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyN1rOFwHYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyN1rOFwHYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyNA==", "bodyText": "Issue found: Avoid reassigning parameters such as 'indexAlias'", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996924", "createdAt": "2020-02-29T03:33:27Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 442}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjMzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyOFrOFwHYfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyOFrOFwHYfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyNg==", "bodyText": "Issue found: Avoid unused private fields such as 'indicesAPI'.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996926", "createdAt": "2020-02-29T03:33:28Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyOVrOFwHYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzoyOVrOFwHYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkyOA==", "bodyText": "Issue found: Private field 'alias' could be made final; it is only initialized in the declaration or constructor.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996928", "createdAt": "2020-02-29T03:33:29Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;\n+                }\n+            }\n+            if(UtilMethods.isSet(indexName)){\n+                final SiteSearchResults search = siteSearchAPI.search(indexName, \"*\",0, 10);\n+                recordCount = search.getTotalResults();\n+            }\n+        }//if indexName is null. Then the result is interpreted as a new index.\n+        return new IndexMetaData(indexName, defaultIndex, indexAlias, recordCount == 0);\n+    }\n+\n+    static class IndexMetaData {\n+\n+        private String indexName;\n+        private boolean defaultIndex;\n+        private String alias;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 475}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjQwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzozMFrOFwHYhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzozMFrOFwHYhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjkzNA==", "bodyText": "Issue found: The String literal \"; Job Identifier: \" appears 4 times in this file; the first occurrence is on line 128", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996934", "createdAt": "2020-02-29T03:33:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjQ2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzozMFrOFwHYjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjo0MlrOFxSvow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njk0MA==", "bodyText": "Issue found: System.out.println is used", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996940", "createdAt": "2020-02-29T03:33:30Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context.getJobDetail()).thenReturn(jobDetail);\n+        Mockito.when(context.getFireTime()).thenReturn(new Date());\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+        impl.run(context);\n+\n+        final List<String> indicesAfterTest = siteSearchAPI.listIndices();\n+        Assert.assertFalse(indicesAfterTest.isEmpty());\n+        final String newIndexName = indicesAfterTest.get(0);\n+\n+        Assert.assertEquals(\"New index is expected have same Alias\", alias, esIndexAPI.getIndexAlias(newIndexName));\n+        final SiteSearchResults search = siteSearchAPI.search(newIndexName, \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+        final List<SiteSearchAudit> recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+        Assert.assertEquals(1, siteSearchAudit.getPagesCount());\n+        Assert.assertFalse(siteSearchAudit.isIncremental()); //did not run incrementally since it was launched as a run-now.\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newIndexName));\n+    }\n+\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Create_Second_Index_Run_Non_Incrementally_Expect_Non_Default_New_Index()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String defaultAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String defaultIndexName = IndexType.SITE_SEARCH.getPrefix() + \"_\" + timeMillis1;\n+        siteSearchAPI.createSiteSearchIndex(defaultIndexName, defaultAlias, 1);\n+        siteSearchAPI.activateIndex(defaultIndexName); //Make it default.\n+\n+        final String jobId1 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap1 = new JobDataMap();\n+        jobDataMap1.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_ALIAS, defaultAlias);\n+        jobDataMap1.put(SiteSearchJobImpl.JOB_ID, jobId1);\n+        jobDataMap1.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap1.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap1.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap1);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context1);\n+        //First run will create the default index\n+\n+        List <String> indices = siteSearchAPI.listIndices();\n+        Assert.assertTrue(indices.contains(defaultIndexName));\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId1, 0, 1);\n+\n+        //Since non-incremental runs will use its own brand new index\n+        //This is the only trustworthy way to retrieve the index name that was created.\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final String newDefaultIndexName = recentAudits.get(0).getIndexName();\n+        Assert.assertTrue( siteSearchAPI.isDefaultIndex(newDefaultIndexName));\n+\n+        //Second index\n+        final long timeMillis2 = System.currentTimeMillis();\n+        final String newIndexAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" +timeMillis2;\n+        final String newIndexName =  IndexType.SITE_SEARCH.getPrefix() + \"_\" +timeMillis2;\n+        siteSearchAPI.createSiteSearchIndex(newIndexName, newIndexAlias, 1);\n+\n+        final String jobId2 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap2 = new JobDataMap();\n+        jobDataMap2.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap2.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap2.put(SiteSearchJobImpl.INDEX_ALIAS, newIndexAlias);\n+        jobDataMap2.put(SiteSearchJobImpl.JOB_ID, jobId2);\n+        jobDataMap2.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap2.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap2.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap2.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail2 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail2.getJobDataMap()).thenReturn(jobDataMap2);\n+        final JobExecutionContext context2 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context2.getJobDetail()).thenReturn(jobDetail2);\n+        Mockito.when(context2.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context2);\n+        //Second run will create the another index. But the first one should remain as default.\n+\n+        //Check the original index is still the default\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newDefaultIndexName));\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId2, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+\n+        final SiteSearchResults search = siteSearchAPI.search(siteSearchAudit.getIndexName(), \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+\n+    }\n+\n+    @Test\n+    public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Page_Test_Changes_Are_Picked_Unpublish_Then_Verify_Page_Is_Gone()\n+    throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+\n+        final String jobName = \"Any-Scheduled-Job-\" + System.currentTimeMillis();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String newIndexAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String jobId = UUIDUtil.uuid();\n+        // As an incremental scheduled type of job.\n+        // Every single run has to be tied to the same job id.\n+\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.FALSE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, newIndexAlias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, jobName);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        final SiteSearchJobImpl firstRunJob = new SiteSearchJobImpl();\n+        firstRunJob.run(context1);\n+\n+        String generatedBundleId1 = firstRunJob.getBundleId();\n+        Assert.assertNotNull(generatedBundleId1);\n+        System.out.println(generatedBundleId1);\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+\n+        final SiteSearchResults search1 = siteSearchAPI.search(siteSearchAudit.getIndexName(), \"our-page*\",0, 10);\n+        Assert.assertTrue(search1.getTotalResults() >= 1);\n+\n+        final File runOnceBundleRoot = BundlerUtil.getBundleRoot(generatedBundleId1, false);\n+        Assert.assertTrue(runOnceBundleRoot.exists());\n+\n+        // At this point we just finished dumping our content into a brand new index through a run once type of job.\n+        // From now on we will have to create an incremental job and continuously feed it.\n+        // The first time it'll have to create the whole thing since it's the first incremental run.\n+\n+        final String incrementalJobBundleId = StringUtils.camelCaseLower(jobName);\n+\n+        final JobDetail jobDetail2 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail2.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context2 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context2.getJobDetail()).thenReturn(jobDetail2);\n+        Mockito.when(context2.getFireTime()).thenReturn(new Date());\n+\n+        final SiteSearchJobImpl secondRunJob = new SiteSearchJobImpl();\n+        secondRunJob.run(context2);\n+\n+        generatedBundleId1 = secondRunJob.getBundleId();\n+        Assert.assertEquals(incrementalJobBundleId, generatedBundleId1);\n+        System.out.println(generatedBundleId1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 351}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTY1MQ==", "bodyText": "removed", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231651", "createdAt": "2020-03-03T19:06:42Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @AfterClass\n+    public static void drop(){\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context.getJobDetail()).thenReturn(jobDetail);\n+        Mockito.when(context.getFireTime()).thenReturn(new Date());\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+        impl.run(context);\n+\n+        final List<String> indicesAfterTest = siteSearchAPI.listIndices();\n+        Assert.assertFalse(indicesAfterTest.isEmpty());\n+        final String newIndexName = indicesAfterTest.get(0);\n+\n+        Assert.assertEquals(\"New index is expected have same Alias\", alias, esIndexAPI.getIndexAlias(newIndexName));\n+        final SiteSearchResults search = siteSearchAPI.search(newIndexName, \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+        final List<SiteSearchAudit> recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+        Assert.assertEquals(1, siteSearchAudit.getPagesCount());\n+        Assert.assertFalse(siteSearchAudit.isIncremental()); //did not run incrementally since it was launched as a run-now.\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newIndexName));\n+    }\n+\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Create_Second_Index_Run_Non_Incrementally_Expect_Non_Default_New_Index()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+        final SiteSearchJobImpl impl = new SiteSearchJobImpl();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String defaultAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String defaultIndexName = IndexType.SITE_SEARCH.getPrefix() + \"_\" + timeMillis1;\n+        siteSearchAPI.createSiteSearchIndex(defaultIndexName, defaultAlias, 1);\n+        siteSearchAPI.activateIndex(defaultIndexName); //Make it default.\n+\n+        final String jobId1 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap1 = new JobDataMap();\n+        jobDataMap1.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_ALIAS, defaultAlias);\n+        jobDataMap1.put(SiteSearchJobImpl.JOB_ID, jobId1);\n+        jobDataMap1.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap1.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap1.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap1.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap1);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context1);\n+        //First run will create the default index\n+\n+        List <String> indices = siteSearchAPI.listIndices();\n+        Assert.assertTrue(indices.contains(defaultIndexName));\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId1, 0, 1);\n+\n+        //Since non-incremental runs will use its own brand new index\n+        //This is the only trustworthy way to retrieve the index name that was created.\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final String newDefaultIndexName = recentAudits.get(0).getIndexName();\n+        Assert.assertTrue( siteSearchAPI.isDefaultIndex(newDefaultIndexName));\n+\n+        //Second index\n+        final long timeMillis2 = System.currentTimeMillis();\n+        final String newIndexAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" +timeMillis2;\n+        final String newIndexName =  IndexType.SITE_SEARCH.getPrefix() + \"_\" +timeMillis2;\n+        siteSearchAPI.createSiteSearchIndex(newIndexName, newIndexAlias, 1);\n+\n+        final String jobId2 = UUIDUtil.uuid();\n+\n+        final JobDataMap jobDataMap2 = new JobDataMap();\n+        jobDataMap2.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        jobDataMap2.put(SiteSearchJobImpl.INCREMENTAL, Boolean.FALSE.toString());\n+        jobDataMap2.put(SiteSearchJobImpl.INDEX_ALIAS, newIndexAlias);\n+        jobDataMap2.put(SiteSearchJobImpl.JOB_ID, jobId2);\n+        jobDataMap2.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap2.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap2.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap2.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail2 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail2.getJobDataMap()).thenReturn(jobDataMap2);\n+        final JobExecutionContext context2 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context2.getJobDetail()).thenReturn(jobDetail2);\n+        Mockito.when(context2.getFireTime()).thenReturn(new Date());\n+\n+        impl.run(context2);\n+        //Second run will create the another index. But the first one should remain as default.\n+\n+        //Check the original index is still the default\n+        Assert.assertTrue(siteSearchAPI.isDefaultIndex(newDefaultIndexName));\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId2, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+\n+        final SiteSearchResults search = siteSearchAPI.search(siteSearchAudit.getIndexName(), \"*\",0, 10);\n+        Assert.assertTrue(search.getTotalResults() >= 1);\n+\n+    }\n+\n+    @Test\n+    public void Test_Incremental_Job_Test_Pages_Are_Found_Create_And_Publish_New_Page_Test_Changes_Are_Picked_Unpublish_Then_Verify_Page_Is_Gone()\n+    throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        List<SiteSearchAudit> recentAudits;\n+\n+        final String jobName = \"Any-Scheduled-Job-\" + System.currentTimeMillis();\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+\n+        final long timeMillis1 = System.currentTimeMillis();\n+        final String newIndexAlias = IndexType.SITE_SEARCH.getPrefix() + \"_alias_\" + timeMillis1;\n+        final String jobId = UUIDUtil.uuid();\n+        // As an incremental scheduled type of job.\n+        // Every single run has to be tied to the same job id.\n+\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.FALSE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, newIndexAlias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, jobName);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");\n+        jobDataMap.put(SiteSearchJobImpl.LANG_TO_INDEX, new String[]{Long.toString(defaultLang)});\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_HOST, site.getIdentifier());\n+\n+        final JobDetail jobDetail1 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail1.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context1 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context1.getJobDetail()).thenReturn(jobDetail1);\n+        Mockito.when(context1.getFireTime()).thenReturn(new Date());\n+\n+        final SiteSearchJobImpl firstRunJob = new SiteSearchJobImpl();\n+        firstRunJob.run(context1);\n+\n+        String generatedBundleId1 = firstRunJob.getBundleId();\n+        Assert.assertNotNull(generatedBundleId1);\n+        System.out.println(generatedBundleId1);\n+\n+        recentAudits = siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+        Assert.assertFalse(recentAudits.isEmpty());\n+        final SiteSearchAudit siteSearchAudit = recentAudits.get(0);\n+\n+        final SiteSearchResults search1 = siteSearchAPI.search(siteSearchAudit.getIndexName(), \"our-page*\",0, 10);\n+        Assert.assertTrue(search1.getTotalResults() >= 1);\n+\n+        final File runOnceBundleRoot = BundlerUtil.getBundleRoot(generatedBundleId1, false);\n+        Assert.assertTrue(runOnceBundleRoot.exists());\n+\n+        // At this point we just finished dumping our content into a brand new index through a run once type of job.\n+        // From now on we will have to create an incremental job and continuously feed it.\n+        // The first time it'll have to create the whole thing since it's the first incremental run.\n+\n+        final String incrementalJobBundleId = StringUtils.camelCaseLower(jobName);\n+\n+        final JobDetail jobDetail2 = Mockito.mock(JobDetail.class);\n+        Mockito.when(jobDetail2.getJobDataMap()).thenReturn(jobDataMap);\n+        final JobExecutionContext context2 = Mockito.mock(JobExecutionContext.class);\n+        Mockito.when(context2.getJobDetail()).thenReturn(jobDetail2);\n+        Mockito.when(context2.getFireTime()).thenReturn(new Date());\n+\n+        final SiteSearchJobImpl secondRunJob = new SiteSearchJobImpl();\n+        secondRunJob.run(context2);\n+\n+        generatedBundleId1 = secondRunJob.getBundleId();\n+        Assert.assertEquals(incrementalJobBundleId, generatedBundleId1);\n+        System.out.println(generatedBundleId1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njk0MA=="}, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MjUwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzozMlrOFwHYkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMzozMlrOFwHYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5Njk0NA==", "bodyText": "Issue found: The String literal \"; Date: \" appears 4 times in this file; the first occurrence is on line 127", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r385996944", "createdAt": "2020-02-29T03:33:32Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4e398bdbb350fe480870462030e3541b5cdc2c"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA2ODA3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNToxOFrOFxKbXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjozMVrOFxSvSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTM5MA==", "bodyText": "Weird blank lines.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387095390", "createdAt": "2020-03-03T15:25:18Z", "author": {"login": "jgambarios"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTU2Mg==", "bodyText": "removed", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231562", "createdAt": "2020-03-03T19:06:31Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,280 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void\n+\n+\n+    run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTM5MA=="}, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA3MDgyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/MainSuite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyNTo0OVrOFxKc-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjoxOFrOFxSu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTgwMw==", "bodyText": "We can remove those spaces, I guess it was added by mistake.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387095803", "createdAt": "2020-03-03T15:25:49Z", "author": {"login": "jgambarios"}, "path": "dotCMS/src/integration-test/java/com/dotcms/MainSuite.java", "diffHunk": "@@ -19,6 +20,10 @@\n /* grep -l -r \"@Test\" dotCMS/src/integration-test */\n /* ./gradlew integrationTest -Dtest.single=com.dotcms.MainSuite */\n //@RunWith(Suite.class)\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTQ0OQ==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231449", "createdAt": "2020-03-03T19:06:18Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/integration-test/java/com/dotcms/MainSuite.java", "diffHunk": "@@ -19,6 +20,10 @@\n /* grep -l -r \"@Test\" dotCMS/src/integration-test */\n /* ./gradlew integrationTest -Dtest.single=com.dotcms.MainSuite */\n //@RunWith(Suite.class)\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTgwMw=="}, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQwMTkyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjo0MDoxNlrOFxNp0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNjowNlrOFxSuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0ODI0Mg==", "bodyText": "If we want to keep a log in here we should add data like the index alias.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387148242", "createdAt": "2020-03-03T16:40:16Z", "author": {"login": "jgambarios"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMTMyOA==", "bodyText": "done", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387231328", "createdAt": "2020-03-03T19:06:06Z", "author": {"login": "fabrizzio-dotCMS"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +285,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(this, \"Index is current Site-Search DEFAULT.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0ODI0Mg=="}, "originalCommit": {"oid": "0d414cff19e8279c0e7f9517a3efd0bf9812bc3b"}, "originalPosition": 453}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDM0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowMVrOFxU1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowMVrOFxU1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NTk2MQ==", "bodyText": "Issue found: The String literal \"all\" appears 4 times in this file; the first occurrence is on line 165", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387265961", "createdAt": "2020-03-03T20:11:01Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,442 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")\n+                .setProperty(\"body\", \"content1\")\n+                .nextPersisted();\n+\n+        contentlet1.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        contentlet1.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        contentlet1.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(contentlet1, systemUser, false);\n+\n+        final String pageName = \"our-page\";\n+\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template).languageId(1)\n+                .pageURL(pageName)\n+                .friendlyName(pageName)\n+                .title(pageName).nextPersisted();\n+        final String uuid = UUIDGenerator.generateUuid();\n+        final MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(), contentlet1.getIdentifier() ,uuid,0);\n+        APILocator.getMultiTreeAPI().saveMultiTree(multiTree);\n+\n+        HTMLPageDataGen.publish(pageEnglishVersion);\n+\n+    }\n+\n+    @Test\n+    public void Test_Non_Incremental_Create_Default_Index_Run_Non_Incrementally_Expect_New_Index_Keep_Alias_And_Default()\n+            throws DotPublishingException, JobExecutionException, DotDataException, IOException, DotSecurityException {\n+\n+        final List<String> indicesBeforeTest = siteSearchAPI.listIndices();\n+        for(final String index:indicesBeforeTest) {\n+            esIndexAPI.delete(index);\n+        }\n+        final String jobId = UUIDUtil.uuid();\n+        final String alias = \"any-alias-\"+System.currentTimeMillis();\n+        final JobDataMap jobDataMap = new JobDataMap();\n+        jobDataMap.put(SiteSearchJobImpl.RUN_NOW, Boolean.TRUE.toString());\n+        //Even though we are requesting it to be incremental it'll run as non incremental because it is a run now type of job.\n+        jobDataMap.put(SiteSearchJobImpl.INCREMENTAL, Boolean.TRUE.toString());\n+        jobDataMap.put(SiteSearchJobImpl.INDEX_ALIAS, alias);\n+        jobDataMap.put(SiteSearchJobImpl.JOB_ID, jobId);\n+        jobDataMap.put(SiteSearchJobImpl.QUARTZ_JOB_NAME, SiteSearchJobImpl.RUNNING_ONCE_JOB_NAME);\n+        jobDataMap.put(SiteSearchJobImpl.INCLUDE_EXCLUDE, \"all\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDQ3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowM1rOFxU1vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowM1rOFxU1vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NTk4MA==", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387265980", "createdAt": "2020-03-03T20:11:03Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,442 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDU2OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowNVrOFxU1yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowNVrOFxU1yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NTk5NQ==", "bodyText": "Issue found: The String literal \"; Date: \" appears 4 times in this file; the first occurrence is on line 127", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387265995", "createdAt": "2020-03-03T20:11:05Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDYyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowNlrOFxU12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowNlrOFxU12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjAwOQ==", "bodyText": "Issue found: Perhaps 'indicesAPI' could be replaced by a local variable.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266009", "createdAt": "2020-03-03T20:11:06Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDcyOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowOFrOFxU16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowOFrOFxU16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjAyNA==", "bodyText": "Issue found: The String literal \"content1\" appears 4 times in this file; the first occurrence is on line 121", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266024", "createdAt": "2020-03-03T20:11:08Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/publishing/job/SiteSearchJobImplTest.java", "diffHunk": "@@ -0,0 +1,442 @@\n+package com.dotcms.publishing.job;\n+\n+import com.dotcms.IntegrationTestBase;\n+import com.dotcms.LicenseTestUtil;\n+import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n+import com.dotcms.content.elasticsearch.business.IndexType;\n+import com.dotcms.contenttype.business.ContentTypeAPI;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.ContainerDataGen;\n+import com.dotcms.datagen.ContentletDataGen;\n+import com.dotcms.datagen.FolderDataGen;\n+import com.dotcms.datagen.HTMLPageDataGen;\n+import com.dotcms.datagen.SiteDataGen;\n+import com.dotcms.datagen.TemplateDataGen;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n+import com.dotcms.publishing.BundlerUtil;\n+import com.dotcms.publishing.DotPublishingException;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.beans.MultiTree;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.factories.PublishFactory;\n+import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.contentlet.business.ContentletAPI;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.model.IndexPolicy;\n+import com.dotmarketing.portlets.folders.model.Folder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n+import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.dotmarketing.util.UUIDUtil;\n+import com.liferay.portal.model.User;\n+import com.liferay.util.FileUtil;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobDetail;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+\n+public class SiteSearchJobImplTest extends IntegrationTestBase {\n+\n+    static ESIndexAPI esIndexAPI;\n+    static long defaultLang;\n+    static SiteSearchAPI siteSearchAPI;\n+    static SiteSearchAuditAPI siteSearchAuditAPI;\n+    static ContentletAPI contentletAPI;\n+    static HostAPI hostAPI;\n+\n+    private static String contentGenericId;\n+    private static Host site;\n+    private static Template template;\n+    private static Folder folder;\n+    private static User systemUser;\n+    private static Container container;\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+        LicenseTestUtil.getLicense();\n+\n+        systemUser = APILocator.systemUser();\n+\n+        esIndexAPI = APILocator.getESIndexAPI();\n+        defaultLang = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+        siteSearchAPI = APILocator.getSiteSearchAPI();\n+        siteSearchAuditAPI = APILocator.getSiteSearchAuditAPI();\n+        contentletAPI = APILocator.getContentletAPI();\n+        hostAPI = APILocator.getHostAPI();\n+\n+        final List<Host> allHosts = hostAPI.findAll(systemUser, false);\n+        for (final Host host : allHosts) {\n+            if (host.isSystemHost() || host.getHostname().startsWith(\"demo\")) {\n+                continue;\n+            }\n+            hostAPI.archive(host, systemUser, false);\n+            hostAPI.delete(host, systemUser, false);\n+        }\n+\n+        site = new SiteDataGen().nextPersisted();\n+        final ContentTypeAPI contentTypeAPI = APILocator.getContentTypeAPI(systemUser);\n+        final ContentType contentGenericType = contentTypeAPI.find(\"webPageContent\");\n+        contentGenericId = contentGenericType.id();\n+\n+        final String nameTitle = \"myTestContainer\" + System.currentTimeMillis();\n+        container = new ContainerDataGen()\n+                .withContentType(contentGenericType, \"$!{body}\")\n+                .friendlyName(nameTitle)\n+                .title(nameTitle)\n+                .nextPersisted();\n+\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+        template = new TemplateDataGen().withContainer(container.getIdentifier()).nextPersisted();\n+\n+        folder = new FolderDataGen().site(site).nextPersisted();\n+\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        //Create Contentlet in English\n+        final Contentlet contentlet1 = new ContentletDataGen(contentGenericId)\n+                .languageId(defaultLang)\n+                .folder(folder)\n+                .host(site)\n+                .setProperty(\"title\", \"content1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDgxOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowOVrOFxU19w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMTowOVrOFxU19w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjAzOQ==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266039", "createdAt": "2020-03-03T20:11:09Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n+        AdminLogger.log(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n \n         HibernateUtil.startTransaction();\n \n-        JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n+        final JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n \n-        String jobId=(String)dataMap.get(\"JOB_ID\");\n-        if(jobId==null) {\n-            jobId=dataMap.getString(\"QUARTZ_JOB_NAME\");\n+        String jobId = (String) dataMap.get(JOB_ID);\n+        if (jobId == null) {\n+            jobId = dataMap.getString(QUARTZ_JOB_NAME);\n         }\n \n-        boolean indexAll = UtilMethods.isSet((String) dataMap.get(\"indexAll\")) ? true : false;\n-        String[] indexHosts = null;\n-        Object obj = (dataMap.get(\"indexhost\") != null) ?dataMap.get(\"indexhost\") : new String[0];\n-        if(obj instanceof String){\n-            indexHosts = new String[] {(String) obj};\n-        }\n-        else{\n+        final boolean indexAll = UtilMethods.isSet((String) dataMap.get(INDEX_ALL));\n+        final String[] indexHosts;\n+        final Object obj = (dataMap.get(INDEX_HOST) != null) ? dataMap.get(INDEX_HOST) : new String[0];\n+        if (obj instanceof String) {\n+            indexHosts = new String[]{(String) obj};\n+        } else {\n             indexHosts = (String[]) obj;\n         }\n \n+        final boolean incrementalParam = dataMap.getBooleanFromString(INCREMENTAL);\n \n+        final User userToRun = userAPI.getSystemUser();\n \n-        boolean incremental = dataMap.getString(\"incremental\") != null;\n+        final boolean include = (\"all\".equals(dataMap.getString(INCLUDE_EXCLUDE)) || INCLUDE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDg3OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxMFrOFxU1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxMFrOFxU1_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA0Ng==", "bodyText": "Issue found: The String literal \"; Job Identifier: \" appears 4 times in this file; the first occurrence is on line 128", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266046", "createdAt": "2020-03-03T20:11:10Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNDk0OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxMlrOFxU2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxMlrOFxU2BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA1Mw==", "bodyText": "Issue found: Useless parentheses.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266053", "createdAt": "2020-03-03T20:11:12Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;\n+    private final SiteSearchAPI siteSearchAPI;\n+    private final HostAPI hostAPI;\n+    private final UserAPI userAPI;\n+    private final SiteSearchAuditAPI siteSearchAuditAPI;\n+    private final PublisherAPI publisherAPI;\n+\n+    private String bundleId;\n+\n+    @VisibleForTesting\n+    SiteSearchJobImpl(\n+            final ESIndexAPI esIndexAPI,\n+            final IndiciesAPI indicesAPI,\n+            final SiteSearchAPI siteSearchAPI,\n+            final HostAPI hostAPI,\n+            final UserAPI userAPI,\n+            final SiteSearchAuditAPI siteSearchAuditAPI,\n+            final PublisherAPI publisherAPI\n+            ) {\n+        this.esIndexAPI = esIndexAPI;\n+        this.indicesAPI = indicesAPI;\n+        this.siteSearchAPI = siteSearchAPI;\n+        this.hostAPI = hostAPI;\n+        this.userAPI = userAPI;\n+        this.siteSearchAuditAPI = siteSearchAuditAPI;\n+        this.publisherAPI = publisherAPI;\n+    }\n+\n+    public SiteSearchJobImpl() {\n+        this(APILocator.getESIndexAPI(), APILocator.getIndiciesAPI(), APILocator.getSiteSearchAPI(),\n+                APILocator.getHostAPI(), APILocator.getUserAPI(),\n+                APILocator.getSiteSearchAuditAPI(), APILocator.getPublisherAPI());\n+    }\n+\n     private PublishStatus status = new PublishStatus();\n     public PublishStatus getStatus() {\n         return status;\n     }\n     public void setStatus(PublishStatus status) {\n         this.status = status;\n     }\n+\n+    @VisibleForTesting\n+    public String getBundleId() {\n+        return bundleId;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n-    public void run(JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n-        if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level)\n+    public void run(final JobExecutionContext jobContext) throws JobExecutionException, DotPublishingException, DotDataException, DotSecurityException, ElasticsearchException, IOException {\n+        if (LicenseUtil.getLevel() < LicenseLevel.STANDARD.level) {\n+            Logger.warn(this, \"Invalid attempt to run SiteSearch job without a license.\");\n             return;\n-        \n+        }\n         String date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Started\", \"User:\" + APILocator.getUserAPI().getSystemUser().getUserId() + \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n+        AdminLogger.log(getClass(), \"Job Started\",\n+                \"User:\" + userAPI.getSystemUser().getUserId() + \"; Date: \" + date\n+                        + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME);\n \n         HibernateUtil.startTransaction();\n \n-        JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n+        final JobDataMap dataMap = jobContext.getJobDetail().getJobDataMap();\n \n-        String jobId=(String)dataMap.get(\"JOB_ID\");\n-        if(jobId==null) {\n-            jobId=dataMap.getString(\"QUARTZ_JOB_NAME\");\n+        String jobId = (String) dataMap.get(JOB_ID);\n+        if (jobId == null) {\n+            jobId = dataMap.getString(QUARTZ_JOB_NAME);\n         }\n \n-        boolean indexAll = UtilMethods.isSet((String) dataMap.get(\"indexAll\")) ? true : false;\n-        String[] indexHosts = null;\n-        Object obj = (dataMap.get(\"indexhost\") != null) ?dataMap.get(\"indexhost\") : new String[0];\n-        if(obj instanceof String){\n-            indexHosts = new String[] {(String) obj};\n-        }\n-        else{\n+        final boolean indexAll = UtilMethods.isSet((String) dataMap.get(INDEX_ALL));\n+        final String[] indexHosts;\n+        final Object obj = (dataMap.get(INDEX_HOST) != null) ? dataMap.get(INDEX_HOST) : new String[0];\n+        if (obj instanceof String) {\n+            indexHosts = new String[]{(String) obj};\n+        } else {\n             indexHosts = (String[]) obj;\n         }\n \n+        final boolean incrementalParam = dataMap.getBooleanFromString(INCREMENTAL);\n \n+        final User userToRun = userAPI.getSystemUser();\n \n-        boolean incremental = dataMap.getString(\"incremental\") != null;\n+        final boolean include = (\"all\".equals(dataMap.getString(INCLUDE_EXCLUDE)) || INCLUDE\n+                .equals(dataMap.getString(INCLUDE_EXCLUDE)));\n \n-        User userToRun = APILocator.getUserAPI().getSystemUser();\n-\n-        boolean include = (\"all\".equals(dataMap.getString(\"includeExclude\")) || \"include\".equals(dataMap.getString(\"includeExclude\")));\n-\n-        String path = dataMap.getString(\"paths\");\n-        List<String> paths = new ArrayList<String>();\n-        if(path != null){\n+        String path = dataMap.getString(PATHS);\n+        final List<String> paths = new ArrayList<>();\n+        if (path != null) {\n             path = path.replace(',', '\\r');\n             path = path.replace('\\n', '\\r');\n-            for(String x : path.split(\"\\r\")){\n-                if(UtilMethods.isSet(x)){\n+            for (String x : path.split(\"\\r\")) {\n+                if (UtilMethods.isSet(x)) {\n                     paths.add(x);\n                 }\n             }\n         }\n-\n-        Date startDate,endDate;\n-        if(incremental) {\n-            endDate=jobContext.getFireTime();\n-\n-            startDate=null;\n-            try {\n-                List<SiteSearchAudit> recentAudits = APILocator.getSiteSearchAuditAPI().findRecentAudits(jobId, 0, 1);\n-                if(recentAudits.size()>0)\n-                    startDate=recentAudits.get(0).getFireDate();\n-            }\n-            catch(Exception ex) {\n-                Logger.warn(this, \"can't determine last audit entry for this job\",ex);\n-            }\n+        final boolean isRunNowJob = dataMap.getBooleanFromString(RUN_NOW);\n+        // Run now jobs can not get the incremental treatment.\n+        final IndexMetaData indexMetaData = getIndexMetaData(dataMap.getString(INDEX_ALIAS));\n+        final String newIndexName;\n+        final String indexName;\n+\n+        final String jobName = dataMap.getString(QUARTZ_JOB_NAME);\n+        final Date startDate, endDate;\n+        final List<SiteSearchAudit> recentAudits = isRunNowJob ? Collections.emptyList()\n+                : siteSearchAuditAPI.findRecentAudits(jobId, 0, 1);\n+\n+        final boolean incremental = (incrementalParam && !isRunNowJob && !indexMetaData.isNewIndex() && !indexMetaData.isEmpty() && !recentAudits.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNTAwOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxM1rOFxU2Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxM1rOFxU2Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA1OQ==", "bodyText": "Issue found: Assigning an Object to null is a code smell.  Consider refactoring.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266059", "createdAt": "2020-03-03T20:11:13Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +282,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {\n+        String indexName = null;\n+        boolean defaultIndex = false;\n+        long recordCount = 0;\n+        if (UtilMethods.isSet(indexAlias)) {\n+            indexAlias = indexAlias.split(\"\\\\s+\")[0];\n+            final List<String> indices = siteSearchAPI.listIndices();\n+            final Map<String, String> aliasMap = esIndexAPI.getAliasToIndexMap(indices);\n+            indexName = aliasMap.get(indexAlias);\n+            if (UtilMethods.isSet(indexName)) {\n+                if (siteSearchAPI.isDefaultIndex(indexAlias)) {\n+                    Logger.info(SiteSearchJobImpl.class, String.format(\"Index `%s` is currently Site-Search DEFAULT.\",indexAlias));\n+                    defaultIndex = true;\n+                }\n+            } else {\n+                // the alias comes with an index name that is already in use.\n+                if(indices.contains(indexAlias)){\n+                   indexName = indexAlias;\n+                   indexAlias = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 457}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNTA5OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNFrOFxU2HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNFrOFxU2HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA3Ng==", "bodyText": "Issue found: Avoid unused private fields such as 'indicesAPI'.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266076", "createdAt": "2020-03-03T20:11:14Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -2,203 +2,277 @@\n \n import com.dotcms.content.elasticsearch.business.ESIndexAPI;\n import com.dotcms.content.elasticsearch.business.ESMappingAPIImpl;\n+import com.dotcms.content.elasticsearch.business.IndiciesAPI;\n import com.dotcms.enterprise.LicenseUtil;\n import com.dotcms.enterprise.license.LicenseLevel;\n import com.dotcms.enterprise.publishing.bundlers.FileAssetBundler;\n import com.dotcms.enterprise.publishing.bundlers.HTMLPageAsContentBundler;\n import com.dotcms.enterprise.publishing.bundlers.URLMapBundler;\n import com.dotcms.enterprise.publishing.sitesearch.SiteSearchConfig;\n+import com.dotcms.enterprise.publishing.sitesearch.SiteSearchResults;\n import com.dotcms.publishing.BundlerStatus;\n import com.dotcms.publishing.DotPublishingException;\n import com.dotcms.publishing.PublishStatus;\n+import com.dotcms.publishing.PublisherAPI;\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.UserAPI;\n import com.dotmarketing.db.HibernateUtil;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.business.HostAPI;\n import com.dotmarketing.sitesearch.business.SiteSearchAPI;\n+import com.dotmarketing.sitesearch.business.SiteSearchAuditAPI;\n import com.dotmarketing.sitesearch.model.SiteSearchAudit;\n-import com.dotmarketing.util.*;\n+import com.dotmarketing.util.ActivityLogger;\n+import com.dotmarketing.util.AdminLogger;\n+import com.dotmarketing.util.DateUtil;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.StringUtils;\n+import com.dotmarketing.util.UtilMethods;\n+import com.google.common.annotations.VisibleForTesting;\n import com.liferay.portal.model.User;\n-import org.elasticsearch.ElasticsearchException;\n-import org.quartz.JobDataMap;\n-import org.quartz.JobExecutionContext;\n-import org.quartz.JobExecutionException;\n-\n+import com.liferay.util.StringPool;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.elasticsearch.ElasticsearchException;\n+import org.quartz.JobDataMap;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n \n public class SiteSearchJobImpl {\n+\n+    static final String INCREMENTAL = \"incremental\";\n+    static final String LANG_TO_INDEX = \"langToIndex\";\n+    static final String INDEX_ALIAS = \"indexAlias\";\n+    static final String INDEX_ALL = \"indexAll\";\n+    static final String INDEX_HOST = \"indexhost\";\n+    static final String QUARTZ_JOB_NAME = \"QUARTZ_JOB_NAME\";\n+    static final String RUNNING_ONCE_JOB_NAME = \"runningOnce\";\n+    static final String JOB_ID = \"JOB_ID\";\n+    static final String RUN_NOW = \"RUN_NOW\";\n+    static final String INCLUDE_EXCLUDE = \"includeExclude\";\n+    static final String INCLUDE = \"include\";\n+    static final String PATHS = \"paths\";\n+\n+    private final ESIndexAPI esIndexAPI;\n+    private final IndiciesAPI indicesAPI;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNTEzOnYy", "diffSide": "RIGHT", "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNVrOFxU2JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNVrOFxU2JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA4NA==", "bodyText": "Issue found: Avoid reassigning parameters such as 'indexAlias'", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266084", "createdAt": "2020-03-03T20:11:15Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/main/java/com/dotcms/publishing/job/SiteSearchJobImpl.java", "diffHunk": "@@ -208,24 +282,93 @@ else if(bs.getBundlerClass().equals(HTMLPageAsContentBundler.class.getName()))\n             audit.setIncremental(incremental);\n             audit.setStartDate(startDate);\n             audit.setEndDate(endDate);\n-            audit.setIndexName(indexName);\n+            audit.setIndexName( UtilMethods.isSet(newIndexName) ? newIndexName :  indexName );\n             audit.setJobId(jobId);\n-            audit.setJobName(dataMap.getString(\"QUARTZ_JOB_NAME\"));\n+            audit.setJobName(dataMap.getString(QUARTZ_JOB_NAME));\n             audit.setLangList(UtilMethods.join(languageToIndex,\",\"));\n-            audit.setPath(paths.size()>0 ? UtilMethods.join(paths,\",\") : \"/*\");\n+            audit.setPath(paths.size() > 0 ? UtilMethods.join(paths,\",\") : \"/*\");\n             audit.setPathInclude(include);\n-            APILocator.getSiteSearchAuditAPI().save(audit);\n+            siteSearchAuditAPI.save(audit);\n         }\n         catch(DotDataException ex) {\n-            Logger.warn(this, \"can't save audit data\",ex);\n+            Logger.error(this, \"can't save audit data\",ex);\n         }\n         finally {\n             HibernateUtil.closeSession();\n         }\n \n         date = DateUtil.getCurrentDate();\n-        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n-        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +APILocator.getUserAPI().getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+        ActivityLogger.logInfo(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME  );\n+        AdminLogger.log(getClass(), \"Job Finished\", \"User: \" +userAPI.getSystemUser().getUserId()+ \"; Date: \" + date + \"; Job Identifier: \" + SiteSearchAPI.ES_SITE_SEARCH_NAME );\n+    }\n+\n+     private String newIndexName(){\n+        return SiteSearchAPI.ES_SITE_SEARCH_NAME + StringPool.UNDERLINE\n+                + ESMappingAPIImpl.datetimeFormat.format(new Date());\n+     }\n+\n+     private IndexMetaData getIndexMetaData(String indexAlias) throws DotDataException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 439}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTEzNTE4OnYy", "diffSide": "RIGHT", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContentletDataGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNlrOFxU2LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxMToxNlrOFxU2LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2NjA5Mw==", "bodyText": "Issue found: Avoid throwing raw exception types.", "url": "https://github.com/dotCMS/core/pull/18071#discussion_r387266093", "createdAt": "2020-03-03T20:11:16Z", "author": {"login": "dev-dotcms"}, "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContentletDataGen.java", "diffHunk": "@@ -359,6 +356,26 @@ public static void destroy(final Contentlet contentlet, final Boolean failSilent\n         }\n     }\n \n+    public static void unpublish(final Contentlet contentlet) {\n+       unpublish(contentlet, true);\n+    }\n+\n+    @WrapInTransaction\n+    public static void unpublish(final Contentlet contentlet, final Boolean failSilently) {\n+\n+        if (null != contentlet) {\n+            try {\n+                APILocator.getContentletAPI().unpublish(contentlet, APILocator.systemUser(), false);\n+            } catch (Exception e) {\n+                if (failSilently) {\n+                    Logger.error(ContentTypeDataGen.class, \"Unable to unpublish Contentlet.\", e);\n+                } else {\n+                    throw new RuntimeException(\"Unable to unpublish Contentlete.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afce2f4861ebcfe07a407937d46fac86d6f825b0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2350, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}