{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzE5NDgy", "number": 1457, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDoyMlrOEcKjGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxODozN1rOEdWuEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY4NDExOnYy", "diffSide": "LEFT", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDoyMlrOHGh1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNDoyMlrOHGh1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwNzkzOA==", "bodyText": "Is there a specific reason for removing this test? we can update it to assert that the object value is null. The same comment applies to the other method in this class.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476607938", "createdAt": "2020-08-25T17:14:22Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java", "diffHunk": "@@ -100,26 +100,12 @@ public void testSetPrimaryGraphic() {\n \t\tassertEquals(screenManager.getPrimaryGraphic(), testArtwork);\n \t}\n \n-\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTY5ODIxOnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNzo0NlrOHGh-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNzo0NlrOHGh-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMDExMw==", "bodyText": "Can we add the @OverRide back and add the abstract method to the base class? it is better to make sure that both child classes implement the same methods. The same comment applies to the JavaSE copy of the file", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476610113", "createdAt": "2020-08-25T17:17:46Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicManager.java", "diffHunk": "@@ -48,13 +48,12 @@\n  */\n class TextAndGraphicManager extends BaseTextAndGraphicManager {\n \n-\tTextAndGraphicManager(@NonNull ISdl internalInterface, @NonNull FileManager fileManager, @NonNull SoftButtonManager softButtonManager) {\n-\t\tsuper(internalInterface, fileManager, softButtonManager);\n+\tTextAndGraphicManager(@NonNull ISdl internalInterface, @NonNull FileManager fileManager) {\n+\t\tsuper(internalInterface, fileManager);\n \t}\n \n-\t@Override\n-\tSdlArtwork getBlankArtwork(){\n-\t\tif (blankArtwork == null){\n+\tSdlArtwork getBlankArtwork() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTcxNzg3OnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMjo0OFrOHGiKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyMjo0OFrOHGiKUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMzIwMQ==", "bodyText": "The T&G manager needs to inform the SB manager about the latest mainField1 value so the SB manager doesn't send a SHOW with outdated value and override mainField1. Especially if the T&G modified the mainField1 value internally (for example to assemble multiple texts in one line). The SB manager has no way to know the latest value for the mainField1", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476613201", "createdAt": "2020-08-25T17:22:48Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicManager.java", "diffHunk": "@@ -48,13 +48,12 @@\n  */\n class TextAndGraphicManager extends BaseTextAndGraphicManager {\n \n-\tTextAndGraphicManager(@NonNull ISdl internalInterface, @NonNull FileManager fileManager, @NonNull SoftButtonManager softButtonManager) {\n-\t\tsuper(internalInterface, fileManager, softButtonManager);\n+\tTextAndGraphicManager(@NonNull ISdl internalInterface, @NonNull FileManager fileManager) {\n+\t\tsuper(internalInterface, fileManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTc0NTYzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseScreenManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyNTo1NVrOHGiYJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoyNTo1NVrOHGiYJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxNjc0MQ==", "bodyText": "I suggest checking if name is null as well to avoid potential NPE. The same comment applies to getSecondaryGraphic()", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476616741", "createdAt": "2020-08-25T17:25:55Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseScreenManager.java", "diffHunk": "@@ -248,6 +249,9 @@ public void setPrimaryGraphic(SdlArtwork primaryGraphic) {\n \t * @return an SdlArtwork object represents the current primaryGraphic\n \t */\n \tpublic SdlArtwork getPrimaryGraphic() {\n+\t\tif (this.textAndGraphicManager.getPrimaryGraphic() == null || this.textAndGraphicManager.getPrimaryGraphic().getName().equals(textAndGraphicManager.getBlankArtwork().getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTc3MjU3OnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicManagerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozMDoyN1rOHGimwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozMDoyN1rOHGimwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMDQ4Mg==", "bodyText": "They are some unused imports in this class", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476620482", "createdAt": "2020-08-25T17:30:27Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/TextAndGraphicManagerTests.java", "diffHunk": "@@ -4,36 +4,54 @@\n import android.net.Uri;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n \n+import com.livio.taskmaster.Task;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTc5MjkzOnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNTo1OFrOHGizJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozNTo1OFrOHGizJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMzY1Mg==", "bodyText": "There are some unused imports in this class.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476623652", "createdAt": "2020-08-25T17:35:58Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/ScreenManagerTests.java", "diffHunk": "@@ -100,26 +100,12 @@ public void testSetPrimaryGraphic() {\n \t\tassertEquals(screenManager.getPrimaryGraphic(), testArtwork);\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTgxOTM3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextsAndGraphicsState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0MzozMFrOHGjD6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo0MzozMFrOHGjD6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyNzk0NQ==", "bodyText": "I think this class and everything inside it should be package protected as we don't want to expose internal APIs to developers", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476627945", "createdAt": "2020-08-25T17:43:30Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextsAndGraphicsState.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextAlignment;\n+\n+public class TextsAndGraphicsState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTg1NzU2OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1NDoxNFrOHGjclw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1NDoxNFrOHGjclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNDI2Mw==", "bodyText": "The sentShow seems to be unused", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476634263", "createdAt": "2020-08-25T17:54:14Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData, sentShow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTg2NDkxOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1NjoxMVrOHGjhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzo1NjoxMVrOHGjhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYzNTQ2Mg==", "bodyText": "This class and most of its APIs can be package-private. Some APIS can also be private if they are only used within the operation", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476635462", "createdAt": "2020-08-25T17:56:11Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk5MDM5OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMjo0OFrOHGkwEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMjo0OFrOHGkwEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTYzNA==", "bodyText": "We should set defaultMainWindowCapability = null here", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476655634", "createdAt": "2020-08-25T18:32:48Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +142,353 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// set mainfield 1\n-\t\tshow.setMainField1(tempString.toString());\n-\n-\t\t// new stringbuilder object\n-\t\ttempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t// If text 3 exists, put it in slot 2\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0){\n-\t\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t\t// If text 3 exists, put it in slot 2 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField4Type);\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 unformatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField2(textField4Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t//Transactions already exist, cancelling them\n+\t\t\tfor (Task task : transactionQueue.getTasksAsList()) {\n+\t\t\t\tif (task instanceof TextAndGraphicUpdateOperation) {\n+\t\t\t\t\t((TextAndGraphicUpdateOperation) task).setTaskIsCanceled(true);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n-\t\tif (tempString.toString().length() > 0){\n-\t\t\tshow.setMainField2(tempString.toString());\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleThreeLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n+\t\t// transactionQueue.getTaskAsList() will not return a task in progress, so we need to check\n+\t\tif (updateOperation != null && updateOperation.getState() == Task.IN_PROGRESS) {\n+\t\t\tupdateOperation.setTaskIsCanceled(true);\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n+\t\tCurrentScreenDataUpdatedListener currentScreenDataUpdateListener = new CurrentScreenDataUpdatedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onUpdate(Show show) {\n+\t\t\t\tupdatePendingOperationsWithNewScreenData(show);\n \t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0) {\n-\t\t\tif (textField3 != null && textField3.length() > 0) {\n-\t\t\t\t// If text 3 exists, put it in slot 3 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> tags4 = new ArrayList<>();\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttags4.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags4.add(textField4Type);\n-\t\t\t\t\ttags.setMainField3(tags4);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 formatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField3(textField4Type);\n+\t\t};\n+\t\tCompletionListener updateOperationListener = new CompletionListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onComplete(boolean success) {\n+\t\t\t\tif (listener != null) {\n+\t\t\t\t\tlistener.onComplete(success);\n \t\t\t\t}\n \t\t\t}\n-\t\t}\n+\t\t};\n \n-\t\tshow.setMainField3(tempString.toString());\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n+\t\tupdateOperation = new TextAndGraphicUpdateOperation(internalInterface, fileManager.get(), defaultMainWindowCapability, currentScreenData, currentState(), updateOperationListener, currentScreenDataUpdateListener);\n+\t\ttransactionQueue.add(updateOperation, false);\n \t}\n \n-\tprivate Show assembleFourLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n+\t//Updates pending task with current screen data\n+\tvoid updatePendingOperationsWithNewScreenData(Show newScreenData) {\n+\t\tfor (Task task : transactionQueue.getTasksAsList()) {\n+\t\t\tif (!(task instanceof TextAndGraphicUpdateOperation)) {\n+\t\t\t\tcontinue;\n \t\t\t}\n+\t\t\t((TextAndGraphicUpdateOperation) task).setCurrentScreenData(newScreenData);\n \t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField3 != null && textField3.length() > 0) {\n-\t\t\tshow.setMainField3(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0) {\n-\t\t\tshow.setMainField4(textField4);\n-\t\t\tif (textField4Type != null){\n-\t\t\t\ttags.setMainField4(textField4Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n \t}\n \n-\t// Extraction\n-\n-\tShow extractTextFromShow(Show show){\n-\n-\t\tShow newShow = new Show();\n-\t\tnewShow.setMainField1(show.getMainField1());\n-\t\tnewShow.setMainField2(show.getMainField2());\n-\t\tnewShow.setMainField3(show.getMainField3());\n-\t\tnewShow.setMainField4(show.getMainField4());\n-\t\tnewShow.setTemplateTitle(show.getTemplateTitle());\n-\n-\t\treturn newShow;\n-\t}\n-\n-\tprivate Show setBlankTextFields(Show newShow){\n-\n-\t\tnewShow.setMainField1(\"\");\n-\t\tnewShow.setMainField2(\"\");\n-\t\tnewShow.setMainField3(\"\");\n-\t\tnewShow.setMainField4(\"\");\n-\t\tnewShow.setMediaTrack(\"\");\n-\t\tnewShow.setTemplateTitle(\"\");\n-\n-\t\treturn newShow;\n+\tinterface CurrentScreenDataUpdatedListener {\n+\t\tvoid onUpdate(Show show);\n \t}\n \n-\tprivate void updateCurrentScreenDataState(Show show){\n-\n-\t\tif (show == null){\n-\t\t\tDebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n-\t\t\treturn;\n-\t\t}\n \n-\t\t// If the items are null, they were not updated, so we can't just set it directly\n-\t\tif (show.getMainField1() != null){\n-\t\t\tcurrentScreenData.setMainField1(show.getMainField1());\n-\t\t}\n-\t\tif (show.getMainField2() != null){\n-\t\t\tcurrentScreenData.setMainField2(show.getMainField2());\n-\t\t}\n-\t\tif (show.getMainField3() != null){\n-\t\t\tcurrentScreenData.setMainField3(show.getMainField3());\n-\t\t}\n-\t\tif (show.getMainField4() != null){\n-\t\t\tcurrentScreenData.setMainField4(show.getMainField4());\n-\t\t}\n-\t\tif (show.getTemplateTitle() != null){\n-\t\t\tcurrentScreenData.setTemplateTitle(show.getTemplateTitle());\n-\t\t}\n-\t\tif (show.getMediaTrack() != null){\n-\t\t\tcurrentScreenData.setMediaTrack(show.getMediaTrack());\n-\t\t}\n-\t\tif (show.getMetadataTags() != null){\n-\t\t\tcurrentScreenData.setMetadataTags(show.getMetadataTags());\n-\t\t}\n-\t\tif (show.getAlignment() != null){\n-\t\t\tcurrentScreenData.setAlignment(show.getAlignment());\n-\t\t}\n-\t\tif (show.getGraphic() != null){\n-\t\t\tcurrentScreenData.setGraphic(show.getGraphic());\n-\t\t}\n-\t\tif (show.getSecondaryGraphic() != null){\n-\t\t\tcurrentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n-\t\t}\n-\t}\n-\n-\t// Helpers\n-\n-\tprivate List<String> findValidMainTextFields(){\n+\tprivate List<String> findNonNullTextFields() {\n \t\tList<String> array = new ArrayList<>();\n \n-\t\tif (textField1 != null && textField1.length() > 0) {\n+\t\tif (textField1 != null) {\n \t\t\tarray.add(textField1);\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n+\t\tif (textField2 != null) {\n \t\t\tarray.add(textField2);\n \t\t}\n \n-\t\tif (textField3 != null && textField3.length() > 0) {\n+\t\tif (textField3 != null) {\n \t\t\tarray.add(textField3);\n \t\t}\n \n-\t\tif (textField4 != null && textField4.length() > 0) {\n+\t\tif (textField4 != null) {\n \t\t\tarray.add(textField4);\n \t\t}\n \n-\t\treturn array;\n-\t}\n-\n-\n-\tprivate List<MetadataType> findNonNullMetadataFields(){\n-\t\tList<MetadataType> array = new ArrayList<>();\n-\n-\t\tif (textField1Type != null) {\n-\t\t\tarray.add(textField1Type);\n-\t\t}\n-\n-\t\tif (textField2Type != null) {\n-\t\t\tarray.add(textField2Type);\n-\t\t}\n-\n-\t\tif (textField3Type != null) {\n-\t\t\tarray.add(textField3Type);\n+\t\tif (title != null) {\n+\t\t\tarray.add(title);\n \t\t}\n \n-\t\tif (textField4Type != null) {\n-\t\t\tarray.add(textField4Type);\n+\t\tif (mediaTrackTextField != null) {\n+\t\t\tarray.add(mediaTrackTextField);\n \t\t}\n \n \t\treturn array;\n \t}\n \n-\tabstract SdlArtwork getBlankArtwork();\n+\tBoolean hasData() {\n+\t\tboolean hasTextFields = (findNonNullTextFields().size() > 0);\n+\t\tboolean hasImageFields = (primaryGraphic != null) || (secondaryGraphic != null);\n \n-\t@SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n-\tprivate boolean sdlArtworkNeedsUpload(SdlArtwork artwork){\n-\t\tif (fileManager.get() != null) {\n-\t\t\treturn artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n-\t\t}\n-\t\treturn false;\n+\t\treturn hasTextFields || hasImageFields;\n \t}\n \n-\t/**\n-\t * Check to see if primaryGraphic should be updated\n-\t * @return true if primaryGraphic should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdatePrimaryImage() {\n-\t\tboolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n \n-\t\tString currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n-\t\tString primaryGraphicName = primaryGraphic != null ? primaryGraphic.getName() : null;\n-\t\treturn templateSupportsPrimaryArtwork\n-\t\t\t\t&& !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n-\t\t\t\t&& primaryGraphic != null;\n-\t}\n-\n-\t/**\n-\t * Check to see if secondaryGraphic should be updated\n-\t * @return true if secondaryGraphic should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateSecondaryImage() {\n-\t\tboolean templateSupportsSecondaryArtwork = (templateSupportsImageField(ImageFieldName.graphic) || templateSupportsImageField(ImageFieldName.secondaryGraphic));\n-\n-\t\tString currentScreenDataSecondaryGraphicName = (currentScreenData != null && currentScreenData.getSecondaryGraphic() != null) ? currentScreenData.getSecondaryGraphic().getValue() : null;\n-\t\tString secondaryGraphicName = secondaryGraphic != null ? secondaryGraphic.getName() : null;\n-\t\treturn templateSupportsSecondaryArtwork\n-\t\t\t\t&& !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true)\n-\t\t\t\t&& secondaryGraphic != null;\n-\t}\n-\n-\t/**\n-\t * Check to see if template supports the specified image field\n-\t * @return true if image field is supported, false if not\n-\t */\n-\tprivate boolean templateSupportsImageField(ImageFieldName name) {\n-\t\treturn defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(defaultMainWindowCapability, name);\n-\t}\n-\n-\t/**\n-\t * Check to see if mediaTrackTextField should be updated\n-\t * @return true if mediaTrackTextField should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateMediaTrackField() {\n-\t\treturn templateSupportsTextField(TextFieldName.mediaTrack);\n-\t}\n+\t// Convert to State\n \n-\t/**\n-\t * Check to see if title should be updated\n-\t * @return true if title should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateTitleField() {\n-\t\treturn templateSupportsTextField(TextFieldName.templateTitle);\n+\tprivate TextsAndGraphicsState currentState() {\n+\t\treturn new TextsAndGraphicsState(textField1, textField2, textField3, textField4, mediaTrackTextField,\n+\t\t\t\ttitle, primaryGraphic, secondaryGraphic, textAlignment, textField1Type, textField2Type, textField3Type, textField4Type);\n \t}\n \n-\t/**\n-\t * Check to see if field should be updated\n-\t * @return true if field should be updated, false if not\n-\t */\n-\tprivate boolean templateSupportsTextField(TextFieldName name) {\n-\t\treturn defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(defaultMainWindowCapability, name);\n-\t}\n-\n-\t// SCREEN ITEM SETTERS AND GETTERS\n+\t// Getters / Setters\n \n-\tvoid setTextAlignment(TextAlignment textAlignment){\n+\tvoid setTextAlignment(TextAlignment textAlignment) {\n \t\tthis.textAlignment = textAlignment;\n \t\t// If we aren't batching, send the update immediately, if we are, set ourselves as dirty (so we know we should send an update after the batch ends)\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tTextAlignment getTextAlignment(){\n+\tTextAlignment getTextAlignment() {\n \t\treturn textAlignment;\n \t}\n \n-\tvoid setMediaTrackTextField(String mediaTrackTextField){\n+\tvoid setMediaTrackTextField(String mediaTrackTextField) {\n \t\tthis.mediaTrackTextField = mediaTrackTextField;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getMediaTrackTextField(){\n+\tString getMediaTrackTextField() {\n \t\treturn mediaTrackTextField;\n \t}\n \n-\tvoid setTextField1(String textField1){\n+\tvoid setTextField1(String textField1) {\n \t\tthis.textField1 = textField1;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField1(){\n+\tString getTextField1() {\n \t\treturn textField1;\n \t}\n \n-\tvoid setTextField2(String textField2){\n+\tvoid setTextField2(String textField2) {\n \t\tthis.textField2 = textField2;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField2(){\n+\tString getTextField2() {\n \t\treturn textField2;\n \t}\n \n-\tvoid setTextField3(String textField3){\n+\tvoid setTextField3(String textField3) {\n \t\tthis.textField3 = textField3;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField3(){\n+\tString getTextField3() {\n \t\treturn textField3;\n \t}\n \n-\tvoid setTextField4(String textField4){\n+\tvoid setTextField4(String textField4) {\n \t\tthis.textField4 = textField4;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField4(){\n+\tString getTextField4() {\n \t\treturn textField4;\n \t}\n \n-\tvoid setTextField1Type(MetadataType textField1Type){\n+\tvoid setTextField1Type(MetadataType textField1Type) {\n \t\tthis.textField1Type = textField1Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField1Type(){\n+\tMetadataType getTextField1Type() {\n \t\treturn textField1Type;\n \t}\n \n-\tvoid setTextField2Type(MetadataType textField2Type){\n+\tvoid setTextField2Type(MetadataType textField2Type) {\n \t\tthis.textField2Type = textField2Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField2Type(){\n+\tMetadataType getTextField2Type() {\n \t\treturn textField2Type;\n \t}\n \n-\tvoid setTextField3Type(MetadataType textField3Type){\n+\tvoid setTextField3Type(MetadataType textField3Type) {\n \t\tthis.textField3Type = textField3Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField3Type(){\n+\tMetadataType getTextField3Type() {\n \t\treturn textField3Type;\n \t}\n \n-\tvoid setTextField4Type(MetadataType textField4Type){\n+\tvoid setTextField4Type(MetadataType textField4Type) {\n \t\tthis.textField4Type = textField4Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField4Type(){\n+\tMetadataType getTextField4Type() {\n \t\treturn textField4Type;\n \t}\n \n-\tvoid setTitle(String title){\n+\tvoid setTitle(String title) {\n \t\tthis.title = title;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTitle(){\n+\tString getTitle() {\n \t\treturn title;\n \t}\n \n-\tvoid setPrimaryGraphic(SdlArtwork primaryGraphic){\n+\tvoid setPrimaryGraphic(SdlArtwork primaryGraphic) {\n \t\tthis.primaryGraphic = primaryGraphic;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tSdlArtwork getPrimaryGraphic(){\n+\tSdlArtwork getPrimaryGraphic() {\n \t\treturn primaryGraphic;\n \t}\n \n-\tvoid setSecondaryGraphic(SdlArtwork secondaryGraphic){\n+\tvoid setSecondaryGraphic(SdlArtwork secondaryGraphic) {\n \t\tthis.secondaryGraphic = secondaryGraphic;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tSdlArtwork getSecondaryGraphic(){\n+\tSdlArtwork getSecondaryGraphic() {\n \t\treturn secondaryGraphic;\n \t}\n \n-\tvoid setBatchUpdates(boolean batching){\n+\tvoid setBatchUpdates(boolean batching) {\n \t\tthis.batchingUpdates = batching;\n \t}\n \n+\tprivate void addListeners() {\n+\t\t// add listener\n+\t\thmiListener = new OnRPCNotificationListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onNotified(RPCNotification notification) {\n+\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus) notification;\n+\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n+\t\t\t\tupdateTransactionQueueSuspended();\n+\t\t\t}\n+\t\t};\n+\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n+\n+\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n+\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n+\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n+\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n+\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 1094}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDA3NjI4OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1Njo0NlrOHGllFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1Njo0NlrOHGllFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2OTIwNQ==", "bodyText": "Does closing the queue work instead of canceling each task individually?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476669205", "createdAt": "2020-08-25T18:56:46Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +142,353 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// set mainfield 1\n-\t\tshow.setMainField1(tempString.toString());\n-\n-\t\t// new stringbuilder object\n-\t\ttempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t// If text 3 exists, put it in slot 2\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0){\n-\t\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t\t// If text 3 exists, put it in slot 2 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField4Type);\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 unformatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField2(textField4Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t//Transactions already exist, cancelling them\n+\t\t\tfor (Task task : transactionQueue.getTasksAsList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 515}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDA5MzMzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowMTozNlrOHGlv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTowMTozNlrOHGlv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3MTk3Nw==", "bodyText": "You don't need a method and var for canceling the task. The parent Task class already has a state. So you can call task.cancelTask() to mark the task as cancelled. And to check if it is canceled use\nif (getState() == Task.CANCELED) ...", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476671977", "createdAt": "2020-08-25T19:01:36Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData, sentShow;\n+    private TextsAndGraphicsState updatedState;\n+    private CompletionListener listener;\n+    private boolean taskIsCanceled;\n+    private TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener;\n+\n+    public TextAndGraphicUpdateOperation(ISdl internalInterface, FileManager fileManager, WindowCapability currentCapabilities,\n+                                         Show currentScreenData, TextsAndGraphicsState newState, CompletionListener listener, TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener) {\n+        super(\"TextAndGraphicUpdateOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.fileManager = new WeakReference<>(fileManager);\n+        this.defaultMainWindowCapability = currentCapabilities;\n+        this.currentScreenData = currentScreenData;\n+        this.updatedState = newState;\n+        this.listener = listener;\n+        this.currentScreenDataUpdateListener = currentScreenDataUpdateListener;\n+        this.taskIsCanceled = false;\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    void start() {\n+        if (taskIsCanceled) {\n+            finishOperation(false);\n+            return;\n+        }\n+\n+        // Build a show with everything from `self.newState`, we'll pull things out later if we can.\n+        Show fullShow = new Show();\n+        fullShow.setAlignment(updatedState.getTextAlignment());\n+        fullShow = assembleShowText(fullShow);\n+        fullShow = assembleShowImages(fullShow);\n+\n+        if (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()) {\n+            DebugTool.logInfo(TAG, \"No images to send, sending text\");\n+            // If there are no images to update, just send the text\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+\n+        } else if (!sdlArtworkNeedsUpload(updatedState.getPrimaryGraphic()) && !sdlArtworkNeedsUpload(updatedState.getSecondaryGraphic())) {\n+            DebugTool.logInfo(TAG, \"Images already uploaded, sending full update\");\n+            // The files to be updated are already uploaded, send the full show immediately\n+            sendShow(fullShow, new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+        } else {\n+            DebugTool.logInfo(TAG, \"Images need to be uploaded, sending text and uploading images\");\n+\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    uploadImagesAndSendWhenDone(new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            finishOperation(success);\n+                        }\n+                    });\n+\n+                }\n+            });\n+        }\n+    }\n+\n+    void sendShow(final Show show, final CompletionListener listener) {\n+        show.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DebugTool.logInfo(TAG, \"Text and Graphic update completed\");\n+                if (response.getSuccess()) {\n+                    updateCurrentScreenDataFromShow(show);\n+                }\n+                listener.onComplete(response.getSuccess());\n+\n+            }\n+        });\n+        internalInterface.get().sendRPC(show);\n+    }\n+\n+\n+    void uploadImagesAndSendWhenDone(final CompletionListener listener) {\n+        uploadImages(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                Show showWithGraphics = createImageOnlyShowWithPrimaryArtwork(updatedState.getPrimaryGraphic(), updatedState.getSecondaryGraphic());\n+                if (showWithGraphics != null) {\n+                    DebugTool.logInfo(TAG, \"Sending update with the successfully uploaded images\");\n+                    sendShow(showWithGraphics, new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            listener.onComplete(success);\n+                        }\n+                    });\n+                } else {\n+                    DebugTool.logWarning(TAG, \"All images failed to upload. No graphics to show, skipping update.\");\n+                    listener.onComplete(success);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void uploadImages(final CompletionListener listener) {\n+        List<SdlArtwork> artworksToUpload = new ArrayList<>();\n+\n+        // add primary image\n+        if (shouldUpdatePrimaryImage() && !updatedState.getPrimaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getPrimaryGraphic());\n+        }\n+\n+        // add secondary image\n+        if (shouldUpdateSecondaryImage() && !updatedState.getSecondaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getSecondaryGraphic());\n+        }\n+\n+        if (artworksToUpload.size() == 0) {\n+            DebugTool.logInfo(TAG, \"No artworks need an upload, sending them without upload instead\");\n+            listener.onComplete(true);\n+        }\n+\n+        // use file manager to upload art\n+        if (fileManager.get() != null) {\n+            fileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n+                @Override\n+                public void onComplete(Map<String, String> errors) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    if (errors != null) {\n+                        DebugTool.logError(TAG, \"Text and graphic manager artwork failed to upload with error: \" + errors.toString());\n+                        listener.onComplete(false);\n+                    } else {\n+                        listener.onComplete(true);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private Show assembleShowImages(Show show) {\n+        if (shouldUpdatePrimaryImage()) {\n+            show.setGraphic(updatedState.getPrimaryGraphic().getImageRPC());\n+        }\n+\n+        if (shouldUpdateSecondaryImage()) {\n+            show.setSecondaryGraphic(updatedState.getSecondaryGraphic().getImageRPC());\n+        }\n+\n+        return show;\n+    }\n+\n+    Show createImageOnlyShowWithPrimaryArtwork(SdlArtwork primaryArtwork, SdlArtwork secondaryArtwork) {\n+        Show newShow = new Show();\n+        newShow.setGraphic((primaryArtwork != null && !(sdlArtworkNeedsUpload(primaryArtwork))) ? primaryArtwork.getImageRPC() : null);\n+        newShow.setSecondaryGraphic((secondaryArtwork != null && !(sdlArtworkNeedsUpload(secondaryArtwork))) ? secondaryArtwork.getImageRPC() : null);\n+        if (newShow.getGraphic() == null && newShow.getSecondaryGraphic() == null) {\n+            DebugTool.logInfo(TAG, \"No graphics to upload\");\n+            return null;\n+        }\n+        return newShow;\n+    }\n+\n+    Show assembleShowText(Show show) {\n+        show = setBlankTextFields(show);\n+\n+        if (updatedState.getMediaTrackTextField() != null && shouldUpdateMediaTrackField()) {\n+            show.setMediaTrack(updatedState.getMediaTrackTextField());\n+        }\n+\n+        if (updatedState.getTitle() != null && shouldUpdateTitleField()) {\n+            show.setTemplateTitle(updatedState.getTitle());\n+        }\n+\n+        List<String> nonNullFields = findValidMainTextFields();\n+        if (nonNullFields.isEmpty()) {\n+            return show;\n+        }\n+\n+        int numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n+\n+        switch (numberOfLines) {\n+            case 1:\n+                show = assembleOneLineShowText(show, nonNullFields);\n+                break;\n+            case 2:\n+                show = assembleTwoLineShowText(show);\n+                break;\n+            case 3:\n+                show = assembleThreeLineShowText(show);\n+                break;\n+            case 4:\n+                show = assembleFourLineShowText(show);\n+                break;\n+        }\n+        return show;\n+    }\n+\n+    private Show assembleOneLineShowText(Show show, List<String> showFields) {\n+        StringBuilder showString1 = new StringBuilder();\n+        for (int i = 0; i < showFields.size(); i++) {\n+            if (i > 0) {\n+                showString1.append(\" - \").append(showFields.get(i));\n+            } else {\n+                showString1.append(showFields.get(i));\n+            }\n+        }\n+        show.setMainField1(showString1.toString());\n+        MetadataTags tags = new MetadataTags();\n+        tags.setMainField1(findNonNullMetadataFields());\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    private Show assembleTwoLineShowText(Show show) {\n+        StringBuilder tempString = new StringBuilder();\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            tempString.append(updatedState.getTextField1());\n+            if (updatedState.getTextField1() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            if ((updatedState.getTextField3() == null || !(updatedState.getTextField3().length() > 0)) && (updatedState.getTextField4() == null || !(updatedState.getTextField4().length() > 0))) {\n+                // text does not exist in slots 3 or 4, put text2 in slot 2\n+                show.setMainField2(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField2Type());\n+                }\n+            } else if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+                // If text 1 exists, put it in slot 1 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField2Type());\n+                    if (updatedState.getTextField1Type() != null) {\n+                        typeList.add(updatedState.getTextField1Type());\n+                    }\n+                    tags.setMainField1(typeList);\n+                }\n+            } else {\n+                // If text 1 does not exist, put it in slot 1 unformatted\n+                tempString.append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField1(updatedState.getTextField2Type());\n+                }\n+            }\n+        }\n+\n+        // set mainField1\n+        show.setMainField1(tempString.toString());\n+\n+        // new stringBuilder object\n+        tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            // If text 3 exists, put it in slot 2\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                List<MetadataType> typeList = new ArrayList<>();\n+                typeList.add(updatedState.getTextField3Type());\n+                tags.setMainField2(typeList);\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 2 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField4Type());\n+                    if (updatedState.getTextField3Type() != null) {\n+                        typeList.add(updatedState.getTextField3Type());\n+                    }\n+                    tags.setMainField2(typeList);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 unformatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+\n+        if (tempString.toString().length() > 0) {\n+            show.setMainField2(tempString.toString());\n+        }\n+\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleThreeLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        StringBuilder tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 3 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> tags4 = new ArrayList<>();\n+                    if (updatedState.getTextField3Type() != null) {\n+                        tags4.add(updatedState.getTextField3Type());\n+                    }\n+                    tags4.add(updatedState.getTextField4Type());\n+                    tags.setMainField3(tags4);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 formatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField3(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+        show.setMainField3(tempString.toString());\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleFourLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            show.setMainField3(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            show.setMainField4(updatedState.getTextField4());\n+            if (updatedState.getTextField4Type() != null) {\n+                tags.setMainField4(updatedState.getTextField4Type());\n+            }\n+        }\n+\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    // Extraction\n+\n+    Show extractTextFromShow(Show show) {\n+        Show newShow = new Show();\n+        newShow.setMainField1(show.getMainField1());\n+        newShow.setMainField2(show.getMainField2());\n+        newShow.setMainField3(show.getMainField3());\n+        newShow.setMainField4(show.getMainField4());\n+        newShow.setTemplateTitle(show.getTemplateTitle());\n+        newShow.setMetadataTags(show.getMetadataTags());\n+        newShow.setAlignment(show.getAlignment());\n+\n+        return newShow;\n+    }\n+\n+    private Show setBlankTextFields(Show newShow) {\n+        newShow.setMainField1(\"\");\n+        newShow.setMainField2(\"\");\n+        newShow.setMainField3(\"\");\n+        newShow.setMainField4(\"\");\n+        newShow.setMediaTrack(\"\");\n+        newShow.setTemplateTitle(\"\");\n+\n+        return newShow;\n+    }\n+\n+    private void updateCurrentScreenDataFromShow(Show show) {\n+        if (show == null) {\n+            DebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n+            return;\n+        }\n+\n+        // If the items are null, they were not updated, so we can't just set it directly\n+        if (show.getMainField1() != null) {\n+            currentScreenData.setMainField1(show.getMainField1());\n+        }\n+        if (show.getMainField2() != null) {\n+            currentScreenData.setMainField2(show.getMainField2());\n+        }\n+        if (show.getMainField3() != null) {\n+            currentScreenData.setMainField3(show.getMainField3());\n+        }\n+        if (show.getMainField4() != null) {\n+            currentScreenData.setMainField4(show.getMainField4());\n+        }\n+        if (show.getTemplateTitle() != null) {\n+            currentScreenData.setTemplateTitle(show.getTemplateTitle());\n+        }\n+        if (show.getMediaTrack() != null) {\n+            currentScreenData.setMediaTrack(show.getMediaTrack());\n+        }\n+        if (show.getMetadataTags() != null) {\n+            currentScreenData.setMetadataTags(show.getMetadataTags());\n+        }\n+        if (show.getAlignment() != null) {\n+            currentScreenData.setAlignment(show.getAlignment());\n+        }\n+        if (show.getGraphic() != null) {\n+            currentScreenData.setGraphic(show.getGraphic());\n+        }\n+        if (show.getSecondaryGraphic() != null) {\n+            currentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n+        }\n+        if (currentScreenDataUpdateListener != null) {\n+            currentScreenDataUpdateListener.onUpdate(show);\n+        }\n+    }\n+\n+    // Helpers\n+\n+    private List<String> findValidMainTextFields() {\n+        List<String> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            array.add(updatedState.getTextField1());\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            array.add(updatedState.getTextField2());\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            array.add(updatedState.getTextField3());\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            array.add(updatedState.getTextField4());\n+        }\n+\n+        return array;\n+    }\n+\n+\n+    private List<MetadataType> findNonNullMetadataFields() {\n+        List<MetadataType> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1Type() != null) {\n+            array.add(updatedState.getTextField1Type());\n+        }\n+\n+        if (updatedState.getTextField2Type() != null) {\n+            array.add(updatedState.getTextField2Type());\n+        }\n+\n+        if (updatedState.getTextField3Type() != null) {\n+            array.add(updatedState.getTextField3Type());\n+        }\n+\n+        if (updatedState.getTextField4Type() != null) {\n+            array.add(updatedState.getTextField4Type());\n+        }\n+\n+        return array;\n+    }\n+\n+    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n+    private boolean sdlArtworkNeedsUpload(SdlArtwork artwork) {\n+        if (fileManager.get() != null) {\n+            return artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check to see if primaryGraphic should be updated\n+     *\n+     * @return true if primaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdatePrimaryImage() {\n+        boolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n+\n+        String currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n+        String primaryGraphicName = updatedState.getPrimaryGraphic() != null ? updatedState.getPrimaryGraphic().getName() : null;\n+        return templateSupportsPrimaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n+                && updatedState.getPrimaryGraphic() != null;\n+    }\n+\n+    /**\n+     * Check to see if secondaryGraphic should be updated\n+     *\n+     * @return true if secondaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdateSecondaryImage() {\n+        boolean templateSupportsSecondaryArtwork = (templateSupportsImageField(ImageFieldName.graphic) || templateSupportsImageField(ImageFieldName.secondaryGraphic));\n+\n+        String currentScreenDataSecondaryGraphicName = (currentScreenData != null && currentScreenData.getSecondaryGraphic() != null) ? currentScreenData.getSecondaryGraphic().getValue() : null;\n+        String secondaryGraphicName = updatedState.getSecondaryGraphic() != null ? updatedState.getSecondaryGraphic().getName() : null;\n+        return templateSupportsSecondaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true)\n+                && updatedState.getSecondaryGraphic() != null;\n+    }\n+\n+    /**\n+     * Check to see if template supports the specified image field\n+     *\n+     * @return true if image field is supported, false if not\n+     */\n+    private boolean templateSupportsImageField(ImageFieldName name) {\n+        return defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(defaultMainWindowCapability, name);\n+    }\n+\n+    /**\n+     * Check to see if mediaTrackTextField should be updated\n+     *\n+     * @return true if mediaTrackTextField should be updated, false if not\n+     */\n+    private boolean shouldUpdateMediaTrackField() {\n+        return templateSupportsTextField(TextFieldName.mediaTrack);\n+    }\n+\n+    /**\n+     * Check to see if title should be updated\n+     *\n+     * @return true if title should be updated, false if not\n+     */\n+    private boolean shouldUpdateTitleField() {\n+        return templateSupportsTextField(TextFieldName.templateTitle);\n+    }\n+\n+    /**\n+     * Check to see if field should be updated\n+     *\n+     * @return true if field should be updated, false if not\n+     */\n+    private boolean templateSupportsTextField(TextFieldName name) {\n+        return defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(defaultMainWindowCapability, name);\n+    }\n+\n+    public Show getCurrentScreenData() {\n+        return currentScreenData;\n+    }\n+\n+    public void setCurrentScreenData(Show currentScreenData) {\n+        this.currentScreenData = currentScreenData;\n+    }\n+\n+    void finishOperation(boolean success) {\n+        DebugTool.logInfo(TAG, \"Finishing text and graphic update operation\");\n+        listener.onComplete(success);\n+        onFinished();\n+    }\n+    public void setTaskIsCanceled(boolean taskIsCanceled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 633}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDE0MzUwOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxNjoyM1rOHGmPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOToxNjoyM1rOHGmPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY3OTk0OA==", "bodyText": "Is that =updateOperationListener  necessary? can we just pass the original listener directly to the operation?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476679948", "createdAt": "2020-08-25T19:16:23Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +142,353 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// set mainfield 1\n-\t\tshow.setMainField1(tempString.toString());\n-\n-\t\t// new stringbuilder object\n-\t\ttempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t// If text 3 exists, put it in slot 2\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0){\n-\t\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t\t// If text 3 exists, put it in slot 2 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField4Type);\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 unformatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField2(textField4Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t//Transactions already exist, cancelling them\n+\t\t\tfor (Task task : transactionQueue.getTasksAsList()) {\n+\t\t\t\tif (task instanceof TextAndGraphicUpdateOperation) {\n+\t\t\t\t\t((TextAndGraphicUpdateOperation) task).setTaskIsCanceled(true);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n-\t\tif (tempString.toString().length() > 0){\n-\t\t\tshow.setMainField2(tempString.toString());\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleThreeLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n+\t\t// transactionQueue.getTaskAsList() will not return a task in progress, so we need to check\n+\t\tif (updateOperation != null && updateOperation.getState() == Task.IN_PROGRESS) {\n+\t\t\tupdateOperation.setTaskIsCanceled(true);\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n+\t\tCurrentScreenDataUpdatedListener currentScreenDataUpdateListener = new CurrentScreenDataUpdatedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onUpdate(Show show) {\n+\t\t\t\tupdatePendingOperationsWithNewScreenData(show);\n \t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0) {\n-\t\t\tif (textField3 != null && textField3.length() > 0) {\n-\t\t\t\t// If text 3 exists, put it in slot 3 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> tags4 = new ArrayList<>();\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttags4.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags4.add(textField4Type);\n-\t\t\t\t\ttags.setMainField3(tags4);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 formatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField3(textField4Type);\n+\t\t};\n+\t\tCompletionListener updateOperationListener = new CompletionListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 582}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDIxMDkxOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozNjoyNlrOHGm5Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozNjoyNlrOHGm5Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MDc0Nw==", "bodyText": "Shouldnt we also update currentScreenData?\nthis.currentScreenData = show", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476690747", "createdAt": "2020-08-25T19:36:26Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +142,353 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// set mainfield 1\n-\t\tshow.setMainField1(tempString.toString());\n-\n-\t\t// new stringbuilder object\n-\t\ttempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t// If text 3 exists, put it in slot 2\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0){\n-\t\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t\t// If text 3 exists, put it in slot 2 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField4Type);\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 unformatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField2(textField4Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t//Transactions already exist, cancelling them\n+\t\t\tfor (Task task : transactionQueue.getTasksAsList()) {\n+\t\t\t\tif (task instanceof TextAndGraphicUpdateOperation) {\n+\t\t\t\t\t((TextAndGraphicUpdateOperation) task).setTaskIsCanceled(true);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n-\t\tif (tempString.toString().length() > 0){\n-\t\t\tshow.setMainField2(tempString.toString());\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleThreeLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n+\t\t// transactionQueue.getTaskAsList() will not return a task in progress, so we need to check\n+\t\tif (updateOperation != null && updateOperation.getState() == Task.IN_PROGRESS) {\n+\t\t\tupdateOperation.setTaskIsCanceled(true);\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n+\t\tCurrentScreenDataUpdatedListener currentScreenDataUpdateListener = new CurrentScreenDataUpdatedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onUpdate(Show show) {\n+\t\t\t\tupdatePendingOperationsWithNewScreenData(show);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 560}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQzMjEzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0Mzo1MVrOHGpBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0Mzo1MVrOHGpBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNTU3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return templateSupportsPrimaryArtwork\n          \n          \n            \n                            && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n          \n          \n            \n                            && updatedState.getPrimaryGraphic() != null;\n          \n          \n            \n                    return templateSupportsPrimaryArtwork\n          \n          \n            \n                            && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true);\n          \n      \n    \n    \n  \n\nI dont think updatedState.getPrimaryGraphic() != null matters in this case. Right?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476725574", "createdAt": "2020-08-25T20:43:51Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData, sentShow;\n+    private TextsAndGraphicsState updatedState;\n+    private CompletionListener listener;\n+    private boolean taskIsCanceled;\n+    private TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener;\n+\n+    public TextAndGraphicUpdateOperation(ISdl internalInterface, FileManager fileManager, WindowCapability currentCapabilities,\n+                                         Show currentScreenData, TextsAndGraphicsState newState, CompletionListener listener, TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener) {\n+        super(\"TextAndGraphicUpdateOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.fileManager = new WeakReference<>(fileManager);\n+        this.defaultMainWindowCapability = currentCapabilities;\n+        this.currentScreenData = currentScreenData;\n+        this.updatedState = newState;\n+        this.listener = listener;\n+        this.currentScreenDataUpdateListener = currentScreenDataUpdateListener;\n+        this.taskIsCanceled = false;\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    void start() {\n+        if (taskIsCanceled) {\n+            finishOperation(false);\n+            return;\n+        }\n+\n+        // Build a show with everything from `self.newState`, we'll pull things out later if we can.\n+        Show fullShow = new Show();\n+        fullShow.setAlignment(updatedState.getTextAlignment());\n+        fullShow = assembleShowText(fullShow);\n+        fullShow = assembleShowImages(fullShow);\n+\n+        if (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()) {\n+            DebugTool.logInfo(TAG, \"No images to send, sending text\");\n+            // If there are no images to update, just send the text\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+\n+        } else if (!sdlArtworkNeedsUpload(updatedState.getPrimaryGraphic()) && !sdlArtworkNeedsUpload(updatedState.getSecondaryGraphic())) {\n+            DebugTool.logInfo(TAG, \"Images already uploaded, sending full update\");\n+            // The files to be updated are already uploaded, send the full show immediately\n+            sendShow(fullShow, new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+        } else {\n+            DebugTool.logInfo(TAG, \"Images need to be uploaded, sending text and uploading images\");\n+\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    uploadImagesAndSendWhenDone(new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            finishOperation(success);\n+                        }\n+                    });\n+\n+                }\n+            });\n+        }\n+    }\n+\n+    void sendShow(final Show show, final CompletionListener listener) {\n+        show.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DebugTool.logInfo(TAG, \"Text and Graphic update completed\");\n+                if (response.getSuccess()) {\n+                    updateCurrentScreenDataFromShow(show);\n+                }\n+                listener.onComplete(response.getSuccess());\n+\n+            }\n+        });\n+        internalInterface.get().sendRPC(show);\n+    }\n+\n+\n+    void uploadImagesAndSendWhenDone(final CompletionListener listener) {\n+        uploadImages(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                Show showWithGraphics = createImageOnlyShowWithPrimaryArtwork(updatedState.getPrimaryGraphic(), updatedState.getSecondaryGraphic());\n+                if (showWithGraphics != null) {\n+                    DebugTool.logInfo(TAG, \"Sending update with the successfully uploaded images\");\n+                    sendShow(showWithGraphics, new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            listener.onComplete(success);\n+                        }\n+                    });\n+                } else {\n+                    DebugTool.logWarning(TAG, \"All images failed to upload. No graphics to show, skipping update.\");\n+                    listener.onComplete(success);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void uploadImages(final CompletionListener listener) {\n+        List<SdlArtwork> artworksToUpload = new ArrayList<>();\n+\n+        // add primary image\n+        if (shouldUpdatePrimaryImage() && !updatedState.getPrimaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getPrimaryGraphic());\n+        }\n+\n+        // add secondary image\n+        if (shouldUpdateSecondaryImage() && !updatedState.getSecondaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getSecondaryGraphic());\n+        }\n+\n+        if (artworksToUpload.size() == 0) {\n+            DebugTool.logInfo(TAG, \"No artworks need an upload, sending them without upload instead\");\n+            listener.onComplete(true);\n+        }\n+\n+        // use file manager to upload art\n+        if (fileManager.get() != null) {\n+            fileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n+                @Override\n+                public void onComplete(Map<String, String> errors) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    if (errors != null) {\n+                        DebugTool.logError(TAG, \"Text and graphic manager artwork failed to upload with error: \" + errors.toString());\n+                        listener.onComplete(false);\n+                    } else {\n+                        listener.onComplete(true);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private Show assembleShowImages(Show show) {\n+        if (shouldUpdatePrimaryImage()) {\n+            show.setGraphic(updatedState.getPrimaryGraphic().getImageRPC());\n+        }\n+\n+        if (shouldUpdateSecondaryImage()) {\n+            show.setSecondaryGraphic(updatedState.getSecondaryGraphic().getImageRPC());\n+        }\n+\n+        return show;\n+    }\n+\n+    Show createImageOnlyShowWithPrimaryArtwork(SdlArtwork primaryArtwork, SdlArtwork secondaryArtwork) {\n+        Show newShow = new Show();\n+        newShow.setGraphic((primaryArtwork != null && !(sdlArtworkNeedsUpload(primaryArtwork))) ? primaryArtwork.getImageRPC() : null);\n+        newShow.setSecondaryGraphic((secondaryArtwork != null && !(sdlArtworkNeedsUpload(secondaryArtwork))) ? secondaryArtwork.getImageRPC() : null);\n+        if (newShow.getGraphic() == null && newShow.getSecondaryGraphic() == null) {\n+            DebugTool.logInfo(TAG, \"No graphics to upload\");\n+            return null;\n+        }\n+        return newShow;\n+    }\n+\n+    Show assembleShowText(Show show) {\n+        show = setBlankTextFields(show);\n+\n+        if (updatedState.getMediaTrackTextField() != null && shouldUpdateMediaTrackField()) {\n+            show.setMediaTrack(updatedState.getMediaTrackTextField());\n+        }\n+\n+        if (updatedState.getTitle() != null && shouldUpdateTitleField()) {\n+            show.setTemplateTitle(updatedState.getTitle());\n+        }\n+\n+        List<String> nonNullFields = findValidMainTextFields();\n+        if (nonNullFields.isEmpty()) {\n+            return show;\n+        }\n+\n+        int numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n+\n+        switch (numberOfLines) {\n+            case 1:\n+                show = assembleOneLineShowText(show, nonNullFields);\n+                break;\n+            case 2:\n+                show = assembleTwoLineShowText(show);\n+                break;\n+            case 3:\n+                show = assembleThreeLineShowText(show);\n+                break;\n+            case 4:\n+                show = assembleFourLineShowText(show);\n+                break;\n+        }\n+        return show;\n+    }\n+\n+    private Show assembleOneLineShowText(Show show, List<String> showFields) {\n+        StringBuilder showString1 = new StringBuilder();\n+        for (int i = 0; i < showFields.size(); i++) {\n+            if (i > 0) {\n+                showString1.append(\" - \").append(showFields.get(i));\n+            } else {\n+                showString1.append(showFields.get(i));\n+            }\n+        }\n+        show.setMainField1(showString1.toString());\n+        MetadataTags tags = new MetadataTags();\n+        tags.setMainField1(findNonNullMetadataFields());\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    private Show assembleTwoLineShowText(Show show) {\n+        StringBuilder tempString = new StringBuilder();\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            tempString.append(updatedState.getTextField1());\n+            if (updatedState.getTextField1() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            if ((updatedState.getTextField3() == null || !(updatedState.getTextField3().length() > 0)) && (updatedState.getTextField4() == null || !(updatedState.getTextField4().length() > 0))) {\n+                // text does not exist in slots 3 or 4, put text2 in slot 2\n+                show.setMainField2(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField2Type());\n+                }\n+            } else if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+                // If text 1 exists, put it in slot 1 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField2Type());\n+                    if (updatedState.getTextField1Type() != null) {\n+                        typeList.add(updatedState.getTextField1Type());\n+                    }\n+                    tags.setMainField1(typeList);\n+                }\n+            } else {\n+                // If text 1 does not exist, put it in slot 1 unformatted\n+                tempString.append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField1(updatedState.getTextField2Type());\n+                }\n+            }\n+        }\n+\n+        // set mainField1\n+        show.setMainField1(tempString.toString());\n+\n+        // new stringBuilder object\n+        tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            // If text 3 exists, put it in slot 2\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                List<MetadataType> typeList = new ArrayList<>();\n+                typeList.add(updatedState.getTextField3Type());\n+                tags.setMainField2(typeList);\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 2 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField4Type());\n+                    if (updatedState.getTextField3Type() != null) {\n+                        typeList.add(updatedState.getTextField3Type());\n+                    }\n+                    tags.setMainField2(typeList);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 unformatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+\n+        if (tempString.toString().length() > 0) {\n+            show.setMainField2(tempString.toString());\n+        }\n+\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleThreeLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        StringBuilder tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 3 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> tags4 = new ArrayList<>();\n+                    if (updatedState.getTextField3Type() != null) {\n+                        tags4.add(updatedState.getTextField3Type());\n+                    }\n+                    tags4.add(updatedState.getTextField4Type());\n+                    tags.setMainField3(tags4);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 formatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField3(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+        show.setMainField3(tempString.toString());\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleFourLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            show.setMainField3(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            show.setMainField4(updatedState.getTextField4());\n+            if (updatedState.getTextField4Type() != null) {\n+                tags.setMainField4(updatedState.getTextField4Type());\n+            }\n+        }\n+\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    // Extraction\n+\n+    Show extractTextFromShow(Show show) {\n+        Show newShow = new Show();\n+        newShow.setMainField1(show.getMainField1());\n+        newShow.setMainField2(show.getMainField2());\n+        newShow.setMainField3(show.getMainField3());\n+        newShow.setMainField4(show.getMainField4());\n+        newShow.setTemplateTitle(show.getTemplateTitle());\n+        newShow.setMetadataTags(show.getMetadataTags());\n+        newShow.setAlignment(show.getAlignment());\n+\n+        return newShow;\n+    }\n+\n+    private Show setBlankTextFields(Show newShow) {\n+        newShow.setMainField1(\"\");\n+        newShow.setMainField2(\"\");\n+        newShow.setMainField3(\"\");\n+        newShow.setMainField4(\"\");\n+        newShow.setMediaTrack(\"\");\n+        newShow.setTemplateTitle(\"\");\n+\n+        return newShow;\n+    }\n+\n+    private void updateCurrentScreenDataFromShow(Show show) {\n+        if (show == null) {\n+            DebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n+            return;\n+        }\n+\n+        // If the items are null, they were not updated, so we can't just set it directly\n+        if (show.getMainField1() != null) {\n+            currentScreenData.setMainField1(show.getMainField1());\n+        }\n+        if (show.getMainField2() != null) {\n+            currentScreenData.setMainField2(show.getMainField2());\n+        }\n+        if (show.getMainField3() != null) {\n+            currentScreenData.setMainField3(show.getMainField3());\n+        }\n+        if (show.getMainField4() != null) {\n+            currentScreenData.setMainField4(show.getMainField4());\n+        }\n+        if (show.getTemplateTitle() != null) {\n+            currentScreenData.setTemplateTitle(show.getTemplateTitle());\n+        }\n+        if (show.getMediaTrack() != null) {\n+            currentScreenData.setMediaTrack(show.getMediaTrack());\n+        }\n+        if (show.getMetadataTags() != null) {\n+            currentScreenData.setMetadataTags(show.getMetadataTags());\n+        }\n+        if (show.getAlignment() != null) {\n+            currentScreenData.setAlignment(show.getAlignment());\n+        }\n+        if (show.getGraphic() != null) {\n+            currentScreenData.setGraphic(show.getGraphic());\n+        }\n+        if (show.getSecondaryGraphic() != null) {\n+            currentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n+        }\n+        if (currentScreenDataUpdateListener != null) {\n+            currentScreenDataUpdateListener.onUpdate(show);\n+        }\n+    }\n+\n+    // Helpers\n+\n+    private List<String> findValidMainTextFields() {\n+        List<String> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            array.add(updatedState.getTextField1());\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            array.add(updatedState.getTextField2());\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            array.add(updatedState.getTextField3());\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            array.add(updatedState.getTextField4());\n+        }\n+\n+        return array;\n+    }\n+\n+\n+    private List<MetadataType> findNonNullMetadataFields() {\n+        List<MetadataType> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1Type() != null) {\n+            array.add(updatedState.getTextField1Type());\n+        }\n+\n+        if (updatedState.getTextField2Type() != null) {\n+            array.add(updatedState.getTextField2Type());\n+        }\n+\n+        if (updatedState.getTextField3Type() != null) {\n+            array.add(updatedState.getTextField3Type());\n+        }\n+\n+        if (updatedState.getTextField4Type() != null) {\n+            array.add(updatedState.getTextField4Type());\n+        }\n+\n+        return array;\n+    }\n+\n+    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n+    private boolean sdlArtworkNeedsUpload(SdlArtwork artwork) {\n+        if (fileManager.get() != null) {\n+            return artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check to see if primaryGraphic should be updated\n+     *\n+     * @return true if primaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdatePrimaryImage() {\n+        boolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n+\n+        String currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n+        String primaryGraphicName = updatedState.getPrimaryGraphic() != null ? updatedState.getPrimaryGraphic().getName() : null;\n+        return templateSupportsPrimaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n+                && updatedState.getPrimaryGraphic() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 566}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQzMzAzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NDowOVrOHGpB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NDowOVrOHGpB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNTcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return templateSupportsSecondaryArtwork\n          \n          \n            \n                            && !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true)\n          \n          \n            \n                            && updatedState.getSecondaryGraphic() != null;\n          \n          \n            \n                    return templateSupportsSecondaryArtwork\n          \n          \n            \n                            && !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476725719", "createdAt": "2020-08-25T20:44:09Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData, sentShow;\n+    private TextsAndGraphicsState updatedState;\n+    private CompletionListener listener;\n+    private boolean taskIsCanceled;\n+    private TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener;\n+\n+    public TextAndGraphicUpdateOperation(ISdl internalInterface, FileManager fileManager, WindowCapability currentCapabilities,\n+                                         Show currentScreenData, TextsAndGraphicsState newState, CompletionListener listener, TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener) {\n+        super(\"TextAndGraphicUpdateOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.fileManager = new WeakReference<>(fileManager);\n+        this.defaultMainWindowCapability = currentCapabilities;\n+        this.currentScreenData = currentScreenData;\n+        this.updatedState = newState;\n+        this.listener = listener;\n+        this.currentScreenDataUpdateListener = currentScreenDataUpdateListener;\n+        this.taskIsCanceled = false;\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    void start() {\n+        if (taskIsCanceled) {\n+            finishOperation(false);\n+            return;\n+        }\n+\n+        // Build a show with everything from `self.newState`, we'll pull things out later if we can.\n+        Show fullShow = new Show();\n+        fullShow.setAlignment(updatedState.getTextAlignment());\n+        fullShow = assembleShowText(fullShow);\n+        fullShow = assembleShowImages(fullShow);\n+\n+        if (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()) {\n+            DebugTool.logInfo(TAG, \"No images to send, sending text\");\n+            // If there are no images to update, just send the text\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+\n+        } else if (!sdlArtworkNeedsUpload(updatedState.getPrimaryGraphic()) && !sdlArtworkNeedsUpload(updatedState.getSecondaryGraphic())) {\n+            DebugTool.logInfo(TAG, \"Images already uploaded, sending full update\");\n+            // The files to be updated are already uploaded, send the full show immediately\n+            sendShow(fullShow, new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+        } else {\n+            DebugTool.logInfo(TAG, \"Images need to be uploaded, sending text and uploading images\");\n+\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    uploadImagesAndSendWhenDone(new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            finishOperation(success);\n+                        }\n+                    });\n+\n+                }\n+            });\n+        }\n+    }\n+\n+    void sendShow(final Show show, final CompletionListener listener) {\n+        show.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DebugTool.logInfo(TAG, \"Text and Graphic update completed\");\n+                if (response.getSuccess()) {\n+                    updateCurrentScreenDataFromShow(show);\n+                }\n+                listener.onComplete(response.getSuccess());\n+\n+            }\n+        });\n+        internalInterface.get().sendRPC(show);\n+    }\n+\n+\n+    void uploadImagesAndSendWhenDone(final CompletionListener listener) {\n+        uploadImages(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                Show showWithGraphics = createImageOnlyShowWithPrimaryArtwork(updatedState.getPrimaryGraphic(), updatedState.getSecondaryGraphic());\n+                if (showWithGraphics != null) {\n+                    DebugTool.logInfo(TAG, \"Sending update with the successfully uploaded images\");\n+                    sendShow(showWithGraphics, new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            listener.onComplete(success);\n+                        }\n+                    });\n+                } else {\n+                    DebugTool.logWarning(TAG, \"All images failed to upload. No graphics to show, skipping update.\");\n+                    listener.onComplete(success);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void uploadImages(final CompletionListener listener) {\n+        List<SdlArtwork> artworksToUpload = new ArrayList<>();\n+\n+        // add primary image\n+        if (shouldUpdatePrimaryImage() && !updatedState.getPrimaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getPrimaryGraphic());\n+        }\n+\n+        // add secondary image\n+        if (shouldUpdateSecondaryImage() && !updatedState.getSecondaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getSecondaryGraphic());\n+        }\n+\n+        if (artworksToUpload.size() == 0) {\n+            DebugTool.logInfo(TAG, \"No artworks need an upload, sending them without upload instead\");\n+            listener.onComplete(true);\n+        }\n+\n+        // use file manager to upload art\n+        if (fileManager.get() != null) {\n+            fileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n+                @Override\n+                public void onComplete(Map<String, String> errors) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    if (errors != null) {\n+                        DebugTool.logError(TAG, \"Text and graphic manager artwork failed to upload with error: \" + errors.toString());\n+                        listener.onComplete(false);\n+                    } else {\n+                        listener.onComplete(true);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private Show assembleShowImages(Show show) {\n+        if (shouldUpdatePrimaryImage()) {\n+            show.setGraphic(updatedState.getPrimaryGraphic().getImageRPC());\n+        }\n+\n+        if (shouldUpdateSecondaryImage()) {\n+            show.setSecondaryGraphic(updatedState.getSecondaryGraphic().getImageRPC());\n+        }\n+\n+        return show;\n+    }\n+\n+    Show createImageOnlyShowWithPrimaryArtwork(SdlArtwork primaryArtwork, SdlArtwork secondaryArtwork) {\n+        Show newShow = new Show();\n+        newShow.setGraphic((primaryArtwork != null && !(sdlArtworkNeedsUpload(primaryArtwork))) ? primaryArtwork.getImageRPC() : null);\n+        newShow.setSecondaryGraphic((secondaryArtwork != null && !(sdlArtworkNeedsUpload(secondaryArtwork))) ? secondaryArtwork.getImageRPC() : null);\n+        if (newShow.getGraphic() == null && newShow.getSecondaryGraphic() == null) {\n+            DebugTool.logInfo(TAG, \"No graphics to upload\");\n+            return null;\n+        }\n+        return newShow;\n+    }\n+\n+    Show assembleShowText(Show show) {\n+        show = setBlankTextFields(show);\n+\n+        if (updatedState.getMediaTrackTextField() != null && shouldUpdateMediaTrackField()) {\n+            show.setMediaTrack(updatedState.getMediaTrackTextField());\n+        }\n+\n+        if (updatedState.getTitle() != null && shouldUpdateTitleField()) {\n+            show.setTemplateTitle(updatedState.getTitle());\n+        }\n+\n+        List<String> nonNullFields = findValidMainTextFields();\n+        if (nonNullFields.isEmpty()) {\n+            return show;\n+        }\n+\n+        int numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n+\n+        switch (numberOfLines) {\n+            case 1:\n+                show = assembleOneLineShowText(show, nonNullFields);\n+                break;\n+            case 2:\n+                show = assembleTwoLineShowText(show);\n+                break;\n+            case 3:\n+                show = assembleThreeLineShowText(show);\n+                break;\n+            case 4:\n+                show = assembleFourLineShowText(show);\n+                break;\n+        }\n+        return show;\n+    }\n+\n+    private Show assembleOneLineShowText(Show show, List<String> showFields) {\n+        StringBuilder showString1 = new StringBuilder();\n+        for (int i = 0; i < showFields.size(); i++) {\n+            if (i > 0) {\n+                showString1.append(\" - \").append(showFields.get(i));\n+            } else {\n+                showString1.append(showFields.get(i));\n+            }\n+        }\n+        show.setMainField1(showString1.toString());\n+        MetadataTags tags = new MetadataTags();\n+        tags.setMainField1(findNonNullMetadataFields());\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    private Show assembleTwoLineShowText(Show show) {\n+        StringBuilder tempString = new StringBuilder();\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            tempString.append(updatedState.getTextField1());\n+            if (updatedState.getTextField1() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            if ((updatedState.getTextField3() == null || !(updatedState.getTextField3().length() > 0)) && (updatedState.getTextField4() == null || !(updatedState.getTextField4().length() > 0))) {\n+                // text does not exist in slots 3 or 4, put text2 in slot 2\n+                show.setMainField2(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField2Type());\n+                }\n+            } else if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+                // If text 1 exists, put it in slot 1 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField2Type());\n+                    if (updatedState.getTextField1Type() != null) {\n+                        typeList.add(updatedState.getTextField1Type());\n+                    }\n+                    tags.setMainField1(typeList);\n+                }\n+            } else {\n+                // If text 1 does not exist, put it in slot 1 unformatted\n+                tempString.append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField1(updatedState.getTextField2Type());\n+                }\n+            }\n+        }\n+\n+        // set mainField1\n+        show.setMainField1(tempString.toString());\n+\n+        // new stringBuilder object\n+        tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            // If text 3 exists, put it in slot 2\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                List<MetadataType> typeList = new ArrayList<>();\n+                typeList.add(updatedState.getTextField3Type());\n+                tags.setMainField2(typeList);\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 2 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField4Type());\n+                    if (updatedState.getTextField3Type() != null) {\n+                        typeList.add(updatedState.getTextField3Type());\n+                    }\n+                    tags.setMainField2(typeList);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 unformatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+\n+        if (tempString.toString().length() > 0) {\n+            show.setMainField2(tempString.toString());\n+        }\n+\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleThreeLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        StringBuilder tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 3 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> tags4 = new ArrayList<>();\n+                    if (updatedState.getTextField3Type() != null) {\n+                        tags4.add(updatedState.getTextField3Type());\n+                    }\n+                    tags4.add(updatedState.getTextField4Type());\n+                    tags.setMainField3(tags4);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 formatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField3(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+        show.setMainField3(tempString.toString());\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleFourLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            show.setMainField3(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            show.setMainField4(updatedState.getTextField4());\n+            if (updatedState.getTextField4Type() != null) {\n+                tags.setMainField4(updatedState.getTextField4Type());\n+            }\n+        }\n+\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    // Extraction\n+\n+    Show extractTextFromShow(Show show) {\n+        Show newShow = new Show();\n+        newShow.setMainField1(show.getMainField1());\n+        newShow.setMainField2(show.getMainField2());\n+        newShow.setMainField3(show.getMainField3());\n+        newShow.setMainField4(show.getMainField4());\n+        newShow.setTemplateTitle(show.getTemplateTitle());\n+        newShow.setMetadataTags(show.getMetadataTags());\n+        newShow.setAlignment(show.getAlignment());\n+\n+        return newShow;\n+    }\n+\n+    private Show setBlankTextFields(Show newShow) {\n+        newShow.setMainField1(\"\");\n+        newShow.setMainField2(\"\");\n+        newShow.setMainField3(\"\");\n+        newShow.setMainField4(\"\");\n+        newShow.setMediaTrack(\"\");\n+        newShow.setTemplateTitle(\"\");\n+\n+        return newShow;\n+    }\n+\n+    private void updateCurrentScreenDataFromShow(Show show) {\n+        if (show == null) {\n+            DebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n+            return;\n+        }\n+\n+        // If the items are null, they were not updated, so we can't just set it directly\n+        if (show.getMainField1() != null) {\n+            currentScreenData.setMainField1(show.getMainField1());\n+        }\n+        if (show.getMainField2() != null) {\n+            currentScreenData.setMainField2(show.getMainField2());\n+        }\n+        if (show.getMainField3() != null) {\n+            currentScreenData.setMainField3(show.getMainField3());\n+        }\n+        if (show.getMainField4() != null) {\n+            currentScreenData.setMainField4(show.getMainField4());\n+        }\n+        if (show.getTemplateTitle() != null) {\n+            currentScreenData.setTemplateTitle(show.getTemplateTitle());\n+        }\n+        if (show.getMediaTrack() != null) {\n+            currentScreenData.setMediaTrack(show.getMediaTrack());\n+        }\n+        if (show.getMetadataTags() != null) {\n+            currentScreenData.setMetadataTags(show.getMetadataTags());\n+        }\n+        if (show.getAlignment() != null) {\n+            currentScreenData.setAlignment(show.getAlignment());\n+        }\n+        if (show.getGraphic() != null) {\n+            currentScreenData.setGraphic(show.getGraphic());\n+        }\n+        if (show.getSecondaryGraphic() != null) {\n+            currentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n+        }\n+        if (currentScreenDataUpdateListener != null) {\n+            currentScreenDataUpdateListener.onUpdate(show);\n+        }\n+    }\n+\n+    // Helpers\n+\n+    private List<String> findValidMainTextFields() {\n+        List<String> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            array.add(updatedState.getTextField1());\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            array.add(updatedState.getTextField2());\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            array.add(updatedState.getTextField3());\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            array.add(updatedState.getTextField4());\n+        }\n+\n+        return array;\n+    }\n+\n+\n+    private List<MetadataType> findNonNullMetadataFields() {\n+        List<MetadataType> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1Type() != null) {\n+            array.add(updatedState.getTextField1Type());\n+        }\n+\n+        if (updatedState.getTextField2Type() != null) {\n+            array.add(updatedState.getTextField2Type());\n+        }\n+\n+        if (updatedState.getTextField3Type() != null) {\n+            array.add(updatedState.getTextField3Type());\n+        }\n+\n+        if (updatedState.getTextField4Type() != null) {\n+            array.add(updatedState.getTextField4Type());\n+        }\n+\n+        return array;\n+    }\n+\n+    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n+    private boolean sdlArtworkNeedsUpload(SdlArtwork artwork) {\n+        if (fileManager.get() != null) {\n+            return artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check to see if primaryGraphic should be updated\n+     *\n+     * @return true if primaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdatePrimaryImage() {\n+        boolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n+\n+        String currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n+        String primaryGraphicName = updatedState.getPrimaryGraphic() != null ? updatedState.getPrimaryGraphic().getName() : null;\n+        return templateSupportsPrimaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n+                && updatedState.getPrimaryGraphic() != null;\n+    }\n+\n+    /**\n+     * Check to see if secondaryGraphic should be updated\n+     *\n+     * @return true if secondaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdateSecondaryImage() {\n+        boolean templateSupportsSecondaryArtwork = (templateSupportsImageField(ImageFieldName.graphic) || templateSupportsImageField(ImageFieldName.secondaryGraphic));\n+\n+        String currentScreenDataSecondaryGraphicName = (currentScreenData != null && currentScreenData.getSecondaryGraphic() != null) ? currentScreenData.getSecondaryGraphic().getValue() : null;\n+        String secondaryGraphicName = updatedState.getSecondaryGraphic() != null ? updatedState.getSecondaryGraphic().getName() : null;\n+        return templateSupportsSecondaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true)\n+                && updatedState.getSecondaryGraphic() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 581}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQ3Mzk4OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NjowM1rOHGpajA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo1NjowM1rOHGpajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjczMjA0NA==", "bodyText": "shouldn't we pass false here?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                listener.onComplete(success);\n          \n          \n            \n                                listener.onComplete(false);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r476732044", "createdAt": "2020-08-25T20:56:03Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,636 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+public class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData, sentShow;\n+    private TextsAndGraphicsState updatedState;\n+    private CompletionListener listener;\n+    private boolean taskIsCanceled;\n+    private TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener;\n+\n+    public TextAndGraphicUpdateOperation(ISdl internalInterface, FileManager fileManager, WindowCapability currentCapabilities,\n+                                         Show currentScreenData, TextsAndGraphicsState newState, CompletionListener listener, TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener) {\n+        super(\"TextAndGraphicUpdateOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.fileManager = new WeakReference<>(fileManager);\n+        this.defaultMainWindowCapability = currentCapabilities;\n+        this.currentScreenData = currentScreenData;\n+        this.updatedState = newState;\n+        this.listener = listener;\n+        this.currentScreenDataUpdateListener = currentScreenDataUpdateListener;\n+        this.taskIsCanceled = false;\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    void start() {\n+        if (taskIsCanceled) {\n+            finishOperation(false);\n+            return;\n+        }\n+\n+        // Build a show with everything from `self.newState`, we'll pull things out later if we can.\n+        Show fullShow = new Show();\n+        fullShow.setAlignment(updatedState.getTextAlignment());\n+        fullShow = assembleShowText(fullShow);\n+        fullShow = assembleShowImages(fullShow);\n+\n+        if (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()) {\n+            DebugTool.logInfo(TAG, \"No images to send, sending text\");\n+            // If there are no images to update, just send the text\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+\n+        } else if (!sdlArtworkNeedsUpload(updatedState.getPrimaryGraphic()) && !sdlArtworkNeedsUpload(updatedState.getSecondaryGraphic())) {\n+            DebugTool.logInfo(TAG, \"Images already uploaded, sending full update\");\n+            // The files to be updated are already uploaded, send the full show immediately\n+            sendShow(fullShow, new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+        } else {\n+            DebugTool.logInfo(TAG, \"Images need to be uploaded, sending text and uploading images\");\n+\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    if (taskIsCanceled) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    uploadImagesAndSendWhenDone(new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            finishOperation(success);\n+                        }\n+                    });\n+\n+                }\n+            });\n+        }\n+    }\n+\n+    void sendShow(final Show show, final CompletionListener listener) {\n+        show.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DebugTool.logInfo(TAG, \"Text and Graphic update completed\");\n+                if (response.getSuccess()) {\n+                    updateCurrentScreenDataFromShow(show);\n+                }\n+                listener.onComplete(response.getSuccess());\n+\n+            }\n+        });\n+        internalInterface.get().sendRPC(show);\n+    }\n+\n+\n+    void uploadImagesAndSendWhenDone(final CompletionListener listener) {\n+        uploadImages(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                Show showWithGraphics = createImageOnlyShowWithPrimaryArtwork(updatedState.getPrimaryGraphic(), updatedState.getSecondaryGraphic());\n+                if (showWithGraphics != null) {\n+                    DebugTool.logInfo(TAG, \"Sending update with the successfully uploaded images\");\n+                    sendShow(showWithGraphics, new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            listener.onComplete(success);\n+                        }\n+                    });\n+                } else {\n+                    DebugTool.logWarning(TAG, \"All images failed to upload. No graphics to show, skipping update.\");\n+                    listener.onComplete(success);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6121537b5e8ebe00c53bda265cd84527beb1cce4"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTE0MDczOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0ODo0OVrOHIT73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0ODo0OVrOHIT73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NzI3OQ==", "bodyText": "Is there a reason for making setCurrentScreenData, getCurrentScreenData public?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r478477279", "createdAt": "2020-08-27T14:48:49Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/TextAndGraphicUpdateOperation.java", "diffHunk": "@@ -0,0 +1,631 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ManagerUtility;\n+import com.smartdevicelink.managers.file.FileManager;\n+import com.smartdevicelink.managers.file.MultipleFileCompletionListener;\n+import com.smartdevicelink.managers.file.filetypes.SdlArtwork;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.MetadataTags;\n+import com.smartdevicelink.proxy.rpc.Show;\n+import com.smartdevicelink.proxy.rpc.WindowCapability;\n+import com.smartdevicelink.proxy.rpc.enums.ImageFieldName;\n+import com.smartdevicelink.proxy.rpc.enums.MetadataType;\n+import com.smartdevicelink.proxy.rpc.enums.TextFieldName;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+import com.smartdevicelink.util.CompareUtils;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Created by Julian Kast on 8/23/20.\n+ */\n+class TextAndGraphicUpdateOperation extends Task {\n+\n+    private static final String TAG = \"TextAndGraphicUpdateOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    private final WeakReference<FileManager> fileManager;\n+    WindowCapability defaultMainWindowCapability;\n+    private Show currentScreenData;\n+    private TextsAndGraphicsState updatedState;\n+    private CompletionListener listener;\n+    private TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener;\n+\n+    TextAndGraphicUpdateOperation(ISdl internalInterface, FileManager fileManager, WindowCapability currentCapabilities,\n+                                         Show currentScreenData, TextsAndGraphicsState newState, CompletionListener listener, TextAndGraphicManager.CurrentScreenDataUpdatedListener currentScreenDataUpdateListener) {\n+        super(\"TextAndGraphicUpdateOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.fileManager = new WeakReference<>(fileManager);\n+        this.defaultMainWindowCapability = currentCapabilities;\n+        this.currentScreenData = currentScreenData;\n+        this.updatedState = newState;\n+        this.listener = listener;\n+        this.currentScreenDataUpdateListener = currentScreenDataUpdateListener;\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            finishOperation(false);\n+            return;\n+        }\n+\n+        // Build a show with everything from `self.newState`, we'll pull things out later if we can.\n+        Show fullShow = new Show();\n+        fullShow.setAlignment(updatedState.getTextAlignment());\n+        fullShow = assembleShowText(fullShow);\n+        fullShow = assembleShowImages(fullShow);\n+\n+        if (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()) {\n+            DebugTool.logInfo(TAG, \"No images to send, sending text\");\n+            // If there are no images to update, just send the text\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+\n+        } else if (!sdlArtworkNeedsUpload(updatedState.getPrimaryGraphic()) && !sdlArtworkNeedsUpload(updatedState.getSecondaryGraphic())) {\n+            DebugTool.logInfo(TAG, \"Images already uploaded, sending full update\");\n+            // The files to be updated are already uploaded, send the full show immediately\n+            sendShow(fullShow, new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    finishOperation(success);\n+                }\n+            });\n+        } else {\n+            DebugTool.logInfo(TAG, \"Images need to be uploaded, sending text and uploading images\");\n+\n+            sendShow(extractTextFromShow(fullShow), new CompletionListener() {\n+                @Override\n+                public void onComplete(boolean success) {\n+                    if (getState() == Task.CANCELED) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    uploadImagesAndSendWhenDone(new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            finishOperation(success);\n+                        }\n+                    });\n+\n+                }\n+            });\n+        }\n+    }\n+\n+    private void sendShow(final Show show, final CompletionListener listener) {\n+        show.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DebugTool.logInfo(TAG, \"Text and Graphic update completed\");\n+                if (response.getSuccess()) {\n+                    updateCurrentScreenDataFromShow(show);\n+                }\n+                listener.onComplete(response.getSuccess());\n+\n+            }\n+        });\n+        internalInterface.get().sendRPC(show);\n+    }\n+\n+\n+    private void uploadImagesAndSendWhenDone(final CompletionListener listener) {\n+        uploadImages(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                Show showWithGraphics = createImageOnlyShowWithPrimaryArtwork(updatedState.getPrimaryGraphic(), updatedState.getSecondaryGraphic());\n+                if (showWithGraphics != null) {\n+                    DebugTool.logInfo(TAG, \"Sending update with the successfully uploaded images\");\n+                    sendShow(showWithGraphics, new CompletionListener() {\n+                        @Override\n+                        public void onComplete(boolean success) {\n+                            listener.onComplete(success);\n+                        }\n+                    });\n+                } else {\n+                    DebugTool.logWarning(TAG, \"All images failed to upload. No graphics to show, skipping update.\");\n+                    listener.onComplete(false);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void uploadImages(final CompletionListener listener) {\n+        List<SdlArtwork> artworksToUpload = new ArrayList<>();\n+\n+        // add primary image\n+        if (shouldUpdatePrimaryImage() && !updatedState.getPrimaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getPrimaryGraphic());\n+        }\n+\n+        // add secondary image\n+        if (shouldUpdateSecondaryImage() && !updatedState.getSecondaryGraphic().isStaticIcon()) {\n+            artworksToUpload.add(updatedState.getSecondaryGraphic());\n+        }\n+\n+        if (artworksToUpload.size() == 0) {\n+            DebugTool.logInfo(TAG, \"No artworks need an upload, sending them without upload instead\");\n+            listener.onComplete(true);\n+        }\n+\n+        // use file manager to upload art\n+        if (fileManager.get() != null) {\n+            fileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n+                @Override\n+                public void onComplete(Map<String, String> errors) {\n+                    if (getState() == Task.CANCELED) {\n+                        finishOperation(false);\n+                        return;\n+                    }\n+                    if (errors != null) {\n+                        DebugTool.logError(TAG, \"Text and graphic manager artwork failed to upload with error: \" + errors.toString());\n+                        listener.onComplete(false);\n+                    } else {\n+                        listener.onComplete(true);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private Show assembleShowImages(Show show) {\n+        if (shouldUpdatePrimaryImage()) {\n+            show.setGraphic(updatedState.getPrimaryGraphic().getImageRPC());\n+        }\n+\n+        if (shouldUpdateSecondaryImage()) {\n+            show.setSecondaryGraphic(updatedState.getSecondaryGraphic().getImageRPC());\n+        }\n+\n+        return show;\n+    }\n+\n+    Show createImageOnlyShowWithPrimaryArtwork(SdlArtwork primaryArtwork, SdlArtwork secondaryArtwork) {\n+        Show newShow = new Show();\n+        newShow.setGraphic((primaryArtwork != null && !(sdlArtworkNeedsUpload(primaryArtwork))) ? primaryArtwork.getImageRPC() : null);\n+        newShow.setSecondaryGraphic((secondaryArtwork != null && !(sdlArtworkNeedsUpload(secondaryArtwork))) ? secondaryArtwork.getImageRPC() : null);\n+        if (newShow.getGraphic() == null && newShow.getSecondaryGraphic() == null) {\n+            DebugTool.logInfo(TAG, \"No graphics to upload\");\n+            return null;\n+        }\n+        return newShow;\n+    }\n+\n+    Show assembleShowText(Show show) {\n+        show = setBlankTextFields(show);\n+\n+        if (updatedState.getMediaTrackTextField() != null && shouldUpdateMediaTrackField()) {\n+            show.setMediaTrack(updatedState.getMediaTrackTextField());\n+        }\n+\n+        if (updatedState.getTitle() != null && shouldUpdateTitleField()) {\n+            show.setTemplateTitle(updatedState.getTitle());\n+        }\n+\n+        List<String> nonNullFields = findValidMainTextFields();\n+        if (nonNullFields.isEmpty()) {\n+            return show;\n+        }\n+\n+        int numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n+\n+        switch (numberOfLines) {\n+            case 1:\n+                show = assembleOneLineShowText(show, nonNullFields);\n+                break;\n+            case 2:\n+                show = assembleTwoLineShowText(show);\n+                break;\n+            case 3:\n+                show = assembleThreeLineShowText(show);\n+                break;\n+            case 4:\n+                show = assembleFourLineShowText(show);\n+                break;\n+        }\n+        return show;\n+    }\n+\n+    private Show assembleOneLineShowText(Show show, List<String> showFields) {\n+        StringBuilder showString1 = new StringBuilder();\n+        for (int i = 0; i < showFields.size(); i++) {\n+            if (i > 0) {\n+                showString1.append(\" - \").append(showFields.get(i));\n+            } else {\n+                showString1.append(showFields.get(i));\n+            }\n+        }\n+        show.setMainField1(showString1.toString());\n+        MetadataTags tags = new MetadataTags();\n+        tags.setMainField1(findNonNullMetadataFields());\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    private Show assembleTwoLineShowText(Show show) {\n+        StringBuilder tempString = new StringBuilder();\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            tempString.append(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            if ((updatedState.getTextField3() == null || !(updatedState.getTextField3().length() > 0)) && (updatedState.getTextField4() == null || !(updatedState.getTextField4().length() > 0))) {\n+                // text does not exist in slots 3 or 4, put text2 in slot 2\n+                show.setMainField2(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField2Type());\n+                }\n+            } else if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+                // If text 1 exists, put it in slot 1 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField2Type());\n+                    if (updatedState.getTextField1Type() != null) {\n+                        typeList.add(updatedState.getTextField1Type());\n+                    }\n+                    tags.setMainField1(typeList);\n+                }\n+            } else {\n+                // If text 1 does not exist, put it in slot 1 unformatted\n+                tempString.append(updatedState.getTextField2());\n+                if (updatedState.getTextField2Type() != null) {\n+                    tags.setMainField1(updatedState.getTextField2Type());\n+                }\n+            }\n+        }\n+\n+        // set mainField1\n+        show.setMainField1(tempString.toString());\n+\n+        // new stringBuilder object\n+        tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            // If text 3 exists, put it in slot 2\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                List<MetadataType> typeList = new ArrayList<>();\n+                typeList.add(updatedState.getTextField3Type());\n+                tags.setMainField2(typeList);\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 2 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> typeList = new ArrayList<>();\n+                    typeList.add(updatedState.getTextField4Type());\n+                    if (updatedState.getTextField3Type() != null) {\n+                        typeList.add(updatedState.getTextField3Type());\n+                    }\n+                    tags.setMainField2(typeList);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 unformatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField2(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+\n+        if (tempString.toString().length() > 0) {\n+            show.setMainField2(tempString.toString());\n+        }\n+\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleThreeLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        StringBuilder tempString = new StringBuilder();\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            tempString.append(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+                // If text 3 exists, put it in slot 3 formatted\n+                tempString.append(\" - \").append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    List<MetadataType> tags4 = new ArrayList<>();\n+                    if (updatedState.getTextField3Type() != null) {\n+                        tags4.add(updatedState.getTextField3Type());\n+                    }\n+                    tags4.add(updatedState.getTextField4Type());\n+                    tags.setMainField3(tags4);\n+                }\n+            } else {\n+                // If text 3 does not exist, put it in slot 3 formatted\n+                tempString.append(updatedState.getTextField4());\n+                if (updatedState.getTextField4Type() != null) {\n+                    tags.setMainField3(updatedState.getTextField4Type());\n+                }\n+            }\n+        }\n+        show.setMainField3(tempString.toString());\n+        show.setMetadataTags(tags);\n+        return show;\n+    }\n+\n+    private Show assembleFourLineShowText(Show show) {\n+        MetadataTags tags = new MetadataTags();\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            show.setMainField1(updatedState.getTextField1());\n+            if (updatedState.getTextField1Type() != null) {\n+                tags.setMainField1(updatedState.getTextField1Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            show.setMainField2(updatedState.getTextField2());\n+            if (updatedState.getTextField2Type() != null) {\n+                tags.setMainField2(updatedState.getTextField2Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            show.setMainField3(updatedState.getTextField3());\n+            if (updatedState.getTextField3Type() != null) {\n+                tags.setMainField3(updatedState.getTextField3Type());\n+            }\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            show.setMainField4(updatedState.getTextField4());\n+            if (updatedState.getTextField4Type() != null) {\n+                tags.setMainField4(updatedState.getTextField4Type());\n+            }\n+        }\n+\n+        show.setMetadataTags(tags);\n+\n+        return show;\n+    }\n+\n+    // Extraction\n+\n+    Show extractTextFromShow(Show show) {\n+        Show newShow = new Show();\n+        newShow.setMainField1(show.getMainField1());\n+        newShow.setMainField2(show.getMainField2());\n+        newShow.setMainField3(show.getMainField3());\n+        newShow.setMainField4(show.getMainField4());\n+        newShow.setTemplateTitle(show.getTemplateTitle());\n+        newShow.setMetadataTags(show.getMetadataTags());\n+        newShow.setAlignment(show.getAlignment());\n+\n+        return newShow;\n+    }\n+\n+    private Show setBlankTextFields(Show newShow) {\n+        newShow.setMainField1(\"\");\n+        newShow.setMainField2(\"\");\n+        newShow.setMainField3(\"\");\n+        newShow.setMainField4(\"\");\n+        newShow.setMediaTrack(\"\");\n+        newShow.setTemplateTitle(\"\");\n+\n+        return newShow;\n+    }\n+\n+    private void updateCurrentScreenDataFromShow(Show show) {\n+        if (show == null) {\n+            DebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n+            return;\n+        }\n+\n+        // If the items are null, they were not updated, so we can't just set it directly\n+        if (show.getMainField1() != null) {\n+            currentScreenData.setMainField1(show.getMainField1());\n+        }\n+        if (show.getMainField2() != null) {\n+            currentScreenData.setMainField2(show.getMainField2());\n+        }\n+        if (show.getMainField3() != null) {\n+            currentScreenData.setMainField3(show.getMainField3());\n+        }\n+        if (show.getMainField4() != null) {\n+            currentScreenData.setMainField4(show.getMainField4());\n+        }\n+        if (show.getTemplateTitle() != null) {\n+            currentScreenData.setTemplateTitle(show.getTemplateTitle());\n+        }\n+        if (show.getMediaTrack() != null) {\n+            currentScreenData.setMediaTrack(show.getMediaTrack());\n+        }\n+        if (show.getMetadataTags() != null) {\n+            currentScreenData.setMetadataTags(show.getMetadataTags());\n+        }\n+        if (show.getAlignment() != null) {\n+            currentScreenData.setAlignment(show.getAlignment());\n+        }\n+        if (show.getGraphic() != null) {\n+            currentScreenData.setGraphic(show.getGraphic());\n+        }\n+        if (show.getSecondaryGraphic() != null) {\n+            currentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n+        }\n+        if (currentScreenDataUpdateListener != null) {\n+            currentScreenDataUpdateListener.onUpdate(currentScreenData);\n+        }\n+    }\n+\n+    // Helpers\n+\n+    private List<String> findValidMainTextFields() {\n+        List<String> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1() != null && updatedState.getTextField1().length() > 0) {\n+            array.add(updatedState.getTextField1());\n+        }\n+\n+        if (updatedState.getTextField2() != null && updatedState.getTextField2().length() > 0) {\n+            array.add(updatedState.getTextField2());\n+        }\n+\n+        if (updatedState.getTextField3() != null && updatedState.getTextField3().length() > 0) {\n+            array.add(updatedState.getTextField3());\n+        }\n+\n+        if (updatedState.getTextField4() != null && updatedState.getTextField4().length() > 0) {\n+            array.add(updatedState.getTextField4());\n+        }\n+\n+        return array;\n+    }\n+\n+\n+    private List<MetadataType> findNonNullMetadataFields() {\n+        List<MetadataType> array = new ArrayList<>();\n+\n+        if (updatedState.getTextField1Type() != null) {\n+            array.add(updatedState.getTextField1Type());\n+        }\n+\n+        if (updatedState.getTextField2Type() != null) {\n+            array.add(updatedState.getTextField2Type());\n+        }\n+\n+        if (updatedState.getTextField3Type() != null) {\n+            array.add(updatedState.getTextField3Type());\n+        }\n+\n+        if (updatedState.getTextField4Type() != null) {\n+            array.add(updatedState.getTextField4Type());\n+        }\n+\n+        return array;\n+    }\n+\n+    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n+    private boolean sdlArtworkNeedsUpload(SdlArtwork artwork) {\n+        if (fileManager.get() != null) {\n+            return artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check to see if primaryGraphic should be updated\n+     *\n+     * @return true if primaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdatePrimaryImage() {\n+        boolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n+\n+        String currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n+        String primaryGraphicName = updatedState.getPrimaryGraphic() != null ? updatedState.getPrimaryGraphic().getName() : null;\n+        return templateSupportsPrimaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true);\n+    }\n+\n+    /**\n+     * Check to see if secondaryGraphic should be updated\n+     *\n+     * @return true if secondaryGraphic should be updated, false if not\n+     */\n+    private boolean shouldUpdateSecondaryImage() {\n+        boolean templateSupportsSecondaryArtwork = (templateSupportsImageField(ImageFieldName.graphic) || templateSupportsImageField(ImageFieldName.secondaryGraphic));\n+\n+        String currentScreenDataSecondaryGraphicName = (currentScreenData != null && currentScreenData.getSecondaryGraphic() != null) ? currentScreenData.getSecondaryGraphic().getValue() : null;\n+        String secondaryGraphicName = updatedState.getSecondaryGraphic() != null ? updatedState.getSecondaryGraphic().getName() : null;\n+        return templateSupportsSecondaryArtwork\n+                && !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true);\n+    }\n+\n+    /**\n+     * Check to see if template supports the specified image field\n+     *\n+     * @return true if image field is supported, false if not\n+     */\n+    private boolean templateSupportsImageField(ImageFieldName name) {\n+        return defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(defaultMainWindowCapability, name);\n+    }\n+\n+    /**\n+     * Check to see if mediaTrackTextField should be updated\n+     *\n+     * @return true if mediaTrackTextField should be updated, false if not\n+     */\n+    private boolean shouldUpdateMediaTrackField() {\n+        return templateSupportsTextField(TextFieldName.mediaTrack);\n+    }\n+\n+    /**\n+     * Check to see if title should be updated\n+     *\n+     * @return true if title should be updated, false if not\n+     */\n+    private boolean shouldUpdateTitleField() {\n+        return templateSupportsTextField(TextFieldName.templateTitle);\n+    }\n+\n+    /**\n+     * Check to see if field should be updated\n+     *\n+     * @return true if field should be updated, false if not\n+     */\n+    private boolean templateSupportsTextField(TextFieldName name) {\n+        return defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(defaultMainWindowCapability, name);\n+    }\n+\n+    public Show getCurrentScreenData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e79cec4d0c43a70f161764a70b66261c62abccb"}, "originalPosition": 616}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTg0ODA2OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0NToxNFrOHIa3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzo0NToxNFrOHIa3Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU5MDc5OQ==", "bodyText": "if the capablity got update while the app is runing, the show should be updateed even if isDirty is false\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\tupdate(null);\n          \n          \n            \n            \t\t\t\t\tsdlUpdate(null);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r478590799", "createdAt": "2020-08-27T17:45:14Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +145,363 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (this.transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t// Transactions already in queue, we need to clear it out\n+\t\t\ttransactionQueue.clear();\n+\t\t\tupdateOperation = null;\n+\t\t\tif (currentOperationListener != null) {\n+\t\t\t\tcurrentOperationListener.onComplete(false);\n \t\t\t}\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n+\t\t// Task can be READY, about to start and popped of the queue, so we have to cancel it, to prevent it from starting\n+\t\tif (updateOperation != null && updateOperation.getState() == Task.READY) {\n+\t\t\tupdateOperation.cancelTask();\n+\t\t\tif (currentOperationListener != null) {\n+\t\t\t\tcurrentOperationListener.onComplete(false);\n \t\t\t}\n \t\t}\n \n-\t\t// set mainfield 1\n-\t\tshow.setMainField1(tempString.toString());\n-\n-\t\t// new stringbuilder object\n-\t\ttempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t// If text 3 exists, put it in slot 2\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t}\n+\t\t// If Task is IN_PROGRESS it's not on the queue, we need to cancel it, operation will take care of stopping it.\n+\t\tif (updateOperation != null && updateOperation.getState() == Task.IN_PROGRESS) {\n+\t\t\tupdateOperation.cancelTask();\n \t\t}\n \n-\t\tif (textField4 != null && textField4.length() > 0){\n-\t\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\t\t// If text 3 exists, put it in slot 2 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField4Type);\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttypeList.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField2(typeList);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 unformatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField2(textField4Type);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\tcurrentOperationListener = listener;\n \n-\t\tif (tempString.toString().length() > 0){\n-\t\t\tshow.setMainField2(tempString.toString());\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleThreeLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\n-\t\tif (textField3 != null && textField3.length() > 0){\n-\t\t\ttempString.append(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0) {\n-\t\t\tif (textField3 != null && textField3.length() > 0) {\n-\t\t\t\t// If text 3 exists, put it in slot 3 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\tList<MetadataType> tags4 = new ArrayList<>();\n-\t\t\t\t\tif (textField3Type != null){\n-\t\t\t\t\t\ttags4.add(textField3Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags4.add(textField4Type);\n-\t\t\t\t\ttags.setMainField3(tags4);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t// If text 3 does not exist, put it in slot 3 formatted\n-\t\t\t\ttempString.append(textField4);\n-\t\t\t\tif (textField4Type != null){\n-\t\t\t\t\ttags.setMainField3(textField4Type);\n-\t\t\t\t}\n+\t\tCurrentScreenDataUpdatedListener currentScreenDataUpdateListener = new CurrentScreenDataUpdatedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onUpdate(Show show) {\n+\t\t\t\tupdatePendingOperationsWithNewScreenData(show);\n+\t\t\t\tcurrentScreenData = show;\n \t\t\t}\n-\t\t}\n+\t\t};\n \n-\t\tshow.setMainField3(tempString.toString());\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n+\t\tupdateOperation = new TextAndGraphicUpdateOperation(internalInterface, fileManager.get(), defaultMainWindowCapability, currentScreenData, currentState(), currentOperationListener, currentScreenDataUpdateListener);\n+\t\ttransactionQueue.add(updateOperation, false);\n \t}\n \n-\tprivate Show assembleFourLineShowText(Show show){\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\tshow.setMainField1(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n+\t//Updates pending task with current screen data\n+\tvoid updatePendingOperationsWithNewScreenData(Show newScreenData) {\n+\t\tfor (Task task : transactionQueue.getTasksAsList()) {\n+\t\t\tif (!(task instanceof TextAndGraphicUpdateOperation)) {\n+\t\t\t\tcontinue;\n \t\t\t}\n+\t\t\t((TextAndGraphicUpdateOperation) task).setCurrentScreenData(newScreenData);\n \t\t}\n-\n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tshow.setMainField2(textField2);\n-\t\t\tif (textField2Type != null){\n-\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t}\n+\t\tif (this.softButtonManager.get() != null && newScreenData.getMainField1() != null) {\n+\t\t\tthis.softButtonManager.get().setCurrentMainField1(currentScreenData.getMainField1());\n \t\t}\n-\n-\t\tif (textField3 != null && textField3.length() > 0) {\n-\t\t\tshow.setMainField3(textField3);\n-\t\t\tif (textField3Type != null){\n-\t\t\t\ttags.setMainField3(textField3Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (textField4 != null && textField4.length() > 0) {\n-\t\t\tshow.setMainField4(textField4);\n-\t\t\tif (textField4Type != null){\n-\t\t\t\ttags.setMainField4(textField4Type);\n-\t\t\t}\n-\t\t}\n-\n-\t\tshow.setMetadataTags(tags);\n-\t\treturn show;\n \t}\n \n-\t// Extraction\n-\n-\tShow extractTextFromShow(Show show){\n-\n-\t\tShow newShow = new Show();\n-\t\tnewShow.setMainField1(show.getMainField1());\n-\t\tnewShow.setMainField2(show.getMainField2());\n-\t\tnewShow.setMainField3(show.getMainField3());\n-\t\tnewShow.setMainField4(show.getMainField4());\n-\t\tnewShow.setTemplateTitle(show.getTemplateTitle());\n-\n-\t\treturn newShow;\n-\t}\n-\n-\tprivate Show setBlankTextFields(Show newShow){\n-\n-\t\tnewShow.setMainField1(\"\");\n-\t\tnewShow.setMainField2(\"\");\n-\t\tnewShow.setMainField3(\"\");\n-\t\tnewShow.setMainField4(\"\");\n-\t\tnewShow.setMediaTrack(\"\");\n-\t\tnewShow.setTemplateTitle(\"\");\n-\n-\t\treturn newShow;\n-\t}\n-\n-\tprivate void updateCurrentScreenDataState(Show show){\n-\n-\t\tif (show == null){\n-\t\t\tDebugTool.logError(TAG, \"can not updateCurrentScreenDataFromShow from null show\");\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t// If the items are null, they were not updated, so we can't just set it directly\n-\t\tif (show.getMainField1() != null){\n-\t\t\tcurrentScreenData.setMainField1(show.getMainField1());\n-\t\t}\n-\t\tif (show.getMainField2() != null){\n-\t\t\tcurrentScreenData.setMainField2(show.getMainField2());\n-\t\t}\n-\t\tif (show.getMainField3() != null){\n-\t\t\tcurrentScreenData.setMainField3(show.getMainField3());\n-\t\t}\n-\t\tif (show.getMainField4() != null){\n-\t\t\tcurrentScreenData.setMainField4(show.getMainField4());\n-\t\t}\n-\t\tif (show.getTemplateTitle() != null){\n-\t\t\tcurrentScreenData.setTemplateTitle(show.getTemplateTitle());\n-\t\t}\n-\t\tif (show.getMediaTrack() != null){\n-\t\t\tcurrentScreenData.setMediaTrack(show.getMediaTrack());\n-\t\t}\n-\t\tif (show.getMetadataTags() != null){\n-\t\t\tcurrentScreenData.setMetadataTags(show.getMetadataTags());\n-\t\t}\n-\t\tif (show.getAlignment() != null){\n-\t\t\tcurrentScreenData.setAlignment(show.getAlignment());\n-\t\t}\n-\t\tif (show.getGraphic() != null){\n-\t\t\tcurrentScreenData.setGraphic(show.getGraphic());\n-\t\t}\n-\t\tif (show.getSecondaryGraphic() != null){\n-\t\t\tcurrentScreenData.setSecondaryGraphic(show.getSecondaryGraphic());\n-\t\t}\n+\tinterface CurrentScreenDataUpdatedListener {\n+\t\tvoid onUpdate(Show show);\n \t}\n \n-\t// Helpers\n \n-\tprivate List<String> findValidMainTextFields(){\n+\tprivate List<String> findNonNullTextFields() {\n \t\tList<String> array = new ArrayList<>();\n \n-\t\tif (textField1 != null && textField1.length() > 0) {\n+\t\tif (textField1 != null) {\n \t\t\tarray.add(textField1);\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n+\t\tif (textField2 != null) {\n \t\t\tarray.add(textField2);\n \t\t}\n \n-\t\tif (textField3 != null && textField3.length() > 0) {\n+\t\tif (textField3 != null) {\n \t\t\tarray.add(textField3);\n \t\t}\n \n-\t\tif (textField4 != null && textField4.length() > 0) {\n+\t\tif (textField4 != null) {\n \t\t\tarray.add(textField4);\n \t\t}\n \n-\t\treturn array;\n-\t}\n-\n-\n-\tprivate List<MetadataType> findNonNullMetadataFields(){\n-\t\tList<MetadataType> array = new ArrayList<>();\n-\n-\t\tif (textField1Type != null) {\n-\t\t\tarray.add(textField1Type);\n-\t\t}\n-\n-\t\tif (textField2Type != null) {\n-\t\t\tarray.add(textField2Type);\n+\t\tif (title != null) {\n+\t\t\tarray.add(title);\n \t\t}\n \n-\t\tif (textField3Type != null) {\n-\t\t\tarray.add(textField3Type);\n-\t\t}\n-\n-\t\tif (textField4Type != null) {\n-\t\t\tarray.add(textField4Type);\n+\t\tif (mediaTrackTextField != null) {\n+\t\t\tarray.add(mediaTrackTextField);\n \t\t}\n \n \t\treturn array;\n \t}\n \n-\tabstract SdlArtwork getBlankArtwork();\n+\tBoolean hasData() {\n+\t\tboolean hasTextFields = (findNonNullTextFields().size() > 0);\n+\t\tboolean hasImageFields = (primaryGraphic != null) || (secondaryGraphic != null);\n \n-\t@SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")\n-\tprivate boolean sdlArtworkNeedsUpload(SdlArtwork artwork){\n-\t\tif (fileManager.get() != null) {\n-\t\t\treturn artwork != null && !fileManager.get().hasUploadedFile(artwork) && !artwork.isStaticIcon();\n-\t\t}\n-\t\treturn false;\n+\t\treturn hasTextFields || hasImageFields;\n \t}\n \n-\t/**\n-\t * Check to see if primaryGraphic should be updated\n-\t * @return true if primaryGraphic should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdatePrimaryImage() {\n-\t\tboolean templateSupportsPrimaryArtwork = templateSupportsImageField(ImageFieldName.graphic);\n-\n-\t\tString currentScreenDataPrimaryGraphicName = (currentScreenData != null && currentScreenData.getGraphic() != null) ? currentScreenData.getGraphic().getValue() : null;\n-\t\tString primaryGraphicName = primaryGraphic != null ? primaryGraphic.getName() : null;\n-\t\treturn templateSupportsPrimaryArtwork\n-\t\t\t\t&& !CompareUtils.areStringsEqual(currentScreenDataPrimaryGraphicName, primaryGraphicName, true, true)\n-\t\t\t\t&& primaryGraphic != null;\n-\t}\n-\n-\t/**\n-\t * Check to see if secondaryGraphic should be updated\n-\t * @return true if secondaryGraphic should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateSecondaryImage() {\n-\t\tboolean templateSupportsSecondaryArtwork = (templateSupportsImageField(ImageFieldName.graphic) || templateSupportsImageField(ImageFieldName.secondaryGraphic));\n-\n-\t\tString currentScreenDataSecondaryGraphicName = (currentScreenData != null && currentScreenData.getSecondaryGraphic() != null) ? currentScreenData.getSecondaryGraphic().getValue() : null;\n-\t\tString secondaryGraphicName = secondaryGraphic != null ? secondaryGraphic.getName() : null;\n-\t\treturn templateSupportsSecondaryArtwork\n-\t\t\t\t&& !CompareUtils.areStringsEqual(currentScreenDataSecondaryGraphicName, secondaryGraphicName, true, true)\n-\t\t\t\t&& secondaryGraphic != null;\n-\t}\n-\n-\t/**\n-\t * Check to see if template supports the specified image field\n-\t * @return true if image field is supported, false if not\n-\t */\n-\tprivate boolean templateSupportsImageField(ImageFieldName name) {\n-\t\treturn defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasImageFieldOfName(defaultMainWindowCapability, name);\n-\t}\n+\tabstract SdlArtwork getBlankArtwork();\n \n-\t/**\n-\t * Check to see if mediaTrackTextField should be updated\n-\t * @return true if mediaTrackTextField should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateMediaTrackField() {\n-\t\treturn templateSupportsTextField(TextFieldName.mediaTrack);\n-\t}\n \n-\t/**\n-\t * Check to see if title should be updated\n-\t * @return true if title should be updated, false if not\n-\t */\n-\tprivate boolean shouldUpdateTitleField() {\n-\t\treturn templateSupportsTextField(TextFieldName.templateTitle);\n-\t}\n+\t// Convert to State\n \n-\t/**\n-\t * Check to see if field should be updated\n-\t * @return true if field should be updated, false if not\n-\t */\n-\tprivate boolean templateSupportsTextField(TextFieldName name) {\n-\t\treturn defaultMainWindowCapability == null || ManagerUtility.WindowCapabilityUtility.hasTextFieldOfName(defaultMainWindowCapability, name);\n+\tprivate TextsAndGraphicsState currentState() {\n+\t\treturn new TextsAndGraphicsState(textField1, textField2, textField3, textField4, mediaTrackTextField,\n+\t\t\t\ttitle, primaryGraphic, secondaryGraphic, textAlignment, textField1Type, textField2Type, textField3Type, textField4Type);\n \t}\n \n-\t// SCREEN ITEM SETTERS AND GETTERS\n+\t// Getters / Setters\n \n-\tvoid setTextAlignment(TextAlignment textAlignment){\n+\tvoid setTextAlignment(TextAlignment textAlignment) {\n \t\tthis.textAlignment = textAlignment;\n \t\t// If we aren't batching, send the update immediately, if we are, set ourselves as dirty (so we know we should send an update after the batch ends)\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tTextAlignment getTextAlignment(){\n+\tTextAlignment getTextAlignment() {\n \t\treturn textAlignment;\n \t}\n \n-\tvoid setMediaTrackTextField(String mediaTrackTextField){\n+\tvoid setMediaTrackTextField(String mediaTrackTextField) {\n \t\tthis.mediaTrackTextField = mediaTrackTextField;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getMediaTrackTextField(){\n+\tString getMediaTrackTextField() {\n \t\treturn mediaTrackTextField;\n \t}\n \n-\tvoid setTextField1(String textField1){\n+\tvoid setTextField1(String textField1) {\n \t\tthis.textField1 = textField1;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField1(){\n+\tString getTextField1() {\n \t\treturn textField1;\n \t}\n \n-\tvoid setTextField2(String textField2){\n+\tvoid setTextField2(String textField2) {\n \t\tthis.textField2 = textField2;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField2(){\n+\tString getTextField2() {\n \t\treturn textField2;\n \t}\n \n-\tvoid setTextField3(String textField3){\n+\tvoid setTextField3(String textField3) {\n \t\tthis.textField3 = textField3;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField3(){\n+\tString getTextField3() {\n \t\treturn textField3;\n \t}\n \n-\tvoid setTextField4(String textField4){\n+\tvoid setTextField4(String textField4) {\n \t\tthis.textField4 = textField4;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTextField4(){\n+\tString getTextField4() {\n \t\treturn textField4;\n \t}\n \n-\tvoid setTextField1Type(MetadataType textField1Type){\n+\tvoid setTextField1Type(MetadataType textField1Type) {\n \t\tthis.textField1Type = textField1Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField1Type(){\n+\tMetadataType getTextField1Type() {\n \t\treturn textField1Type;\n \t}\n \n-\tvoid setTextField2Type(MetadataType textField2Type){\n+\tvoid setTextField2Type(MetadataType textField2Type) {\n \t\tthis.textField2Type = textField2Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField2Type(){\n+\tMetadataType getTextField2Type() {\n \t\treturn textField2Type;\n \t}\n \n-\tvoid setTextField3Type(MetadataType textField3Type){\n+\tvoid setTextField3Type(MetadataType textField3Type) {\n \t\tthis.textField3Type = textField3Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField3Type(){\n+\tMetadataType getTextField3Type() {\n \t\treturn textField3Type;\n \t}\n \n-\tvoid setTextField4Type(MetadataType textField4Type){\n+\tvoid setTextField4Type(MetadataType textField4Type) {\n \t\tthis.textField4Type = textField4Type;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tMetadataType getTextField4Type(){\n+\tMetadataType getTextField4Type() {\n \t\treturn textField4Type;\n \t}\n \n-\tvoid setTitle(String title){\n+\tvoid setTitle(String title) {\n \t\tthis.title = title;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tString getTitle(){\n+\tString getTitle() {\n \t\treturn title;\n \t}\n \n-\tvoid setPrimaryGraphic(SdlArtwork primaryGraphic){\n+\tvoid setPrimaryGraphic(SdlArtwork primaryGraphic) {\n \t\tthis.primaryGraphic = primaryGraphic;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tSdlArtwork getPrimaryGraphic(){\n+\tSdlArtwork getPrimaryGraphic() {\n \t\treturn primaryGraphic;\n \t}\n \n-\tvoid setSecondaryGraphic(SdlArtwork secondaryGraphic){\n+\tvoid setSecondaryGraphic(SdlArtwork secondaryGraphic) {\n \t\tthis.secondaryGraphic = secondaryGraphic;\n-\t\tif (!batchingUpdates){\n+\t\tif (!batchingUpdates) {\n \t\t\tsdlUpdate(null);\n-\t\t}else{\n+\t\t} else {\n \t\t\tisDirty = true;\n \t\t}\n \t}\n \n-\tSdlArtwork getSecondaryGraphic(){\n+\tSdlArtwork getSecondaryGraphic() {\n \t\treturn secondaryGraphic;\n \t}\n \n-\tvoid setBatchUpdates(boolean batching){\n+\tvoid setBatchUpdates(boolean batching) {\n \t\tthis.batchingUpdates = batching;\n \t}\n \n+\tprivate void addListeners() {\n+\t\t// add listener\n+\t\thmiListener = new OnRPCNotificationListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onNotified(RPCNotification notification) {\n+\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus) notification;\n+\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n+\t\t\t\tupdateTransactionQueueSuspended();\n+\t\t\t}\n+\t\t};\n+\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n+\n+\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n+\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n+\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n+\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n+\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n+\t\t\t\t\tdefaultMainWindowCapability = null;\n+\t\t\t\t} else {\n+\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n+\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n+\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n+\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n+\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\t// Update the queue's suspend state\n+\t\t\t\tupdateTransactionQueueSuspended();\n+\t\t\t\tif (hasData()) {\n+\t\t\t\t\tupdate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e79cec4d0c43a70f161764a70b66261c62abccb"}, "originalPosition": 1111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjE2NDAzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxODozN1rOHId77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxODozN1rOHId77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY0MTEzNA==", "bodyText": "Do you think we combine the two if statements in one?\n// Task can be READY, about to start and popped of the queue, so we have to cancel it, to prevent it from starting\n// Or if Task is IN_PROGRESS it's not on the queue, we need to cancel it, operation will take care of stopping it.\nif (updateOperation != null && (updateOperation.getState() == Task.READY || updateOperation.getState() == Task.IN_PROGRESS)) {\n\tupdateOperation.cancelTask();\n\tif (currentOperationListener != null) {\n\t\tcurrentOperationListener.onComplete(false);\n\t}\n}", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1457#discussion_r478641134", "createdAt": "2020-08-27T19:18:37Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseTextAndGraphicManager.java", "diffHunk": "@@ -154,821 +145,363 @@ public void dispose(){\n \t\tsuper.dispose();\n \t}\n \n-\tprivate void addListeners() {\n-\t\t// add listener\n-\t\thmiListener = new OnRPCNotificationListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onNotified(RPCNotification notification) {\n-\t\t\t\tOnHMIStatus onHMIStatus = (OnHMIStatus)notification;\n-\t\t\t\tif (onHMIStatus.getWindowID() != null && onHMIStatus.getWindowID() != PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tcurrentHMILevel = onHMIStatus.getHmiLevel();\n-\t\t\t\tif (currentHMILevel == HMILevel.HMI_FULL){\n-\t\t\t\t\tif (pendingHMIFull){\n-\t\t\t\t\t\tDebugTool.logInfo(TAG, \"Acquired HMI_FULL with pending update. Sending now\");\n-\t\t\t\t\t\tpendingHMIFull = false;\n-\t\t\t\t\t\tsdlUpdate(pendingHMIListener);\n-\t\t\t\t\t\tpendingHMIListener = null;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t\tinternalInterface.addOnRPCNotificationListener(FunctionID.ON_HMI_STATUS, hmiListener);\n-\n-\n-\t\tonDisplaysCapabilityListener = new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\t// instead of using the parameter it's more safe to use the convenience method\n-\t\t\t\tList<DisplayCapability> capabilities = SystemCapabilityManager.convertToList(capability, DisplayCapability.class);\n-\t\t\t\tif (capabilities == null || capabilities.size() == 0) {\n-\t\t\t\t\tDebugTool.logError(TAG, \"TextAndGraphic Manager - Capabilities sent here are null or empty\");\n-\t\t\t\t}else {\n-\t\t\t\t\tDisplayCapability display = capabilities.get(0);\n-\t\t\t\t\tfor (WindowCapability windowCapability : display.getWindowCapabilities()) {\n-\t\t\t\t\t\tint currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n-\t\t\t\t\t\tif (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n-\t\t\t\t\t\t\tdefaultMainWindowCapability = windowCapability;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\tprivate Queue newTransactionQueue() {\n+\t\tQueue queue = internalInterface.getTaskmaster().createQueue(\"TextAndGraphicManager\", 3, false);\n+\t\tqueue.pause();\n+\t\treturn queue;\n+\t}\n \n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tDebugTool.logError(TAG, \"Display Capability cannot be retrieved\");\n-\t\t\t\tdefaultMainWindowCapability = null;\n-\t\t\t}\n-\t\t};\n-\t\tthis.internalInterface.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onDisplaysCapabilityListener);\n+\t// Suspend the queue if the WindowCapabilities are null\n+\t// OR if the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+\tprivate void updateTransactionQueueSuspended() {\n+\t\tif (defaultMainWindowCapability == null || HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+\t\t\tDebugTool.logInfo(TAG, String.format(\"Suspending the transaction queue. Current HMI level is NONE: %b, window capabilities are null: %b\", HMILevel.HMI_NONE.equals(currentHMILevel), defaultMainWindowCapability == null));\n+\t\t\ttransactionQueue.pause();\n+\t\t} else {\n+\t\t\tDebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+\t\t\ttransactionQueue.resume();\n+\t\t}\n \t}\n \n \t// Upload / Send\n \n \tprotected void update(CompletionListener listener) {\n-\n \t\t// check if is batch update\n \t\tif (batchingUpdates) {\n \t\t\treturn;\n \t\t}\n-\n-\t\tif (isDirty){\n+\t\tif (isDirty) {\n \t\t\tisDirty = false;\n \t\t\tsdlUpdate(listener);\n \t\t} else if (listener != null) {\n \t\t\tlistener.onComplete(true);\n \t\t}\n \t}\n \n-\tprivate synchronized void sdlUpdate(CompletionListener listener){\n-\n-\t\t// make sure hmi is not none\n-\t\tif (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE){\n-\t\t\t//Trying to send show on HMI_NONE, waiting for full\n-\t\t\tpendingHMIFull = true;\n-\t\t\tif (listener != null){\n-\t\t\t\tpendingHMIListener = listener;\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\n-\t\t//Updating Text and Graphics\n-\t\tif (inProgressUpdate != null){\n-\n-\t\t\t//In progress update exists, queueing update\n-\t\t\tif (queuedUpdateListener != null){\n-\n-\t\t\t\t//Queued update already exists, superseding previous queued update\n-\t\t\t\tqueuedUpdateListener.onComplete(false);\n-\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t}\n-\n-\t\t\tif (listener != null){\n-\t\t\t\tqueuedUpdateListener = listener;\n-\t\t\t}\n-\n-\t\t\thasQueuedUpdate = true;\n-\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tShow fullShow = new Show();\n-\t\tfullShow.setAlignment(textAlignment);\n-\t\tfullShow = assembleShowText(fullShow);\n-\t\tfullShow = assembleShowImages(fullShow);\n-\n-\t\tinProgressListener = listener;\n-\n-\t\tif (!shouldUpdatePrimaryImage() && !shouldUpdateSecondaryImage()){\n-\n-\t\t\t//No Images to send, only sending text\n-\t\t\tinProgressUpdate = extractTextFromShow(fullShow);\n-\t\t\tsendShow();\n-\n-\t\t}else if (!sdlArtworkNeedsUpload(primaryGraphic) && (secondaryGraphic == blankArtwork || !sdlArtworkNeedsUpload(secondaryGraphic))){\n-\n-\t\t\t//Images already uploaded, sending full update\n-\t\t\t// The files to be updated are already uploaded, send the full show immediately\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tsendShow();\n-\t\t} else{\n-\n-\t\t\t// Images need to be uploaded, sending text and uploading images\n-\t\t\tinProgressUpdate = fullShow;\n-\t\t\tfinal Show thisUpdate = fullShow;\n-\n-\t\t\tuploadImages(new CompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(boolean success) {\n-\t\t\t\t\tif (!success){\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error uploading image\");\n-\t\t\t\t\t\tinProgressUpdate = extractTextFromShow(inProgressUpdate);\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Check if queued image update still matches our images (there could have been a new Show in the meantime)\n-\t\t\t\t\t// and send a new update if it does. Since the images will already be on the head unit, the whole show will be sent\n-\t\t\t\t\tif (thisUpdate.getGraphic() != null && thisUpdate.getGraphic().equals(queuedImageUpdate.getGraphic()) ||\n-\t\t\t\t\t\t\t(thisUpdate.getSecondaryGraphic() != null && queuedImageUpdate.getSecondaryGraphic() != null) && thisUpdate.getSecondaryGraphic().equals(queuedImageUpdate.getSecondaryGraphic())){\n-\t\t\t\t\t\t// Queued image update matches the images we need, sending update\n-\t\t\t\t\t\tsendShow();\n-\t\t\t\t\t}\n-\t\t\t\t\t// Else, Queued image update does not match the images we need, skipping update\n-\t\t\t\t}\n-\t\t\t});\n-\t\t\tqueuedImageUpdate = fullShow;\n-\t\t}\n-\t}\n-\n-\tprivate void sendShow(){\n-\t\tinProgressUpdate.setOnRPCResponseListener(new OnRPCResponseListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onResponse(int correlationId, RPCResponse response) {\n-\t\t\t\thandleResponse(response.getSuccess());\n-\t\t\t}\n-\n-\t\t\tprivate void handleResponse(boolean success){\n-\t\t\t\tif (success){\n-\t\t\t\t\tupdateCurrentScreenDataState(inProgressUpdate);\n-\t\t\t\t}\n-\n-\t\t\t\tinProgressUpdate = null;\n-\t\t\t\tif (inProgressListener != null){\n-\t\t\t\t\tinProgressListener.onComplete(success);\n-\t\t\t\t\tinProgressListener = null;\n-\t\t\t\t}\n-\n-\t\t\t\tif (hasQueuedUpdate){\n-\t\t\t\t\t//Queued update exists, sending another update\n-\t\t\t\t\thasQueuedUpdate = false;\n-\t\t\t\t\tCompletionListener temp = queuedUpdateListener;\n-\t\t\t\t\tqueuedUpdateListener = null;\n-\t\t\t\t\tsdlUpdate(temp);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\n-\t\tif (this.softButtonManager.get() != null) {\n-\t\t\tthis.softButtonManager.get().setCurrentMainField1(inProgressUpdate.getMainField1());\n-\t\t}\n-\t\tinternalInterface.sendRPC(inProgressUpdate);\n-\t}\n-\n-\t// Images\n-\n-\tprivate void uploadImages(final CompletionListener listener) {\n-\n-\t\tList<SdlArtwork> artworksToUpload = new ArrayList<>();\n-\n-\t\t// add primary image\n-\t\tif (shouldUpdatePrimaryImage() && !primaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(primaryGraphic);\n-\t\t}\n-\n-\t\t// add secondary image\n-\t\tif (shouldUpdateSecondaryImage() && !secondaryGraphic.isStaticIcon()){\n-\t\t\tartworksToUpload.add(secondaryGraphic);\n-\t\t}\n-\n-\t\tif (artworksToUpload.size() == 0 && (primaryGraphic.isStaticIcon() || secondaryGraphic.isStaticIcon())){\n-\t\t\tDebugTool.logInfo(TAG, \"Upload attempted on static icons, sending them without upload instead\");\n-\t\t\tlistener.onComplete(true);\n-\t\t}\n-\n-\t\t// use file manager to upload art\n-\t\tif (fileManager.get() != null) {\n-\t\t\tfileManager.get().uploadArtworks(artworksToUpload, new MultipleFileCompletionListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onComplete(Map<String, String> errors) {\n-\t\t\t\t\tif (errors != null) {\n-\t\t\t\t\t\tDebugTool.logError(TAG, \"Error Uploading Artworks. Error: \" + errors.toString());\n-\t\t\t\t\t\tlistener.onComplete(false);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tlistener.onComplete(true);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate Show assembleShowImages(Show show){\n-\n-\t\tif (shouldUpdatePrimaryImage()){\n-\t\t\tshow.setGraphic(primaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\tif (shouldUpdateSecondaryImage()){\n-\t\t\tshow.setSecondaryGraphic(secondaryGraphic.getImageRPC());\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\t// Text\n-\n-\tShow assembleShowText(Show show){\n-\n-\t\tshow = setBlankTextFields(show);\n-\n-\t\tif (mediaTrackTextField != null && shouldUpdateMediaTrackField()) {\n-\t\t\tshow.setMediaTrack(mediaTrackTextField);\n-\t\t}\n-\n-\t\tif (title != null && shouldUpdateTitleField()) {\n-\t\t\tshow.setTemplateTitle(title);\n-\t\t}\n-\n-\t\tList<String> nonNullFields = findValidMainTextFields();\n-\t\tif (nonNullFields.isEmpty()){\n-\t\t\treturn show;\n-\t\t}\n-\n-\t\tint numberOfLines = defaultMainWindowCapability != null ? ManagerUtility.WindowCapabilityUtility.getMaxNumberOfMainFieldLines(defaultMainWindowCapability) : 4;\n-\n-\t\tswitch (numberOfLines) {\n-\t\t\tcase 1: show = assembleOneLineShowText(show, nonNullFields);\n-\t\t\t\tbreak;\n-\t\t\tcase 2: show = assembleTwoLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 3: show = assembleThreeLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t\tcase 4: show = assembleFourLineShowText(show);\n-\t\t\t\tbreak;\n-\t\t}\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleOneLineShowText(Show show, List<String> showFields){\n-\n-\t\tStringBuilder showString1 = new StringBuilder();\n-\t\tfor (int i = 0; i < showFields.size(); i++) {\n-\t\t\tif (i > 0) {\n-\t\t\t\tshowString1.append(\" - \").append(showFields.get(i));\n-\t\t\t}else{\n-\t\t\t\tshowString1.append(showFields.get(i));\n-\t\t\t}\n-\t\t}\n-\t\tshow.setMainField1(showString1.toString());\n-\n-\t\tMetadataTags tags = new MetadataTags();\n-\t\ttags.setMainField1(findNonNullMetadataFields());\n-\n-\t\tshow.setMetadataTags(tags);\n-\n-\t\treturn show;\n-\t}\n-\n-\tprivate Show assembleTwoLineShowText(Show show){\n-\n-\t\tStringBuilder tempString = new StringBuilder();\n-\t\tMetadataTags tags = new MetadataTags();\n-\n-\t\tif (textField1 != null && textField1.length() > 0) {\n-\t\t\ttempString.append(textField1);\n-\t\t\tif (textField1Type != null){\n-\t\t\t\ttags.setMainField1(textField1Type);\n+\tprivate synchronized void sdlUpdate(final CompletionListener listener) {\n+\t\tif (this.transactionQueue.getTasksAsList().size() > 0) {\n+\t\t\t// Transactions already in queue, we need to clear it out\n+\t\t\ttransactionQueue.clear();\n+\t\t\tupdateOperation = null;\n+\t\t\tif (currentOperationListener != null) {\n+\t\t\t\tcurrentOperationListener.onComplete(false);\n \t\t\t}\n \t\t}\n \n-\t\tif (textField2 != null && textField2.length() > 0) {\n-\t\t\tif (( textField3 == null || !(textField3.length() > 0)) && (textField4 == null || !(textField4.length() > 0))){\n-\t\t\t\t// text does not exist in slots 3 or 4, put text2 in slot 2\n-\t\t\t\tshow.setMainField2(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField2(textField2Type);\n-\t\t\t\t}\n-\t\t\t} else if (textField1 != null && textField1.length() > 0) {\n-\t\t\t\t// If text 1 exists, put it in slot 1 formatted\n-\t\t\t\ttempString.append(\" - \").append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\tList<MetadataType> typeList = new ArrayList<>();\n-\t\t\t\t\ttypeList.add(textField2Type);\n-\t\t\t\t\tif (textField1Type != null){\n-\t\t\t\t\t\ttypeList.add(textField1Type);\n-\t\t\t\t\t}\n-\t\t\t\t\ttags.setMainField1(typeList);\n-\t\t\t\t}\n-\t\t\t}else {\n-\t\t\t\t// If text 1 does not exist, put it in slot 1 unformatted\n-\t\t\t\ttempString.append(textField2);\n-\t\t\t\tif (textField2Type != null){\n-\t\t\t\t\ttags.setMainField1(textField2Type);\n-\t\t\t\t}\n+\t\t// Task can be READY, about to start and popped of the queue, so we have to cancel it, to prevent it from starting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e79cec4d0c43a70f161764a70b66261c62abccb"}, "originalPosition": 481}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4275, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}