{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTQ0MDM0", "number": 1553, "title": "Refactor VoiceCommandManager for taskmaster", "bodyText": "Fixes #1549\nThis PR is [ready] for review.\nRisk\nThis PR makes [minor] API changes.\nTesting Plan\n\n I have verified that I have not introduced new warnings in this PR (or explain why below)\n I have run the unit tests with this PR\n I have tested this PR against Core and verified behavior (if applicable, if not applicable, explain why below).\n I have tested Android, Java SE, and Java EE\n\nUnit Tests\nUpdated VoiceCommandManagerTests to accound for taskmaster dependancy'\nCore Tests\nIn the HelloSdl App, update your setVoiceCommands() method to set the voiceCommands every 5 seconds (example below). every few seconds the voiceCommands list should change  between the two lists. Let this run for a few minutes and verify there are no issues setting the voiceCommands.\nTimer timer = new Timer();\n        timer.schedule(new TimerTask() {\n            boolean firstGroup = true;\n            @Override\n            public void run() {\n                if (firstGroup) {\n                    sdlManager.getScreenManager().setVoiceCommands(Arrays.asList(voiceCommand1, voiceCommand2));\n                    firstGroup = false;\n                } else {\n                    sdlManager.getScreenManager().setVoiceCommands(Arrays.asList(voiceCommand3, voiceCommand4));\n                    firstGroup = true;\n                }\n\n            }\n        }, 0, 5000);\n\nSummary\nThis PR will create VoiceCommandReplaceOperation which will use send the list of DeleteCommand and AddCommand RPCs. BaseVoiceCommandManager has been refactored to use taskMaster Queues.\nCLA\n\n I have signed the CLA", "createdAt": "2020-11-06T19:45:39Z", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553", "merged": true, "mergeCommit": {"oid": "7975601f28b227d6b54b177755d3bc2803af01a6"}, "closed": true, "closedAt": "2020-12-09T17:50:46Z", "author": {"login": "RHenigan"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ8S6NAH2gAyNTE2OTQ0MDM0OmE2YTk0ZmEyYWNiZGY5YmQ1NTNlODc1MjE4Mjg5YWE3ZjJiNTFiZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkgYTagH2gAyNTE2OTQ0MDM0OjQ2N2I5ZWVjMzg4OTZiZmY4MTc2Yzk5NzFkMjgyMTFkMmZhZGY3YTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a6a94fa2acbdf9bd553e875218289aa7f2b51bf7", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a6a94fa2acbdf9bd553e875218289aa7f2b51bf7", "committedDate": "2020-11-06T19:40:18Z", "message": "Refactor VoiceCommandManager for taskmaster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b659ae3c7097946341855e5ac2dc9db4c796d9", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/d4b659ae3c7097946341855e5ac2dc9db4c796d9", "committedDate": "2020-11-06T21:07:05Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c150199e3e9a0f44f569cb8eb13b0bfd177c9880", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c150199e3e9a0f44f569cb8eb13b0bfd177c9880", "committedDate": "2020-11-09T21:03:42Z", "message": "Pass VoiceCommands to operation instead of RPC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6ece930a05d14afb572f81fa4bd269828b8d2a", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4e6ece930a05d14afb572f81fa4bd269828b8d2a", "committedDate": "2020-11-09T21:10:48Z", "message": "Fix index for successfulAddCommand"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e151ad4d0525fb15217150e4ee95c8942766efec", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e151ad4d0525fb15217150e4ee95c8942766efec", "committedDate": "2020-11-09T21:18:56Z", "message": "Remove Retry logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cadb4a9f44a82f0cd01fbc911afcb78dc693f87", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1cadb4a9f44a82f0cd01fbc911afcb78dc693f87", "committedDate": "2020-11-10T18:48:30Z", "message": "Clean up callback to manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45a6b2fbe5768e50b8d3e4ef833cada6647f0e26", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/45a6b2fbe5768e50b8d3e4ef833cada6647f0e26", "committedDate": "2020-11-10T19:32:54Z", "message": "Update pending tasks when callback returns new list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82f3a4aec07c981f472f4c8b53c2628d4cd2912", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b82f3a4aec07c981f472f4c8b53c2628d4cd2912", "committedDate": "2020-11-12T19:56:55Z", "message": "Adding unit tests, fix errorObject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7116d3a936eeb8d23a0d0a99b03bd7e58ce33cd9", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7116d3a936eeb8d23a0d0a99b03bd7e58ce33cd9", "committedDate": "2020-11-12T21:49:39Z", "message": "Verify Callback is called"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b789ffffdf9177303185856d8b71900bf44569d8", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b789ffffdf9177303185856d8b71900bf44569d8", "committedDate": "2020-11-13T14:35:29Z", "message": "Add successful test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62618ad2492e6fd52715a7bd7afda1b3103c8b02", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/62618ad2492e6fd52715a7bd7afda1b3103c8b02", "committedDate": "2020-11-13T15:01:47Z", "message": "Add tests for manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bffbf9b6de0dc1cd9e6f32d407245e53740c1d0", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1bffbf9b6de0dc1cd9e6f32d407245e53740c1d0", "committedDate": "2020-11-13T18:38:51Z", "message": "Refactor and cancel tasks before clearing queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fde22730ed524926f2b514c76acdeadc4aa28c3", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4fde22730ed524926f2b514c76acdeadc4aa28c3", "committedDate": "2020-11-13T20:04:16Z", "message": "Cleanup transaction queue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e969bf2fae218318674746364f36cbec8e290596", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e969bf2fae218318674746364f36cbec8e290596", "committedDate": "2020-11-17T19:06:54Z", "message": "Merge branch 'develop' into feature/issue_1549"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNzgyODM2", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-532782836", "createdAt": "2020-11-17T20:27:05Z", "commit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDoyNzowNVrOH1J2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo1NTowM1rOH10r2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ5Nzk3MA==", "bodyText": "The manager always logs that error message even if there are no errors", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r525497970", "createdAt": "2020-11-17T20:27:05Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -141,135 +164,40 @@ public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n     // UPDATING SYSTEM\n \n     private void update() {\n-\n-        if (currentHMILevel == null || currentHMILevel.equals(HMILevel.HMI_NONE)) {\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        if (inProgressUpdate != null) {\n-            // There's an in-progress update, put this on hold\n-            hasQueuedUpdate = true;\n-            return;\n-        }\n-\n-        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                // we don't care about errors from deleting, send new add commands\n-                sendCurrentVoiceCommands(new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success2) {\n-                        inProgressUpdate = null;\n-\n-                        if (hasQueuedUpdate) {\n-                            update();\n-                            hasQueuedUpdate = false;\n-                        }\n-\n-                        if (!success2) {\n-                            DebugTool.logError(TAG, \"Error sending voice commands\");\n-                        }\n-                    }\n-                });\n-            }\n-        });\n-\n-    }\n-\n-    // DELETING OLD MENU ITEMS\n-\n-    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n-\n-        if (oldVoiceCommands == null || oldVoiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true);\n-            }\n-            return;\n-        }\n-\n-        List<DeleteCommand> deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n-        oldVoiceCommands.clear();\n-        internalInterface.sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+        cleanTransactionQueue();\n+        updateOperation = new VoiceCommandUpdateOperation(internalInterface, currentVoiceCommands, voiceCommands, new VoiceCommandUpdateOperation.VoiceCommandChangesListener() {\n             @Override\n-            public void onUpdate(int remainingRequests) {\n-\n-            }\n-\n-            @Override\n-            public void onFinished() {\n-                DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n-                if (listener != null) {\n-                    listener.onComplete(true);\n-                }\n-            }\n-\n-            @Override\n-            public void onResponse(int correlationId, RPCResponse response) {\n+            public void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject) {\n+                DebugTool.logInfo(TAG, \"The updated list of VoiceCommands: \" + newCurrentVoiceCommands);\n+                DebugTool.logError(TAG, \"The failed Add and Delete Commands: \" + errorObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0NzU1Mg==", "bodyText": "it doesn't seem that there is currently a way for the developer to delete existing voice commands. Developers may expect the existing items to be deleted when an empty list is passed but currently, the method just returns in that case. Does iOS have the same behavior?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r525547552", "createdAt": "2020-11-17T21:49:45Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,6 +110,23 @@ public void dispose() {\n         super.dispose();\n     }\n \n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n+    }\n+\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n+        }\n+    }\n+\n     // SETTERS\n \n     public void setVoiceCommands(List<VoiceCommand> voiceCommands) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MTEyMw==", "bodyText": "This class shouldn't be public", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526171123", "createdAt": "2020-11-18T15:21:01Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,228 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class VoiceCommandUpdateOperation extends Task {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3MzczMA==", "bodyText": "I suggest wrapping this in a null checking condition", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526173730", "createdAt": "2020-11-18T15:24:08Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -90,12 +93,15 @@ public void dispose() {\n \n         lastVoiceCommandId = voiceCommandIdMin;\n         voiceCommands = null;\n-        oldVoiceCommands = null;\n+        currentVoiceCommands = null;\n \n         waitingOnHMIUpdate = false;\n         currentHMILevel = null;\n-        inProgressUpdate = null;\n-        hasQueuedUpdate = false;\n+\n+        transactionQueue.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3NzgyNg==", "bodyText": "Do we still need this boolean after using queues? I believe the main reason for using queues is not to use such conditions", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526177826", "createdAt": "2020-11-18T15:29:11Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -34,47 +34,50 @@\n \n import androidx.annotation.NonNull;\n \n+import com.livio.taskmaster.Queue;\n+import com.livio.taskmaster.Task;\n import com.smartdevicelink.managers.BaseSubManager;\n import com.smartdevicelink.managers.CompletionListener;\n import com.smartdevicelink.managers.ISdl;\n import com.smartdevicelink.protocol.enums.FunctionID;\n import com.smartdevicelink.proxy.RPCNotification;\n-import com.smartdevicelink.proxy.RPCResponse;\n-import com.smartdevicelink.proxy.rpc.AddCommand;\n-import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.RPCRequest;\n import com.smartdevicelink.proxy.rpc.OnCommand;\n import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n import com.smartdevicelink.proxy.rpc.enums.PredefinedWindows;\n-import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n import com.smartdevicelink.util.DebugTool;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n \n abstract class BaseVoiceCommandManager extends BaseSubManager {\n     private static final String TAG = \"BaseVoiceCommandManager\";\n-    List<VoiceCommand> voiceCommands, oldVoiceCommands;\n-\n-    List<AddCommand> inProgressUpdate;\n+    List<VoiceCommand> voiceCommands, currentVoiceCommands;\n \n     int lastVoiceCommandId;\n     private static final int voiceCommandIdMin = 1900000000;\n \n     boolean waitingOnHMIUpdate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE5OTc3MA==", "bodyText": "In this method (line 141), we are still manually checking HMI and return if it is NONE. That should be handled by pausing and resuming the queues instead.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526199770", "createdAt": "2020-11-18T15:55:03Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -125,9 +148,9 @@ public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n         waitingOnHMIUpdate = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e969bf2fae218318674746364f36cbec8e290596"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2353d6f474330ae9c0de1b7cbc8e8ad8afc9275a", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/2353d6f474330ae9c0de1b7cbc8e8ad8afc9275a", "committedDate": "2020-11-18T17:54:52Z", "message": "Fix review feedback allow empty list to be set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54702ec01128949fa7dee97860f12a9e9fd1eddf", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/54702ec01128949fa7dee97860f12a9e9fd1eddf", "committedDate": "2020-11-18T20:01:17Z", "message": "Remove old HMIStatus logic and allign with iOS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/10bfc5fe44a7643375063f60d31aad869a439cc8", "committedDate": "2020-11-18T20:06:10Z", "message": "Remove old HMIStatus logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NTg5NTIw", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-534589520", "createdAt": "2020-11-19T15:53:11Z", "commit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTo1MzoxMVrOH2lUBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxODo0NDozN1rOH2spJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5NjQ4Ng==", "bodyText": "We shouldn't update voice commands in the case where the devs set the same voice commands as existing ones (iOS implementation has that)", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526996486", "createdAt": "2020-11-19T15:53:11Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,30 +109,38 @@ public void dispose() {\n         super.dispose();\n     }\n \n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n+    }\n+\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n+        }\n+    }\n+\n     // SETTERS\n \n     public void setVoiceCommands(List<VoiceCommand> voiceCommands) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk5ODQ0NQ==", "bodyText": "We don't need to setlastVoiceCommandId again", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r526998445", "createdAt": "2020-11-19T15:55:28Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,30 +109,38 @@ public void dispose() {\n         super.dispose();\n     }\n \n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n+    }\n+\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n+        }\n+    }\n+\n     // SETTERS\n \n     public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n \n         // we actually need voice commands to set.\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            DebugTool.logInfo(TAG, \"Trying to set empty list of voice commands, returning\");\n+        if (voiceCommands == null) {\n+            DebugTool.logInfo(TAG, \"Voice commands list was null, returning\");\n             return;\n         }\n \n-        // make sure hmi is not none\n-        if (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE) {\n-            // Trying to send on HMI_NONE, waiting for full\n-            this.voiceCommands = new ArrayList<>(voiceCommands);\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        waitingOnHMIUpdate = false;\n         lastVoiceCommandId = voiceCommandIdMin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNDQ3MQ==", "bodyText": "currentVoiceCommands shouldn't be updated until we make sure the voiceCommands are successfully sent to the head unit otherwise currentVoiceCommands could have wrong values (if sending the RPC fails for example). Please check how is that implemented in iOS to align with that.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527004471", "createdAt": "2020-11-19T16:03:04Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,30 +109,38 @@ public void dispose() {\n         super.dispose();\n     }\n \n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n+    }\n+\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n+        }\n+    }\n+\n     // SETTERS\n \n     public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n \n         // we actually need voice commands to set.\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            DebugTool.logInfo(TAG, \"Trying to set empty list of voice commands, returning\");\n+        if (voiceCommands == null) {\n+            DebugTool.logInfo(TAG, \"Voice commands list was null, returning\");\n             return;\n         }\n \n-        // make sure hmi is not none\n-        if (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE) {\n-            // Trying to send on HMI_NONE, waiting for full\n-            this.voiceCommands = new ArrayList<>(voiceCommands);\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        waitingOnHMIUpdate = false;\n         lastVoiceCommandId = voiceCommandIdMin;\n         updateIdsOnVoiceCommands(voiceCommands);\n-        this.oldVoiceCommands = new ArrayList<>();\n-        if (this.voiceCommands != null && !this.voiceCommands.isEmpty()) {\n-            this.oldVoiceCommands.addAll(this.voiceCommands);\n+        this.currentVoiceCommands = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxMjE1Mg==", "bodyText": "I suggest removing the update() method and host its logic directly in setVoiceCommands() because the update() is only called one time and to align more with iOS", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527012152", "createdAt": "2020-11-19T16:13:07Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -141,135 +154,42 @@ public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n     // UPDATING SYSTEM\n \n     private void update() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxNDEyOA==", "bodyText": "calling ransactionQueue.getTasksAsList().size() is memory consuming because it has to build the list first. Also, the statement has potential NPEs.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (transactionQueue.getTasksAsList().size() > 0) {\n          \n          \n            \n                        updateOperation = null;\n          \n          \n            \n                        transactionQueue.clear();\n          \n          \n            \n                    }\n          \n          \n            \n                    if (transactionQueue != null) {\n          \n          \n            \n                        transactionQueue.clear();\n          \n          \n            \n                    }", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527014128", "createdAt": "2020-11-19T16:15:43Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -141,135 +154,42 @@ public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n     // UPDATING SYSTEM\n \n     private void update() {\n-\n-        if (currentHMILevel == null || currentHMILevel.equals(HMILevel.HMI_NONE)) {\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        if (inProgressUpdate != null) {\n-            // There's an in-progress update, put this on hold\n-            hasQueuedUpdate = true;\n-            return;\n-        }\n-\n-        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                // we don't care about errors from deleting, send new add commands\n-                sendCurrentVoiceCommands(new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success2) {\n-                        inProgressUpdate = null;\n-\n-                        if (hasQueuedUpdate) {\n-                            update();\n-                            hasQueuedUpdate = false;\n-                        }\n-\n-                        if (!success2) {\n-                            DebugTool.logError(TAG, \"Error sending voice commands\");\n-                        }\n-                    }\n-                });\n-            }\n-        });\n-\n-    }\n-\n-    // DELETING OLD MENU ITEMS\n-\n-    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n-\n-        if (oldVoiceCommands == null || oldVoiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true);\n-            }\n-            return;\n-        }\n-\n-        List<DeleteCommand> deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n-        oldVoiceCommands.clear();\n-        internalInterface.sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n-            @Override\n-            public void onUpdate(int remainingRequests) {\n-\n-            }\n-\n+        cleanTransactionQueue();\n+        updateOperation = new VoiceCommandUpdateOperation(internalInterface, currentVoiceCommands, voiceCommands, new VoiceCommandUpdateOperation.VoiceCommandChangesListener() {\n             @Override\n-            public void onFinished() {\n-                DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n-                if (listener != null) {\n-                    listener.onComplete(true);\n+            public void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject) {\n+                DebugTool.logInfo(TAG, \"The updated list of VoiceCommands: \" + newCurrentVoiceCommands);\n+                if (!errorObject.isEmpty()) {\n+                    DebugTool.logError(TAG, \"The failed Add and Delete Commands: \" + errorObject);\n                 }\n-            }\n-\n-            @Override\n-            public void onResponse(int correlationId, RPCResponse response) {\n+                currentVoiceCommands = newCurrentVoiceCommands;\n+                updatePendingOperations();\n+                updateOperation = null;\n             }\n         });\n-\n+        transactionQueue.add(updateOperation, false);\n     }\n \n-    // SEND NEW MENU ITEMS\n-\n-    private void sendCurrentVoiceCommands(final CompletionListener listener) {\n-\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true); // no voice commands to send doesnt mean that its an error\n-            }\n-            return;\n+    private void cleanTransactionQueue() {\n+        if (transactionQueue.getTasksAsList().size() > 0) {\n+            updateOperation = null;\n+            transactionQueue.clear();\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxNDc2OA==", "bodyText": "We are setting updateOperation to null twice in this method", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527014768", "createdAt": "2020-11-19T16:16:37Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -141,135 +154,42 @@ public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n     // UPDATING SYSTEM\n \n     private void update() {\n-\n-        if (currentHMILevel == null || currentHMILevel.equals(HMILevel.HMI_NONE)) {\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        if (inProgressUpdate != null) {\n-            // There's an in-progress update, put this on hold\n-            hasQueuedUpdate = true;\n-            return;\n-        }\n-\n-        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                // we don't care about errors from deleting, send new add commands\n-                sendCurrentVoiceCommands(new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success2) {\n-                        inProgressUpdate = null;\n-\n-                        if (hasQueuedUpdate) {\n-                            update();\n-                            hasQueuedUpdate = false;\n-                        }\n-\n-                        if (!success2) {\n-                            DebugTool.logError(TAG, \"Error sending voice commands\");\n-                        }\n-                    }\n-                });\n-            }\n-        });\n-\n-    }\n-\n-    // DELETING OLD MENU ITEMS\n-\n-    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n-\n-        if (oldVoiceCommands == null || oldVoiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true);\n-            }\n-            return;\n-        }\n-\n-        List<DeleteCommand> deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n-        oldVoiceCommands.clear();\n-        internalInterface.sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n-            @Override\n-            public void onUpdate(int remainingRequests) {\n-\n-            }\n-\n+        cleanTransactionQueue();\n+        updateOperation = new VoiceCommandUpdateOperation(internalInterface, currentVoiceCommands, voiceCommands, new VoiceCommandUpdateOperation.VoiceCommandChangesListener() {\n             @Override\n-            public void onFinished() {\n-                DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n-                if (listener != null) {\n-                    listener.onComplete(true);\n+            public void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject) {\n+                DebugTool.logInfo(TAG, \"The updated list of VoiceCommands: \" + newCurrentVoiceCommands);\n+                if (!errorObject.isEmpty()) {\n+                    DebugTool.logError(TAG, \"The failed Add and Delete Commands: \" + errorObject);\n                 }\n-            }\n-\n-            @Override\n-            public void onResponse(int correlationId, RPCResponse response) {\n+                currentVoiceCommands = newCurrentVoiceCommands;\n+                updatePendingOperations();\n+                updateOperation = null;\n             }\n         });\n-\n+        transactionQueue.add(updateOperation, false);\n     }\n \n-    // SEND NEW MENU ITEMS\n-\n-    private void sendCurrentVoiceCommands(final CompletionListener listener) {\n-\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true); // no voice commands to send doesnt mean that its an error\n-            }\n-            return;\n+    private void cleanTransactionQueue() {\n+        if (transactionQueue.getTasksAsList().size() > 0) {\n+            updateOperation = null;\n+            transactionQueue.clear();\n         }\n \n-        inProgressUpdate = addCommandsForVoiceCommands(voiceCommands);\n-\n-        internalInterface.sendRPCs(inProgressUpdate, new OnMultipleRequestListener() {\n-            @Override\n-            public void onUpdate(int remainingRequests) {\n-\n-            }\n-\n-            @Override\n-            public void onFinished() {\n-                DebugTool.logInfo(TAG, \"Sending Voice Commands Complete\");\n-                if (listener != null) {\n-                    listener.onComplete(true);\n-                }\n-                oldVoiceCommands = voiceCommands;\n-            }\n-\n-            @Override\n-            public void onResponse(int correlationId, RPCResponse response) {\n-            }\n-        });\n-    }\n-\n-    // DELETES\n-\n-    List<DeleteCommand> deleteCommandsForVoiceCommands(List<VoiceCommand> voiceCommands) {\n-        List<DeleteCommand> deleteCommandList = new ArrayList<>();\n-        for (VoiceCommand command : voiceCommands) {\n-            DeleteCommand delete = new DeleteCommand(command.getCommandId());\n-            deleteCommandList.add(delete);\n+        if (updateOperation != null) {\n+            updateOperation.cancelTask();\n+            updateOperation = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDA1NA==", "bodyText": "I am a little confused about we do we need two variables (this.oldVoiceCommands, this.currentVoiceCommands) if they both point to the same object", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527040054", "createdAt": "2020-11-19T16:50:02Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NzE4Nw==", "bodyText": "If I understand it correctly, we need to keep an updated copy of the current voice commands so we add and remove from currentVoiceCommands based on RPC responses. But since currentVoiceCommands  & oldVoiceCommands  both point to the same object, modifying the first will change the second as well. which makes oldVoiceCommands value incorrect. In that case currentVoiceCommands should be a deep copy of oldVoiceCommands. Because we dont want to alter oldVoiceCommands when we make changes to the items in currentVoiceCommands", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527047187", "createdAt": "2020-11-19T16:59:44Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0MDA1NA=="}, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MDM1MQ==", "bodyText": "I am not sure what onError() does exactly in Taskmaster, does the queue continue executing other operations? we need to confirm that. Or we can call onFnished() regardless of the RPC response result to let the queue continue", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527050351", "createdAt": "2020-11-19T17:03:37Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1NDEzNA==", "bodyText": "I suggest doing a null check before updateVoiceCommands just to be extra sure that the object is not null", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527054134", "createdAt": "2020-11-19T17:07:52Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA5OTg0MQ==", "bodyText": "No need to store the reposnse and cast it\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n          \n          \n            \n                            if (!deleteResponse.getSuccess()) {\n          \n          \n            \n                            if (!response.getSuccess()) {", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527099841", "createdAt": "2020-11-19T18:17:04Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwMDE1Mw==", "bodyText": "We can exit out of the loop when we find the item that we are searching for", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527100153", "createdAt": "2020-11-19T18:17:30Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwMTAyMw==", "bodyText": "We can exit out of the outer loop when we find the item", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527101023", "createdAt": "2020-11-19T18:18:47Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    // Create DeleteCommand List\n+\n+    List<DeleteCommand> deleteCommandsForVoiceCommands(List<VoiceCommand> voiceCommands) {\n+        List<DeleteCommand> deleteCommandList = new ArrayList<>();\n+        for (VoiceCommand command : voiceCommands) {\n+            DeleteCommand delete = new DeleteCommand(command.getCommandId());\n+            deleteCommandList.add(delete);\n+        }\n+        return deleteCommandList;\n+    }\n+\n+    private void removeCurrentVoiceCommandWithCorrelationId(int correlationId) {\n+        for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+            if (correlationId == deleteCommand.getCorrelationID()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwODU3OQ==", "bodyText": "in the if (!success) part, we find the request for the corresponding correclationId. Can we just pass that the command id for the request that we found to removeCurrentVoiceCommandWithCorrelationId() instead of passing the correclationId?. that way, we don't have to look for the request again in removeCurrentVoiceCommandWithCorrelationId().\nYou may need to move the looking for request logic before if..else to use the request in both cases.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527108579", "createdAt": "2020-11-19T18:31:04Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwODc5Nw==", "bodyText": "If you go with that option please update the name for removeCurrentVoiceCommandWithCorrelationId accordingly", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527108797", "createdAt": "2020-11-19T18:31:24Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwODU3OQ=="}, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwOTUxMw==", "bodyText": "That will make the logic a bit simpler and align with iOS more", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527109513", "createdAt": "2020-11-19T18:32:38Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwODU3OQ=="}, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExMzcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AddCommandResponse addResponse = (AddCommandResponse) response;\n          \n          \n            \n                            if (!addResponse.getSuccess()) {\n          \n          \n            \n                            if (!response.getSuccess()) {", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527113725", "createdAt": "2020-11-19T18:39:51Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    // Create DeleteCommand List\n+\n+    List<DeleteCommand> deleteCommandsForVoiceCommands(List<VoiceCommand> voiceCommands) {\n+        List<DeleteCommand> deleteCommandList = new ArrayList<>();\n+        for (VoiceCommand command : voiceCommands) {\n+            DeleteCommand delete = new DeleteCommand(command.getCommandId());\n+            deleteCommandList.add(delete);\n+        }\n+        return deleteCommandList;\n+    }\n+\n+    private void removeCurrentVoiceCommandWithCorrelationId(int correlationId) {\n+        for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+            if (correlationId == deleteCommand.getCorrelationID()) {\n+                for (VoiceCommand voiceCommand : oldVoiceCommands) {\n+                    if (deleteCommand.getCmdID() == voiceCommand.getCommandId()) {\n+                        currentVoiceCommands.remove(voiceCommand);\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // SEND NEW MENU ITEMS\n+\n+    private void sendCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (pendingVoiceCommands == null || pendingVoiceCommands.size() == 0) {\n+            if (listener != null) {\n+                listener.onComplete(true); // no voice commands to send doesnt mean that its an error\n+            }\n+            return;\n+        }\n+\n+        addCommandsToSend = addCommandsForVoiceCommands(pendingVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(addCommandsToSend, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete with errors\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                AddCommandResponse addResponse = (AddCommandResponse) response;\n+                if (!addResponse.getSuccess()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExNDM4MA==", "bodyText": "You can exit out of the loop when you find the item", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527114380", "createdAt": "2020-11-19T18:41:00Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    // Create DeleteCommand List\n+\n+    List<DeleteCommand> deleteCommandsForVoiceCommands(List<VoiceCommand> voiceCommands) {\n+        List<DeleteCommand> deleteCommandList = new ArrayList<>();\n+        for (VoiceCommand command : voiceCommands) {\n+            DeleteCommand delete = new DeleteCommand(command.getCommandId());\n+            deleteCommandList.add(delete);\n+        }\n+        return deleteCommandList;\n+    }\n+\n+    private void removeCurrentVoiceCommandWithCorrelationId(int correlationId) {\n+        for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+            if (correlationId == deleteCommand.getCorrelationID()) {\n+                for (VoiceCommand voiceCommand : oldVoiceCommands) {\n+                    if (deleteCommand.getCmdID() == voiceCommand.getCommandId()) {\n+                        currentVoiceCommands.remove(voiceCommand);\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    // SEND NEW MENU ITEMS\n+\n+    private void sendCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (pendingVoiceCommands == null || pendingVoiceCommands.size() == 0) {\n+            if (listener != null) {\n+                listener.onComplete(true); // no voice commands to send doesnt mean that its an error\n+            }\n+            return;\n+        }\n+\n+        addCommandsToSend = addCommandsForVoiceCommands(pendingVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(addCommandsToSend, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete with errors\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                AddCommandResponse addResponse = (AddCommandResponse) response;\n+                if (!addResponse.getSuccess()) {\n+                    for (AddCommand addCommand : addCommandsToSend) {\n+                        if (correlationId == addCommand.getCorrelationID()) {\n+                            errorObject.put(addCommand, response.getInfo());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzExNjU4Mg==", "bodyText": "All previous comments here also apply to pendingVoiceCommandWithCorrelationId(). The logic can be simplified in a similar manner", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527116582", "createdAt": "2020-11-19T18:44:37Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,227 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.AddCommandResponse;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommandResponse;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = oldVoiceCommands;\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onError();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommandResponse deleteResponse = (DeleteCommandResponse) response;\n+                if (!deleteResponse.getSuccess()) {\n+                    for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                        if (correlationId == deleteCommand.getCorrelationID()) {\n+                            errorObject.put(deleteCommand, response.getInfo());\n+                        }\n+                    }\n+                } else {\n+                    removeCurrentVoiceCommandWithCorrelationId(correlationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEwODU3OQ=="}, "originalCommit": {"oid": "10bfc5fe44a7643375063f60d31aad869a439cc8"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e9d2eba29c42eda91375111a8788d2e28f26863", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/7e9d2eba29c42eda91375111a8788d2e28f26863", "committedDate": "2020-11-19T21:45:47Z", "message": "Updates from review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9e5590c6d3582d31db84384ad2d0031061b13a85", "committedDate": "2020-11-19T21:55:26Z", "message": "replace onError call with onFinished"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0OTA0NjA1", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-534904605", "createdAt": "2020-11-19T22:20:10Z", "commit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyMDoxMFrOH20U6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozMToxNlrOH20qUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0MjQ3NQ==", "bodyText": "I don't think the list equals method works out of the box for custom objects. I believe you will need to override hashCode() and equals() in VoiceCommand to make the list.equals() method work. you can check SoftButtonObject as an example to see how to implement that.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527242475", "createdAt": "2020-11-19T22:20:10Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,172 +109,75 @@ public void dispose() {\n         super.dispose();\n     }\n \n-    // SETTERS\n-\n-    public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n-\n-        // we actually need voice commands to set.\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            DebugTool.logInfo(TAG, \"Trying to set empty list of voice commands, returning\");\n-            return;\n-        }\n-\n-        // make sure hmi is not none\n-        if (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE) {\n-            // Trying to send on HMI_NONE, waiting for full\n-            this.voiceCommands = new ArrayList<>(voiceCommands);\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        waitingOnHMIUpdate = false;\n-        lastVoiceCommandId = voiceCommandIdMin;\n-        updateIdsOnVoiceCommands(voiceCommands);\n-        this.oldVoiceCommands = new ArrayList<>();\n-        if (this.voiceCommands != null && !this.voiceCommands.isEmpty()) {\n-            this.oldVoiceCommands.addAll(this.voiceCommands);\n-        }\n-        this.voiceCommands = new ArrayList<>(voiceCommands);\n-\n-        update();\n-    }\n-\n-    public List<VoiceCommand> getVoiceCommands() {\n-        return voiceCommands;\n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n     }\n \n-    // UPDATING SYSTEM\n-\n-    private void update() {\n-\n-        if (currentHMILevel == null || currentHMILevel.equals(HMILevel.HMI_NONE)) {\n-            waitingOnHMIUpdate = true;\n-            return;\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n         }\n-\n-        if (inProgressUpdate != null) {\n-            // There's an in-progress update, put this on hold\n-            hasQueuedUpdate = true;\n-            return;\n-        }\n-\n-        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                // we don't care about errors from deleting, send new add commands\n-                sendCurrentVoiceCommands(new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success2) {\n-                        inProgressUpdate = null;\n-\n-                        if (hasQueuedUpdate) {\n-                            update();\n-                            hasQueuedUpdate = false;\n-                        }\n-\n-                        if (!success2) {\n-                            DebugTool.logError(TAG, \"Error sending voice commands\");\n-                        }\n-                    }\n-                });\n-            }\n-        });\n-\n     }\n \n-    // DELETING OLD MENU ITEMS\n+    // SETTERS\n \n-    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+    public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n \n-        if (oldVoiceCommands == null || oldVoiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true);\n-            }\n+        // we actually need voice commands to set.\n+        if (voiceCommands == null || voiceCommands.equals(this.voiceCommands)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0MzE5OA==", "bodyText": "The message is no longer accurate if the new list equals the old one", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527243198", "createdAt": "2020-11-19T22:21:35Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/BaseVoiceCommandManager.java", "diffHunk": "@@ -104,172 +109,75 @@ public void dispose() {\n         super.dispose();\n     }\n \n-    // SETTERS\n-\n-    public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n-\n-        // we actually need voice commands to set.\n-        if (voiceCommands == null || voiceCommands.size() == 0) {\n-            DebugTool.logInfo(TAG, \"Trying to set empty list of voice commands, returning\");\n-            return;\n-        }\n-\n-        // make sure hmi is not none\n-        if (currentHMILevel == null || currentHMILevel == HMILevel.HMI_NONE) {\n-            // Trying to send on HMI_NONE, waiting for full\n-            this.voiceCommands = new ArrayList<>(voiceCommands);\n-            waitingOnHMIUpdate = true;\n-            return;\n-        }\n-\n-        waitingOnHMIUpdate = false;\n-        lastVoiceCommandId = voiceCommandIdMin;\n-        updateIdsOnVoiceCommands(voiceCommands);\n-        this.oldVoiceCommands = new ArrayList<>();\n-        if (this.voiceCommands != null && !this.voiceCommands.isEmpty()) {\n-            this.oldVoiceCommands.addAll(this.voiceCommands);\n-        }\n-        this.voiceCommands = new ArrayList<>(voiceCommands);\n-\n-        update();\n-    }\n-\n-    public List<VoiceCommand> getVoiceCommands() {\n-        return voiceCommands;\n+    private Queue newTransactionQueue() {\n+        Queue queue = internalInterface.getTaskmaster().createQueue(\"VoiceCommandManager\", 4, false);\n+        queue.pause();\n+        return queue;\n     }\n \n-    // UPDATING SYSTEM\n-\n-    private void update() {\n-\n-        if (currentHMILevel == null || currentHMILevel.equals(HMILevel.HMI_NONE)) {\n-            waitingOnHMIUpdate = true;\n-            return;\n+    // If the HMI level is NONE since we want to delay sending RPCs until we're in non-NONE\n+    private void updateTransactionQueueSuspended() {\n+        if (HMILevel.HMI_NONE.equals(currentHMILevel)) {\n+            DebugTool.logInfo(TAG, \"Suspending the transaction queue. Current HMI level is NONE\");\n+            transactionQueue.pause();\n+        } else {\n+            DebugTool.logInfo(TAG, \"Starting the transaction queue\");\n+            transactionQueue.resume();\n         }\n-\n-        if (inProgressUpdate != null) {\n-            // There's an in-progress update, put this on hold\n-            hasQueuedUpdate = true;\n-            return;\n-        }\n-\n-        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n-            @Override\n-            public void onComplete(boolean success) {\n-                // we don't care about errors from deleting, send new add commands\n-                sendCurrentVoiceCommands(new CompletionListener() {\n-                    @Override\n-                    public void onComplete(boolean success2) {\n-                        inProgressUpdate = null;\n-\n-                        if (hasQueuedUpdate) {\n-                            update();\n-                            hasQueuedUpdate = false;\n-                        }\n-\n-                        if (!success2) {\n-                            DebugTool.logError(TAG, \"Error sending voice commands\");\n-                        }\n-                    }\n-                });\n-            }\n-        });\n-\n     }\n \n-    // DELETING OLD MENU ITEMS\n+    // SETTERS\n \n-    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+    public void setVoiceCommands(List<VoiceCommand> voiceCommands) {\n \n-        if (oldVoiceCommands == null || oldVoiceCommands.size() == 0) {\n-            if (listener != null) {\n-                listener.onComplete(true);\n-            }\n+        // we actually need voice commands to set.\n+        if (voiceCommands == null || voiceCommands.equals(this.voiceCommands)) {\n+            DebugTool.logInfo(TAG, \"Voice commands list was null, returning\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NTQwOA==", "bodyText": "The lines can be simplfied to avoid duplicate code and remove some logs\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (!success2) {\n          \n          \n            \n                                        DebugTool.logError(TAG, \"Error sending voice commands\");\n          \n          \n            \n                                        onFinished();\n          \n          \n            \n                                    } else {\n          \n          \n            \n                                        DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n          \n          \n            \n                                        onFinished();\n          \n          \n            \n                                    }\n          \n          \n            \n                                    if (!success2) {\n          \n          \n            \n                                        DebugTool.logError(TAG, \"Error sending voice commands\");\n          \n          \n            \n                                    }\n          \n          \n            \n                                    onFinished();", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527245408", "createdAt": "2020-11-19T22:26:02Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = new ArrayList<>();\n+        if (oldVoiceCommands != null) {\n+            this.currentVoiceCommands.addAll(oldVoiceCommands);\n+        }\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onFinished();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NzQyOQ==", "bodyText": "no need to continue the loop when we find the item\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    foundDeleteCommand = deleteCommand;\n          \n          \n            \n                                    foundDeleteCommand = deleteCommand;\n          \n          \n            \n                                    break;", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527247429", "createdAt": "2020-11-19T22:30:06Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = new ArrayList<>();\n+        if (oldVoiceCommands != null) {\n+            this.currentVoiceCommands.addAll(oldVoiceCommands);\n+        }\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onFinished();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        if (voiceCommandListener != null) {\n+                            voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommand foundDeleteCommand = null;\n+                for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                    if (correlationId == deleteCommand.getCorrelationID()) {\n+                        foundDeleteCommand = deleteCommand;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0Nzk1Mw==", "bodyText": "no need to contiue the loop after finsing the item\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    foundAddCommand = addCommand;\n          \n          \n            \n                                    foundAddCommand = addCommand;\n          \n          \n            \n                                    break;", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527247953", "createdAt": "2020-11-19T22:31:16Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommandUpdateOperation.java", "diffHunk": "@@ -0,0 +1,231 @@\n+package com.smartdevicelink.managers.screen.menu;\n+\n+import com.livio.taskmaster.Task;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.rpc.AddCommand;\n+import com.smartdevicelink.proxy.rpc.DeleteCommand;\n+import com.smartdevicelink.proxy.rpc.listeners.OnMultipleRequestListener;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+class VoiceCommandUpdateOperation extends Task {\n+    private static final String TAG = \"VoiceCommandReplaceOperation\";\n+    private final WeakReference<ISdl> internalInterface;\n+    List<VoiceCommand> oldVoiceCommands;\n+    private List<VoiceCommand> pendingVoiceCommands;\n+    private List<DeleteCommand> deleteVoiceCommands;\n+    private List<AddCommand> addCommandsToSend;\n+    private VoiceCommandChangesListener voiceCommandListener;\n+    private List<VoiceCommand> currentVoiceCommands;\n+    private HashMap<RPCRequest, String> errorObject;\n+\n+    interface VoiceCommandChangesListener {\n+        void updateVoiceCommands(List<VoiceCommand> newCurrentVoiceCommands, HashMap<RPCRequest, String> errorObject);\n+    }\n+\n+    VoiceCommandUpdateOperation(ISdl internalInterface, List<VoiceCommand> oldVoiceCommands, List<VoiceCommand> pendingVoiceCommands, VoiceCommandChangesListener voiceCommandListener) {\n+        super(\"VoiceCommandReplaceOperation\");\n+        this.internalInterface = new WeakReference<>(internalInterface);\n+        this.oldVoiceCommands = oldVoiceCommands;\n+        this.pendingVoiceCommands = pendingVoiceCommands;\n+        this.currentVoiceCommands = new ArrayList<>();\n+        if (oldVoiceCommands != null) {\n+            this.currentVoiceCommands.addAll(oldVoiceCommands);\n+        }\n+        this.voiceCommandListener = voiceCommandListener;\n+        this.errorObject = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void onExecute() {\n+        start();\n+    }\n+\n+    private void start() {\n+        if (getState() == Task.CANCELED) {\n+            onFinished();\n+            return;\n+        }\n+\n+        sendDeleteCurrentVoiceCommands(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                if (getState() == Task.CANCELED) {\n+                    onFinished();\n+                    return;\n+                }\n+                // we don't care about errors from deleting, send new add commands\n+                sendCurrentVoiceCommands(new CompletionListener() {\n+                    @Override\n+                    public void onComplete(boolean success2) {\n+                        if (!success2) {\n+                            DebugTool.logError(TAG, \"Error sending voice commands\");\n+                            onFinished();\n+                        } else {\n+                            DebugTool.logInfo(TAG, \"Successfully send voice commands\");\n+                            onFinished();\n+                        }\n+                        if (voiceCommandListener != null) {\n+                            voiceCommandListener.updateVoiceCommands(currentVoiceCommands, errorObject);\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+    }\n+\n+    // Send DeleteCommandList\n+\n+    private void sendDeleteCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (oldVoiceCommands == null || oldVoiceCommands.isEmpty()) {\n+            if (listener != null) {\n+                listener.onComplete(true);\n+            }\n+            return;\n+        }\n+\n+        deleteVoiceCommands = deleteCommandsForVoiceCommands(oldVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(deleteVoiceCommands, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Successfully deleted old voice commands\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Unable to deleted some old voice commands\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                DeleteCommand foundDeleteCommand = null;\n+                for (DeleteCommand deleteCommand : deleteVoiceCommands) {\n+                    if (correlationId == deleteCommand.getCorrelationID()) {\n+                        foundDeleteCommand = deleteCommand;\n+                    }\n+                }\n+\n+                if (!response.getSuccess()) {\n+                    errorObject.put(foundDeleteCommand, response.getInfo());\n+                } else {\n+                    if (foundDeleteCommand == null) {\n+                        return;\n+                    }\n+                    removeCurrentVoiceCommandForCorrelatingDeleteCommand(foundDeleteCommand);\n+                }\n+            }\n+        });\n+\n+    }\n+\n+    // Create DeleteCommand List\n+\n+    List<DeleteCommand> deleteCommandsForVoiceCommands(List<VoiceCommand> voiceCommands) {\n+        List<DeleteCommand> deleteCommandList = new ArrayList<>();\n+        for (VoiceCommand command : voiceCommands) {\n+            DeleteCommand delete = new DeleteCommand(command.getCommandId());\n+            deleteCommandList.add(delete);\n+        }\n+        return deleteCommandList;\n+    }\n+\n+    private void removeCurrentVoiceCommandForCorrelatingDeleteCommand(DeleteCommand deleteCommand) {\n+        for (VoiceCommand voiceCommand : oldVoiceCommands) {\n+            if (deleteCommand.getCmdID() == voiceCommand.getCommandId()) {\n+                currentVoiceCommands.remove(voiceCommand);\n+                return;\n+            }\n+        }\n+    }\n+\n+    // SEND NEW MENU ITEMS\n+\n+    private void sendCurrentVoiceCommands(final CompletionListener listener) {\n+\n+        if (pendingVoiceCommands == null || pendingVoiceCommands.size() == 0) {\n+            if (listener != null) {\n+                listener.onComplete(true); // no voice commands to send doesnt mean that its an error\n+            }\n+            return;\n+        }\n+\n+        addCommandsToSend = addCommandsForVoiceCommands(pendingVoiceCommands);\n+\n+        internalInterface.get().sendRPCs(addCommandsToSend, new OnMultipleRequestListener() {\n+            @Override\n+            public void onUpdate(int remainingRequests) {\n+            }\n+\n+            @Override\n+            public void onFinished() {\n+                if (listener != null) {\n+                    if (errorObject.isEmpty()) {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete\");\n+                        listener.onComplete(true);\n+                    } else {\n+                        DebugTool.logInfo(TAG, \"Sending Voice Commands Complete with errors\");\n+                        listener.onComplete(false);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                AddCommand foundAddCommand = null;\n+                for (AddCommand addCommand : addCommandsToSend) {\n+                    if (correlationId == addCommand.getCorrelationID()) {\n+                        foundAddCommand = addCommand;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5590c6d3582d31db84384ad2d0031061b13a85"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c01aa26fa73577dcd4d882bd578cf34df7d714c9", "committedDate": "2020-11-20T15:31:03Z", "message": "Fix review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTQzMDcy", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-535543072", "createdAt": "2020-11-20T15:46:18Z", "commit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NjoxOFrOH3VJQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo1MjowMlrOH3VYtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4MDE2MA==", "bodyText": "unused import", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527780160", "createdAt": "2020-11-20T15:46:18Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommand.java", "diffHunk": "@@ -35,6 +35,8 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.smartdevicelink.managers.screen.SoftButtonObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4MjQ5NQ==", "bodyText": "The listener is not a data object so it doesn't need to be compared for equality. Also after removing it please change the number i+3 to be i+2 accordingly", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527782495", "createdAt": "2020-11-20T15:49:46Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommand.java", "diffHunk": "@@ -124,4 +126,37 @@ void setCommandId(int commandId) {\n     int getCommandId() {\n         return commandId;\n     }\n+\n+    /**\n+     * Used to compile hashcode for VoiceCommand for use to compare in equals method\n+     *\n+     * @return Custom hashcode of VoiceCommand variables\n+     */\n+    @Override\n+    public int hashCode() {\n+        int result = 1;\n+        result += ((getCommandId() == 0) ? 0 : Integer.rotateLeft(getCommandId(), 1));\n+        result += ((getVoiceCommandSelectionListener() == null) ? 0 : Integer.rotateLeft(getVoiceCommandSelectionListener().hashCode(), 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4NDExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    result += ((getCommandId() == 0) ? 0 : Integer.rotateLeft(getCommandId(), 1));\n          \n          \n            \n                    result += Integer.rotateLeft(getCommandId(), 1);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527784118", "createdAt": "2020-11-20T15:52:02Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/menu/VoiceCommand.java", "diffHunk": "@@ -124,4 +126,37 @@ void setCommandId(int commandId) {\n     int getCommandId() {\n         return commandId;\n     }\n+\n+    /**\n+     * Used to compile hashcode for VoiceCommand for use to compare in equals method\n+     *\n+     * @return Custom hashcode of VoiceCommand variables\n+     */\n+    @Override\n+    public int hashCode() {\n+        int result = 1;\n+        result += ((getCommandId() == 0) ? 0 : Integer.rotateLeft(getCommandId(), 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NTY3Mzk5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-535567399", "createdAt": "2020-11-20T16:14:16Z", "commit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoxNDoxNlrOH3WQ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoxNDoxNlrOH3WQ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5ODUxNA==", "bodyText": "There is an unused import in this class", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#discussion_r527798514", "createdAt": "2020-11-20T16:14:16Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/menu/VoiceCommandManagerTests.java", "diffHunk": "@@ -34,6 +34,7 @@\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c01aa26fa73577dcd4d882bd578cf34df7d714c9"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65cea2d23fdbe8742f46a11ce1bf39c66b885d5a", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/65cea2d23fdbe8742f46a11ce1bf39c66b885d5a", "committedDate": "2020-11-20T16:16:25Z", "message": "Clean up hashCode method and imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NzU0MzQw", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1553#pullrequestreview-535754340", "createdAt": "2020-11-20T20:28:10Z", "commit": {"oid": "65cea2d23fdbe8742f46a11ce1bf39c66b885d5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "467b9eec38896bff8176c9971d28211d2fadf7a2", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/467b9eec38896bff8176c9971d28211d2fadf7a2", "committedDate": "2020-12-09T15:22:01Z", "message": "iOS Alignment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2106, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}