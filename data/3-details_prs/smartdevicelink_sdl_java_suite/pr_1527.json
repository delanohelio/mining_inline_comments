{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMzc2MTE4", "number": 1527, "title": "Feature/lockscreen ui testing", "bodyText": "This PR is [ready] for review.\nRisk\nThis PR makes [no] API changes.\nTesting Plan\n\n I have verified that I have not introduced new warnings in this PR (or explain why below)\n I have run the unit tests with this PR\n I have tested this PR against Core and verified behavior (if applicable, if not applicable, explain why below).\n I have tested Android, Java SE, and Java EE\n\nUnit Tests\nInstrumentation tests were added to test the LockScreen behavior.\nSummary\nThe tests that were added are ignored for the purposes of CICD and are intended to be ran manually during release testing\nThe tests are intended to verify these lockscreen states:\n\n\n\nNum\nDD Mode\nenableDismiss\nFirstDD\nPreviousDismissalState\nDismiss Enabled\n\n\n\n\n1\nOFF\nNULL\nYES\nN/A\nFalse\n\n\n2\nOFF\nFALSE\nYES\nN/A\nFalse\n\n\n3\nOFF\nTRUE\nYES\nN/A\nTrue\n\n\n4\nOFF\nNULL\nNO\nFALSE\nFalse\n\n\n5\nOFF\nNULL\nNO\nTRUE\nTrue\n\n\n6\nOFF\nFALSE\nNO\nFALSE\nFalse\n\n\n7\nOFF\nFALSE\nNO\nTRUE\nFalse\n\n\n8\nOFF\nTRUE\nNO\nTRUE\nTrue\n\n\n9\nOFF\nTRUE\nNO\nFalse\nTrue\n\n\n10\nON\nNULL\nYES\nN/A\nFalse\n\n\n11\nON\nFALSE\nYES\nN/A\nFalse\n\n\n12\nON\nTRUE\nYES\nN/A\nTrue\n\n\n13\nON\nNULL\nNO\nFALSE\nFalse\n\n\n14\nON\nNULL\nNO\nTRUE\nTrue\n\n\n15\nON\nFALSE\nNO\nFALSE\nFalse\n\n\n16\nON\nFALSE\nNO\nTRUE\nFalse\n\n\n17\nON\nTRUE\nNO\nTRUE\nTrue\n\n\n18\nON\nTRUE\nNO\nFalse\nTrue\n\n\n\nCLA\n\n I have signed the CLA", "createdAt": "2020-10-13T14:18:22Z", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527", "merged": true, "mergeCommit": {"oid": "6d783cdb97f6ab4f458725b7d89ab8d56b966e17"}, "closed": true, "closedAt": "2020-10-14T18:13:05Z", "author": {"login": "RHenigan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR5DfcgH2gAyNTAyMzc2MTE4OjYyNmFkYWM3OWYxMzRlYzJhM2QxZGEzYjE2Yjg2NWQ2OTQ4M2VmOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdShQPsgFqTUwODYwNjcyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "626adac79f134ec2a3d1da3b16b865d69483ef98", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/626adac79f134ec2a3d1da3b16b865d69483ef98", "committedDate": "2020-10-12T19:22:21Z", "message": "Add LockScreen UI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/c88ee3bf8c6a176f2b696b49ba095476717bfea2", "committedDate": "2020-10-12T20:48:48Z", "message": "Merge branch 'release/RC_5.0.0' into feature/lockscreen_ui_testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODA1OTA5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#pullrequestreview-507805909", "createdAt": "2020-10-13T20:31:30Z", "commit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMDozMTozMFrOHg4ZrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1ODo1N1rOHhXa6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0MDU1Nw==", "bodyText": "Can we add a note to remove that before running the test? currently, it says \"no tests were found\" if I try to manually run the tests in Android studio without removing the@Ignore  annotation", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504240557", "createdAt": "2020-10-13T20:31:30Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0ODI2Mg==", "bodyText": "It seems that not all the new dependencies are needed to run the test.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504248262", "createdAt": "2020-10-13T20:46:27Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/build.gradle", "diffHunk": "@@ -54,6 +52,9 @@ dependencies {\n     api 'androidx.annotation:annotation:1.1.0'\n     api 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n     annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'\n+    debugImplementation(\"androidx.test:core:1.3.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0OTc4NQ==", "bodyText": "Also, it will be more organized if we change the order for the dependencies to group the similar ones after each other (ie api, testImplementation, then androidTestImplementation). This is not introduced by the the PR but it will look better of we organize them as the folowing:\ndependencies {\n    api fileTree(dir: 'libs', include: ['*.jar'])\n    api 'com.smartdevicelink:bson_java_port:RC1_1.2.2'\n    api 'com.livio.taskmaster:taskmaster:0.3.0'\n    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n    api 'androidx.annotation:annotation:1.1.0'\n    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'\n\n    testImplementation 'junit:junit:4.12'\n    testImplementation 'org.mockito:mockito-core:3.0.0'\n    androidTestImplementation 'org.mockito:mockito-core:3.0.0'\n    androidTestImplementation 'org.mockito:mockito-android:3.0.0'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.1'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'\n    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'\n}", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504249785", "createdAt": "2020-10-13T20:49:26Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/build.gradle", "diffHunk": "@@ -54,6 +52,9 @@ dependencies {\n     api 'androidx.annotation:annotation:1.1.0'\n     api 'androidx.lifecycle:lifecycle-extensions:2.2.0'\n     annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.2.0'\n+    debugImplementation(\"androidx.test:core:1.3.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0ODI2Mg=="}, "originalCommit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI1NDU4NA==", "bodyText": "it doesn't seem that we are doing anything in the onSystemRequestAnswer implemetation. If so, can we remove this onSystemRequestAnswer & onSystemRequestListener?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504254584", "createdAt": "2020-10-13T20:58:18Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore\n+public class SDLLockScreenActivityEspressoTest {\n+\n+    private OnRPCNotificationListener onDDListener;\n+    private OnRPCNotificationListener onHMIListener;\n+    private OnRPCNotificationListener onSystemRequestListener;\n+\n+    @Rule\n+    public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n+            new ActivityScenarioRule<>(SDLLockScreenActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<SDLLockScreenActivity> intentsTestRule =\n+            new IntentsTestRule<>(SDLLockScreenActivity.class);\n+\n+    @Test\n+    public void test1() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test2() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test3() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test4() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test5() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test6() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test7() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test8() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test9() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    @Test\n+    public void test10() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test11() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test12() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test13() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test14() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test15() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test16() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test17() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test18() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    public void testLockScreenBehavior(final DriverDistractionState dd, final Boolean lockScreenDismissibility, final boolean firstDD, final Boolean previousLockScreenDismissibility, final boolean dismissEnabled) {\n+        LockScreenConfig lockScreenConfig = new LockScreenConfig();\n+        lockScreenConfig.setDisplayMode(LockScreenConfig.DISPLAY_MODE_ALWAYS);\n+        lockScreenConfig.enableDismissGesture(true);\n+        lockScreenConfig.setCustomView(0);\n+        lockScreenConfig.setAppIcon(0);\n+\n+        if (Looper.myLooper() == null) {\n+            Looper.prepare();\n+        }\n+        LockScreenManager lockScreenManager = setupLockScreenManager(lockScreenConfig);\n+\n+        lockScreenManager.start(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                OnHMIStatus onHMIStatus = new OnHMIStatus();\n+                onHMIStatus.setHmiLevel(HMILevel.HMI_FULL);\n+                onHMIListener.onNotified(onHMIStatus);\n+\n+                if (!firstDD) {\n+                    OnDriverDistraction firstOnDriverDistraction = new OnDriverDistraction();\n+                    if (dd == DriverDistractionState.DD_OFF) {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_ON);\n+                    } else {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_OFF);\n+                    }\n+\n+                    if (previousLockScreenDismissibility != null) {\n+                        firstOnDriverDistraction.setLockscreenDismissibility(previousLockScreenDismissibility);\n+                    }\n+\n+                    onDDListener.onNotified(firstOnDriverDistraction);\n+                }\n+\n+                OnDriverDistraction onDriverDistraction = new OnDriverDistraction();\n+                if (lockScreenDismissibility != null) {\n+                    onDriverDistraction.setLockscreenDismissibility(lockScreenDismissibility);\n+                }\n+                onDriverDistraction.setState(dd);\n+                onDDListener.onNotified(onDriverDistraction);\n+\n+\n+                new Handler().postDelayed(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (dismissEnabled) {\n+                            onView(withText(\"Swipe down to dismiss, acknowledging that you are not the driver.\")).check(matches(isDisplayed()));\n+                        } else {\n+                            onView(withText(\"Locked for your safety\")).check(matches(isDisplayed()));\n+                        }\n+\n+                        BroadcastReceiver receiver = new BroadcastReceiver() {\n+                            @Override\n+                            public void onReceive(Context context, Intent intent) {\n+                                if (dismissEnabled) {\n+                                    assertEquals(intent.getAction(), SDLLockScreenActivity.KEY_LOCKSCREEN_DISMISSED);\n+                                } else {\n+                                    //Activity should not be dismissible test failed due to lock screen being dismissed\n+                                    fail();\n+                                }\n+                            }\n+                        };\n+\n+                        intentsTestRule.getActivity().registerReceiver(receiver, new IntentFilter(SDLLockScreenActivity.KEY_LOCKSCREEN_DISMISSED));\n+\n+                        onView(ViewMatchers.withId(R.id.lockscreen_linear_layout)).perform(ViewActions.swipeDown());\n+                    }\n+                }, 1000);\n+            }\n+        });\n+    }\n+\n+    private LockScreenManager setupLockScreenManager(LockScreenConfig lockScreenConfig) {\n+        ISdl internalInterface = mock(ISdl.class);\n+\n+        Answer<Void> onDDStatusAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onDDListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        Answer<Void> onHMIStatusAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onHMIListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        Answer<Void> onSystemRequestAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                onSystemRequestListener = (OnRPCNotificationListener) args[1];\n+                return null;\n+            }\n+        };\n+\n+        doAnswer(onDDStatusAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_DRIVER_DISTRACTION), any(OnRPCNotificationListener.class));\n+        doAnswer(onHMIStatusAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCNotificationListener.class));\n+        doAnswer(onSystemRequestAnswer).when(internalInterface).addOnRPCNotificationListener(eq(FunctionID.ON_SYSTEM_REQUEST), any(OnRPCNotificationListener.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0ODc3Ng==", "bodyText": "can we load these two strings from strings.xml instead of hardcoding them again here?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#discussion_r504748776", "createdAt": "2020-10-14T14:58:57Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/SDLLockScreenActivityEspressoTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.espresso.matcher.ViewMatchers;\n+import androidx.test.ext.junit.rules.ActivityScenarioRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+\n+import com.smartdevicelink.R;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.ISdl;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.rpc.OnDriverDistraction;\n+import com.smartdevicelink.proxy.rpc.OnHMIStatus;\n+import com.smartdevicelink.proxy.rpc.enums.DriverDistractionState;\n+import com.smartdevicelink.proxy.rpc.enums.HMILevel;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+\n+//These tests are used to ensure the lockScreen UI Behavior\n+//They are ignored for CICD purposes and should be run manually during release testing\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+@Ignore\n+public class SDLLockScreenActivityEspressoTest {\n+\n+    private OnRPCNotificationListener onDDListener;\n+    private OnRPCNotificationListener onHMIListener;\n+    private OnRPCNotificationListener onSystemRequestListener;\n+\n+    @Rule\n+    public ActivityScenarioRule<SDLLockScreenActivity> activityRule =\n+            new ActivityScenarioRule<>(SDLLockScreenActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<SDLLockScreenActivity> intentsTestRule =\n+            new IntentsTestRule<>(SDLLockScreenActivity.class);\n+\n+    @Test\n+    public void test1() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test2() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test3() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test4() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test5() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test6() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test7() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test8() {\n+        testLockScreenBehavior(DriverDistractionState.DD_OFF, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test9() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    @Test\n+    public void test10() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, true, null, false);\n+    }\n+\n+    @Test\n+    public void test11() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, true, null, false);\n+    }\n+\n+    @Test\n+    public void test12() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, true, null, true);\n+    }\n+\n+    @Test\n+    public void test13() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, false, false);\n+    }\n+\n+    @Test\n+    public void test14() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, null, false, true, true);\n+    }\n+\n+    @Test\n+    public void test15() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, false, false);\n+    }\n+\n+    @Test\n+    public void test16() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, false, false, true, false);\n+    }\n+\n+    @Test\n+    public void test17() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, true, true);\n+    }\n+\n+    @Test\n+    public void test18() {\n+        testLockScreenBehavior(DriverDistractionState.DD_ON, true, false, false, true);\n+    }\n+\n+    public void testLockScreenBehavior(final DriverDistractionState dd, final Boolean lockScreenDismissibility, final boolean firstDD, final Boolean previousLockScreenDismissibility, final boolean dismissEnabled) {\n+        LockScreenConfig lockScreenConfig = new LockScreenConfig();\n+        lockScreenConfig.setDisplayMode(LockScreenConfig.DISPLAY_MODE_ALWAYS);\n+        lockScreenConfig.enableDismissGesture(true);\n+        lockScreenConfig.setCustomView(0);\n+        lockScreenConfig.setAppIcon(0);\n+\n+        if (Looper.myLooper() == null) {\n+            Looper.prepare();\n+        }\n+        LockScreenManager lockScreenManager = setupLockScreenManager(lockScreenConfig);\n+\n+        lockScreenManager.start(new CompletionListener() {\n+            @Override\n+            public void onComplete(boolean success) {\n+                OnHMIStatus onHMIStatus = new OnHMIStatus();\n+                onHMIStatus.setHmiLevel(HMILevel.HMI_FULL);\n+                onHMIListener.onNotified(onHMIStatus);\n+\n+                if (!firstDD) {\n+                    OnDriverDistraction firstOnDriverDistraction = new OnDriverDistraction();\n+                    if (dd == DriverDistractionState.DD_OFF) {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_ON);\n+                    } else {\n+                        firstOnDriverDistraction.setState(DriverDistractionState.DD_OFF);\n+                    }\n+\n+                    if (previousLockScreenDismissibility != null) {\n+                        firstOnDriverDistraction.setLockscreenDismissibility(previousLockScreenDismissibility);\n+                    }\n+\n+                    onDDListener.onNotified(firstOnDriverDistraction);\n+                }\n+\n+                OnDriverDistraction onDriverDistraction = new OnDriverDistraction();\n+                if (lockScreenDismissibility != null) {\n+                    onDriverDistraction.setLockscreenDismissibility(lockScreenDismissibility);\n+                }\n+                onDriverDistraction.setState(dd);\n+                onDDListener.onNotified(onDriverDistraction);\n+\n+\n+                new Handler().postDelayed(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (dismissEnabled) {\n+                            onView(withText(\"Swipe down to dismiss, acknowledging that you are not the driver.\")).check(matches(isDisplayed()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ee3bf8c6a176f2b696b49ba095476717bfea2"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46283864ecf72d0f0b7622966133a94cca50170b", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/46283864ecf72d0f0b7622966133a94cca50170b", "committedDate": "2020-10-14T17:25:22Z", "message": "Code Review Changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjA2NzI4", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1527#pullrequestreview-508606728", "createdAt": "2020-10-14T18:12:29Z", "commit": {"oid": "46283864ecf72d0f0b7622966133a94cca50170b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2097, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}