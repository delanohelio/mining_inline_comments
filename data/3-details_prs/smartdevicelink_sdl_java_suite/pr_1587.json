{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4OTY0ODQ3", "number": 1587, "title": "[0238] Keyboard Enhancements", "bodyText": "Fixes #1121\nThis PR is [ready] for review.\nRelated PR's\nCore\nHMI\nRisk\nThis PR makes [minor] API changes.\nTesting Plan\n\n I have verified that I have not introduced new warnings in this PR (or explain why below)\n I have run the unit tests with this PR\n I have tested this PR against Core and verified behavior (if applicable, if not applicable, explain why below).\n I have tested Android, Java SE, and Java EE\n\nUnit Tests\nAdded tests to cover new structures and updated existing ones according to the introduced changes\nSummary\nChanges according to the #1121\nCLA\n\n I have signed the CLA", "createdAt": "2020-12-13T14:59:08Z", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587", "merged": true, "mergeCommit": {"oid": "0777adc114133f773ead611c2685e41a58dc4523"}, "closed": true, "closedAt": "2021-02-25T14:33:36Z", "author": {"login": "kboskin"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlyYo-AH2gAyNTM4OTY0ODQ3OmU4NDVkMjBiYTMzMDIzN2JiNjUzOTNiN2M0NWQyZWEwYTQ0OTBjMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9mbbZAFqTU5ODYyNzA4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e845d20ba330237bb65393b7c45d2ea0a4490c19", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e845d20ba330237bb65393b7c45d2ea0a4490c19", "committedDate": "2020-12-13T14:54:36Z", "message": "[0238]\n- Implement changes according to the proposal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/69609bd6eca1c8b7b7ea56a0c3582f538d02aa04", "committedDate": "2020-12-13T15:02:18Z", "message": "[0238]\n- Imports rollback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDkxNDAy", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-551491402", "createdAt": "2020-12-14T15:39:23Z", "commit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozOToyM1rOIFWhtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMTo0NjoyM1rOIF0-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4Mjg3MA==", "bodyText": "@kostyaBoss I would switch lines 62 and 63 so ENABLE comes before DISABLE.  In this way, throughout the code the ordering will be consistent (you have ENABLE, DISABLE, and then USER_CHOICE).", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542482870", "createdAt": "2020-12-14T15:39:23Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/enums/KeyboardInputMaskTests.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.smartdevicelink.test.rpc.enums;\n+\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardInputMask;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class KeyboardInputMaskTests extends TestCase {\n+\n+    /**\n+     * Verifies that the enum values are not null upon valid assignment.\n+     */\n+    public void testValidEnums() {\n+        String example = \"ENABLE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumEnableInputKeyMask = KeyboardInputMask.valueForString(example);\n+        example = \"DISABLE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumDisableInputKeyMask = KeyboardInputMask.valueForString(example);\n+        example = \"USER_CHOICE_INPUT_KEY_MASK\";\n+        KeyboardInputMask enumUserChoiceInputKeyMask = KeyboardInputMask.valueForString(example);\n+\n+        assertNotNull(\"ENABLE_INPUT_KEY_MASK returned null\", enumEnableInputKeyMask);\n+        assertNotNull(\"DISABLE_INPUT_KEY_MASK returned null\", enumDisableInputKeyMask);\n+        assertNotNull(\"USER_CHOICE_INPUT_KEY_MASK returned null\", enumUserChoiceInputKeyMask);\n+    }\n+\n+    /**\n+     * Verifies that an invalid assignment is null.\n+     */\n+    public void testInvalidEnum() {\n+        String example = \"ENAablE_INPUT_KEY_MASK\";\n+        try {\n+            KeyboardInputMask temp = KeyboardInputMask.valueForString(example);\n+            assertNull(\"Result of valueForString should be null.\", temp);\n+        } catch (IllegalArgumentException exception) {\n+            fail(\"Invalid enum throws IllegalArgumentException.\");\n+        }\n+    }\n+\n+    /**\n+     * Verifies that a null assignment is invalid.\n+     */\n+    public void testNullEnum() {\n+        String example = null;\n+        try {\n+            KeyboardInputMask temp = KeyboardInputMask.valueForString(example);\n+            assertNull(\"Result of valueForString should be null.\", temp);\n+        } catch (NullPointerException exception) {\n+            fail(\"Null string throws NullPointerException.\");\n+        }\n+    }\n+\n+    /**\n+     * Verifies the possible enum values of MassageCushion.\n+     */\n+    public void testListEnum() {\n+        List<KeyboardInputMask> enumValueList = Arrays.asList(KeyboardInputMask.values());\n+\n+        List<KeyboardInputMask> enumTestList = new ArrayList<KeyboardInputMask>();\n+        enumTestList.add(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NTczNQ==", "bodyText": "@kostyaBoss You can remove the unused import on line 3.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542485735", "createdAt": "2020-12-14T15:42:45Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NTg1Mw==", "bodyText": "@kostyaBoss You can remove the unused import on line 5.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542485853", "createdAt": "2020-12-14T15:42:54Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ4NjA5Mg==", "bodyText": "@kostyaBoss You can remove the unused imports on lines 7 and 8.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542486092", "createdAt": "2020-12-14T15:43:12Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/ConfigurableKeyboardsTests.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.proxy.rpc.ClusterModeStatus;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.enums.CarModeStatus;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.proxy.rpc.enums.PowerModeQualificationStatus;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxMzk4OQ==", "bodyText": "@kostyaBoss I would suggest deleting lines 134-137.  It is correct since it is generated by the code generator tool, but it is out of scope of the PR.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542813989", "createdAt": "2020-12-14T21:32:09Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,18 +102,53 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>maskInputCharacters</td>\r\n+ *\t\t\t<td>KeyboardInputMask</td>\r\n+ *\t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td></td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ *\t\t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>customizeKeys</td>\r\n+ *\t\t\t<td>List<String></td>\r\n+ *\t\t\t<td>Array of special characters to show in customizable Keys.If omitted, keyboard will showdefault special characters</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td>{\"array_min_size\": 1, \"array_max_size\": 10, \"string_min_length\": 1, \"string_max_length\": 1}</td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ * \t\t</tr>\r\n  *  </table>\r\n  *\r\n- * @since SmartDeviceLink 3.0\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n \r\n public class KeyboardProperties extends RPCStruct {\r\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n+    /**\r\n+     * @since SmartDeviceLink 3.0.0\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNDYyNg==", "bodyText": "@kostyaBoss I would suggest deleting lines140-142.  It is correct since it is generated by the code generator tool, but it is out of scope of the PR.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542814626", "createdAt": "2020-12-14T21:32:36Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,18 +102,53 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>maskInputCharacters</td>\r\n+ *\t\t\t<td>KeyboardInputMask</td>\r\n+ *\t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td></td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ *\t\t\t</tr>\r\n+ * \t\t<tr>\r\n+ *\t\t\t<td>customizeKeys</td>\r\n+ *\t\t\t<td>List<String></td>\r\n+ *\t\t\t<td>Array of special characters to show in customizable Keys.If omitted, keyboard will showdefault special characters</td>\r\n+ *\t\t\t<td>N</td>\r\n+ *\t\t\t<td>{\"array_min_size\": 1, \"array_max_size\": 10, \"string_min_length\": 1, \"string_max_length\": 1}</td>\r\n+ *\t\t\t<td>\r\n+ *\t\t\t\t@since SmartDeviceLink 7.1.0\r\n+ *\t\t\t</td>\r\n+ * \t\t</tr>\r\n  *  </table>\r\n  *\r\n- * @since SmartDeviceLink 3.0\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n \r\n public class KeyboardProperties extends RPCStruct {\r\n     public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n     public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n     public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n+    /**\r\n+     * @since SmartDeviceLink 3.0.0\r\n+     * @deprecated in SmartDeviceLink 6.0.0\r\n+     */\r\n     @Deprecated\r\n     public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\r\n+    /**\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNzY5Nw==", "bodyText": "@kostyaBoss Lines 312-359 are good.  I would suggest removing anything unrelated to this that you have added.\n(For example lines 303-306, 290-293, etc.).", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542817697", "createdAt": "2020-12-14T21:35:14Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -196,23 +285,76 @@ public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\n     }\r\n \r\n     /**\r\n-     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types.\r\n+     * Gets the autoCompleteList.\r\n      *\r\n-     * @return List<String> representing the suggestions list\r\n+     * @return List<String> Allows an app to pre-populate the text field with a list of suggested or completed entries\r\n+     * as the user types. If empty, the auto-complete list will be removed from the screen.\r\n+     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\r\n+     * @since SmartDeviceLink 6.0.0\r\n      */\r\n+    @SuppressWarnings(\"unchecked\")\r\n     public List<String> getAutoCompleteList() {\r\n         return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\r\n     }\r\n \r\n     /**\r\n-     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\r\n+     * Sets the autoCompleteList.\r\n      *\r\n-     * @param autoCompleteList List<String> representing the suggestions list\r\n+     * @param autoCompleteList Allows an app to pre-populate the text field with a list of suggested or completed entries\r\n+     * as the user types. If empty, the auto-complete list will be removed from the screen.\r\n+     * {\"array_min_size\": 0, \"array_max_size\": 100, \"string_min_length\": 1, \"string_max_length\": 1000}\r\n+     * @since SmartDeviceLink 6.0.0\r\n      */\r\n     public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\r\n         setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\r\n         return this;\r\n     }\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgyODE5Mw==", "bodyText": "@kostyaBoss On line 471 I would rename this to GENERAL_KEYBOARD_INPUT_MASK", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542828193", "createdAt": "2020-12-14T21:45:13Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java", "diffHunk": "@@ -464,6 +468,10 @@\n     public static final List<Turn> GENERAL_TURN_LIST = new ArrayList<Turn>();\n     public static final List<Choice> GENERAL_CHOICE_LIST = new ArrayList<Choice>();\n     public static final List<String> GENERAL_STRING_LIST = Arrays.asList(new String[]{\"a\", \"b\"});\n+    public static final KeyboardInputMask GENERAL_MASK_CHARACTERS = KeyboardInputMask.ENABLE_INPUT_KEY_MASK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1NDEyOQ==", "bodyText": "@kostyaBoss On line 102 in the if statement you need to add: || key.equals(KeyboardProperties.KEY_CUSTOMIZE_KEYS) as a clause in the conditional.\nSo the if would look like: if (key.equals(KeyboardProperties.KEY_LIMITED_CHARACTER_LIST) || key.equals(KeyboardProperties.KEY_AUTO_COMPLETE_LIST) || key.equals(KeyboardProperties.KEY_CUSTOMIZE_KEYS))", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542954129", "createdAt": "2020-12-15T00:33:24Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardPropertiesTests.java", "diffHunk": "@@ -81,6 +90,8 @@ public void testJson() {\n             reference.put(KeyboardProperties.KEY_KEYPRESS_MODE, TestValues.GENERAL_KEYPRESSMODE);\n             reference.put(KeyboardProperties.KEY_LANGUAGE, TestValues.GENERAL_LANGUAGE);\n             reference.put(KeyboardProperties.KEY_LIMITED_CHARACTER_LIST, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n+            reference.put(KeyboardProperties.KEY_CUSTOMIZE_KEYS, JsonUtils.createJsonArray(TestValues.GENERAL_STRING_LIST));\n+            reference.put(KeyboardProperties.KEY_MASK_INPUT_CHARACTERS, TestValues.GENERAL_MASK_CHARACTERS);\n \n             JSONObject underTest = msg.serializeJSON();\n             assertEquals(TestValues.MATCH, reference.length(), underTest.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1ODU3NA==", "bodyText": "@kostyaBoss Lines 61-68 are good.  You can revert the other formatting changes in this file, since they don't relate to the PR.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542958574", "createdAt": "2020-12-15T00:45:27Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/enums/KeyboardEvent.java", "diffHunk": "@@ -30,35 +30,42 @@\n  * POSSIBILITY OF SUCH DAMAGE.\r\n  */\r\n package com.smartdevicelink.proxy.rpc.enums;\r\n-\r\n /**\r\n  * Enumeration listing possible keyboard events.\r\n+ * @since SmartDeviceLink 3.0.0\r\n  */\r\n public enum KeyboardEvent {\r\n-    /**\r\n-     * The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\r\n-     */\r\n+\t/** The use has pressed the keyboard key (applies to both SINGLE_KEYPRESS and RESEND_CURRENT_ENTRY modes).\r\n+\t *\r\n+\t */\r\n \r\n     KEYPRESS,\r\n-    /**\r\n-     * The User has finished entering text from the keyboard and submitted the entry.\r\n+    /** The User has finished entering text from the keyboard and submitted the entry.\r\n+     *\r\n      */\r\n \r\n     ENTRY_SUBMITTED,\r\n-    /**\r\n-     * The User has pressed the HMI-defined \"Cancel\" button.\r\n+    /** The User has pressed the HMI-defined \"Cancel\" button.\r\n+     *\r\n      */\r\n \r\n     ENTRY_CANCELLED,\r\n-    /**\r\n-     * The User has not finished entering text and the keyboard is aborted with the event of higher priority.\r\n+    /** The User has not finished entering text and the keyboard is aborted with the event of higher priority.\r\n+     *\r\n      */\r\n     ENTRY_ABORTED,\r\n     /**\r\n      * @since SmartDeviceLink 4.0\r\n      */\r\n     ENTRY_VOICE,\r\n-    ;\r\n+    /**\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDQ4OA==", "bodyText": "@kostyaBoss I would remove lines 59-61 since it is not part of the proposal's XML.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974488", "createdAt": "2020-12-15T01:26:48Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDY3NQ==", "bodyText": "@kostyaBoss I would remove lines 87-89 since it is not part of the proposal's XML.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974675", "createdAt": "2020-12-15T01:27:16Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDg2Ng==", "bodyText": "@kostyaBoss I would remove line 119 since it is not part of the proposal's XML.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974866", "createdAt": "2020-12-15T01:27:46Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_SUPPORTED_KEYBOARD_LAYOUTS = \"supportedKeyboardLayouts\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_CONFIGURABLE_KEYS = \"configurableKeys\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3NDk2Ng==", "bodyText": "@kostyaBoss I would remove line 131 since it is not part of the proposal's XML.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542974966", "createdAt": "2020-12-15T01:28:08Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c) 2017 - 2020, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboardLayouts</td>\n+ *      <td>List<KeyboardLayout></td>\n+ *      <td>Supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>configurableKeys</td>\n+ *      <td>List<ConfigurableKeyboards></td>\n+ *      <td>Get Number of Keys for Special characters, App can customize as per their needs.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_min_size\": 1, \"array_max_size\": 1000}</td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_SUPPORTED_KEYBOARD_LAYOUTS = \"supportedKeyboardLayouts\";\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_CONFIGURABLE_KEYS = \"configurableKeys\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardCapabilities setMaskInputCharactersSupported(Boolean maskInputCharactersSupported) {\n+        setValue(KEY_MASK_INPUT_CHARACTERS_SUPPORTED, maskInputCharactersSupported);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maskInputCharactersSupported.\n+     *\n+     * @return Boolean Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODI0Ng==", "bodyText": "@kostyaBoss Do you need to uncomment lines 81-91 for the KEY_SUPPORTED_KEYBOARD_LAYOUTS?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542978246", "createdAt": "2020-12-15T01:36:46Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.marshal.JsonRPCMarshaller;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.KeyboardCapabilities;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.test.JsonUtils;\n+import com.smartdevicelink.test.TestValues;\n+import com.smartdevicelink.test.Validator;\n+\n+import junit.framework.TestCase;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class KeyboardCapabilitiesTests extends TestCase {\n+    private KeyboardCapabilities msg;\n+\n+    @Override\n+    public void setUp() {\n+        msg = new KeyboardCapabilities();\n+\n+        msg.setConfigurableKeys(TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST);\n+        msg.setMaskInputCharactersSupported(TestValues.GENERAL_BOOLEAN);\n+        msg.setSupportedKeyboardLayouts(TestValues.GENERAL_KEYBOARD_LAYOUT_LIST);\n+    }\n+\n+    /**\n+     * Tests the expected values of the RPC message.\n+     */\n+    public void testRpcValues() {\n+        // Test Values\n+        List<ConfigurableKeyboards> configurableKeyboards = msg.getConfigurableKeys();\n+        Boolean maskInputCharactersSupported = msg.getMaskInputCharactersSupported();\n+        List<KeyboardLayout> keyboardLayouts = msg.getSupportedKeyboardLayouts();\n+\n+        // Valid Tests\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST, configurableKeyboards);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_BOOLEAN, (boolean) maskInputCharactersSupported);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_KEYBOARD_LAYOUT_LIST, keyboardLayouts);\n+\n+        // Invalid/Null Tests\n+        KeyboardCapabilities msg = new KeyboardCapabilities();\n+        assertNotNull(TestValues.NOT_NULL, msg);\n+\n+        // Keypress mode is created in the object constructor\n+        assertNull(TestValues.NULL, msg.getConfigurableKeys());\n+        assertNull(TestValues.NULL, msg.getMaskInputCharactersSupported());\n+        assertNull(TestValues.NULL, msg.getSupportedKeyboardLayouts());\n+    }\n+\n+    public void testJson() {\n+        JSONObject reference = new JSONObject();\n+\n+        try {\n+            reference.put(KeyboardCapabilities.KEY_CONFIGURABLE_KEYS, TestValues.JSON_CONFIGURABLE_KEYBOARDS_LIST);\n+            reference.put(KeyboardCapabilities.KEY_MASK_INPUT_CHARACTERS_SUPPORTED, TestValues.GENERAL_BOOLEAN);\n+            reference.put(KeyboardCapabilities.KEY_SUPPORTED_KEYBOARD_LAYOUTS, TestValues.JSON_KEYBOARDS_LAYOUTS_LIST);\n+\n+            JSONObject underTest = msg.serializeJSON();\n+            assertEquals(TestValues.MATCH, reference.length(), underTest.length());\n+\n+            Iterator<?> iterator = reference.keys();\n+            while (iterator.hasNext()) {\n+                String key = (String) iterator.next();\n+                if (key.equals(KeyboardCapabilities.KEY_CONFIGURABLE_KEYS)) {\n+                    JSONArray referenceArray = JsonUtils.readJsonArrayFromJsonObject(reference, key);\n+                    JSONArray underTestArray = JsonUtils.readJsonArrayFromJsonObject(underTest, key);\n+                    assertEquals(TestValues.MATCH, referenceArray.length(), underTestArray.length());\n+\n+                    for (int i = 0; i < referenceArray.length(); i++) {\n+                        Hashtable<String, Object> hashReference = JsonRPCMarshaller.deserializeJSONObject(referenceArray.getJSONObject(i));\n+                        Hashtable<String, Object> hashTest = JsonRPCMarshaller.deserializeJSONObject(underTestArray.getJSONObject(i));\n+                        assertTrue(TestValues.TRUE, Validator.validateConfigurableKeyboards(new ConfigurableKeyboards(hashReference), new ConfigurableKeyboards(hashTest)));\n+                    }\n+                }/* else if (key.equals(KeyboardCapabilities.KEY_SUPPORTED_KEYBOARD_LAYOUTS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk3ODUzMw==", "bodyText": "@kostyaBoss Do you need this comment on line 51?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542978533", "createdAt": "2020-12-15T01:37:32Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/rpc/datatypes/KeyboardCapabilitiesTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package com.smartdevicelink.test.rpc.datatypes;\n+\n+import com.smartdevicelink.marshal.JsonRPCMarshaller;\n+import com.smartdevicelink.proxy.rpc.ConfigurableKeyboards;\n+import com.smartdevicelink.proxy.rpc.KeyboardCapabilities;\n+import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\n+import com.smartdevicelink.test.JsonUtils;\n+import com.smartdevicelink.test.TestValues;\n+import com.smartdevicelink.test.Validator;\n+\n+import junit.framework.TestCase;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class KeyboardCapabilitiesTests extends TestCase {\n+    private KeyboardCapabilities msg;\n+\n+    @Override\n+    public void setUp() {\n+        msg = new KeyboardCapabilities();\n+\n+        msg.setConfigurableKeys(TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST);\n+        msg.setMaskInputCharactersSupported(TestValues.GENERAL_BOOLEAN);\n+        msg.setSupportedKeyboardLayouts(TestValues.GENERAL_KEYBOARD_LAYOUT_LIST);\n+    }\n+\n+    /**\n+     * Tests the expected values of the RPC message.\n+     */\n+    public void testRpcValues() {\n+        // Test Values\n+        List<ConfigurableKeyboards> configurableKeyboards = msg.getConfigurableKeys();\n+        Boolean maskInputCharactersSupported = msg.getMaskInputCharactersSupported();\n+        List<KeyboardLayout> keyboardLayouts = msg.getSupportedKeyboardLayouts();\n+\n+        // Valid Tests\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_CONFIGURABLE_KEYBOARDS_LIST, configurableKeyboards);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_BOOLEAN, (boolean) maskInputCharactersSupported);\n+        assertEquals(TestValues.MATCH, TestValues.GENERAL_KEYBOARD_LAYOUT_LIST, keyboardLayouts);\n+\n+        // Invalid/Null Tests\n+        KeyboardCapabilities msg = new KeyboardCapabilities();\n+        assertNotNull(TestValues.NOT_NULL, msg);\n+\n+        // Keypress mode is created in the object constructor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MTM4OA==", "bodyText": "@kostyaBoss On line 3944 I would rename the parameters to keyboardCapabilities1 and keyboardCapabilities2.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542981388", "createdAt": "2020-12-15T01:45:21Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java", "diffHunk": "@@ -3929,4 +3930,56 @@ public static boolean validateStabilityControlStatus(VehicleDataResult status1,\n         }\n         return status1.getDataType().equals(status2.getDataType()) && status1.getResultCode().equals(status2.getResultCode());\n     }\n+\n+    public static boolean validateConfigurableKeyboards(ConfigurableKeyboards keyboard1, ConfigurableKeyboards keyboard2) {\n+        if (keyboard1 == null) {\n+            return (keyboard2 == null);\n+        }\n+        if (keyboard2 == null) {\n+            return (keyboard1 == null);\n+        }\n+        return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n+    }\n+\n+    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk4MTc2OA==", "bodyText": "@kostyaBoss I would rename the function on line 3944 to validateKeyboardCapabilities.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r542981768", "createdAt": "2020-12-15T01:46:23Z", "author": {"login": "santhanamk"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java", "diffHunk": "@@ -3929,4 +3930,56 @@ public static boolean validateStabilityControlStatus(VehicleDataResult status1,\n         }\n         return status1.getDataType().equals(status2.getDataType()) && status1.getResultCode().equals(status2.getResultCode());\n     }\n+\n+    public static boolean validateConfigurableKeyboards(ConfigurableKeyboards keyboard1, ConfigurableKeyboards keyboard2) {\n+        if (keyboard1 == null) {\n+            return (keyboard2 == null);\n+        }\n+        if (keyboard2 == null) {\n+            return (keyboard1 == null);\n+        }\n+        return keyboard1.getKeyboardLayout().equals(keyboard2.getKeyboardLayout()) && keyboard1.getNumConfigurableKeys().equals(keyboard2.getNumConfigurableKeys());\n+    }\n+\n+    public static boolean validateKeyboardCapability(KeyboardCapabilities keyboard1, KeyboardCapabilities keyboard2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69609bd6eca1c8b7b7ea56a0c3582f538d02aa04"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a277562efdfeaa3e5ab0e7f113a71fc63626d001", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/a277562efdfeaa3e5ab0e7f113a71fc63626d001", "committedDate": "2020-12-17T12:31:07Z", "message": "[0238]\n- Implement manager updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ec1e14f665d206f44a5e02301688f28d4c65dd", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/55ec1e14f665d206f44a5e02301688f28d4c65dd", "committedDate": "2020-12-17T12:31:50Z", "message": "[0238]\n- Rollback of the empty method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f841c3a59fca7d33848420fdb0b390c6c3120563", "committedDate": "2020-12-21T19:37:05Z", "message": "[0298]\n- Fix pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDIzNTEy", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-557423512", "createdAt": "2020-12-22T23:25:52Z", "commit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzoyNTo1MlrOIKMG6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMzo0NjozOVrOIKMdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NTA0OA==", "bodyText": "@kostyaBoss On line 88 I would rename this to onKeyboardInputMaskHasChanged().", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547555048", "createdAt": "2020-12-22T23:25:52Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java", "diffHunk": "@@ -84,4 +84,6 @@\n      * @param currentInputText - The user's full current input text\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n+\n+    void onMaskHasChanged(KeyboardEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1NzgyMg==", "bodyText": "@kostyaBoss Since these enums were most recently added I would move the else if block on lines 341-342 below the last else if (around lines 362-363).", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547557822", "createdAt": "2020-12-22T23:36:02Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java", "diffHunk": "@@ -338,6 +338,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1ODU1NA==", "bodyText": "@kostyaBoss Do the unit tests in PresentChoiceSetOperationTests.java need to be updated?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547558554", "createdAt": "2020-12-22T23:38:31Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentChoiceSetOperation.java", "diffHunk": "@@ -338,6 +338,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n+                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());\n                 } else if (onKeyboard.getEvent().equals(KeyboardEvent.KEYPRESS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTE1MA==", "bodyText": "@kostyaBoss Since these enums were most recently added I would move the else if block on lines 287-288 below the last else if (around line 310).", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547559150", "createdAt": "2020-12-22T23:40:31Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java", "diffHunk": "@@ -284,6 +284,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU1OTM0NA==", "bodyText": "@kostyaBoss Do the unit tests in PresentKeyboardOperationTests.java need to be updated?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547559344", "createdAt": "2020-12-22T23:41:16Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/PresentKeyboardOperation.java", "diffHunk": "@@ -284,6 +284,8 @@ public void onNotified(RPCNotification notification) {\n                 if (onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_VOICE) || onKeyboard.getEvent().equals(KeyboardEvent.ENTRY_SUBMITTED)) {\n                     // Submit Voice or Text\n                     keyboardListener.onUserDidSubmitInput(onKeyboard.getData(), onKeyboard.getEvent());\n+                } else if (onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_ENABLED) || onKeyboard.getEvent().equals(KeyboardEvent.INPUT_KEY_MASK_DISABLED)) {\n+                    keyboardListener.onMaskHasChanged(onKeyboard.getEvent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDcyNw==", "bodyText": "@kostyaBoss On line 551 you are checking if getMaskInputCharactersSupported () != null .  However, that method returns a Boolean.  Do you need to change this logic?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547560727", "createdAt": "2020-12-22T23:46:23Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU2MDgwNQ==", "bodyText": "@kostyaBoss Do you need to update the unit tests?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r547560805", "createdAt": "2020-12-22T23:46:39Z", "author": {"login": "santhanamk"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f841c3a59fca7d33848420fdb0b390c6c3120563"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a", "committedDate": "2020-12-29T14:49:15Z", "message": "[0298]\n- Fix PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODY2Mzg5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-560866389", "createdAt": "2021-01-04T09:01:20Z", "commit": {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1136eb16d53572fe1b1f2b368d502819d1d422", "author": {"user": {"login": "AKalinich-Luxoft", "name": "Andrii Kalinich (GitHub)"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/cd1136eb16d53572fe1b1f2b368d502819d1d422", "committedDate": "2021-02-06T10:36:25Z", "message": "Make changes according to revision"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245", "author": {"user": {"login": "AKalinich-Luxoft", "name": "Andrii Kalinich (GitHub)"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/55de319324344973dcfad3e767d152e98c2d0245", "committedDate": "2021-02-06T10:51:19Z", "message": "Merge remote-tracking branch 'origin/develop' into feature/0298_keyboard_enchancements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/40766fd31dc9805c423eb0184eab130e3a521f9c", "committedDate": "2021-02-11T20:17:18Z", "message": "Merge branch 'develop' into feature/0298_keyboard_enchancements\n\n# Conflicts:\n#\tandroid/sdl_android/src/androidTest/java/com/smartdevicelink/test/TestValues.java\n#\tandroid/sdl_android/src/androidTest/java/com/smartdevicelink/test/Validator.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NjE5OTk3", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-569619997", "createdAt": "2021-01-15T21:10:10Z", "commit": {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNTozNzo1MVrOIWUMFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxOToxNjoyNVrOIinEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3MDM1OQ==", "bodyText": "This import is unused", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r560270359", "createdAt": "2021-01-19T15:37:51Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -64,6 +66,7 @@\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n+import java.security.Key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3MjA5Ng==", "bodyText": "Can we remove the todo?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r560272096", "createdAt": "2021-01-19T15:40:09Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -110,6 +113,8 @@\n         // capabilities\n         currentSystemContext = SystemContext.SYSCTXT_MAIN;\n         currentHMILevel = HMILevel.HMI_NONE;\n+        // TODO remove, move to addListener", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf77bc5363d3efdd8676b9afef5b1b7abdf5ca0a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NDY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *      <td>\n          \n          \n            \n             *         @since SmartDeviceLink 7.1.0\n          \n          \n            \n             *      </td>\n          \n          \n            \n             *      <td></td>\n          \n      \n    \n    \n  \n\nThe @ since is added to the main class so no need to add it again", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573044673", "createdAt": "2021-02-09T16:40:48Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjM5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * @since SmartDeviceLink 7.1.0\n          \n          \n            \n                 */", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046399", "createdAt": "2021-02-09T16:42:57Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjU4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since SmartDeviceLink 7.1.0", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046581", "createdAt": "2021-02-09T16:43:11Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    public static final String KEY_SUPPORTED_KEYBOARDS = \"supportedKeyboards\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA0NjkwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @since SmartDeviceLink 7.1.0", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573046901", "createdAt": "2021-02-09T16:43:35Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardCapabilities.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2017 - 2021, SmartDeviceLink Consortium, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following\n+ * disclaimer in the documentation and/or other materials provided with the\n+ * distribution.\n+ *\n+ * Neither the name of the SmartDeviceLink Consortium Inc. nor the names of\n+ * its contributors may be used to endorse or promote products derived\n+ * from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n+ * POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.smartdevicelink.proxy.rpc;\n+\n+import com.smartdevicelink.proxy.RPCStruct;\n+\n+import java.util.Hashtable;\n+import java.util.List;\n+\n+/**\n+ *\n+ * <p><b>Parameter List</b></p>\n+ *\n+ * <table border=\"1\" rules=\"all\">\n+ *  <tr>\n+ *      <th>Param Name</th>\n+ *      <th>Type</th>\n+ *      <th>Description</th>\n+ *      <th>Required</th>\n+ *      <th>Notes</th>\n+ *      <th>Version Available</th>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>maskInputCharactersSupported</td>\n+ *      <td>Boolean</td>\n+ *      <td>Availability of capability to mask input characters using keyboard. True: Available,False: Not Available</td>\n+ *      <td>N</td>\n+ *      <td></td>\n+ *      <td>\n+ *         @since SmartDeviceLink 7.1.0\n+ *      </td>\n+ *  </tr>\n+ *  <tr>\n+ *      <td>supportedKeyboards</td>\n+ *      <td>List<KeyboardLayoutCapability></td>\n+ *      <td>Capabilities of supported keyboard layouts by HMI.</td>\n+ *      <td>N</td>\n+ *      <td>{\"array_max_size\": 1000, \"array_min_size\": 1}</td>\n+ *      <td></td>\n+ *  </tr>\n+ * </table>\n+ * @since SmartDeviceLink 7.1.0\n+ */\n+public class KeyboardCapabilities extends RPCStruct {\n+    /**\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public static final String KEY_MASK_INPUT_CHARACTERS_SUPPORTED = \"maskInputCharactersSupported\";\n+    public static final String KEY_SUPPORTED_KEYBOARDS = \"supportedKeyboards\";\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object\n+     */\n+    public KeyboardCapabilities() { }\n+\n+    /**\n+     * Constructs a new KeyboardCapabilities object indicated by the Hashtable parameter\n+     *\n+     * @param hash The Hashtable to use\n+     */\n+    public KeyboardCapabilities(Hashtable<String, Object> hash) {\n+        super(hash);\n+    }\n+\n+    /**\n+     * Sets the maskInputCharactersSupported.\n+     *\n+     * @param maskInputCharactersSupported Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0\n+     */\n+    public KeyboardCapabilities setMaskInputCharactersSupported(Boolean maskInputCharactersSupported) {\n+        setValue(KEY_MASK_INPUT_CHARACTERS_SUPPORTED, maskInputCharactersSupported);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maskInputCharactersSupported.\n+     *\n+     * @return Boolean Availability of capability to mask input characters using keyboard. True: Available,\n+     * False: Not Available\n+     * @since SmartDeviceLink 7.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA1MTg0Mw==", "bodyText": "You shouldn't rewrite the whole class. Please revert the changes and  only modify the lines that are affected by the proposal", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573051843", "createdAt": "2021-02-09T16:49:09Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -1,218 +1,352 @@\n-/*\r\n- * Copyright (c) 2017 - 2019, SmartDeviceLink Consortium, Inc.\r\n- * All rights reserved.\r\n- *\r\n- * Redistribution and use in source and binary forms, with or without\r\n- * modification, are permitted provided that the following conditions are met:\r\n- *\r\n- * Redistributions of source code must retain the above copyright notice, this\r\n- * list of conditions and the following disclaimer.\r\n- *\r\n- * Redistributions in binary form must reproduce the above copyright notice,\r\n- * this list of conditions and the following\r\n- * disclaimer in the documentation and/or other materials provided with the\r\n- * distribution.\r\n- *\r\n- * Neither the name of the SmartDeviceLink Consortium, Inc. nor the names of its\r\n- * contributors may be used to endorse or promote products derived from this\r\n- * software without specific prior written permission.\r\n- *\r\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n- * POSSIBILITY OF SUCH DAMAGE.\r\n- */\r\n-package com.smartdevicelink.proxy.rpc;\r\n-\r\n-import com.smartdevicelink.proxy.RPCStruct;\r\n-import com.smartdevicelink.proxy.rpc.enums.KeyboardLayout;\r\n-import com.smartdevicelink.proxy.rpc.enums.KeypressMode;\r\n-import com.smartdevicelink.proxy.rpc.enums.Language;\r\n-\r\n-import java.util.Hashtable;\r\n-import java.util.List;\r\n-\r\n-/**\r\n- * This mode causes the interaction to immediately display a keyboard entry through the HMI.\r\n- *\r\n- * <p><b>Parameter List</b></p>\r\n- * <table border=\"1\" rules=\"all\">\r\n- * \t\t<tr>\r\n- * \t\t\t<th>Name</th>\r\n- * \t\t\t<th>Type</th>\r\n- * \t\t\t<th>Mandatory</th>\r\n- *                 <th> Additional</th>\r\n- * \t\t\t<th>Description</th>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>language</td>\r\n- * \t\t\t<td>Language</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>The keyboard language. </td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>keyboardLayout</td>\r\n- * \t\t\t<td>KeyboardLayout</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>Desired keyboard layout.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>sendDynamicEntry</td>\r\n- * \t\t\t<td>Boolean</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>In this mode, all key presses will be sent as they occur. If disabled, entire string of text will be returned only once submitted by user.If omitted, this value will be set to FALSE.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>keypressMode</td>\r\n- * \t\t\t<td>KeypressMode</td>\r\n- * \t\t\t<td>False</td>\r\n- *                 <td></td>\r\n- * \t\t\t<td>Desired keypress mode.If omitted, this value will be set to RESEND_CURRENT_ENTRY. </td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>limitedCharacterList</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>Array = true maxLength = 1 minsize = 1 maxsize = 100</td>\r\n- * \t\t\t<td>Array of keyboard characters to enable. All omitted characters will be greyed out (disabled) on the keyboard. If omitted, the entire keyboard will be enabled.</td>\r\n- * \t\t</tr>\r\n- *\r\n- * \t\t<tr>\r\n- * \t\t\t<td>autoCompleteText</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>maxlength = 1000 </td>\r\n- * \t\t\t<td>Allows an app to prepopulate the text field with a suggested or completed entry as the user types.</td>\r\n- * \t\t</tr>\r\n- * \t\t<tr>\r\n- * \t\t\t<td>autoCompleteList</td>\r\n- * \t\t\t<td>String</td>\r\n- * \t\t\t<td>false</td>\r\n- *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n- * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n- * \t\t</tr>\r\n- *  </table>\r\n- *\r\n- * @since SmartDeviceLink 3.0\r\n- */\r\n-\r\n-public class KeyboardProperties extends RPCStruct {\r\n-    public static final String KEY_KEYPRESS_MODE = \"keypressMode\";\r\n-    public static final String KEY_KEYBOARD_LAYOUT = \"keyboardLayout\";\r\n-    public static final String KEY_LIMITED_CHARACTER_LIST = \"limitedCharacterList\";\r\n-    @Deprecated\r\n-    public static final String KEY_AUTO_COMPLETE_TEXT = \"autoCompleteText\";\r\n-    public static final String KEY_AUTO_COMPLETE_LIST = \"autoCompleteList\";\r\n-    public static final String KEY_LANGUAGE = \"language\";\r\n-\r\n-    private static final KeypressMode KEYPRESS_MODE_DEFAULT = KeypressMode.RESEND_CURRENT_ENTRY;\r\n-\r\n-    public KeyboardProperties() {\r\n-        setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-    }\r\n-\r\n-    public KeyboardProperties(Hashtable<String, Object> hash) {\r\n-        super(hash);\r\n-        if (!store.containsKey(KEY_KEYPRESS_MODE)) {\r\n-            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-        }\r\n-    }\r\n-\r\n-    public Language getLanguage() {\r\n-        return (Language) getObject(Language.class, KEY_LANGUAGE);\r\n-    }\r\n-\r\n-    public KeyboardProperties setLanguage(Language language) {\r\n-        setValue(KEY_LANGUAGE, language);\r\n-        return this;\r\n-    }\r\n-\r\n-    public KeyboardLayout getKeyboardLayout() {\r\n-        return (KeyboardLayout) getObject(KeyboardLayout.class, KEY_KEYBOARD_LAYOUT);\r\n-    }\r\n-\r\n-    public KeyboardProperties setKeyboardLayout(KeyboardLayout keyboardLayout) {\r\n-        setValue(KEY_KEYBOARD_LAYOUT, keyboardLayout);\r\n-        return this;\r\n-    }\r\n-\r\n-    public KeypressMode getKeypressMode() {\r\n-        KeypressMode kp = (KeypressMode) getObject(KeypressMode.class, KEY_KEYPRESS_MODE);\r\n-        if (kp == null) {\r\n-            kp = KEYPRESS_MODE_DEFAULT;\r\n-        }\r\n-        return kp;\r\n-    }\r\n-\r\n-    public KeyboardProperties setKeypressMode(KeypressMode keypressMode) {\r\n-        if (keypressMode != null) {\r\n-            setValue(KEY_KEYPRESS_MODE, keypressMode);\r\n-        } else {\r\n-            setValue(KEY_KEYPRESS_MODE, KEYPRESS_MODE_DEFAULT);\r\n-        }\r\n-        return this;\r\n-    }\r\n-\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<String> getLimitedCharacterList() {\r\n-        return (List<String>) getObject(String.class, KEY_LIMITED_CHARACTER_LIST);\r\n-    }\r\n-\r\n-    public KeyboardProperties setLimitedCharacterList(List<String> limitedCharacterList) {\r\n-        setValue(KEY_LIMITED_CHARACTER_LIST, limitedCharacterList);\r\n-        return this;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the text that allows an app to prepopulate the text field with a suggested entry as the user types\r\n-     *\r\n-     * @return String representing the suggestions text\r\n-     */\r\n-    @Deprecated\r\n-    public String getAutoCompleteText() {\r\n-        return (String) getObject(String.class, KEY_AUTO_COMPLETE_TEXT);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the text that allows an app to prepopulate the text field with a suggested entry as the user types\r\n-     *\r\n-     * @param autoCompleteText String representing the suggestions text\r\n-     * @deprecated use {@link #setAutoCompleteList(List <String>)} instead\r\n-     */\r\n-    @Deprecated\r\n-    public KeyboardProperties setAutoCompleteText(String autoCompleteText) {\r\n-        setValue(KEY_AUTO_COMPLETE_TEXT, autoCompleteText);\r\n-        return this;\r\n-    }\r\n-\r\n-    /**\r\n-     * Gets the list that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types.\r\n-     *\r\n-     * @return List<String> representing the suggestions list\r\n-     */\r\n-    public List<String> getAutoCompleteList() {\r\n-        return (List<String>) getObject(String.class, KEY_AUTO_COMPLETE_LIST);\r\n-    }\r\n-\r\n-    /**\r\n-     * Sets the lists that allows an app to prepopulate the text field with a list of suggested or\r\n-     * completed entries as the user types. Set to an empty array to remove the auto-complete list from the screen\r\n-     *\r\n-     * @param autoCompleteList List<String> representing the suggestions list\r\n-     */\r\n-    public KeyboardProperties setAutoCompleteList(List<String> autoCompleteList) {\r\n-        setValue(KEY_AUTO_COMPLETE_LIST, autoCompleteList);\r\n-        return this;\r\n-    }\r\n-}\r\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzE2MjY2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n          \n          \n            \n                        properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n          \n          \n            \n                        properties.setAutoCompleteList(keyboardConfiguration.getAutoCompleteList());", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r573162665", "createdAt": "2021-02-09T19:16:25Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -461,6 +465,7 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55de319324344973dcfad3e767d152e98c2d0245"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNjg0NzYw", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-590684760", "createdAt": "2021-02-15T18:14:34Z", "commit": {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxODoxNDozNFrOIlqS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxODo0Nzo1NFrOIlrFBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MTIwMg==", "bodyText": "Can we rename this to onKeyboardDidUpdateInputMask to align with iOS?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576361202", "createdAt": "2021-02-15T18:14:34Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/KeyboardListener.java", "diffHunk": "@@ -84,4 +84,6 @@\n      * @param currentInputText - The user's full current input text\n      */\n     void onKeyboardDidSendEvent(KeyboardEvent event, String currentInputText);\n+\n+    void onKeyboardInputMaskHasChanged(KeyboardEvent event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2Mjc3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n          \n          \n            \n                                        if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n          \n          \n            \n                                                && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n          \n          \n            \n                                            keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n          \n          \n            \n                                        }\n          \n      \n    \n    \n  \n\nGetting the keyboardCapabilities and checking it here is not necessary here and can be removed. We should check the capability when setting the keyboard configuration instead (this will be described in another comment)", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576362772", "createdAt": "2021-02-15T18:18:26Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -541,6 +546,12 @@ public void onCapabilityRetrieved(Object capability) {\n                         int currentWindowID = windowCapability.getWindowID() != null ? windowCapability.getWindowID() : PredefinedWindows.DEFAULT_WINDOW.getValue();\n                         if (currentWindowID == PredefinedWindows.DEFAULT_WINDOW.getValue()) {\n                             defaultMainWindowCapability = windowCapability;\n+\n+                            KeyboardCapabilities keyboardCapabilities = windowCapability.getKeyboardCapabilities();\n+                            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM3NDAyMw==", "bodyText": "After checking the proposal, I think that this is missing Android and iOS changes # 4. Here's how I think that would work:\n\nThe manager needs to handle what happens if the keyboard properties that the developer is trying to use are not supported.\nIf the KeyboardProperties that the developer is attempting to use an unsupported KeyboardLayout, the operation will need to fail with an error log.\nIf the KeyboardProperties that the developer is attempting to use uses too many customKeys for the current layout, we will shorten the amount they send to be the maximum amount and print a warning log.\nIf the KeyboardProperties that the developer is attempting to use uses a customKeys array that is empty, we will remove the array to nil.\nIf the KeyboardProperties that the developer is attempting to use uses maskInputCharacters when that is not supported on the current layout, we will remove the property to nil.\nIf the KeyboardCapabilities are not available, use the existing behavior of sending whatever the developer set.\nNote that KeyboardProperties can be passed by developer in both setKeyboardConfiguration() && presentKeyboard() so we need to make sure that the properties are handled properly in both places.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576374023", "createdAt": "2021-02-15T18:47:54Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -461,6 +465,7 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n             properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n             properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n             properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n+            properties.setMaskInputCharacters(keyboardConfiguration.getMaskInputCharacters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40766fd31dc9805c423eb0184eab130e3a521f9c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/b8d87df1c8f1cb8c245b2d62d837ad26fd1f9478", "committedDate": "2021-02-15T19:46:22Z", "message": "[0238]\n- Fix PR formatting comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b110bc2fec8355d143227a54929c71750360ed", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e5b110bc2fec8355d143227a54929c71750360ed", "committedDate": "2021-02-15T20:47:14Z", "message": "[0238]\n- Implement new logic of ChoiseSetManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/6843d63e94aac1413aeb4d798b1d0561cf700652", "committedDate": "2021-02-15T21:26:23Z", "message": "[0238]\n- Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxMzY4NzY5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-591368769", "createdAt": "2021-02-16T15:57:05Z", "commit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxNTo1NzowNVrOImNRRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxOToyMzo1NVrOImWCgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNDIxMw==", "bodyText": "The indentation doesn't look correct here", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576934213", "createdAt": "2021-02-16T15:57:05Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNDI4Mw==", "bodyText": "The indentation doesn't look correct here", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576934283", "createdAt": "2021-02-16T15:57:11Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r\n+ * \t\t\t<td>List<String></td>\r\n+ * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjI1NQ==", "bodyText": "The order of the cells in the table doesn't match the header which is name, type, mandatory, additional, description.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576936255", "createdAt": "2021-02-16T15:59:30Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjkzNjY1Mg==", "bodyText": "Also here the order is not correct", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576936652", "createdAt": "2021-02-16T15:59:56Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,26 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *         @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Njk0NDYyNA==", "bodyText": "Please remove all unused imports", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r576944624", "createdAt": "2021-02-16T16:10:02Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -64,8 +67,10 @@\n import com.smartdevicelink.util.DebugTool;\n \n import java.lang.ref.WeakReference;\n+import java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA0OTg2NQ==", "bodyText": "Can we create that var at the beginning of the method and reuse it instead of keep getting that value in multiple places?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577049865", "createdAt": "2021-02-16T18:36:50Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MTUwNw==", "bodyText": "if KeyboardCapabilities is null, we shouldn't use the default capabilities, we should still use what the developer passes but assume that masking and custom keys are not supported.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577051507", "createdAt": "2021-02-16T18:39:15Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MjQ3OA==", "bodyText": "Also defaultMainWindowCapability may be null so we should check for that.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577052478", "createdAt": "2021-02-16T18:40:48Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1MTUwNw=="}, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA1NDIzNg==", "bodyText": "I don't think you mean to change the capability here. I think you meant to change the configuration instead.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577054236", "createdAt": "2021-02-16T18:43:40Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2NjExMw==", "bodyText": "That var doesn't seem to be set anywhere", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577066113", "createdAt": "2021-02-16T19:03:20Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2ODQ3NQ==", "bodyText": "We shouldn't modify the keyboardConfiguration that the developer passes. If masking is not supported just don't set it in the properties object instead.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577068475", "createdAt": "2021-02-16T19:07:18Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+\n+            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3Mjk1NQ==", "bodyText": "As stated previously,  If the KeyboardProperties that the developer sets is attempting to use an unsupported KeyboardLayout, the operation will need to fail with an error log.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577072955", "createdAt": "2021-02-16T19:15:17Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+\n+            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);\n+            }\n             KeyboardProperties properties = new KeyboardProperties();\n             properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3NDYyNw==", "bodyText": "Similar thing applies to keyboardConfiguration.setCustomKeys(customKeys);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577074627", "createdAt": "2021-02-16T19:18:08Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +458,74 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n-        if (keyboardConfiguration == null) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(KeyboardProperties keyboardConfiguration) {\n+        if (keyboardConfiguration == null || defaultMainWindowCapability.getKeyboardCapabilities() == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n+\n+            KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability.getKeyboardCapabilities();\n+            List<String> customKeys = keyboardConfiguration.getCustomKeys();\n+\n+            if (customKeys == null || customKeys.isEmpty()){\n+                keyboardConfiguration.setCustomKeys(null);\n+            }\n+\n+            boolean containsRightKeyboard = false;\n+            boolean containsValidAmountOfCustomKeys = false;\n+            for (KeyboardLayoutCapability keyboardLayoutCapability : keyboardCapabilities.getSupportedKeyboards()){\n+                if (keyboardLayoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())){\n+                    containsRightKeyboard = true;\n+\n+                    if (!keyboardCapabilities.getMaskInputCharactersSupported() && keyboardConfiguration.getMaskInputCharacters() != null){\n+                        keyboardCapabilities.setMaskInputCharactersSupported(null);\n+                        DebugTool.logWarning(TAG, \"mask input character is not supported, property is set to null\");\n+                    }\n+                    if (customKeys != null) {\n+                        int customKeysSize = customKeys.size();\n+                        if (keyboardLayoutCapability.getNumConfigurableKeys() > customKeysSize) {\n+                            int sizeDiff = keyboardConfiguration.getCustomKeys().size() - keyboardLayoutCapability.getNumConfigurableKeys();\n+\n+                            for (int i = 0; i < sizeDiff; i++){\n+                                customKeys.remove(customKeysSize - 1);\n+                            }\n+\n+                            keyboardConfiguration.setCustomKeys(customKeys);\n+                            DebugTool.logWarning(TAG, String.format(\"the maximum amount of custom keys supported is %d\", customKeysSize));\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (!containsRightKeyboard){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+            if (!containsValidAmountOfCustomKeys){\n+                DebugTool.logError(TAG, \"attempting to use unsupported keyboard layout\");\n+                return null;\n+            }\n+\n+\n+            if (keyboardCapabilities.getMaskInputCharactersSupported() != null\n+                    && !keyboardCapabilities.getMaskInputCharactersSupported()) {\n+                keyboardConfiguration.setMaskInputCharacters(KeyboardInputMask.DISABLE_INPUT_KEY_MASK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA2ODQ3NQ=="}, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3Nzg5MQ==", "bodyText": "if customKeyboardConfig != null, The customKeyboardConfig will be passed without checking them against the keyboard capability which is not correct.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577077891", "createdAt": "2021-02-16T19:23:55Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -394,10 +399,11 @@ public Integer presentKeyboard(@NonNull String initialText, @Nullable KeyboardPr\n         }\n \n         if (customKeyboardConfig == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6843d63e94aac1413aeb4d798b1d0561cf700652"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76101c4c6189da949e1fe578d30e7f460658465e", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/76101c4c6189da949e1fe578d30e7f460658465e", "committedDate": "2021-02-17T11:28:41Z", "message": "[0238]\n- Fix pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4629a6039002e0dab711b3eb75253458222fa31a", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4629a6039002e0dab711b3eb75253458222fa31a", "committedDate": "2021-02-17T12:07:53Z", "message": "[0238]\n- Fix javaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/5a09c446166891b27cb8a5f68cbfa71422435e3c", "committedDate": "2021-02-17T12:12:59Z", "message": "[0238]\n- Fix javaDoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyMzY5NDM0", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-592369434", "createdAt": "2021-02-17T16:13:34Z", "commit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxNjoxMzozNFrOIm-v1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QyMToxMToyOVrOInLDyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc0NDg1NQ==", "bodyText": "Now there are more cells than what exists in the table header. They need to match with the header as the following\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>maskInputCharacters</td>\n          \n          \n            \n             * \t\t\t<td>KeyboardInputMask</td>\n          \n          \n            \n             * \t\t    <td>false</td>\n          \n          \n            \n             * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n          \n          \n            \n             * \t\t\t<td>N</td>\n          \n          \n            \n             * \t\t\t<td></td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             *                 @since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>customKeys</td>\n          \n          \n            \n             * \t\t\t<td>List<String></td>\n          \n          \n            \n             * \t\t    <td>false</td>\n          \n          \n            \n             * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\n          \n          \n            \n             * \t\t\t<td>N</td>\n          \n          \n            \n             * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             *                 @since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>maskInputCharacters</td>\n          \n          \n            \n             * \t\t\t<td>KeyboardInputMask</td>\n          \n          \n            \n             * \t\t\t<td>false</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\t@since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\n          \n          \n            \n             * \t\t</tr>\n          \n          \n            \n             * \t\t<tr>\n          \n          \n            \n             * \t\t\t<td>customKeys</td>\n          \n          \n            \n             * \t\t\t<td>List<String></td>\n          \n          \n            \n             * \t\t\t<td>false</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\t@since SmartDeviceLink 7.1.0\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t\t<td>\n          \n          \n            \n             * \t\t\t\tArray of special characters to show in customizable keys. If omitted, keyboard will show default special characters \n          \n          \n            \n             * \t\t\t\t{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}\n          \n          \n            \n             * \t\t\t</td>\n          \n          \n            \n             * \t\t</tr>", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577744855", "createdAt": "2021-02-17T16:13:34Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java", "diffHunk": "@@ -101,6 +102,28 @@\n  *                 <td>Array = true maxlength = 1000 minsize = 0 maxsize = 100</td>\r\n  * \t\t\t<td>Allows an app to prepopulate the text field with a list of suggested or completed entry as the user types. Set to an empty array to remove the auto-complete list from the screen</td>\r\n  * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>maskInputCharacters</td>\r\n+ * \t\t\t<td>KeyboardInputMask</td>\r\n+ * \t\t    <td>false</td>\r\n+ * \t\t\t<td>Allows an app to mask entered characters on HMI</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td></td>\r\n+ * \t\t\t<td>\r\n+ *                 @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r\n+ * \t\t<tr>\r\n+ * \t\t\t<td>customKeys</td>\r\n+ * \t\t\t<td>List<String></td>\r\n+ * \t\t    <td>false</td>\r\n+ * \t\t\t<td>Array of special characters to show in customizable keys. If omitted, keyboard will showdefault special characters</td>\r\n+ * \t\t\t<td>N</td>\r\n+ * \t\t\t<td>{\"string_max_length\": 1, \"string_min_length\": 1, \"array_max_size\": 10, \"array_min_size\": 1}</td>\r\n+ * \t\t\t<td>\r\n+ *                 @since SmartDeviceLink 7.1.0\r\n+ * \t\t\t</td>\r\n+ * \t\t</tr>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MTE1NA==", "bodyText": "Please revert all changes to this method as they are not necessary with the new createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration that is suggested in another comment.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577941154", "createdAt": "2021-02-17T21:03:09Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -646,9 +698,31 @@ boolean setUpChoiceSet(ChoiceSet choiceSet) {\n     }\n \n     KeyboardProperties defaultKeyboardConfiguration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MjAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    processKeyboardConfiguration(keyboardConfiguration);\n          \n          \n            \n                 if (keyboardConfiguration == null) {\n          \n          \n            \n                        this.keyboardConfiguration = defaultKeyboardConfiguration();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n          \n          \n            \n                    }", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577942005", "createdAt": "2021-02-17T21:04:38Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +453,68 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        processKeyboardConfiguration(keyboardConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0MzMwNA==", "bodyText": "Can we replace processKeyboardConfiguration method with this method? The suggested method is much simpler and aligns with iOS implementation.\n// Takes a keyboard configuration (SDLKeyboardProperties) and creates a valid version of it, if possible, based on this object's internal keyboardCapabilities\nprivate KeyboardProperties createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n    KeyboardCapabilities keyboardCapabilities = defaultMainWindowCapability != null ? defaultMainWindowCapability.getKeyboardCapabilities() : null;\n\n    // If there are no keyboard capabilities, if there is no passed keyboard configuration, or if there is no layout to the passed keyboard configuration, just pass back the passed in configuration\n    if (keyboardCapabilities == null || keyboardConfiguration == null || keyboardConfiguration.getKeyboardLayout() == null) {\n        return keyboardConfiguration;\n    }\n\n    KeyboardLayoutCapability selectedLayoutCapability = null;\n    for (KeyboardLayoutCapability layoutCapability : keyboardCapabilities.getSupportedKeyboards()) {\n        if (layoutCapability.getKeyboardLayout().equals(keyboardConfiguration.getKeyboardLayout())) {\n            selectedLayoutCapability = layoutCapability;\n            break;\n        }\n    }\n\n    if (selectedLayoutCapability == null) {\n        DebugTool.logError(TAG, String.format(\"Configured keyboard layout is not supported: %s\", keyboardConfiguration.getKeyboardLayout()));\n        return null;\n    }\n\n    KeyboardProperties modifiedKeyboardConfiguration = (KeyboardProperties) keyboardConfiguration.clone();\n\n    if (keyboardConfiguration.getCustomKeys() == null || keyboardConfiguration.getCustomKeys().isEmpty()) {\n        modifiedKeyboardConfiguration.setCustomKeys(null);\n    } else {\n        // If there are more custom keys than are allowed for the selected keyboard layout, we need to trim the number of keys to only use the first n number of custom keys, where n is the number of allowed custom keys for that layout.\n        int numConfigurableKeys = selectedLayoutCapability.getNumConfigurableKeys();\n        if (keyboardConfiguration.getCustomKeys().size() > numConfigurableKeys) {\n            modifiedKeyboardConfiguration.setCustomKeys(keyboardConfiguration.getCustomKeys().subList(0, numConfigurableKeys));\n            DebugTool.logWarning(TAG, String.format(Locale.US, \"%d custom keys set, but the selected layout: %s only supports %d. Dropping the rest.\", keyboardConfiguration.getCustomKeys().size(), keyboardConfiguration.getKeyboardLayout(), numConfigurableKeys));\n        }\n    }\n\n    // If the keyboard does not support masking input characters, we will remove it from the keyboard configuration\n    if (!keyboardCapabilities.getMaskInputCharactersSupported()) {\n        modifiedKeyboardConfiguration.setMaskInputCharacters(null);\n    }\n\n    return modifiedKeyboardConfiguration;\n}", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577943304", "createdAt": "2021-02-17T21:06:59Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,17 +453,68 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n+        processKeyboardConfiguration(keyboardConfiguration);\n+    }\n+\n+    private KeyboardProperties processKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk0NjU2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n          \n          \n            \n                    if (keyboardProperties != null) {\n          \n          \n            \n                        customKeyboardConfig = this.keyboardConfiguration;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return null;\n          \n          \n            \n                    }\n          \n          \n            \n            customKeyboardConfig = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(customKeyboardConfig);\n          \n          \n            \n                    if (customKeyboardConfig == null) {\n          \n          \n            \n                        if (this.keyboardConfiguration != null) {\n          \n          \n            \n                            customKeyboardConfig = this.keyboardConfiguration;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            customKeyboardConfig = defaultKeyboardConfiguration();\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r577946568", "createdAt": "2021-02-17T21:11:29Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -393,12 +395,11 @@ public Integer presentKeyboard(@NonNull String initialText, @Nullable KeyboardPr\n             DebugTool.logWarning(TAG, \"There is a current or pending choice set, cancelling and continuing.\");\n         }\n \n-        if (customKeyboardConfig == null) {\n-            if (this.keyboardConfiguration != null) {\n-                customKeyboardConfig = this.keyboardConfiguration;\n-            } else {\n-                customKeyboardConfig = defaultKeyboardConfiguration();\n-            }\n+        KeyboardProperties keyboardProperties = processKeyboardConfiguration(customKeyboardConfig);\n+        if (keyboardProperties != null) {\n+            customKeyboardConfig = this.keyboardConfiguration;\n+        } else {\n+            return null;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a09c446166891b27cb8a5f68cbfa71422435e3c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30fdae8152d1e964bba67dd8b3653eb3d3249356", "author": {"user": {"login": "kboskin", "name": "Kostiantyn Boskin"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/30fdae8152d1e964bba67dd8b3653eb3d3249356", "committedDate": "2021-02-18T10:04:44Z", "message": "Update base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java\n\nCo-authored-by: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65ffa59c0de5b4739f909aacab899f12a9f87288", "author": {"user": {"login": "kboskin", "name": "Kostiantyn Boskin"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/65ffa59c0de5b4739f909aacab899f12a9f87288", "committedDate": "2021-02-18T10:05:13Z", "message": "Update base/src/main/java/com/smartdevicelink/proxy/rpc/KeyboardProperties.java\n\nCo-authored-by: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e14f52a7eca4570ff558745e4794ad8528fa89", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/43e14f52a7eca4570ff558745e4794ad8528fa89", "committedDate": "2021-02-18T10:13:39Z", "message": "[0238]\n- PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c28a1d4d25e9c88a4634f8bc3daa3e83a45a36", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/68c28a1d4d25e9c88a4634f8bc3daa3e83a45a36", "committedDate": "2021-02-18T10:14:54Z", "message": "Merge remote-tracking branch 'origin/feature/0298_keyboard_enchancements' into feature/0298_keyboard_enchancements\n\n# Conflicts:\n#\tbase/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4361c313a2e01ab506ba1945006071073b606a42", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4361c313a2e01ab506ba1945006071073b606a42", "committedDate": "2021-02-18T10:52:36Z", "message": "[0238]\n- Fix PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47", "committedDate": "2021-02-18T11:00:09Z", "message": "[0238]\n- Fix PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMDk4Nzg5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-593098789", "createdAt": "2021-02-18T11:09:42Z", "commit": {"oid": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxMTowOTo0MlrOInia9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxMToxNzo1N1rOInivBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMyOTMzNA==", "bodyText": "@kostyaBoss this move is not required", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578329334", "createdAt": "2021-02-18T11:09:42Z", "author": {"login": "vladmu"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -110,6 +113,7 @@\n         // capabilities\n         currentSystemContext = SystemContext.SYSCTXT_MAIN;\n         currentHMILevel = HMILevel.HMI_NONE;\n+        keyboardConfiguration = defaultKeyboardConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODMzNDQ3MA==", "bodyText": "Because createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration could return null we need to avoid setting null to this.keyboardConfiguration please consider my suggestion below:\n        KeyboardProperties properties = null;\n        if (keyboardConfiguration == null) {\n            properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n        }\n        if (properties == null) {\n            this.keyboardConfiguration = defaultKeyboardConfiguration();\n        } else {\n            this.keyboardConfiguration = properties;\n        }", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578334470", "createdAt": "2021-02-18T11:17:57Z", "author": {"login": "vladmu"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -455,16 +459,52 @@ public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfig\n         if (keyboardConfiguration == null) {\n             this.keyboardConfiguration = defaultKeyboardConfiguration();\n         } else {\n-            KeyboardProperties properties = new KeyboardProperties();\n-            properties.setLanguage((keyboardConfiguration.getLanguage() == null ? Language.EN_US : keyboardConfiguration.getLanguage()));\n-            properties.setKeyboardLayout((keyboardConfiguration.getKeyboardLayout() == null ? KeyboardLayout.QWERTZ : keyboardConfiguration.getKeyboardLayout()));\n-            properties.setKeypressMode((keyboardConfiguration.getKeypressMode() == null ? KeypressMode.RESEND_CURRENT_ENTRY : keyboardConfiguration.getKeypressMode()));\n-            properties.setLimitedCharacterList(keyboardConfiguration.getLimitedCharacterList());\n-            properties.setAutoCompleteText(keyboardConfiguration.getAutoCompleteText());\n-            this.keyboardConfiguration = properties;\n+            this.keyboardConfiguration = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f1d036b799c2232fd0c5bed72fdb4a0ecd2a47"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1daa2aed786ab0970eeb41cddf3ea97070c68a2c", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1daa2aed786ab0970eeb41cddf3ea97070c68a2c", "committedDate": "2021-02-18T12:55:16Z", "message": "[0238]\n- Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb", "committedDate": "2021-02-18T15:36:08Z", "message": "[0238]\n- Fix Vlad suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMzY3NjAz", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-593367603", "createdAt": "2021-02-18T15:53:02Z", "commit": {"oid": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxNTo1MzowM1rOInu2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQxNTo1MzowM1rOInu2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODUzMjk5Ng==", "bodyText": "@kostyaBoss  We should call createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration whether keyboardConfiguration is null or not. Please consider this implemtation for the method\npublic void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {\n    KeyboardProperties properties = createValidKeyboardConfigurationBasedOnKeyboardCapabilitiesFromConfiguration(keyboardConfiguration);\n    if (properties == null) {\n        this.keyboardConfiguration = defaultKeyboardConfiguration();\n    } else {\n        this.keyboardConfiguration = properties;\n    }\n}", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#discussion_r578532996", "createdAt": "2021-02-18T15:53:03Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/choiceset/BaseChoiceSetManager.java", "diffHunk": "@@ -452,19 +456,59 @@ public void dismissKeyboard(@NonNull Integer cancelID) {\n      * @param keyboardConfiguration - the custom keyboard configuration to be used when the keyboard is displayed\n      */\n     public void setKeyboardConfiguration(@Nullable KeyboardProperties keyboardConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1bc4a690ebe7363abd13f56c4ee47f67b0e8bb"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce0c7441449fd2ede8cf7b767c42a307a500c02b", "author": {"user": null}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ce0c7441449fd2ede8cf7b767c42a307a500c02b", "committedDate": "2021-02-18T16:38:39Z", "message": "[0238]\n- Fix PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4NjI3MDg5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1587#pullrequestreview-598627089", "createdAt": "2021-02-25T14:32:58Z", "commit": {"oid": "ce0c7441449fd2ede8cf7b767c42a307a500c02b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2041, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}