{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MzE4NjQ3", "number": 1505, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0ODo1N1rOElC1ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowMDoxNlrOElENiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjc5MjI3OnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0ODo1N1rOHUUq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0ODo1N1rOHUUq8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA3MjI0Mg==", "bodyText": "Looks like this line can be removed there were two semicolons and it just split them to different lines", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1505#discussion_r491072242", "createdAt": "2020-09-18T16:48:57Z", "author": {"login": "RHenigan"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lifecycle/SystemCapabilityManagerTests.java", "diffHunk": "@@ -85,965 +85,980 @@\n \n @RunWith(AndroidJUnit4.class)\n public class SystemCapabilityManagerTests {\n-\tpublic static final String TAG = \"SystemCapabilityManagerTests\";\n-\tpublic static SystemCapabilityManager systemCapabilityManager;\n-\tprivate SystemCapability systemCapability;\n-\tprivate VideoStreamingCapability videoStreamingCapability;\n-\n-\t@Before\n-\tpublic void setUp() throws Exception{\n-\n-\t\tsystemCapability = new SystemCapability(SystemCapabilityType.VIDEO_STREAMING);\n-\t\tvideoStreamingCapability = new VideoStreamingCapability();\n-\t\tvideoStreamingCapability.setMaxBitrate(TestValues.GENERAL_INT);\n-\t\tvideoStreamingCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n-\t\tvideoStreamingCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n-\t\tsystemCapability.setCapabilityForType(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n-\t}\n-\n-\tpublic SystemCapabilityManager createSampleManager(){\n-\t\treturn createSampleManager(new InternalSDLInterface());\n-\t}\n-\n-\tpublic SystemCapabilityManager createSampleManager(InternalSDLInterface iSdl){\n-\t\tSystemCapabilityManager systemCapabilityManager = new SystemCapabilityManager(iSdl);\n-\n-\t\tRegisterAppInterfaceResponse raiResponse = new RegisterAppInterfaceResponse();\n-\n-\t\traiResponse.setHmiCapabilities(TestValues.GENERAL_HMICAPABILITIES);\n-\t\traiResponse.setDisplayCapabilities(TestValues.GENERAL_DISPLAYCAPABILITIES);\n-\t\traiResponse.setAudioPassThruCapabilities(TestValues.GENERAL_AUDIOPASSTHRUCAPABILITIES_LIST);\n-\t\traiResponse.setButtonCapabilities(TestValues.GENERAL_BUTTONCAPABILITIES_LIST);\n-\t\traiResponse.setHmiZoneCapabilities(TestValues.GENERAL_HMIZONECAPABILITIES_LIST);\n-\t\traiResponse.setPresetBankCapabilities(TestValues.GENERAL_PRESETBANKCAPABILITIES);\n-\t\traiResponse.setSoftButtonCapabilities(TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n-\t\traiResponse.setSpeechCapabilities(TestValues.GENERAL_SPEECHCAPABILITIES_LIST);\n-\t\traiResponse.setPrerecordedSpeech(TestValues.GENERAL_PRERECORDEDSPEECH_LIST);\n-\t\traiResponse.setSuccess(true);\n-\n-\t\tsystemCapabilityManager.parseRAIResponse(raiResponse);\n-\t\treturn systemCapabilityManager;\n-\t}\n-\n-\tprivate List<DisplayCapability> createDisplayCapabilityList(DisplayCapabilities display, List<ButtonCapabilities> button, List<SoftButtonCapabilities> softButton) {\n-\t\tWindowTypeCapabilities windowTypeCapabilities = new WindowTypeCapabilities(WindowType.MAIN, 1);\n-\n-\t\tDisplayCapability displayCapability = new DisplayCapability();\n-\t\tdisplayCapability.setDisplayName(display != null ? display.getDisplayName() : null);\n-\t\tdisplayCapability.setWindowTypeSupported(Collections.singletonList(windowTypeCapabilities));\n-\n-\t\tWindowCapability defaultWindowCapability = new WindowCapability();\n-\t\tdefaultWindowCapability.setWindowID(PredefinedWindows.DEFAULT_WINDOW.getValue());\n-\t\tdefaultWindowCapability.setButtonCapabilities(button);\n-\t\tdefaultWindowCapability.setSoftButtonCapabilities(softButton);\n-\n-\t\tif (display == null) {\n-\t\t\tdefaultWindowCapability.setTextFields(ManagerUtility.WindowCapabilityUtility.getAllTextFields());\n-\t\t\tdefaultWindowCapability.setImageFields(ManagerUtility.WindowCapabilityUtility.getAllImageFields());\n-\t\t\tdisplayCapability.setWindowCapabilities(Collections.singletonList(defaultWindowCapability));\n-\t\t\treturn Collections.singletonList(displayCapability);\n-\t\t}\n-\n-\t\tdefaultWindowCapability.setTemplatesAvailable(display.getTemplatesAvailable());\n-\t\tdefaultWindowCapability.setNumCustomPresetsAvailable(display.getNumCustomPresetsAvailable());\n-\t\tdefaultWindowCapability.setTextFields(display.getTextFields());\n-\t\tdefaultWindowCapability.setImageFields(display.getImageFields());\n-\t\tArrayList<ImageType> imageTypeSupported = new ArrayList<>();\n-\t\timageTypeSupported.add(ImageType.STATIC);\n-\t\tif (display.getGraphicSupported()) {\n-\t\t\timageTypeSupported.add(ImageType.DYNAMIC);\n-\t\t}\n-\t\tdefaultWindowCapability.setImageTypeSupported(imageTypeSupported);\n-\n-\t\tdisplayCapability.setWindowCapabilities(Collections.singletonList(defaultWindowCapability));\n-\t\treturn Collections.singletonList(displayCapability);\n-\t}\n-\n-\tprivate DisplayCapabilities createDisplayCapabilities(String displayName, WindowCapability defaultMainWindow) {\n-\t\tDisplayCapabilities convertedCapabilities = new DisplayCapabilities();\n-\t\tconvertedCapabilities.setDisplayType(DisplayType.SDL_GENERIC); //deprecated but it is mandatory...\n-\t\tconvertedCapabilities.setDisplayName(displayName);\n-\t\tconvertedCapabilities.setTextFields(defaultMainWindow.getTextFields());\n-\t\tconvertedCapabilities.setImageFields(defaultMainWindow.getImageFields());\n-\t\tconvertedCapabilities.setTemplatesAvailable(defaultMainWindow.getTemplatesAvailable());\n-\t\tconvertedCapabilities.setNumCustomPresetsAvailable(defaultMainWindow.getNumCustomPresetsAvailable());\n-\t\tconvertedCapabilities.setMediaClockFormats(new ArrayList<MediaClockFormat>()); // mandatory field but can be empty\n-\t\tconvertedCapabilities.setGraphicSupported(defaultMainWindow.getImageTypeSupported().contains(ImageType.DYNAMIC));\n-\n-\t\treturn convertedCapabilities;\n-\t}\n-\n-\t@Test\n-\tpublic void testParseRAI() {\n-\t\tsystemCapabilityManager = createSampleManager();\n-\n-\t\tList<DisplayCapability> displayCapabilityList = createDisplayCapabilityList(TestValues.GENERAL_DISPLAYCAPABILITIES, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateDisplayCapabilityList(displayCapabilityList, (List<DisplayCapability>) systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAYS, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateHMICapabilities(TestValues.GENERAL_HMICAPABILITIES, (HMICapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.HMI, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateDisplayCapabilities(TestValues.GENERAL_DISPLAYCAPABILITIES, (DisplayCapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateAudioPassThruCapabilities(TestValues.GENERAL_AUDIOPASSTHRUCAPABILITIES_LIST, (List<AudioPassThruCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.AUDIO_PASSTHROUGH, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateButtonCapabilities(TestValues.GENERAL_BUTTONCAPABILITIES_LIST, (List<ButtonCapabilities> )systemCapabilityManager.getCapability(SystemCapabilityType.BUTTON, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateHMIZoneCapabilities(TestValues.GENERAL_HMIZONECAPABILITIES_LIST, (List<HmiZoneCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.HMI_ZONE, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validatePresetBankCapabilities(TestValues.GENERAL_PRESETBANKCAPABILITIES, (PresetBankCapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.PRESET_BANK, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateSoftButtonCapabilities(TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST, (List<SoftButtonCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.SOFTBUTTON, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validateSpeechCapabilities(TestValues.GENERAL_SPEECHCAPABILITIES_LIST, (List<SpeechCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.SPEECH, null, false)));\n-\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\tValidator.validatePreRecordedSpeechCapabilities(TestValues.GENERAL_PRERECORDEDSPEECH_LIST, (List<PrerecordedSpeech>) systemCapabilityManager.getCapability(SystemCapabilityType.PRERECORDED_SPEECH, null, false)));\n-\n-\t}\n-\n-\t@Test\n-\tpublic void testNullDisplayCapabilitiesEnablesAllTextAndImageFields() {\n-\t\tList<DisplayCapability> displayCapabilityList = createDisplayCapabilityList(null, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n-\t\tassertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getTextFields().size(), 32);\n-\t\tassertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getImageFields().size(), 16);\n-\t}\n-\n-\t@Test\n-\tpublic void testGetVSCapability(){\n-\t\tVideoStreamingCapability vsCapability = new VideoStreamingCapability();\n-\t\tvsCapability.setMaxBitrate(TestValues.GENERAL_INT);\n-\t\tvsCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n-\t\tvsCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n-\n-\t\tSystemCapability cap = new SystemCapability();\n-\t\tcap.setSystemCapabilityType(SystemCapabilityType.VIDEO_STREAMING);\n-\t\tcap.setCapabilityForType(SystemCapabilityType.VIDEO_STREAMING, vsCapability);\n-\n-\t\tfinal SystemCapability referenceCapability = cap;\n-\n-\t\tsystemCapabilityManager = new SystemCapabilityManager(new InternalSDLInterface() {\n-\t\t\t@Override\n-\t\t\tpublic void sendRPC(RPCMessage message) {\n-\t\t\t\tGetSystemCapabilityResponse response = new GetSystemCapabilityResponse();\n-\t\t\t\tresponse.setSystemCapability(referenceCapability);\n-\t\t\t\tresponse.setSuccess(true);\n-\t\t\t\tif (message instanceof RPCRequest) {\n-\t\t\t\t\tRPCRequest request = (RPCRequest) message;\n-\t\t\t\t\trequest.getOnRPCResponseListener().onResponse(CorrelationIdGenerator.generateId(), response);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void addOnRPCListener(FunctionID messageId, OnRPCListener listener) {\n-\t\t\t\tlistener.onReceived(new OnHMIStatus(HMILevel.HMI_FULL, AudioStreamingState.NOT_AUDIBLE, SystemContext.SYSCTXT_MAIN));\n-\t\t\t}\n-\t\t});\n-\n-\t\tsystemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING, new OnSystemCapabilityListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onCapabilityRetrieved(Object capability) {\n-\t\t\t\tassertTrue(TestValues.TRUE,\n-\t\t\t\t\t\tValidator.validateVideoStreamingCapability(\n-\t\t\t\t\t\t\t\t(VideoStreamingCapability) referenceCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING),\n-\t\t\t\t\t\t\t\t(VideoStreamingCapability) capability));\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onError(String info) {\n-\t\t\t\tassertTrue(false);\n-\t\t\t}\n-\t\t}, false);\n-\t}\n-\n-\tprivate Answer<Void> createOnHMIStatusAnswer(final HMILevel hmiLevel){\n-\t\tAnswer<Void> onHMIStatusAnswer = new Answer<Void>() {\n-\t\t\t@Override\n-\t\t\tpublic Void answer(InvocationOnMock invocation) {\n-\t\t\t\tObject[] args = invocation.getArguments();\n-\t\t\t\tOnRPCListener onHMIStatusListener = (OnRPCListener) args[1];\n-\t\t\t\tOnHMIStatus onHMIStatusFakeNotification = new OnHMIStatus();\n-\t\t\t\tonHMIStatusFakeNotification.setHmiLevel(hmiLevel);\n-\t\t\t\tonHMIStatusListener.onReceived(onHMIStatusFakeNotification);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t};\n-\t\treturn onHMIStatusAnswer;\n-\t}\n-\n-\tprivate Answer<Void> createOnSendGetSystemCapabilityAnswer (final boolean success, final Boolean subscribe) {\n-\t\tAnswer<Void> onSendGetSystemCapabilityAnswer = new Answer<Void>() {\n-\t\t\t@Override\n-\t\t\tpublic Void answer(InvocationOnMock invocation) {\n-\t\t\t\tObject[] args = invocation.getArguments();\n-\t\t\t\tGetSystemCapability getSystemCapability = (GetSystemCapability) args[0];\n-\t\t\t\tif (subscribe != null) {\n-\t\t\t\t\tassertEquals(subscribe, getSystemCapability.getSubscribe());\n-\t\t\t\t}\n-\t\t\t\tGetSystemCapabilityResponse response;\n-\t\t\t\tif (success) {\n-\t\t\t\t\tresponse = new GetSystemCapabilityResponse(Result.SUCCESS, true);\n-\t\t\t\t} else {\n-\t\t\t\t\tresponse = new GetSystemCapabilityResponse(Result.REJECTED, false);\n-\t\t\t\t}\n-\t\t\t\tresponse.setSystemCapability(systemCapability);\n-\t\t\t\tgetSystemCapability.getOnRPCResponseListener().onResponse(CorrelationIdGenerator.generateId(), response);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t};\n-\t\treturn onSendGetSystemCapabilityAnswer;\n-\t}\n-\n-\t@Test\n-\tpublic void testGetCapability() {\n-\t\tISdl internalInterface;\n-\t\tSystemCapabilityManager scm;\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener;\n-\t\tVideoStreamingCapability retrievedCapability;\n-\n-\n-\t\t// Test case 1 (capability not cached, listener not null, forceUpdate false)\n-\t\tinternalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tscm = new SystemCapabilityManager(internalInterface);\n-\t\tonSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n-\t\tretrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n-\t\tassertNull(retrievedCapability);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Test case 2 (capability cached, listener not null, forceUpdate true)\n-\t\tinternalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tscm = new SystemCapabilityManager(internalInterface);\n-\t\tonSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n-\t\tretrievedCapability =  (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, true);\n-\t\tassertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Test case 3 (capability cached, listener null, forceUpdate true)\n-\t\tinternalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tscm = new SystemCapabilityManager(internalInterface);\n-\t\tonSystemCapabilityListener = null;\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n-\t\tretrievedCapability =  (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, true);\n-\t\tassertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\n-\n-\t\t// Test case 4 (capability cached, listener null, forceUpdate false)\n-\t\tinternalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tscm = new SystemCapabilityManager(internalInterface);\n-\t\tonSystemCapabilityListener = null;\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n-\t\tretrievedCapability =  (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n-\t\tassertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t}\n-\n-\t@Test\n-\tpublic void testGetCapabilityHmiNone() {\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_NONE)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n-\t\tVideoStreamingCapability retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n-\t\tassertNull(retrievedCapability);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener, times(0)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener, times(1)).onError(any(String.class));\n-\t}\n-\n-\t@Test\n-\tpublic void testAddOnSystemCapabilityListenerWithSubscriptionsSupportedAndCapabilityCached() {\n-\t\tSdlMsgVersion sdlMsgVersion = new SdlMsgVersion(6, 0); // This version supports capability subscriptions\n-\t\tsdlMsgVersion.setPatchVersion(0);\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\twhen(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n-\n-\n-\t\t// Add listener1\n-\t\t// When the first listener is added, GetSystemCapability request should go out with subscribe=true\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Add listener2\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\t\tverify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Add listener3\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Remove listener1\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\n-\n-\t\t// Remove listener2\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\n-\n-\t\t// Remove listener3\n-\t\t// When the last listener is removed, GetSystemCapability request should go out with subscribe=false\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n-\t}\n-\n-\t@Test\n-\tpublic void testAddOnSystemCapabilityListenerWithSubscriptionsSupportedAndCapabilityNotCached() {\n-\t\tSdlMsgVersion sdlMsgVersion = new SdlMsgVersion(6, 0); // This version supports capability subscriptions\n-\t\tsdlMsgVersion.setPatchVersion(0);\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\twhen(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n-\n-\n-\t\t// Add listener1\n-\t\t// When the first listener is added, GetSystemCapability request should go out with subscribe=true\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Add listener2\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\t\tverify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n-\n-\t\t// Add listener3\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n+    public static final String TAG = \"SystemCapabilityManagerTests\";\n+    public static SystemCapabilityManager systemCapabilityManager;\n+    private SystemCapability systemCapability;\n+    private VideoStreamingCapability videoStreamingCapability;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        systemCapability = new SystemCapability(SystemCapabilityType.VIDEO_STREAMING);\n+        videoStreamingCapability = new VideoStreamingCapability();\n+        videoStreamingCapability.setMaxBitrate(TestValues.GENERAL_INT);\n+        videoStreamingCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n+        videoStreamingCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n+        systemCapability.setCapabilityForType(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+    }\n+\n+    public SystemCapabilityManager createSampleManager() {\n+        return createSampleManager(new InternalSDLInterface());\n+    }\n+\n+    public SystemCapabilityManager createSampleManager(InternalSDLInterface iSdl) {\n+        SystemCapabilityManager systemCapabilityManager = new SystemCapabilityManager(iSdl);\n+\n+        RegisterAppInterfaceResponse raiResponse = new RegisterAppInterfaceResponse();\n+\n+        raiResponse.setHmiCapabilities(TestValues.GENERAL_HMICAPABILITIES);\n+        raiResponse.setDisplayCapabilities(TestValues.GENERAL_DISPLAYCAPABILITIES);\n+        raiResponse.setAudioPassThruCapabilities(TestValues.GENERAL_AUDIOPASSTHRUCAPABILITIES_LIST);\n+        raiResponse.setButtonCapabilities(TestValues.GENERAL_BUTTONCAPABILITIES_LIST);\n+        raiResponse.setHmiZoneCapabilities(TestValues.GENERAL_HMIZONECAPABILITIES_LIST);\n+        raiResponse.setPresetBankCapabilities(TestValues.GENERAL_PRESETBANKCAPABILITIES);\n+        raiResponse.setSoftButtonCapabilities(TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n+        raiResponse.setSpeechCapabilities(TestValues.GENERAL_SPEECHCAPABILITIES_LIST);\n+        raiResponse.setPrerecordedSpeech(TestValues.GENERAL_PRERECORDEDSPEECH_LIST);\n+        raiResponse.setSuccess(true);\n+\n+        systemCapabilityManager.parseRAIResponse(raiResponse);\n+        return systemCapabilityManager;\n+    }\n+\n+    private List<DisplayCapability> createDisplayCapabilityList(DisplayCapabilities display, List<ButtonCapabilities> button, List<SoftButtonCapabilities> softButton) {\n+        WindowTypeCapabilities windowTypeCapabilities = new WindowTypeCapabilities(WindowType.MAIN, 1);\n+\n+        DisplayCapability displayCapability = new DisplayCapability();\n+        displayCapability.setDisplayName(display != null ? display.getDisplayName() : null);\n+        displayCapability.setWindowTypeSupported(Collections.singletonList(windowTypeCapabilities));\n+\n+        WindowCapability defaultWindowCapability = new WindowCapability();\n+        defaultWindowCapability.setWindowID(PredefinedWindows.DEFAULT_WINDOW.getValue());\n+        defaultWindowCapability.setButtonCapabilities(button);\n+        defaultWindowCapability.setSoftButtonCapabilities(softButton);\n+\n+        if (display == null) {\n+            defaultWindowCapability.setTextFields(ManagerUtility.WindowCapabilityUtility.getAllTextFields());\n+            defaultWindowCapability.setImageFields(ManagerUtility.WindowCapabilityUtility.getAllImageFields());\n+            displayCapability.setWindowCapabilities(Collections.singletonList(defaultWindowCapability));\n+            return Collections.singletonList(displayCapability);\n+        }\n+\n+        defaultWindowCapability.setTemplatesAvailable(display.getTemplatesAvailable());\n+        defaultWindowCapability.setNumCustomPresetsAvailable(display.getNumCustomPresetsAvailable());\n+        defaultWindowCapability.setTextFields(display.getTextFields());\n+        defaultWindowCapability.setImageFields(display.getImageFields());\n+        ArrayList<ImageType> imageTypeSupported = new ArrayList<>();\n+        imageTypeSupported.add(ImageType.STATIC);\n+        if (display.getGraphicSupported()) {\n+            imageTypeSupported.add(ImageType.DYNAMIC);\n+        }\n+        defaultWindowCapability.setImageTypeSupported(imageTypeSupported);\n+\n+        displayCapability.setWindowCapabilities(Collections.singletonList(defaultWindowCapability));\n+        return Collections.singletonList(displayCapability);\n+    }\n+\n+    private DisplayCapabilities createDisplayCapabilities(String displayName, WindowCapability defaultMainWindow) {\n+        DisplayCapabilities convertedCapabilities = new DisplayCapabilities();\n+        convertedCapabilities.setDisplayType(DisplayType.SDL_GENERIC); //deprecated but it is mandatory...\n+        convertedCapabilities.setDisplayName(displayName);\n+        convertedCapabilities.setTextFields(defaultMainWindow.getTextFields());\n+        convertedCapabilities.setImageFields(defaultMainWindow.getImageFields());\n+        convertedCapabilities.setTemplatesAvailable(defaultMainWindow.getTemplatesAvailable());\n+        convertedCapabilities.setNumCustomPresetsAvailable(defaultMainWindow.getNumCustomPresetsAvailable());\n+        convertedCapabilities.setMediaClockFormats(new ArrayList<MediaClockFormat>()); // mandatory field but can be empty\n+        convertedCapabilities.setGraphicSupported(defaultMainWindow.getImageTypeSupported().contains(ImageType.DYNAMIC));\n+\n+        return convertedCapabilities;\n+    }\n+\n+    @Test\n+    public void testParseRAI() {\n+        systemCapabilityManager = createSampleManager();\n+\n+        List<DisplayCapability> displayCapabilityList = createDisplayCapabilityList(TestValues.GENERAL_DISPLAYCAPABILITIES, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateDisplayCapabilityList(displayCapabilityList, (List<DisplayCapability>) systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAYS, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateHMICapabilities(TestValues.GENERAL_HMICAPABILITIES, (HMICapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.HMI, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateDisplayCapabilities(TestValues.GENERAL_DISPLAYCAPABILITIES, (DisplayCapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateAudioPassThruCapabilities(TestValues.GENERAL_AUDIOPASSTHRUCAPABILITIES_LIST, (List<AudioPassThruCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.AUDIO_PASSTHROUGH, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateButtonCapabilities(TestValues.GENERAL_BUTTONCAPABILITIES_LIST, (List<ButtonCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.BUTTON, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateHMIZoneCapabilities(TestValues.GENERAL_HMIZONECAPABILITIES_LIST, (List<HmiZoneCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.HMI_ZONE, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validatePresetBankCapabilities(TestValues.GENERAL_PRESETBANKCAPABILITIES, (PresetBankCapabilities) systemCapabilityManager.getCapability(SystemCapabilityType.PRESET_BANK, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateSoftButtonCapabilities(TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST, (List<SoftButtonCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.SOFTBUTTON, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validateSpeechCapabilities(TestValues.GENERAL_SPEECHCAPABILITIES_LIST, (List<SpeechCapabilities>) systemCapabilityManager.getCapability(SystemCapabilityType.SPEECH, null, false)));\n+        assertTrue(TestValues.TRUE,\n+                Validator.validatePreRecordedSpeechCapabilities(TestValues.GENERAL_PRERECORDEDSPEECH_LIST, (List<PrerecordedSpeech>) systemCapabilityManager.getCapability(SystemCapabilityType.PRERECORDED_SPEECH, null, false)));\n+\n+    }\n+\n+    @Test\n+    public void testNullDisplayCapabilitiesEnablesAllTextAndImageFields() {\n+        List<DisplayCapability> displayCapabilityList = createDisplayCapabilityList(null, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n+        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getTextFields().size(), 32);\n+        assertEquals(displayCapabilityList.get(0).getWindowCapabilities().get(0).getImageFields().size(), 16);\n+    }\n+\n+    @Test\n+    public void testGetVSCapability() {\n+        VideoStreamingCapability vsCapability = new VideoStreamingCapability();\n+        vsCapability.setMaxBitrate(TestValues.GENERAL_INT);\n+        vsCapability.setPreferredResolution(TestValues.GENERAL_IMAGERESOLUTION);\n+        vsCapability.setSupportedFormats(TestValues.GENERAL_VIDEOSTREAMINGFORMAT_LIST);\n+\n+        SystemCapability cap = new SystemCapability();\n+        cap.setSystemCapabilityType(SystemCapabilityType.VIDEO_STREAMING);\n+        cap.setCapabilityForType(SystemCapabilityType.VIDEO_STREAMING, vsCapability);\n+\n+        final SystemCapability referenceCapability = cap;\n+\n+        systemCapabilityManager = new SystemCapabilityManager(new InternalSDLInterface() {\n+            @Override\n+            public void sendRPC(RPCMessage message) {\n+                GetSystemCapabilityResponse response = new GetSystemCapabilityResponse();\n+                response.setSystemCapability(referenceCapability);\n+                response.setSuccess(true);\n+                if (message instanceof RPCRequest) {\n+                    RPCRequest request = (RPCRequest) message;\n+                    request.getOnRPCResponseListener().onResponse(CorrelationIdGenerator.generateId(), response);\n+                }\n+            }\n+\n+            @Override\n+            public void addOnRPCListener(FunctionID messageId, OnRPCListener listener) {\n+                listener.onReceived(new OnHMIStatus(HMILevel.HMI_FULL, AudioStreamingState.NOT_AUDIBLE, SystemContext.SYSCTXT_MAIN));\n+            }\n+        });\n+\n+        systemCapabilityManager.getCapability(SystemCapabilityType.VIDEO_STREAMING, new OnSystemCapabilityListener() {\n+            @Override\n+            public void onCapabilityRetrieved(Object capability) {\n+                assertTrue(TestValues.TRUE,\n+                        Validator.validateVideoStreamingCapability(\n+                                (VideoStreamingCapability) referenceCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING),\n+                                (VideoStreamingCapability) capability));\n+            }\n+\n+            @Override\n+            public void onError(String info) {\n+                assertTrue(false);\n+            }\n+        }, false);\n+    }\n+\n+    private Answer<Void> createOnHMIStatusAnswer(final HMILevel hmiLevel) {\n+        Answer<Void> onHMIStatusAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                OnRPCListener onHMIStatusListener = (OnRPCListener) args[1];\n+                OnHMIStatus onHMIStatusFakeNotification = new OnHMIStatus();\n+                onHMIStatusFakeNotification.setHmiLevel(hmiLevel);\n+                onHMIStatusListener.onReceived(onHMIStatusFakeNotification);\n+                return null;\n+            }\n+        };\n+        return onHMIStatusAnswer;\n+    }\n+\n+    private Answer<Void> createOnSendGetSystemCapabilityAnswer(final boolean success, final Boolean subscribe) {\n+        Answer<Void> onSendGetSystemCapabilityAnswer = new Answer<Void>() {\n+            @Override\n+            public Void answer(InvocationOnMock invocation) {\n+                Object[] args = invocation.getArguments();\n+                GetSystemCapability getSystemCapability = (GetSystemCapability) args[0];\n+                if (subscribe != null) {\n+                    assertEquals(subscribe, getSystemCapability.getSubscribe());\n+                }\n+                GetSystemCapabilityResponse response;\n+                if (success) {\n+                    response = new GetSystemCapabilityResponse(Result.SUCCESS, true);\n+                } else {\n+                    response = new GetSystemCapabilityResponse(Result.REJECTED, false);\n+                }\n+                response.setSystemCapability(systemCapability);\n+                getSystemCapability.getOnRPCResponseListener().onResponse(CorrelationIdGenerator.generateId(), response);\n+                return null;\n+            }\n+        };\n+        return onSendGetSystemCapabilityAnswer;\n+    }\n+\n+    @Test\n+    public void testGetCapability() {\n+        ISdl internalInterface;\n+        SystemCapabilityManager scm;\n+        OnSystemCapabilityListener onSystemCapabilityListener;\n+        VideoStreamingCapability retrievedCapability;\n+\n+\n+        // Test case 1 (capability not cached, listener not null, forceUpdate false)\n+        internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        scm = new SystemCapabilityManager(internalInterface);\n+        onSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n+        retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n+        assertNull(retrievedCapability);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Test case 2 (capability cached, listener not null, forceUpdate true)\n+        internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        scm = new SystemCapabilityManager(internalInterface);\n+        onSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+        retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, true);\n+        assertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Test case 3 (capability cached, listener null, forceUpdate true)\n+        internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        scm = new SystemCapabilityManager(internalInterface);\n+        onSystemCapabilityListener = null;\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+        retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, true);\n+        assertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+\n+\n+        // Test case 4 (capability cached, listener null, forceUpdate false)\n+        internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        scm = new SystemCapabilityManager(internalInterface);\n+        onSystemCapabilityListener = null;\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+        retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n+        assertTrue(TestValues.TRUE, Validator.validateVideoStreamingCapability((VideoStreamingCapability) systemCapability.getCapabilityForType(SystemCapabilityType.VIDEO_STREAMING), retrievedCapability));\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+    }\n+\n+    @Test\n+    public void testGetCapabilityHmiNone() {\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_NONE)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        OnSystemCapabilityListener onSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n+        VideoStreamingCapability retrievedCapability = (VideoStreamingCapability) scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener, false);\n+        assertNull(retrievedCapability);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener, times(0)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener, times(1)).onError(any(String.class));\n+    }\n+\n+    @Test\n+    public void testAddOnSystemCapabilityListenerWithSubscriptionsSupportedAndCapabilityCached() {\n+        SdlMsgVersion sdlMsgVersion = new SdlMsgVersion(6, 0); // This version supports capability subscriptions\n+        sdlMsgVersion.setPatchVersion(0);\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+\n+\n+        // Add listener1\n+        // When the first listener is added, GetSystemCapability request should go out with subscribe=true\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Add listener2\n+        OnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+        verify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Add listener3\n+        OnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Remove listener1\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+\n+\n+        // Remove listener2\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+\n+\n+        // Remove listener3\n+        // When the last listener is removed, GetSystemCapability request should go out with subscribe=false\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n+    }\n+\n+    @Test\n+    public void testAddOnSystemCapabilityListenerWithSubscriptionsSupportedAndCapabilityNotCached() {\n+        SdlMsgVersion sdlMsgVersion = new SdlMsgVersion(6, 0); // This version supports capability subscriptions\n+        sdlMsgVersion.setPatchVersion(0);\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n+\n+\n+        // Add listener1\n+        // When the first listener is added, GetSystemCapability request should go out with subscribe=true\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n+\n+        // Add listener2\n+        OnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+        verify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener1\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n+        // Add listener3\n+        OnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener2\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n+        // Remove listener1\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n-\t\t// Remove listener3\n-\t\t// When the last listener is removed, GetSystemCapability request should go out with subscribe=false\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n-\t}\n \n-\t@Test\n-\tpublic void testAddOnSystemCapabilityListenerWithSubscriptionsNotSupportedAndCapabilityCached() {\n-\t\tSdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n-\t\tsdlMsgVersion.setPatchVersion(0);\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\twhen(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+        // Remove listener2\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n \n-\t\t// Add listener1\n-\t\t// When the first listener is added, GetSystemCapability request should not go out because subscription is not supported and the capability is cached\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+        // Remove listener3\n+        // When the last listener is removed, GetSystemCapability request should go out with subscribe=false\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n+    }\n \n+    @Test\n+    public void testAddOnSystemCapabilityListenerWithSubscriptionsNotSupportedAndCapabilityCached() {\n+        SdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n+        sdlMsgVersion.setPatchVersion(0);\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n \n-\t\t// Add listener2\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\t\tverify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener1\n+        // When the first listener is added, GetSystemCapability request should not go out because subscription is not supported and the capability is cached\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, true)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Add listener3\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener2\n+        OnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+        verify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener1\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n+        // Add listener3\n+        OnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener2\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n+        // Remove listener1\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n-\t\t// Remove listener3\n-\t\t// When the last listener is removed, GetSystemCapability request should not go out because subscription is not supported\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t}\n \n-\t@Test\n-\tpublic void testAddOnSystemCapabilityListenerWithSubscriptionsNotSupportedAndCapabilityNotCached() {\n-\t\tSdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n-\t\tsdlMsgVersion.setPatchVersion(0);\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\twhen(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n+        // Remove listener2\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n \n-\t\t// Add listener1\n-\t\t// When the first listener is added, GetSystemCapability request should out because because capability is not cached\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+        // Remove listener3\n+        // When the last listener is removed, GetSystemCapability request should not go out because subscription is not supported\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+    }\n \n+    @Test\n+    public void testAddOnSystemCapabilityListenerWithSubscriptionsNotSupportedAndCapabilityNotCached() {\n+        SdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n+        sdlMsgVersion.setPatchVersion(0);\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, null);\n \n-\t\t// Add listener2\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\t\tverify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener1\n+        // When the first listener is added, GetSystemCapability request should out because because capability is not cached\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Add listener3\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener2\n+        OnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+        verify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener1\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n+        // Add listener3\n+        OnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener2\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n+        // Remove listener1\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n-\t\t// Remove listener3\n-\t\t// When the last listener is removed, GetSystemCapability request should not go out because subscription is not supported\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t}\n \n-\t@Test\n-\tpublic void testAddOnSystemCapabilityListenerThenGetCapabilityWhenSubscriptionsAreNotSupported() {\n-\t\tSdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n-\t\tsdlMsgVersion.setPatchVersion(0);\n-\t\tISdl internalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\twhen(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n-\t\tSystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n-\t\tscm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n+        // Remove listener2\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n \n-\t\t// Add listener1\n-\t\t// When the first listener is added, GetSystemCapability request should go out with subscribe=false\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+        // Remove listener3\n+        // When the last listener is removed, GetSystemCapability request should not go out because subscription is not supported\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+    }\n \n+    @Test\n+    public void testAddOnSystemCapabilityListenerThenGetCapabilityWhenSubscriptionsAreNotSupported() {\n+        SdlMsgVersion sdlMsgVersion = new SdlMsgVersion(5, 0); // This version doesn't support capability subscriptions\n+        sdlMsgVersion.setPatchVersion(0);\n+        ISdl internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        when(internalInterface.getSdlMsgVersion()).thenReturn(sdlMsgVersion);\n+        SystemCapabilityManager scm = new SystemCapabilityManager(internalInterface);\n+        scm.setCapability(SystemCapabilityType.VIDEO_STREAMING, videoStreamingCapability);\n \n-\t\t// Get Capability (should notify listener1 again)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(2)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener1\n+        // When the first listener is added, GetSystemCapability request should go out with subscribe=false\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, false)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Add listener2\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n-\t\tverify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Get Capability (should notify listener1 again)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(1)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(2)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Get Capability (should notify listener1 & listener2 again)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(3)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener2, times(2)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener2\n+        OnSystemCapabilityListener onSystemCapabilityListener2 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n+        verify(onSystemCapabilityListener2, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Add listener3\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n+        // Get Capability (should notify listener1 & listener2 again)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(2)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(3)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener2, times(2)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Get Capability (should notify listener1 & listener2 & listener3 again)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(3)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener2, times(3)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener3, times(2)).onCapabilityRetrieved(any(Object.class));\n \n+        // Add listener3\n+        OnSystemCapabilityListener onSystemCapabilityListener3 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(onSystemCapabilityListener3, times(1)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Remove listener1\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n+        // Get Capability (should notify listener1 & listener2 & listener3 again)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(3)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener2, times(3)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener3, times(2)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Get Capability (should notify listener2 & listener3 again)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(4)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener3, times(3)).onCapabilityRetrieved(any(Object.class));\n \n+        // Remove listener1\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener1);\n \n-\t\t// Remove listener2\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n+        // Get Capability (should notify listener2 & listener3 again)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(4)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener3, times(3)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Get Capability (should notify listener3 again)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(5)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener3, times(4)).onCapabilityRetrieved(any(Object.class));\n \n+        // Remove listener2\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener2);\n \n-\t\t// Remove listener3\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n-\t\tverify(internalInterface, times(5)).sendRPC(any(GetSystemCapability.class));\n \n+        // Get Capability (should notify listener3 again)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(5)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener3, times(4)).onCapabilityRetrieved(any(Object.class));\n \n-\t\t// Get Capability (should not notify any listener again because they are all removed)\n-\t\tscm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n-\t\tverify(internalInterface, times(6)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener3, times(4)).onCapabilityRetrieved(any(Object.class));\n-\t}\n \n-\t@Test\n-\tpublic void testGetAndAddListenerForDisplaysCapability() {\n-\t\tISdl internalInterface;\n-\t\tSystemCapabilityManager scm;\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener;\n-\t\tDisplayCapabilities retrievedCapability;\n-\n-\n-\t\t// Test case 1 (capability cached, listener not null, forceUpdate true)\n-\t\tinternalInterface = mock(ISdl.class);\n-\t\tdoAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n-\t\tscm = new SystemCapabilityManager(internalInterface);\n-\t\tonSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n-\t\tdoAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n-\t\tscm.setCapability(SystemCapabilityType.DISPLAYS, new DisplayCapabilities());\n-\t\tretrievedCapability = (DisplayCapabilities) scm.getCapability(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener, true);\n-\t\tassertNotNull(retrievedCapability);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n-\t\tverify(onSystemCapabilityListener, times(0)).onError(any(String.class));\n+        // Remove listener3\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.VIDEO_STREAMING, onSystemCapabilityListener3);\n+        verify(internalInterface, times(5)).sendRPC(any(GetSystemCapability.class));\n \n \n-\t\t// Test case 2 (Add listener)\n-\t\t// When the first DISPLAYS listener is added, GetSystemCapability request should not go out\n-\t\tOnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n-\t\tscm.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t\tverify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n-\n+        // Get Capability (should not notify any listener again because they are all removed)\n+        scm.getCapability(SystemCapabilityType.VIDEO_STREAMING, null, true);\n+        verify(internalInterface, times(6)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener2, times(4)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener3, times(4)).onCapabilityRetrieved(any(Object.class));\n+    }\n \n-\t\t// Test case 3 (Remove listener)\n-\t\t// When the last DISPLAYS listener is removed, GetSystemCapability request should not go out\n-\t\tscm.removeOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener1);\n-\t\tverify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n-\t}\n-\n-\t@Test\n-\tpublic void testListConversion(){\n-\t\tSystemCapabilityManager systemCapabilityManager = createSampleManager();\n-\t\tObject capability = systemCapabilityManager.getCapability(SystemCapabilityType.SOFTBUTTON, null, false);\n-\t\tassertNotNull(capability);\n-\t\tList<SoftButtonCapabilities> list = SystemCapabilityManager.convertToList(capability, SoftButtonCapabilities.class);\n-\t\tassertNotNull(list);\n-\t}\n-\n-\t@Test\n-\tpublic void testFalsePositive(){\n-\t\tSystemCapabilityManager systemCapabilityManager = createSampleManager();\n-\t\tsystemCapabilityManager.setCapability(SystemCapabilityType.AUDIO_PASSTHROUGH, null);\n-\t\tassertFalse(systemCapabilityManager.isCapabilitySupported(SystemCapabilityType.AUDIO_PASSTHROUGH));\n-\t}\n-\n-\t@Test\n-\tpublic void testOnSystemCapabilityUpdateWithNoExistingCap(){\n-\t\tInternalSDLInterface iSDL = new InternalSDLInterface();\n-\t\tSystemCapabilityManager systemCapabilityManager = createSampleManager(iSDL);\n-\t\tOnRPCListener scmRpcListener = iSDL.rpcListeners.get(FunctionID.ON_SYSTEM_CAPABILITY_UPDATED.getId()).get(0);\n-\t\tassertNotNull(scmRpcListener);\n-\n-\t\tassertNull(systemCapabilityManager.getCapability(SystemCapabilityType.APP_SERVICES, null, false));\n+    @Test\n+    public void testGetAndAddListenerForDisplaysCapability() {\n+        ISdl internalInterface;\n+        SystemCapabilityManager scm;\n+        OnSystemCapabilityListener onSystemCapabilityListener;\n+        DisplayCapabilities retrievedCapability;\n+\n+\n+        // Test case 1 (capability cached, listener not null, forceUpdate true)\n+        internalInterface = mock(ISdl.class);\n+        doAnswer(createOnHMIStatusAnswer(HMILevel.HMI_FULL)).when(internalInterface).addOnRPCListener(eq(FunctionID.ON_HMI_STATUS), any(OnRPCListener.class));\n+        scm = new SystemCapabilityManager(internalInterface);\n+        onSystemCapabilityListener = mock(OnSystemCapabilityListener.class);\n+        doAnswer(createOnSendGetSystemCapabilityAnswer(true, null)).when(internalInterface).sendRPC(any(GetSystemCapability.class));\n+        scm.setCapability(SystemCapabilityType.DISPLAYS, new DisplayCapabilities());\n+        retrievedCapability = (DisplayCapabilities) scm.getCapability(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener, true);\n+        assertNotNull(retrievedCapability);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener, times(1)).onCapabilityRetrieved(any(Object.class));\n+        verify(onSystemCapabilityListener, times(0)).onError(any(String.class));\n \n-\t\t/* PERFORM A NOTIFICATION SEND THROUGH THE SCM */\n-\t\tAppServiceCapability addServiceID = AppServiceFactory.createAppServiceCapability(AppServiceType.NAVIGATION, \"test\", \"3453\", true, null);\n-\t\tAppServicesCapabilities serviceIdASC = new AppServicesCapabilities();\n-\t\tserviceIdASC.setAppServices(Collections.singletonList(addServiceID));\n \n-\t\tSystemCapability systemCapability = new SystemCapability();\n-\t\tsystemCapability.setSystemCapabilityType(SystemCapabilityType.APP_SERVICES);\n-\t\tsystemCapability.setCapabilityForType(SystemCapabilityType.APP_SERVICES, serviceIdASC);\n-\n-\t\tOnSystemCapabilityUpdated onSystemCapabilityUpdated = new OnSystemCapabilityUpdated();\n-\t\tonSystemCapabilityUpdated.setSystemCapability(systemCapability);\n+        // Test case 2 (Add listener)\n+        // When the first DISPLAYS listener is added, GetSystemCapability request should not go out\n+        OnSystemCapabilityListener onSystemCapabilityListener1 = mock(OnSystemCapabilityListener.class);\n+        scm.addOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener1);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+        verify(onSystemCapabilityListener1, times(1)).onCapabilityRetrieved(any(Object.class));\n+\n \n-\t\tscmRpcListener.onReceived(onSystemCapabilityUpdated);\n+        // Test case 3 (Remove listener)\n+        // When the last DISPLAYS listener is removed, GetSystemCapability request should not go out\n+        scm.removeOnSystemCapabilityListener(SystemCapabilityType.DISPLAYS, onSystemCapabilityListener1);\n+        verify(internalInterface, times(0)).sendRPC(any(GetSystemCapability.class));\n+    }\n+\n+    @Test\n+    public void testListConversion() {\n+        SystemCapabilityManager systemCapabilityManager = createSampleManager();\n+        Object capability = systemCapabilityManager.getCapability(SystemCapabilityType.SOFTBUTTON, null, false);\n+        assertNotNull(capability);\n+        List<SoftButtonCapabilities> list = SystemCapabilityManager.convertToList(capability, SoftButtonCapabilities.class);\n+        assertNotNull(list);\n+    }\n+\n+    @Test\n+    public void testFalsePositive() {\n+        SystemCapabilityManager systemCapabilityManager = createSampleManager();\n+        systemCapabilityManager.setCapability(SystemCapabilityType.AUDIO_PASSTHROUGH, null);\n+        assertFalse(systemCapabilityManager.isCapabilitySupported(SystemCapabilityType.AUDIO_PASSTHROUGH));\n+    }\n+\n+    @Test\n+    public void testOnSystemCapabilityUpdateWithNoExistingCap() {\n+        InternalSDLInterface iSDL = new InternalSDLInterface();\n+        SystemCapabilityManager systemCapabilityManager = createSampleManager(iSDL);\n+        OnRPCListener scmRpcListener = iSDL.rpcListeners.get(FunctionID.ON_SYSTEM_CAPABILITY_UPDATED.getId()).get(0);\n+        assertNotNull(scmRpcListener);\n+\n+        assertNull(systemCapabilityManager.getCapability(SystemCapabilityType.APP_SERVICES, null, false));\n \n-\t\tassertNotNull(systemCapabilityManager.getCapability(SystemCapabilityType.APP_SERVICES, null, false));\n-\t}\n-\n-\t@Test\n-\tpublic void testOnSystemCapabilityUpdatedForDISPLAYS() {\n-\t\tInternalSDLInterface iSDL = new InternalSDLInterface();\n-\t\tSystemCapabilityManager systemCapabilityManager = createSampleManager(iSDL);\n-\t\tOnRPCListener scmRpcListener = iSDL.rpcListeners.get(FunctionID.ON_SYSTEM_CAPABILITY_UPDATED.getId()).get(0);\n-\t\tassertNotNull(scmRpcListener);\n+        /* PERFORM A NOTIFICATION SEND THROUGH THE SCM */\n+        AppServiceCapability addServiceID = AppServiceFactory.createAppServiceCapability(AppServiceType.NAVIGATION, \"test\", \"3453\", true, null);\n+        AppServicesCapabilities serviceIdASC = new AppServicesCapabilities();\n+        serviceIdASC.setAppServices(Collections.singletonList(addServiceID));\n+\n+        SystemCapability systemCapability = new SystemCapability();\n+        systemCapability.setSystemCapabilityType(SystemCapabilityType.APP_SERVICES);\n+        systemCapability.setCapabilityForType(SystemCapabilityType.APP_SERVICES, serviceIdASC);\n+\n+        OnSystemCapabilityUpdated onSystemCapabilityUpdated = new OnSystemCapabilityUpdated();\n+        onSystemCapabilityUpdated.setSystemCapability(systemCapability);\n+\n+        scmRpcListener.onReceived(onSystemCapabilityUpdated);\n+\n+        assertNotNull(systemCapabilityManager.getCapability(SystemCapabilityType.APP_SERVICES, null, false));\n+    }\n+\n+    @Test\n+    public void testOnSystemCapabilityUpdatedForDISPLAYS() {\n+        InternalSDLInterface iSDL = new InternalSDLInterface();\n+        SystemCapabilityManager systemCapabilityManager = createSampleManager(iSDL);\n+        OnRPCListener scmRpcListener = iSDL.rpcListeners.get(FunctionID.ON_SYSTEM_CAPABILITY_UPDATED.getId()).get(0);\n+        assertNotNull(scmRpcListener);\n+\n+        assertNotNull(systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAYS, null, false));\n+        assertNotNull(systemCapabilityManager.getCapability(SystemCapabilityType.DISPLAY, null, false));\n+\n+        List<DisplayCapability> newCaps = createDisplayCapabilityList(TestValues.GENERAL_DISPLAYCAPABILITIES, TestValues.GENERAL_BUTTONCAPABILITIES_LIST, TestValues.GENERAL_SOFTBUTTONCAPABILITIES_LIST);\n+        ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ca0bf4ee24e780437907085a77ace7da6c30d1"}, "originalPosition": 1247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzAxMzg3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo1OTowNVrOHUWzjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo1OTowNVrOHUWzjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNzIxNQ==", "bodyText": "The opening <b> tag is missingalong with \"Notes\" should these be removed or should they remain? if they should be removed can we also remove the closing </b> tag?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1505#discussion_r491107215", "createdAt": "2020-09-18T17:59:05Z", "author": {"login": "RHenigan"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "diffHunk": "@@ -155,311 +155,305 @@\n  * \t\t\t<td>SmartDeviceLink 6.0.0</td>\r\n  * \t\t</tr>\r\n  *  </table>\r\n- * @since SmartDeviceLink 1.0\r\n- * \r\n- *  \r\n+ *\r\n  * @see GetVehicleData\r\n- * @see OnVehicleData \r\n+ * @see OnVehicleData\r\n  * @see Show\r\n  * @see Speak\r\n+ * @since SmartDeviceLink 1.0\r\n  */\r\n public class Alert extends RPCRequest {\r\n-\tpublic static final String KEY_PLAY_TONE = \"playTone\";\r\n-\tpublic static final String KEY_DURATION = \"duration\";\r\n-\tpublic static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n-\tpublic static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n-\tpublic static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n+    public static final String KEY_PLAY_TONE = \"playTone\";\r\n+    public static final String KEY_DURATION = \"duration\";\r\n+    public static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n+    public static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n+    public static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n     public static final String KEY_PROGRESS_INDICATOR = \"progressIndicator\";\r\n-\tpublic static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n-\tpublic static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n-\tpublic static final String KEY_CANCEL_ID = \"cancelID\";\r\n-\tpublic static final String KEY_ALERT_ICON = \"alertIcon\";\r\n+    public static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n+    public static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n+    public static final String KEY_CANCEL_ID = \"cancelID\";\r\n+    public static final String KEY_ALERT_ICON = \"alertIcon\";\r\n \r\n-\t/**\r\n-\t * Constructs a new Alert object\r\n-\t */    \r\n-\tpublic Alert() {\r\n+    /**\r\n+     * Constructs a new Alert object\r\n+     */\r\n+    public Alert() {\r\n         super(FunctionID.ALERT.toString());\r\n     }\r\n-\t/**\r\n-\t * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n-\t * \r\n-\t * \r\n-\t * @param hash\r\n-\t *            The Hashtable to use\r\n-\t */\t\r\n+\r\n+    /**\r\n+     * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n+     *\r\n+     * @param hash The Hashtable to use\r\n+     */\r\n     public Alert(Hashtable<String, Object> hash) {\r\n         super(hash);\r\n     }\r\n-\t/**\r\n-\t * Gets the text which is displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t * \r\n-\t * @return String - a String value representing the text which is displayed\r\n-\t *         in the first field during the Alert\r\n-\t */    \r\n+\r\n+    /**\r\n+     * Gets the text which is displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @return String - a String value representing the text which is displayed\r\n+     * in the first field during the Alert\r\n+     */\r\n     public String getAlertText1() {\r\n         return getString(KEY_ALERT_TEXT_1);\r\n     }\r\n-\t/**\r\n-\t * Sets the String to be displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText1\r\n-\t *            String Value\r\n-\t *\r\n-\t *            <p><b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, top display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t */\r\n-    public Alert setAlertText1( String alertText1) {\r\n+\r\n+    /**\r\n+     * Sets the String to be displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText1 String Value\r\n+     *                   <p>\r\n+     *                   : </b></p>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ca0bf4ee24e780437907085a77ace7da6c30d1"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzAxNjk1OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo1OTo1N1rOHUW1ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzo1OTo1N1rOHUW1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNzY5MA==", "bodyText": "The opening <b> tag is missingalong with \"Notes\" should these be removed or should they remain? if they should be removed can we also remove the closing </b> tag?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1505#discussion_r491107690", "createdAt": "2020-09-18T17:59:57Z", "author": {"login": "RHenigan"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "diffHunk": "@@ -155,311 +155,305 @@\n  * \t\t\t<td>SmartDeviceLink 6.0.0</td>\r\n  * \t\t</tr>\r\n  *  </table>\r\n- * @since SmartDeviceLink 1.0\r\n- * \r\n- *  \r\n+ *\r\n  * @see GetVehicleData\r\n- * @see OnVehicleData \r\n+ * @see OnVehicleData\r\n  * @see Show\r\n  * @see Speak\r\n+ * @since SmartDeviceLink 1.0\r\n  */\r\n public class Alert extends RPCRequest {\r\n-\tpublic static final String KEY_PLAY_TONE = \"playTone\";\r\n-\tpublic static final String KEY_DURATION = \"duration\";\r\n-\tpublic static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n-\tpublic static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n-\tpublic static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n+    public static final String KEY_PLAY_TONE = \"playTone\";\r\n+    public static final String KEY_DURATION = \"duration\";\r\n+    public static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n+    public static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n+    public static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n     public static final String KEY_PROGRESS_INDICATOR = \"progressIndicator\";\r\n-\tpublic static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n-\tpublic static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n-\tpublic static final String KEY_CANCEL_ID = \"cancelID\";\r\n-\tpublic static final String KEY_ALERT_ICON = \"alertIcon\";\r\n+    public static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n+    public static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n+    public static final String KEY_CANCEL_ID = \"cancelID\";\r\n+    public static final String KEY_ALERT_ICON = \"alertIcon\";\r\n \r\n-\t/**\r\n-\t * Constructs a new Alert object\r\n-\t */    \r\n-\tpublic Alert() {\r\n+    /**\r\n+     * Constructs a new Alert object\r\n+     */\r\n+    public Alert() {\r\n         super(FunctionID.ALERT.toString());\r\n     }\r\n-\t/**\r\n-\t * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n-\t * \r\n-\t * \r\n-\t * @param hash\r\n-\t *            The Hashtable to use\r\n-\t */\t\r\n+\r\n+    /**\r\n+     * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n+     *\r\n+     * @param hash The Hashtable to use\r\n+     */\r\n     public Alert(Hashtable<String, Object> hash) {\r\n         super(hash);\r\n     }\r\n-\t/**\r\n-\t * Gets the text which is displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t * \r\n-\t * @return String - a String value representing the text which is displayed\r\n-\t *         in the first field during the Alert\r\n-\t */    \r\n+\r\n+    /**\r\n+     * Gets the text which is displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @return String - a String value representing the text which is displayed\r\n+     * in the first field during the Alert\r\n+     */\r\n     public String getAlertText1() {\r\n         return getString(KEY_ALERT_TEXT_1);\r\n     }\r\n-\t/**\r\n-\t * Sets the String to be displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText1\r\n-\t *            String Value\r\n-\t *\r\n-\t *            <p><b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, top display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t */\r\n-    public Alert setAlertText1( String alertText1) {\r\n+\r\n+    /**\r\n+     * Sets the String to be displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText1 String Value\r\n+     *                   <p>\r\n+     *                   : </b></p>\r\n+     *                   <ul>\r\n+     *                   <li>Length is limited to what is indicated in <i>\r\n+     *                   {@linkplain RegisterAppInterface}</i> response</li>\r\n+     *                   <li>If omitted, top display line will be cleared</li>\r\n+     *                   <li>Text is always centered</li>\r\n+     *                   </ul>\r\n+     */\r\n+    public Alert setAlertText1(String alertText1) {\r\n         setParameters(KEY_ALERT_TEXT_1, alertText1);\r\n         return this;\r\n     }\r\n-\t/**\r\n-\t * Gets the text which is displayed in the second field of the display\r\n-\t * during the Alert\r\n-\t * \r\n-\t * @return String -a String value representing the text which is displayed\r\n-\t *         in the second field during the Alert\r\n-\t */    \r\n+\r\n+    /**\r\n+     * Gets the text which is displayed in the second field of the display\r\n+     * during the Alert\r\n+     *\r\n+     * @return String -a String value representing the text which is displayed\r\n+     * in the second field during the Alert\r\n+     */\r\n     public String getAlertText2() {\r\n-\t\treturn getString(KEY_ALERT_TEXT_2);\r\n+        return getString(KEY_ALERT_TEXT_2);\r\n     }\r\n-\t/**\r\n-\t * Sets the String to be displayed in the second field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText2\r\n-\t *            String Value\r\n-\t *\r\n-\t *            <p><b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Only permitted if HMI supports a second display line</li>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, second display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t */\r\n-    public Alert setAlertText2( String alertText2) {\r\n+\r\n+    /**\r\n+     * Sets the String to be displayed in the second field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText2 String Value\r\n+     *                   <p>\r\n+     *                   : </b></p>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ca0bf4ee24e780437907085a77ace7da6c30d1"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzAxNzcxOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowMDoxNlrOHUW17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODowMDoxNlrOHUW17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEwNzgyMQ==", "bodyText": "The opening <b> tag is missingalong with \"Notes\" should these be removed or should they remain? if they should be removed can we also remove the closing </b> tag?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1505#discussion_r491107821", "createdAt": "2020-09-18T18:00:16Z", "author": {"login": "RHenigan"}, "path": "base/src/main/java/com/smartdevicelink/proxy/rpc/Alert.java", "diffHunk": "@@ -155,311 +155,305 @@\n  * \t\t\t<td>SmartDeviceLink 6.0.0</td>\r\n  * \t\t</tr>\r\n  *  </table>\r\n- * @since SmartDeviceLink 1.0\r\n- * \r\n- *  \r\n+ *\r\n  * @see GetVehicleData\r\n- * @see OnVehicleData \r\n+ * @see OnVehicleData\r\n  * @see Show\r\n  * @see Speak\r\n+ * @since SmartDeviceLink 1.0\r\n  */\r\n public class Alert extends RPCRequest {\r\n-\tpublic static final String KEY_PLAY_TONE = \"playTone\";\r\n-\tpublic static final String KEY_DURATION = \"duration\";\r\n-\tpublic static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n-\tpublic static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n-\tpublic static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n+    public static final String KEY_PLAY_TONE = \"playTone\";\r\n+    public static final String KEY_DURATION = \"duration\";\r\n+    public static final String KEY_ALERT_TEXT_1 = \"alertText1\";\r\n+    public static final String KEY_ALERT_TEXT_2 = \"alertText2\";\r\n+    public static final String KEY_ALERT_TEXT_3 = \"alertText3\";\r\n     public static final String KEY_PROGRESS_INDICATOR = \"progressIndicator\";\r\n-\tpublic static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n-\tpublic static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n-\tpublic static final String KEY_CANCEL_ID = \"cancelID\";\r\n-\tpublic static final String KEY_ALERT_ICON = \"alertIcon\";\r\n+    public static final String KEY_TTS_CHUNKS = \"ttsChunks\";\r\n+    public static final String KEY_SOFT_BUTTONS = \"softButtons\";\r\n+    public static final String KEY_CANCEL_ID = \"cancelID\";\r\n+    public static final String KEY_ALERT_ICON = \"alertIcon\";\r\n \r\n-\t/**\r\n-\t * Constructs a new Alert object\r\n-\t */    \r\n-\tpublic Alert() {\r\n+    /**\r\n+     * Constructs a new Alert object\r\n+     */\r\n+    public Alert() {\r\n         super(FunctionID.ALERT.toString());\r\n     }\r\n-\t/**\r\n-\t * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n-\t * \r\n-\t * \r\n-\t * @param hash\r\n-\t *            The Hashtable to use\r\n-\t */\t\r\n+\r\n+    /**\r\n+     * <p>Constructs a new Alert object indicated by the Hashtable parameter</p>\r\n+     *\r\n+     * @param hash The Hashtable to use\r\n+     */\r\n     public Alert(Hashtable<String, Object> hash) {\r\n         super(hash);\r\n     }\r\n-\t/**\r\n-\t * Gets the text which is displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t * \r\n-\t * @return String - a String value representing the text which is displayed\r\n-\t *         in the first field during the Alert\r\n-\t */    \r\n+\r\n+    /**\r\n+     * Gets the text which is displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @return String - a String value representing the text which is displayed\r\n+     * in the first field during the Alert\r\n+     */\r\n     public String getAlertText1() {\r\n         return getString(KEY_ALERT_TEXT_1);\r\n     }\r\n-\t/**\r\n-\t * Sets the String to be displayed in the first field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText1\r\n-\t *            String Value\r\n-\t *\r\n-\t *            <p><b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, top display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t */\r\n-    public Alert setAlertText1( String alertText1) {\r\n+\r\n+    /**\r\n+     * Sets the String to be displayed in the first field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText1 String Value\r\n+     *                   <p>\r\n+     *                   : </b></p>\r\n+     *                   <ul>\r\n+     *                   <li>Length is limited to what is indicated in <i>\r\n+     *                   {@linkplain RegisterAppInterface}</i> response</li>\r\n+     *                   <li>If omitted, top display line will be cleared</li>\r\n+     *                   <li>Text is always centered</li>\r\n+     *                   </ul>\r\n+     */\r\n+    public Alert setAlertText1(String alertText1) {\r\n         setParameters(KEY_ALERT_TEXT_1, alertText1);\r\n         return this;\r\n     }\r\n-\t/**\r\n-\t * Gets the text which is displayed in the second field of the display\r\n-\t * during the Alert\r\n-\t * \r\n-\t * @return String -a String value representing the text which is displayed\r\n-\t *         in the second field during the Alert\r\n-\t */    \r\n+\r\n+    /**\r\n+     * Gets the text which is displayed in the second field of the display\r\n+     * during the Alert\r\n+     *\r\n+     * @return String -a String value representing the text which is displayed\r\n+     * in the second field during the Alert\r\n+     */\r\n     public String getAlertText2() {\r\n-\t\treturn getString(KEY_ALERT_TEXT_2);\r\n+        return getString(KEY_ALERT_TEXT_2);\r\n     }\r\n-\t/**\r\n-\t * Sets the String to be displayed in the second field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText2\r\n-\t *            String Value\r\n-\t *\r\n-\t *            <p><b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Only permitted if HMI supports a second display line</li>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, second display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t */\r\n-    public Alert setAlertText2( String alertText2) {\r\n+\r\n+    /**\r\n+     * Sets the String to be displayed in the second field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText2 String Value\r\n+     *                   <p>\r\n+     *                   : </b></p>\r\n+     *                   <ul>\r\n+     *                   <li>Only permitted if HMI supports a second display line</li>\r\n+     *                   <li>Length is limited to what is indicated in <i>\r\n+     *                   {@linkplain RegisterAppInterface}</i> response</li>\r\n+     *                   <li>If omitted, second display line will be cleared</li>\r\n+     *                   <li>Text is always centered</li>\r\n+     *                   </ul>\r\n+     */\r\n+    public Alert setAlertText2(String alertText2) {\r\n         setParameters(KEY_ALERT_TEXT_2, alertText2);\r\n         return this;\r\n     }\r\n \r\n-\t/**\r\n-\t * Gets the text which is displayed in the third field of the display during\r\n-\t * the Alert\r\n-\t * \r\n-\t * @return String -a String value representing the text which is displayed\r\n-\t *         in the third field during the Alert\r\n-\t * \r\n-\t * @since SmartDeviceLink 2.0\r\n-\t */\r\n+    /**\r\n+     * Gets the text which is displayed in the third field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @return String -a String value representing the text which is displayed\r\n+     * in the third field during the Alert\r\n+     * @since SmartDeviceLink 2.0\r\n+     */\r\n     public String getAlertText3() {\r\n-\t\treturn getString(KEY_ALERT_TEXT_3);\r\n+        return getString(KEY_ALERT_TEXT_3);\r\n     }\r\n \r\n-\t/**\r\n-\t * Sets the String to be displayed in the third field of the display during\r\n-\t * the Alert\r\n-\t *\r\n-\t * @param alertText3\r\n-\t *            String Value\r\n-\t *\r\n-\t *           <p> <b>Notes: </b></p>\r\n-\t *            <ul>\r\n-\t *            <li>Only permitted if HMI supports a third display line</li>\r\n-\t *            <li>Length is limited to what is indicated in <i>\r\n-\t *            {@linkplain RegisterAppInterface}</i> response</li>\r\n-\t *            <li>If omitted, third display line will be cleared</li>\r\n-\t *            <li>Text is always centered</li>\r\n-\t *            </ul>\r\n-\t *\r\n-\t * @since SmartDeviceLink 2.0\r\n-\t */\r\n-    public Alert setAlertText3( String alertText3) {\r\n+    /**\r\n+     * Sets the String to be displayed in the third field of the display during\r\n+     * the Alert\r\n+     *\r\n+     * @param alertText3 String Value\r\n+     *                   <p>\r\n+     *                   s: </b></p>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ca0bf4ee24e780437907085a77ace7da6c30d1"}, "originalPosition": 249}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4302, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}