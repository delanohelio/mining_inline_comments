{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDkyMjI1", "number": 1319, "title": "Cache Lock Screen Icons Retrieved from URL", "bodyText": "Fixes #1316\nThis PR is [ready] for review.\nRisk\nThis PR makes [minor] API changes.\nTesting Plan\n\nI have tested this code against core and varified the behavior\n\nUnit Tests\n\nAdded unit tests to ensure caching of lock screen icon is working as expected\n\nSummary\n\nI have added a LockScreenDeviceIconManager class that will be used by the LockScreenManager to cache lock screen icon and to decide when a cached image needs to be updated. When an icon is cached details including the cached path and the last updated time will be writen to shared preferences. shared preferences will be used to verify if an icon is already cached, when an icon needs to be updated, and the path to the cached icon. The icon Url for the lock screen icon will be hashed and used as the key in the shared preferences.\n\nFor a list of edge cases please look below to the comments\nCLA\n\n I have signed the CLA", "createdAt": "2020-03-24T16:11:18Z", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319", "merged": true, "mergeCommit": {"oid": "eba22e7520e6acacae4a2a8c7de560167f9cfd05"}, "closed": true, "closedAt": "2020-04-09T15:54:22Z", "author": {"login": "RHenigan"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQktYIgH2gAyMzkzMDkyMjI1OjI1MjY0YzIyMDAzYTg2MmY2NjhmZGM5YWY4ZGFmNjliODcwODBmNzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-K-yAFqTM5MDg5NTEyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "25264c22003a862f668fdc9af8daf69b87080f75", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/25264c22003a862f668fdc9af8daf69b87080f75", "committedDate": "2020-03-23T20:55:01Z", "message": "Initial pass at Caching Lock Screen icon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99934709fe36c32a171d434d70404e49b1a83d9f", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/99934709fe36c32a171d434d70404e49b1a83d9f", "committedDate": "2020-03-24T14:58:15Z", "message": "Update Exceptions and integrate to lockscrnManager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDc1MDQ5", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-380475049", "createdAt": "2020-03-24T16:18:38Z", "commit": {"oid": "99934709fe36c32a171d434d70404e49b1a83d9f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxODozOFrOF64Nrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoyNzoxOFrOF64o3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MjczNA==", "bodyText": "can the class be package-private as it is not supposed to be used by the devs?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r397282734", "createdAt": "2020-03-24T16:18:38Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.proxy.rpc.DateTime;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Date;\n+\n+public class LockScreenDeviceIconManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99934709fe36c32a171d434d70404e49b1a83d9f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4OTY5Mg==", "bodyText": "I would use a more descriptive name and create a constant for that string instead of hard-coding it in multiple places. That applies to other hardcoded strings in the code. Something like:\n\n  \n    \n      sdl_java_suite/android/sdl_android/src/main/java/com/smartdevicelink/transport/SdlRouterService.java\n    \n    \n         Line 186\n      in\n      797b7a1\n    \n    \n    \n    \n\n        \n          \n           protected static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.device.status\";", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r397289692", "createdAt": "2020-03-24T16:27:18Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.proxy.rpc.DateTime;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Date;\n+\n+public class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+    }\n+\n+    boolean updateCachedImage(String iconIUrl) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconIUrl, null);\n+        if(iconParameters == null) {\n+            return true;\n+        } else {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(\"lastUpdatedTime\");\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+\n+                return daysBetweenLastUpdate >= 30;\n+\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        File f = new File(this.context.getCacheDir(), iconUrl);\n+        try {\n+            f.createNewFile();\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+            byte[] bitmapdata = bos.toByteArray();\n+\n+            FileOutputStream fos = null;\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+            JSONObject iconParams;\n+\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconUrl, iconParams);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconUrl, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(\"storedUrl\");\n+                String storedUrl = jsonObject.getString(\"storedUrl\");\n+                return BitmapFactory.decodeFile(storedUrl);\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconUrl, JSONObject jsonObject) throws JSONException {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(\"sdl\", Context.MODE_PRIVATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99934709fe36c32a171d434d70404e49b1a83d9f"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f2a5835bad1df51353b9614d9ad3fdd93f7788c1", "committedDate": "2020-03-24T18:39:22Z", "message": "Hash iconUrl and fix minor issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3958a341d058493a74ef48df75a22b81757bf008", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/3958a341d058493a74ef48df75a22b81757bf008", "committedDate": "2020-03-25T18:44:42Z", "message": "Handle Edge Cases and initial tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95ae9b19db7179491574cbd1b0437ef69457a68a", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/95ae9b19db7179491574cbd1b0437ef69457a68a", "committedDate": "2020-03-25T20:35:24Z", "message": "Continue Testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6aee4f0c95135e660294993b598e0275c151c2", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/ae6aee4f0c95135e660294993b598e0275c151c2", "committedDate": "2020-03-25T21:00:23Z", "message": "Add passing test for saveFileToCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9855cacefcdc42ce3377e8f812a3ac9471aa1997", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/9855cacefcdc42ce3377e8f812a3ac9471aa1997", "committedDate": "2020-03-25T21:05:42Z", "message": "Add test for getFileFromCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cc26b3536d61f04b891119194226492a890d0a", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/35cc26b3536d61f04b891119194226492a890d0a", "committedDate": "2020-03-25T21:17:38Z", "message": "Add happy path test for getFileFromCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/641a48ce265b0203cd24c4c58816b109a0569d61", "committedDate": "2020-03-26T15:21:10Z", "message": "Replace Logcat with DebugTool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MjIzNDI0", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-384223424", "createdAt": "2020-03-30T20:55:42Z", "commit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1NTo0MlrOF973IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMTo0Njo0OFrOF99cqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODIyNQ==", "bodyText": "can we rename this method to something like shouldUpdateCachedImage() isCachedImageExpired()?  just to make it clear from the name that the method only checks if we need to update and it doesn't actually do the update.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400488225", "createdAt": "2020-03-30T20:55:42Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTQ0Mw==", "bodyText": "Can we put the three error messages in one log statement using String.format()?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400489443", "createdAt": "2020-03-30T20:58:03Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");\n+\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t\t\tif (deviceLogo == null) {\n+\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} catch(IOException e){\n+\t\t\t\t\tLog.e(TAG, \"device Icon Error Downloading\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4OTg1MQ==", "bodyText": "Can we put the two messages in one log statement using String.format() and use DebuggerTool instead?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400489851", "createdAt": "2020-03-30T20:58:51Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5MTA2Mw==", "bodyText": "it is better to use DebugTool for logging D/I messages", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400491063", "createdAt": "2020-03-30T21:01:12Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Nzk0NQ==", "bodyText": "This doesn't always mean the image is up to date right? I believe the app will hit this else statement if the image is not cached at all.\nI suggest updating the log to be more clear or restructuring the if statements to separate the three cases to make it easier to follow:\n1-image not cached\n2-image cached and valid\n3-image cached but expired", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400497945", "createdAt": "2020-03-30T21:14:01Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDc4Nw==", "bodyText": "Would it be possible to reuse the method in LockScreenDeviceIconManager() by making it package-private?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400504787", "createdAt": "2020-03-30T21:27:34Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(35, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconUrl) {\n+        JSONObject jsonObject = new JSONObject();\n+        try {\n+            jsonObject.put(STORED_URL, cahceIconUrl);\n+            long timeDifferenceInMilliSeconds = DaysOld * 1000 * 60 * 60 * 24;\n+            jsonObject.put(LAST_UPDATED_TIME, System.currentTimeMillis() - timeDifferenceInMilliSeconds);\n+            return jsonObject.toString();\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private String getMD5HashFromIconUrl(String iconUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMDQxOA==", "bodyText": "Do you think we can simplify that a bit by only storing the hash as key and the time as a value instead of saving the JSON in shared prefs?\ncurrently, this is how the share prefs xml look like. We save the hash twice. I feel that is unesceasry\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"935e06761f887b20a5a10242faaf6ecf\">{&quot;storedUrl&quot;:&quot;\\/data\\/user\\/0\\/io.livio.sdltestsuite.app1\\/cache\\/sdl\\/lock_screen_icon\\/935e06761f887b20a5a10242faaf6ecf&quot;,&quot;lastUpdatedTime&quot;:1585600940171}</string>\n</map>\n\nCannot we just store them like that? This way we don't even need to make s JSON.\n<?xml version='1.0' encoding='utf-8' standalone='yes' ?>\n<map>\n    <string name=\"935e06761f887b20a5a10242faaf6ecf\">1585600940171</string>\n</map>", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400510418", "createdAt": "2020-03-30T21:38:58Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        JSONObject iconParams;\n+        try {\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconHash, iconParams);\n+        } catch (JSONException e) {\n+            DebugTool.logError(\"Failed to save to shared preferences, clearing cache icon directory\");\n+            clearIconDirectory();\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                String storedUrl = jsonObject.getString(STORED_URL);\n+                Bitmap cachedIcon = BitmapFactory.decodeFile(storedUrl);\n+                if(cachedIcon == null) {\n+                    DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                    clearIconDirectory();\n+                    return null;\n+                } else {\n+                    return cachedIcon;\n+                }\n+            } catch (JSONException e) {\n+                DebugTool.logError(\"Failed to get file from cache, removing shared pref\");\n+                sharedPref.edit().remove(iconHash).commit();\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash, JSONObject jsonObject) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, jsonObject.toString());\n+        editor.commit();\n+    }\n+\n+    private JSONObject buildDeviceIconParameters(String storedUrl) throws JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxMjU3NQ==", "bodyText": "If I understand it correctly, this saves the file path, not the url right? If so, can we change the name to filePath  to make it easier to read?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400512575", "createdAt": "2020-03-30T21:43:26Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapdata);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        JSONObject iconParams;\n+        try {\n+            iconParams = buildDeviceIconParameters(f.getAbsolutePath());\n+            writeDeviceIconParametersToSystemPreferences(iconHash, iconParams);\n+        } catch (JSONException e) {\n+            DebugTool.logError(\"Failed to save to shared preferences, clearing cache icon directory\");\n+            clearIconDirectory();\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                String storedUrl = jsonObject.getString(STORED_URL);\n+                Bitmap cachedIcon = BitmapFactory.decodeFile(storedUrl);\n+                if(cachedIcon == null) {\n+                    DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                    clearIconDirectory();\n+                    return null;\n+                } else {\n+                    return cachedIcon;\n+                }\n+            } catch (JSONException e) {\n+                DebugTool.logError(\"Failed to get file from cache, removing shared pref\");\n+                sharedPref.edit().remove(iconHash).commit();\n+                e.printStackTrace();\n+                return null;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash, JSONObject jsonObject) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, jsonObject.toString());\n+        editor.commit();\n+    }\n+\n+    private JSONObject buildDeviceIconParameters(String storedUrl) throws JSONException {\n+        JSONObject parametersJson = new JSONObject();\n+        parametersJson.put(STORED_URL, storedUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    byte[] bitmapdata = bos.toByteArray();\n          \n          \n            \n                    byte[] bitmapData = bos.toByteArray();", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400514023", "createdAt": "2020-03-30T21:46:24Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapdata = bos.toByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUxNDIxOA==", "bodyText": "Can we remove the extra lines before and after this line?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r400514218", "createdAt": "2020-03-30T21:46:48Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean updateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            JSONObject jsonObject = null;\n+            try {\n+                jsonObject = new JSONObject(iconParameters);\n+                long lastUpdatedTime = 0;\n+                lastUpdatedTime = (long) jsonObject.get(LAST_UPDATED_TIME);\n+                long currentTime = System.currentTimeMillis();\n+\n+                long timeDifference = currentTime - lastUpdatedTime;\n+                long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+                return daysBetweenLastUpdate >= 30;\n+            } catch (JSONException e) {\n+                e.printStackTrace();\n+                DebugTool.logError(\"Exception Trying to read shared preferences\");\n+                return true;\n+            }\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8facbe9d4102a10348060ff06b0b3195ffe00bb2", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8facbe9d4102a10348060ff06b0b3195ffe00bb2", "committedDate": "2020-03-31T17:01:31Z", "message": "Update android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java\n\nCo-Authored-By: Bilal Alsharifi <599206+bilal-alsharifi@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/fcc44e9cdb1eb4e26e20c061a217c92fc22baed3", "committedDate": "2020-03-31T18:50:28Z", "message": "Fixes from PR Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/4105cbd349f557ea7af53647d268d2fc8cacd66d", "committedDate": "2020-03-31T18:50:41Z", "message": "Merge branch 'bugfix/issue_1316' of github.com:smartdevicelink/sdl_java_suite into bugfix/issue_1316"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Njc0Mzcy", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-385674372", "createdAt": "2020-04-01T15:02:38Z", "commit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowMjozOFrOF_E7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NjozOFrOF_HYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NTI2MQ==", "bodyText": "Will passing new LockScreenDeviceIconManager(null).getMD5HashFromIconUrl(ICON_URL)) work? we will have to check for null in the LockScreenDeviceIconManager constructor in that case.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401685261", "createdAt": "2020-04-01T15:02:38Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.util.Log;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_URL = \"storedUrl\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(35, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.updateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(INVALID_JSON_STRING);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconUrl) {\n+        JSONObject jsonObject = new JSONObject();\n+        try {\n+            jsonObject.put(STORED_URL, cahceIconUrl);\n+            long timeDifferenceInMilliSeconds = DaysOld * 1000 * 60 * 60 * 24;\n+            jsonObject.put(LAST_UPDATED_TIME, System.currentTimeMillis() - timeDifferenceInMilliSeconds);\n+            return jsonObject.toString();\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private String getMD5HashFromIconUrl(String iconUrl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwNDc4Nw=="}, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4NjMwNw==", "bodyText": "Can we remove the extra lines here?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401686307", "createdAt": "2020-04-01T15:03:55Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(35));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(15));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconPath) {\n+        JSONObject jsonObject = new JSONObject();\n+        try {\n+            jsonObject.put(STORED_PATH, cahceIconPath);\n+            long timeDifferenceInMilliSeconds = DaysOld * 1000 * 60 * 60 * 24;\n+            jsonObject.put(LAST_UPDATED_TIME, System.currentTimeMillis() - timeDifferenceInMilliSeconds);\n+            return jsonObject.toString();\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    private String getMD5HashFromIconUrl(String iconUrl) {\n+        String iconHash = null;\n+        try {\n+            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+            byte[] messageDigest = md.digest(iconUrl.getBytes());\n+            BigInteger no = new BigInteger(1, messageDigest);\n+            String hashtext = no.toString(16);\n+            while (hashtext.length() < 32) {\n+                hashtext = \"0\" + hashtext;\n+            }\n+            iconHash = hashtext;\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();\n+        }\n+        return iconHash;\n+    }\n+\n+    private String daysToMillisecondsAsString(int days) {\n+        long milliSeconds = (long) days * 24 * 60 * 60 * 1000;\n+        long previousDay = System.currentTimeMillis() - milliSeconds;\n+        return previousDay + \"\";\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNDYwNQ==", "bodyText": "Ahh, gotcha. Can we name the method isIconCachedAndValid() in that case and flip the returned result accordingly? I think that makes it easier to follow what is happening.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401704605", "createdAt": "2020-04-01T15:28:19Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +379,34 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.updateCachedImage(url)) {\n+\t\t\t\t\t\tLog.d(TAG, \"URL: \" + url);\n+\t\t\t\t\t\tLog.d(TAG, \"Image Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLog.d(TAG, \"Image Is Up To Date\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ5Nzk0NQ=="}, "originalCommit": {"oid": "641a48ce265b0203cd24c4c58816b109a0569d61"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjEwOA==", "bodyText": "the last three vars are not used anymore", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401712108", "createdAt": "2020-04-01T15:38:16Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxNzY4Ng==", "bodyText": "iconParameters has only the time now after removing the JOSN file. Can we rename the iconParameters var to iconLastUpdatedTime?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401717686", "createdAt": "2020-04-01T15:45:55Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMDExMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void writeDeviceIconParametersToSystemPreferences(String iconHash) {\n          \n          \n            \n                private void writeDeviceIconParametersToSharedPreferences(String iconHash) {", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401720113", "createdAt": "2020-04-01T15:49:04Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMTQwMw==", "bodyText": "I suggest using String valueOf(long l) instead of contacting an empty string to convert a long to string", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401721403", "createdAt": "2020-04-01T15:50:49Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+\n+        if (iconParameters != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSystemPreferences(String iconHash) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, System.currentTimeMillis() + \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyMjM5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String iconParameters = sharedPref.getString(iconHash, null);\n          \n          \n            \n                    String iconLastUpdatedTime = sharedPref.getString(iconHash, null);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401722394", "createdAt": "2020-04-01T15:52:16Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String TAG = \"LockScreenManager\";\n+\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean shouldUpdateCachedImage(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);\n+        if(iconParameters == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return true;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconParameters);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate >= 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSystemPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconParameters = sharedPref.getString(iconHash, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNDU0Ng==", "bodyText": "this is unused", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401724546", "createdAt": "2020-04-01T15:55:09Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTU5NQ==", "bodyText": "I am not sure why we still need that method if JSON is not used anymore", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r401725595", "createdAt": "2020-04-01T15:56:38Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManagerTests.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.util.AndroidTools;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mockito;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.isNull;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class LockScreenDeviceIconManagerTests extends AndroidTestCase2 {\n+\n+    TemporaryFolder tempFolder = new TemporaryFolder();\n+    private LockScreenDeviceIconManager lockScreenDeviceIconManager;\n+    private static final String ICON_URL = \"http://i.imgur.com/TgkvOIZ.png\";\n+    private static final String LAST_UPDATED_TIME = \"lastUpdatedTime\";\n+    private static final String STORED_PATH = \"storedPath\";\n+    private static final String INVALID_JSON_STRING = \"Invalid JSON\";\n+\n+    public void setup() throws Exception {\n+        super.setUp();\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenSharedPreferencesDoesNotExist() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueWhenUnableToReadSharedPreference() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnTrueSharedPreferenceReturnsAnOutdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(35));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertTrue(shouldUpdate);\n+    }\n+\n+    public void testUpdateCacheImageShouldReturnFalseWhenSharedPreferenceReturnsAnUpdatedIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(daysToMillisecondsAsString(15));\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        boolean shouldUpdate = lockScreenDeviceIconManager.shouldUpdateCachedImage(ICON_URL);\n+        assertFalse(shouldUpdate);\n+    }\n+\n+    public void testSaveFileToCacheShouldReturnBeforeWritingSharedPrefsIfSavingToCacheFails() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(0)).edit();\n+            verify(sharedPrefsEditor, times(0)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testSaveFileToCacheShouldWriteToSharedPrefsIfSaveIconIsSuccessful() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        Bitmap deviceLogo = null;\n+        try {\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+            lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+            verify(sharedPrefs, times(1)).edit();\n+            verify(sharedPrefsEditor, times(1)).putString(anyString(), anyString());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToGetSystemPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(null);\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfInvalidDataFromSharedPref() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(\"\");\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnNullIfFailedToFindIcon() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, \"\"));\n+\n+        try {\n+            tempFolder.create();\n+            Mockito.when(context.getCacheDir()).thenReturn(tempFolder.newFolder());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNull(cachedIcon);\n+    }\n+\n+    public void testGetFileFromCacheShouldReturnBitmapIfIconFoundInCache() {\n+        final SharedPreferences sharedPrefs = Mockito.mock(SharedPreferences.class);\n+        final SharedPreferences.Editor sharedPrefsEditor = Mockito.mock(SharedPreferences.Editor.class);\n+        final Context context = Mockito.mock(Context.class);\n+        Mockito.when(context.getSharedPreferences(anyString(), anyInt())).thenReturn(sharedPrefs);\n+        Mockito.when(sharedPrefs.edit()).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.remove(anyString())).thenReturn(sharedPrefsEditor);\n+        Mockito.when(sharedPrefsEditor.commit()).thenReturn(true);\n+        Bitmap deviceLogo = null;\n+\n+        try {\n+            tempFolder.create();\n+            File newFolder = tempFolder.newFolder();\n+            Mockito.when(context.getCacheDir()).thenReturn(newFolder);\n+            deviceLogo = AndroidTools.downloadImage(ICON_URL);\n+            Mockito.when(sharedPrefs.getString(anyString(), (String) isNull())).thenReturn(buildJSONAsString(15, newFolder.getPath() + \"/sdl/lock_screen_icon/\" + getMD5HashFromIconUrl(ICON_URL)));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        lockScreenDeviceIconManager = new LockScreenDeviceIconManager(context);\n+        lockScreenDeviceIconManager.saveFileToCache(deviceLogo, ICON_URL);\n+        Bitmap cachedIcon = lockScreenDeviceIconManager.getFileFromCache(ICON_URL);\n+        assertNotNull(cachedIcon);\n+    }\n+\n+    private String buildJSONAsString(long DaysOld, String cahceIconPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4105cbd349f557ea7af53647d268d2fc8cacd66d"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/8f0062e2da867e9e19b48d52bfb3d36f85ca6e74", "committedDate": "2020-04-01T17:10:23Z", "message": "Updates based on PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODYwMDkx", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-385860091", "createdAt": "2020-04-01T18:52:47Z", "commit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzIwNjE1", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-386720615", "createdAt": "2020-04-02T19:12:18Z", "commit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToxMjoxOFrOF_5t0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDoxNzoyN1rOF_72Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MDIyNQ==", "bodyText": "I assume that this and the test change are to allow it to use http:// URLs? In iOS we were forced to change all to https:// due to \"App Transport Security\", which basically just states that you can't connect to http without special exceptions baked into the app. So we take every http URL we get from the head unit and transform it into an https URL and hope that that works. Is that something we should align on @bilal-alsharifi? I think we probably should so that if an OEM tests only with Android an http URL it will work on iOS as well.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402550225", "createdAt": "2020-04-02T19:12:18Z", "author": {"login": "joeljfischer"}, "path": "android/hello_sdl_android/src/main/AndroidManifest.xml", "diffHunk": "@@ -17,6 +17,7 @@\n         android:icon=\"@mipmap/ic_launcher\"\n         android:label=\"@string/app_name\"\n         android:theme=\"@style/AppTheme\"\n+        android:usesCleartextTraffic=\"true\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1MjU0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n          \n          \n            \n                private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n          \n      \n    \n    \n  \n\nJust a suggestion to be clear with file and directory naming", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402552544", "createdAt": "2020-04-02T19:16:15Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2MDAxNA==", "bodyText": "On iOS, this logic is all contained by the SDLCacheFileManager (your LockScreenDeviceIconManager) itself, I think that's a better solution. iOS calls a method with a completion handler that returns either an image or an error.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402560014", "createdAt": "2020-04-02T19:29:43Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -376,16 +380,31 @@ private void downloadDeviceIcon(final String url){\n \t\t\t@Override\n \t\t\tpublic void run(){\n \t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\tif(mLockScreenDeviceIconManager.isIconCachedAndValid(url)) {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n+\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t\t\tif (deviceLogo == null) {\n+\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\t\t}\n+\t\t\t\t} catch(IOException e){\n+\t\t\t\t\tLog.e(TAG, \"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4Mjc1Mw==", "bodyText": "As mentioned above, I think a better entry into this class is something like:\nvoid retrieveIcon(String iconURL, OnImageRetrievedListener imageRetrievedListener)\nWhere OnImageRetrievedListener is something like:\ninterface OnImageRetrievedListener {\n\tvoid onImageRetrieved(Bitmap icon);\n\tvoid onError(String info);\n}", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402582753", "createdAt": "2020-04-02T20:12:07Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NTEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String getMD5HashFromIconUrl(String iconUrl) {\n          \n          \n            \n                private String getMD5HashFromIconUrl(String iconUrl) {", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402585138", "createdAt": "2020-04-02T20:17:27Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate < 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSharedPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+\n+        if (iconLastUpdatedTime != null) {\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            if(cachedIcon == null) {\n+                DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+                return null;\n+            } else {\n+                return cachedIcon;\n+            }\n+        } else {\n+            DebugTool.logError(\"Failed to get system preferences\");\n+            return null;\n+        }\n+    }\n+\n+    private void writeDeviceIconParametersToSharedPreferences(String iconHash) {\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        SharedPreferences.Editor editor = sharedPref.edit();\n+        editor.putString(iconHash, String.valueOf(System.currentTimeMillis()));\n+        editor.commit();\n+    }\n+\n+    String getMD5HashFromIconUrl(String iconUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzY1NzEw", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-386765710", "createdAt": "2020-04-02T20:24:11Z", "commit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDoyNDoxMVrOF_8A_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDoyNDoxMVrOF_8A_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4NzkwMg==", "bodyText": "Can this be private?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r402587902", "createdAt": "2020-04-02T20:24:11Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().remove(iconHash).commit();\n+            }\n+            long currentTime = System.currentTimeMillis();\n+\n+            long timeDifference = currentTime - lastUpdatedTime;\n+            long daysBetweenLastUpdate = timeDifference / (1000 * 60 * 60 * 24);\n+            return daysBetweenLastUpdate < 30;\n+        }\n+    }\n+\n+    void saveFileToCache(Bitmap icon, String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        File f = new File(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH, iconHash);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        icon.compress(Bitmap.CompressFormat.PNG, 0 /*ignored for PNG*/, bos);\n+        byte[] bitmapData = bos.toByteArray();\n+\n+        FileOutputStream fos = null;\n+        try {\n+            fos = new FileOutputStream(f);\n+            fos.write(bitmapData);\n+            fos.flush();\n+            fos.close();\n+        } catch (Exception e) {\n+            DebugTool.logError(\"Failed to save icon to cache\");\n+            e.printStackTrace();\n+            return;\n+        }\n+\n+        writeDeviceIconParametersToSharedPreferences(iconHash);\n+    }\n+\n+    Bitmap getFileFromCache(String iconUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f0062e2da867e9e19b48d52bfb3d36f85ca6e74"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/f9b3dba9e36564e370de47e08610077a5f933c5c", "committedDate": "2020-04-03T15:40:52Z", "message": "Pull logic into DeviceIconManager and use listener"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTA4NDQ1", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-388508445", "createdAt": "2020-04-06T18:25:40Z", "commit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoyNTo0MVrOGBkdGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo0NTo0MFrOGCHG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5OTAzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n          \n          \n            \n                            // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n          \n          \n            \n                            DebugTool.logInfo(\"Lock Screen Icon Update Needed\");", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404299034", "createdAt": "2020-04-06T18:25:41Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc4ODY3OA==", "bodyText": "Please add documentation to all methods", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404788678", "createdAt": "2020-04-07T13:00:01Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc5MDQ2MQ==", "bodyText": "Do you want to write the icon parameters to shared prefs if the write of the image to disk failed?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404790461", "createdAt": "2020-04-07T13:02:40Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -73,13 +105,13 @@ void saveFileToCache(Bitmap icon, String iconUrl) {\n         writeDeviceIconParametersToSharedPreferences(iconHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg0MjU5MQ==", "bodyText": "If the icon is null here, it should return an error, right?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404842591", "createdAt": "2020-04-07T14:14:43Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -18,15 +20,45 @@\n \n     private Context context;\n     private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n-    private static final String STORED_ICON_PATH = \"sdl/lock_screen_icon/\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n \n     LockScreenDeviceIconManager(Context context) {\n         this.context = context;\n-        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_PATH);\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n         lockScreenDirectory.mkdirs();\n     }\n \n-    boolean isIconCachedAndValid(String iconUrl) {\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                saveFileToCache(icon, iconURL);\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2NjE2MQ==", "bodyText": "I don't think that this is necessarily what we want to do here, unlike iOS. On iOS, all the image file information is contained in one file. So on iOS, when you clear the icon directory, the file went along with it. Here, if the directory is cleared, all the icon information remains in SharedPreferences. That means that attempting to retrieve an icon may fail and then we'll have a cascading set of retrieval failures because old data is contained in SharedPreferences that we know isn't accurate.\nI can think of a few possibilities to solve this:\n\nWe don't clear the icon directory if an error occurs. This isn't aligned with iOS' mitigation strategy and has the possibility of leaving icons in the directory that are unused.\nInstead of storing the data in separate SharedPreferences keys, use a single key, store the information in JSON and store the JSON in the SharedPreferences under that single key. Then when you clear the icon directory, you clear the JSON document as well.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404866161", "createdAt": "2020-04-07T14:44:47Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -73,13 +105,13 @@ void saveFileToCache(Bitmap icon, String iconUrl) {\n         writeDeviceIconParametersToSharedPreferences(iconHash);\n     }\n \n-    Bitmap getFileFromCache(String iconUrl) {\n+    private Bitmap getFileFromCache(String iconUrl) {\n         String iconHash = getMD5HashFromIconUrl(iconUrl);\n         SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n         String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n \n         if (iconLastUpdatedTime != null) {\n-            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_PATH + \"/\" + iconHash);\n+            Bitmap cachedIcon = BitmapFactory.decodeFile(this.context.getCacheDir() + \"/\" + STORED_ICON_DIRECTORY_PATH + \"/\" + iconHash);\n             if(cachedIcon == null) {\n                 DebugTool.logError(\"Failed to get Bitmap from decoding file cache\");\n                 clearIconDirectory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2Njc4NA==", "bodyText": "The indentation seems off on these", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r404866784", "createdAt": "2020-04-07T14:45:40Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -379,23 +379,17 @@ private void downloadDeviceIcon(final String url){\n \t\tnew Thread(new Runnable(){\n \t\t\t@Override\n \t\t\tpublic void run(){\n-\t\t\t\ttry{\n-\t\t\t\t\tif(mLockScreenDeviceIconManager.isIconCachedAndValid(url)) {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Image Is Up To Date\");\n-\t\t\t\t\t\tdeviceLogo = mLockScreenDeviceIconManager.getFileFromCache(url);\n-\t\t\t\t\t\tif (deviceLogo == null) {\n-\t\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tDebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n-\t\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n-\t\t\t\t\t\tmLockScreenDeviceIconManager.saveFileToCache(deviceLogo, url);\n+\t\t\t\tmLockScreenDeviceIconManager.retrieveIcon(url, new LockScreenDeviceIconManager.OnIconRetrievedListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b3dba9e36564e370de47e08610077a5f933c5c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0259aba1670b0268e61490f7e55d141132afd314", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0259aba1670b0268e61490f7e55d141132afd314", "committedDate": "2020-04-07T18:01:09Z", "message": "Adding documentation and PR changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDU2MDU3", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-389456057", "createdAt": "2020-04-07T20:14:34Z", "commit": {"oid": "0259aba1670b0268e61490f7e55d141132afd314"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNDozNFrOGCUXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNDozNFrOGCUXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDA0Mg==", "bodyText": "If the getFileFromCache returns a null icon, it shouldn't return it here. It should return an error through the onImageRetrieved, right?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405084042", "createdAt": "2020-04-07T20:14:34Z", "author": {"login": "joeljfischer"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                if (icon != null) {\n+                    saveFileToCache(icon, iconURL);\n+                    iconRetrievedListener.onImageRetrieved(icon);\n+                } else {\n+                    iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0259aba1670b0268e61490f7e55d141132afd314"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d01bfe8a9f5e03fccf47827ed574b7b9fa2b49", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/92d01bfe8a9f5e03fccf47827ed574b7b9fa2b49", "committedDate": "2020-04-07T20:46:20Z", "message": "Add null check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1", "committedDate": "2020-04-07T21:04:00Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTYwNDYw", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-389960460", "createdAt": "2020-04-08T13:13:33Z", "commit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTAzNTgx", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-390103581", "createdAt": "2020-04-08T15:48:53Z", "commit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTo0ODo1M1rOGC1icA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjozNzo1MlrOGC3kgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYyNzUwNA==", "bodyText": "There are some unused imports in the class", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405627504", "createdAt": "2020-04-08T15:48:53Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -82,11 +83,14 @@\n \tprivate boolean mLockScreenHasBeenDismissed, lockscreenDismissReceiverRegistered, receivedFirstDDNotification;\n \tprivate String mLockscreenWarningMsg;\n \tprivate BroadcastReceiver mLockscreenDismissedReceiver;\n+\tprivate LockScreenDeviceIconManager mLockScreenDeviceIconManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMTU4OA==", "bodyText": "can we get the url and replace it in one line?\ndeviceIconUrl = msg.getUrl().replace(\"http://\", \"https://\");", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405631588", "createdAt": "2020-04-08T15:54:22Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -232,6 +236,7 @@ public void onNotified(RPCNotification notification) {\n \t\t\t\t\t\t\tmsg.getUrl() != null) {\n \t\t\t\t\t\t// send intent to activity to download icon from core\n \t\t\t\t\t\tdeviceIconUrl = msg.getUrl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzMjc4MQ==", "bodyText": "Can we remove the changes from this file?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405632781", "createdAt": "2020-04-08T15:56:08Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/AndroidManifest.xml", "diffHunk": "@@ -6,13 +6,14 @@\n     <uses-permission android:name=\"android.permission.INTERNET\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0NTU0NA==", "bodyText": "what happens if the code hits the if statement on line 54 but failed to download the icon? I think it should call onError() in that case", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405645544", "createdAt": "2020-04-08T16:14:47Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY1NjcyMg==", "bodyText": "I don't think that will work. We are retrieving the icon in an async way and immediately use the icon without waiting for onImageRetrieved () to be called. I think deviceLogo will always be null. I suggest moving the code after the async call to be inside the onImageRetrieved() callback.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405656722", "createdAt": "2020-04-08T16:31:32Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenManager.java", "diffHunk": "@@ -375,17 +380,26 @@ private void downloadDeviceIcon(final String url){\n \t\tnew Thread(new Runnable(){\n \t\t\t@Override\n \t\t\tpublic void run(){\n-\t\t\t\ttry{\n-\t\t\t\t\tdeviceLogo = AndroidTools.downloadImage(url);\n+\t\t\t\tmLockScreenDeviceIconManager.retrieveIcon(url, new LockScreenDeviceIconManager.OnIconRetrievedListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onImageRetrieved(Bitmap icon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MDgwMQ==", "bodyText": "Just to confirm, this clears only the icon shared preferences not all shared prefs for the app, right?", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#discussion_r405660801", "createdAt": "2020-04-08T16:37:52Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/main/java/com/smartdevicelink/managers/lockscreen/LockScreenDeviceIconManager.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.smartdevicelink.managers.lockscreen;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import com.smartdevicelink.util.AndroidTools;\n+import com.smartdevicelink.util.DebugTool;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+/**\n+ * <strong>LockScreenDeviceIconManager</strong> <br>\n+ *\n+ * The LockScreenDeviceIconManager handles the logic of caching and retrieving cached lock screen icons <br>\n+ *\n+ */\n+class LockScreenDeviceIconManager {\n+\n+    private Context context;\n+    private static final String SDL_DEVICE_STATUS_SHARED_PREFS = \"sdl.lockScreenIcon\";\n+    private static final String STORED_ICON_DIRECTORY_PATH = \"sdl/lock_screen_icon/\";\n+\n+    interface OnIconRetrievedListener {\n+        void onImageRetrieved(Bitmap icon);\n+        void onError(String info);\n+    }\n+\n+    LockScreenDeviceIconManager(Context context) {\n+        this.context = context;\n+        File lockScreenDirectory = new File(context.getCacheDir(), STORED_ICON_DIRECTORY_PATH);\n+        lockScreenDirectory.mkdirs();\n+    }\n+\n+    /**\n+     * Will try to return a lock screen icon either from cache or downloaded\n+     * if it fails iconRetrievedListener.OnError will be called with corresponding error message\n+     * @param iconURL url that the lock screen icon is downloaded from\n+     * @param iconRetrievedListener an interface that will implement onIconReceived and OnError methods\n+     */\n+    void retrieveIcon(String iconURL, OnIconRetrievedListener iconRetrievedListener) {\n+        Bitmap icon = null;\n+        try {\n+            if (isIconCachedAndValid(iconURL)) {\n+                DebugTool.logInfo(\"Icon Is Up To Date\");\n+                icon = getFileFromCache(iconURL);\n+                if (icon == null) {\n+                    DebugTool.logInfo(\"Icon from cache was null, attempting to re-download\");\n+                    icon = AndroidTools.downloadImage(iconURL);\n+                    saveFileToCache(icon, iconURL);\n+                }\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                // The icon is unknown or expired. Download the image, save it to the cache, and update the archive file\n+                DebugTool.logInfo(\"Lock Screen Icon Update Needed\");\n+                icon = AndroidTools.downloadImage(iconURL);\n+                if (icon != null) {\n+                    saveFileToCache(icon, iconURL);\n+                    iconRetrievedListener.onImageRetrieved(icon);\n+                } else {\n+                    iconRetrievedListener.onError(\"Icon downloaded was null\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            iconRetrievedListener.onError(\"device Icon Error Downloading, Will attempt to grab cached Icon even if expired: \\n\" + e.toString());\n+            icon = getFileFromCache(iconURL);\n+            if (icon != null) {\n+                iconRetrievedListener.onImageRetrieved(icon);\n+            } else {\n+                iconRetrievedListener.onError(\"Unable to retrieve icon from cache\");\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Will decide if a cached icon is available and up to date\n+     * @param iconUrl url will be hashed and used to look up last updated timestamp in shared preferences\n+     * @return True when icon details are in shared preferences and less than 30 days old, False if icon details are too old or not found\n+     */\n+    private boolean isIconCachedAndValid(String iconUrl) {\n+        String iconHash = getMD5HashFromIconUrl(iconUrl);\n+        SharedPreferences sharedPref = this.context.getSharedPreferences(SDL_DEVICE_STATUS_SHARED_PREFS, Context.MODE_PRIVATE);\n+        String iconLastUpdatedTime = sharedPref.getString(iconHash, null);\n+        if(iconLastUpdatedTime == null) {\n+            DebugTool.logInfo(\"No Icon Details Found In Shared Preferences\");\n+            return false;\n+        } else {\n+            DebugTool.logInfo(\"Icon Details Found\");\n+            long lastUpdatedTime = 0;\n+            try {\n+                lastUpdatedTime = Long.parseLong(iconLastUpdatedTime);\n+            } catch (NumberFormatException e) {\n+                DebugTool.logInfo(\"Invalid time stamp stored to shared preferences, clearing cache and share preferences\");\n+                clearIconDirectory();\n+                sharedPref.edit().clear().commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f79a08ae69f2f45d0eb1c11bdfaf119a78adc1"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1831f2e8218f31bb9fb3128714b28ce4a32c6671", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/1831f2e8218f31bb9fb3128714b28ce4a32c6671", "committedDate": "2020-04-08T20:59:25Z", "message": "PR Changes requested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aaf1f77007fa170d9f8aa3fc3c1702c91ba21c8", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/0aaf1f77007fa170d9f8aa3fc3c1702c91ba21c8", "committedDate": "2020-04-08T21:57:29Z", "message": "Checkout manifest from develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2714061ca222d0282437ac2fc9a22c77da0e4ba8", "author": {"user": {"login": "RHenigan", "name": "Robert Henigan"}}, "url": "https://github.com/smartdevicelink/sdl_java_suite/commit/2714061ca222d0282437ac2fc9a22c77da0e4ba8", "committedDate": "2020-04-09T14:00:02Z", "message": "Add null check for downloaded image"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk1MTI0", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1319#pullrequestreview-390895124", "createdAt": "2020-04-09T15:24:36Z", "commit": {"oid": "2714061ca222d0282437ac2fc9a22c77da0e4ba8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2142, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}