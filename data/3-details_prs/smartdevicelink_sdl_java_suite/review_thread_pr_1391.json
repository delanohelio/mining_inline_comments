{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTg2OTc2", "number": 1391, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0NTo1N1rOEI6w1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMzozNVrOEKIHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg2ODM5OnYy", "diffSide": "RIGHT", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0NTo1N1rOGpLMEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0NTo1N1rOGpLMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyODExNA==", "bodyText": "I suggest showing the message in tetxtfiled1 instead of logging it because that is more visible to the user. That also applies to the javaSE app\nsdlManager.getScreenManager().setTextField1();", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r445828114", "createdAt": "2020-06-25T20:45:57Z", "author": {"login": "bilal-alsharifi"}, "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -370,6 +385,41 @@ public void onComplete(boolean success) {\n \t\t});\n \t}\n \n+\t/**\n+\t * Attempts to Subscribe to all preset buttons\n+\t */\n+\tprivate void subscribeToPresetButtons() {\n+\t\tonButtonListener = new OnButtonListener() {\n+\t\t\t@Override\n+\t\t\tpublic void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\t\t\t\tLog.i(TAG, \"onPress: \" + buttonName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg3NDA0OnYy", "diffSide": "RIGHT", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0ODowMVrOGpLP1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo0ODowMVrOGpLP1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyOTA3Ng==", "bodyText": "I suggest removing the unsubscribe feature from hello sdl menu because it is not very essential. Users will be more interested in testing subscribing than unsubscribing. After doing that buttonNames & onButtonListener   can be converted to local vars. This also applies to the javaSE app.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r445829076", "createdAt": "2020-06-25T20:48:01Z", "author": {"login": "bilal-alsharifi"}, "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -78,6 +82,9 @@\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n+\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDYwMDEwOnYy", "diffSide": "RIGHT", "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo0NDoxNVrOGpltLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTo0NDoxNVrOGpltLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2MjU3Mg==", "bodyText": "Can we let the app subscribe to this set of buttons instead? this works on Manticore with the default appType\nPLAY_PAUSE, SEEKLEFT, SEEKRIGHT, AC_MAX, AC, RECIRCULATE, FAN_UP, FAN_DOWN, TEMP_UP,TEMP_DOWN, DEFROST_MAX, DEFROST, DEFROST_REAR, UPPER_VENT, LOWER_VENT, VOLUME_UP, VOLUME_DOWN, EJECT, SOURCE, SHUFFLE, REPEAT", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446262572", "createdAt": "2020-06-26T15:44:15Z", "author": {"login": "bilal-alsharifi"}, "path": "android/hello_sdl_android/src/main/java/com/sdl/hellosdlandroid/SdlService.java", "diffHunk": "@@ -78,6 +82,9 @@\n \tprivate SdlManager sdlManager = null;\n \tprivate List<ChoiceCell> choiceCellList;\n \n+\tprivate ButtonName[] buttonNames = {ButtonName.PRESET_0, ButtonName.PRESET_1, ButtonName.PRESET_2, ButtonName.PRESET_3, ButtonName.PRESET_4, ButtonName.PRESET_5, ButtonName.PRESET_6, ButtonName.PRESET_7};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDg5NzY1OnYy", "diffSide": "RIGHT", "path": "baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoxNzoyMFrOGpoqSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoxNzoyMFrOGpoqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxMDk4Ng==", "bodyText": "Is there a reason for putting OnButtonListener.java and the symlink not on the same folder as SubscribeButtonManager? I think they should be in this path:\ncom/smartdevicelink/managers/screen/", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446310986", "createdAt": "2020-06-26T17:17:20Z", "author": {"login": "bilal-alsharifi"}, "path": "baseAndroid/src/main/java/com/smartdevicelink/managers/OnButtonListener.java", "diffHunk": "@@ -0,0 +1 @@\n+../../../../../../../base/src/main/java/com/smartdevicelink/managers/OnButtonListener.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDkyMTk2OnYy", "diffSide": "RIGHT", "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoyNTozNFrOGpo5oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzoyNTozNFrOGpo5oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxNDkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(!subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));\n          \n          \n            \n                    assertFalse(subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446314913", "createdAt": "2020-06-26T17:25:34Z", "author": {"login": "bilal-alsharifi"}, "path": "android/sdl_android/src/androidTest/java/com/smartdevicelink/managers/screen/SubscribeButtonManagerTest.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import com.smartdevicelink.AndroidTestCase2;\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.proxy.RPCMessage;\n+import com.smartdevicelink.proxy.RPCRequest;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.SubscribeButtonResponse;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButtonResponse;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+\n+public class SubscribeButtonManagerTest extends AndroidTestCase2 {\n+    private SubscribeButtonManager subscribeButtonManager;\n+    private ISdl internalInterface;\n+\n+    private Answer<Void> onSubscribe_UnsubscribeSuccess = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if(message instanceof SubscribeButton){\n+                SubscribeButtonResponse subscribeButtonResponse = new SubscribeButtonResponse();\n+                subscribeButtonResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(message.getCorrelationID(),subscribeButtonResponse);\n+            }\n+            if(message instanceof UnsubscribeButton) {\n+                UnsubscribeButtonResponse unsubscribeButtonResponse = new UnsubscribeButtonResponse();\n+                unsubscribeButtonResponse.setSuccess(true);\n+                message.getOnRPCResponseListener().onResponse(message.getCorrelationID(), unsubscribeButtonResponse);\n+            }\n+            return null;\n+        }\n+    };\n+\n+\n+    private Answer<Void> onSubscribeFail = new Answer<Void>() {\n+        @Override\n+        public Void answer(InvocationOnMock invocation) {\n+            Object[] args = invocation.getArguments();\n+            RPCRequest message = (RPCRequest) args[0];\n+            if(message instanceof SubscribeButton){\n+                SubscribeButtonResponse subscribeButtonResponse = new SubscribeButtonResponse();\n+                subscribeButtonResponse.setSuccess(false);\n+                message.getOnRPCResponseListener().onError(message.getCorrelationID(), Result.GENERIC_ERROR, \"Fail\");\n+            }\n+            return null;\n+        }\n+    };\n+    private OnButtonListener listener = new OnButtonListener() {\n+        @Override\n+        public void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\n+        }\n+\n+        @Override\n+        public void onEvent(ButtonName buttonName, OnButtonEvent buttonEvent) {\n+\n+        }\n+\n+        @Override\n+        public void onError(String info) {\n+\n+        }\n+    };\n+\n+    private OnButtonListener listener2 = new OnButtonListener() {\n+        @Override\n+        public void onPress(ButtonName buttonName, OnButtonPress buttonPress) {\n+\n+        }\n+\n+        @Override\n+        public void onEvent(ButtonName buttonName, OnButtonEvent buttonEvent) {\n+\n+        }\n+\n+        @Override\n+        public void onError(String info) {\n+\n+        }\n+    };\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        internalInterface = mock(ISdl.class);\n+        subscribeButtonManager = new SubscribeButtonManager(internalInterface);\n+    }\n+\n+    public void testInstantiation(){\n+        assertNotNull(subscribeButtonManager.onButtonListeners);\n+        assertEquals(subscribeButtonManager.getState(), BaseSubManager.SETTING_UP);\n+    }\n+\n+    public void testDispose() {\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        subscribeButtonManager.dispose();\n+        assertTrue(subscribeButtonManager.onButtonListeners == null);\n+    }\n+\n+    public void testAddButtonListener() {\n+        doAnswer(onSubscribe_UnsubscribeSuccess).when(internalInterface).sendRPC(any(RPCMessage.class));\n+\n+        subscribeButtonManager.addButtonListener(null, null);\n+        assertTrue(subscribeButtonManager.onButtonListeners.size() == 0);\n+\n+        subscribeButtonManager.addButtonListener(null, listener);\n+        assertTrue(subscribeButtonManager.onButtonListeners.size() == 0);\n+\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        assertTrue(subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));\n+\n+    }\n+\n+    public void testAddButtonListenerError(){\n+        doAnswer(onSubscribeFail).when(internalInterface).sendRPC(any(RPCMessage.class));\n+        subscribeButtonManager.addButtonListener(ButtonName.VOLUME_UP, listener);\n+        assertTrue(!subscribeButtonManager.onButtonListeners.containsKey(ButtonName.VOLUME_UP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk0NzY3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzozNDozNlrOGppKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzozNDozNlrOGppKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxOTIyMw==", "bodyText": "just to avoid potential NPEs\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    onButtonListeners = null;\n          \n          \n            \n                    onButtonListeners.clear();", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446319223", "createdAt": "2020-06-26T17:34:36Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk2NDA1OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0MDowNVrOGppUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0MDowNVrOGppUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTgyOQ==", "bodyText": "You can pass the button name in the constructor and remove this line.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446321829", "createdAt": "2020-06-26T17:40:05Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);\n+                onButtonListeners.put(buttonName, new CopyOnWriteArrayList<OnButtonListener>());\n+                onButtonListeners.get(buttonName).add(listener);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        subscribeButtonRequest.setButtonName(buttonName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk2NDYzOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0MDoxNFrOGppU-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0MDoxNFrOGppU-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMTkxNA==", "bodyText": "You can pass the button name in the constructor and remove this line.", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446321914", "createdAt": "2020-06-26T17:40:14Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk4MDM3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0NToyMVrOGppeqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0NToyMVrOGppeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNDM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446324394", "createdAt": "2020-06-26T17:45:21Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk4ODY2OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0ODoxOFrOGppj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0ODoxOFrOGppj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n          \n          \n            \n                            listener.onError(info);\n          \n          \n            \n                            listener.onError(\"Attempt to unsubscribe to button named \" + buttonName + \" Failed . ResultCode: \" + resultCode + \" info: \" + info);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446325744", "createdAt": "2020-06-26T17:48:18Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk5NTc0OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MDozNlrOGppoSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MDozNlrOGppoSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNjg1OA==", "bodyText": "line spacing is not very consistent throughout the file", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446326858", "createdAt": "2020-06-26T17:50:36Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDk5ODY1OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MTozOVrOGppqHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MTozOVrOGppqHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNzMyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n          \n          \n            \n                        Log.w(TAG, \"Already subscribed to button named: \" + buttonName);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446327327", "createdAt": "2020-06-26T17:51:39Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAwMzIyOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MzoxMFrOGpptBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MzoxMFrOGpptBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"OnButtonListener cannot be null: \");\n          \n          \n            \n                        Log.e(TAG, \"OnButtonListener cannot be null\");", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446328068", "createdAt": "2020-06-26T17:53:10Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAwNDUwOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MzozNVrOGppt3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1MzozNVrOGppt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODI4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"ButtonName cannot be null\");", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446328286", "createdAt": "2020-06-26T17:53:35Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAxNDEyOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1NzowNFrOGpp0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1NzowNFrOGpp0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyOTg4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n          \n          \n            \n                        listener.onError(\"Attempting to unsubscribe to the \" + buttonName + \" button failed because it is not currently subscribed\");", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446329883", "createdAt": "2020-06-26T17:57:04Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAyMTM3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1OToyOFrOGpp40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1OToyOFrOGpp40Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMTA4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n          \n          \n            \n                            listener.onError(info);\n          \n          \n            \n                            listener.onError(\"Attempt to subscribe to button named \" + buttonName + \" Failed . ResultCode: \" + resultCode + \" info: \" + info);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446331089", "createdAt": "2020-06-26T17:59:28Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);\n+                onButtonListeners.put(buttonName, new CopyOnWriteArrayList<OnButtonListener>());\n+                onButtonListeners.get(buttonName).add(listener);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to subscribe to subscribe button named \" + buttonName + \" Failed \" + info);\n+                listener.onError(info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAyMjUxOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1OTo0OFrOGpp5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1OTo0OFrOGpp5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMTI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446331271", "createdAt": "2020-06-26T17:59:48Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully unsubscribed to subscribe button named \" + buttonName);\n+                onButtonListeners.remove(buttonName);\n+            }\n+\n+            @Override\n+            public void onError(int correlationId, Result resultCode, String info) {\n+                Log.e(TAG, \"Attempt to unsubscribe to subscribe button named \" + buttonName);\n+                listener.onError(info);\n+            }\n+        });\n+\n+        internalInterface.sendRPC(unsubscribeButtonRequest);\n+    }\n+\n+    /**\n+     * Send the SubscribeButton RPC\n+     *\n+     * @param buttonName - ButtonName - name of button\n+     * @param listener   - OnButtonListener - listener to get notified\n+     */\n+    private void subscribeButtonRequest(final ButtonName buttonName, final OnButtonListener listener) {\n+        SubscribeButton subscribeButtonRequest = new SubscribeButton();\n+\n+        subscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {\n+\n+            @Override\n+            public void onResponse(int correlationId, RPCResponse response) {\n+                Log.d(TAG, \"Successfully subscribed to button named \" + buttonName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAyODIxOnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowMTo1N1rOGpp9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODowMTo1N1rOGpp9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMzMjIyMg==", "bodyText": "I suggest adding a separate method called unsubscribeButtonRequest() similar to subscribeButtonRequest() for more consistency", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r446332222", "createdAt": "2020-06-26T18:01:57Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.managers.OnButtonListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners = null;\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.d(TAG, \"Subscribe button with name \" + buttonName + \" is already subscribed\");\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null || !onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.e(TAG, \"Attempting to unsubscribe to the \" + buttonName + \" subscribe button which is not currently subscribed: \");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).size() > 1) {\n+            onButtonListeners.get(buttonName).remove(listener);\n+            return;\n+        }\n+\n+        UnsubscribeButton unsubscribeButtonRequest = new UnsubscribeButton();\n+        unsubscribeButtonRequest.setButtonName(buttonName);\n+        unsubscribeButtonRequest.setOnRPCResponseListener(new OnRPCResponseListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49646d926aed791dc23188c5ecb8983a4765418c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDQ5MTA3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMzoyNlrOGq-38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMzoyNlrOGq-38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMzUwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    onButtonListeners.clear();\n          \n          \n            \n                    if (onButtonListeners != null) {\n          \n          \n            \n                        onButtonListeners.clear();\n          \n          \n            \n                    }", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r447723504", "createdAt": "2020-06-30T14:23:26Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU0MjU3OnYy", "diffSide": "RIGHT", "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMzozNVrOGq_Xzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozMzozNVrOGq_Xzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMTY2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Log.e(TAG, \"ButtonName cannot be null\");\n          \n          \n            \n                        return;", "url": "https://github.com/smartdevicelink/sdl_java_suite/pull/1391#discussion_r447731663", "createdAt": "2020-06-30T14:33:35Z", "author": {"login": "bilal-alsharifi"}, "path": "base/src/main/java/com/smartdevicelink/managers/screen/BaseSubscribeButtonManager.java", "diffHunk": "@@ -0,0 +1,191 @@\n+package com.smartdevicelink.managers.screen;\n+\n+import android.support.annotation.NonNull;\n+import android.util.Log;\n+\n+import com.smartdevicelink.managers.BaseSubManager;\n+import com.smartdevicelink.managers.CompletionListener;\n+import com.smartdevicelink.protocol.enums.FunctionID;\n+import com.smartdevicelink.proxy.RPCNotification;\n+import com.smartdevicelink.proxy.RPCResponse;\n+import com.smartdevicelink.proxy.interfaces.ISdl;\n+import com.smartdevicelink.proxy.rpc.OnButtonEvent;\n+import com.smartdevicelink.proxy.rpc.OnButtonPress;\n+import com.smartdevicelink.proxy.rpc.SubscribeButton;\n+import com.smartdevicelink.proxy.rpc.UnsubscribeButton;\n+import com.smartdevicelink.proxy.rpc.enums.ButtonName;\n+import com.smartdevicelink.proxy.rpc.enums.Result;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCNotificationListener;\n+import com.smartdevicelink.proxy.rpc.listeners.OnRPCResponseListener;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+/**\n+ * <strong>SubscribeButtonManager</strong> <br>\n+ * <p>\n+ * Note: This class must be accessed through the SdlManager. Do not instantiate it by itself. <br>\n+ */\n+abstract class BaseSubscribeButtonManager extends BaseSubManager {\n+\n+    private static final String TAG = \"SubscribeButtonManager\";\n+    HashMap<ButtonName, CopyOnWriteArrayList<OnButtonListener>> onButtonListeners;\n+    private OnRPCNotificationListener onButtonPressListener;\n+    private OnRPCNotificationListener onButtonEventListener;\n+\n+    BaseSubscribeButtonManager(@NonNull ISdl internalInterface) {\n+        super(internalInterface);\n+        setRpcNotificationListeners();\n+        onButtonListeners = new HashMap<>();\n+    }\n+\n+    @Override\n+    public void start(CompletionListener listener) {\n+        transitionToState(READY);\n+        super.start(listener);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        onButtonListeners.clear();\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_PRESS, onButtonPressListener);\n+        internalInterface.removeOnRPCNotificationListener(FunctionID.ON_BUTTON_EVENT, onButtonEventListener);\n+    }\n+\n+    /***\n+     * Checks to see if Button is already subscribed and adds listener to hashmap.\n+     * If button is not already subscribed to, it call method:\n+     * subscribeButtonRequest to send RPC request\n+     * @param buttonName - Is the button that the developer wants to subscribe to\n+     * @param listener - Is the listener that was sent by developer\n+     */\n+    void addButtonListener(ButtonName buttonName, OnButtonListener listener) {\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null\");\n+            return;\n+        }\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName) == null) {\n+            subscribeButtonRequest(buttonName, listener);\n+            return;\n+        }\n+\n+        if (onButtonListeners.get(buttonName).contains(listener)) {\n+            Log.w(TAG, \"Already subscribed to button named: \" + buttonName);\n+            return;\n+        }\n+        onButtonListeners.get(buttonName).add(listener);\n+    }\n+\n+    /**\n+     * Unsubscribe form button and/or listener sent by developer\n+     *\n+     * @param buttonName Is the button that the developer wants to unsubscribe from\n+     * @param listener   - the listener that was sent by developer\n+     */\n+    void removeButtonListener(final ButtonName buttonName, final OnButtonListener listener) {\n+        if (listener == null) {\n+            Log.e(TAG, \"OnButtonListener cannot be null: \");\n+            return;\n+        }\n+\n+        if (buttonName == null) {\n+            listener.onError(\"ButtonName cannot be null\");\n+            Log.e(TAG, \"ButtonName cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bc9c5ee75ec40266009f03a3e27f06b1dc01bbf"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}