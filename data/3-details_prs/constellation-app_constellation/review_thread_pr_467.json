{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDM2NTQ5", "number": 467, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzo1MVrOD30r1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxOTo0NVrOD4YTOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYxNDYxOnYy", "diffSide": "RIGHT", "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzo1MVrOGOTNbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0MDoxM1rOGOW4GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg==", "bodyText": "Weren't these changes made in one of your other PRs?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417647982", "createdAt": "2020-04-29T22:23:51Z", "author": {"login": "antares1470"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MzczMA==", "bodyText": "Yep - this branches off that and so contains the same changes.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417683730", "createdAt": "2020-04-30T00:10:07Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwODA1Ng==", "bodyText": "@cygnus-x-1 if that's the case then this PR will have to wait until the regex change gets properly tested. If you wen't off master this would have been better IMHO.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417708056", "createdAt": "2020-04-30T01:40:13Z", "author": {"login": "arcturus2"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYxNzg1OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNTowOFrOGOTPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMDoyM1rOGOVZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0ODUwNA==", "bodyText": "Probably easier to have StringUtils.isBlank(string)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417648504", "createdAt": "2020-04-29T22:25:08Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java", "diffHunk": "@@ -46,8 +46,8 @@ public RawAttributeDescription() {\n \n     @Override\n     protected RawData convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4Mzc5Nw==", "bodyText": "I keep forgetting this exists - thanks :)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417683797", "createdAt": "2020-04-30T00:10:23Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java", "diffHunk": "@@ -46,8 +46,8 @@ public RawAttributeDescription() {\n \n     @Override\n     protected RawData convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isBlank()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0ODUwNA=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYyMTkxOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNjo1NFrOGOTSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNjo1NFrOGOTSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTE3Mg==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649172", "createdAt": "2020-04-29T22:26:54Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java", "diffHunk": "@@ -50,8 +50,8 @@ public TransactionTypeAttributeDescription() {\n \n     @Override\n     protected SchemaTransactionType convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODYyMzQxOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNzoyN1rOGOTTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNzoyN1rOGOTTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTQwOA==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649408", "createdAt": "2020-04-29T22:27:27Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java", "diffHunk": "@@ -50,19 +50,19 @@ public VertexTypeAttributeDescription() {\n     }\n \n     @Override\n-    protected SchemaVertexType convertFromString(final String value) {\n-        if (value == null) {\n-            return defaultValue;\n+    protected SchemaVertexType convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODY1MDc2OnYy", "diffSide": "RIGHT", "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/whatsnew/whatsnew.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjozODoyMlrOGOTjJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozMzowOFrOGOVzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MzU0MA==", "bodyText": "Is the average user going to understand what is happening here? I suspect this might be better as a changelog entry", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417653540", "createdAt": "2020-04-29T22:38:22Z", "author": {"login": "antares1470"}, "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/whatsnew/whatsnew.txt", "diffHunk": "@@ -3,6 +3,7 @@\n \n == 2020-04-20 Data Access View\n <p>You can now remove a previously saved preference in Data Access View under Options -> Load.</p>\n+<p>Added support for double attribute types for when high precision is required, as well as byte and short attribute types for when memory efficiency is required.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MDQ4Ng==", "bodyText": "I tend to think of the changelog as a place to document API changes for developers and what's new to document user facing changes. This is a user facing change, and while not all users may understand this feature, i'd argue this change likely isn't relevant to those users.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417690486", "createdAt": "2020-04-30T00:33:08Z", "author": {"login": "cygnus-x-1"}, "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/whatsnew/whatsnew.txt", "diffHunk": "@@ -3,6 +3,7 @@\n \n == 2020-04-20 Data Access View\n <p>You can now remove a previously saved preference in Data Access View under Options -> Load.</p>\n+<p>Added support for double attribute types for when high precision is required, as well as byte and short attribute types for when memory efficiency is required.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MzU0MA=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODY1NTQwOnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo0MDowNFrOGOTlyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMTo0NlrOGOVa6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDIxOA==", "bodyText": "I believe this should be 'random' instead of 'RANDOM' to follow the naming convention", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417654218", "createdAt": "2020-04-29T22:40:04Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -16,71 +16,78 @@\n package au.gov.asd.tac.constellation.graph.attribute;\n \n import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n import java.lang.reflect.InvocationTargetException;\n+import java.security.SecureRandom;\n import java.util.Arrays;\n \n /**\n+ * Describes an attribute backed by a class which extends Object. This provides\n+ * many default implementations to make attribute type creation quick and easy.\n  *\n  * @param <T> the type of object stored by this description.\n  * @author cygnus_x-1\n  */\n public abstract class AbstractObjectAttributeDescription<T extends Object> extends AbstractAttributeDescription {\n-    \n+\n+    protected final SecureRandom RANDOM = new SecureRandom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDIwMA==", "bodyText": "I blindly copy/pasted this... good pick.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684200", "createdAt": "2020-04-30T00:11:46Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -16,71 +16,78 @@\n package au.gov.asd.tac.constellation.graph.attribute;\n \n import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n import java.lang.reflect.InvocationTargetException;\n+import java.security.SecureRandom;\n import java.util.Arrays;\n \n /**\n+ * Describes an attribute backed by a class which extends Object. This provides\n+ * many default implementations to make attribute type creation quick and easy.\n  *\n  * @param <T> the type of object stored by this description.\n  * @author cygnus_x-1\n  */\n public abstract class AbstractObjectAttributeDescription<T extends Object> extends AbstractAttributeDescription {\n-    \n+\n+    protected final SecureRandom RANDOM = new SecureRandom();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDIxOA=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODY3MDgyOnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo0NjoyNVrOGOTuxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjowMDo0MVrOGOXLpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw==", "bodyText": "I know we want to capture as many exceptions here as possible but I still think it might be better to only catch the relevant ones here (e.g. I wouldn't expect an IO exception to occur here)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417656517", "createdAt": "2020-04-29T22:46:25Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDQ4MA==", "bodyText": "I originally did convert this to specific exceptions, however later thought that it'd be safer to catch all exceptions since convertFromString is an overridable method.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684480", "createdAt": "2020-04-30T00:12:54Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNTgyMQ==", "bodyText": "I still think my preference would be catch the specific exceptions rather than the generic catch-all and then adjust the catches as need be. If for no other reason, sonar has a rule for avoiding catching generic exceptions and so if we can avoid introducing unnecessary code smells then that would be a preference", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417705821", "createdAt": "2020-04-30T01:31:23Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxMDg3NQ==", "bodyText": "I've set convertFromString with a throws IllegalArgumentException, and i'm now explicitely catching that. The problem is that we can't predict what the implementation will actually throw in terms of runtime exceptions, so if anything unplanned happens you will get a nasty popup instead of a message in the editor ui saying the value is invalid. Does this work for you @arcturus2, @antares1470?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417710875", "createdAt": "2020-04-30T01:51:29Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxMzA2Mg==", "bodyText": "I'll leave the call to @arcturus2. The nasty pop up isn't ideal but may be a necessary risk. In theory, we could apply this thinking to a lot of functions in the code base but I'm not sure we want to take it that far", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417713062", "createdAt": "2020-04-30T02:00:41Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODcwMTc2OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjo1OTo1MFrOGOUBMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMzoxNFrOGOVcUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTIzMg==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417661232", "createdAt": "2020-04-29T22:59:50Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright 2010-2019 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.attribute;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.NativeAttributeType;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n+import java.util.Arrays;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * This describes a type of attribute whose values are primitive bytes.\n+ * <p>\n+ * When setting these attribute values from numeric types, the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #setString setString()} method will utilise\n+ * {@link Byte#parseByte}. The {@link #setBoolean setBoolean()} method will\n+ * yield 1 for true and 0 for false.\n+ * <p>\n+ * When retrieving these attribute values as numeric types the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #getString getString()} method will utilise {@link String#valueOf}.\n+ * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n+ * for any other value.\n+ *\n+ * @author cygnus_x-1\n+ */\n+@ServiceProvider(service = AttributeDescription.class)\n+public class ByteAttributeDescription extends AbstractAttributeDescription {\n+    \n+    public static final String ATTRIBUTE_NAME = \"byte\";\n+    public static final Class<Byte> NATIVE_CLASS = byte.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.BYTE;\n+    private static final byte DEFAULT_VALUE = 0;\n+    \n+    private byte[] data = new byte[0];\n+    private byte defaultValue = DEFAULT_VALUE;\n+\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private byte convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (byte) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).byteValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? (byte) 1 : (byte) 0;\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to byte\", object.getClass()));\n+        }\n+    }\n+\n+    private byte convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {\n+            return (byte) getDefault();\n+        } else {\n+            return Byte.parseByte(string);\n+        }\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return ATTRIBUTE_NAME;\n+    }\n+\n+    @Override\n+    public Class<?> getNativeClass() {\n+        return NATIVE_CLASS;\n+    }\n+    \n+    @Override\n+    public NativeAttributeType getNativeType() {\n+        return NATIVE_TYPE;\n+    }\n+\n+    @Override\n+    public Object getDefault() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public void setDefault(final Object value) {\n+        defaultValue = convertFromObject(value);\n+    }\n+\n+    @Override\n+    public int getCapacity() {\n+        return data.length;\n+    }\n+\n+    @Override\n+    public void setCapacity(final int capacity) {\n+        final int len = data.length;\n+        data = Arrays.copyOf(data, capacity);\n+        if (capacity > len) {\n+            Arrays.fill(data, len, capacity, defaultValue);\n+        }\n+    }\n+\n+    @Override\n+    public byte getByte(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public void setByte(final int id, final byte value) {\n+        data[id] = value;\n+    }\n+\n+    @Override\n+    public short getShort(final int id) {\n+        return (short) data[id];\n+    }\n+\n+    @Override\n+    public void setShort(final int id, final short value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public int getInt(final int id) {\n+        return (int) data[id];\n+    }\n+\n+    @Override\n+    public void setInt(final int id, final int value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public long getLong(final int id) {\n+        return (long) data[id];\n+    }\n+\n+    @Override\n+    public void setLong(final int id, final long value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public float getFloat(final int id) {\n+        return (float) data[id];\n+    }\n+\n+    @Override\n+    public void setFloat(final int id, final float value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public double getDouble(final int id) {\n+        return (double) data[id];\n+    }\n+\n+    @Override\n+    public void setDouble(final int id, final double value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(final int id) {\n+        return data[id] != (byte) 0;\n+    }\n+\n+    @Override\n+    public void setBoolean(final int id, final boolean value) {\n+        data[id] = value ? (byte) 1 : (byte) 0;\n+    }\n+\n+    @Override\n+    public char getChar(final int id) {\n+        return (char) data[id];\n+    }\n+\n+    @Override\n+    public void setChar(final int id, final char value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public String getString(final int id) {\n+        return String.valueOf(data[id]);\n+    }\n+\n+    @Override\n+    public void setString(final int id, final String value) {\n+        data[id] = convertFromString(value);\n+    }\n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDU2MQ==", "bodyText": "This one, however, can be made specific :)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417684561", "createdAt": "2020-04-30T00:13:14Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright 2010-2019 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.attribute;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.NativeAttributeType;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n+import java.util.Arrays;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * This describes a type of attribute whose values are primitive bytes.\n+ * <p>\n+ * When setting these attribute values from numeric types, the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #setString setString()} method will utilise\n+ * {@link Byte#parseByte}. The {@link #setBoolean setBoolean()} method will\n+ * yield 1 for true and 0 for false.\n+ * <p>\n+ * When retrieving these attribute values as numeric types the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #getString getString()} method will utilise {@link String#valueOf}.\n+ * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n+ * for any other value.\n+ *\n+ * @author cygnus_x-1\n+ */\n+@ServiceProvider(service = AttributeDescription.class)\n+public class ByteAttributeDescription extends AbstractAttributeDescription {\n+    \n+    public static final String ATTRIBUTE_NAME = \"byte\";\n+    public static final Class<Byte> NATIVE_CLASS = byte.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.BYTE;\n+    private static final byte DEFAULT_VALUE = 0;\n+    \n+    private byte[] data = new byte[0];\n+    private byte defaultValue = DEFAULT_VALUE;\n+\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private byte convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (byte) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).byteValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? (byte) 1 : (byte) 0;\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to byte\", object.getClass()));\n+        }\n+    }\n+\n+    private byte convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {\n+            return (byte) getDefault();\n+        } else {\n+            return Byte.parseByte(string);\n+        }\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return ATTRIBUTE_NAME;\n+    }\n+\n+    @Override\n+    public Class<?> getNativeClass() {\n+        return NATIVE_CLASS;\n+    }\n+    \n+    @Override\n+    public NativeAttributeType getNativeType() {\n+        return NATIVE_TYPE;\n+    }\n+\n+    @Override\n+    public Object getDefault() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public void setDefault(final Object value) {\n+        defaultValue = convertFromObject(value);\n+    }\n+\n+    @Override\n+    public int getCapacity() {\n+        return data.length;\n+    }\n+\n+    @Override\n+    public void setCapacity(final int capacity) {\n+        final int len = data.length;\n+        data = Arrays.copyOf(data, capacity);\n+        if (capacity > len) {\n+            Arrays.fill(data, len, capacity, defaultValue);\n+        }\n+    }\n+\n+    @Override\n+    public byte getByte(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public void setByte(final int id, final byte value) {\n+        data[id] = value;\n+    }\n+\n+    @Override\n+    public short getShort(final int id) {\n+        return (short) data[id];\n+    }\n+\n+    @Override\n+    public void setShort(final int id, final short value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public int getInt(final int id) {\n+        return (int) data[id];\n+    }\n+\n+    @Override\n+    public void setInt(final int id, final int value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public long getLong(final int id) {\n+        return (long) data[id];\n+    }\n+\n+    @Override\n+    public void setLong(final int id, final long value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public float getFloat(final int id) {\n+        return (float) data[id];\n+    }\n+\n+    @Override\n+    public void setFloat(final int id, final float value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public double getDouble(final int id) {\n+        return (double) data[id];\n+    }\n+\n+    @Override\n+    public void setDouble(final int id, final double value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(final int id) {\n+        return data[id] != (byte) 0;\n+    }\n+\n+    @Override\n+    public void setBoolean(final int id, final boolean value) {\n+        data[id] = value ? (byte) 1 : (byte) 0;\n+    }\n+\n+    @Override\n+    public char getChar(final int id) {\n+        return (char) data[id];\n+    }\n+\n+    @Override\n+    public void setChar(final int id, final char value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public String getString(final int id) {\n+        return String.valueOf(data[id]);\n+    }\n+\n+    @Override\n+    public void setString(final int id, final String value) {\n+        data[id] = convertFromString(value);\n+    }\n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTIzMg=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODcxMTU5OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzowNDo0MVrOGOUHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzowNDo0MVrOGOUHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2Mjc4Nw==", "bodyText": "StringUtils.isBlank(string)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417662787", "createdAt": "2020-04-29T23:04:41Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java", "diffHunk": "@@ -21,58 +21,51 @@\n import org.openide.util.lookup.ServiceProvider;\n \n /**\n- * Hyperlink attribute.\n+ * This describes a type of attribute whose values are URIs.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public class HyperlinkAttributeDescription extends AbstractObjectAttributeDescription<URI> {\n \n     public static final String ATTRIBUTE_NAME = \"hyperlink\";\n     public static final Class<URI> NATIVE_CLASS = URI.class;\n     public static final URI DEFAULT_VALUE = null;\n-    \n-    private static final String ERROR_CONVERTING_MESSAGE = \"Error converting object to hyperlink: \";\n \n     public HyperlinkAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\") //Casts are manually checked\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n     protected URI convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof URI) {\n-            return (URI) object;\n-        } else if (object instanceof URL) {\n-            try {\n-                return ((URL) object).toURI();\n-            } catch (URISyntaxException ex) {\n-                throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof URL) {\n+                try {\n+                    return ((URL) object).toURI();\n+                } catch (final URISyntaxException ex2) {\n+                    throw new IllegalArgumentException(String.format(\n+                            \"Error converting Object '%s' to hyperlink\", object.getClass()));\n+                }\n+            } else {\n+                throw ex;\n             }\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else {\n-            throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n         }\n     }\n \n     @Override\n-    protected URI convertFromString(String string) {\n-        if (string == null) {\n-            return null;\n+    protected URI convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODczMjA4OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxMzo1OVrOGOUThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozNDowOVrOGOV0vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTkyNQ==", "bodyText": "Believe it or not but sonar reckons the cast is actually necessary (seems to think we re parsing longBitsToDouble an integer)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417665925", "createdAt": "2020-04-29T23:13:59Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,14 +716,14 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MDgxNQ==", "bodyText": "I don't believe it... but sure, reverted.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417690815", "createdAt": "2020-04-30T00:34:09Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,14 +716,14 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTkyNQ=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODc0MzM3OnYy", "diffSide": "RIGHT", "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxOToxOVrOGOUaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoxOToxOVrOGOUaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzY2MA==", "bodyText": "StringUtils.isBlank", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667660", "createdAt": "2020-04-29T23:19:19Z", "author": {"login": "antares1470"}, "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java", "diffHunk": "@@ -38,12 +38,11 @@ public BlazeAttributeDescription() {\n \n     @Override\n     protected Blaze convertFromString(String string) {\n-        return Blaze.valueOf(string);\n-    }\n-\n-    @Override\n-    public boolean canBeImported() {\n-        return false;\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODc0NTAxOnYy", "diffSide": "RIGHT", "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyMDowNVrOGOUbPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyMDowNVrOGOUbPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzkwMQ==", "bodyText": "StringUtils.isBlank", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667901", "createdAt": "2020-04-29T23:20:05Z", "author": {"login": "antares1470"}, "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java", "diffHunk": "@@ -48,37 +48,35 @@ public ColorAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n+    private ConstellationColor fromInt(final Integer integer) {\n+        final float red = (integer >>> 24) / 255.0f;\n+        final float green = ((integer >>> 16) & 0xFF) / 255.0f;\n+        final float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n+        final float alpha = (integer & 0xFF) / 255.0f;\n+        return ConstellationColor.getColorValue(red, green, blue, alpha);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\") //Casts are checked manually\n     public ConstellationColor convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof Integer) {\n-            return fromInt((int) object);\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else if (object instanceof ConstellationColor) {\n-            return (ConstellationColor) object;\n-        } else {\n-            throw new IllegalArgumentException(String.format(\"Error converting '%s' to ColorAttributeDescription\", object.getClass()));\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof Integer) {\n+                return fromInt((int) object);\n+            } else {\n+                throw ex;\n+            }\n         }\n     }\n \n     @Override\n     protected ConstellationColor convertFromString(final String string) {\n-        return fromString(string);\n-    }\n-\n-    private ConstellationColor fromInt(Integer integer) {\n-        float red = (integer >>> 24) / 255.0f;\n-        float green = ((integer >>> 16) & 0xFF) / 255.0f;\n-        float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n-        float alpha = (integer & 0xFF) / 255.0f;\n-        return ConstellationColor.getColorValue(red, green, blue, alpha);\n-    }\n-\n-    private ConstellationColor fromString(String string) {\n-        return ConstellationColor.getColorValue(string);\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODc1NDYyOnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNDozN1rOGOUhAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNDozN1rOGOUhAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2OTM3Ng==", "bodyText": "StringUtils.isBlank()", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417669376", "createdAt": "2020-04-29T23:24:37Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java", "diffHunk": "@@ -38,15 +38,44 @@\n  * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n  * for any other value.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public final class IntegerAttributeDescription extends AbstractAttributeDescription {\n \n     public static final String ATTRIBUTE_NAME = \"integer\";\n+    public static final Class<Integer> NATIVE_CLASS = int.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.INT;\n     public static final int DEFAULT_VALUE = 0;\n-    private int defaultValue = DEFAULT_VALUE;\n+    \n     private int[] data = new int[0];\n+    private int defaultValue = DEFAULT_VALUE;\n+    \n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private int convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (int) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).intValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? 1 : 0;\n+        } else if (object instanceof Character) {\n+            return (int) ((Character) object);\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to integer\", object.getClass()));\n+        }\n+    }\n+\n+    private int convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODc2MDg5OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNzozOVrOGOUk2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNzozOVrOGOUk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDM2MQ==", "bodyText": "More specific exceptions", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417670361", "createdAt": "2020-04-29T23:27:39Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java", "diffHunk": "@@ -215,19 +208,29 @@ public String getString(final int id) {\n \n     @Override\n     public void setString(final int id, final String value) {\n-        data[id] = Boolean.parseBoolean(value);\n+        data[id] = convertFromString(value);\n     }\n \n     @Override\n-    public String acceptsString(String value) {\n+    public String acceptsString(final String value) {\n         try {\n-            setString(value);\n+            convertFromString(value);\n             return null;\n-        } catch (Exception ex) {\n-            return \"Not a valid boolean value\";\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTAwMjU2OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozNzo1MlrOGOW1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozNzo1MlrOGOW1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQyMw==", "bodyText": "I think there were a couple instances of this in the lines below that also need to be reverted (casting a long that is)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417707423", "createdAt": "2020-04-30T01:37:52Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,7 +716,7 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTAxMzY2OnYy", "diffSide": "LEFT", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0NDoyNFrOGOW8Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzozNTo0M1rOGOYg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTEyMg==", "bodyText": "Can you walk me through why this case doesn't need to be considered anymore?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417709122", "createdAt": "2020-04-30T01:44:24Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java", "diffHunk": "@@ -515,7 +517,7 @@ private void buildIntervals(final GraphWriteMethods wgcopy, final ArrayList<Floa\n             // Only use transactions that have a datetime value set.\n             final long date = wgcopy.getLongValue(dtAttr, txId);\n \n-            if (date != ZonedDateTimeAttributeDescription.NULL_VALUE && d1t <= date && date < d2t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNDkwNQ==", "bodyText": "This check is against the long value of a datetime. ZonedDateTimeAttributeDescription.DEFAULT_VALUE is a ZonedDateTime (and defaults to null), so the comparison doesn't make sense. I suspect it was a long at one point in time as the defaults for LocalDateTimeAttributeDescription, DateAttributeDescription and TimeAttributeDescription were all longs - however this would still be bad design as it assumes the user has chosen an attribute backed by ZonedDateTimeAttributeDescription.ATTRIBUTE_TYPE while still supporting attributes backed by other datetime types.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417734905", "createdAt": "2020-04-30T03:35:43Z", "author": {"login": "cygnus-x-1"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java", "diffHunk": "@@ -515,7 +517,7 @@ private void buildIntervals(final GraphWriteMethods wgcopy, final ArrayList<Floa\n             // Only use transactions that have a datetime value set.\n             final long date = wgcopy.getLongValue(dtAttr, txId);\n \n-            if (date != ZonedDateTimeAttributeDescription.NULL_VALUE && d1t <= date && date < d2t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTEyMg=="}, "originalCommit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDMwMjMxOnYy", "diffSide": "LEFT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyMjo1MlrOGPJjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMzo1N1rOGPK0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzODM4MA==", "bodyText": "From what I can tell this is removed because it hasn't been used anywhere by any other class.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418538380", "createdAt": "2020-05-01T13:22:52Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java", "diffHunk": "@@ -53,108 +53,93 @@ public NativeAttributeType getNativeType() {\n     }\n \n     @Override\n-    public byte getByte(int id) {\n+    public byte getByte(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n     }\n \n     @Override\n-    public void setByte(int id, byte value) {\n+    public void setByte(final int id, final byte value) {\n         throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n     }\n \n     @Override\n-    public short getShort(int id) {\n+    public short getShort(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n     }\n \n     @Override\n-    public void setShort(int id, short value) {\n+    public void setShort(final int id, final short value) {\n         throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n     }\n \n     @Override\n-    public int getInt(int id) {\n+    public int getInt(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n     }\n \n     @Override\n-    public void setInt(int id, int value) {\n+    public void setInt(final int id, final int value) {\n         throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n     }\n \n     @Override\n-    public long getLong(int id) {\n+    public long getLong(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n     }\n \n     @Override\n-    public void setLong(int id, long value) {\n+    public void setLong(final int id, final long value) {\n         throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n     }\n \n     @Override\n-    public float getFloat(int id) {\n+    public float getFloat(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n     }\n \n     @Override\n-    public void setFloat(int id, float value) {\n+    public void setFloat(final int id, final float value) {\n         throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n     }\n \n     @Override\n-    public double getDouble(int id) {\n+    public double getDouble(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n     }\n \n     @Override\n-    public void setDouble(int id, double value) {\n+    public void setDouble(final int id, final double value) {\n         throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n     }\n \n     @Override\n-    public boolean getBoolean(int id) {\n+    public boolean getBoolean(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n     }\n \n     @Override\n-    public void setBoolean(int id, boolean value) {\n+    public void setBoolean(final int id, final boolean value) {\n         throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n     }\n \n     @Override\n-    public char getChar(int id) {\n+    public char getChar(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n     }\n \n     @Override\n-    public void setChar(int id, char value) {\n+    public void setChar(final int id, final char value) {\n         throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n     }\n \n     @Override\n-    public String getSearchString(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1OTAxOA==", "bodyText": "Correct. I think there were a couple of methods I removed from AttributeDescription for the same reason.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418559018", "createdAt": "2020-05-01T14:13:57Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java", "diffHunk": "@@ -53,108 +53,93 @@ public NativeAttributeType getNativeType() {\n     }\n \n     @Override\n-    public byte getByte(int id) {\n+    public byte getByte(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n     }\n \n     @Override\n-    public void setByte(int id, byte value) {\n+    public void setByte(final int id, final byte value) {\n         throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n     }\n \n     @Override\n-    public short getShort(int id) {\n+    public short getShort(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n     }\n \n     @Override\n-    public void setShort(int id, short value) {\n+    public void setShort(final int id, final short value) {\n         throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n     }\n \n     @Override\n-    public int getInt(int id) {\n+    public int getInt(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n     }\n \n     @Override\n-    public void setInt(int id, int value) {\n+    public void setInt(final int id, final int value) {\n         throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n     }\n \n     @Override\n-    public long getLong(int id) {\n+    public long getLong(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n     }\n \n     @Override\n-    public void setLong(int id, long value) {\n+    public void setLong(final int id, final long value) {\n         throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n     }\n \n     @Override\n-    public float getFloat(int id) {\n+    public float getFloat(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n     }\n \n     @Override\n-    public void setFloat(int id, float value) {\n+    public void setFloat(final int id, final float value) {\n         throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n     }\n \n     @Override\n-    public double getDouble(int id) {\n+    public double getDouble(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n     }\n \n     @Override\n-    public void setDouble(int id, double value) {\n+    public void setDouble(final int id, final double value) {\n         throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n     }\n \n     @Override\n-    public boolean getBoolean(int id) {\n+    public boolean getBoolean(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n     }\n \n     @Override\n-    public void setBoolean(int id, boolean value) {\n+    public void setBoolean(final int id, final boolean value) {\n         throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n     }\n \n     @Override\n-    public char getChar(int id) {\n+    public char getChar(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n     }\n \n     @Override\n-    public void setChar(int id, char value) {\n+    public void setChar(final int id, final char value) {\n         throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n     }\n \n     @Override\n-    public String getSearchString(int id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzODM4MA=="}, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDMwODcxOnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyNTozMVrOGPJnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxNzo0OVrOGPK6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTM3NA==", "bodyText": "This feels a bit dangerous - won't we get NPE by not checking for null?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418539374", "createdAt": "2020-05-01T13:25:31Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MDY0Nw==", "bodyText": "It's not dangerous as String.valueOf(null) returns \"null\"... but it does seem wrong and i'm not sure why I changed it to that. It may have just been an oversight - I'll change it back.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418560647", "createdAt": "2020-05-01T14:17:49Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTM3NA=="}, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDQ0OTg1OnYy", "diffSide": "LEFT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxOTo0NVrOGPK90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMzoyODozNlrOGPYL_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ==", "bodyText": "@cygnus-x-1 is this removed as a cleanup activity? Unfortunately I need all of these deprecated classes to remain to open old graphs that have written data with these attribute descriptions.\nAn idea I had was perhaps we could move all of these deprecated classes into a \"Attributes(Deprecated)\" module so that everyone else does not have to worry about them?\nWhen I get an update site running this \"deprecated\" module can be turned off by default too to avoid everyone having to deal with these legacy formats.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418561491", "createdAt": "2020-05-01T14:19:45Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "diffHunk": "@@ -1,223 +0,0 @@\n-/*\n- * Copyright 2010-2019 Australian Signals Directorate\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package au.gov.asd.tac.constellation.graph.attribute.compatibility;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU3OTA3OQ==", "bodyText": "Yes - this was removed as part of cleaning up and normalising attributes. The issue here is that this attribute type is no longer supported (and can be broken), but because it's still 'registered' as an attribute it is available for use in the Attribute Editor, Delimited File Importer, etc. Rather than update the deprecated class, I figured it was easier to just remove it; after all that is the point of deprecation. Perhaps it's time to update those old graphs?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418579079", "createdAt": "2020-05-01T14:58:58Z", "author": {"login": "cygnus-x-1"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "diffHunk": "@@ -1,223 +0,0 @@\n-/*\n- * Copyright 2010-2019 Australian Signals Directorate\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package au.gov.asd.tac.constellation.graph.attribute.compatibility;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ=="}, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODc3ODEwOQ==", "bodyText": "Can do (eventually). For now though can we keep them for a bit longer but start with removing the ServiceProvider annotation so they don't appear in the views? Doing this type of cleanup makes sense now that we are in v2 and I'm OK with that - I'll just need the classes around for a bit longer rather than having to troll through git history \ud83d\ude04.\nFeel free to add a big comment saying which ones you think are broken too as that will help me.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418778109", "createdAt": "2020-05-01T23:28:36Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "diffHunk": "@@ -1,223 +0,0 @@\n-/*\n- * Copyright 2010-2019 Australian Signals Directorate\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package au.gov.asd.tac.constellation.graph.attribute.compatibility;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ=="}, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2318, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}