{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDM2NTQ5", "number": 467, "title": "attribute-update", "bodyText": "Description of the Change\nAdded support for double, short and byte attribute types.\nRemoved the unused 'attr_list' attribute type.\nUpdated 'datetime' and 'local_datetime' attribute types to be backed by objects.\nDisabled Atribute Editor editor ui for 'raw' attribute type as they are uneditable.\nNormalised code style across attribute classes, which has the side-effect of ensuring standardised validation for all attribute types\nNote: I also attempted to update all class headers to use the current year, but that would have changed >2000 files. I couldn't properly revert this as it was mixed in with other changes, so I instead changed them all back to 2019. This means there will be several files whose only change is they year in the header - but it will be far less that 2000 files. I will submit a separate pull request updating the headers to 2020.\nWhy Should This Be In Core?\nThis exposes all basic attribute types supported by the graph framework (except for char, which is a bit trickier to implement).\nVerification Process\nI manually tested creating, editing, saving, loading and deleting every attribute type.\nApplicable Issues\n#421", "createdAt": "2020-04-29T01:10:05Z", "url": "https://github.com/constellation-app/constellation/pull/467", "merged": true, "mergeCommit": {"oid": "d4fc7754dd3d8d1044391dbbea7691601abea96f"}, "closed": true, "closedAt": "2020-05-05T01:00:25Z", "author": {"login": "cygnus-x-1"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcao2tCAH2gAyNDEwNDM2NTQ5OjE2NjBiN2EyM2VmNDgxNjc1MzUxMjQ0N2ZiODlkYmEzOWJiMjcxYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd0fAagH2gAyNDEwNDM2NTQ5OmQ3ODUyZTAzNWIxZTFlY2VjMzhlZjQ0MmY5OTc1NzJlYTc2YzZiYzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1660b7a23ef4816753512447fb89dba39bb271c2", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/1660b7a23ef4816753512447fb89dba39bb271c2", "committedDate": "2020-04-24T03:24:04Z", "message": ":art: fixed some sonarqube security hotspots and bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "208070d51608109b8fe8478830a60787f30ae534", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/208070d51608109b8fe8478830a60787f30ae534", "committedDate": "2020-04-24T03:24:15Z", "message": "Merge branch 'master' of https://github.com/constellation-app/constellation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f7ef99de562397e37c2413e2cc99a0bbb0ebc5", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/91f7ef99de562397e37c2413e2cc99a0bbb0ebc5", "committedDate": "2020-04-24T10:05:06Z", "message": ":art: added default javafx stylesheets (caspian and modena)\n:art: added unit test for vertex type detection and validation\n:bug: fixed a couple of issues with type regex strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05dee16620cf2a24435bb5de722e4235b554a553", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/05dee16620cf2a24435bb5de722e4235b554a553", "committedDate": "2020-04-24T12:16:59Z", "message": ":bug: updated PasswordObfuscator and PasswordDeobfuscator to use a secure mode and padding scheme\n:art: fixed an incorrect assignment in UndoGraphEditState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9670743dde2a068b103ed1db6a96c3385e17fcac", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/9670743dde2a068b103ed1db6a96c3385e17fcac", "committedDate": "2020-04-24T12:17:50Z", "message": "oops... i forgot to all all files in the last commit...\n:bug: updated PasswordObfuscator and PasswordDeobfuscator to use a secure mode and padding scheme\n:art: fixed an incorrect assignment in UndoGraphEditState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5775e42bae290301be4603a1b22d86d5d37170", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/2b5775e42bae290301be4603a1b22d86d5d37170", "committedDate": "2020-04-24T12:18:10Z", "message": "Merge branch 'master' of https://github.com/constellation-app/constellation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ae5a1ca65e88e500d72bdff821749d6fce8e5e", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/91ae5a1ca65e88e500d72bdff821749d6fce8e5e", "committedDate": "2020-04-24T12:56:48Z", "message": ":art: renamed scatter arrangement to \"Scatter 3D\" and updated arrangement menu ordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5a2d7e9cbac4b7f4e12ec6979063ae73e98949", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/6c5a2d7e9cbac4b7f4e12ec6979063ae73e98949", "committedDate": "2020-04-24T13:01:43Z", "message": ":art: updated author name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9128b03f2f6ae18a5e95b3185bd06602920a9f8d", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/9128b03f2f6ae18a5e95b3185bd06602920a9f8d", "committedDate": "2020-04-24T13:03:36Z", "message": ":art: fixed a minor typo\n:art: updated to latest JRE11 (in a previous commit)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba92ea25a093c4c4c35236091984329181f2bb88", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/ba92ea25a093c4c4c35236091984329181f2bb88", "committedDate": "2020-04-28T02:46:26Z", "message": ":art: updated build script with the correct jre references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e1ed55423c7850c475a5d56b4bd06aca5f33369", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/8e1ed55423c7850c475a5d56b4bd06aca5f33369", "committedDate": "2020-04-28T02:49:24Z", "message": "Merge branch 'master' into regex-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "177878f215aedcf91fde657fbeb2c932dc81dd28", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/177878f215aedcf91fde657fbeb2c932dc81dd28", "committedDate": "2020-04-28T15:10:28Z", "message": ":art: added support for double, short and byte attribute types\n:art: removed unused 'attr_list' attribute type\n:art: updated datetime attribute types to be backed by objects\n:art: disabled editor for 'raw' attribute type\n:art: ensured validation for all relevent attribute types\n:art: normalised code style across attribute classes\n:art: updated class headers with the current year"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7f7035ebdd3b2310055cceb5615b3a887b784fe", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/b7f7035ebdd3b2310055cceb5615b3a887b784fe", "committedDate": "2020-04-29T00:10:22Z", "message": ":art: attempting to revert header year update (i'll do this on a seperate branch)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88737c4b36421de193b255497f3c03af6b317542", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/88737c4b36421de193b255497f3c03af6b317542", "committedDate": "2020-04-29T00:55:38Z", "message": "Merge branch 'master' into attribute-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a6d8267a2c068b2bf7688114b5ace7c32835f0e", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/6a6d8267a2c068b2bf7688114b5ace7c32835f0e", "committedDate": "2020-04-29T01:13:50Z", "message": ":art: re-updated some class headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754", "committedDate": "2020-04-29T01:34:26Z", "message": ":art: updated what's new\n:art: updated magic string references in Histogram\n:art: updated author tags for attribute descriptions which changed significantly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDgyNjI3", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-403082627", "createdAt": "2020-04-29T22:23:50Z", "commit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzo1MVrOGOTNbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMzo1MVrOGOTNbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg==", "bodyText": "Weren't these changes made in one of your other PRs?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417647982", "createdAt": "2020-04-29T22:23:51Z", "author": {"login": "antares1470"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDgzMjI0", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-403083224", "createdAt": "2020-04-29T22:25:08Z", "commit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyNTowOFrOGOTPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzoyNzozOVrOGOUk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0ODUwNA==", "bodyText": "Probably easier to have StringUtils.isBlank(string)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417648504", "createdAt": "2020-04-29T22:25:08Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/RawAttributeDescription.java", "diffHunk": "@@ -46,8 +46,8 @@ public RawAttributeDescription() {\n \n     @Override\n     protected RawData convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTE3Mg==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649172", "createdAt": "2020-04-29T22:26:54Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/TransactionTypeAttributeDescription.java", "diffHunk": "@@ -50,8 +50,8 @@ public TransactionTypeAttributeDescription() {\n \n     @Override\n     protected SchemaTransactionType convertFromString(final String string) {\n-        if (string == null) {\n-            return defaultValue;\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0OTQwOA==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417649408", "createdAt": "2020-04-29T22:27:27Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/attribute/VertexTypeAttributeDescription.java", "diffHunk": "@@ -50,19 +50,19 @@ public VertexTypeAttributeDescription() {\n     }\n \n     @Override\n-    protected SchemaVertexType convertFromString(final String value) {\n-        if (value == null) {\n-            return defaultValue;\n+    protected SchemaVertexType convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MzU0MA==", "bodyText": "Is the average user going to understand what is happening here? I suspect this might be better as a changelog entry", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417653540", "createdAt": "2020-04-29T22:38:22Z", "author": {"login": "antares1470"}, "path": "CoreFunctionality/src/au/gov/asd/tac/constellation/functionality/whatsnew/whatsnew.txt", "diffHunk": "@@ -3,6 +3,7 @@\n \n == 2020-04-20 Data Access View\n <p>You can now remove a previously saved preference in Data Access View under Options -> Load.</p>\n+<p>Added support for double attribute types for when high precision is required, as well as byte and short attribute types for when memory efficiency is required.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NDIxOA==", "bodyText": "I believe this should be 'random' instead of 'RANDOM' to follow the naming convention", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417654218", "createdAt": "2020-04-29T22:40:04Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -16,71 +16,78 @@\n package au.gov.asd.tac.constellation.graph.attribute;\n \n import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n import java.lang.reflect.InvocationTargetException;\n+import java.security.SecureRandom;\n import java.util.Arrays;\n \n /**\n+ * Describes an attribute backed by a class which extends Object. This provides\n+ * many default implementations to make attribute type creation quick and easy.\n  *\n  * @param <T> the type of object stored by this description.\n  * @author cygnus_x-1\n  */\n public abstract class AbstractObjectAttributeDescription<T extends Object> extends AbstractAttributeDescription {\n-    \n+\n+    protected final SecureRandom RANDOM = new SecureRandom();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1NjUxNw==", "bodyText": "I know we want to capture as many exceptions here as possible but I still think it might be better to only catch the relevant ones here (e.g. I wouldn't expect an IO exception to occur here)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417656517", "createdAt": "2020-04-29T22:46:25Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);\n     }\n-    \n+\n     @Override\n     public void setString(final int id, final String value) {\n         data[id] = convertFromString(value);\n     }\n-    \n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MTIzMg==", "bodyText": "Ditto above", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417661232", "createdAt": "2020-04-29T22:59:50Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/ByteAttributeDescription.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/*\n+ * Copyright 2010-2019 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.attribute;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.NativeAttributeType;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterReadAccess;\n+import au.gov.asd.tac.constellation.graph.locking.ParameterWriteAccess;\n+import java.util.Arrays;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * This describes a type of attribute whose values are primitive bytes.\n+ * <p>\n+ * When setting these attribute values from numeric types, the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #setString setString()} method will utilise\n+ * {@link Byte#parseByte}. The {@link #setBoolean setBoolean()} method will\n+ * yield 1 for true and 0 for false.\n+ * <p>\n+ * When retrieving these attribute values as numeric types the values are\n+ * implicitly or explicitly cast as necessary. The\n+ * {@link #getString getString()} method will utilise {@link String#valueOf}.\n+ * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n+ * for any other value.\n+ *\n+ * @author cygnus_x-1\n+ */\n+@ServiceProvider(service = AttributeDescription.class)\n+public class ByteAttributeDescription extends AbstractAttributeDescription {\n+    \n+    public static final String ATTRIBUTE_NAME = \"byte\";\n+    public static final Class<Byte> NATIVE_CLASS = byte.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.BYTE;\n+    private static final byte DEFAULT_VALUE = 0;\n+    \n+    private byte[] data = new byte[0];\n+    private byte defaultValue = DEFAULT_VALUE;\n+\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private byte convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (byte) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).byteValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? (byte) 1 : (byte) 0;\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to byte\", object.getClass()));\n+        }\n+    }\n+\n+    private byte convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {\n+            return (byte) getDefault();\n+        } else {\n+            return Byte.parseByte(string);\n+        }\n+    }\n+    \n+    @Override\n+    public String getName() {\n+        return ATTRIBUTE_NAME;\n+    }\n+\n+    @Override\n+    public Class<?> getNativeClass() {\n+        return NATIVE_CLASS;\n+    }\n+    \n+    @Override\n+    public NativeAttributeType getNativeType() {\n+        return NATIVE_TYPE;\n+    }\n+\n+    @Override\n+    public Object getDefault() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public void setDefault(final Object value) {\n+        defaultValue = convertFromObject(value);\n+    }\n+\n+    @Override\n+    public int getCapacity() {\n+        return data.length;\n+    }\n+\n+    @Override\n+    public void setCapacity(final int capacity) {\n+        final int len = data.length;\n+        data = Arrays.copyOf(data, capacity);\n+        if (capacity > len) {\n+            Arrays.fill(data, len, capacity, defaultValue);\n+        }\n+    }\n+\n+    @Override\n+    public byte getByte(final int id) {\n+        return data[id];\n+    }\n+\n+    @Override\n+    public void setByte(final int id, final byte value) {\n+        data[id] = value;\n+    }\n+\n+    @Override\n+    public short getShort(final int id) {\n+        return (short) data[id];\n+    }\n+\n+    @Override\n+    public void setShort(final int id, final short value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public int getInt(final int id) {\n+        return (int) data[id];\n+    }\n+\n+    @Override\n+    public void setInt(final int id, final int value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public long getLong(final int id) {\n+        return (long) data[id];\n+    }\n+\n+    @Override\n+    public void setLong(final int id, final long value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public float getFloat(final int id) {\n+        return (float) data[id];\n+    }\n+\n+    @Override\n+    public void setFloat(final int id, final float value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public double getDouble(final int id) {\n+        return (double) data[id];\n+    }\n+\n+    @Override\n+    public void setDouble(final int id, final double value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public boolean getBoolean(final int id) {\n+        return data[id] != (byte) 0;\n+    }\n+\n+    @Override\n+    public void setBoolean(final int id, final boolean value) {\n+        data[id] = value ? (byte) 1 : (byte) 0;\n+    }\n+\n+    @Override\n+    public char getChar(final int id) {\n+        return (char) data[id];\n+    }\n+\n+    @Override\n+    public void setChar(final int id, final char value) {\n+        data[id] = (byte) value;\n+    }\n+\n+    @Override\n+    public String getString(final int id) {\n+        return String.valueOf(data[id]);\n+    }\n+\n+    @Override\n+    public void setString(final int id, final String value) {\n+        data[id] = convertFromString(value);\n+    }\n+\n+    @Override\n+    public String acceptsString(final String value) {\n+        try {\n+            convertFromString(value);\n+            return null;\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2Mjc4Nw==", "bodyText": "StringUtils.isBlank(string)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417662787", "createdAt": "2020-04-29T23:04:41Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/HyperlinkAttributeDescription.java", "diffHunk": "@@ -21,58 +21,51 @@\n import org.openide.util.lookup.ServiceProvider;\n \n /**\n- * Hyperlink attribute.\n+ * This describes a type of attribute whose values are URIs.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public class HyperlinkAttributeDescription extends AbstractObjectAttributeDescription<URI> {\n \n     public static final String ATTRIBUTE_NAME = \"hyperlink\";\n     public static final Class<URI> NATIVE_CLASS = URI.class;\n     public static final URI DEFAULT_VALUE = null;\n-    \n-    private static final String ERROR_CONVERTING_MESSAGE = \"Error converting object to hyperlink: \";\n \n     public HyperlinkAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n     @Override\n-    @SuppressWarnings(\"unchecked\") //Casts are manually checked\n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n     protected URI convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof URI) {\n-            return (URI) object;\n-        } else if (object instanceof URL) {\n-            try {\n-                return ((URL) object).toURI();\n-            } catch (URISyntaxException ex) {\n-                throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof URL) {\n+                try {\n+                    return ((URL) object).toURI();\n+                } catch (final URISyntaxException ex2) {\n+                    throw new IllegalArgumentException(String.format(\n+                            \"Error converting Object '%s' to hyperlink\", object.getClass()));\n+                }\n+            } else {\n+                throw ex;\n             }\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else {\n-            throw new IllegalArgumentException(ERROR_CONVERTING_MESSAGE + object);\n         }\n     }\n \n     @Override\n-    protected URI convertFromString(String string) {\n-        if (string == null) {\n-            return null;\n+    protected URI convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTkyNQ==", "bodyText": "Believe it or not but sonar reckons the cast is actually necessary (seems to think we re parsing longBitsToDouble an integer)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417665925", "createdAt": "2020-04-29T23:13:59Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,14 +716,14 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzY2MA==", "bodyText": "StringUtils.isBlank", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667660", "createdAt": "2020-04-29T23:19:19Z", "author": {"login": "antares1470"}, "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/BlazeAttributeDescription.java", "diffHunk": "@@ -38,12 +38,11 @@ public BlazeAttributeDescription() {\n \n     @Override\n     protected Blaze convertFromString(String string) {\n-        return Blaze.valueOf(string);\n-    }\n-\n-    @Override\n-    public boolean canBeImported() {\n-        return false;\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NzkwMQ==", "bodyText": "StringUtils.isBlank", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417667901", "createdAt": "2020-04-29T23:20:05Z", "author": {"login": "antares1470"}, "path": "CoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/ColorAttributeDescription.java", "diffHunk": "@@ -48,37 +48,35 @@ public ColorAttributeDescription() {\n         super(ATTRIBUTE_NAME, NATIVE_CLASS, DEFAULT_VALUE);\n     }\n \n+    private ConstellationColor fromInt(final Integer integer) {\n+        final float red = (integer >>> 24) / 255.0f;\n+        final float green = ((integer >>> 16) & 0xFF) / 255.0f;\n+        final float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n+        final float alpha = (integer & 0xFF) / 255.0f;\n+        return ConstellationColor.getColorValue(red, green, blue, alpha);\n+    }\n+\n     @Override\n     @SuppressWarnings(\"unchecked\") //Casts are checked manually\n     public ConstellationColor convertFromObject(final Object object) {\n-        if (object == null) {\n-            return null;\n-        } else if (object instanceof Integer) {\n-            return fromInt((int) object);\n-        } else if (object instanceof String) {\n-            return convertFromString((String) object);\n-        } else if (object instanceof ConstellationColor) {\n-            return (ConstellationColor) object;\n-        } else {\n-            throw new IllegalArgumentException(String.format(\"Error converting '%s' to ColorAttributeDescription\", object.getClass()));\n+        try {\n+            return super.convertFromObject(object);\n+        } catch (final IllegalArgumentException ex) {\n+            if (object instanceof Integer) {\n+                return fromInt((int) object);\n+            } else {\n+                throw ex;\n+            }\n         }\n     }\n \n     @Override\n     protected ConstellationColor convertFromString(final String string) {\n-        return fromString(string);\n-    }\n-\n-    private ConstellationColor fromInt(Integer integer) {\n-        float red = (integer >>> 24) / 255.0f;\n-        float green = ((integer >>> 16) & 0xFF) / 255.0f;\n-        float blue = ((integer >>> 8) & 0xFF) / 255.0f;\n-        float alpha = (integer & 0xFF) / 255.0f;\n-        return ConstellationColor.getColorValue(red, green, blue, alpha);\n-    }\n-\n-    private ConstellationColor fromString(String string) {\n-        return ConstellationColor.getColorValue(string);\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2OTM3Ng==", "bodyText": "StringUtils.isBlank()", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417669376", "createdAt": "2020-04-29T23:24:37Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/IntegerAttributeDescription.java", "diffHunk": "@@ -38,15 +38,44 @@\n  * The {@link #getBoolean getBoolean()} method will return false for 0, and true\n  * for any other value.\n  *\n- * @author sirius\n+ * @author cygnus_x-1\n  */\n @ServiceProvider(service = AttributeDescription.class)\n public final class IntegerAttributeDescription extends AbstractAttributeDescription {\n \n     public static final String ATTRIBUTE_NAME = \"integer\";\n+    public static final Class<Integer> NATIVE_CLASS = int.class;\n+    public static final NativeAttributeType NATIVE_TYPE = NativeAttributeType.INT;\n     public static final int DEFAULT_VALUE = 0;\n-    private int defaultValue = DEFAULT_VALUE;\n+    \n     private int[] data = new int[0];\n+    private int defaultValue = DEFAULT_VALUE;\n+    \n+    @SuppressWarnings(\"unchecked\") // Casts are manually checked\n+    private int convertFromObject(final Object object) {\n+        if (object == null) {\n+            return (int) getDefault();\n+        } else if (object instanceof Number) {\n+            return ((Number) object).intValue();\n+        } else if (object instanceof Boolean) {\n+            return ((Boolean) object) ? 1 : 0;\n+        } else if (object instanceof Character) {\n+            return (int) ((Character) object);\n+        } else if (object instanceof String) {\n+            return convertFromString((String) object);\n+        } else {\n+            throw new IllegalArgumentException(String.format(\n+                    \"Error converting Object '%s' to integer\", object.getClass()));\n+        }\n+    }\n+\n+    private int convertFromString(final String string) {\n+        if (string == null || string.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MDM2MQ==", "bodyText": "More specific exceptions", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417670361", "createdAt": "2020-04-29T23:27:39Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/BooleanAttributeDescription.java", "diffHunk": "@@ -215,19 +208,29 @@ public String getString(final int id) {\n \n     @Override\n     public void setString(final int id, final String value) {\n-        data[id] = Boolean.parseBoolean(value);\n+        data[id] = convertFromString(value);\n     }\n \n     @Override\n-    public String acceptsString(String value) {\n+    public String acceptsString(final String value) {\n         try {\n-            setString(value);\n+            convertFromString(value);\n             return null;\n-        } catch (Exception ex) {\n-            return \"Not a valid boolean value\";\n+        } catch (final Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/6f56488b27080f12dcb01f8103d2c0e9fedb4fa3", "committedDate": "2020-04-30T00:39:26Z", "message": ":art: changes based on pull request feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTQ5NTg0", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-403149584", "createdAt": "2020-04-30T01:37:52Z", "commit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozNzo1MlrOGOW1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTozNzo1MlrOGOW1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwNzQyMw==", "bodyText": "I think there were a couple instances of this in the lines below that also need to be reverted (casting a long that is)", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417707423", "createdAt": "2020-04-30T01:37:52Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/undo/UndoGraphEditOperation.java", "diffHunk": "@@ -716,7 +716,7 @@ public void updateUndo(UndoGraphEditState state, int instruction) {\n         @Override\n         public void execute(UndoGraphEditState state, GraphWriteMethods graph) {\n             if (VERBOSE) {\n-                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");\n+                System.out.println(\"setDoubleValueOperation.execute(\" + state.getCurrentAttribute() + \", \" + state.getCurrentId() + \", \" + Double.longBitsToDouble((long) (Double.doubleToRawLongBits(graph.getDoubleValue(state.getCurrentAttribute(), state.getCurrentId())) ^ state.getCurrentDouble())) + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c06521190e56a762a3c219c175c5e0dfc566a73d", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/c06521190e56a762a3c219c175c5e0dfc566a73d", "committedDate": "2020-04-30T01:46:54Z", "message": ":art: missed a correction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b474aaa0b28e6f6f04460be55a37223d13e2b4b", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/4b474aaa0b28e6f6f04460be55a37223d13e2b4b", "committedDate": "2020-04-30T01:49:45Z", "message": ":art: and one more change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTUzMzk2", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-403153396", "createdAt": "2020-04-30T01:51:45Z", "commit": {"oid": "4b474aaa0b28e6f6f04460be55a37223d13e2b4b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTUwMjQ2", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-403150246", "createdAt": "2020-04-30T01:40:12Z", "commit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0MDoxM1rOGOW4GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0NDoyNFrOGOW8Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwODA1Ng==", "bodyText": "@cygnus-x-1 if that's the case then this PR will have to wait until the regex change gets properly tested. If you wen't off master this would have been better IMHO.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417708056", "createdAt": "2020-04-30T01:40:13Z", "author": {"login": "arcturus2"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/infomap/Edge.java", "diffHunk": "@@ -19,33 +19,33 @@\n  *\n  * @author algol\n  *\n- * @param <NodeType> the type of nodes the graph connects to.\n+ * @param <Node> the type of nodes this edge connects to.\n  */\n-public class Edge<NodeType extends NodeBase> {\n+public class Edge<Node extends NodeBase> {\n \n-    private final NodeType source;\n-    private final NodeType target;\n+    private final Node source;\n+    private final Node target;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0Nzk4Mg=="}, "originalCommit": {"oid": "3e83eb766aeb3fa8c7982e6c44c0fef5a89d1754"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTEyMg==", "bodyText": "Can you walk me through why this case doesn't need to be considered anymore?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r417709122", "createdAt": "2020-04-30T01:44:24Z", "author": {"login": "arcturus2"}, "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/time/LayerByTimePlugin.java", "diffHunk": "@@ -515,7 +517,7 @@ private void buildIntervals(final GraphWriteMethods wgcopy, final ArrayList<Floa\n             // Only use transactions that have a datetime value set.\n             final long date = wgcopy.getLongValue(dtAttr, txId);\n \n-            if (date != ZonedDateTimeAttributeDescription.NULL_VALUE && d1t <= date && date < d2t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f56488b27080f12dcb01f8103d2c0e9fedb4fa3"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d", "committedDate": "2020-04-30T03:43:06Z", "message": ":art: updated changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTU1ODQz", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-404155843", "createdAt": "2020-05-01T13:22:52Z", "commit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyMjo1MlrOGPJjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyMjo1MlrOGPJjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzODM4MA==", "bodyText": "From what I can tell this is removed because it hasn't been used anywhere by any other class.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418538380", "createdAt": "2020-05-01T13:22:52Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractAttributeDescription.java", "diffHunk": "@@ -53,108 +53,93 @@ public NativeAttributeType getNativeType() {\n     }\n \n     @Override\n-    public byte getByte(int id) {\n+    public byte getByte(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to byte\", getName()));\n     }\n \n     @Override\n-    public void setByte(int id, byte value) {\n+    public void setByte(final int id, final byte value) {\n         throw new IllegalArgumentException(String.format(\"Error converting byte to %s\", getName()));\n     }\n \n     @Override\n-    public short getShort(int id) {\n+    public short getShort(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to short\", getName()));\n     }\n \n     @Override\n-    public void setShort(int id, short value) {\n+    public void setShort(final int id, final short value) {\n         throw new IllegalArgumentException(String.format(\"Error converting short to %s\", getName()));\n     }\n \n     @Override\n-    public int getInt(int id) {\n+    public int getInt(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to int\", getName()));\n     }\n \n     @Override\n-    public void setInt(int id, int value) {\n+    public void setInt(final int id, final int value) {\n         throw new IllegalArgumentException(String.format(\"Error converting int to %s\", getName()));\n     }\n \n     @Override\n-    public long getLong(int id) {\n+    public long getLong(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to long\", getName()));\n     }\n \n     @Override\n-    public void setLong(int id, long value) {\n+    public void setLong(final int id, final long value) {\n         throw new IllegalArgumentException(String.format(\"Error converting long to %s\", getName()));\n     }\n \n     @Override\n-    public float getFloat(int id) {\n+    public float getFloat(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to float\", getName()));\n     }\n \n     @Override\n-    public void setFloat(int id, float value) {\n+    public void setFloat(final int id, final float value) {\n         throw new IllegalArgumentException(String.format(\"Error converting float to %s\", getName()));\n     }\n \n     @Override\n-    public double getDouble(int id) {\n+    public double getDouble(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to double\", getName()));\n     }\n \n     @Override\n-    public void setDouble(int id, double value) {\n+    public void setDouble(final int id, final double value) {\n         throw new IllegalArgumentException(String.format(\"Error converting double to %s\", getName()));\n     }\n \n     @Override\n-    public boolean getBoolean(int id) {\n+    public boolean getBoolean(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to boolean\", getName()));\n     }\n \n     @Override\n-    public void setBoolean(int id, boolean value) {\n+    public void setBoolean(final int id, final boolean value) {\n         throw new IllegalArgumentException(String.format(\"Error converting boolean to %s\", getName()));\n     }\n \n     @Override\n-    public char getChar(int id) {\n+    public char getChar(final int id) {\n         throw new IllegalArgumentException(String.format(\"Error converting %s to char\", getName()));\n     }\n \n     @Override\n-    public void setChar(int id, char value) {\n+    public void setChar(final int id, final char value) {\n         throw new IllegalArgumentException(String.format(\"Error converting char to %s\", getName()));\n     }\n \n     @Override\n-    public String getSearchString(int id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTU2OTYz", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-404156963", "createdAt": "2020-05-01T13:25:30Z", "commit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyNTozMVrOGPJnbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyNTozMVrOGPJnbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTM3NA==", "bodyText": "This feels a bit dangerous - won't we get NPE by not checking for null?", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418539374", "createdAt": "2020-05-01T13:25:31Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/AbstractObjectAttributeDescription.java", "diffHunk": "@@ -89,39 +96,48 @@ public void setCapacity(final int capacity) {\n             Arrays.fill(data, len, capacity, defaultValue);\n         }\n     }\n-    \n+\n     @Override\n     public String getString(final int id) {\n-        return data[id] != null ? String.valueOf((T) data[id]) : null;\n+        return String.valueOf((T) data[id]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTg0MDcx", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-404184071", "createdAt": "2020-05-01T14:19:45Z", "commit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxOTo0NVrOGPK90w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxOTo0NVrOGPK90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU2MTQ5MQ==", "bodyText": "@cygnus-x-1 is this removed as a cleanup activity? Unfortunately I need all of these deprecated classes to remain to open old graphs that have written data with these attribute descriptions.\nAn idea I had was perhaps we could move all of these deprecated classes into a \"Attributes(Deprecated)\" module so that everyone else does not have to worry about them?\nWhen I get an update site running this \"deprecated\" module can be turned off by default too to avoid everyone having to deal with these legacy formats.", "url": "https://github.com/constellation-app/constellation/pull/467#discussion_r418561491", "createdAt": "2020-05-01T14:19:45Z", "author": {"login": "arcturus2"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/attribute/compatibility/AttrListAttributeDescriptionV0.java", "diffHunk": "@@ -1,223 +0,0 @@\n-/*\n- * Copyright 2010-2019 Australian Signals Directorate\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package au.gov.asd.tac.constellation.graph.attribute.compatibility;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd4dffb0c0ea8cc10c7f29f0f4791f00a81dc65d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/edf64cf6bf4726bd18f9f5b89f4dd308d4f13164", "committedDate": "2020-05-01T14:47:10Z", "message": ":art: changes based on pull request feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c013395a1f0597d5a6860c45b1876b4f33e2d7", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/65c013395a1f0597d5a6860c45b1876b4f33e2d7", "committedDate": "2020-05-01T14:47:56Z", "message": "Merge branch 'master' into regex-update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b90df7f02e0d36cced83ac9c6f9bcd616edebf8", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/2b90df7f02e0d36cced83ac9c6f9bcd616edebf8", "committedDate": "2020-05-01T14:59:30Z", "message": "Merge branch 'regex-update' into attribute-update\n\n# Conflicts:\n#\tCoreVisualSchema/src/au/gov/asd/tac/constellation/graph/schema/visual/attribute/interaction/ConnectionModeAttributeInteraction.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NDQ2ODk4", "url": "https://github.com/constellation-app/constellation/pull/467#pullrequestreview-404446898", "createdAt": "2020-05-01T23:31:15Z", "commit": {"oid": "2b90df7f02e0d36cced83ac9c6f9bcd616edebf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "739747823d2307766f0c65f47dcb1ffd893f3e89", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/739747823d2307766f0c65f47dcb1ffd893f3e89", "committedDate": "2020-05-04T00:36:27Z", "message": ":art: added attr_list attribute back, but disabled it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7852e035b1e1ecec38ef442f997572ea76c6bc1", "author": {"user": {"login": "cygnus-x-1", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/d7852e035b1e1ecec38ef442f997572ea76c6bc1", "committedDate": "2020-05-04T00:38:49Z", "message": "Merge branch 'master' into attribute-update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3708, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}