{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MDMwMTQ5", "number": 564, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowMToxNFrOECz2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMToyN1rOEDqSnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgyMTA5OnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/nbproject/project.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowMToxNFrOGffqDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1OTo0NVrOGfgb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NzcxMA==", "bodyText": "Is this line needed in this instance? If not, can probably be removed to save future pain when we update java", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435677710", "createdAt": "2020-06-05T04:01:14Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/nbproject/project.properties", "diffHunk": "@@ -0,0 +1,108 @@\n+annotation.processing.enabled=true\n+annotation.processing.enabled.in.editor=false\n+annotation.processing.processors.list=\n+annotation.processing.run.all.processors=true\n+annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output\n+application.title=ProjectUpdater\n+application.vendor=sirius\n+auxiliary.org-netbeans-spi-editor-hints-projects.perProjectHintSettingsFile=nbproject/cfg_hints.xml\n+build.classes.dir=${build.dir}/classes\n+build.classes.excludes=**/*.java,**/*.form\n+# This directory is removed when the project is cleaned:\n+build.dir=build\n+build.generated.dir=${build.dir}/generated\n+build.generated.sources.dir=${build.dir}/generated-sources\n+# Only compile against the classpath explicitly listed here:\n+build.sysclasspath=ignore\n+build.test.classes.dir=${build.dir}/test/classes\n+build.test.results.dir=${build.dir}/test/results\n+# Uncomment to specify the preferred debugger connection transport:\n+#debug.transport=dt_socket\n+debug.classpath=\\\n+    ${run.classpath}\n+debug.modulepath=\\\n+    ${run.modulepath}\n+debug.test.classpath=\\\n+    ${run.test.classpath}\n+debug.test.modulepath=\\\n+    ${run.test.modulepath}\n+# This directory is removed when the project is cleaned:\n+dist.dir=dist\n+dist.jar=${dist.dir}/ProjectUpdater.jar\n+dist.javadoc.dir=${dist.dir}/javadoc\n+endorsed.classpath=\n+excludes=\n+includes=**\n+jar.archive.disabled=${jnlp.enabled}\n+jar.compress=false\n+jar.index=${jnlp.enabled}\n+javac.classpath=\\\n+    ${ant.core.lib}\n+javac.external.vm=false\n+javac.modulepath=\n+javac.processormodulepath=\n+# Space-separated list of extra javac options\n+javac.source=11\n+javac.target=11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4NzkzNg==", "bodyText": "Thanks @antares1470. I took the PR back into draft as I wanted to make some more changes but I was obviously too slow. Great feedback. I've fixed this so it does not show the target.", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435687936", "createdAt": "2020-06-05T04:48:37Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/nbproject/project.properties", "diffHunk": "@@ -0,0 +1,108 @@\n+annotation.processing.enabled=true\n+annotation.processing.enabled.in.editor=false\n+annotation.processing.processors.list=\n+annotation.processing.run.all.processors=true\n+annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output\n+application.title=ProjectUpdater\n+application.vendor=sirius\n+auxiliary.org-netbeans-spi-editor-hints-projects.perProjectHintSettingsFile=nbproject/cfg_hints.xml\n+build.classes.dir=${build.dir}/classes\n+build.classes.excludes=**/*.java,**/*.form\n+# This directory is removed when the project is cleaned:\n+build.dir=build\n+build.generated.dir=${build.dir}/generated\n+build.generated.sources.dir=${build.dir}/generated-sources\n+# Only compile against the classpath explicitly listed here:\n+build.sysclasspath=ignore\n+build.test.classes.dir=${build.dir}/test/classes\n+build.test.results.dir=${build.dir}/test/results\n+# Uncomment to specify the preferred debugger connection transport:\n+#debug.transport=dt_socket\n+debug.classpath=\\\n+    ${run.classpath}\n+debug.modulepath=\\\n+    ${run.modulepath}\n+debug.test.classpath=\\\n+    ${run.test.classpath}\n+debug.test.modulepath=\\\n+    ${run.test.modulepath}\n+# This directory is removed when the project is cleaned:\n+dist.dir=dist\n+dist.jar=${dist.dir}/ProjectUpdater.jar\n+dist.javadoc.dir=${dist.dir}/javadoc\n+endorsed.classpath=\n+excludes=\n+includes=**\n+jar.archive.disabled=${jnlp.enabled}\n+jar.compress=false\n+jar.index=${jnlp.enabled}\n+javac.classpath=\\\n+    ${ant.core.lib}\n+javac.external.vm=false\n+javac.modulepath=\n+javac.processormodulepath=\n+# Space-separated list of extra javac options\n+javac.source=11\n+javac.target=11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NzcxMA=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5MDQ5MQ==", "bodyText": "Hmm it turns out this is a problem for the stand alone java projects. It was failing to compile without the target so I had to bring it back.", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435690491", "createdAt": "2020-06-05T04:59:45Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/nbproject/project.properties", "diffHunk": "@@ -0,0 +1,108 @@\n+annotation.processing.enabled=true\n+annotation.processing.enabled.in.editor=false\n+annotation.processing.processors.list=\n+annotation.processing.run.all.processors=true\n+annotation.processing.source.output=${build.generated.sources.dir}/ap-source-output\n+application.title=ProjectUpdater\n+application.vendor=sirius\n+auxiliary.org-netbeans-spi-editor-hints-projects.perProjectHintSettingsFile=nbproject/cfg_hints.xml\n+build.classes.dir=${build.dir}/classes\n+build.classes.excludes=**/*.java,**/*.form\n+# This directory is removed when the project is cleaned:\n+build.dir=build\n+build.generated.dir=${build.dir}/generated\n+build.generated.sources.dir=${build.dir}/generated-sources\n+# Only compile against the classpath explicitly listed here:\n+build.sysclasspath=ignore\n+build.test.classes.dir=${build.dir}/test/classes\n+build.test.results.dir=${build.dir}/test/results\n+# Uncomment to specify the preferred debugger connection transport:\n+#debug.transport=dt_socket\n+debug.classpath=\\\n+    ${run.classpath}\n+debug.modulepath=\\\n+    ${run.modulepath}\n+debug.test.classpath=\\\n+    ${run.test.classpath}\n+debug.test.modulepath=\\\n+    ${run.test.modulepath}\n+# This directory is removed when the project is cleaned:\n+dist.dir=dist\n+dist.jar=${dist.dir}/ProjectUpdater.jar\n+dist.javadoc.dir=${dist.dir}/javadoc\n+endorsed.classpath=\n+excludes=\n+includes=**\n+jar.archive.disabled=${jnlp.enabled}\n+jar.compress=false\n+jar.index=${jnlp.enabled}\n+javac.classpath=\\\n+    ${ant.core.lib}\n+javac.external.vm=false\n+javac.modulepath=\n+javac.processormodulepath=\n+# Space-separated list of extra javac options\n+javac.source=11\n+javac.target=11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NzcxMA=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgyNDc4OnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowNDowNFrOGffsfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1MTozOVrOGfgU2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODMzNQ==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435678335", "createdAt": "2020-06-05T04:04:04Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODY2NQ==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435688665", "createdAt": "2020-06-05T04:51:39Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODMzNQ=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgyNTQzOnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowNDozOVrOGffs6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1MTo0NFrOGfgU7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODQ0MA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435678440", "createdAt": "2020-06-05T04:04:39Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODY4NQ==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435688685", "createdAt": "2020-06-05T04:51:44Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODQ0MA=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgyNjcyOnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowNToyMlrOGfftpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1MTo0OVrOGfgU-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODYyOA==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435678628", "createdAt": "2020-06-05T04:05:22Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4ODY5OQ==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435688699", "createdAt": "2020-06-05T04:51:49Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3ODYyOA=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgzMTgzOnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowODo1OVrOGffwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1NDoxN1rOGfgXKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTQyMg==", "bodyText": "Is there a more specific set of exceptions that can be caught in this instance? (Can't tell just glancing at the code whether the generic exception needs to be caught or not)", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435679422", "createdAt": "2020-06-05T04:08:59Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4OTI1OQ==", "bodyText": "The way this is written the generic exception works out the best (because there are too many possible exceptions). It will also pick up run time errors this way. Cool?", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435689259", "createdAt": "2020-06-05T04:54:17Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTQyMg=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgzMjc0OnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDowOTozMlrOGffxPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1NDoyNVrOGfgXTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTU0OA==", "bodyText": "the above can be final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435679548", "createdAt": "2020-06-05T04:09:32Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4OTI5Mg==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435689292", "createdAt": "2020-06-05T04:54:25Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTU0OA=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgzMzgzOnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoxMDoxNFrOGffx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1NDozMlrOGfgXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTcxMQ==", "bodyText": "the above can be final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435679711", "createdAt": "2020-06-05T04:10:14Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);\n+            transformer.transform(loadSource, loadResult);\n+        }\n+\n+        return document;\n+    }\n+\n+    private static void saveXMLFile(Document document, File xmlFile) throws Exception {\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        try (FileOutputStream out = new FileOutputStream(xmlFile)) {\n+            Source saveSource = new DOMSource(document);\n+            Result saveResult = new StreamResult(out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4OTMxMw==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435689313", "createdAt": "2020-06-05T04:54:32Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);\n+            transformer.transform(loadSource, loadResult);\n+        }\n+\n+        return document;\n+    }\n+\n+    private static void saveXMLFile(Document document, File xmlFile) throws Exception {\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        try (FileOutputStream out = new FileOutputStream(xmlFile)) {\n+            Source saveSource = new DOMSource(document);\n+            Result saveResult = new StreamResult(out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTcxMQ=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzgzNDkyOnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDoxMDo1OVrOGffyjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNDo1NDozNlrOGfgXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTg4Nw==", "bodyText": "final", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435679887", "createdAt": "2020-06-05T04:10:59Z", "author": {"login": "antares1470"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);\n+            transformer.transform(loadSource, loadResult);\n+        }\n+\n+        return document;\n+    }\n+\n+    private static void saveXMLFile(Document document, File xmlFile) throws Exception {\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        try (FileOutputStream out = new FileOutputStream(xmlFile)) {\n+            Source saveSource = new DOMSource(document);\n+            Result saveResult = new StreamResult(out);\n+            transformer.transform(saveSource, saveResult);\n+        }\n+    }\n+\n+    private void extractMatchingPackages(File jarFile, List<String> expressions, Set<String> publicPackages) throws Exception {\n+        final ZipInputStream zip = new ZipInputStream(new FileInputStream(jarFile));\n+        ZipEntry entry = zip.getNextEntry();\n+        while (entry != null) {\n+            final String path = entry.getName();\n+            int lastDivider = path.lastIndexOf('/');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY4OTMzMg==", "bodyText": "added", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r435689332", "createdAt": "2020-06-05T04:54:36Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,267 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;\n+\n+// IMPORTANT! You need to compile this class against ant.jar.\n+// The easiest way to do this is to add ${ant.core.lib} to your project's classpath.\n+// For example, for a plain Java project with no other dependencies, set in project.properties:\n+// javac.classpath=${ant.core.lib}\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMResult;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.apache.tools.ant.BuildException;\n+import org.apache.tools.ant.Task;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.Text;\n+\n+/**\n+ * Rewrite the project.xml file with the latest dependencies\n+ *\n+ * @author sirius\n+ * @author arcturus\n+ */\n+public class ProjectUpdater extends Task {\n+\n+    private File projectDirectory = null;\n+\n+    public void setProjectdirectory(File projectDirectory) {\n+        this.projectDirectory = projectDirectory;\n+    }\n+\n+    @Override\n+    public void execute() throws BuildException {\n+        try {\n+            logMessage(\"Updating wrapped jars for \" + projectDirectory);\n+\n+            final File projectFile = new File(projectDirectory, \"nbproject/project.xml\");\n+            final File oldProjectFile = new File(projectDirectory, \"nbproject/project_old.xml\");\n+            final File jarDirectory = new File(projectDirectory, \"release/modules/ext\");\n+            final File publicPackagesFile = new File(projectDirectory, \"/src/public.xml\");\n+\n+            // Create a document to work on\n+            final Document document = readXMLFile(projectFile);\n+\n+            // Find the data element and ensure there is only one\n+            final NodeList dataNodes = document.getElementsByTagName(\"data\");\n+            if (dataNodes.getLength() != 1) {\n+                throw new IllegalStateException(\"Not a valid project.xml file\");\n+            }\n+            final Node dataNode = dataNodes.item(0);\n+\n+            final List<String> packages = new ArrayList<>();\n+            final Set<String> publicPackages = new TreeSet<>();\n+            Node publicPackagesNode = null;\n+            if (publicPackagesFile.exists()) {\n+                final NodeList publicPackagesNodes = document.getElementsByTagName(\"public-packages\");\n+                if (publicPackagesNodes.getLength() != 1) {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+                publicPackagesNode = publicPackagesNodes.item(0);\n+\n+                final NodeList children = publicPackagesNode.getChildNodes();\n+                while (children.getLength() > 0) {\n+                    final Node child = children.item(0);\n+                    if (child instanceof Element) {\n+                        final Element childElement = (Element) child;\n+                        if (childElement.getTagName().equals(\"package\")) {\n+                            publicPackages.add(childElement.getTextContent());\n+                        }\n+                    }\n+                    publicPackagesNode.removeChild(child);\n+                }\n+\n+                final Document publicXMLFile = readXMLFile(publicPackagesFile);\n+                final NodeList packageNodes = publicXMLFile.getElementsByTagName(\"package\");\n+                for (int i = 0; i < packageNodes.getLength(); i++) {\n+                    packages.add(packageNodes.item(i).getTextContent());\n+                }\n+            }\n+\n+            // Remove all the class-path-extension elements\n+            // Ensure that each is a child of the data element\n+            // Remore all white space around the elements\n+            final NodeList classPathExtensionNodes = document.getElementsByTagName(\"class-path-extension\");\n+            while (classPathExtensionNodes.getLength() > 0) {\n+                final Node classPathExtensionNode = classPathExtensionNodes.item(0);\n+                if (classPathExtensionNode.getParentNode() == dataNode) {\n+                    Node nextNode = classPathExtensionNode.getNextSibling();\n+                    while (nextNode instanceof Text) {\n+                        Node textNode = nextNode;\n+                        nextNode = nextNode.getNextSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    Node prevNode = classPathExtensionNode.getPreviousSibling();\n+                    while (prevNode instanceof Text) {\n+                        Node textNode = prevNode;\n+                        prevNode = prevNode.getPreviousSibling();\n+                        dataNode.removeChild(textNode);\n+                    }\n+                    dataNode.removeChild(classPathExtensionNode);\n+                } else {\n+                    throw new IllegalStateException(\"Not a valid project.xml file\");\n+                }\n+            }\n+\n+            // Restore each jar file to the project.xml\n+            // If the jar directory does not exist then assume no wrapped jars\n+            // Ensure each file is a JAR file\n+            // Add white space to make it look the same as the Netbeans version\n+            if (jarDirectory.exists()) {\n+                for (File jarFile : jarDirectory.listFiles()) {\n+                    if (jarFile.getName().endsWith(\".jar\")) {\n+                        logMessage(\"\\tIncluding jar file: \" + jarFile.getName());\n+                        addClassPathExtension(document, jarFile, dataNode);\n+\n+                        if (publicPackagesFile.exists()) {\n+                            extractMatchingPackages(jarFile, packages, publicPackages);\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\"Not a JAR file: \" + jarFile.getAbsolutePath());\n+                    }\n+                }\n+\n+                dataNode.appendChild(document.createTextNode(\"\\n        \"));\n+            }\n+\n+            if (publicPackagesFile.exists()) {\n+                for (String publicPackage : publicPackages) {\n+                    if (!publicPackage.startsWith(\"META-INF\")) {\n+                        Element publicPackageElement = document.createElement(\"package\");\n+                        publicPackageElement.setTextContent(publicPackage);\n+                        publicPackagesNode.appendChild(document.createTextNode(\"\\n                \"));\n+                        publicPackagesNode.appendChild(publicPackageElement);\n+                    }\n+                }\n+            }\n+            if (publicPackagesNode != null) {\n+                publicPackagesNode.appendChild(document.createTextNode(\"\\n            \"));\n+            }\n+\n+            // Delete the existing old file and replace it with a copy of the current project.xml\n+            oldProjectFile.delete();\n+            projectFile.renameTo(oldProjectFile);\n+\n+            // Save the edited document to project.xml\n+            saveXMLFile(document, projectFile);\n+        } catch (Exception ex) {\n+            logMessage(\"Exception during update: \" + ex.getClass() + \" \" + ex.getMessage() + \" \" + ex.getStackTrace()[0]);\n+        }\n+    }\n+\n+    private static void addClassPathExtension(Document document, File jarFile, Node parentNode) {\n+        final Element classPathExtensionElement = document.createElement(\"class-path-extension\");\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element runtimeRelativePathElement = document.createElement(\"runtime-relative-path\");\n+        runtimeRelativePathElement.setTextContent(\"ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(runtimeRelativePathElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n                \"));\n+\n+        final Element binaryOriginElement = document.createElement(\"binary-origin\");\n+        binaryOriginElement.setTextContent(\"release/modules/ext/\" + jarFile.getName());\n+        classPathExtensionElement.appendChild(binaryOriginElement);\n+        classPathExtensionElement.appendChild(document.createTextNode(\"\\n            \"));\n+\n+        parentNode.appendChild(document.createTextNode(\"\\n            \"));\n+        parentNode.appendChild(classPathExtensionElement);\n+    }\n+\n+    private static Document readXMLFile(File xmlFile) throws Exception {\n+        final DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        // Create a document to work on\n+        final Document document = builder.newDocument();\n+\n+        // Read in the existing project.xml into the document\n+        try (FileInputStream in = new FileInputStream(xmlFile)) {\n+            Source loadSource = new StreamSource(in);\n+            Result loadResult = new DOMResult(document);\n+            transformer.transform(loadSource, loadResult);\n+        }\n+\n+        return document;\n+    }\n+\n+    private static void saveXMLFile(Document document, File xmlFile) throws Exception {\n+        final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+\n+        try (FileOutputStream out = new FileOutputStream(xmlFile)) {\n+            Source saveSource = new DOMSource(document);\n+            Result saveResult = new StreamResult(out);\n+            transformer.transform(saveSource, saveResult);\n+        }\n+    }\n+\n+    private void extractMatchingPackages(File jarFile, List<String> expressions, Set<String> publicPackages) throws Exception {\n+        final ZipInputStream zip = new ZipInputStream(new FileInputStream(jarFile));\n+        ZipEntry entry = zip.getNextEntry();\n+        while (entry != null) {\n+            final String path = entry.getName();\n+            int lastDivider = path.lastIndexOf('/');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3OTg4Nw=="}, "originalCommit": {"oid": "474155ebc8632250fc8eec25d1bdf606aa1f66c9"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjczODQ5OnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMDoxNFrOGgzx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMToyNToyMFrOGg1oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTk3Mw==", "bodyText": "You should update the package names.", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437055973", "createdAt": "2020-06-08T23:30:14Z", "author": {"login": "cygnus-x-1"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODA4MQ==", "bodyText": "to au.gov.asd.tac.constellation.projectupdater  @cygnus-x-1 ?", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437078081", "createdAt": "2020-06-09T00:53:18Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTk3Mw=="}, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NjI5Nw==", "bodyText": "Updated it @cygnus-x-1", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437086297", "createdAt": "2020-06-09T01:25:20Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/src/au/gov/asd/tac/projectupdater/ProjectUpdater.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.projectupdater;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NTk3Mw=="}, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc0MDc5OnYy", "diffSide": "RIGHT", "path": "ProjectUpdater/nbproject/build-impl.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMToyN1rOGgzzZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxMjo0NVrOGg4ILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NjM1OA==", "bodyText": "This file should not be committed.", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437056358", "createdAt": "2020-06-08T23:31:27Z", "author": {"login": "cygnus-x-1"}, "path": "ProjectUpdater/nbproject/build-impl.xml", "diffHunk": "@@ -0,0 +1,1411 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3NzUxNg==", "bodyText": "I think this file is fine @cygnus-x-1, we do it for all of our modules too. It's not in the \"nbproject/private\" folder which is in our .gitignore. Please confirm your OK?", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437077516", "createdAt": "2020-06-09T00:51:13Z", "author": {"login": "arcturus2"}, "path": "ProjectUpdater/nbproject/build-impl.xml", "diffHunk": "@@ -0,0 +1,1411 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NjM1OA=="}, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNzIxNA==", "bodyText": "fair enough... counterpoint, neither is genfiles.properties.", "url": "https://github.com/constellation-app/constellation/pull/564#discussion_r437127214", "createdAt": "2020-06-09T04:12:45Z", "author": {"login": "cygnus-x-1"}, "path": "ProjectUpdater/nbproject/build-impl.xml", "diffHunk": "@@ -0,0 +1,1411 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1NjM1OA=="}, "originalCommit": {"oid": "465486d27578c405ebcd84cbf1e8c57b90b5eec0"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2170, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}