{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTEzMjk2", "number": 760, "title": ":art: Implement quality categories", "bodyText": "Description of the Change\nThis PR adds Quality categories to replace the visual representation of quality scores.\nIt does not completely rid the code of \"scores\", as completely getting rid of the abstract\ngetQuality() method would cause other rules to break.\nThe QualityControlView table and the Data access view will now show categories of quality, as opposed to scores.\nThe categories map to int values which are representative of the old values. for example, the quality score previously used will map to a category.\n\nMissingTypeRule RISK = 90 , maps to SEVERE.\n\nDEFAULT = 1 - 29\nINFO = 30 - 59\nWARNING = 60 - 89\nSEVERE = 90 - 94\nFATAL = 95 +\nAn alert box now is implemented to map rules to each priority level. Allowing for manual overriding of specific rules or rules which are important to the user.\n\nHighest priority rule in violation gets that label added.\n\nRule dialog shows in categories and also ranks highest priority category first.\n\nCan map a rule to the default category, allowing that rule to be completely ignored.\n\nHighest priority category in action gets added to the DAV button\n\n\nAlternate Designs\nN/A\n\nWhy Should This Be In Core?\nFeature allows user to easily read the quality of the data\n\nBenefits\nFeature allows user to easily read the quality of the data\n\nPossible Drawbacks\nNone realised\n\nVerification Process\nloading different data, testing sort order, testing any place score was used previously.\nopening up dialog boxes, switching priorities.\n\nApplicable Issues\n#378", "createdAt": "2020-08-04T03:57:57Z", "url": "https://github.com/constellation-app/constellation/pull/760", "merged": true, "mergeCommit": {"oid": "838a2e7ae802278d908e9a54f8a02b86a5bdcf8a"}, "closed": true, "closedAt": "2020-08-10T01:03:59Z", "author": {"login": "aldebaran30701"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7dDYKgH2gAyNDYyNTEzMjk2OmIzZGEzYjQyMjMzYzA5YzUwMjFlYzJkNmM1Mzc2OGIwODc5Y2ExZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9W9RdAH2gAyNDYyNTEzMjk2OjMyODZjNjczYWNmYzA3YzQ4MWEzODFkOTA3MDgwY2UwZWNjMjUzNjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3da3b42233c09c5021ec2d6c53768b0879ca1d1", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/b3da3b42233c09c5021ec2d6c53768b0879ca1d1", "committedDate": "2020-08-04T02:18:33Z", "message": ":art: Implement quality categories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eaef55cd21b690f68c832fe959049d110a8c203", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/9eaef55cd21b690f68c832fe959049d110a8c203", "committedDate": "2020-08-04T03:57:28Z", "message": "remove unnecessary code from quality score"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ae9cc7c317b007d2669f4638d4c2a2ff0b3915", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/c3ae9cc7c317b007d2669f4638d4c2a2ff0b3915", "committedDate": "2020-08-04T04:56:38Z", "message": ":bug: SQ Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTExMTI3", "url": "https://github.com/constellation-app/constellation/pull/760#pullrequestreview-460511127", "createdAt": "2020-08-04T05:45:29Z", "commit": {"oid": "c3ae9cc7c317b007d2669f4638d4c2a2ff0b3915"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODAxNTY4", "url": "https://github.com/constellation-app/constellation/pull/760#pullrequestreview-460801568", "createdAt": "2020-08-04T13:16:17Z", "commit": {"oid": "c3ae9cc7c317b007d2669f4638d4c2a2ff0b3915"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxNjoxN1rOG7f5zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxNjoxN1rOG7f5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MTg2OA==", "bodyText": "Running this in a static block like this means this bit of code must run when the class is loaded into memory (i.e when Constellation loads). This becomes problematic for a couple of reasons:\n\nConstellation load times will take longer.\nThere is actually a runtime exception that Java throws when there are too many things run in a static block like this and a while back I moved them to be called lazily instead which you can do in getPriorities() with something like:\n\nprivate static Map<QualityControlRule, QualityCategory> rulePriorities = null;\n...\n...\npublic static Map<QualityControlRule, QualityCategory> getPriorities() {\n    if(rulePriorities == null) {\n        for (final QualityControlRule rule : Lookup.getDefault().lookupAll(QualityControlRule.class)) {\n            rulePriorities.put(rule, rule.getCategory(0));\n        }\n    }\n}\n\nreturn rulePriorities;\nFYI the call to Lookup isn't super efficient. For instance I have been able to dramatically shave seconds off the execution just by caching the object returned by Lookup where as it was being called many times (like in for loops in other parts of the app).", "url": "https://github.com/constellation-app/constellation/pull/760#discussion_r465041868", "createdAt": "2020-08-04T13:16:17Z", "author": {"login": "arcturus2"}, "path": "CoreQualityControlView/src/au/gov/asd/tac/constellation/views/qualitycontrol/QualityControlViewPane.java", "diffHunk": "@@ -70,38 +79,44 @@\n })\n public final class QualityControlViewPane extends BorderPane {\n \n-    private final QualityControlViewTopComponent parent;\n-    private final TableView<QualityControlEvent> qualityTable;\n+    private static final Map<QualityControlRule, QualityCategory> rulePriorities = new HashMap<>();\n+    private static final List<ToggleGroup> toggleGroups = new ArrayList<>();\n     private final TableColumn<QualityControlEvent, QualityControlEvent> identifierColumn;\n     private final TableColumn<QualityControlEvent, QualityControlEvent> typeColumn;\n     private final TableColumn<QualityControlEvent, QualityControlEvent> qualityColumn;\n     private final TableColumn<QualityControlEvent, QualityControlEvent> reasonColumn;\n+    private final TableView<QualityControlEvent> qualityTable;\n     private final FlowPane optionsPane;\n \n-    public QualityControlViewPane(QualityControlViewTopComponent topComponent) {\n-        this.parent = topComponent;\n+    static {\n+        for (final QualityControlRule rule : Lookup.getDefault().lookupAll(QualityControlRule.class)) {\n+            rulePriorities.put(rule, rule.getCategory(0));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ae9cc7c317b007d2669f4638d4c2a2ff0b3915"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30cf1298889d9e8fee4ae9c97a81059fe22f07f2", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/30cf1298889d9e8fee4ae9c97a81059fe22f07f2", "committedDate": "2020-08-06T05:09:09Z", "message": "PR Review fixes\n\n *Implemented Preferences object for mapping of categories to rules\n *Added JSON Utilities for writing a Map to String and vice versa.\n *Added entry into `whatsnew.txt`\n *Lazy initialisation over rulePriorities Map\n *Lazy initialisation and caching of lookup object\n\nAdded unit tests for:\n *JSON Utilities\n *QualityControlEvent\n *Quality Control Rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9120f8727f530df0d8f33868a954f03a6915136", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/b9120f8727f530df0d8f33868a954f03a6915136", "committedDate": "2020-08-07T00:20:48Z", "message": "replace null check with empty check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTA5NDkw", "url": "https://github.com/constellation-app/constellation/pull/760#pullrequestreview-463909490", "createdAt": "2020-08-09T22:48:41Z", "commit": {"oid": "b9120f8727f530df0d8f33868a954f03a6915136"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3286c673acfc07c481a381d907080ce0ecc25360", "author": {"user": {"login": "aldebaran30701", "name": null}}, "url": "https://github.com/constellation-app/constellation/commit/3286c673acfc07c481a381d907080ce0ecc25360", "committedDate": "2020-08-10T00:20:18Z", "message": "add reset button and resize dialog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3631, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}