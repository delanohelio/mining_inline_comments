{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTE2NDYy", "number": 880, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMTowOFrOFCuWnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMToyNjoyOFrOFFPiUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAwOTI0OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMTowOFrOICB0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMTowOFrOICB0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5NzgzNQ==", "bodyText": "event can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538997835", "createdAt": "2020-12-09T04:31:08Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "diffHunk": "@@ -0,0 +1,539 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReportListener;\n+import au.gov.asd.tac.constellation.views.notes.state.NotesViewEntry;\n+import java.text.SimpleDateFormat;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.image.Image;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javax.swing.JOptionPane;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.controlsfx.control.CheckComboBox;\n+import org.openide.windows.WindowManager;\n+\n+/**\n+ * Handles generating UI elements for the Notes View pane and its notes.\n+ * \n+ * @author sol695510\n+ */\n+public class NotesViewPane extends BorderPane implements PluginReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final List<NotesViewEntry> notesViewEntries;\n+    \n+    private final ObservableList<String> availableFilters;\n+    private final List<String> selectedFilters;\n+    private final CheckComboBox filterCheckComboBox;\n+    private Boolean isSelectedFiltersUpdating = false;\n+    \n+    private final HBox filterNotesHBox;\n+    private final VBox notesViewPaneVBox;\n+    private final VBox addNoteVBox;\n+    private final VBox notesListVBox;\n+    private final ScrollPane notesListScrollPane;\n+    private Stage editStage;\n+    \n+    private final int DEFAULT_SPACING = 5;\n+    private final String PROMPT_COLOUR = \"#909090\";\n+    private final String USER_COLOUR = \"#C15A58\";\n+    private final String AUTO_COLOUR = \"#588BC1\";\n+    private final String DATETIME_PATTERN = \"hh:mm:ss a 'on' dd/MM/yyyy\";\n+    \n+    /**\n+     * NotesViewPane constructor.\n+     * \n+     * @param controller \n+     */\n+    public NotesViewPane(final NotesViewController controller) {\n+        \n+        notesViewController = controller;\n+        notesViewEntries = new ArrayList<>();\n+        \n+        availableFilters = FXCollections.observableArrayList(\"User Notes\", \"Auto Notes\");\n+        selectedFilters = new ArrayList<>(availableFilters); // By default all filters are selected.\n+        \n+        // CheckComboBox to select and deselect various filters for note rendering.\n+        filterCheckComboBox = new CheckComboBox(availableFilters);\n+        filterCheckComboBox.setTitle(\"Select a filter...\");\n+        filterCheckComboBox.getCheckModel().getCheckedItems().addListener(new ListChangeListener() {\n+            @Override\n+            public void onChanged(ListChangeListener.Change event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAxMzk5OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMjo1M1rOICB2qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMjo1M1rOICB2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5ODQ0MQ==", "bodyText": "pluginReport can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538998441", "createdAt": "2020-12-09T04:32:53Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "diffHunk": "@@ -0,0 +1,539 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReportListener;\n+import au.gov.asd.tac.constellation.views.notes.state.NotesViewEntry;\n+import java.text.SimpleDateFormat;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.image.Image;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javax.swing.JOptionPane;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.controlsfx.control.CheckComboBox;\n+import org.openide.windows.WindowManager;\n+\n+/**\n+ * Handles generating UI elements for the Notes View pane and its notes.\n+ * \n+ * @author sol695510\n+ */\n+public class NotesViewPane extends BorderPane implements PluginReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final List<NotesViewEntry> notesViewEntries;\n+    \n+    private final ObservableList<String> availableFilters;\n+    private final List<String> selectedFilters;\n+    private final CheckComboBox filterCheckComboBox;\n+    private Boolean isSelectedFiltersUpdating = false;\n+    \n+    private final HBox filterNotesHBox;\n+    private final VBox notesViewPaneVBox;\n+    private final VBox addNoteVBox;\n+    private final VBox notesListVBox;\n+    private final ScrollPane notesListScrollPane;\n+    private Stage editStage;\n+    \n+    private final int DEFAULT_SPACING = 5;\n+    private final String PROMPT_COLOUR = \"#909090\";\n+    private final String USER_COLOUR = \"#C15A58\";\n+    private final String AUTO_COLOUR = \"#588BC1\";\n+    private final String DATETIME_PATTERN = \"hh:mm:ss a 'on' dd/MM/yyyy\";\n+    \n+    /**\n+     * NotesViewPane constructor.\n+     * \n+     * @param controller \n+     */\n+    public NotesViewPane(final NotesViewController controller) {\n+        \n+        notesViewController = controller;\n+        notesViewEntries = new ArrayList<>();\n+        \n+        availableFilters = FXCollections.observableArrayList(\"User Notes\", \"Auto Notes\");\n+        selectedFilters = new ArrayList<>(availableFilters); // By default all filters are selected.\n+        \n+        // CheckComboBox to select and deselect various filters for note rendering.\n+        filterCheckComboBox = new CheckComboBox(availableFilters);\n+        filterCheckComboBox.setTitle(\"Select a filter...\");\n+        filterCheckComboBox.getCheckModel().getCheckedItems().addListener(new ListChangeListener() {\n+            @Override\n+            public void onChanged(ListChangeListener.Change event) {\n+                if (!isSelectedFiltersUpdating) {\n+                    \n+                    setFilters(filterCheckComboBox.getCheckModel().getCheckedItems());\n+                    \n+                    final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+\n+                    if (activeGraph != null) {\n+                        updateNotes();\n+                        controller.writeState();\n+                    }\n+                }\n+            }\n+        });\n+        \n+        // VBox to store control items used to filter notes.\n+        filterNotesHBox = new HBox(DEFAULT_SPACING, filterCheckComboBox);\n+        filterNotesHBox.setAlignment(Pos.CENTER_LEFT);\n+        filterNotesHBox.setStyle(\"-fx-padding: 5px;\");\n+        \n+        // TextField to enter new note title.\n+        final TextField titleField = new TextField();\n+        titleField.setPromptText(\"Type a title...\");\n+        titleField.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+        \n+        // TextArea to enter new note content.\n+        final TextArea contentField = new TextArea();\n+        contentField.setPromptText(\"Type a note...\");\n+        contentField.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+        contentField.setWrapText(true);\n+        contentField.setOnKeyPressed(key -> {\n+            // If tab is typed and shift isn't being held dowm.\n+            if (key.getCode() == KeyCode.TAB && !key.isShiftDown()) {\n+                // Backspace any tabs typed.\n+                contentField.fireEvent(new KeyEvent(null, null, KeyEvent.KEY_PRESSED, \"\", \"\", KeyCode.BACK_SPACE, false, false, false, false));\n+                // Move focus to the next UI element.\n+                contentField.getParent().getChildrenUnmodifiable().get(contentField.getParent().getChildrenUnmodifiable().indexOf(contentField) + 1).requestFocus();\n+            }\n+        });\n+        \n+        // Button to add new note.\n+        final Button addNoteButton = new Button(\"Add Note\");\n+        addNoteButton.setOnAction(event -> {\n+            \n+            final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+            \n+            if (activeGraph != null) {\n+                \n+                if ((titleField.getText().isBlank() && titleField.getText().isEmpty())\n+                        || (contentField.getText().isBlank() && contentField.getText().isEmpty())) {\n+                    JOptionPane.showMessageDialog(null, \"Type in missing fields.\", \"Invalid Text\", JOptionPane.WARNING_MESSAGE);\n+                } else {\n+                    notesViewEntries.add(new NotesViewEntry(\n+                            Long.toString(ZonedDateTime.now().toInstant().toEpochMilli()),\n+                            titleField.getText(),\n+                            contentField.getText(),\n+                            true\n+                    ));\n+                    \n+                    titleField.clear();\n+                    contentField.clear();\n+                    updateNotes();\n+                    controller.writeState();\n+                    event.consume();\n+                }\n+            }\n+        });\n+        \n+        // VBox to store control items used to add new note.\n+        addNoteVBox = new VBox(DEFAULT_SPACING, titleField, contentField, addNoteButton);\n+        addNoteVBox.setAlignment(Pos.CENTER_RIGHT);\n+        addNoteVBox.setStyle(\"-fx-padding: 5px;\");\n+        addNoteVBox.setMinHeight(200);\n+        \n+        // VBox in a ScrollPane for holding expanding list of user and plugin generated notes.\n+        notesListVBox = new VBox(DEFAULT_SPACING);\n+        notesListVBox.setAlignment(Pos.BOTTOM_CENTER);\n+        notesListScrollPane = new ScrollPane();\n+        notesListScrollPane.setContent(notesListVBox);\n+        notesListScrollPane.setStyle(\"-fx-padding: 5px; -fx-background-color: transparent;\");\n+        notesListScrollPane.setFitToWidth(true);\n+        VBox.setVgrow(notesListScrollPane, Priority.ALWAYS);\n+        \n+        // Main Notes View Pane VBox.\n+        notesViewPaneVBox = new VBox(DEFAULT_SPACING, filterNotesHBox, notesListScrollPane, addNoteVBox);\n+        notesViewPaneVBox.setAlignment(Pos.BOTTOM_CENTER);\n+        setCenter(notesViewPaneVBox);\n+    }\n+    \n+    /**\n+     * Prepares the pane used by the Notes View.\n+     * \n+     * @param controller \n+     * @param pane \n+     */\n+    protected synchronized void prepareNotesViewPane(final NotesViewController controller) {\n+        controller.addAttributes();\n+        controller.readState();\n+//        controller.addAttributes();\n+    }\n+    \n+    /**\n+     * Set the plugin reports that have executed on the current graph report.\n+     */\n+    protected synchronized void setGraphReport(final NotesViewController controller) {\n+        final GraphReport currentGraphReport = GraphReportManager.getGraphReport(GraphManager.getDefault().getActiveGraph().getId());\n+        \n+        if (currentGraphReport != null) {\n+            // Iterates the list of currently executed plugins.\n+            currentGraphReport.getPluginReports().forEach(pluginReport -> {\n+                setPluginReport(pluginReport);\n+            });\n+            // Clears duplicates from the list.\n+            final List<NotesViewEntry> uniqueNotes = clearDuplicates(notesViewEntries);\n+            notesViewEntries.clear();\n+            notesViewEntries.addAll(uniqueNotes);\n+            // Update the Notes View UI.\n+            updateNotes();\n+            updateFilters();\n+            controller.writeState();\n+        }\n+    }\n+    \n+    /**\n+     * Adds a plugin report to notesViewEntries as a Notes View Entry object.\n+     * \n+     * @param pluginReport Plugin report to be added.\n+     */\n+    protected synchronized void setPluginReport(final PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {\n+                // Listener monitors changes to the plugin report as it executes and finishes. Affects the output of getMessage().\n+                pluginReport.addPluginReportListener(this);\n+                \n+                notesViewEntries.add(new NotesViewEntry(\n+                        Long.toString(pluginReport.getStartTime()),\n+                        pluginReport.getPluginName(),\n+                        pluginReport.getMessage(),\n+                        false\n+                ));\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Returns an unmodifiable view backed by notesViewEntries.\n+     * \n+     * @return Unmodifiable view backed by notesViewEntries.\n+     */\n+    protected List<NotesViewEntry> getNotes() {\n+        return Collections.unmodifiableList(notesViewEntries);\n+    }\n+    \n+    /**\n+     * Returns an unmodifiable view backed by selectedFilters.\n+     * \n+     * @return Unmodifiable view backed by selectedFilters.\n+     */\n+    protected List<String> getFilters() {\n+        return Collections.unmodifiableList(selectedFilters);\n+    }\n+    \n+    /**\n+     * Sets notesViewEntries.\n+     * \n+     * @param notesViewEntries A list of NotesViewEntry objects to add to notesViewEntries.\n+     */\n+    protected synchronized void setNotes(final List<NotesViewEntry> notesViewEntries) {\n+        Platform.runLater(() -> {\n+            this.notesViewEntries.clear();\n+            \n+            notesViewEntries.forEach(entry -> {\n+                this.notesViewEntries.add(entry);\n+            });\n+            \n+            updateNotes();\n+        });\n+    }\n+    \n+    /**\n+     * Sets selectedFilters.\n+     * \n+     * @param selectFilters A list of String objects to add to selectedFilters.\n+     */\n+    protected synchronized void setFilters(final List<String> selectedFilters) {\n+        Platform.runLater(() -> {\n+            this.selectedFilters.clear();\n+            \n+            selectedFilters.forEach(filter -> {\n+                this.selectedFilters.add(filter);\n+            });\n+            \n+            updateFilters();\n+        });\n+    }\n+    \n+    /**\n+     * Updates the UI of the notes currently being displayed in the Notes View.\n+     */\n+    protected synchronized void updateNotes() {\n+        Platform.runLater(() -> {\n+            notesListVBox.getChildren().removeAll(notesListVBox.getChildren());\n+            \n+            final List<NotesViewEntry> notesToRender = new ArrayList<>();\n+            \n+            notesViewEntries.forEach(entry -> {\n+                // Add user note to render list if \"User Note\" filter is selected.\n+                if (selectedFilters.contains(\"User Notes\") && entry.isUserCreated()) {\n+                    notesToRender.add(entry);\n+                }\n+                // Add auto note to render list if \"Auto Note\" filter is selected.\n+                if (selectedFilters.contains(\"Auto Notes\") && !entry.isUserCreated()) {\n+                    notesToRender.add(entry);\n+                }\n+            });\n+            \n+            if (CollectionUtils.isNotEmpty(notesToRender)) {\n+                notesToRender.sort(Comparator.comparing(NotesViewEntry::getDateTime));\n+                notesToRender.forEach(note -> {\n+                    createNote(note);\n+                });\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Updates the UI of the filters currently being selected in the Notes View.\n+     */\n+    protected synchronized void updateFilters() {\n+        Platform.runLater(() -> {            \n+            isSelectedFiltersUpdating = true;\n+\n+            filterCheckComboBox.getCheckModel().clearChecks();\n+\n+            selectedFilters.forEach(filter -> {\n+                filterCheckComboBox.getCheckModel().check(filter);\n+            });\n+\n+            isSelectedFiltersUpdating = false;\n+        });\n+    }\n+    \n+    /**\n+     * Clears UI elements in the Notes View and clears the list of NoteEntry objects.\n+     */\n+    protected void clearNotes() {\n+        Platform.runLater(() -> {\n+            notesListVBox.getChildren().removeAll(notesListVBox.getChildren());\n+            notesViewEntries.clear();\n+        });\n+    }\n+    \n+    /**\n+     * Iterates list of NoteEntry objects and\n+     * removes objects that share the same dateTime.\n+     * \n+     * @param duplicatedNotes A list with duplicates.\n+     * @return The given list with duplicates removed.\n+     */\n+    private synchronized List<NotesViewEntry> clearDuplicates(final List<NotesViewEntry> duplicatedNotes) {\n+        final List<NotesViewEntry> uniqueNotes = new ArrayList();\n+        Collections.reverse(duplicatedNotes);\n+        \n+        duplicatedNotes.forEach(report -> {\n+            boolean isUnique = true;\n+            \n+            for (final NotesViewEntry uniqueReport : uniqueNotes) {\n+                if (report.getDateTime().equals(uniqueReport.getDateTime())) {\n+                    isUnique = false;\n+                }\n+            }\n+            // Adds only unique notes to the list.\n+            if (isUnique) {\n+                uniqueNotes.add(report);\n+            }\n+        });\n+        \n+        return uniqueNotes;\n+    }\n+    \n+    /**\n+     * Adds all available filters to the selectedFilters list.\n+     */\n+    protected void selectAllFilters() {\n+        setFilters(availableFilters);\n+    }\n+    \n+    /**\n+     * Takes a NoteEntry object and creates the UI for it in the Notes View.\n+     *\n+     * @param newNote NoteEntry object used to create a the note UI in the Notes View.\n+     */\n+    private void createNote(final NotesViewEntry newNote) {\n+        \n+        final String noteColour = newNote.isUserCreated() ? USER_COLOUR : AUTO_COLOUR;\n+        \n+        final Label dateTimeLabel = new Label((new SimpleDateFormat(DATETIME_PATTERN).format(new Date(Long.parseLong(newNote.getDateTime())))));\n+        dateTimeLabel.setWrapText(true);\n+        dateTimeLabel.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15;\");\n+        \n+        final Label titleLabel = new Label(newNote.getNoteTitle());\n+        titleLabel.setWrapText(true);\n+        titleLabel.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15;\");\n+        \n+        final Label contentLabel = new Label(newNote.getNoteContent());\n+        contentLabel.setWrapText(true);\n+        \n+        final VBox noteInformation = new VBox(DEFAULT_SPACING, dateTimeLabel, titleLabel, contentLabel);\n+        HBox.setHgrow(noteInformation, Priority.ALWAYS);\n+        \n+        final Button editButton = new Button(\"Edit\");\n+        editButton.setMinWidth(55);\n+        editButton.setOnAction(event -> {\n+            openEdit(newNote.getNoteTitle(), newNote.getNoteContent(), newNote);\n+            event.consume();\n+        });\n+        \n+        final Button deleteButton = new Button(\"Delete\");\n+        deleteButton.setMinWidth(55);\n+        \n+        final VBox noteButtons = new VBox(DEFAULT_SPACING, editButton, deleteButton);\n+        noteButtons.setAlignment(Pos.CENTER);\n+        \n+        final HBox noteBody = newNote.isUserCreated() ? new HBox(DEFAULT_SPACING, noteInformation, noteButtons) : new HBox(DEFAULT_SPACING, noteInformation);\n+        noteBody.setStyle(\"-fx-padding: 5px; -fx-background-color: \" + noteColour + \"; -fx-background-radius: 10 10 10 10;\");\n+        notesListVBox.getChildren().add(noteBody);\n+        \n+        deleteButton.setOnAction(event -> {\n+            if (notesViewEntries.removeIf(note -> note.getDateTime().equals(newNote.getDateTime()))) {\n+                notesListVBox.getChildren().remove(noteBody);\n+                notesViewController.writeState();\n+            }\n+            \n+            event.consume();\n+        });\n+        \n+        // Keeps the scroll bar at the bottom?\n+        Platform.runLater(() -> {\n+            notesListScrollPane.setVvalue(notesListScrollPane.getVmax());\n+        });\n+    }\n+    \n+    /**\n+     * Pop-up window for editing user created notes.\n+     * \n+     * @param title\n+     * @param content\n+     * @param noteToEdit\n+     */\n+    private void openEdit(final String title, final String content, final NotesViewEntry noteToEdit) {\n+        Platform.runLater(() -> {\n+            editStage = new Stage();\n+            editStage.getIcons().add(new Image(\"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\"));\n+            editStage.setTitle(\"Edit Note\");\n+//            editStage.setX(WindowManager.getDefault().getMainWindow().getBounds().getCenterX());\n+//            editStage.setY(WindowManager.getDefault().getMainWindow().getBounds().getCenterY());\n+            \n+            final TextField newTitle = new TextField(title);\n+            newTitle.setPromptText(\"Edit title...\");\n+            newTitle.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+            newTitle.setText(title);\n+            \n+            final TextArea newContent = new TextArea(content);\n+            newContent.setPromptText(\"Edit note...\");\n+            newContent.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+            newContent.setText(content);\n+            newContent.setWrapText(true);\n+            newContent.setOnKeyPressed(key -> {\n+                // If tab is typed and shift isn't being held dowm.\n+                if (key.getCode() == KeyCode.TAB && !key.isShiftDown()) {\n+                    // Backspace any tabs typed.\n+                    newContent.fireEvent(new KeyEvent(null, null, KeyEvent.KEY_PRESSED, \"\", \"\", KeyCode.BACK_SPACE, false, false, false, false));\n+                    // Move focus to the next UI element.\n+                    newContent.getParent().getChildrenUnmodifiable().get(newContent.getParent().getChildrenUnmodifiable().indexOf(newContent) + 1).requestFocus();\n+                }\n+            });\n+            \n+            final Button saveButton = new Button(\"Save\");\n+            saveButton.setOnAction(event -> {\n+                if ((newTitle.getText().isBlank() && newTitle.getText().isEmpty())\n+                        || (newContent.getText().isBlank() && newContent.getText().isEmpty())) {\n+                    JOptionPane.showMessageDialog(null, \"Type in missing fields.\", \"Invalid Text\", JOptionPane.WARNING_MESSAGE);\n+                } else {\n+                    noteToEdit.setNoteTitle(newTitle.getText());\n+                    noteToEdit.setNoteContent(newContent.getText());\n+                    updateNotes();\n+                    notesViewController.writeState();\n+                    closeEdit();\n+                }\n+                \n+                event.consume();\n+            });\n+            \n+            final VBox editNoteVBox = new VBox(DEFAULT_SPACING, newTitle, newContent, saveButton);\n+            editNoteVBox.setAlignment(Pos.CENTER_RIGHT);\n+            editNoteVBox.setStyle(\"-fx-padding: 5px;\");\n+            \n+            final Scene scene = new Scene(editNoteVBox, 250, 200);\n+            editStage.setScene(scene);\n+            editStage.show();\n+        });\n+    }\n+    \n+    /**\n+     * Convenience method to close the pop-up window for editing user created notes.\n+     */\n+    protected void closeEdit() {\n+        Platform.runLater(() -> {\n+            if (editStage != null && editStage.isShowing()) {\n+                editStage.close();\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Triggers when plugin reports undergo a change, such as when they go between executing and finishing.\n+     * \n+     * @param pluginReport \n+     */\n+    @Override\n+    public void pluginReportChanged(PluginReport pluginReport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 523}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAxNDczOnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMzoxOVrOICB3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozMzoxOVrOICB3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5ODU1OA==", "bodyText": "parameters can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538998558", "createdAt": "2020-12-09T04:33:19Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "diffHunk": "@@ -0,0 +1,539 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReportListener;\n+import au.gov.asd.tac.constellation.views.notes.state.NotesViewEntry;\n+import java.text.SimpleDateFormat;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.image.Image;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javax.swing.JOptionPane;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.controlsfx.control.CheckComboBox;\n+import org.openide.windows.WindowManager;\n+\n+/**\n+ * Handles generating UI elements for the Notes View pane and its notes.\n+ * \n+ * @author sol695510\n+ */\n+public class NotesViewPane extends BorderPane implements PluginReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final List<NotesViewEntry> notesViewEntries;\n+    \n+    private final ObservableList<String> availableFilters;\n+    private final List<String> selectedFilters;\n+    private final CheckComboBox filterCheckComboBox;\n+    private Boolean isSelectedFiltersUpdating = false;\n+    \n+    private final HBox filterNotesHBox;\n+    private final VBox notesViewPaneVBox;\n+    private final VBox addNoteVBox;\n+    private final VBox notesListVBox;\n+    private final ScrollPane notesListScrollPane;\n+    private Stage editStage;\n+    \n+    private final int DEFAULT_SPACING = 5;\n+    private final String PROMPT_COLOUR = \"#909090\";\n+    private final String USER_COLOUR = \"#C15A58\";\n+    private final String AUTO_COLOUR = \"#588BC1\";\n+    private final String DATETIME_PATTERN = \"hh:mm:ss a 'on' dd/MM/yyyy\";\n+    \n+    /**\n+     * NotesViewPane constructor.\n+     * \n+     * @param controller \n+     */\n+    public NotesViewPane(final NotesViewController controller) {\n+        \n+        notesViewController = controller;\n+        notesViewEntries = new ArrayList<>();\n+        \n+        availableFilters = FXCollections.observableArrayList(\"User Notes\", \"Auto Notes\");\n+        selectedFilters = new ArrayList<>(availableFilters); // By default all filters are selected.\n+        \n+        // CheckComboBox to select and deselect various filters for note rendering.\n+        filterCheckComboBox = new CheckComboBox(availableFilters);\n+        filterCheckComboBox.setTitle(\"Select a filter...\");\n+        filterCheckComboBox.getCheckModel().getCheckedItems().addListener(new ListChangeListener() {\n+            @Override\n+            public void onChanged(ListChangeListener.Change event) {\n+                if (!isSelectedFiltersUpdating) {\n+                    \n+                    setFilters(filterCheckComboBox.getCheckModel().getCheckedItems());\n+                    \n+                    final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+\n+                    if (activeGraph != null) {\n+                        updateNotes();\n+                        controller.writeState();\n+                    }\n+                }\n+            }\n+        });\n+        \n+        // VBox to store control items used to filter notes.\n+        filterNotesHBox = new HBox(DEFAULT_SPACING, filterCheckComboBox);\n+        filterNotesHBox.setAlignment(Pos.CENTER_LEFT);\n+        filterNotesHBox.setStyle(\"-fx-padding: 5px;\");\n+        \n+        // TextField to enter new note title.\n+        final TextField titleField = new TextField();\n+        titleField.setPromptText(\"Type a title...\");\n+        titleField.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+        \n+        // TextArea to enter new note content.\n+        final TextArea contentField = new TextArea();\n+        contentField.setPromptText(\"Type a note...\");\n+        contentField.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+        contentField.setWrapText(true);\n+        contentField.setOnKeyPressed(key -> {\n+            // If tab is typed and shift isn't being held dowm.\n+            if (key.getCode() == KeyCode.TAB && !key.isShiftDown()) {\n+                // Backspace any tabs typed.\n+                contentField.fireEvent(new KeyEvent(null, null, KeyEvent.KEY_PRESSED, \"\", \"\", KeyCode.BACK_SPACE, false, false, false, false));\n+                // Move focus to the next UI element.\n+                contentField.getParent().getChildrenUnmodifiable().get(contentField.getParent().getChildrenUnmodifiable().indexOf(contentField) + 1).requestFocus();\n+            }\n+        });\n+        \n+        // Button to add new note.\n+        final Button addNoteButton = new Button(\"Add Note\");\n+        addNoteButton.setOnAction(event -> {\n+            \n+            final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+            \n+            if (activeGraph != null) {\n+                \n+                if ((titleField.getText().isBlank() && titleField.getText().isEmpty())\n+                        || (contentField.getText().isBlank() && contentField.getText().isEmpty())) {\n+                    JOptionPane.showMessageDialog(null, \"Type in missing fields.\", \"Invalid Text\", JOptionPane.WARNING_MESSAGE);\n+                } else {\n+                    notesViewEntries.add(new NotesViewEntry(\n+                            Long.toString(ZonedDateTime.now().toInstant().toEpochMilli()),\n+                            titleField.getText(),\n+                            contentField.getText(),\n+                            true\n+                    ));\n+                    \n+                    titleField.clear();\n+                    contentField.clear();\n+                    updateNotes();\n+                    controller.writeState();\n+                    event.consume();\n+                }\n+            }\n+        });\n+        \n+        // VBox to store control items used to add new note.\n+        addNoteVBox = new VBox(DEFAULT_SPACING, titleField, contentField, addNoteButton);\n+        addNoteVBox.setAlignment(Pos.CENTER_RIGHT);\n+        addNoteVBox.setStyle(\"-fx-padding: 5px;\");\n+        addNoteVBox.setMinHeight(200);\n+        \n+        // VBox in a ScrollPane for holding expanding list of user and plugin generated notes.\n+        notesListVBox = new VBox(DEFAULT_SPACING);\n+        notesListVBox.setAlignment(Pos.BOTTOM_CENTER);\n+        notesListScrollPane = new ScrollPane();\n+        notesListScrollPane.setContent(notesListVBox);\n+        notesListScrollPane.setStyle(\"-fx-padding: 5px; -fx-background-color: transparent;\");\n+        notesListScrollPane.setFitToWidth(true);\n+        VBox.setVgrow(notesListScrollPane, Priority.ALWAYS);\n+        \n+        // Main Notes View Pane VBox.\n+        notesViewPaneVBox = new VBox(DEFAULT_SPACING, filterNotesHBox, notesListScrollPane, addNoteVBox);\n+        notesViewPaneVBox.setAlignment(Pos.BOTTOM_CENTER);\n+        setCenter(notesViewPaneVBox);\n+    }\n+    \n+    /**\n+     * Prepares the pane used by the Notes View.\n+     * \n+     * @param controller \n+     * @param pane \n+     */\n+    protected synchronized void prepareNotesViewPane(final NotesViewController controller) {\n+        controller.addAttributes();\n+        controller.readState();\n+//        controller.addAttributes();\n+    }\n+    \n+    /**\n+     * Set the plugin reports that have executed on the current graph report.\n+     */\n+    protected synchronized void setGraphReport(final NotesViewController controller) {\n+        final GraphReport currentGraphReport = GraphReportManager.getGraphReport(GraphManager.getDefault().getActiveGraph().getId());\n+        \n+        if (currentGraphReport != null) {\n+            // Iterates the list of currently executed plugins.\n+            currentGraphReport.getPluginReports().forEach(pluginReport -> {\n+                setPluginReport(pluginReport);\n+            });\n+            // Clears duplicates from the list.\n+            final List<NotesViewEntry> uniqueNotes = clearDuplicates(notesViewEntries);\n+            notesViewEntries.clear();\n+            notesViewEntries.addAll(uniqueNotes);\n+            // Update the Notes View UI.\n+            updateNotes();\n+            updateFilters();\n+            controller.writeState();\n+        }\n+    }\n+    \n+    /**\n+     * Adds a plugin report to notesViewEntries as a Notes View Entry object.\n+     * \n+     * @param pluginReport Plugin report to be added.\n+     */\n+    protected synchronized void setPluginReport(final PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {\n+                // Listener monitors changes to the plugin report as it executes and finishes. Affects the output of getMessage().\n+                pluginReport.addPluginReportListener(this);\n+                \n+                notesViewEntries.add(new NotesViewEntry(\n+                        Long.toString(pluginReport.getStartTime()),\n+                        pluginReport.getPluginName(),\n+                        pluginReport.getMessage(),\n+                        false\n+                ));\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Returns an unmodifiable view backed by notesViewEntries.\n+     * \n+     * @return Unmodifiable view backed by notesViewEntries.\n+     */\n+    protected List<NotesViewEntry> getNotes() {\n+        return Collections.unmodifiableList(notesViewEntries);\n+    }\n+    \n+    /**\n+     * Returns an unmodifiable view backed by selectedFilters.\n+     * \n+     * @return Unmodifiable view backed by selectedFilters.\n+     */\n+    protected List<String> getFilters() {\n+        return Collections.unmodifiableList(selectedFilters);\n+    }\n+    \n+    /**\n+     * Sets notesViewEntries.\n+     * \n+     * @param notesViewEntries A list of NotesViewEntry objects to add to notesViewEntries.\n+     */\n+    protected synchronized void setNotes(final List<NotesViewEntry> notesViewEntries) {\n+        Platform.runLater(() -> {\n+            this.notesViewEntries.clear();\n+            \n+            notesViewEntries.forEach(entry -> {\n+                this.notesViewEntries.add(entry);\n+            });\n+            \n+            updateNotes();\n+        });\n+    }\n+    \n+    /**\n+     * Sets selectedFilters.\n+     * \n+     * @param selectFilters A list of String objects to add to selectedFilters.\n+     */\n+    protected synchronized void setFilters(final List<String> selectedFilters) {\n+        Platform.runLater(() -> {\n+            this.selectedFilters.clear();\n+            \n+            selectedFilters.forEach(filter -> {\n+                this.selectedFilters.add(filter);\n+            });\n+            \n+            updateFilters();\n+        });\n+    }\n+    \n+    /**\n+     * Updates the UI of the notes currently being displayed in the Notes View.\n+     */\n+    protected synchronized void updateNotes() {\n+        Platform.runLater(() -> {\n+            notesListVBox.getChildren().removeAll(notesListVBox.getChildren());\n+            \n+            final List<NotesViewEntry> notesToRender = new ArrayList<>();\n+            \n+            notesViewEntries.forEach(entry -> {\n+                // Add user note to render list if \"User Note\" filter is selected.\n+                if (selectedFilters.contains(\"User Notes\") && entry.isUserCreated()) {\n+                    notesToRender.add(entry);\n+                }\n+                // Add auto note to render list if \"Auto Note\" filter is selected.\n+                if (selectedFilters.contains(\"Auto Notes\") && !entry.isUserCreated()) {\n+                    notesToRender.add(entry);\n+                }\n+            });\n+            \n+            if (CollectionUtils.isNotEmpty(notesToRender)) {\n+                notesToRender.sort(Comparator.comparing(NotesViewEntry::getDateTime));\n+                notesToRender.forEach(note -> {\n+                    createNote(note);\n+                });\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Updates the UI of the filters currently being selected in the Notes View.\n+     */\n+    protected synchronized void updateFilters() {\n+        Platform.runLater(() -> {            \n+            isSelectedFiltersUpdating = true;\n+\n+            filterCheckComboBox.getCheckModel().clearChecks();\n+\n+            selectedFilters.forEach(filter -> {\n+                filterCheckComboBox.getCheckModel().check(filter);\n+            });\n+\n+            isSelectedFiltersUpdating = false;\n+        });\n+    }\n+    \n+    /**\n+     * Clears UI elements in the Notes View and clears the list of NoteEntry objects.\n+     */\n+    protected void clearNotes() {\n+        Platform.runLater(() -> {\n+            notesListVBox.getChildren().removeAll(notesListVBox.getChildren());\n+            notesViewEntries.clear();\n+        });\n+    }\n+    \n+    /**\n+     * Iterates list of NoteEntry objects and\n+     * removes objects that share the same dateTime.\n+     * \n+     * @param duplicatedNotes A list with duplicates.\n+     * @return The given list with duplicates removed.\n+     */\n+    private synchronized List<NotesViewEntry> clearDuplicates(final List<NotesViewEntry> duplicatedNotes) {\n+        final List<NotesViewEntry> uniqueNotes = new ArrayList();\n+        Collections.reverse(duplicatedNotes);\n+        \n+        duplicatedNotes.forEach(report -> {\n+            boolean isUnique = true;\n+            \n+            for (final NotesViewEntry uniqueReport : uniqueNotes) {\n+                if (report.getDateTime().equals(uniqueReport.getDateTime())) {\n+                    isUnique = false;\n+                }\n+            }\n+            // Adds only unique notes to the list.\n+            if (isUnique) {\n+                uniqueNotes.add(report);\n+            }\n+        });\n+        \n+        return uniqueNotes;\n+    }\n+    \n+    /**\n+     * Adds all available filters to the selectedFilters list.\n+     */\n+    protected void selectAllFilters() {\n+        setFilters(availableFilters);\n+    }\n+    \n+    /**\n+     * Takes a NoteEntry object and creates the UI for it in the Notes View.\n+     *\n+     * @param newNote NoteEntry object used to create a the note UI in the Notes View.\n+     */\n+    private void createNote(final NotesViewEntry newNote) {\n+        \n+        final String noteColour = newNote.isUserCreated() ? USER_COLOUR : AUTO_COLOUR;\n+        \n+        final Label dateTimeLabel = new Label((new SimpleDateFormat(DATETIME_PATTERN).format(new Date(Long.parseLong(newNote.getDateTime())))));\n+        dateTimeLabel.setWrapText(true);\n+        dateTimeLabel.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15;\");\n+        \n+        final Label titleLabel = new Label(newNote.getNoteTitle());\n+        titleLabel.setWrapText(true);\n+        titleLabel.setStyle(\"-fx-font-weight: bold; -fx-font-size: 15;\");\n+        \n+        final Label contentLabel = new Label(newNote.getNoteContent());\n+        contentLabel.setWrapText(true);\n+        \n+        final VBox noteInformation = new VBox(DEFAULT_SPACING, dateTimeLabel, titleLabel, contentLabel);\n+        HBox.setHgrow(noteInformation, Priority.ALWAYS);\n+        \n+        final Button editButton = new Button(\"Edit\");\n+        editButton.setMinWidth(55);\n+        editButton.setOnAction(event -> {\n+            openEdit(newNote.getNoteTitle(), newNote.getNoteContent(), newNote);\n+            event.consume();\n+        });\n+        \n+        final Button deleteButton = new Button(\"Delete\");\n+        deleteButton.setMinWidth(55);\n+        \n+        final VBox noteButtons = new VBox(DEFAULT_SPACING, editButton, deleteButton);\n+        noteButtons.setAlignment(Pos.CENTER);\n+        \n+        final HBox noteBody = newNote.isUserCreated() ? new HBox(DEFAULT_SPACING, noteInformation, noteButtons) : new HBox(DEFAULT_SPACING, noteInformation);\n+        noteBody.setStyle(\"-fx-padding: 5px; -fx-background-color: \" + noteColour + \"; -fx-background-radius: 10 10 10 10;\");\n+        notesListVBox.getChildren().add(noteBody);\n+        \n+        deleteButton.setOnAction(event -> {\n+            if (notesViewEntries.removeIf(note -> note.getDateTime().equals(newNote.getDateTime()))) {\n+                notesListVBox.getChildren().remove(noteBody);\n+                notesViewController.writeState();\n+            }\n+            \n+            event.consume();\n+        });\n+        \n+        // Keeps the scroll bar at the bottom?\n+        Platform.runLater(() -> {\n+            notesListScrollPane.setVvalue(notesListScrollPane.getVmax());\n+        });\n+    }\n+    \n+    /**\n+     * Pop-up window for editing user created notes.\n+     * \n+     * @param title\n+     * @param content\n+     * @param noteToEdit\n+     */\n+    private void openEdit(final String title, final String content, final NotesViewEntry noteToEdit) {\n+        Platform.runLater(() -> {\n+            editStage = new Stage();\n+            editStage.getIcons().add(new Image(\"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\"));\n+            editStage.setTitle(\"Edit Note\");\n+//            editStage.setX(WindowManager.getDefault().getMainWindow().getBounds().getCenterX());\n+//            editStage.setY(WindowManager.getDefault().getMainWindow().getBounds().getCenterY());\n+            \n+            final TextField newTitle = new TextField(title);\n+            newTitle.setPromptText(\"Edit title...\");\n+            newTitle.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+            newTitle.setText(title);\n+            \n+            final TextArea newContent = new TextArea(content);\n+            newContent.setPromptText(\"Edit note...\");\n+            newContent.setStyle(\"-fx-prompt-text-fill: \" + PROMPT_COLOUR + \";\");\n+            newContent.setText(content);\n+            newContent.setWrapText(true);\n+            newContent.setOnKeyPressed(key -> {\n+                // If tab is typed and shift isn't being held dowm.\n+                if (key.getCode() == KeyCode.TAB && !key.isShiftDown()) {\n+                    // Backspace any tabs typed.\n+                    newContent.fireEvent(new KeyEvent(null, null, KeyEvent.KEY_PRESSED, \"\", \"\", KeyCode.BACK_SPACE, false, false, false, false));\n+                    // Move focus to the next UI element.\n+                    newContent.getParent().getChildrenUnmodifiable().get(newContent.getParent().getChildrenUnmodifiable().indexOf(newContent) + 1).requestFocus();\n+                }\n+            });\n+            \n+            final Button saveButton = new Button(\"Save\");\n+            saveButton.setOnAction(event -> {\n+                if ((newTitle.getText().isBlank() && newTitle.getText().isEmpty())\n+                        || (newContent.getText().isBlank() && newContent.getText().isEmpty())) {\n+                    JOptionPane.showMessageDialog(null, \"Type in missing fields.\", \"Invalid Text\", JOptionPane.WARNING_MESSAGE);\n+                } else {\n+                    noteToEdit.setNoteTitle(newTitle.getText());\n+                    noteToEdit.setNoteContent(newContent.getText());\n+                    updateNotes();\n+                    notesViewController.writeState();\n+                    closeEdit();\n+                }\n+                \n+                event.consume();\n+            });\n+            \n+            final VBox editNoteVBox = new VBox(DEFAULT_SPACING, newTitle, newContent, saveButton);\n+            editNoteVBox.setAlignment(Pos.CENTER_RIGHT);\n+            editNoteVBox.setStyle(\"-fx-padding: 5px;\");\n+            \n+            final Scene scene = new Scene(editNoteVBox, 250, 200);\n+            editStage.setScene(scene);\n+            editStage.show();\n+        });\n+    }\n+    \n+    /**\n+     * Convenience method to close the pop-up window for editing user created notes.\n+     */\n+    protected void closeEdit() {\n+        Platform.runLater(() -> {\n+            if (editStage != null && editStage.isShowing()) {\n+                editStage.close();\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Triggers when plugin reports undergo a change, such as when they go between executing and finishing.\n+     * \n+     * @param pluginReport \n+     */\n+    @Override\n+    public void pluginReportChanged(PluginReport pluginReport) {\n+        setPluginReport(pluginReport);\n+        \n+        // Clears duplicates from the list.\n+        final List<NotesViewEntry> uniqueNotes = clearDuplicates(notesViewEntries);\n+        notesViewEntries.clear();\n+        notesViewEntries.addAll(uniqueNotes);\n+        // Update the Notes View UI.\n+        updateNotes();\n+        notesViewController.writeState();\n+    }\n+    \n+    @Override\n+    public void addedChildReport(PluginReport parentReport, PluginReport childReport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 536}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyMTgyOnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNjozMFrOICB64Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNjozMFrOICB64Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTUyMQ==", "bodyText": "This shortcut is currently used by Named Selections so one of the shortcuts will need to change", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538999521", "createdAt": "2020-12-09T04:36:30Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyMzE1OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNzowMFrOICB7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNzowMFrOICB7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTY4MA==", "bodyText": "pluginReport can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538999680", "createdAt": "2020-12-09T04:37:00Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyNDM0OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozNzoyMlrOICB8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNjowNzowNFrOIFBNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA==", "bodyText": "merge these nested if statements", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r538999824", "createdAt": "2020-12-09T04:37:22Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAxOTE1Mw==", "bodyText": "This was a deliberate decision made in lieu of trying to merge the statements. If I merge these with a || it does not achieve the same effect of blocking plugin reports with either cases and causes an infinite loop which ends up locking up and crashing constellation.", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539019153", "createdAt": "2020-12-09T05:36:29Z", "author": {"login": "sol695510"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA=="}, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY1OTcxNw==", "bodyText": "@sol695510 So you actually merge nested ifs with && rather than || (with the outside if condition listed first). We know && will work as both if conditions need to be true in order for the nested block code to run (the || will  behave differently as then only one of these would  need to be true)\nSo what you're looking for here is:\n!pluginReport.getPluginName().contains(\"Notes View\") && !pluginReport.getPluginName().contains(\"Quality Control View\")", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539659717", "createdAt": "2020-12-09T21:26:09Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA=="}, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc0MjU5Ng==", "bodyText": "That wouldn't work either because a single plugin report's name can't have both \"Notes View\" and \"Quality Control\" in it, since I'm blocking plugin reports that either have the name containing \"Notes View\" so a plugin report from the Notes View or the name \"Quality Control\" so a plugin from the Quality Control action.\nThat makes it sound like it should be a || and should work with a || but for some reason it does not.", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r540742596", "createdAt": "2020-12-11T07:27:43Z", "author": {"login": "sol695510"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA=="}, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAxMzU2OQ==", "bodyText": "@sol695510 Don't forget that there is a not (!) in front of each of those statements so that statement actually reads \"name doesn't contain 'Notes View' and name doesn't contain 'Quality Control View'\" rather than \"name doesn't contain 'Notes View' and 'Quality Control View'\" so it's checking for each of those individually rather than both of them together.\nAn equivalent statement to the one I said is !(pluginReport.getPluginName().contains(\"Notes View\") || pluginReport.getPluginName().contains(\"Quality Control View\")) but it is preferred to propagate the !\nIf it still doesn't make sense, I'm happy to chat about this further but for it's worth, sonar will flag the same thing (and make the same suggestion I've made).", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r542013569", "createdAt": "2020-12-13T21:51:58Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA=="}, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjEzMzY1MQ==", "bodyText": "I kinda understood so I've made the changes. Took me some time because I was also trying to rectify some minor issues.", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r542133651", "createdAt": "2020-12-14T06:07:04Z", "author": {"login": "sol695510"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CS-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * Creates a new NotesViewTopComponent.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            notesViewPane.closeEdit();\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+            // Ensures plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            notesViewPane.setGraphReport(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentClosed() {\n+        \n+        GraphReportManager.removeGraphReportListener(this);\n+        notesViewPane.clearNotes();\n+        notesViewPane.prepareNotesViewPane(notesViewController);\n+        notesViewPane.closeEdit();\n+    }\n+\n+    @Override\n+    protected String createStyle() {\n+        return \"resources/notes-view.css\";\n+    }\n+\n+    @Override\n+    protected NotesViewPane createContent() {\n+        return notesViewPane;\n+    }\n+\n+    // Triggers when plugin reports are added or removed.\n+    @Override\n+    public void newPluginReport(PluginReport pluginReport) {\n+        // Omit plugin reports from the Notes View and Quality Control View.\n+        if (!pluginReport.getPluginName().contains(\"Notes View\")) {\n+            if (!pluginReport.getPluginName().contains(\"Quality Control View\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5OTgyNA=="}, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyNTg3OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozODowOVrOICB85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozODowOVrOICB85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwMDAzNg==", "bodyText": "currentState can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539000036", "createdAt": "2020-12-09T04:38:09Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewState.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes.state;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Stores all notes and filters for the selected graph's current state for the Notes View.\n+ *\n+ * @author sol695510\n+ */\n+public class NotesViewState {\n+    \n+    private final List<NotesViewEntry> notesViewEntries;\n+    private final List<String> selectedFilters;\n+    \n+    public NotesViewState() {\n+        notesViewEntries = new ArrayList();\n+        selectedFilters = new ArrayList();\n+    }\n+    \n+    public NotesViewState(NotesViewState currentState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyNzM5OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewStateIoProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozODo1NFrOICB9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozODo1NFrOICB9tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwMDI0Nw==", "bodyText": "note can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539000247", "createdAt": "2020-12-09T04:38:54Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewStateIoProvider.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes.state;\n+\n+import au.gov.asd.tac.constellation.graph.Attribute;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.io.AbstractGraphIOProvider;\n+import au.gov.asd.tac.constellation.graph.attribute.io.GraphByteReader;\n+import au.gov.asd.tac.constellation.graph.attribute.io.GraphByteWriter;\n+import au.gov.asd.tac.constellation.utilities.datastructure.ImmutableObjectCache;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * IO provider for the NotesViewState object.\n+ *\n+ * @author aldebaran30701\n+ * @author sol695510\n+ */\n+@ServiceProvider(service = AbstractGraphIOProvider.class)\n+public class NotesViewStateIoProvider extends AbstractGraphIOProvider {\n+\n+    @Override\n+    public String getName() {\n+        return NotesViewConcept.MetaAttribute.NOTES_VIEW_STATE.getName();\n+    }\n+\n+    @Override\n+    public void readObject(final int attributeId, final int elementId, final JsonNode jnode,\n+            final GraphWriteMethods graph, final Map<Integer, Integer> vertexMap, final Map<Integer, Integer> transactionMap,\n+            final GraphByteReader byteReader, final ImmutableObjectCache cache) throws IOException {\n+        \n+        if (!jnode.isNull()) {\n+            // Reading notes from state.\n+            final List<NotesViewEntry> noteViewEntries = new ArrayList<>();\n+            final ArrayNode notesArray = (ArrayNode) jnode.withArray(\"notes\");\n+            \n+            for (int i = 0; i < notesArray.size(); i++) {\n+                if (!notesArray.get(i).isNull()) {\n+                    noteViewEntries.add(new NotesViewEntry(\n+                            notesArray.get(i).get(0).asText(),\n+                            notesArray.get(i).get(1).asText(),\n+                            notesArray.get(i).get(2).asText(),\n+                            notesArray.get(i).get(3).asBoolean()\n+                    ));\n+                }\n+            }\n+            // Reading filters from state.\n+            final List<String> selectedFilters = new ArrayList<>();\n+            final ArrayNode filtersArray = (ArrayNode) jnode.withArray(\"filters\");\n+            \n+            for (int i = 0; i < filtersArray.size(); i++) { \n+                if (!filtersArray.get(i).isNull()) {\n+                    selectedFilters.add(filtersArray.get(i).asText());\n+                }\n+            }\n+            \n+            final NotesViewState state = new NotesViewState(noteViewEntries, selectedFilters);\n+            graph.setObjectValue(attributeId, elementId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void writeObject(final Attribute attribute, final int elementId, final JsonGenerator jsonGenerator,\n+            final GraphReadMethods graph, final GraphByteWriter byteWriter, final boolean verbose) throws IOException {\n+\n+        if (verbose || !graph.isDefaultValue(attribute.getId(), elementId)) {\n+            final NotesViewState originalState = graph.getObjectValue(attribute.getId(), elementId);\n+\n+            if (originalState == null) {\n+                jsonGenerator.writeNullField(attribute.getName());\n+            } else {\n+                // Make a copy in case the state on the graph is currently being modified.\n+                final NotesViewState state = new NotesViewState(originalState);\n+                \n+                jsonGenerator.writeObjectFieldStart(attribute.getName());\n+                \n+                jsonGenerator.writeArrayFieldStart(\"notes\"); // Start writing notes to state.\n+\n+                for (NotesViewEntry note : state.getNotes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDAyNzk4OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewStateIoProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozOTowN1rOICB-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNDozOTowN1rOICB-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwMDMyMw==", "bodyText": "filter can be final", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539000323", "createdAt": "2020-12-09T04:39:07Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/state/NotesViewStateIoProvider.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes.state;\n+\n+import au.gov.asd.tac.constellation.graph.Attribute;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.attribute.io.AbstractGraphIOProvider;\n+import au.gov.asd.tac.constellation.graph.attribute.io.GraphByteReader;\n+import au.gov.asd.tac.constellation.graph.attribute.io.GraphByteWriter;\n+import au.gov.asd.tac.constellation.utilities.datastructure.ImmutableObjectCache;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * IO provider for the NotesViewState object.\n+ *\n+ * @author aldebaran30701\n+ * @author sol695510\n+ */\n+@ServiceProvider(service = AbstractGraphIOProvider.class)\n+public class NotesViewStateIoProvider extends AbstractGraphIOProvider {\n+\n+    @Override\n+    public String getName() {\n+        return NotesViewConcept.MetaAttribute.NOTES_VIEW_STATE.getName();\n+    }\n+\n+    @Override\n+    public void readObject(final int attributeId, final int elementId, final JsonNode jnode,\n+            final GraphWriteMethods graph, final Map<Integer, Integer> vertexMap, final Map<Integer, Integer> transactionMap,\n+            final GraphByteReader byteReader, final ImmutableObjectCache cache) throws IOException {\n+        \n+        if (!jnode.isNull()) {\n+            // Reading notes from state.\n+            final List<NotesViewEntry> noteViewEntries = new ArrayList<>();\n+            final ArrayNode notesArray = (ArrayNode) jnode.withArray(\"notes\");\n+            \n+            for (int i = 0; i < notesArray.size(); i++) {\n+                if (!notesArray.get(i).isNull()) {\n+                    noteViewEntries.add(new NotesViewEntry(\n+                            notesArray.get(i).get(0).asText(),\n+                            notesArray.get(i).get(1).asText(),\n+                            notesArray.get(i).get(2).asText(),\n+                            notesArray.get(i).get(3).asBoolean()\n+                    ));\n+                }\n+            }\n+            // Reading filters from state.\n+            final List<String> selectedFilters = new ArrayList<>();\n+            final ArrayNode filtersArray = (ArrayNode) jnode.withArray(\"filters\");\n+            \n+            for (int i = 0; i < filtersArray.size(); i++) { \n+                if (!filtersArray.get(i).isNull()) {\n+                    selectedFilters.add(filtersArray.get(i).asText());\n+                }\n+            }\n+            \n+            final NotesViewState state = new NotesViewState(noteViewEntries, selectedFilters);\n+            graph.setObjectValue(attributeId, elementId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void writeObject(final Attribute attribute, final int elementId, final JsonGenerator jsonGenerator,\n+            final GraphReadMethods graph, final GraphByteWriter byteWriter, final boolean verbose) throws IOException {\n+\n+        if (verbose || !graph.isDefaultValue(attribute.getId(), elementId)) {\n+            final NotesViewState originalState = graph.getObjectValue(attribute.getId(), elementId);\n+\n+            if (originalState == null) {\n+                jsonGenerator.writeNullField(attribute.getName());\n+            } else {\n+                // Make a copy in case the state on the graph is currently being modified.\n+                final NotesViewState state = new NotesViewState(originalState);\n+                \n+                jsonGenerator.writeObjectFieldStart(attribute.getName());\n+                \n+                jsonGenerator.writeArrayFieldStart(\"notes\"); // Start writing notes to state.\n+\n+                for (NotesViewEntry note : state.getNotes()) {\n+                    if (note == null) {\n+                        jsonGenerator.writeNull();\n+                    } else {\n+                        jsonGenerator.writeStartArray();\n+                        jsonGenerator.writeString(note.getDateTime());\n+                        jsonGenerator.writeString(note.getNoteTitle());\n+                        jsonGenerator.writeString(note.getNoteContent());\n+                        jsonGenerator.writeBoolean(note.isUserCreated());\n+                        jsonGenerator.writeEndArray();\n+                    }\n+                }\n+                \n+                jsonGenerator.writeEndArray(); // End writing notes to state.\n+                \n+                jsonGenerator.writeArrayFieldStart(\"filters\"); // Start writing filters to state.\n+\n+                for (String filter : state.getFilters()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7005a3cb3f68c8432abb2747a98c6c749e6088d5"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODQ2MTc3OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozMzozNVrOICqfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozMzozNVrOICqfYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NDIyNw==", "bodyText": "Not sure I'm a fan of switching this to Ctrl-Alt given all other view shortcuts are Ctrl-Shift. I think it would be good to change this back to Ctrl-Shift and change the letter instead (maybe A for annotate?)", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539664227", "createdAt": "2020-12-09T21:33:35Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-N\")})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7fe60f6f41b85e9e93c99a5327d373d6480481"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODQ3NTQxOnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozNjo1MFrOICqnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTozNjo1MFrOICqnaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2NjI4MQ==", "bodyText": "Add a Thread.currentThread().interrupt() here given this is an Interrupted exception", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539666281", "createdAt": "2020-12-09T21:36:50Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * NotesViewTopComponent constructor.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.closeEdit();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            // Thread.sleep(100) used to ensure the following methods run in this order.\n+            try {\n+                Thread.sleep(100);\n+                notesViewPane.clearNotes();\n+                Thread.sleep(100);\n+                notesViewPane.prepareNotesViewPane(notesViewController);\n+                Thread.sleep(100);\n+                notesViewPane.setGraphReport(notesViewController); // Plugin reports created while the Notes View is not \"open\" will appear when it is opened later.\n+            } catch (final InterruptedException ex) {\n+                Exceptions.printStackTrace(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7fe60f6f41b85e9e93c99a5327d373d6480481"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODQ5MDYxOnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo0MDozNVrOICqwWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo0MDozNVrOICqwWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2ODU2OA==", "bodyText": "I'm ok with leaving these sleeps in for now but it might be good to add a todo to remind us to look at ways to ensure this code runs in the desired order without having to add sleeps (there are similar todos in other places in the codebase).", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r539668568", "createdAt": "2020-12-09T21:40:35Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewTopComponent.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.notes;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportListener;\n+import au.gov.asd.tac.constellation.plugins.reporting.GraphReportManager;\n+import au.gov.asd.tac.constellation.plugins.reporting.PluginReport;\n+import au.gov.asd.tac.constellation.views.JavaFxTopComponent;\n+import org.openide.awt.ActionID;\n+import org.openide.awt.ActionReference;\n+import org.openide.awt.ActionReferences;\n+import org.openide.util.Exceptions;\n+import org.openide.util.NbBundle.Messages;\n+import org.openide.windows.TopComponent;\n+\n+/**\n+ * UI component associated with the Notes View.\n+ * \n+ * @author sol695510\n+ */\n+@TopComponent.Description(\n+        preferredID = \"NotesViewTopComponent\",\n+        iconBase = \"au/gov/asd/tac/constellation/views/notes/resources/notes-view.png\",\n+        persistenceType = TopComponent.PERSISTENCE_ALWAYS)\n+@TopComponent.Registration(\n+        mode = \"explorer\",\n+        openAtStartup = false)\n+@ActionID(\n+        category = \"Window\",\n+        id = \"au.gov.asd.tac.constellation.views.notes.NotesViewTopComponent\")\n+@ActionReferences({\n+    @ActionReference(path = \"Menu/Experimental/Views\", position = 500),\n+    @ActionReference(path = \"Shortcuts\", name = \"CA-N\")})\n+@TopComponent.OpenActionRegistration(\n+        displayName = \"#CTL_NotesViewAction\",\n+        preferredID = \"NotesViewTopComponent\")\n+@Messages({\n+    \"CTL_NotesViewAction=Notes View\",\n+    \"CTL_NotesViewTopComponent=Notes View\",\n+    \"HINT_NotesViewTopComponent=Notes View\"})\n+\n+public class NotesViewTopComponent extends JavaFxTopComponent<NotesViewPane> implements GraphReportListener {\n+    \n+    private final NotesViewController notesViewController;\n+    private final NotesViewPane notesViewPane;\n+\n+    /**\n+     * NotesViewTopComponent constructor.\n+     */\n+    public NotesViewTopComponent() {\n+        \n+        setName(Bundle.CTL_NotesViewTopComponent());\n+        setToolTipText(Bundle.HINT_NotesViewTopComponent());\n+        \n+        initComponents();\n+        \n+        notesViewController = new NotesViewController(this);\n+        notesViewPane = new NotesViewPane(notesViewController);\n+        \n+        initContent();\n+    }\n+    \n+    @Override\n+    protected void handleNewGraph(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.selectAllFilters();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleGraphClosed(final Graph graph) {\n+\n+        if (needsUpdate() && graph != null) {\n+            notesViewPane.closeEdit();\n+            notesViewPane.clearNotes();\n+            notesViewPane.prepareNotesViewPane(notesViewController);\n+        }\n+    }\n+\n+    @Override\n+    protected void handleComponentOpened() {\n+        \n+        GraphReportManager.addGraphReportListener(this);\n+        final Graph activeGraph = GraphManager.getDefault().getActiveGraph();\n+        \n+        if (activeGraph != null) {\n+            // Thread.sleep(100) used to ensure the following methods run in this order.\n+            try {\n+                Thread.sleep(100);\n+                notesViewPane.clearNotes();\n+                Thread.sleep(100);\n+                notesViewPane.prepareNotesViewPane(notesViewController);\n+                Thread.sleep(100);\n+                notesViewPane.setGraphReport(notesViewController); // Plugin reports created while the Notes View is not \"open\" will appear when it is opened later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae7fe60f6f41b85e9e93c99a5327d373d6480481"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMDQxNzQ2OnYy", "diffSide": "RIGHT", "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMToyNjoyOFrOIFqXMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMToyNjoyOFrOIFqXMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgwNzg1OQ==", "bodyText": "change the parameter to the primitive boolean rather than Boolean", "url": "https://github.com/constellation-app/constellation/pull/880#discussion_r542807859", "createdAt": "2020-12-14T21:26:28Z", "author": {"login": "antares1470"}, "path": "CoreNotesView/src/au/gov/asd/tac/constellation/views/notes/NotesViewPane.java", "diffHunk": "@@ -342,11 +344,15 @@ protected synchronized void updateFilters() {\n     \n     /**\n      * Clears UI elements in the Notes View and clears the list of NoteEntry objects.\n+     * \n+     * @param clearOnlyUI True if only the UI elements are intended to be cleared.\n      */\n-    protected void clearNotes() {\n+    protected void clearNotes(final Boolean clearOnlyUI) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26ca7ffb9c7d76ea668af8d800294c0e1ecddf63"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2129, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}