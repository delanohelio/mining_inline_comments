{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTMxNDg0", "number": 732, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMjo0OFrOEQdLsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMjo0OFrOEQdLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjkwODAzOnYy", "diffSide": "RIGHT", "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNDoxMjo0OFrOG0nbaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNDozMjozNlrOG38OLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ==", "bodyText": "The vertexCount is being used to retrieve vertex ids, so setting it to the number of clusters feels wrong, and like it could be error prone. What was you reasoning behind this?", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r457825131", "createdAt": "2020-07-21T04:12:48Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgzMDIxMg==", "bodyText": "@cygnus-x-1  So it grabs the group based on the current vertex position it iterates on. My thoughts based on this is that you never want it to grab a group by an iterator that is larger than the total number of groups. This happens when you cluster it once, then add elements to the graph. When you switch off interactive mode it iterates all nodes which were effected in the last cluster so it can revert the changes. Just writing this now it seems like there may be a possibility that it iterates the vertices, but does so under the assumption that the first x elements are the same as the ones which were clustered. I did not notice any issues with testing under normal circumstances.\nMaking it the minimum of both makes it avoid checking the groups that does not exist, but still effectively returns the state to normal in the vertices that were effected under \"interactive mode\"\nDoes this sound logical, or do you suggest revisiting it. I didn't want to just re-cluster the graph in case it messed with the behaviour a user would want to target.", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r457830212", "createdAt": "2020-07-21T04:33:56Z", "author": {"login": "aldebaran30701"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ=="}, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDUzNw==", "bodyText": "If I understand correctly, the underlying issue is that a graph could be updated (nodes added, removed, etc) which renders the clustering result invalid. If this is the case I feel like the clustering result should either be removed (forcing the user to re-cluster) or automatically updated (could have an impact on performance). @arcturus2, @sirius-1 what do you think?", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r459814537", "createdAt": "2020-07-24T01:38:33Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ=="}, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMDY5Nw==", "bodyText": "You do understand correctly. Keen to hear their thoughts. \ud83d\udc4d", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r459820697", "createdAt": "2020-07-24T02:08:11Z", "author": {"login": "aldebaran30701"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ=="}, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1OTE4MQ==", "bodyText": "If the cluster is considered invalid then I would prefer we force the user to re-cluster by updating the GUI to look like it wasn't clustered. Perhaps a label somewhere in red which says something like \"You need to re-cluster because the graph has changed\" would be a nice UX touch.\n@cygnus-x-1 given our view of Constellation is to not do \"black magic\" (i.e. doing things behind the scenes without the user knowing), automatically updating the cluster I think would be going down this path. Would you agree?\nAlso if automatically updating clusters as the graph changes could be a performance hit then that's a turn off for me personally.", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r460059181", "createdAt": "2020-07-24T13:41:36Z", "author": {"login": "arcturus2"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ=="}, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTMxMTUzNA==", "bodyText": "While I agree with the \"no black magic\" principle, in this case the user had asked for the clustering to be done so i wouldn't have an issue with the view keeping that in sync with the graph.", "url": "https://github.com/constellation-app/constellation/pull/732#discussion_r461311534", "createdAt": "2020-07-28T04:32:36Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAlgorithmPlugins/src/au/gov/asd/tac/constellation/plugins/algorithms/clustering/hierarchical/HierarchicalControllerTopComponent.java", "diffHunk": "@@ -719,8 +719,10 @@ public void edit(final GraphWriteMethods graph, final PluginInteraction interact\n             final int transactionVisibilityAttribute = VisualConcept.TransactionAttribute.VISIBILITY.ensure(graph);\n \n             int nextCluster = 0;\n+            // Use the smaller of ints as to avoid going out of bounds.\n+            // usually caused when cluster has not run with new elements added.\n+            final int vertexCount = Math.min(graph.getVertexCount(), state.getCurrentNumOfClusters());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgyNTEzMQ=="}, "originalCommit": {"oid": "7a8d45aa96d50d54bd6bac062f4ca3e1f152eb1c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2225, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}