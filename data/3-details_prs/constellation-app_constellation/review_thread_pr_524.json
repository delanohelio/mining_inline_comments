{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NzU0NzA1", "number": 524, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzo1MjoyN1rOD8r5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTozNToyNVrOD8s9fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTYwMzY5OnYy", "diffSide": "RIGHT", "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewConcept.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzo1MjoyN1rOGVx8fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzo1MjoyN1rOGVx8fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MTU4Mw==", "bodyText": "Change the message here to \"Concept class\" or similar (as we don't technically consider concept classes as utility classes)", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425491583", "createdAt": "2020-05-14T23:52:27Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticView/src/au/gov/asd/tac/constellation/views/analyticview/state/AnalyticViewConcept.java", "diffHunk": "@@ -43,13 +42,17 @@ public String getName() {\n     @Override\n     public Set<Class<? extends SchemaConcept>> getParents() {\n         final Set<Class<? extends SchemaConcept>> parentSet = new HashSet<>();\n-        parentSet.add(ConstellationViewsConcept.class);\n+        parentSet.add(SchemaConcept.ConstellationViewsConcept.class);\n         return Collections.unmodifiableSet(parentSet);\n     }\n \n     public static class MetaAttribute {\n \n-        public static final SchemaAttribute ANALYTIC_VIEW_STATE = new SchemaAttribute.Builder(GraphElementType.META, \"analytic_view_state\", \"analytic_view_state\")\n+        private MetaAttribute() {\n+            throw new IllegalStateException(\"Utility class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTYwNzY2OnYy", "diffSide": "RIGHT", "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/StoreGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQyMzo1NDo0NFrOGVx-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo1Mjo0OVrOGVz2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MjE5MA==", "bodyText": "this value doesn't seem to get used and gets changed a couple lines later", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425492190", "createdAt": "2020-05-14T23:54:44Z", "author": {"login": "antares1470"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/StoreGraph.java", "diffHunk": "@@ -2179,36 +2168,73 @@ private void updateLayerMask(final int attributeId, final GraphElementType eleme\n                     }\n                 }\n             }\n-        } else if (elementType == GraphElementType.TRANSACTION) {\n-            if (transactionFilterBitmaskAttrId >= 0 && transactionLayerVisibilityAttributeId >= 0) {\n-                if (attributeId != transactionFilterBitmaskAttrId) {\n-                    avoidLayerUpdate = true;\n-                    setIntValue(transactionFilterBitmaskAttrId, elementId, bitmask);\n-                    avoidLayerUpdate = false;\n+        } else if (elementType == GraphElementType.TRANSACTION && \n+                transactionFilterBitmaskAttrId != Graph.NOT_FOUND && \n+                transactionLayerVisibilityAttributeId != Graph.NOT_FOUND) {\n+            if (attributeId != transactionFilterBitmaskAttrId) {\n+                avoidLayerUpdate = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMjg3MA==", "bodyText": "The idea is that in the case of an attribute other than the Vertex/Transaction's bitmask attribute gets updated - it will not trigger another call to update the layer. StoreGraph.setIntValue(...) has a check just before it calls to update layers so that it avoids unnecessary recalculation. Line 2370", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425522870", "createdAt": "2020-05-15T01:52:49Z", "author": {"login": "aldebaran30701"}, "path": "CoreGraphFramework/src/au/gov/asd/tac/constellation/graph/StoreGraph.java", "diffHunk": "@@ -2179,36 +2168,73 @@ private void updateLayerMask(final int attributeId, final GraphElementType eleme\n                     }\n                 }\n             }\n-        } else if (elementType == GraphElementType.TRANSACTION) {\n-            if (transactionFilterBitmaskAttrId >= 0 && transactionLayerVisibilityAttributeId >= 0) {\n-                if (attributeId != transactionFilterBitmaskAttrId) {\n-                    avoidLayerUpdate = true;\n-                    setIntValue(transactionFilterBitmaskAttrId, elementId, bitmask);\n-                    avoidLayerUpdate = false;\n+        } else if (elementType == GraphElementType.TRANSACTION && \n+                transactionFilterBitmaskAttrId != Graph.NOT_FOUND && \n+                transactionLayerVisibilityAttributeId != Graph.NOT_FOUND) {\n+            if (attributeId != transactionFilterBitmaskAttrId) {\n+                avoidLayerUpdate = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5MjE5MA=="}, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY1NDkwOnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMToyN1rOGVybUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMToyN1rOGVybUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTQ3Mw==", "bodyText": "can be merged with above if statement: if (pane == null || graph == null)", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425499473", "createdAt": "2020-05-15T00:21:27Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "diffHunk": "@@ -35,64 +42,156 @@\n public class LayersViewController {\n \n     private final LayersViewTopComponent parent;\n-    private LayersViewPane pane = null;\n \n     public LayersViewController(final LayersViewTopComponent parent) {\n         this.parent = parent;\n     }\n \n     /**\n-     * Runs a plugin which updates the bitmask that should be used to show\n-     * elements.\n+     * Update the bitmask used to determine visibility of elements on the graph.\n      */\n     public void execute() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         int newBitmask = 0b0;\n-        Label layerIdText = null;\n-        CheckBox visibilityCheckBox = null;\n-        for (Node node : pane.getLayers().getChildren()) {\n-\n-            if (GridPane.getRowIndex(node) > 0) { // skip layer 1\n-                layerIdText = GridPane.getColumnIndex(node) == 0 ? (Label) node : layerIdText;\n-                visibilityCheckBox = GridPane.getColumnIndex(node) == 1 ? (CheckBox) node : visibilityCheckBox;\n-\n-                if (GridPane.getColumnIndex(node) == 2) {\n-                    // only add layer id to list when it is checked\n-                    newBitmask |= visibilityCheckBox.isSelected() ? (1 << Integer.parseInt(layerIdText.getText()) - 1) : 0;\n-                }\n-            }\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            newBitmask |= layer.getCurrentLayerVisibility() ? (1 << layer.getLayerIndex() - 1) : 0;\n         }\n-\n         // if the newBitmask is 1, it means none of the boxes are checked. therefore display default layer 1 (All nodes)\n-        newBitmask = (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n-\n-        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask)).executeLater(GraphManager.getDefault().getActiveGraph());\n+        newBitmask = (newBitmask == 0) ? 0b1 : (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n+        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n     }\n \n     /**\n-     * Grab all queries entered into text areas and store them in the qraph's\n-     * queries.\n+     * Get all layer queries from the Layer View and store them on the qraph.\n      */\n     public void submit() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         final List<String> layerQueries = new ArrayList<>();\n-        for (Node node : pane.getLayers().getChildren()) {\n-            if (GridPane.getRowIndex(node) > 0 && GridPane.getColumnIndex(node) == 2) {\n-                final TextArea queryTextArea = (TextArea) node;\n-                layerQueries.add(queryTextArea.getText().isBlank() ? null : queryTextArea.getText());\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            layerQueries.add(layer.getLayerQuery().isEmpty() ? null : layer.getLayerQuery());\n+        }\n+        PluginExecution.withPlugin(new UpdateGraphQueriesPlugin(layerQueries))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n+    }\n+\n+    /**\n+     * Reads the graph's layers_view_state attribute and populates the Layers\n+     * View pane.\n+     */\n+    public void readState() {\n+        final LayersViewPane pane = parent.getContent();\n+        if (pane == null) {\n+            return;\n+        }\n+\n+        final Graph graph = GraphManager.getDefault().getActiveGraph();\n+        if(graph == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY1NjQ4OnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMjoxMFrOGVycMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMjoxMFrOGVycMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTY5Nw==", "bodyText": "can be merged with above if statement: if (pane == null || graph == null)", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425499697", "createdAt": "2020-05-15T00:22:10Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "diffHunk": "@@ -35,64 +42,156 @@\n public class LayersViewController {\n \n     private final LayersViewTopComponent parent;\n-    private LayersViewPane pane = null;\n \n     public LayersViewController(final LayersViewTopComponent parent) {\n         this.parent = parent;\n     }\n \n     /**\n-     * Runs a plugin which updates the bitmask that should be used to show\n-     * elements.\n+     * Update the bitmask used to determine visibility of elements on the graph.\n      */\n     public void execute() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         int newBitmask = 0b0;\n-        Label layerIdText = null;\n-        CheckBox visibilityCheckBox = null;\n-        for (Node node : pane.getLayers().getChildren()) {\n-\n-            if (GridPane.getRowIndex(node) > 0) { // skip layer 1\n-                layerIdText = GridPane.getColumnIndex(node) == 0 ? (Label) node : layerIdText;\n-                visibilityCheckBox = GridPane.getColumnIndex(node) == 1 ? (CheckBox) node : visibilityCheckBox;\n-\n-                if (GridPane.getColumnIndex(node) == 2) {\n-                    // only add layer id to list when it is checked\n-                    newBitmask |= visibilityCheckBox.isSelected() ? (1 << Integer.parseInt(layerIdText.getText()) - 1) : 0;\n-                }\n-            }\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            newBitmask |= layer.getCurrentLayerVisibility() ? (1 << layer.getLayerIndex() - 1) : 0;\n         }\n-\n         // if the newBitmask is 1, it means none of the boxes are checked. therefore display default layer 1 (All nodes)\n-        newBitmask = (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n-\n-        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask)).executeLater(GraphManager.getDefault().getActiveGraph());\n+        newBitmask = (newBitmask == 0) ? 0b1 : (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n+        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n     }\n \n     /**\n-     * Grab all queries entered into text areas and store them in the qraph's\n-     * queries.\n+     * Get all layer queries from the Layer View and store them on the qraph.\n      */\n     public void submit() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         final List<String> layerQueries = new ArrayList<>();\n-        for (Node node : pane.getLayers().getChildren()) {\n-            if (GridPane.getRowIndex(node) > 0 && GridPane.getColumnIndex(node) == 2) {\n-                final TextArea queryTextArea = (TextArea) node;\n-                layerQueries.add(queryTextArea.getText().isBlank() ? null : queryTextArea.getText());\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            layerQueries.add(layer.getLayerQuery().isEmpty() ? null : layer.getLayerQuery());\n+        }\n+        PluginExecution.withPlugin(new UpdateGraphQueriesPlugin(layerQueries))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n+    }\n+\n+    /**\n+     * Reads the graph's layers_view_state attribute and populates the Layers\n+     * View pane.\n+     */\n+    public void readState() {\n+        final LayersViewPane pane = parent.getContent();\n+        if (pane == null) {\n+            return;\n+        }\n+\n+        final Graph graph = GraphManager.getDefault().getActiveGraph();\n+        if(graph == null){\n+            return;\n+        }\n+\n+        PluginExecution.withPlugin(new LayersViewStateReader(pane))\n+                .executeLater(graph);\n+    }\n+\n+    /**\n+     * Executes a plugin to write the current layers to the graph's\n+     * layers_view_state Attribute.\n+     */\n+    public void writeState() {\n+        final LayersViewPane pane = parent.getContent();\n+        if (pane == null) {\n+            return;\n+        }\n+\n+        final Graph graph = GraphManager.getDefault().getActiveGraph();\n+        if(graph == null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY1ODA1OnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMjo1OVrOGVydIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyMjo1OVrOGVydIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTkzOQ==", "bodyText": "can be merged with first if statement: if (graph == null || pane == null)", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425499939", "createdAt": "2020-05-15T00:22:59Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewController.java", "diffHunk": "@@ -35,64 +42,156 @@\n public class LayersViewController {\n \n     private final LayersViewTopComponent parent;\n-    private LayersViewPane pane = null;\n \n     public LayersViewController(final LayersViewTopComponent parent) {\n         this.parent = parent;\n     }\n \n     /**\n-     * Runs a plugin which updates the bitmask that should be used to show\n-     * elements.\n+     * Update the bitmask used to determine visibility of elements on the graph.\n      */\n     public void execute() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         int newBitmask = 0b0;\n-        Label layerIdText = null;\n-        CheckBox visibilityCheckBox = null;\n-        for (Node node : pane.getLayers().getChildren()) {\n-\n-            if (GridPane.getRowIndex(node) > 0) { // skip layer 1\n-                layerIdText = GridPane.getColumnIndex(node) == 0 ? (Label) node : layerIdText;\n-                visibilityCheckBox = GridPane.getColumnIndex(node) == 1 ? (CheckBox) node : visibilityCheckBox;\n-\n-                if (GridPane.getColumnIndex(node) == 2) {\n-                    // only add layer id to list when it is checked\n-                    newBitmask |= visibilityCheckBox.isSelected() ? (1 << Integer.parseInt(layerIdText.getText()) - 1) : 0;\n-                }\n-            }\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            newBitmask |= layer.getCurrentLayerVisibility() ? (1 << layer.getLayerIndex() - 1) : 0;\n         }\n-\n         // if the newBitmask is 1, it means none of the boxes are checked. therefore display default layer 1 (All nodes)\n-        newBitmask = (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n-\n-        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask)).executeLater(GraphManager.getDefault().getActiveGraph());\n+        newBitmask = (newBitmask == 0) ? 0b1 : (newBitmask > 1) ? newBitmask & ~0b1 : newBitmask;\n+        PluginExecution.withPlugin(new UpdateGraphBitmaskPlugin(newBitmask))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n     }\n \n     /**\n-     * Grab all queries entered into text areas and store them in the qraph's\n-     * queries.\n+     * Get all layer queries from the Layer View and store them on the qraph.\n      */\n     public void submit() {\n-        // ensure pane is set to the content of the parent view.\n-        pane = parent.getContent();\n+        final LayersViewPane pane = parent.getContent();\n         if (pane == null) {\n             return;\n         }\n-\n         final List<String> layerQueries = new ArrayList<>();\n-        for (Node node : pane.getLayers().getChildren()) {\n-            if (GridPane.getRowIndex(node) > 0 && GridPane.getColumnIndex(node) == 2) {\n-                final TextArea queryTextArea = (TextArea) node;\n-                layerQueries.add(queryTextArea.getText().isBlank() ? null : queryTextArea.getText());\n+        for (final LayerDescription layer : pane.getlayers()) {\n+            layerQueries.add(layer.getLayerQuery().isEmpty() ? null : layer.getLayerQuery());\n+        }\n+        PluginExecution.withPlugin(new UpdateGraphQueriesPlugin(layerQueries))\n+                .executeLater(GraphManager.getDefault().getActiveGraph());\n+    }\n+\n+    /**\n+     * Reads the graph's layers_view_state attribute and populates the Layers\n+     * View pane.\n+     */\n+    public void readState() {\n+        final LayersViewPane pane = parent.getContent();\n+        if (pane == null) {\n+            return;\n+        }\n+\n+        final Graph graph = GraphManager.getDefault().getActiveGraph();\n+        if(graph == null){\n+            return;\n+        }\n+\n+        PluginExecution.withPlugin(new LayersViewStateReader(pane))\n+                .executeLater(graph);\n+    }\n+\n+    /**\n+     * Executes a plugin to write the current layers to the graph's\n+     * layers_view_state Attribute.\n+     */\n+    public void writeState() {\n+        final LayersViewPane pane = parent.getContent();\n+        if (pane == null) {\n+            return;\n+        }\n+\n+        final Graph graph = GraphManager.getDefault().getActiveGraph();\n+        if(graph == null){\n+            return;\n+        }\n+\n+        PluginExecution.withPlugin(new LayersViewStateWriter(pane.getlayers()))\n+                .executeLater(graph);\n+    }\n+\n+    /**\n+     * Read the current state from the graph.\n+     */\n+    private static final class LayersViewStateReader extends SimpleReadPlugin {\n+\n+        private LayersViewPane pane;\n+\n+        public LayersViewStateReader(final LayersViewPane pane) {\n+            this.pane = pane;\n+        }\n+\n+        @Override\n+        public void read(final GraphReadMethods graph, final PluginInteraction interaction, final PluginParameters parameters) throws InterruptedException, PluginException {\n+            if (graph == null) {\n+                return;\n+            }\n+\n+            final int layersViewStateAttributeId = LayersViewConcept.MetaAttribute.LAYERS_VIEW_STATE.get(graph);\n+            if (layersViewStateAttributeId == Graph.NOT_FOUND) {\n+                return;\n+            }\n+\n+            final LayersViewState currentState = graph.getObjectValue(layersViewStateAttributeId, 0);\n+            if (currentState == null) {\n+                return;\n+            }\n+\n+            if (pane == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY2NTU5OnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewPane.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDoyNjo1M1rOGVyhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTo0MzoyN1rOGVztew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTA2Mw==", "bodyText": "Curious as to why this is declared as a Node rather than a TextArea (given all the subsequent typecasting)?", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425501063", "createdAt": "2020-05-15T00:26:53Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewPane.java", "diffHunk": "@@ -109,47 +115,101 @@ public LayersViewPane(final LayersViewController controller) {\n         options.prefWidthProperty().bind(layersViewPane.widthProperty());\n \n         this.setCenter(layersViewPane);\n+        controller.writeState();\n     }\n \n-    private void createLayer(final boolean defaultLayer) {\n-        final Label layerIdText = new Label(String.format(\"%02d\", ++currentIndex));\n+    public LayersViewController getController() {\n+        return controller;\n+    }\n+\n+    private int createLayer(final int currentIndex, final boolean checkBoxSelected, final String query, final String description) {\n+        final Label layerIdText = new Label(String.format(\"%02d\", currentIndex));\n         layerIdText.setMinWidth(30);\n         layerIdText.setPrefWidth(40);\n         layerIdText.setTextAlignment(TextAlignment.CENTER);\n         layerIdText.setPadding(new Insets(0, 0, 0, 10));\n \n-        final CheckBox visibilityCheckBox = new CheckBox();\n-        visibilityCheckBox.setMinWidth(60);\n-        visibilityCheckBox.setPadding(new Insets(0, 30, 0, 15));\n-        visibilityCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {\n+        final Node visibilityCheckBox = new CheckBox();\n+        ((CheckBox) visibilityCheckBox).setMinWidth(60);\n+        ((CheckBox) visibilityCheckBox).setPadding(new Insets(0, 30, 0, 15));\n+        ((CheckBox) visibilityCheckBox).setSelected(checkBoxSelected);\n+        visibilityCheckBox.setOnMouseClicked(e -> {\n+            final Node source = (Node) e.getSource();\n+            final LayerDescription layer = layers.get(GridPane.getRowIndex(source) - 1);\n+            layer.setCurrentLayerVisibility(!layer.getCurrentLayerVisibility());\n             controller.submit();\n             controller.execute();\n+            controller.writeState();\n         });\n \n-        final TextArea queryTextArea = new TextArea();\n-        queryTextArea.setPrefRowCount(1);\n+        final Node queryTextArea = new TextArea();\n+        ((TextArea) queryTextArea).setPrefRowCount(1);\n+        ((TextArea) queryTextArea).setText(query);\n+        ((TextArea) queryTextArea).focusedProperty().addListener((observable, oldVal, newVal) -> {\n+            if (!newVal) {\n+                final LayerDescription layer = layers.get(currentIndex - 1);\n+                layer.setQueryText(((TextArea) queryTextArea).getText());\n+                controller.writeState();\n+            }\n+        });\n \n-        final TextArea descriptionTextArea = new TextArea();\n-        descriptionTextArea.setPrefRowCount(1);\n+        final Node descriptionTextArea = new TextArea();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMDUwNw==", "bodyText": "I couldn't manage to get an event to trigger on the TextArea when it was inserted in the GridPane. So I had to declare it as a Node, then add the event to it.", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425520507", "createdAt": "2020-05-15T01:43:27Z", "author": {"login": "aldebaran30701"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewPane.java", "diffHunk": "@@ -109,47 +115,101 @@ public LayersViewPane(final LayersViewController controller) {\n         options.prefWidthProperty().bind(layersViewPane.widthProperty());\n \n         this.setCenter(layersViewPane);\n+        controller.writeState();\n     }\n \n-    private void createLayer(final boolean defaultLayer) {\n-        final Label layerIdText = new Label(String.format(\"%02d\", ++currentIndex));\n+    public LayersViewController getController() {\n+        return controller;\n+    }\n+\n+    private int createLayer(final int currentIndex, final boolean checkBoxSelected, final String query, final String description) {\n+        final Label layerIdText = new Label(String.format(\"%02d\", currentIndex));\n         layerIdText.setMinWidth(30);\n         layerIdText.setPrefWidth(40);\n         layerIdText.setTextAlignment(TextAlignment.CENTER);\n         layerIdText.setPadding(new Insets(0, 0, 0, 10));\n \n-        final CheckBox visibilityCheckBox = new CheckBox();\n-        visibilityCheckBox.setMinWidth(60);\n-        visibilityCheckBox.setPadding(new Insets(0, 30, 0, 15));\n-        visibilityCheckBox.selectedProperty().addListener((observable, oldValue, newValue) -> {\n+        final Node visibilityCheckBox = new CheckBox();\n+        ((CheckBox) visibilityCheckBox).setMinWidth(60);\n+        ((CheckBox) visibilityCheckBox).setPadding(new Insets(0, 30, 0, 15));\n+        ((CheckBox) visibilityCheckBox).setSelected(checkBoxSelected);\n+        visibilityCheckBox.setOnMouseClicked(e -> {\n+            final Node source = (Node) e.getSource();\n+            final LayerDescription layer = layers.get(GridPane.getRowIndex(source) - 1);\n+            layer.setCurrentLayerVisibility(!layer.getCurrentLayerVisibility());\n             controller.submit();\n             controller.execute();\n+            controller.writeState();\n         });\n \n-        final TextArea queryTextArea = new TextArea();\n-        queryTextArea.setPrefRowCount(1);\n+        final Node queryTextArea = new TextArea();\n+        ((TextArea) queryTextArea).setPrefRowCount(1);\n+        ((TextArea) queryTextArea).setText(query);\n+        ((TextArea) queryTextArea).focusedProperty().addListener((observable, oldVal, newVal) -> {\n+            if (!newVal) {\n+                final LayerDescription layer = layers.get(currentIndex - 1);\n+                layer.setQueryText(((TextArea) queryTextArea).getText());\n+                controller.writeState();\n+            }\n+        });\n \n-        final TextArea descriptionTextArea = new TextArea();\n-        descriptionTextArea.setPrefRowCount(1);\n+        final Node descriptionTextArea = new TextArea();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMTA2Mw=="}, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY4MDgzOnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewTopComponent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDozNTowOFrOGVyqdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDozNTowOFrOGVyqdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMzM0OQ==", "bodyText": "I note that this function as well as the two above it (handleNewGraph, handleGraphOpened) have very similar implementations. Maybe this is something that can be taken advantage of.", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425503349", "createdAt": "2020-05-15T00:35:08Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/LayersViewTopComponent.java", "diffHunk": "@@ -76,12 +81,25 @@ protected LayersViewPane createContent() {\n \n     @Override\n     protected void handleNewGraph(final Graph graph) {\n-        // Old code - implement new handler if needed\n-//        if (attributeCalculatorPane != null && graph != null) {\n-//            attributeCalculatorPane.updateAttributes(graph);\n-//        }\n+        if (graph != null) {\n+            layersViewPane.setDefaultLayers();\n+            layersViewController.readState();\n+        }\n+    }\n+    \n+    @Override\n+    protected void handleGraphOpened(final Graph graph) {\n+        if (graph != null) {\n+            layersViewPane.setDefaultLayers();\n+            layersViewController.readState();\n+        }\n+    }\n+    \n+    @Override\n+    protected void handleComponentOpened() {\n+        layersViewPane.setDefaultLayers();\n+        layersViewController.readState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY4MjU1OnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/state/LayersViewConcept.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDozNTo1NFrOGVyrYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDozNTo1NFrOGVyrYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMzU4Ng==", "bodyText": "Change message to \"Concept class\" or similar", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425503586", "createdAt": "2020-05-15T00:35:54Z", "author": {"login": "antares1470"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/state/LayersViewConcept.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.state;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.schema.attribute.SchemaAttribute;\n+import au.gov.asd.tac.constellation.graph.schema.concept.SchemaConcept;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Attribute provider for attributes specific to the Layers View.\n+ *\n+ * @author aldebaran30701\n+ */\n+@ServiceProvider(service = SchemaConcept.class)\n+public class LayersViewConcept extends SchemaConcept {\n+\n+    @Override\n+    public String getName() {\n+        return \"Layers View\";\n+    }\n+\n+    @Override\n+    public Set<Class<? extends SchemaConcept>> getParents() {\n+        final Set<Class<? extends SchemaConcept>> parentSet = new HashSet<>();\n+        parentSet.add(SchemaConcept.ConstellationViewsConcept.class);\n+        return Collections.unmodifiableSet(parentSet);\n+    }\n+\n+    public static class MetaAttribute {\n+\n+        private MetaAttribute() {\n+            throw new IllegalStateException(\"Utility class\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d083134a0471e4d30cbbee15096f3d7903ae2837"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTY5Nzc2OnYy", "diffSide": "RIGHT", "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/query/QueryEvaluator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDo0NDo1M1rOGVy0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMDo0NDo1M1rOGVy0iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNTkyOA==", "bodyText": "There is actually a function StringUtils.isNotBlank. I'd use that instead (and do this for the other instances of this in the file)", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425505928", "createdAt": "2020-05-15T00:44:53Z", "author": {"login": "antares1470"}, "path": "CoreUtilities/src/au/gov/asd/tac/constellation/utilities/query/QueryEvaluator.java", "diffHunk": "@@ -15,110 +15,227 @@\n  */\n package au.gov.asd.tac.constellation.utilities.query;\n \n+import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Deque;\n-import java.util.LinkedList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Stack;\n+import org.apache.commons.lang3.StringUtils;\n \n /**\n  * Evaluates a query expression made up of a chain of operations of the form (a\n  * op1 b op2 c ...).\n  * <p>\n  * Based on\n- * https://www.geeksforgeeks.org/stack-set-4-evaluation-postfix-expression/\n+ * https://www.geeksforgeeks.org/operatorStack-set-4-evaluation-postfix-expression/\n  *\n  * @author aldebaran30701\n  */\n public class QueryEvaluator {\n+\n+    private static final String PARENTHESES_REGEX = \"(?<!(?<![^\\\\\\\\]\\\\\\\\(?:\\\\\\\\\"\n+            + \"{2}){0,10})\\\\\\\\)\\\\)|(?<!(?<![^\\\\\\\\]\\\\\\\\(?:\\\\\\\\{2}){0,10})\\\\\\\\)\\\\(\";\n     \n-    private static final String SPLIT_REGEX = \"(?<!(?<![^\\\\\\\\]\\\\\\\\(?:\\\\\\\\{2}){0,10})\\\\\\\\)\\\\)|(?<!(?<![^\\\\\\\\]\\\\\\\\(?:\\\\\\\\{2}){0,10})\\\\\\\\)\\\\(\";\n-    \n-    private enum Operator {\n-        AND(1),\n-        OR(2);\n+    private QueryEvaluator() {\n+    }\n \n-        final int precedence;\n+    /**\n+     * Tokeniser takes input from the user and breaks it into terms such as\n+     * <ul>\n+     * <li>color == #ffffff</li>\n+     * <li>selected == true</li>\n+     * <li>||</li>\n+     * <li>&&</li>\n+     * <li>(</li>\n+     * <li>)</li>\n+     * </ul>\n+     * <p>\n+     * A backslash can be used to escape one of the terms. eg.\n+     * <ul>\n+     * <li>color == \\(#ffffff\\) - Input by user</li>\n+     * <li>color == (#ffffff) - Evaluated as</li>\n+     * </ul>\n+     * <p>\n+     * iterate all chars in input - check if moreToEscape if (, add term to list\n+     * of tokens if |, and previousChar was | then add || to list of tokens if\n+     * &, and previousChar was & then add && to list of tokens if ), add term to\n+     * list of tokens else, an escaped character or normal input so add to\n+     * currentString\n+     * <p>\n+     * @param input the query as written by the user to tokenise.\n+     * @return List<String> stringTokens is the items within the input string,\n+     * stored as a list.\n+     */\n+    public static List<String> tokeniser(final String input) {\n+        final List<String> stringTokens = new ArrayList<>();\n+        String currentString = \"\";\n+        char prevChar = Character.UNASSIGNED;\n \n-        private Operator(final int precedence) {\n-            this.precedence = precedence;\n+        if (StringUtils.isBlank(input)) {\n+            return Collections.emptyList();\n         }\n-    }\n-    \n-    private static final Map<String, Operator> OPERATORS = Map.ofEntries(Map.entry(\"&&\", Operator.AND),Map.entry(\"||\", Operator.OR));\n \n-    private static boolean isHigerPrecedence(final String operator, final String subOperator) {\n-        return (OPERATORS.containsKey(subOperator) \n-                && OPERATORS.get(subOperator).precedence >= OPERATORS.get(operator).precedence);\n+        for (final char c : input.toCharArray()) {\n+            if (c == '(' && prevChar != '\\\\') {\n+                if (StringUtils.isBlank(currentString)) {\n+                    currentString = \"(\";\n+                }\n+                currentString = StringUtils.trim(currentString);\n+                stringTokens.add(currentString);\n+                currentString = \"\";\n+            } else if (c == '|' && prevChar == '|') {\n+                currentString = currentString.substring(0, currentString.lastIndexOf(prevChar));\n+                if (!StringUtils.isBlank(currentString)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52a66b584226f0ecb5bf306587e1232aea5238d"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0OTc3NzkxOnYy", "diffSide": "RIGHT", "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/utilities/LayersAddContextMenu.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMTozNToyNVrOGVzlTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwMjowMjowNVrOGVz_mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODQxNQ==", "bodyText": "@aldebaran30701 thanks for including this Wishlist item already. Hope you liked the idea too.\nA minor comment and you don't have to do it now but things like these \"[NO DESCRIPTION]\" strings can be made constants because it makes it easier to update and just stands out more like LAYER_MENU etc.\nIf we want to support multiple languages down the track, it also helps because all of the strings are in one place rather than nested in the code.", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425518415", "createdAt": "2020-05-15T01:35:25Z", "author": {"login": "arcturus2"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/utilities/LayersAddContextMenu.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.utilities;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphConstants;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.graph.visual.contextmenu.ContextMenuProvider;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.utilities.graphics.Vector3f;\n+import au.gov.asd.tac.constellation.views.layers.layer.LayerDescription;\n+import au.gov.asd.tac.constellation.views.layers.state.LayersViewConcept;\n+import au.gov.asd.tac.constellation.views.layers.state.LayersViewState;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Add context menu for Layers View\n+ *\n+ * @author aldebaran30701\n+ */\n+@ServiceProvider(service = ContextMenuProvider.class, position = 210)\n+public class LayersAddContextMenu implements ContextMenuProvider {\n+\n+    private static final String LAYER_MENU = \"Layers\";\n+    private static final String ADD_TO_LAYER = \"Add Selection to Layer...\";\n+\n+    @Override\n+    public List<String> getMenuPath(final GraphElementType elementType) {\n+        return Arrays.asList(LAYER_MENU, ADD_TO_LAYER);\n+    }\n+\n+    @Override\n+    public List<String> getItems(final GraphReadMethods graph, final GraphElementType elementType, final int elementId) {\n+        if (elementType == GraphElementType.VERTEX || elementType == GraphElementType.TRANSACTION) {\n+            final int stateAttributeId = LayersViewConcept.MetaAttribute.LAYERS_VIEW_STATE.get(graph);\n+            final List<String> currentLayers = new ArrayList<>();\n+            if (stateAttributeId != GraphConstants.NOT_FOUND) {\n+                final LayersViewState currentState = graph.getObjectValue(stateAttributeId, 0);\n+                for (final LayerDescription layer : currentState.getLayers()) {\n+                    if (layer.getLayerIndex() > 1) {\n+                        final String description = StringUtils.isBlank(layer.getLayerDescription())\n+                                ? \"[NO DESCRIPTION]\" : layer.getLayerDescription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52a66b584226f0ecb5bf306587e1232aea5238d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyNTE0NQ==", "bodyText": "I was looking at this thinking the same thing!\nNo worries, I've got a few suggestions for extra features I can put forward if they seem valuable to users.", "url": "https://github.com/constellation-app/constellation/pull/524#discussion_r425525145", "createdAt": "2020-05-15T02:02:05Z", "author": {"login": "aldebaran30701"}, "path": "CoreLayersView/src/au/gov/asd/tac/constellation/views/layers/utilities/LayersAddContextMenu.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.views.layers.utilities;\n+\n+import au.gov.asd.tac.constellation.graph.Graph;\n+import au.gov.asd.tac.constellation.graph.GraphConstants;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.manager.GraphManager;\n+import au.gov.asd.tac.constellation.graph.visual.contextmenu.ContextMenuProvider;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.utilities.graphics.Vector3f;\n+import au.gov.asd.tac.constellation.views.layers.layer.LayerDescription;\n+import au.gov.asd.tac.constellation.views.layers.state.LayersViewConcept;\n+import au.gov.asd.tac.constellation.views.layers.state.LayersViewState;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Add context menu for Layers View\n+ *\n+ * @author aldebaran30701\n+ */\n+@ServiceProvider(service = ContextMenuProvider.class, position = 210)\n+public class LayersAddContextMenu implements ContextMenuProvider {\n+\n+    private static final String LAYER_MENU = \"Layers\";\n+    private static final String ADD_TO_LAYER = \"Add Selection to Layer...\";\n+\n+    @Override\n+    public List<String> getMenuPath(final GraphElementType elementType) {\n+        return Arrays.asList(LAYER_MENU, ADD_TO_LAYER);\n+    }\n+\n+    @Override\n+    public List<String> getItems(final GraphReadMethods graph, final GraphElementType elementType, final int elementId) {\n+        if (elementType == GraphElementType.VERTEX || elementType == GraphElementType.TRANSACTION) {\n+            final int stateAttributeId = LayersViewConcept.MetaAttribute.LAYERS_VIEW_STATE.get(graph);\n+            final List<String> currentLayers = new ArrayList<>();\n+            if (stateAttributeId != GraphConstants.NOT_FOUND) {\n+                final LayersViewState currentState = graph.getObjectValue(stateAttributeId, 0);\n+                for (final LayerDescription layer : currentState.getLayers()) {\n+                    if (layer.getLayerIndex() > 1) {\n+                        final String description = StringUtils.isBlank(layer.getLayerDescription())\n+                                ? \"[NO DESCRIPTION]\" : layer.getLayerDescription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxODQxNQ=="}, "originalCommit": {"oid": "a52a66b584226f0ecb5bf306587e1232aea5238d"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2346, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}