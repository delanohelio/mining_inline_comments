{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDcxNjEx", "number": 737, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowOTo1MVrOERTihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo0MDoxNVrOERq8YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgxMzgyOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowOTo1MVrOG18ZKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjoyOTowN1rOG19riA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzE5NQ==", "bodyText": "Sonar is identifying using double brace initialisation as a bug. Consequently, it would be good to remove the need to use it", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459217195", "createdAt": "2020-07-23T05:09:51Z", "author": {"login": "antares1470"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>() {\n+            {\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+                put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+                put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+                put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+                put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+                put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+                put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+                put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+                put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+                put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037d7011be215033329ea88af76102fd1c549546"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzODI4MA==", "bodyText": "Yep, easily fixed.", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459238280", "createdAt": "2020-07-23T06:29:07Z", "author": {"login": "arcturus2"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>() {\n+            {\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+                put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+                put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+                put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+                put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+                put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+                put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+                put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+                put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+                put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+                put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+                put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNzE5NQ=="}, "originalCommit": {"oid": "037d7011be215033329ea88af76102fd1c549546"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTY0ODMyOnYy", "diffSide": "RIGHT", "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMTo0MDoxNVrOG2g36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNzo1MFrOG2up9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDg4OQ==", "bodyText": "This will probably work just fine, but could be improved by comparing more of the type object than just the name.", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r459814889", "createdAt": "2020-07-24T01:40:15Z", "author": {"login": "cygnus-x-1"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>();\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+\n+        for (int vertex = 0; vertex < graph.getVertexCount(); vertex++) {\n+            final int vertexId = graph.getVertex(vertex);\n+            final SchemaVertexType oldType = graph.getObjectValue(typeAttribute, vertexId);\n+\n+            if (typesToUpgrade.containsKey(oldType.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e92213720e735a6c9e53943c71f1d348eed9df9"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MDY5Mg==", "bodyText": "Perhaps @cygnus-x-1 though remember that this is upgrading from v3 so we should be safe to assume what the type is at this point.", "url": "https://github.com/constellation-app/constellation/pull/737#discussion_r460040692", "createdAt": "2020-07-24T13:07:50Z", "author": {"login": "arcturus2"}, "path": "CoreAnalyticSchema/src/au/gov/asd/tac/constellation/graph/schema/analytic/compatibility/AnalyticSchemaV4UpdateProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.graph.schema.analytic.compatibility;\n+\n+import au.gov.asd.tac.constellation.graph.StoreGraph;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.SchemaFactoryUtilities;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.AnalyticSchemaFactory;\n+import au.gov.asd.tac.constellation.graph.schema.analytic.concept.AnalyticConcept;\n+import au.gov.asd.tac.constellation.graph.schema.type.SchemaVertexType;\n+import au.gov.asd.tac.constellation.graph.versioning.SchemaUpdateProvider;\n+import au.gov.asd.tac.constellation.graph.versioning.UpdateProvider;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.openide.util.lookup.ServiceProvider;\n+\n+/**\n+ * Upgrade Vertex Types that have changed.\n+ * <p>\n+ * The detection regex and validation regex was reviewed and improved.\n+ *\n+ * @author arcturus\n+ */\n+@ServiceProvider(service = UpdateProvider.class)\n+public class AnalyticSchemaV4UpdateProvider extends SchemaUpdateProvider {\n+\n+    public static final int SCHEMA_VERSION_THIS_UPDATE = 4;\n+\n+    @Override\n+    protected SchemaFactory getSchema() {\n+        return SchemaFactoryUtilities.getSchemaFactory(AnalyticSchemaFactory.ANALYTIC_SCHEMA_ID);\n+    }\n+\n+    @Override\n+    public int getFromVersionNumber() {\n+        return AnalyticSchemaV3UpdateProvider.SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    public int getToVersionNumber() {\n+        return SCHEMA_VERSION_THIS_UPDATE;\n+    }\n+\n+    @Override\n+    protected void schemaUpdate(final StoreGraph graph) {\n+        final int typeAttribute = AnalyticConcept.VertexAttribute.TYPE.get(graph);\n+\n+        final Map<String, SchemaVertexType> typesToUpgrade = new HashMap<>();\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA1.getName(), AnalyticConcept.VertexType.SHA1);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.SHA256.getName(), AnalyticConcept.VertexType.SHA256);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.COUNTRY.getName(), AnalyticConcept.VertexType.COUNTRY);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.GEOHASH.getName(), AnalyticConcept.VertexType.GEOHASH);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MGRS.getName(), AnalyticConcept.VertexType.MGRS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.MD5.getName(), AnalyticConcept.VertexType.MD5);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV4.getName(), AnalyticConcept.VertexType.IPV4);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.IPV6.getName(), AnalyticConcept.VertexType.IPV6);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.EMAIL_ADDRESS.getName(), AnalyticConcept.VertexType.EMAIL_ADDRESS);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.HOST_NAME.getName(), AnalyticConcept.VertexType.HOST_NAME);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.URL.getName(), AnalyticConcept.VertexType.URL);\n+        typesToUpgrade.put(AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER.getName(), AnalyticConcept.VertexType.TELEPHONE_IDENTIFIER);\n+\n+        for (int vertex = 0; vertex < graph.getVertexCount(); vertex++) {\n+            final int vertexId = graph.getVertex(vertex);\n+            final SchemaVertexType oldType = graph.getObjectValue(typeAttribute, vertexId);\n+\n+            if (typesToUpgrade.containsKey(oldType.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxNDg4OQ=="}, "originalCommit": {"oid": "8e92213720e735a6c9e53943c71f1d348eed9df9"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}